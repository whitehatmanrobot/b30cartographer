imeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Invokes the canonical CreateDateTimeOffset function. For information about the canonical CreateDateTimeOffset function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The new date.</returns>
      <param name="year">The year part of the new date.</param>
      <param name="month">The month part of the new date.</param>
      <param name="day">The day part of the new date.</param>
      <param name="hour">The hour part of the new date.</param>
      <param name="minute">The minute part of the new date.</param>
      <param name="second">The seconds part of the new date. Note that you can specify fractions of a second with this parameter.</param>
      <param name="timeZoneOffset">The time zone offset part of the new date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>Invokes the canonical CreateTime function. For information about the canonical CreateTime function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The new time span.</returns>
      <param name="hour">The hours part of the new time span.</param>
      <param name="minute">The minutes part of the new time span.</param>
      <param name="second">The seconds part of the new time span. Note that you can specify fractions of a second with this parameter.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffDays function. For information about the canonical DiffDays function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of days between <paramref name="dateValue1" /> and <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">A valid date.</param>
      <param name="dateValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffDays function. For information about the canonical DiffDays function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of days between <paramref name="dateValue1" /> and <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">A valid date time offset.</param>
      <param name="dateValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffHours function. For information about the canonical DiffHours function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of hours between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffHours function. For information about the canonical DiffHours function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of hours between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date time offset.</param>
      <param name="timeValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Invokes the canonical DiffHours function. For information about the canonical DiffHours function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of hours between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid time span.</param>
      <param name="timeValue2">A valid time span.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffMicroseconds function. For information about the canonical DiffMicroseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of microseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffMicroseconds function. For information about the canonical DiffMicroseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of microseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date time offset.</param>
      <param name="timeValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Invokes the canonical DiffMicroseconds function. For information about the canonical DiffMicroseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of microseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid time span.</param>
      <param name="timeValue2">A valid time span.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffMilliseconds function. For information about the canonical DiffMilliseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of milliseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffMilliseconds function. For information about the canonical DiffMilliseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of milliseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date time offset.</param>
      <param name="timeValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Invokes the canonical DiffMilliseconds function. For information about the canonical DiffMilliseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of milliseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid time span.</param>
      <param name="timeValue2">A valid time span.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffMinutes function. For information about the canonical DiffMinutes function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of minutes between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffMinutes function. For information about the canonical DiffMinutes function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of minutes between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date time offset.</param>
      <param name="timeValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Invokes the canonical DiffMinutes function. For information about the canonical DiffMinutes function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of minutes between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid time span.</param>
      <param name="timeValue2">A valid time span.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffMonths function. For information about the canonical DiffMonths function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of months between <paramref name="dateValue1" /> and <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">A valid date.</param>
      <param name="dateValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffMonths function. For information about the canonical DiffMonths function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of months between <paramref name="dateValue1" /> and <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">A valid date time offset.</param>
      <param name="dateValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffNanoseconds function. For information about the canonical DiffNanoseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of nanoseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffNanoseconds function. For information about the canonical DiffNanoseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of nanoseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date time offset.</param>
      <param name="timeValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Invokes the canonical DiffNanoseconds function. For information about the canonical DiffNanoseconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of nanoseconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffSeconds function. For information about the canonical DiffSeconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of seconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date.</param>
      <param name="timeValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffSeconds function. For information about the canonical DiffSeconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of seconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid date time offset.</param>
      <param name="timeValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Invokes the canonical DiffSeconds function. For information about the canonical DiffSeconds function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of seconds between <paramref name="timeValue1" /> and <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">A valid time span.</param>
      <param name="timeValue2">A valid time span.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Invokes the canonical DiffYears function. For information about the canonical DiffYears function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of years between <paramref name="dateValue1" /> and <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">A valid date.</param>
      <param name="dateValue2">A valid date.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical DiffYears function. For information about the canonical DiffYears function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of years between <paramref name="dateValue1" /> and <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">A valid date time offset.</param>
      <param name="dateValue2">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical GetTotalOffsetMinutes function. For information about the canonical GetTotalOffsetMinutes function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The number of minutes that the <paramref name="dateTimeOffsetArgument" /> is offset from GMT. This is generally between +780 and -780 (+ or - 13 hrs). </returns>
      <param name="dateTimeOffsetArgument">A valid date time offset.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>Invokes the canonical Left function. For information about the canonical Left function, see String Canonical Functions (Entity SQL).</summary>
      <returns>The leftmost <paramref name="length" /> number of characters of <paramref name="stringArgument" />.</returns>
      <param name="stringArgument">A valid string expression.</param>
      <param name="length">The number of characters to return.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Reverse(System.String)">
      <summary>Invokes the canonical Reverse function. For information about the canonical Reverse function, see String Canonical Functions (Entity SQL).</summary>
      <returns>The input string with the order of the characters reversed.</returns>
      <param name="stringArgument">A valid string.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>Invokes the canonical Right function. For information about the canonical Right function, see String Canonical Functions (Entity SQL).</summary>
      <returns>The rightmost <paramref name="length" /> number of characters of <paramref name="stringArgument" />.</returns>
      <param name="stringArgument">A valid string expression.</param>
      <param name="length">The number of characters to return.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Invokes the canonical StDev function. For information about the canonical StDev function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Invokes the canonical StDevP function. For information about the canonical StDevP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical standard deviation of the population in the input collection.</returns>
      <param name="collection">A set of numeric values.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>Invokes the canonical Truncate function. For information about the canonical Truncate function, see Math Canonical Functions (Entity SQL).</summary>
      <returns>
        <paramref name="value" /> truncated to the length or precision specified by <paramref name="digits" />.</returns>
      <param name="value">The number to truncate.</param>
      <param name="digits">The length or precision to truncate to.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Invokes the canonical Truncate function. For information about the canonical Truncate function, see Math Canonical Functions (Entity SQL).</summary>
      <returns>
        <paramref name="value" /> truncated to the length or precision specified by <paramref name="digits" />.</returns>
      <param name="value">The number to truncate.</param>
      <param name="digits">The length or precision to truncate to.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>Invokes the canonical TruncateTime function. For information about the canonical TruncateTime function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The input date with the time portion cleared.</returns>
      <param name="dateValue">The date to truncate.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>Invokes the canonical TruncateTime function. For information about the canonical TruncateTime function, see Date and Time Canonical Functions (Entity SQL).</summary>
      <returns>The input date with the time portion cleared.</returns>
      <param name="dateValue">The date time offset to truncate.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Invokes the canonical Var function. For information about the canonical Var function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of all values in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specifed collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="M:System.Data.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Invokes the canonical VarP function. For information about the canonical VarP function, see Aggregate Canonical Functions (Entity SQL).</summary>
      <returns>The statistical variance of the population in the specified collection.</returns>
      <param name="collection">The set of values for which the variance will be calculated.</param>
    </member>
    <member name="T:System.Data.Objects.IObjectSet`1">
      <summary>Provides functionality to allow making modifications to a set of data objects.</summary>
      <typeparam name="TEntity">The type of an entity object returned from the query.</typeparam>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.AddObject(`0)">
      <summary>Notifies the set that an object that represents a new entity must be added to the set.</summary>
      <param name="entity">The new object to add to the set.</param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.Attach(`0)">
      <summary>Notifies the set that an object that represents an existing entity must be added to the set.</summary>
      <param name="entity">The existing object to add to the set.</param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.DeleteObject(`0)">
      <summary>Notifies the set that an object that represents an existing entity must be deleted from the set. </summary>
      <param name="entity">The existing object to delete from the set.</param>
    </member>
    <member name="M:System.Data.Objects.IObjectSet`1.Detach(`0)">
      <summary>Notifies the set that an object that represents an existing entity must be detached from the set.</summary>
      <param name="entity">The object to detach from the set.</param>
    </member>
    <member name="T:System.Data.Objects.MergeOption">
      <summary>Specifies how objects being loaded into the object context are merged with objects already in the object context. </summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.AppendOnly">
      <summary>Objects that already exist in the object context are not loaded from the data source. This is the default behavior for queries or when calling the <see cref="M:System.Data.Objects.DataClasses.EntityCollection`1.Load(System.Data.Objects.MergeOption)" /> method on an <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.OverwriteChanges">
      <summary>Objects are always loaded from the data source. Any property changes made to objects in the object context are overwritten by the data source values.</summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.PreserveChanges">
      <summary>In the Entity Framework version 3.5 SP1, the unmodified properties of objects in the object context are overwritten with server values. </summary>
    </member>
    <member name="F:System.Data.Objects.MergeOption.NoTracking">
      <summary>Objects are maintained in a <see cref="F:System.Data.EntityState.Detached" /> state and are not tracked in the <see cref="T:System.Data.Objects.ObjectStateManager" />.</summary>
    </member>
    <member name="T:System.Data.Objects.ObjectContext">
      <summary>Provides facilities for querying and working with entity data as objects. </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectContext" /> class with the given connection. During construction, the metadata workspace is extracted from the <see cref="T:System.Data.EntityClient.EntityConnection" /> object.</summary>
      <param name="connection">An <see cref="T:System.Data.EntityClient.EntityConnection" /> that contains references to the model and to the data source connection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connection" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="connection" /> is invalid.-or-The metadata workspace is invalid. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.Data.EntityClient.EntityConnection,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectContext" /> class with a given connection and entity container name.</summary>
      <param name="connection">An <see cref="T:System.Data.EntityClient.EntityConnection" /> that contains references to the model and to the data source connection.</param>
      <param name="defaultContainerName">The name of the default entity container. When the <paramref name="defaultContainerName" /> is set through this method, the property becomes read-only.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connection" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="connection" />, <paramref name="defaultContainerName" />, or metadata workspace is not valid.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectContext" /> class with the given connection string and default entity container name.</summary>
      <param name="connectionString">The connection string, which also provides access to the metadata information.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="connectionString" /> is invalid.-or-The metadata workspace is not valid. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectContext" /> class with a given connection string and entity container name.  </summary>
      <param name="connectionString">The connection string, which also provides access to the metadata information.</param>
      <param name="defaultContainerName">The name of the default entity container. When the <paramref name="defaultContainerName" /> is set through this method, the property becomes read-only.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="connectionString" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="connectionString" />, <paramref name="defaultContainerName" />, or metadata workspace is not valid.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AcceptAllChanges">
      <summary>Accepts all changes made to objects in the object context.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AddObject(System.String,System.Object)">
      <summary>Adds an object to the object context. </summary>
      <param name="entitySetName">Represents the entity set name, which may optionally be qualified by the entity container name. </param>
      <param name="entity">The <see cref="T:System.Object" /> to add.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="entity" /> parameter is null. -or-The <paramref name="entitySetName" /> does not qualify.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)">
      <summary>Sets the <see cref="P:System.Data.Objects.ObjectStateEntry.CurrentValues" /> property of the <see cref="T:System.Data.Objects.ObjectStateEntry" /> to match the property values of a supplied object.</summary>
      <returns>The updated object.</returns>
      <param name="entitySetName">The name of the entity set to which the object belongs.</param>
      <param name="currentEntity">The detached object that has property updates to apply to the original object.</param>
      <typeparam name="TEntity">The entity type of the object.</typeparam>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entitySetName" /> or <paramref name="current" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> from <paramref name="entitySetName" /> does not match the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> of the object’s <see cref="T:System.Data.EntityKey" />.-or-When the object is not in the <see cref="T:System.Data.Objects.ObjectStateManager" /> or it is in a <see cref="F:System.Data.EntityState.Detached" /> state.-or- The entity key of the supplied object is invalid.</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="entitySetName" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)">
      <summary>Sets the <see cref="P:System.Data.Objects.ObjectStateEntry.OriginalValues" /> property of the <see cref="T:System.Data.Objects.ObjectStateEntry" /> to match the property values of a supplied object.</summary>
      <returns>The updated object.</returns>
      <param name="entitySetName">The name of the entity set to which the object belongs.</param>
      <param name="originalEntity">The detached object that has original values to apply to the object.</param>
      <typeparam name="TEntity">The type of the entity object.</typeparam>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entitySetName" /> or <paramref name="original" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> from <paramref name="entitySetName" /> does not match the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> of the object’s <see cref="T:System.Data.EntityKey" />.-or-When an <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the object cannot be found in the <see cref="T:System.Data.Objects.ObjectStateManager" />. -or-When the object is in an <see cref="F:System.Data.EntityState.Added" /> or a <see cref="F:System.Data.EntityState.Detached" /> state.-or- The entity key of the supplied object is invalid or has property changes.</exception>
      <exception cref="T:System.ArgumentException">When <paramref name="entitySetName" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)">
      <summary>Applies property changes from a detached object to an object already attached to the object context.</summary>
      <param name="entitySetName">The name of the entity set to which the object belongs.</param>
      <param name="changed">The detached object that has property updates to apply to the original object.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entitySetName" /> is null or an empty string.-or-When <paramref name="changed" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> from <paramref name="entitySetName" /> does not match the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> of the object’s <see cref="T:System.Data.EntityKey" />.-or-When the entity is in a state other than <see cref="F:System.Data.EntityState.Modified" /> or <see cref="F:System.Data.EntityState.Unchanged" />.-or- The original object is not attached to the context.</exception>
      <exception cref="T:System.ArgumentException">When the type of the <paramref name="changed" /> object is not the same type as the original object.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Attach(System.Data.Objects.DataClasses.IEntityWithKey)">
      <summary>Attaches an object or object graph to the object context when the object has an entity key. </summary>
      <param name="entity">The object to attach.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="entity" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">Invalid entity key. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.AttachTo(System.String,System.Object)">
      <summary>Attaches an object or object graph to the object context in a specific entity set. </summary>
      <param name="entitySetName">Represents the entity set name, which may optionally be qualified by the entity container name. </param>
      <param name="entity">The <see cref="T:System.Object" /> to attach. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="entity" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">Invalid entity set.-or-The object has a temporary key. -or-The object has an <see cref="T:System.Data.EntityKey" /> and the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> does not match with the entity set passed in as an argument of the method.-or-The object does not have an <see cref="T:System.Data.EntityKey" /> and no entity set is provided.-or-Any object from the object graph has a temporary <see cref="T:System.Data.EntityKey" />.-or-Any object from the object graph has an invalid <see cref="T:System.Data.EntityKey" /> (for example, values in the key do not match values in the object).-or-The entity set could not be found from a given <paramref name="entitySetName" /> name and entity container name.-or-Any object from the object graph already exists in another state manager.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.CommandTimeout">
      <summary>Gets or sets the timeout value, in seconds, for all object context operations. A null value indicates that the default value of the underlying provider will be used.</summary>
      <returns>An <see cref="T:System.Int32" /> value that is the timeout value, in seconds.</returns>
      <exception cref="T:System.ArgumentException">The timeout value is less than 0. </exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.Connection">
      <summary>Gets the connection used by the object context.</summary>
      <returns>A <see cref="T:System.Data.Common.DbConnection" /> object that is the connection.</returns>
      <exception cref="T:System.ObjectDisposedException">When the <see cref="T:System.Data.Objects.ObjectContext" /> instance has been disposed.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.ContextOptions">
      <summary>Gets the <see cref="T:System.Data.Objects.ObjectContextOptions" /> instance that contains options that affect the behavior of the <see cref="T:System.Data.Objects.ObjectContext" />.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectContextOptions" /> instance that contains options that affect the behavior of the <see cref="T:System.Data.Objects.ObjectContext" />.  </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateDatabase">
      <summary>Creates the database by using the current data source connection and the metadata in the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateDatabaseScript">
      <summary>Generates a data definition langauge (DDL) script that creates schema objects (tables, primary keys, foreign keys) for the metadata in the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />.</summary>
      <returns>A DDL script that creates schema objects for the metadata in the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)">
      <summary>Creates the entity key for a specific object, or returns the entity key if it already exists. </summary>
      <returns>The <see cref="T:System.Data.EntityKey" /> of the object.</returns>
      <param name="entitySetName">The fully qualified name of the entity set to which the entity object belongs.</param>
      <param name="entity">The object for which the entity key is being retrieved. The object must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithKey" />.</param>
      <exception cref="T:System.ArgumentNullException">When either parameter is null. </exception>
      <exception cref="T:System.ArgumentException">When <paramref name="entitySetName" /> is empty.-or- When the type of the <paramref name="entity" /> object does not exist in the entity set.-or-When the <paramref name="entitySetName" /> is not fully qualified.</exception>
      <exception cref="T:System.InvalidOperationException">When the entity key cannot be constructed successfully based on the supplied parameters.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObject``1">
      <summary>Creates and returns an instance of the requested type .</summary>
      <returns>An instance of the requested type <paramref name="T" />, or an instance of a derived type that enables <paramref name="T" /> to be used with the Entity Framework. The returned object is either an instance of the requested type or an instance of a derived type that enables the requested type to be used with the Entity Framework.</returns>
      <typeparam name="T">Type of object to be returned.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObjectSet``1">
      <summary>Creates a new <see cref="T:System.Data.Objects.ObjectSet`1" /> instance that is used to query, add, modify, and delete objects of the specified entity type.</summary>
      <returns>The new <see cref="T:System.Data.Objects.ObjectSet`1" /> instance.</returns>
      <typeparam name="TEntity">Entity type of the requested <see cref="T:System.Data.Objects.ObjectSet`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">When the <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> property is not set on the <see cref="T:System.Data.Objects.ObjectContext" />.-or-When the specified type belongs to more than one entity set.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateObjectSet``1(System.String)">
      <summary>Creates a new <see cref="T:System.Data.Objects.ObjectSet`1" /> instance that is used to query, add, modify, and delete objects of the specified type and with the specified entity set name.</summary>
      <returns>The new <see cref="T:System.Data.Objects.ObjectSet`1" /> instance.</returns>
      <param name="entitySetName">Name of the entity set for the returned <see cref="T:System.Data.Objects.ObjectSet`1" />. The string must be qualified by the default container name if the <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> property is not set on the <see cref="T:System.Data.Objects.ObjectContext" />. </param>
      <typeparam name="TEntity">Entity type of the requested <see cref="T:System.Data.Objects.ObjectSet`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">When the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> from <paramref name="entitySetName" /> does not match the <see cref="T:System.Data.Metadata.Edm.EntitySet" /> of the object’s <see cref="T:System.Data.EntityKey" />.-or-When the <see cref="P:System.Data.Objects.ObjectContext.DefaultContainerName" /> property is not set on the <see cref="T:System.Data.Objects.ObjectContext" /> and the name is not qualified as part of the <paramref name="entitySetName" /> parameter.-or-When the specified type belongs to more than one entity set.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Generates an equivalent type that can be used with the Entity Framework for each type in the supplied enumeration.</summary>
      <param name="types"></param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Creates an <see cref="T:System.Data.Objects.ObjectQuery`1" /> in the current object context by using the specified query string.</summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectQuery`1" /> of the specified type.</returns>
      <param name="queryString">The query string to be executed.</param>
      <param name="parameters">Parameters to pass to the query.</param>
      <typeparam name="T">The entity type of the returned <see cref="T:System.Data.Objects.ObjectQuery`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">The <paramref name="queryString" /> or <paramref name="parameters" /> parameter is null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DatabaseExists">
      <summary>Checks if the database that is specified as the database in the current data source connection exists on the data source. </summary>
      <returns>true if the database exists.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.DefaultContainerName">
      <summary>Gets or sets the default container name.</summary>
      <returns>A <see cref="T:System.String" /> that is the default container name. </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DeleteDatabase">
      <summary>Deletes the database that is specified as the database in the current data source connection.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DeleteObject(System.Object)">
      <summary>Marks an object for deletion. </summary>
      <param name="entity">An object that specifies the entity to delete. The object can be in any state except <see cref="F:System.Data.EntityState.Detached" />. </param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Detach(System.Object)">
      <summary>Removes the object from the object context.</summary>
      <param name="entity">Object to be detached. Only the <paramref name="entity" /> is removed; if there are any related objects that are being tracked by the same <see cref="T:System.Data.Objects.ObjectStateManager" />, those will not be detached automatically.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="entity" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="entity" /> is not associated with this <see cref="T:System.Data.Objects.ObjectContext" /> (for example, was newly created and not associated with any context yet, or was obtained through some other context, or was already detached).</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.DetectChanges">
      <summary>Ensures that <see cref="T:System.Data.Objects.ObjectStateEntry" /> changes are synchronized with changes in all objects that are tracked by the <see cref="T:System.Data.Objects.ObjectStateManager" />.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Dispose">
      <summary>Releases the resources used by the object context.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Dispose(System.Boolean)">
      <summary>Releases the resources used by the object context.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.MergeOption,System.Data.Objects.ObjectParameter[])">
      <summary>Executes the given stored procedure or function that is defined in the data source and expressed in the conceptual model, with the specified parameters, and merge option. Returns a typed <see cref="T:System.Data.Objects.ObjectResult`1" />.</summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectResult`1" /> for the data that is returned by the stored procedure.</returns>
      <param name="functionName">The name of the stored procedure or function. The name can include the container name, such as &lt;Container Name&gt;.&lt;Function Name&gt;. When the default container name is known, only the function name is required.</param>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when executing the query. </param>
      <param name="parameters">An array of <see cref="T:System.Data.Objects.ObjectParameter" /> objects.</param>
      <typeparam name="TElement">The entity type of the <see cref="T:System.Data.Objects.ObjectResult`1" /> returned when the function is executed against the data source. This type must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" />.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> is null or empty -or-<paramref name="function" /> is not found.</exception>
      <exception cref="T:System.InvalidOperationException">The entity reader does not support this <paramref name="function" />.-or-There is a type mismatch on the reader and the <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Executes a stored procedure or function that is defined in the data source and mapped in the conceptual model, with the specified parameters. Returns a typed <see cref="T:System.Data.Objects.ObjectResult`1" />.</summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectResult`1" /> for the data that is returned by the stored procedure.</returns>
      <param name="functionName">The name of the stored procedure or function. The name can include the container name, such as &lt;Container Name&gt;.&lt;Function Name&gt;. When the default container name is known, only the function name is required.</param>
      <param name="parameters">An array of <see cref="T:System.Data.Objects.ObjectParameter" /> objects.</param>
      <typeparam name="TElement">The entity type of the <see cref="T:System.Data.Objects.ObjectResult`1" /> returned when the function is executed against the data source. This type must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker" />.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> is null or empty -or-<paramref name="function" /> is not found.</exception>
      <exception cref="T:System.InvalidOperationException">The entity reader does not support this <paramref name="function" />.-or-There is a type mismatch on the reader and the <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Executes a stored procedure or function that is defined in the data source and expressed in the conceptual model; discards any results returned from the function; and returns the number of rows affected by the execution.</summary>
      <returns>The number of rows affected.</returns>
      <param name="functionName">The name of the stored procedure or function. The name can include the container name, such as &lt;Container Name&gt;.&lt;Function Name&gt;. When the default container name is known, only the function name is required.</param>
      <param name="parameters">An array of <see cref="T:System.Data.Objects.ObjectParameter" /> objects.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> is null or empty -or-<paramref name="function" /> is not found.</exception>
      <exception cref="T:System.InvalidOperationException">The entity reader does not support this <paramref name="function" />.-or-There is a type mismatch on the reader and the <paramref name="function" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])">
      <summary>Executes an arbitrary command directly against the data source using the existing connection.</summary>
      <returns>The number of rows affected.</returns>
      <param name="commandText">The command to execute, in the native language of the data source.</param>
      <param name="parameters">An array of parameters to pass to the command.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])">
      <summary>Executes a query directly against the data source that returns a sequence of typed results. </summary>
      <returns>An enumeration of objects of type <paramref name="TResult" />.</returns>
      <param name="commandText">The command to execute, in the native language of the data source.</param>
      <param name="parameters">An array of parameters to pass to the command.</param>
      <typeparam name="TElement"></typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Objects.MergeOption,System.Object[])">
      <summary>Executes a query directly against the data source and returns a sequence of typed results. Specify the entity set and the merge option so that query results can be tracked as entities. </summary>
      <returns>An enumeration of objects of type <paramref name="TResult" />.</returns>
      <param name="commandText">The command to execute, in the native language of the data source.</param>
      <param name="entitySetName">The entity set of the <paramref name="TResult" /> type. If an entity set name is not provided, the results are not going to be tracked.</param>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when executing the query. The default is <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
      <param name="parameters">An array of parameters to pass to the command.</param>
      <typeparam name="TEntity"></typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetKnownProxyTypes">
      <summary>Returns all the existing proxy types.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of all the existing proxy types.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetObjectByKey(System.Data.EntityKey)">
      <summary>Returns an object that has the specified entity key.</summary>
      <returns>An <see cref="T:System.Object" /> that is an instance of an entity type.</returns>
      <param name="key">The key of the object to be found.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="key" /> parameter is null.</exception>
      <exception cref="T:System.Data.ObjectNotFoundException">The object is not found in either the <see cref="T:System.Data.Objects.ObjectStateManager" /> or the data source.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.GetObjectType(System.Type)">
      <summary>Returns the entity type of the POCO entity associated with a proxy object of a specified type.</summary>
      <returns>The <see cref="T:System.Type" /> of the associated POCO entity.</returns>
      <param name="type">The <see cref="T:System.Type" /> of the proxy object.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String)">
      <summary>Explicitly loads an object related to the supplied object by the specified navigation property and using the default merge option. </summary>
      <param name="entity">The entity for which related objects are to be loaded.</param>
      <param name="navigationProperty">The name of the navigation property that returns the related objects to be loaded.</param>
      <exception cref="T:System.InvalidOperationException">When the <paramref name="entity" /> is in a <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added," /> or <see cref="F:System.Data.EntityState.Deleted" /> state,-or-When the <paramref name="entity" /> is attached to another instance of <see cref="T:System.Data.Objects.ObjectContext" />. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Objects.MergeOption)">
      <summary>Explicitly loads an object that is related to the supplied object by the specified navigation property and using the specified merge option. </summary>
      <param name="entity">The entity for which related objects are to be loaded.</param>
      <param name="navigationProperty">The name of the navigation property that returns the related objects to be loaded.</param>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> value to use when you load the related objects.</param>
      <exception cref="T:System.InvalidOperationException">When the <paramref name="entity" /> is in a <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added," /> or <see cref="F:System.Data.EntityState.Deleted" /> state,-or-When the <paramref name="entity" /> is attached to another instance of <see cref="T:System.Data.Objects.ObjectContext" />. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>Explicitly loads an object that is related to the supplied object by the specified LINQ query and by using the default merge option. </summary>
      <param name="entity">The source object for which related objects are to be loaded.</param>
      <param name="selector">A LINQ expression that defines the related objects to be loaded.</param>
      <typeparam name="TEntity"></typeparam>
      <exception cref="T:System.ArgumentException">When <paramref name="selector" /> does not supply a valid input parameter.</exception>
      <exception cref="T:System.ArgumentNullException">When <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the <paramref name="entity" /> is in a <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added," /> or <see cref="F:System.Data.EntityState.Deleted" /> state,-or-When the <paramref name="entity" /> is attached to another instance of <see cref="T:System.Data.Objects.ObjectContext" />. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Objects.MergeOption)">
      <summary>Explicitly loads an object that is related to the supplied object by the specified LINQ query and by using the specified merge option. </summary>
      <param name="entity">The source object for which related objects are to be loaded.</param>
      <param name="selector">A LINQ expression that defines the related objects to be loaded.</param>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> value to use when you load the related objects.</param>
      <typeparam name="TEntity"></typeparam>
      <exception cref="T:System.ArgumentException">When <paramref name="selector" /> does not supply a valid input parameter.</exception>
      <exception cref="T:System.ArgumentNullException">When <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the <paramref name="entity" /> is in a <see cref="F:System.Data.EntityState.Detached" />, <see cref="F:System.Data.EntityState.Added," /> or <see cref="F:System.Data.EntityState.Deleted" /> state,-or-When the <paramref name="entity" /> is attached to another instance of <see cref="T:System.Data.Objects.ObjectContext" />. </exception>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.MetadataWorkspace">
      <summary>Gets the metadata workspace used by the object context. </summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> object associated with this <see cref="T:System.Data.Objects.ObjectContext" />.</returns>
    </member>
    <member name="E:System.Data.Objects.ObjectContext.ObjectMaterialized">
      <summary>Occurs when a new entity object is created from data in the data source as part of a query or load operation. </summary>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.ObjectStateManager">
      <summary>Gets the object state manager used by the object context to track object changes.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectStateManager" /> used by this <see cref="T:System.Data.Objects.ObjectContext" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContext.QueryProvider">
      <summary>Gets the LINQ query provider associated with this object context.</summary>
      <returns>The <see cref="T:System.Linq.IQueryProvider" /> instance used by this object context.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>Updates a collection of objects in the object context with data from the data source. </summary>
      <param name="refreshMode">A <see cref="T:System.Data.Objects.RefreshMode" /> value that indicates whether property changes in the object context are overwritten with property values from the data source.</param>
      <param name="collection">An <see cref="T:System.Collections.IEnumerable" /> collection of objects to refresh.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="refreshMode" /> is not valid.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> is empty. -or- An object is not attached to the context. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Refresh(System.Data.Objects.RefreshMode,System.Object)">
      <summary>Updates an object in the object context with data from the data source. </summary>
      <param name="refreshMode">One of the <see cref="T:System.Data.Objects.RefreshMode" /> values that specifies which mode to use for refreshing the <see cref="T:System.Data.Objects.ObjectStateManager" />.</param>
      <param name="entity">The object to be refreshed. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="refreshMode" /> is not valid.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collection" /> is empty. -or- An object is not attached to the context. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges">
      <summary>Persists all updates to the data source and resets change tracking in the object context.</summary>
      <returns>The number of objects in an <see cref="F:System.Data.EntityState.Added" />, <see cref="F:System.Data.EntityState.Modified" />, or <see cref="F:System.Data.EntityState.Deleted" /> state when <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> was called.</returns>
      <exception cref="T:System.Data.OptimisticConcurrencyException">An optimistic concurrency violation has occurred in the data source.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)">
      <summary>Persists all updates to the data source and optionally resets change tracking in the object context.</summary>
      <returns>The number of objects in an <see cref="F:System.Data.EntityState.Added" />, <see cref="F:System.Data.EntityState.Modified" />, or <see cref="F:System.Data.EntityState.Deleted" /> state when <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> was called.</returns>
      <param name="acceptChangesDuringSave">This parameter is needed for client-side transaction support. If true, the change tracking on all objects is reset after <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" /> finishes. If false, you must call the <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChanges" /> method after <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Boolean)" />. </param>
      <exception cref="T:System.Data.OptimisticConcurrencyException">An optimistic concurrency violation has occurred.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)">
      <summary>Persists all updates to the data source with the specified <see cref="T:System.Data.Objects.SaveOptions" />.</summary>
      <returns>The number of objects in an <see cref="F:System.Data.EntityState.Added" />, <see cref="F:System.Data.EntityState.Modified" />, or <see cref="F:System.Data.EntityState.Deleted" /> state when <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> was called.</returns>
      <param name="options">A <see cref="T:System.Data.Objects.SaveOptions" /> value that determines the behavior of the operation.</param>
      <exception cref="T:System.Data.OptimisticConcurrencyException">An optimistic concurrency violation has occurred.</exception>
    </member>
    <member name="E:System.Data.Objects.ObjectContext.SavingChanges">
      <summary>Occurs when changes are saved to the data source. </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>Translates a <see cref="T:System.Data.Common.DbDataReader" /> that contains rows of entity data to objects of the requested entity type.</summary>
      <returns>An enumeration of objects of type <paramref name="TResult" />.</returns>
      <param name="reader">The <see cref="T:System.Data.Common.DbDataReader" /> that contains entity data to translate into entity objects.</param>
      <typeparam name="TElement"></typeparam>
      <exception cref="T:System.ArgumentNullException">When <paramref name="reader" /> is null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Objects.MergeOption)">
      <summary>Translates a <see cref="T:System.Data.Common.DbDataReader" /> that contains rows of entity data to objects of the requested entity type, in a specific entity set, and with the specified merge option.</summary>
      <returns>An enumeration of objects of type <paramref name="TResult" />.</returns>
      <param name="reader">The <see cref="T:System.Data.Common.DbDataReader" /> that contains entity data to translate into entity objects.</param>
      <param name="entitySetName">The entity set of the <paramref name="TResult" /> type.</param>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when translated objects are added to the object context. The default is <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
      <typeparam name="TEntity"></typeparam>
      <exception cref="T:System.ArgumentNullException">When <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">When the supplied <paramref name="mergeOption" /> is not a valid <see cref="T:System.Data.Objects.MergeOption" /> value.</exception>
      <exception cref="T:System.InvalidOperationException">When the supplied <paramref name="entitySetName" /> is not a valid entity set for the <paramref name="TResult" /> type. </exception>
    </member>
    <member name="M:System.Data.Objects.ObjectContext.TryGetObjectByKey(System.Data.EntityKey,System.Object@)">
      <summary>Returns an object that has the specified entity key.</summary>
      <returns>true if the object was retrieved successfully. false if the <paramref name="key" /> is temporary, the connection is null, or the <paramref name="value" /> is null.</returns>
      <param name="key">The key of the object to be found.</param>
      <param name="value">When this method returns, contains the object.</param>
      <exception cref="T:System.ArgumentException">Incompatible metadata for <paramref name="key" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null.</exception>
    </member>
    <member name="T:System.Data.Objects.ObjectContextOptions">
      <summary>Defines options that affect the behavior of the <see cref="T:System.Data.Objects.ObjectContext" />. </summary>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.LazyLoadingEnabled">
      <summary>Gets or sets a Boolean value that determines whether related objects are loaded automatically when a navigation property is accessed.</summary>
      <returns>A <see cref="T:System.Boolean" /> value that is true when lazy loading is enabled; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.ProxyCreationEnabled">
      <summary>Gets or sets a Boolean value that determines whether proxy instances are created for custom data classes that are persistence ignorant. </summary>
      <returns>A <see cref="T:System.Boolean" /> value that is true when proxies are created; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectContextOptions.UseLegacyPreserveChangesBehavior">
      <summary>Gets or sets a <see cref="T:System.Boolean" /> value that determines whether to use the legacy <see cref="F:System.Data.Objects.MergeOption.PreserveChanges" /> behavior. </summary>
      <returns>true if the legacy <see cref="F:System.Data.Objects.MergeOption.PreserveChanges" /> behavior should be used; otherwise, false.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectMaterializedEventArgs">
      <summary>Contains the data for the <see cref="E:System.Data.Objects.ObjectContext.ObjectMaterialized" /> event.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectMaterializedEventArgs.Entity">
      <summary>Gets the entity object that was created.</summary>
      <returns>The entity object that was created.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectMaterializedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Data.Objects.ObjectContext.ObjectMaterialized" /> event of the <see cref="T:System.Data.Objects.ObjectContext" />.</summary>
      <param name="sender">The <see cref="T:System.Data.Objects.ObjectContext" /> instance that triggered the event. </param>
      <param name="e">An <see cref="T:System.Data.Objects.ObjectMaterializedEventArgs" /> object that contains the event data. </param>
    </member>
    <member name="T:System.Data.Objects.ObjectParameter">
      <summary>Represents a query parameter that is passed to an object query. </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectParameter.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectParameter" /> class with the specified name and value. </summary>
      <param name="name">The parameter name. This name should not include the "@" parameter marker that is used in Entity SQL statements, only the actual name. The first character of the expression must be a letter. Any successive characters in the expression must be either letters, numbers, or an underscore (_) character.</param>
      <param name="value">The initial value (and inherently, the type) of the parameter.</param>
      <exception cref="T:System.ArgumentNullException">If the value of either argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If the value of the name argument is not valid. Parameter names must start with a letter and can only contain letters, numbers, and underscores.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameter.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectParameter" /> class with the specified name and type. </summary>
      <param name="name">The parameter name. This name should not include the "@" parameter marker that is used in the Entity SQL statements, only the actual name. The first character of the expression must be a letter. Any successive characters in the expression must be either letters, numbers, or an underscore (_) character.</param>
      <param name="type">The common language runtime (CLR) type of the parameter.</param>
      <exception cref="T:System.ArgumentNullException">If the value of either argument is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">If the value of the name argument is invalid. Parameter names must start with a letter and can only contain letters, numbers, and underscores.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.Name">
      <summary>Gets the parameter name, which can only be set through a constructor.</summary>
      <returns>The parameter name, which can only be set through a constructor.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.ParameterType">
      <summary>Gets the parameter type.</summary>
      <returns>The <see cref="T:System.Type" /> of the parameter.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameter.Value">
      <summary>Gets or sets the parameter value.</summary>
      <returns>The parameter value.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectParameterCollection">
      <summary>Represents the query parameters as <see cref="T:System.Data.Objects.ObjectParameter" /> objects that are defined in an <see cref="T:System.Data.Objects.ObjectQuery`1" />. </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Add(System.Data.Objects.ObjectParameter)">
      <summary>Adds the specified <see cref="T:System.Data.Objects.ObjectParameter" /> to the collection.</summary>
      <param name="parameter">The parameter to add to the collection.</param>
      <exception cref="T:System.ArgumentNullException">The<paramref name=" parameter" /> argument is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="parameter" /> argument already exists in the collection. This behavior differs from that of most collections that allow duplicate entries. -or-Another parameter with the same name as the <paramref name="parameter" /> argument already exists in the collection. Note that the lookup is case-insensitive. This behavior differs from that of most collections, and is more like that of a <see cref="T:System.Collections.Generic.Dictionary" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The type of the <paramref name="parameter" /> is not valid.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Clear">
      <summary>Deletes all <see cref="T:System.Data.Objects.ObjectParameter" /> instances from the collection.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Contains(System.Data.Objects.ObjectParameter)">
      <summary>Checks for the existence of a specified <see cref="T:System.Data.Objects.ObjectParameter" /> in the collection by reference.</summary>
      <returns>Returns true if the parameter object was found in the collection; otherwise, false.  </returns>
      <param name="parameter">The <see cref="T:System.Data.Objects.ObjectParameter" /> to find in the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="parameter" /> argument is null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Contains(System.String)">
      <summary>Determines whether an <see cref="T:System.Data.Objects.ObjectParameter" /> with the specified name is in the collection.</summary>
      <returns>Returns true if a parameter with the specified name was found in the collection; otherwise, false.</returns>
      <param name="name">The name of the parameter to look for in the collection. This name should not include the "@" parameter marker that is used in the Entity SQL statements, only the actual name.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> parameter is null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.CopyTo(System.Data.Objects.ObjectParameter[],System.Int32)">
      <summary>Allows the parameters in the collection to be copied into a supplied array, starting with the object at the specified index.</summary>
      <param name="array">The array into which to copy the parameters.</param>
      <param name="index">The index in the array at which to start copying the parameters.</param>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.Count">
      <summary>Gets the number of parameters currently in the collection.</summary>
      <returns>The number of <see cref="T:System.Data.Objects.ObjectParameter" /> objects that are currently in the collection.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.Item(System.String)">
      <summary>Provides an indexer that allows callers to retrieve parameters by name.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectParameter" /> instance.</returns>
      <param name="name">The name of the parameter to find. This name should not include the "@" parameter marker that is used in the Entity SQL statements, only the actual name.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">No parameter with the specified name is found in the collection.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.Remove(System.Data.Objects.ObjectParameter)">
      <summary>Removes an instance of an <see cref="T:System.Data.Objects.ObjectParameter" /> from the collection by reference if it exists in the collection.  </summary>
      <returns>Returns true if the parameter object was found and removed from the collection; otherwise, false. </returns>
      <param name="parameter">An object to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="parameter" /> argument is null.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value that indicates whether the collection is read-only or can be modified.</summary>
      <returns>A Boolean value that is true if the collection is read-only and false of the collection can be modified.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns a typed enumerator over the collection. </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> of type <see cref="T:System.Data.Objects.ObjectParameter" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an untyped enumerator over the collection. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> instance.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectQuery">
      <summary>Implements common functionality for queries against a conceptual model using both LINQ to Entities and <see cref="T:System.Data.Objects.ObjectQuery`1" />.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.CommandText">
      <summary>Returns the command text for the query.</summary>
      <returns>A string value.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.Context">
      <summary>Gets the object context associated with this object query.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectContext" /> associated with this <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.EnablePlanCaching">
      <summary>Gets or sets a value that indicates whether the query plan should be cached.</summary>
      <returns>A value that indicates whether the query plan should be cached.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.Execute(System.Data.Objects.MergeOption)">
      <summary>Executes the untyped object query with the specified merge option.</summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectResult`1" /> that contains a collection of entity objects returned by the query.</returns>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when executing the query. The default is <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.GetResultType">
      <summary>Returns information about the result type of the query.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.TypeUsage" /> value that contains information about the result type of the query.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.MergeOption">
      <summary>Gets or sets how objects returned from a query are added to the object context. </summary>
      <returns>The query <see cref="T:System.Data.Objects.MergeOption" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.Parameters">
      <summary>Gets the parameter collection for this object query.</summary>
      <returns>The parameter collection for this <see cref="T:System.Data.Objects.ObjectQuery`1" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Gets a value that indicates whether the collection returned by the query contains collection objects.</summary>
      <returns>A Boolean value.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.System#ComponentModel#IListSource#GetList">
      <summary>Returns the collection as an <see cref="T:System.Collections.IList" /> used for data binding.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> of entity objects.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#ElementType">
      <summary>Gets the result element type for this query instance.</summary>
      <returns>A <see cref="T:System.Type" /> that is the result element type for this query instance.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#Expression">
      <summary>Gets the expression describing this query. </summary>
      <returns>The LINQ <see cref="T:System.Linq.Expressions.Expression" /> that describes this query.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery.System#Linq#IQueryable#Provider">
      <summary>Gets the LINQ <see cref="T:System.Linq.IQueryProvider" /> associated with this query instance.</summary>
      <returns>The <see cref="T:System.Linq.IQueryProvider" /> associated with this query instance.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery.ToTraceString">
      <summary>Returns the commands to execute against the data source.</summary>
      <returns>A string that represents the commands that the query executes against the data source.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectQuery`1">
      <summary>Represents a typed query against a conceptual model in a given object context. </summary>
      <typeparam name="T">The entity type of the query.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext)">
      <summary>Creates a new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance using the specified Entity SQL command as the initial query.</summary>
      <param name="commandText">The Entity SQL query.</param>
      <param name="context">The <see cref="T:System.Data.Objects.ObjectContext" /> on which to execute the query.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Objects.ObjectContext,System.Data.Objects.MergeOption)">
      <summary>Creates a new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance using the specified Entity SQL command as the initial query and the specified merge option.</summary>
      <param name="commandText">The Entity SQL query.</param>
      <param name="context">The <see cref="T:System.Data.Objects.ObjectContext" /> on which to execute the query.</param>
      <param name="mergeOption">Specifies how the entities that are retrieved through this query should be merged with the entities that have been returned from previous queries against the same <see cref="T:System.Data.Objects.ObjectContext" />.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Distinct">
      <summary>Limits the query to unique results.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with SELECT DISTINCT applied.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Except(System.Data.Objects.ObjectQuery{`0})">
      <summary>Limits the query results by excluding results based on the results of another object query.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with EXCEPT applied based on the specified <paramref name="query" />.</returns>
      <param name="query">An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that represents the results to exclude from the query.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> parameter is null or an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Execute(System.Data.Objects.MergeOption)">
      <summary>Executes the object query with the specified merge option.</summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectResult`1" /> that contains a collection of entity objects returned by the query.</returns>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when executing the query. The default is <see cref="F:System.Data.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Groups the query results by the specified criteria.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance of type <see cref="T:System.Data.Common.DbDataRecord" /> that is equivalent to the original instance with GROUP BY applied. </returns>
      <param name="keys">The key columns by which to group the results.</param>
      <param name="projection">The list of selected properties that defines the projection. </param>
      <param name="parameters">Zero or more parameters that are used in this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> parameter is null or an empty string.-or-The <paramref name="projection" /> parameter is null or an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Include(System.String)">
      <summary>Specifies the related objects to include in the query results.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> with the defined query path.</returns>
      <param name="path">Dot-separated list of related objects to return in the query results.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is empty.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Intersect(System.Data.Objects.ObjectQuery{`0})">
      <summary>Limits the query results by including only the results that exist in another object query. </summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with INTERSECT applied based on the specified <paramref name="query" />.</returns>
      <param name="query">An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that represents the results to include in the query.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> parameter is null or is an empty string.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectQuery`1.Name">
      <summary>Gets or sets the name of this object query.</summary>
      <returns>A string value that is the name of this <see cref="T:System.Data.Objects.ObjectQuery`1" />.</returns>
      <exception cref="T:System.ArgumentException">The value specified on set is not valid.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.OfType``1">
      <summary>Limits the query to only results of a specific type.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with OFTYPE applied.</returns>
      <typeparam name="TResultType">The type of the <see cref="T:System.Data.Objects.ObjectResult`1" /> returned when the query is executed with the applied filter.</typeparam>
      <exception cref="T:System.Data.EntitySqlException">The type specified is not valid.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Orders the query results by the specified criteria.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with ORDER BY applied. </returns>
      <param name="keys">The key columns by which to order the results.</param>
      <param name="parameters">Zero or more parameters that are used in this method.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="keys" /> or <paramref name="parameters" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="key" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Select(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Limits the query results to only the properties that are defined in the specified projection.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance of type <see cref="T:System.Data.Common.DbDataRecord" /> that is equivalent to the original instance with SELECT applied. </returns>
      <param name="projection">The list of selected properties that defines the projection.</param>
      <param name="parameters">Zero or more parameters that are used in this method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="projection" /> is null.-or-<paramref name="parameters" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="projection" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Limits the query results to only the property specified in the projection.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance of a type compatible with the specific projection. The returned <see cref="T:System.Data.Objects.ObjectQuery`1" /> is equivalent to the original instance with SELECT VALUE applied. </returns>
      <param name="projection">The projection list.</param>
      <param name="parameters">An optional set of query parameters that should be in scope when parsing.</param>
      <typeparam name="TResultType">The type of the <see cref="T:System.Data.Objects.ObjectQuery`1" /> returned by the <see cref="M:System.Data.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Objects.ObjectParameter[])" /> method.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="projection" /> is null.-or-<paramref name="parameters" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="projection" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Orders the query results by the specified criteria and skips a specified number of results.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with both ORDER BY and SKIP applied. </returns>
      <param name="keys">The key columns by which to order the results.</param>
      <param name="count">The number of results to skip. This must be either a constant or a parameter reference.</param>
      <param name="parameters">An optional set of query parameters that should be in scope when parsing.</param>
      <exception cref="T:System.ArgumentNullException">Any argument is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keys" /> is an empty string.-or-<paramref name="count" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the results of the query.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the results.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Top(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Limits the query results to a specified number of items.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with TOP applied. </returns>
      <param name="count">The number of items in the results as a string. </param>
      <param name="parameters">An optional set of query parameters that should be in scope when parsing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="count" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> is an empty string.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Union(System.Data.Objects.ObjectQuery{`0})">
      <summary>Combines the results of the query with the results of another object query, without any duplicates. </summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with UNION applied to add the results of the specified <paramref name="query" />.</returns>
      <param name="query">An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that represents the results to add.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> parameter is null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.UnionAll(System.Data.Objects.ObjectQuery{`0})">
      <summary>Combines the results of the query with the results of another object query, including all duplicates. </summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with UNION ALL applied to add the results of the specified <paramref name="query" />.</returns>
      <param name="query">An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that represents the results to add.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="query" /> parameter is null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectQuery`1.Where(System.String,System.Data.Objects.ObjectParameter[])">
      <summary>Limits the query to results that match specified filtering criteria.</summary>
      <returns>A new <see cref="T:System.Data.Objects.ObjectQuery`1" /> instance that is equivalent to the original instance with WHERE applied.</returns>
      <param name="predicate">The filter predicate.</param>
      <param name="parameters">Zero or more parameters that are used in this method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="predicate" /> is null.-or-<paramref name="parameters" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="predicate" /> is an empty string.</exception>
    </member>
    <member name="T:System.Data.Objects.ObjectResult">
      <summary>The base class for the results of an object query against a conceptual model.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.Dispose">
      <summary>Performs tasks associated with freeing, releasing, or resetting resources.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectResult.ElementType">
      <summary>When overridden in a derived type, gets the type of the generic <see cref="T:System.Data.Objects.ObjectResult`1" />.</summary>
      <returns>A <see cref="T:System.Type" /> that is the type of the generic <see cref="T:System.Data.Objects.ObjectResult`1" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the query results.</summary>
      <returns>An enumerator that iterates through the query results.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectResult.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Gets a value that indicates whether the collection returned by the query contains collection objects.</summary>
      <returns>A Boolean value.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult.System#ComponentModel#IListSource#GetList">
      <summary>Returns the results in a format useful for data binding.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> of entity objects.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectResult`1">
      <summary>Represents the result of an <see cref="T:System.Data.Objects.ObjectQuery`1" /> as an enumerable collection of objects.</summary>
      <typeparam name="T">The entity type of the result.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectResult`1.Dispose">
      <summary>Performs tasks associated with freeing, releasing, or resetting resources.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectResult`1.ElementType">
      <summary>Gets the type of the <see cref="T:System.Data.Objects.ObjectResult`1" />.</summary>
      <returns>A <see cref="T:System.Type" /> that is the type of the <see cref="T:System.Data.Objects.ObjectResult`1" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectResult`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the query results.</summary>
      <returns>An enumerator that iterates through the query results.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectSet`1">
      <summary>Represents a typed entity set that is used to perform create, read, update, and delete operations. </summary>
      <typeparam name="TEntity">The entity type.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.AddObject(`0)">
      <summary>Adds an object to the object context in the current entity set. </summary>
      <param name="entity">The object to add.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.ApplyCurrentValues(`0)">
      <summary>Sets the <see cref="P:System.Data.Objects.ObjectStateEntry.CurrentValues" /> property of an <see cref="T:System.Data.Objects.ObjectStateEntry" /> to match the property values of a supplied object.</summary>
      <returns>The updated object.</returns>
      <param name="currentEntity">The detached object that has property updates to apply to the original object.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.ApplyOriginalValues(`0)">
      <summary>Sets the <see cref="P:System.Data.Objects.ObjectStateEntry.OriginalValues" /> property of an <see cref="T:System.Data.Objects.ObjectStateEntry" /> to match the property values of a supplied object.</summary>
      <returns>The updated object.</returns>
      <param name="originalEntity">The detached object that has property updates to apply to the original object.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.Attach(`0)">
      <summary>Attaches an object or object graph to the object context in the current entity set. </summary>
      <param name="entity">The object to attach.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.CreateObject``1">
      <summary>Creates an instance of the specified type.</summary>
      <returns>An instance of the requested type <paramref name="T" />, or an instance of a proxy type that corresponds to the type <paramref name="T" />.</returns>
      <typeparam name="T">Type of object to be returned.</typeparam>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.CreateObject">
      <summary>Creates a new entity type object.</summary>
      <returns>The new entity type object, or an instance of a proxy type that corresponds to the entity type.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.DeleteObject(`0)">
      <summary>Marks an object for deletion. </summary>
      <param name="entity">An object that represents the entity to delete. The object can be in any state except <see cref="F:System.Data.EntityState.Detached" />. </param>
    </member>
    <member name="M:System.Data.Objects.ObjectSet`1.Detach(`0)">
      <summary>Removes the object from the object context.</summary>
      <param name="entity">Object to be detached. Only the <paramref name="entity" /> is removed; if there are any related objects that are being tracked by the same <see cref="T:System.Data.Objects.ObjectStateManager" />, those will not be detached automatically.</param>
    </member>
    <member name="P:System.Data.Objects.ObjectSet`1.EntitySet">
      <summary>Gets the metadata of the entity set represented by this <see cref="T:System.Data.Objects.ObjectSet`1" /> instance.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EntitySet" /> object. </returns>
    </member>
    <member name="T:System.Data.Objects.ObjectStateEntry">
      <summary>Maintains state and key information for objects and relationships and change tracking for object properties. </summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.AcceptChanges">
      <summary>Accepts the current values as original values.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)">
      <summary>Sets the current values of the entry to match the property values of a supplied object.</summary>
      <param name="currentEntity">The detached object that has updated values to apply to the object. <paramref name="currentEntity " />can also be the object's entity key.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="currentEntity " />is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the key of the supplied object does not match the <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> property of the <see cref="T:System.Data.Objects.ObjectStateEntry" />.-or-When the <see cref="T:System.Data.Objects.ObjectStateEntry" /> is an <see cref="T:System.Data.EntityKey" /> entry.-or-When the object is not in the <see cref="T:System.Data.Objects.ObjectStateManager." />-or- The object is in either an <see cref="F:System.Data.EntityState.Added" />, <see cref="F:System.Data.EntityState.Deleted" />, or <see cref="F:System.Data.EntityState.Detached" /> state.-or-The entity key of the supplied object is invalid or has property changes.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)">
      <summary>Sets the original values of the entry to match the property values of a supplied object.</summary>
      <param name="originalEntity">The detached object that has original values to apply to the object. <paramref name="original" /> can also be the object's entity key.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="original" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the key of the supplied object does not match the <see cref="P:System.Data.Objects.ObjectStateEntry.EntityKey" /> property of the <see cref="T:System.Data.Objects.ObjectStateEntry" />.-or-When the <see cref="T:System.Data.Objects.ObjectStateEntry" /> is an <see cref="T:System.Data.EntityKey" /> entry.-or-When the object is not in the <see cref="T:System.Data.Objects.ObjectStateManager." />-or- The object is in either an <see cref="F:System.Data.EntityState.Added" /> or <see cref="F:System.Data.EntityState.Detached" /> state.-or-The entity key of the supplied object is invalid or has property changes.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.ChangeState(System.Data.EntityState)">
      <summary>Changes state of the entry to the specified <see cref="T:System.Data.EntityState" /> value.</summary>
      <param name="state">The <see cref="T:System.Data.EntityState" /> value to set for the <see cref="P:System.Data.Objects.ObjectStateEntry.State" /> property of the entry.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="original" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When trying to change the state to <see cref="F:System.Data.EntityState.Detached" /> from any other <see cref="T:System.Data.EntityState." />-or- When trying to change the state of an entity key entry to any state besides <see cref="F:System.Data.EntityState.Unchanged" />.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.CurrentValues">
      <summary>Gets the current property values of the object or relationship associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>A <see cref="T:System.Data.Objects.CurrentValueRecord" /> that contains the current values of the object or relationship associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.Delete">
      <summary>Marks an entity as deleted.</summary>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.Entity">
      <summary>Gets the object associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>The object associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />. </returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.EntityKey">
      <summary>Gets the <see cref="T:System.Data.EntityKey" /> associated with the <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>The <see cref="T:System.Data.EntityKey" /> associated with the <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.EntitySet">
      <summary>Gets the <see cref="T:System.Data.Metadata.Edm.EntitySetBase" /> for the object or relationship associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.EntitySetBase" /> of this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.GetModifiedProperties">
      <summary>Returns the names of an object's properties that have changed since the last time <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" /> was called.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of names as <see cref="T:System.String" />. </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.GetUpdatableOriginalValues">
      <summary>Gets the updatable version of original values of the object associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />.  </summary>
      <returns>The updatable original values of object data.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.IsRelationship">
      <summary>Gets a Boolean value that indicates whether this <see cref="T:System.Data.Objects.ObjectStateEntry" /> represents a relationship.</summary>
      <returns>A Boolean value that is true if this <see cref="T:System.Data.Objects.ObjectStateEntry" /> represents a relationship; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.ObjectStateManager">
      <summary>Gets the <see cref="T:System.Data.Objects.ObjectStateManager" /> for this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectStateManager" /> for this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.OriginalValues">
      <summary>Gets the read-only version of original values of the object or relationship associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />. To get updatable original values, use <see cref="M:System.Data.Objects.ObjectStateEntry.GetUpdatableOriginalValues" />.</summary>
      <returns>The read-only version of original values of the relationship set entry or entity associated with this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.RelationshipManager">
      <summary>Returns a <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> instance for the object represented by entry.</summary>
      <returns>A <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">When the <see cref="T:System.Data.Objects.ObjectStateEntry" /> is an <see cref="T:System.Data.EntityKey" /> entry.-or-The object is in a <see cref="F:System.Data.EntityState.Detached" /> state.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.SetModified">
      <summary>Sets the state of the object or relationship to Modified.</summary>
      <exception cref="T:System.InvalidOperationException">The state is not <see cref="F:System.Data.EntityState.Modified" /> or <see cref="F:System.Data.EntityState.Unchanged" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.SetModifiedProperty(System.String)">
      <summary>Marks the specified property as modified.</summary>
      <param name="propertyName">An Entity Data Model name.</param>
      <exception cref="T:System.InvalidOperationException">The state is not <see cref="F:System.Data.EntityState.Modified" /> or <see cref="F:System.Data.EntityState.Unchanged" />.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.State">
      <summary>Gets the state of this <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>An <see cref="T:System.Data.EntityState" /> that represents the current state of the object or relationship. </returns>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>Notifies the state manager that a complex property has changed.</summary>
      <param name="entityMemberName">The name of the top-level object property that is changing. This property returns the complex object.</param>
      <param name="complexObject">The complex object that contains the property that is changing.</param>
      <param name="complexObjectMemberName">The name of the property on the complex object that is changing.</param>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="entityMemberName" /> is null (Nothing in Visual Basic).-or- The value of <paramref name="complexObjectMemberName" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="complexObject" /> is null (Nothing in Visual Basic). Objects cannot have complex properties that are null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>Notifies the state manager that a complex property has a pending change.</summary>
      <param name="entityMemberName">The name of the complex property. This property returns the complex object.</param>
      <param name="complexObject">The complex object that contains the property that is changing.</param>
      <param name="complexObjectMemberName">The name of the property on the complex object that is changing.</param>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="entityMemberName" /> is null (Nothing in Visual Basic).-or- The value of <paramref name="complexObjectMemberName" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="complexObject" /> is null (Nothing in Visual Basic). Objects cannot have complex properties that are null.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanged(System.String)">
      <summary>Notifies the state manager that a property has changed.</summary>
      <param name="entityMemberName">The name of the entity property that has changed.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanging(System.String)">
      <summary>Notifies the state manager that a property has a pending change.</summary>
      <param name="entityMemberName">The name of the entity property that is changing.</param>
    </member>
    <member name="P:System.Data.Objects.ObjectStateEntry.System#Data#Objects#DataClasses#IEntityChangeTracker#EntityState">
      <summary>Gets the <see cref="T:System.Data.EntityState" /> for the <see cref="T:System.Data.Objects.ObjectStateEntry" />.</summary>
      <returns>The <see cref="T:System.Data.EntityState" /> for the <see cref="T:System.Data.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="T:System.Data.Objects.ObjectStateManager">
      <summary>Maintains object state and identity management for entity type instances and relationship instances.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.#ctor(System.Data.Metadata.Edm.MetadataWorkspace)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ObjectStateManager" /> class. </summary>
      <param name="metadataWorkspace">The <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" />, which supplies mapping and metadata information.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeObjectState(System.Object,System.Data.EntityState)">
      <summary>Changes state of the <see cref="T:System.Data.Objects.ObjectStateEntry" /> for a specific object to the specified <paramref name="entityState" />.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the supplied <paramref name="entity" />.</returns>
      <param name="entity">The object for which the state must be changed.</param>
      <param name="entityState">The new state of the object.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="entity" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the object is not detached and does not have an entry in the state manager.-or-When you try to change the state to <see cref="F:System.Data.EntityState.Detached" /> from any other <see cref="T:System.Data.EntityState." />-or- When <paramref name="state" /> is not a valid <see cref="T:System.Data.EntityState" /> value.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.Data.EntityState)">
      <summary>Changes the state of the relationship between two entity objects that is specified based on the two related objects and the name of the navigation property.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the relationship that was changed.</returns>
      <param name="sourceEntity">The object instance or <see cref="T:System.Data.EntityKey" /> of the source entity at one end of the relationship.</param>
      <param name="targetEntity">The object instance or <see cref="T:System.Data.EntityKey" /> of the target entity at the other end of the relationship.</param>
      <param name="navigationProperty">The name of the navigation property on <paramref name="source" /> that returns the specified <paramref name="target" />.</param>
      <param name="relationshipState">The requested <see cref="T:System.Data.EntityState" /> of the specified relationship.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="source" /> or <paramref name="target" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When trying to change the state of the relationship to a state other than <see cref="F:System.Data.EntityState.Deleted" /> or <see cref="F:System.Data.EntityState.Detached" /> when either <paramref name="source" /> or <paramref name="target" /> is in a <see cref="F:System.Data.EntityState.Deleted" /> state. -or- When you try to change the state of the relationship to a state other than <see cref="F:System.Data.EntityState.Added" /> or <see cref="F:System.Data.EntityState.Detached" /> when either <paramref name="source" /> or <paramref name="target" /> is in an <see cref="F:System.Data.EntityState.Added" /> state. -or-When <paramref name="state" /> is not a valid <see cref="T:System.Data.EntityState" /> value.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.String,System.Data.EntityState)">
      <summary>Changes the state of the relationship between two entity objects that is specified based on the two related objects and the properties of the relationship.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the relationship that was changed.</returns>
      <param name="sourceEntity">The object instance or <see cref="T:System.Data.EntityKey" /> of the source entity at one end of the relationship.</param>
      <param name="targetEntity">The object instance or <see cref="T:System.Data.EntityKey" /> of the target entity at the other end of the relationship.</param>
      <param name="relationshipName">The name of the relationship.</param>
      <param name="targetRoleName">The role name at the <paramref name="target" /> end of the relationship.</param>
      <param name="relationshipState">The requested <see cref="T:System.Data.EntityState" /> of the specified relationship.</param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="source" /> or <paramref name="target" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When you try to change the state of the relationship to a state other than <see cref="F:System.Data.EntityState.Deleted" /> or <see cref="F:System.Data.EntityState.Detached" /> when either <paramref name="source" /> or <paramref name="target" /> is in a <see cref="F:System.Data.EntityState.Deleted" /> state. -or- When you try to change the state of the relationship to a state other than <see cref="F:System.Data.EntityState.Added" /> or <see cref="F:System.Data.EntityState.Detached" /> when either <paramref name="source" /> or <paramref name="target" /> is in an <see cref="F:System.Data.EntityState.Added" /> state. -or-When <paramref name="state" /> is not a valid <see cref="T:System.Data.EntityState" /> value.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.ChangeRelationshipState``1(``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.EntityState)">
      <summary>Changes the state of the relationship between two entity objects that is specified based on the two related objects and a LINQ expression that defines the navigation property.</summary>
      <returns>The <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the relationship that was changed.</returns>
      <param name="sourceEntity">The object instance or <see cref="T:System.Data.EntityKey" /> of the source entity at one end of the relationship.</param>
      <param name="targetEntity">The object instance or <see cref="T:System.Data.EntityKey" /> of the target entity at the other end of the relationship.</param>
      <param name="navigationPropertySelector">A LINQ expression that selects the navigation property on <paramref name="source" /> that returns the specified <paramref name="target" />.</param>
      <param name="relationshipState">The requested <see cref="T:System.Data.EntityState" /> of the specified relationship.</param>
      <typeparam name="TEntity">The entity type of the <paramref name="source" /> object.</typeparam>
      <exception cref="T:System.ArgumentNullException">When <paramref name="source" />, <paramref name="target" />, or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="selector" /> is malformed or cannot return a navigation property.</exception>
      <exception cref="T:System.InvalidOperationException">When you try to change the state of the relationship to a state other than <see cref="F:System.Data.EntityState.Deleted" /> or <see cref="F:System.Data.EntityState.Detached" /> when either <paramref name="source" /> or <paramref name="target" /> is in a <see cref="F:System.Data.EntityState.Deleted" /> state. -or- When you try to change the state of the relationship to a state other than <see cref="F:System.Data.EntityState.Added" /> or <see cref="F:System.Data.EntityState.Detached" /> when either <paramref name="source" /> or <paramref name="target" /> is in an <see cref="F:System.Data.EntityState.Added" /> state. -or-When <paramref name="state" /> is not a valid <see cref="T:System.Data.EntityState" /> value.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntries(System.Data.EntityState)">
      <summary>Returns a collection of <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects for objects or relationships with the given state.</summary>
      <returns>A collection of <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects in the given <see cref="T:System.Data.EntityState" />.</returns>
      <param name="state">An <see cref="T:System.Data.EntityState" /> used to filter the returned <see cref="T:System.Data.Objects.ObjectStateEntry" /> objects. </param>
      <exception cref="T:System.ArgumentException">When <paramref name="state" /> is <see cref="F:System.Data.EntityState.Detached" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntry(System.Data.EntityKey)">
      <summary>Returns an <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the object or relationship entry with the specified key.</summary>
      <returns>The corresponding <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the given <see cref="T:System.Data.EntityKey" />.</returns>
      <param name="key">The <see cref="T:System.Data.EntityKey" />.  </param>
      <exception cref="T:System.ArgumentNullException">When <paramref name="key" /> is null.</exception>
      <exception cref="T:System.ArgumentException">When the specified <paramref name="key" /> cannot be found in the state manager.</exception>
      <exception cref="T:System.InvalidOperationException">No entity with the specified <see cref="T:System.Data.EntityKey" /> exists in the <see cref="T:System.Data.Objects.ObjectStateManager" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetObjectStateEntry(System.Object)">
      <summary>Returns an <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the specified object.</summary>
      <returns>The corresponding <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the given <see cref="T:System.Object" />.</returns>
      <param name="entity">The <see cref="T:System.Object" /> to which the retrieved <see cref="T:System.Data.Objects.ObjectStateEntry" /> belongs.</param>
      <exception cref="T:System.InvalidOperationException">No entity for the specified <see cref="T:System.Object" /> exists in the <see cref="T:System.Data.Objects.ObjectStateManager" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.GetRelationshipManager(System.Object)">
      <summary>Returns the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> that is used by the specified object. </summary>
      <returns>The <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> for the specified object.</returns>
      <param name="entity">The object for which to return the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</param>
      <exception cref="T:System.InvalidOperationException">When a <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> cannot be returned for the specified <paramref name="entity" />.</exception>
    </member>
    <member name="P:System.Data.Objects.ObjectStateManager.MetadataWorkspace">
      <summary>Gets the <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> associated with this state manager.</summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.MetadataWorkspace" /> associated with this <see cref="T:System.Data.Objects.ObjectStateManager" />.</returns>
    </member>
    <member name="E:System.Data.Objects.ObjectStateManager.ObjectStateManagerChanged">
      <summary>Occurs when entities are added to or removed from the state manager.</summary>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Data.EntityKey,System.Data.Objects.ObjectStateEntry@)">
      <summary>Tries to retrieve the corresponding <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the object or relationship with the specified <see cref="T:System.Data.EntityKey" />.</summary>
      <returns>A Boolean value that is true if there is a corresponding <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the given <see cref="T:System.Data.EntityKey" />; otherwise, false.</returns>
      <param name="key">The given <see cref="T:System.Data.EntityKey" />.</param>
      <param name="entry">When this method returns, contains an <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the given <see cref="T:System.Data.EntityKey" /> This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">A null (Nothing in Visual Basic) value is provided for <paramref name="key" />.</exception>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Object,System.Data.Objects.ObjectStateEntry@)">
      <summary>Tries to retrieve the corresponding <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the specified <see cref="T:System.Object" />.</summary>
      <returns>A Boolean value that is true if there is a corresponding <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the given object; otherwise, false.</returns>
      <param name="entity">The <see cref="T:System.Object" /> to which the retrieved <see cref="T:System.Data.Objects.ObjectStateEntry" /> belongs.</param>
      <param name="entry">When this method returns, contains the <see cref="T:System.Data.Objects.ObjectStateEntry" /> for the given <see cref="T:System.Data.EntityKey" /> This parameter is passed uninitialized.</param>
    </member>
    <member name="M:System.Data.Objects.ObjectStateManager.TryGetRelationshipManager(System.Object,System.Data.Objects.DataClasses.RelationshipManager@)">
      <summary>Returns the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> that is used by the specified object. </summary>
      <returns>true if a <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> instance was returned for the supplied <paramref name="entity" />; otherwise false. </returns>
      <param name="entity">The object for which to return the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</param>
      <param name="relationshipManager">When this method returns, contains the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> for the <paramref name="entity" />.</param>
    </member>
    <member name="T:System.Data.Objects.OriginalValueRecord">
      <summary>Provides access to the original values of object data.</summary>
    </member>
    <member name="T:System.Data.Objects.ProxyDataContractResolver">
      <summary>This class helps resolve proxy types that were created for persistence-ignorant data classes to the actual types of persistence-ignorant objects. </summary>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.ProxyDataContractResolver" /> class. </summary>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)">
      <summary>During deserialization, maps any xsi:type information to the actual type of the persistence-ignorant object. </summary>
      <returns>Returns the type that the xsi:type is mapped to. Returns null if no known type was found that matches the xsi:type.</returns>
      <param name="typeName">The xsi:type information to map.</param>
      <param name="typeNamespace">The namespace of the xsi:type.</param>
      <param name="declaredType">The declared type.</param>
      <param name="knownTypeResolver">An instance of <see cref="T:System.Data.Objects.ProxyDataContractResolver" />.</param>
    </member>
    <member name="M:System.Data.Objects.ProxyDataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)">
      <summary>During serialization, maps actual types to xsi:type information.</summary>
      <returns>true if the type was resolved; otherwise, false.  </returns>
      <param name="dataContractType">The actual type of the persistence-ignorant object.</param>
      <param name="declaredType">The declared type.</param>
      <param name="knownTypeResolver">An instance of <see cref="T:System.Data.Objects.ProxyDataContractResolver" />.</param>
      <param name="typeName">When this method returns, contains a list of xsi:type declarations.</param>
      <param name="typeNamespace">When this method returns, contains a list of namespaces used.</param>
    </member>
    <member name="T:System.Data.Objects.RefreshMode">
      <summary>Specifies whether property changes made to objects tracked by Object Services are kept or replaced with property values from the data source. </summary>
    </member>
    <member name="F:System.Data.Objects.RefreshMode.ClientWins">
      <summary>Property changes made to objects in the object context are not replaced with values from the data source. On the next call to <see cref="M:System.Data.Objects.ObjectContext.SaveChanges" />, these changes are sent to the data source.</summary>
    </member>
    <member name="F:System.Data.Objects.RefreshMode.StoreWins">
      <summary>Property changes made to objects in the object context are replaced with values from the data source. </summary>
    </member>
    <member name="T:System.Data.Objects.SaveOptions">
      <summary>Specifies the behavior of the object context when the <see cref="M:System.Data.Objects.ObjectContext.SaveChanges(System.Data.Objects.SaveOptions)" /> method is called.</summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.None">
      <summary>Changes are saved without the <see cref="M:System.Data.Objects.ObjectContext.DetectChanges" /> or the <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChangesAfterSave" /> methods being called.</summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.AcceptAllChangesAfterSave">
      <summary>After changes are saved, the <see cref="M:System.Data.Objects.ObjectContext.AcceptAllChangesAfterSave" /> method is called, which resets change tracking in the <see cref="T:System.Data.Objects.ObjectStateManager" />.</summary>
    </member>
    <member name="F:System.Data.Objects.SaveOptions.DetectChangesBeforeSave">
      <summary>Before changes are saved, the <see cref="M:System.Data.Objects.ObjectContext.DetectChanges" /> method is called to synchronize the property values of objects that are attached to the object context with data in the <see cref="T:System.Data.Objects.ObjectStateManager" />.</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.ComplexObject">
      <summary>Base class for complex types.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.#ctor">
      <summary>Creates an instance of <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanged(System.String)">
      <summary>Notifies the change tracker that a property of a complex object has changed.</summary>
      <param name="property">The name of the changed property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.ComplexObject.ReportPropertyChanging(System.String)">
      <summary>Notifies the change tracker that a property change is pending on a complex object.</summary>
      <param name="property">The name of the changing property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute">
      <summary>Attribute that indicates that the property represents a complex property.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmComplexPropertyAttribute" /> class. </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmComplexTypeAttribute">
      <summary>Attribute that indicates that the class represents a complex type.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmComplexTypeAttribute.#ctor">
      <summary>Creates a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmComplexTypeAttribute" /> class.</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmEntityTypeAttribute">
      <summary>Attribute that indicates that the class represents an entity type. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmEntityTypeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmEntityTypeAttribute" /> class. </summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmFunctionAttribute">
      <summary>An attribute that, when applied to a method, indicates that the method is a proxy for a function in the conceptual model or storage model. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmFunctionAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmFunctionAttribute" /> class.</summary>
      <param name="namespaceName">The namespace of the mapped-to function.</param>
      <param name="functionName">The name of the mapped-to function.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmFunctionAttribute.FunctionName">
      <summary>The name of the mapped-to function.</summary>
      <returns>The name of the mapped-to function.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmFunctionAttribute.NamespaceName">
      <summary>The namespace of the mapped-to function.</summary>
      <returns>The namespace of the mapped-to function.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmPropertyAttribute">
      <summary>Base class for attributes that define how properties of types in the object layer are mapped to the properties of entity types or complex types in the conceptual model.</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute">
      <summary>Defines a relationship between two entity types based on an association in the conceptual model.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type)">
      <summary>Creates an instance of the <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" /> class.</summary>
      <param name="relationshipNamespaceName">The name of the namespace for the association in which this entity participates.</param>
      <param name="relationshipName">The name of a relationship in which this entity participates. </param>
      <param name="role1Name">Name of the role for the type at one end of the association.</param>
      <param name="role1Multiplicity">A value of <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> that indicates the multiplicity at one end of the association, such as one or many.</param>
      <param name="role1Type">The type of the entity at one end of the association.</param>
      <param name="role2Name">Name of the role for the type at the other end of the association.</param>
      <param name="role2Multiplicity">A value of <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> that indicates the multiplicity at the other end of the association, such as one or many.</param>
      <param name="role2Type">The type of the entity at the other end of the association.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Metadata.Edm.RelationshipMultiplicity,System.Type,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" /> class. </summary>
      <param name="relationshipNamespaceName">The name of the namespace for the association in which this entity participates.</param>
      <param name="relationshipName">The name of a relationship in which this entity participates.</param>
      <param name="role1Name">Name of the role for the type at one end of the association.</param>
      <param name="role1Multiplicity">A value of <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> that indicates the multiplicity at one end of the association, such as one or many.</param>
      <param name="role1Type">The type of the entity at one end of the association.</param>
      <param name="role2Name">Name of the role for the type at the other end of the association.</param>
      <param name="role2Multiplicity">A value of <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> that indicates the multiplicity at the other end of the association, such as one or many.</param>
      <param name="role2Type">The type of the entity at the other end of the association.</param>
      <param name="isForeignKey">A value that indicates whether the relationship is based on the foreign key value.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.IsForeignKey">
      <summary>Gets a Boolean value that indicates whether the relationship is based on the foreign key value.</summary>
      <returns>true if the relationship is based on the foreign key value; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.RelationshipName">
      <summary>Name of the relationship. </summary>
      <returns>A <see cref="T:System.String" /> that is the name of a relationship that is defined by this <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipAttribute" />. </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.RelationshipNamespaceName">
      <summary>The namespace for the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the namespace for the relationship.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Multiplicity">
      <summary>Multiplicity at one end of the relationship.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> value that indicates the multiplicity.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Name">
      <summary>Name of the role at one end of the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the name of the role.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role1Type">
      <summary>Type of the entity at one end of the relationship.</summary>
      <returns>A <see cref="T:System.Type" /> that is the type of the object at this end of the association.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Multiplicity">
      <summary>Multiplicity at the other end of the relationship.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.RelationshipMultiplicity" /> value that indicates the multiplicity.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Name">
      <summary>Name of the role at the other end of the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the name of the role.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipAttribute.Role2Type">
      <summary>Type of the entity at the other end of the relationship.</summary>
      <returns>A <see cref="T:System.Type" /> that is the type of the object t the other end of the association. </returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute">
      <summary>Attribute that indicates that the property represents a navigation property.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute" /> class. </summary>
      <param name="relationshipNamespaceName">The namespace name of the relationship property.</param>
      <param name="relationshipName">The name of the relationship. The relationship name is not namespace qualified.</param>
      <param name="targetRoleName">The role name at the other end of the relationship.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipName">
      <summary>Gets the unqualified relationship name. </summary>
      <returns>The relationship name.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipNamespaceName">
      <summary>The namespace name of the navigation property.</summary>
      <returns>A <see cref="T:System.String" /> that is the namespace name.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.TargetRoleName">
      <summary>Gets the role name at the other end of the relationship.</summary>
      <returns>The target role name is specified by the Role attribute of the other End element in the association that defines this relationship in the conceptual model. For more information, see Association (EDM).</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute">
      <summary>Attribute that indicates that the property represents a scalar property.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute" /> class.  </summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.EntityKeyProperty">
      <summary>Gets or sets the value that indicates whether the property is part of the entity key.</summary>
      <returns>The value that indicates whether the property is part of the entity key.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmScalarPropertyAttribute.IsNullable">
      <summary>Gets or sets the value that indicates whether the property can have a null value.</summary>
      <returns>The value that indicates whether the property can have a null value.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmSchemaAttribute">
      <summary>Attribute that indicates that the assembly contains classes that are mapped to entity types in a conceptual model.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmSchemaAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmSchemaAttribute" /> class. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EdmSchemaAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EdmSchemaAttribute" /> class with a unique value for each model referenced by the assembly. </summary>
      <param name="assemblyGuid">A string that is a unique GUID value for the model in the assembly.</param>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EdmTypeAttribute">
      <summary>Base class for attributes that define how types in the object layer are mapped to entity types and complex types in the conceptual model.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmTypeAttribute.Name">
      <summary>The name of the type in the conceptual schema that maps to the class to which this attribute is applied.</summary>
      <returns>A <see cref="T:System.String" /> that is the name.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EdmTypeAttribute.NamespaceName">
      <summary>The namespace name of the entity object type or complex type in the conceptual schema that maps to this type.</summary>
      <returns>A <see cref="T:System.String" /> that is the namespace name.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityCollection`1">
      <summary>Represents a collection of objects on the "many" end of a relationship. </summary>
      <typeparam name="TEntity">The entity type of the collection.</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> class.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Add(`0)">
      <summary>Adds an object to the collection.</summary>
      <param name="entity">An object to add to the collection. <paramref name="entity" /> must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entity " />is null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})">
      <summary>Defines relationships between an object and a collection of related objects in an object context.</summary>
      <param name="entities">Collection of objects in the object context that are related to the source object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entities" /> collection is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source object or an object in the <paramref name="entities" /> collection is null or is not in an <see cref="F:System.Data.EntityState.Unchanged" /> or <see cref="F:System.Data.EntityState.Modified" /> state.-or-The relationship cannot be defined based on the EDM metadata. This can occur when the association in the conceptual schema does not support a relationship between the two types.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Attach(`0)">
      <summary>Defines a relationship between two attached objects in an object context.</summary>
      <param name="entity">The object being attached.</param>
      <exception cref="T:System.ArgumentNullException">When the <paramref name="entity" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the <paramref name="entity" /> cannot be related to the source object. This can occur when the association in the conceptual schema does not support a relationship between the two types.-or-When either object is null or is not in an <see cref="F:System.Data.EntityState.Unchanged" /> or <see cref="F:System.Data.EntityState.Modified" /> state.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Clear">
      <summary>Removes all entities from the collection. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Contains(`0)">
      <summary>Determines whether a specific object exists in the collection.</summary>
      <returns>true if the object is found in the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />; otherwise, false.</returns>
      <param name="entity">The object to locate in the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Copies all the contents of the collection to an array, starting at the specified index of the target array.</summary>
      <param name="array">The array to copy to.</param>
      <param name="arrayIndex">The zero-based index in the array at which copying begins.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.Count">
      <summary>Gets the number of objects that are contained in the collection.</summary>
      <returns>The number of elements that are contained in the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.CreateSourceQuery">
      <summary>Returns an object query that, when it is executed, returns the same set of objects that exists in the current collection. </summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that represents the entity collection.</returns>
      <exception cref="T:System.InvalidOperationException">When the object is in an <see cref="F:System.Data.EntityState.Added" /> state.-or-When the object is in a <see cref="F:System.Data.EntityState.Detached" /> state with a <see cref="T:System.Data.Objects.MergeOption" /> other than <see cref="F:System.Data.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.GetEnumerator">
      <summary>Returns an enumerator that is used to iterate through the objects in the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that iterates through the set of values cached by <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> is read-only.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Load(System.Data.Objects.MergeOption)">
      <summary>Loads related objects into the collection, using the specified merge option.</summary>
      <param name="mergeOption">Specifies how the objects in this collection should be merged with the objects that might have been returned from previous queries against the same <see cref="T:System.Data.Objects.ObjectContext" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Used internally to deserialize entity objects.</summary>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Used internally to serialize entity objects.</summary>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.Remove(`0)">
      <summary>Removes an object from the collection and marks the relationship for deletion.</summary>
      <returns>true if item was successfully removed; otherwise, false. </returns>
      <param name="entity">The object to remove from the collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entity" /> object is null.</exception>
      <exception cref="T:System.InvalidOperationException">The<paramref name=" entity " />object is not attached to the same object context.-or-The <paramref name="entity " />object does not have a valid relationship manager.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that is used to iterate through the set of values cached by <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that iterates through the set of values cached by <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Gets a value that indicates whether the related entity collection consists of collection objects. </summary>
      <returns>This property always returns false because the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> contains objects and not collections.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList">
      <summary>Returns the collection as an <see cref="T:System.Collections.IList" /> used for data binding.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> of entity objects.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityObject">
      <summary>Base class for entity types that are generated by the Entity Data Model tools.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.EntityObject" /> class.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.EntityKey">
      <summary>Gets or sets the key for this object.</summary>
      <returns>The <see cref="T:System.Data.EntityKey" /> for this object.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.EntityState">
      <summary>Gets the entity state of the object.</summary>
      <returns>The <see cref="T:System.Data.EntityState" /> of this object. </returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.ReportPropertyChanged(System.String)">
      <summary>Notifies the change tracker that a property has changed.</summary>
      <param name="property">The name of the changed property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.ReportPropertyChanging(System.String)">
      <summary>Notifies the change tracker that a property change is pending.</summary>
      <param name="property">The name of the changing property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityObject.System#Data#Objects#DataClasses#IEntityWithChangeTracker#SetChangeTracker(System.Data.Objects.DataClasses.IEntityChangeTracker)">
      <summary>Specifies the instance of <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" /> that is used to report property changes.</summary>
      <param name="changeTracker">Reference to the change tracker that is used to report property changes.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityObject.System#Data#Objects#DataClasses#IEntityWithRelationships#RelationshipManager">
      <summary>Gets the relationship manager used by this object.</summary>
      <returns>The <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> used by this object.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityReference">
      <summary>Base class that implements non-generic functionality for an <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityReference.EntityKey">
      <summary>Returns the key for the related object. </summary>
      <returns>An <see cref="T:System.Data.EntityKey" /> that is the key of the related object.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.EntityReference`1">
      <summary>Represents a related end of an association with a multiplicity of zero or one. </summary>
      <typeparam name="TEntity">The entity type of the reference.</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.#ctor">
      <summary>Creates a new instance of <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.Attach(`0)">
      <summary>Creates a many-to-one or one-to-one relationship between two objects in the object context.</summary>
      <param name="entity">The object being attached.</param>
      <exception cref="T:System.ArgumentNullException">When the <paramref name="entity" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">When the <paramref name="entity" /> cannot be related to the current related end. This can occur when the association in the conceptual schema does not support a relationship between the two types.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.CreateSourceQuery">
      <summary>Creates an equivalent object query that returns the related object.</summary>
      <returns>An <see cref="T:System.Data.Objects.ObjectQuery`1" /> that returns the related object.</returns>
      <exception cref="T:System.InvalidOperationException">When the object is in an <see cref="F:System.Data.EntityState.Added" /> state.-or-When the object is in a <see cref="F:System.Data.EntityState.Detached" /> state with a <see cref="P:System.Data.Objects.ObjectQuery.MergeOption" /> other than <see cref="F:System.Data.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.Load(System.Data.Objects.MergeOption)">
      <summary>Loads the related object for this <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> with the specified merge option.</summary>
      <param name="mergeOption">Specifies how the object should be returned if it already exists in the <see cref="T:System.Data.Objects.ObjectContext" />.</param>
      <exception cref="T:System.InvalidOperationException">The source of the <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> is null.-or-A query returned more than one related end.-or-A query returned zero related ends, and one related end was expected.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.OnRefDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>This method is used internally to serialize related entity objects.</summary>
      <param name="context">The serialized stream.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.EntityReference`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>This method is used internally to serialize related entity objects.</summary>
      <param name="context">The serialized stream.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.EntityReference`1.Value">
      <summary>Gets or sets the related object returned by this <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />. </summary>
      <returns>The object returned by this <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityChangeTracker">
      <summary>Defines the facilities that are used by Object Services to track changes that are made to the properties of an object.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>Notifies the change tracker that a property of a complex type has changed.</summary>
      <param name="entityMemberName">The name of the complex property of the entity type that has changed.</param>
      <param name="complexObject">The complex type that contains the property that changed.</param>
      <param name="complexObjectMemberName">The name of the property that changed on complex type.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>Notifies the change tracker of a pending change to a complex property.</summary>
      <param name="entityMemberName">The name of the top-level entity property that is changing.</param>
      <param name="complexObject">The complex type that contains the property that is changing.</param>
      <param name="complexObjectMemberName">The name of the property that is changing on complex type.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged(System.String)">
      <summary>Notifies the change tracker that a property of an entity type has changed.</summary>
      <param name="entityMemberName">The name of the property that has changed.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging(System.String)">
      <summary>Notifies the change tracker of a pending change to a property of an entity type.</summary>
      <param name="entityMemberName">The name of the property that is changing.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityChangeTracker.EntityState">
      <summary>Gets current state of a tracked object.</summary>
      <returns>An <see cref="T:System.Data.EntityState" /> that is the state of the tracked object.For more information, see Identity Resolution, State Managment, and Change Tracking and Tracking Changes in POCO Entities.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithChangeTracker">
      <summary>Defines an entity type that implements change tracking. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IEntityWithChangeTracker.SetChangeTracker(System.Data.Objects.DataClasses.IEntityChangeTracker)">
      <summary>Gets or sets the <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" /> used to report changes.</summary>
      <param name="changeTracker">The <see cref="T:System.Data.Objects.DataClasses.IEntityChangeTracker" /> used to report changes.</param>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithKey">
      <summary>Defines an entity type that exposes an entity key.  </summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityWithKey.EntityKey">
      <summary>Gets or sets the <see cref="T:System.Data.EntityKey" /> for instances of entity types that implement this interface.</summary>
      <returns>The <see cref="T:System.Data.EntityKey" />.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IEntityWithRelationships">
      <summary>Defines an entity type with a relationship to one or more other entity type.</summary>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IEntityWithRelationships.RelationshipManager">
      <summary>Returns the relationship manager that manages relationships for an instance of an entity type.</summary>
      <returns>The <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> for this entity.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.IRelatedEnd">
      <summary>Defines the end of a relationship. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Adds an object to the related end.</summary>
      <param name="entity">An object to add to the collection. <paramref name="entity" /> must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Object)">
      <summary>Adds an object to the related end.</summary>
      <param name="entity">An object to add to the collection.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Defines a relationship between two attached objects.</summary>
      <param name="entity">The object being attached. <paramref name="entity" /> must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Object)">
      <summary>Defines a relationship between two attached objects.</summary>
      <param name="entity">The object being attached.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery">
      <summary>Returns an <see cref="T:System.Collections.IEnumerable" /> that represents the objects that belong to the related end. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> that represents the objects that belong to the related end.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the collection of related objects.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded">
      <summary>Gets a value that indicates whether all related objects have been loaded.</summary>
      <returns>true if the related end contains all the related entities from the database; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Load">
      <summary>Loads the related object or objects into this related end with the default merge option.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Load(System.Data.Objects.MergeOption)">
      <summary>Loads the related object or objects into the related end with the specified merge option.</summary>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when merging objects into an existing <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName">
      <summary>Gets the name of the relationship in which this related end participates.</summary>
      <returns>The name of the relationship in which this <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" /> is participating. The relationship name is not namespace qualified. </returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet">
      <summary>Returns a reference to the metadata for the related end.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> object that contains metadata for the end of a relationship.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Removes an object from the collection of objects at the related end.</summary>
      <returns>true if <paramref name="entity" /> was successfully removed, false if <paramref name="entity" /> was not part of the <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />.</returns>
      <param name="entity">The object to remove from the collection. <paramref name="entity" /> must implement <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Object)">
      <summary>Removes an object from the collection of objects at the related end.</summary>
      <returns>true if <paramref name="entity" /> was successfully removed; false if <paramref name="entity" /> was not part of the <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />.</returns>
      <param name="entity">An object to remove from the collection.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName">
      <summary>Gets the role name at the source end of the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the role name.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName">
      <summary>Gets the role name at the target end of the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the role name.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelatedEnd">
      <summary>Base class that implements common functionality for a related end.</summary>
    </member>
    <member name="E:System.Data.Objects.DataClasses.RelatedEnd.AssociationChanged">
      <summary>Occurs when a change is made to a related end. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the collection of related objects.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded">
      <summary>Gets a value that indicates whether all related objects have been loaded.</summary>
      <returns>true if the related end contains all the related objects from the database; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.Load">
      <summary>When overridden in a derived class, loads the related object or objects into the related end with the default merge option.</summary>
      <exception cref="T:System.InvalidOperationException">When the source object was retrieved by using a <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> query and the <see cref="T:System.Data.Objects.MergeOption" /> is not <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> or the related objects are already loaded.-or-When the source object is not attached to the <see cref="T:System.Data.Objects.ObjectContext" />.-or-When the source object is being tracked but is in the <see cref="F:System.Data.EntityState.Added" /> or <see cref="F:System.Data.EntityState.Deleted" /> state or the <see cref="T:System.Data.Objects.MergeOption" /> used for <see cref="M:System.Data.Objects.DataClasses.RelatedEnd.Load" /> is <see cref="F:System.Data.Objects.MergeOption.NoTracking" />. </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.Load(System.Data.Objects.MergeOption)">
      <summary>When overridden in a derived class, loads an object or objects from the related end with the specified merge option.</summary>
      <param name="mergeOption">The <see cref="T:System.Data.Objects.MergeOption" /> to use when merging objects into an existing <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</param>
      <exception cref="T:System.InvalidOperationException">When the source object was retrieved by using a <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> query and the <see cref="T:System.Data.Objects.MergeOption" /> is not <see cref="F:System.Data.Objects.MergeOption.NoTracking" /> or the related objects are already loaded.-or-When the source object is not attached to the <see cref="T:System.Data.Objects.ObjectContext" />.-or-When the source object is being tracked but is in the <see cref="F:System.Data.EntityState.Added" /> or <see cref="F:System.Data.EntityState.Deleted" /> state or the <see cref="T:System.Data.Objects.MergeOption" /> used for <see cref="M:System.Data.Objects.DataClasses.RelatedEnd.Load" /> is <see cref="F:System.Data.Objects.MergeOption.NoTracking" />. </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Used internally to deserialize entity objects along with the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> instances.</summary>
      <param name="context">The serialized stream.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.RelationshipName">
      <summary>Gets the name of the relationship in which this related end participates.</summary>
      <returns>The name of the relationship in which this <see cref="T:System.Data.Objects.DataClasses.RelatedEnd" /> participates. The relationship name is not namespace qualified.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.RelationshipSet">
      <summary>Returns a reference to the metadata for the related end.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.RelationshipSet" /> object that contains metadata for the end of a relationship.</returns>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.SourceRoleName">
      <summary>Gets the role name at the source end of the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the role name.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Add(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Adds an object to the related end.</summary>
      <param name="entity">An object to add to the collection. This object must implement the <see cref="T:System.Data.Objects.DataClasses.IEntityWithRelationships" /> interface.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Add(System.Object)">
      <summary>Adds an object to the related end.  </summary>
      <param name="entity">An entity instance to add to the related end.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Attaches an object at the related end.</summary>
      <param name="entity">The object being attached.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Attach(System.Object)">
      <summary>Attaches an object to the related end.</summary>
      <param name="entity">An entity instance to attach to the related end.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#CreateSourceQuery">
      <summary>Returns an <see cref="T:System.Collections.IEnumerable" /> that represents the objects that belong to the related end. </summary>
      <returns>An <see cref="T:System.Collections.IEnumerable" /> that represents the objects that belong to the related end.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Removes an object from the collection at the related end.</summary>
      <returns>A value that indicates whether the object was removed.</returns>
      <param name="entity">The entity instance to remove from the collection.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelatedEnd.System#Data#Objects#DataClasses#IRelatedEnd#Remove(System.Object)">
      <summary>Removes an object from the related end if the object is part of the related end.  </summary>
      <returns>true if the entity was successfully removed; otherwise, false.</returns>
      <param name="entity">An entity instance to remove from the related end.</param>
    </member>
    <member name="P:System.Data.Objects.DataClasses.RelatedEnd.TargetRoleName">
      <summary>Gets the role name at the target end of the relationship.</summary>
      <returns>A <see cref="T:System.String" /> that is the role name.</returns>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelationshipKind">
      <summary>Enumerates the type of the relationship between two or more entities. </summary>
    </member>
    <member name="F:System.Data.Objects.DataClasses.RelationshipKind.Association">
      <summary>The relationship is defined by an association in a conceptual model. For more information, see Association (EDM).</summary>
    </member>
    <member name="T:System.Data.Objects.DataClasses.RelationshipManager">
      <summary>Used to track relationships between objects in the object context.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.Create(System.Data.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Creates a new <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> object.</summary>
      <returns>The requested <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" />.</returns>
      <param name="owner">Reference to the entity that is calling this method.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetAllRelatedEnds">
      <summary>Returns an enumeration of all the related ends managed by the relationship manager.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of objects that implement <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" />. An empty enumeration is returned when the relationships have not yet been populated.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedCollection``1(System.String,System.String)">
      <summary>Gets an <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> of related objects with the specified relationship name and target role name. </summary>
      <returns>The <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> of related objects.</returns>
      <param name="relationshipName">Name of the relationship to navigate. The relationship name is not namespace qualified.</param>
      <param name="targetRoleName">Name of the target role for the navigation. Indicates the direction of navigation across the relationship.</param>
      <typeparam name="TTargetEntity">The type of the returned <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">The specified role returned an <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> instead of an <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" />. </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedEnd(System.String,System.String)">
      <summary>Returns either an <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> or <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> of the correct type for the specified target role in a relationship. </summary>
      <returns>
        <see cref="T:System.Data.Objects.DataClasses.IRelatedEnd" /> representing the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> or <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> that was retrieved.</returns>
      <param name="relationshipName">Name of the relationship in which <paramref name="targetRoleName" /> is defined. The relationship name is not namespace qualified.</param>
      <param name="targetRoleName">Target role to use to retrieve the other end of <paramref name="relationshipName" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relationshipName" /> or <paramref name="targetRoleName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source type does not match the type of the owner.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="targetRoleName" /> is invalid.-or-Unable to find the relationship type in the metadata.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.GetRelatedReference``1(System.String,System.String)">
      <summary>Gets the <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> for a related object by using the specified combination of relationship name and target role name.</summary>
      <returns>The <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> of a related object.</returns>
      <param name="relationshipName">Name of the relationship to navigate. The relationship name is not namespace qualified.</param>
      <param name="targetRoleName">Name of the target role for the navigation. Indicates the direction of navigation across the relationship.</param>
      <typeparam name="TTargetEntity">The type of the returned <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">The specified role returned an <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> instead of an <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" />. </exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.InitializeRelatedCollection``1(System.String,System.String,System.Data.Objects.DataClasses.EntityCollection{``0})">
      <summary>Initializes an existing <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> that was created by using the default constructor.</summary>
      <param name="relationshipName">The relationship name.</param>
      <param name="targetRoleName">The role name of the related end.</param>
      <param name="entityCollection">The <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> to initialize.</param>
      <typeparam name="TTargetEntity">The type of the <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> being initialized.</typeparam>
      <exception cref="T:System.InvalidOperationException">When the provided <see cref="T:System.Data.Objects.DataClasses.EntityCollection`1" /> is already initialized.-or-When the relationship manager is already attached to an <see cref="T:System.Data.Objects.ObjectContext" />. -or-When the relationship manager already contains a relationship with this name and target role.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.InitializeRelatedReference``1(System.String,System.String,System.Data.Objects.DataClasses.EntityReference{``0})">
      <summary>Initializes an existing <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> that was created by using the default constructor.</summary>
      <param name="relationshipName">The relationship name.</param>
      <param name="targetRoleName">The role name of the related end.</param>
      <param name="entityReference">The <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> to initialize.</param>
      <typeparam name="TTargetEntity">The type of the <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> being initialized.</typeparam>
      <exception cref="T:System.InvalidOperationException">When the provided <see cref="T:System.Data.Objects.DataClasses.EntityReference`1" /> is already initialized.-or-When the relationship manager is already attached to an <see cref="T:System.Data.Objects.ObjectContext" />. -or-When the relationship manager already contains a relationship with this name and target role.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Used internally to deserialize entity objects along with the <see cref="T:System.Data.Objects.DataClasses.RelationshipManager" /> instances.</summary>
      <param name="context">The serialized stream.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.RelationshipManager.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Called by Object Services to prepare an <see cref="T:System.Data.EntityKey" /> for binary serialization with a serialized relationship. </summary>
      <param name="context">Describes the source and destination of a given serialized stream, and provides an additional caller-defined context.</param>
    </member>
    <member name="T:System.Data.Objects.DataClasses.StructuralObject">
      <summary>Provides support for code generation in the form of helper methods that are used to set field values for properties. </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Objects.DataClasses.StructuralObject" /> class.  </summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.BinaryEquals(System.Byte[],System.Byte[])">
      <summary>Determines whether the specified byte arrays contain identical values.</summary>
      <returns>True, if both arrays are of the same length and contain the same byte values or if both arrays are null; otherwise, false.</returns>
      <param name="first">The first byte array value to compare.</param>
      <param name="second">The second byte array value to compare.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.DefaultDateTimeValue">
      <summary>Returns the minimum date time value supported by the data source.</summary>
      <returns>A <see cref="T:System.DateTime" /> value that is the minimum date time that is supported by the data source.</returns>
    </member>
    <member name="F:System.Data.Objects.DataClasses.StructuralObject.EntityKeyPropertyName">
      <summary>This constant name is used for change tracking. </summary>
      <returns>Returns a <see cref="T:System.String" /> that is the name of the property that is the key.</returns>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.GetValidValue(System.Byte[])">
      <summary>Returns a copy of the current byte value.</summary>
      <returns>A copy of the current byte value.</returns>
      <param name="currentValue">The current byte array value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.GetValidValue``1(``0,System.String,System.Boolean,System.Boolean)">
      <summary>Returns a complex type for the specified property.</summary>
      <returns>A complex type object for the property.</returns>
      <param name="currentValue">A complex object that inherits from <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</param>
      <param name="property">The name of the complex property that is the complex object.</param>
      <param name="isNullable">Indicates whether the type supports null values.</param>
      <param name="isInitialized">Indicated whether the type is initialized.</param>
      <typeparam name="T">The type of the complex object being requested. This type must inherit from <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.OnPropertyChanged(System.String)">
      <summary>Raises the <see cref="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanged" /> event. </summary>
      <param name="property">The name of the changed property.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.OnPropertyChanging(System.String)">
      <summary>Raises the <see cref="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanging" /> event. </summary>
      <param name="property">The name of the property changing.</param>
    </member>
    <member name="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanged">
      <summary>Occurs when a property value has changed.</summary>
    </member>
    <member name="E:System.Data.Objects.DataClasses.StructuralObject.PropertyChanging">
      <summary>Occurs when a property value change is a pending.</summary>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.ReportPropertyChanged(System.String)">
      <summary>When overridden in a derived class, raises an event that is used to report that a property change has occurred.</summary>
      <param name="property">The name for the changed property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="property" /> is empty.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.ReportPropertyChanging(System.String)">
      <summary>When overridden in a derived class, raises an event that is used to report that a property change is pending.</summary>
      <param name="property">The name of the changing property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Boolean" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Byte" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean)">
      <summary>Returns a copy of the supplied byte array, or null if supported.</summary>
      <returns>Returns a copy of the <see cref="T:System.Byte" /> array, or null. </returns>
      <param name="value">The <see cref="T:System.Byte" /> array to validate.</param>
      <param name="isNullable">Boolean that indicates if null values are supported.</param>
      <exception cref="T:System.Data.ConstraintException">If value is null for a non-nullable value.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.DateTime" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.DateTimeOffset" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Decimal" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Double)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Guid" /> value</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">An <see cref="T:System.Int16" /> value</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">An <see cref="T:System.Int32" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">An <see cref="T:System.Int64" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Boolean" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Byte" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.DateTime" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.DateTimeOffset" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Decimal" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Double" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Guid" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Int16" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Int32" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Int64" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.SBtye" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.Single" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.TimeSpan" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.UInt16" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable unsigned integer value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64})">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A nullable <see cref="T:System.UInt64" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">An <see cref="T:System.SByte" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.Single)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.Single" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean)">
      <summary>Returns a copy of the supplied string, or null if supported.</summary>
      <returns>The supplied <see cref="T:System.String" /> value, or null.</returns>
      <param name="value">A <see cref="T:System.String" /> value.</param>
      <param name="isNullable">
        <see cref="T:System.Boolean" /> that indicates if null values are supported.</param>
      <exception cref="T:System.Data.ConstraintException">If value is null for a non-nullable value.</exception>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.TimeSpan" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.UInt16" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.UInt32" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64)">
      <summary>This method is reserved for future use.</summary>
      <returns>The supplied value.</returns>
      <param name="value">A <see cref="T:System.UInt64" /> value.</param>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.SetValidValue``1(``0,``0,System.String)">
      <summary>Sets a complex object for the specified property. </summary>
      <returns>A complex type that derives from <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</returns>
      <param name="oldValue">The original complex object for the property, if any.</param>
      <param name="newValue">The complex object that is being set.</param>
      <param name="property">The complex property that is being set to the complex object.</param>
      <typeparam name="T">The type of the complex object being replaced. This type must inherit from <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</typeparam>
    </member>
    <member name="M:System.Data.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull``1(``0,System.String)">
      <summary>Verifies that a complex object is not null.</summary>
      <returns>The complex object being validated.</returns>
      <param name="complexObject">The complex object that is being validated.</param>
      <param name="propertyName">The complex property on the parent object that is associated with <paramref name="complexObject" />.</param>
      <typeparam name="TComplex">The type of the complex object being verified. This type must inherit from <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />.</typeparam>
      <exception cref="T:System.Data.ConstraintException">When the complex type is null.</exception>
    </member>
    <member name="T:System.Data.Objects.SqlClient.SqlFunctions">
      <summary>Provides common language runtime (CLR) methods that call functions in the database in LINQ to Entities queries. </summary>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Acos(System.Nullable{System.Decimal})">
      <summary>A mathematical function that returns the angle, in radians, whose cosine is the specified numerical value. This angle is called the arccosine.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg1">The cosine of an angle.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Acos(System.Nullable{System.Double})">
      <summary>A mathematical function that returns the angle, in radians, whose cosine is the specified numerical value. This angle is called the arccosine.</summary>
      <returns>The angle, in radians, defined by the input cosine value.</returns>
      <param name="arg1">The cosine of an angle.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Ascii(System.String)">
      <summary>Returns the ASCII code value of the left-most character of a character expression.</summary>
      <returns>The ASCII code of the first character in the input string.</returns>
      <param name="arg">A valid string.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Asin(System.Nullable{System.Decimal})">
      <summary>A mathematical function that returns the angle, in radians, whose sine is the specified numerical value. This angle is called the arcsine.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg">The sine of an angle.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Asin(System.Nullable{System.Double})">
      <summary>A mathematical function that returns the angle, in radians, whose sine is the specified numerical value. This angle is called the arcsine.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg">The sine of an angle.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan(System.Nullable{System.Decimal})">
      <summary>A mathematical function that returns the angle, in radians, whose tangent is the specified numerical value. This angle is called the arctangent.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg">The tangent of an angle.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan(System.Nullable{System.Double})">
      <summary>A mathematical function that returns the angle, in radians, whose tangent is the specified numerical value. This angle is called the arctangent.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg">The tangent of an angle.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan2(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Returns the positive angle, in radians, between the positive x-axis and the ray from the origin through the point (x, y), where x and y are the two specified numerical values. The first parameter passed to the function is the y-value and the second parameter is the x-value.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg1">The y-coordinate of a point.</param>
      <param name="arg2">The x-coordinate of a point.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Atan2(System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>Returns the positive angle, in radians, between the positive x-axis and the ray from the origin through the point (x, y), where x and y are the two specified numerical values. The first parameter passed to the function is the y-value and the second parameter is the x-value.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="arg1">The y-coordinate of a point.</param>
      <param name="arg2">The x-coordinate of a point.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Char(System.Nullable{System.Int32})">
      <summary>Returns the character that corresponds to the specified integer ASCII value.</summary>
      <returns>The character that corresponds to the specified ASCII value.</returns>
      <param name="arg">An ASCII code.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[])">
      <summary>Returns the starting position of one expression found within another expression.</summary>
      <returns>The starting position of <paramref name="target" /> if it is found in <paramref name="toSearch" />.</returns>
      <param name="toSearch">The string expression to be searched.</param>
      <param name="target">The string expression to be found.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[],System.Nullable{System.Int32})">
      <summary>Returns the starting position of one expression found within another expression.</summary>
      <returns>The starting position of <paramref name="target" /> if it is found in <paramref name="toSearch" />.</returns>
      <param name="toSearch">The string expression to be searched.</param>
      <param name="target">The string expression to be found.</param>
      <param name="startLocation">The character position in <paramref name="toSearch" /> where searching begins.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.Byte[],System.Byte[],System.Nullable{System.Int64})">
      <summary>Returns the starting position of one expression found within another expression.</summary>
      <returns>The starting position of <paramref name="target" /> if it is found in <paramref name="toSearch" />.</returns>
      <param name="toSearch">The string expression to be searched.</param>
      <param name="target">The string expression to be found.</param>
      <param name="startLocation">The character position in <paramref name="toSearch" /> at which searching begins.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String)">
      <summary>Returns the starting position of one expression found within another expression.</summary>
      <returns>The starting position of <paramref name="target" /> if it is found in <paramref name="toSearch" />.</returns>
      <param name="toSearch">The string expression to be searched.</param>
      <param name="target">The string expression to be found.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String,System.Nullable{System.Int32})">
      <summary>Returns the starting position of one expression found within another expression.</summary>
      <returns>The starting position of <paramref name="target" /> if it is found in <paramref name="toSearch" />.</returns>
      <param name="toSearch">The string expression to be searched.</param>
      <param name="target">The string expression to be found.</param>
      <param name="startLocation">The character position in <paramref name="toSearch" /> where searching begins.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CharIndex(System.String,System.String,System.Nullable{System.Int64})">
      <summary>Returns the starting position of one expression found within another expression.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> value that is the starting position of <paramref name="target" /> if it is found in <paramref name="toSearch" />.</returns>
      <param name="toSearch">The string expression to be searched.</param>
      <param name="target">The string expression to be found.</param>
      <param name="startLocation">The character position in <paramref name="toSearch" /> where searching begins.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[])">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The character array for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[],System.Byte[])">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The character array for which the checksum is calculated.</param>
      <param name="arg2">The character array for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Byte[],System.Byte[],System.Byte[])">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The character array for which the checksum is calculated.</param>
      <param name="arg2">The character array for which the checksum is calculated.</param>
      <param name="arg3">The character array for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid},System.Nullable{System.Guid})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.Guid},System.Nullable{System.Guid},System.Nullable{System.Guid})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan})">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String)">
      <summary>Returns the checksum value computed over the input argument.</summary>
      <returns>The checksum computed over the input value.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String,System.String)">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Checksum(System.String,System.String,System.String)">
      <summary>Returns the checksum value computed over the input arguments.</summary>
      <returns>The checksum computed over the input values.</returns>
      <param name="arg1">The value for which the checksum is calculated.</param>
      <param name="arg2">The value for which the checksum is calculated.</param>
      <param name="arg3">The value for which the checksum is calculated.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.ChecksumAggregate(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Returns the checksum of the values in a collection. Null values are ignored.</summary>
      <returns>The checksum computed from the input collection.</returns>
      <param name="arg">The collection of values over which the checksum is computed.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.ChecksumAggregate(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Returns the checksum of the values in a collection. Null values are ignored.</summary>
      <returns>The checksum computed from the input collection.</returns>
      <param name="arg">The collection of values over which the checksum is computed.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cos(System.Nullable{System.Decimal})">
      <summary>Returns the trigonometric cosine of the specified angle, in radians, in the specified expression.</summary>
      <returns>The trigonometric cosine of the specified angle.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cos(System.Nullable{System.Double})">
      <summary>Returns the trigonometric cosine of the specified angle, in radians, in the specified expression.</summary>
      <returns>The trigonometric cosine of the specified angle.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cot(System.Nullable{System.Decimal})">
      <summary>A mathematical function that returns the trigonometric cotangent of the specified angle, in radians.</summary>
      <returns>The trigonometric cotangent of the specified angle.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Cot(System.Nullable{System.Double})">
      <summary>A mathematical function that returns the trigonometric cotangent of the specified angle, in radians.</summary>
      <returns>The trigonometric cotangent of the specified angle.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CurrentTimestamp">
      <summary>Returns the current date and time. </summary>
      <returns>The current date and time.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.CurrentUser">
      <summary>Returns the name of the current user.</summary>
      <returns>The name of the current user.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Byte[])">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Boolean})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.DateTime})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.DateTimeOffset})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Decimal})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Double})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.Guid})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.Nullable{System.TimeSpan})">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DataLength(System.String)">
      <summary>Returns the number of bytes used to represent any expression.</summary>
      <returns>The number of bytes in the input value.</returns>
      <param name="arg">The value to be examined for data length.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.DateTime})">
      <summary>Returns a new datetime value based on adding an interval to the specified date.</summary>
      <returns>The new date.</returns>
      <param name="datePartArg">The part of the date to increment. </param>
      <param name="number">The value used to increment a date by a specified amount.</param>
      <param name="date">The date to increment.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.DateTimeOffset})">
      <summary>Returns a new date value based on adding an interval to the specified date.</summary>
      <returns>The new point in time, expressed as a date and time of day, relative to Coordinated Universal Time (UTC).</returns>
      <param name="datePartArg">The part of the date to increment.</param>
      <param name="number">The value used to increment a date by a specified amount.</param>
      <param name="dateTimeOffsetArg">The date to increment.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.Nullable{System.TimeSpan})">
      <summary>Returns a new time span value based on adding an interval to the specified time span.</summary>
      <returns>The new time span.</returns>
      <param name="datePartArg">The part of the date to increment.</param>
      <param name="number">The value used to increment a date by a specified amount.</param>
      <param name="time">The time span to increment.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateAdd(System.String,System.Nullable{System.Double},System.String)">
      <summary>Returns a new datetime value based on adding an interval to the specified date.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> value that is the new date.</returns>
      <param name="datePartArg">The part of the date to increment.</param>
      <param name="number">The value used to increment a date by a specified amount.</param>
      <param name="date">The date to increment.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTimeOffset})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.Nullable{System.TimeSpan})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTime},System.String)">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTime})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.Nullable{System.TimeSpan})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two Dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.DateTimeOffset},System.String)">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.DateTime})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.DateTimeOffset})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.Nullable{System.TimeSpan},System.String)">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.DateTime})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.DateTimeOffset})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.Nullable{System.TimeSpan})">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The value specifying the number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateDiff(System.String,System.String,System.String)">
      <summary>Returns the count of the specified datepart boundaries crossed between the specified start date and end date.</summary>
      <returns>The number of time intervals between the two dates.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="startDate">The first date.</param>
      <param name="endDate">The second date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.DateTime})">
      <summary>Returns a character string that represents the specified datepart of the specified date.</summary>
      <returns>The specified part of the specified date.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.DateTimeOffset})">
      <summary>Returns a character string that represents the specified datepart of the specified date.</summary>
      <returns>The specified part of the specified date.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.Nullable{System.TimeSpan})">
      <summary>Returns a character string that represents the specified datepart of the specified date.</summary>
      <returns>The specified part of the specified date.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DateName(System.String,System.String)">
      <summary>Returns a character string that represents the specified datepart of the specified date.</summary>
      <returns>The specified part of the specified date.</returns>
      <param name="datePartArg">The part of the date to calculate the differing number of time intervals.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.DateTime})">
      <summary>Returns an integer that represents the specified datepart of the specified date.</summary>
      <returns>The the specified datepart of the specified date.</returns>
      <param name="datePartArg">The part of the date to return the value.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.DateTimeOffset})">
      <summary>Returns an integer that represents the specified datepart of the specified date.</summary>
      <returns>The specified datepart of the specified date.</returns>
      <param name="datePartArg">The part of the date to return the value.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.Nullable{System.TimeSpan})">
      <summary>Returns an integer that represents the specified datepart of the specified date.</summary>
      <returns>The specified datepart of the specified date.</returns>
      <param name="datePartArg">The part of the date to return the value.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.DatePart(System.String,System.String)">
      <summary>Returns an integer that represents the specified datepart of the specified date.</summary>
      <returns>The specified datepart of the specified date.</returns>
      <param name="datePartArg">The part of the date to return the value.</param>
      <param name="date">The date.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Decimal})">
      <summary>Returns the corresponding angle in degrees for an angle specified in radians.</summary>
      <returns>The specified angle converted to degrees.</returns>
      <param name="arg1">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Double})">
      <summary>Returns the corresponding angle in degrees for an angle specified in radians.</summary>
      <returns>The specified angle converted to degrees.</returns>
      <param name="arg1">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Int32})">
      <summary>Returns the corresponding angle in degrees for an angle specified in radians.</summary>
      <returns>The specified angle converted to degrees.</returns>
      <param name="arg1">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Degrees(System.Nullable{System.Int64})">
      <summary>Returns the corresponding angle in degrees for an angle specified in radians.</summary>
      <returns>The specified angle converted to degrees.</returns>
      <param name="arg1">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Difference(System.String,System.String)">
      <summary>Returns an integer value that indicates the difference between the SOUNDEX values of two character expressions.</summary>
      <returns>The SOUNDEX difference between the two strings.</returns>
      <param name="string1">The first string.</param>
      <param name="string2">The second string.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Exp(System.Nullable{System.Decimal})">
      <summary>Returns the exponential value of the specified float expression.</summary>
      <returns>The constant e raised to the power of the input value.</returns>
      <param name="arg">The input value.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Exp(System.Nullable{System.Double})">
      <summary>Returns the exponential value of the specified float expression.</summary>
      <returns>The constant e raised to the power of the input value.</returns>
      <param name="arg">The input value.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.GetDate">
      <summary>Returns the current database system timestamp as a datetime value without the database time zone offset. This value is derived from the operating system of the computer on which the instance of SQL Server is running.</summary>
      <returns>The current database timestamp.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.GetUtcDate">
      <summary>Returns the current database system timestamp as a datetime value. The database time zone offset is not included. This value represents the current UTC time (Coordinated Universal Time). This value is derived from the operating system of the computer on which the instance of SQL Server is running.</summary>
      <returns>The current database UTC timestamp.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.HostName">
      <summary>Returns the workstation name.</summary>
      <returns>The name of the workstation.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.IsDate(System.String)">
      <summary>Indicates whether the input value is a valid date or time.</summary>
      <returns>1 if the input expression is a valid date or time value of datetime or smalldatetime data types; otherwise, 0.</returns>
      <param name="arg">The tested value.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.IsNumeric(System.String)">
      <summary>Indicates whether the input value is a valid numeric type.</summary>
      <returns>1 if the input expression is a valid numeric data type; otherwise, 0.</returns>
      <param name="arg">A string expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log(System.Nullable{System.Decimal})">
      <summary>Returns the natural logarithm of the specified input value.</summary>
      <returns>The natural logarithm of the input value.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log(System.Nullable{System.Double})">
      <summary>Returns the natural logarithm of the specified input value.</summary>
      <returns>The natural logarithm of the input value.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log10(System.Nullable{System.Decimal})">
      <summary>Returns the base-10 logarithm of the specified input value.</summary>
      <returns>The base-10 logarithm of the input value.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Log10(System.Nullable{System.Double})">
      <summary>Returns the base-10 logarithm of the specified input value.</summary>
      <returns>The base-10 logarithm of the input value.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.NChar(System.Nullable{System.Int32})">
      <summary>Returns the Unicode character with the specified integer code, as defined by the Unicode standard.</summary>
      <returns>The character that corresponds to the input character code.</returns>
      <param name="arg">A character code.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.PatIndex(System.String,System.String)">
      <summary>Returns the starting position of the first occurrence of a pattern in a specified expression, or zeros if the pattern is not found, on all valid text and character data types.</summary>
      <returns>The starting character position where the string pattern was found.</returns>
      <param name="stringPattern">A string pattern to search for.</param>
      <param name="target">The string to search.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Pi">
      <summary>Returns the constant value of pi.</summary>
      <returns>The numeric value of pi.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.QuoteName(System.String)">
      <summary>Returns a Unicode string with the delimiters added to make the input string a valid Microsoft SQL Server delimited identifier.</summary>
      <returns>The original string with brackets added.</returns>
      <param name="stringArg">The expression that quote characters will be added to.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.QuoteName(System.String,System.String)">
      <summary>Returns a Unicode string with the delimiters added to make the input string a valid Microsoft SQL Server delimited identifier.</summary>
      <returns>The original string with the specified quote characters added.</returns>
      <param name="stringArg">The expression that quote characters will be added to.</param>
      <param name="quoteCharacter">The one-character string to use as the delimiter. It can be a single quotation mark ( ' ), a left or right bracket ( [ ] ), or a double quotation mark ( " ). If quote_character is not specified, brackets are used.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Decimal})">
      <summary>Returns the radian measure corresponding to the specified angle in degrees.</summary>
      <returns>The radian measure of the specified angle.</returns>
      <param name="arg">The angle, measured in degrees.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Double})">
      <summary>Returns the radian measure corresponding to the specified angle in degrees.</summary>
      <returns>The radian measure of the specified angle.</returns>
      <param name="arg">The angle, measured in degrees.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Int32})">
      <summary>Returns the radian measure corresponding to the specified angle in degrees.</summary>
      <returns>The radian measure of the specified angle.</returns>
      <param name="arg">The angle, measured in degrees</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Radians(System.Nullable{System.Int64})">
      <summary>Returns the radian measure corresponding to the specified angle in degrees.</summary>
      <returns>The radian measure of the specified angle.</returns>
      <param name="arg">The angle, measured in degrees</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Rand">
      <summary>Returns a pseudo-random float value from 0 through 1, exclusive.</summary>
      <returns>The pseudo-random value.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Rand(System.Nullable{System.Int32})">
      <summary>Returns a pseudo-random float value from 0 through 1, exclusive.</summary>
      <returns>The pseudo-random value.</returns>
      <param name="seed">The seed value. If <paramref name="seed" /> is not specified, the SQL Server Database Engine assigns a seed value at random. For a specified seed value, the result returned is always the same.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Replicate(System.String,System.Nullable{System.Int32})">
      <summary>Repeats a string value a specified number of times.</summary>
      <returns>The target string, repeated the number of times specified by <paramref name="count" />.</returns>
      <param name="target">A valid string.</param>
      <param name="count">The value that specifies how many time to repeat <paramref name="target" />.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Decimal})">
      <summary>Returns the positive (+1), zero (0), or negative (-1) sign of the specified expression.</summary>
      <returns>The sign of the input expression.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Double})">
      <summary>Returns the positive (+1), zero (0), or negative (-1) sign of the specified expression.</summary>
      <returns>The sign of the input expression.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Int32})">
      <summary>Returns the positive (+1), zero (0), or negative (-1) sign of the specified expression.</summary>
      <returns>The sign of the input expression.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sign(System.Nullable{System.Int64})">
      <summary>Returns the positive (+1), zero (0), or negative (-1) sign of the specified expression.</summary>
      <returns>The sign of the input expression.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sin(System.Nullable{System.Decimal})">
      <summary>Returns the trigonometric sine of the specified angle.</summary>
      <returns>The trigonometric sine of the input expression.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Sin(System.Nullable{System.Double})">
      <summary>Returns the trigonometric sine of the specified angle.</summary>
      <returns>The trigonometric sine of the input expression.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SoundCode(System.String)">
      <summary>Converts an alphanumeric string to a four-character (SOUNDEX) code to find similar-sounding words or names.</summary>
      <returns>The SOUNDEX code of the input string.</returns>
      <param name="arg">A valid string.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Space(System.Nullable{System.Int32})">
      <summary>Returns a string of repeated spaces.</summary>
      <returns>A string that consists of the specified number of spaces.</returns>
      <param name="arg1">The number of spaces. If negative, a null string is returned.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Square(System.Nullable{System.Decimal})">
      <summary>Returns the square of the specified number.</summary>
      <returns>The square of the input value.</returns>
      <param name="arg1">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Square(System.Nullable{System.Double})">
      <summary>Returns the square of the specified number.</summary>
      <returns>The square of the input value.</returns>
      <param name="arg1">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SquareRoot(System.Nullable{System.Decimal})">
      <summary>Returns the square root of the specified number.</summary>
      <returns>The square root of the input value.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.SquareRoot(System.Nullable{System.Double})">
      <summary>Returns the square root of the specified number.</summary>
      <returns>The square root of the input value.</returns>
      <param name="arg">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal})">
      <summary>Returns character data converted from numeric data.</summary>
      <returns>The input expression converted to a string.</returns>
      <param name="number">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>Returns character data converted from numeric data.</summary>
      <returns>The input expression converted to a string.</returns>
      <param name="number">A numeric expression.</param>
      <param name="length">The total length of the string. This includes decimal point, sign, digits, and spaces. The default is 10.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>Returns character data converted from numeric data.</summary>
      <returns>The input expression converted to a string.</returns>
      <param name="number">A numeric expression.</param>
      <param name="length">The total length of the string. This includes decimal point, sign, digits, and spaces. The default is 10.</param>
      <param name="decimalArg">The number of places to the right of the decimal point. <paramref name="decimal" /> must be less than or equal to 16. If<paramref name=" decimal" /> is more than 16 then the result is truncated to sixteen places to the right of the decimal point.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double})">
      <summary>Returns character data converted from numeric data.</summary>
      <returns>The numeric input expression converted to a string.</returns>
      <param name="number">A numeric expression.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>Returns character data converted from numeric data.</summary>
      <returns>The numeric input expression converted to a string.</returns>
      <param name="number">A numeric expression.</param>
      <param name="length">The total length of the string. This includes decimal point, sign, digits, and spaces. The default is 10.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.StringConvert(System.Nullable{System.Double},System.Nullable{System.Int32},System.Nullable{System.Int32})">
      <summary>Returns character data converted from numeric data.</summary>
      <returns>The numeric input expression converted to a string.</returns>
      <param name="number">A numeric expression.</param>
      <param name="length">The total length of the string. This includes decimal point, sign, digits, and spaces. The default is 10.</param>
      <param name="decimalArg">The number of places to the right of the decimal point. <paramref name="decimal" /> must be less than or equal to 16. If<paramref name=" decimal" /> is more than 16 then the result is truncated to sixteen places to the right of the decimal point.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Stuff(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
      <summary>Inserts a string into another string. It deletes a specified length of characters in the target string at the start position and then inserts the second string into the target string at the start position.</summary>
      <returns>A string consisting of the two strings.</returns>
      <param name="stringInput">The target string.</param>
      <param name="start">The character position in <paramref name="stringinput" /> where the replacement string is to be inserted.</param>
      <param name="length">The number of characters to delete from <paramref name="stringInput" />. If <paramref name="length" /> is longer than <paramref name="stringInput" />, deletion occurs up to the last character in <paramref name="stringReplacement" />.</param>
      <param name="stringReplacement">The substring to be inserted into <paramref name="stringInput" />.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Tan(System.Nullable{System.Decimal})">
      <summary>Returns the trigonometric tangent of the input expression.</summary>
      <returns>The tangent of the input angle.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Tan(System.Nullable{System.Double})">
      <summary>Returns the trigonometric tangent of the input expression.</summary>
      <returns>The tangent of the input angle.</returns>
      <param name="arg">An angle, measured in radians.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.Unicode(System.String)">
      <summary>Returns the integer value, as defined by the Unicode standard, for the first character of the input expression.</summary>
      <returns>The character code for the first character in the input string.</returns>
      <param name="arg">A valid string.</param>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.UserName">
      <summary>Returns a database user name corresponding to a specified identification number.</summary>
      <returns>The user name.</returns>
    </member>
    <member name="M:System.Data.Objects.SqlClient.SqlFunctions.UserName(System.Nullable{System.Int32})">
      <summary>Returns a database user name corresponding to a specified identification number.</summary>
      <returns>The user name.</returns>
      <param name="arg">A user ID.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Data.Linq.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Linq</name>
  </assembly>
  <members>
    <member name="T:System.Data.Linq.Binary">
      <summary>Represents an immutable block of binary data.</summary>
    </member>
    <member name="M:System.Data.Linq.Binary.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Binary" /> class.</summary>
      <param name="value">The bytes representing the binary data.</param>
    </member>
    <member name="M:System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)">
      <summary>Determines whether two binary objects are equal.</summary>
      <returns>true if the two binary objects are equal; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.Object" /> to which the current object is being compared.</param>
    </member>
    <member name="M:System.Data.Linq.Binary.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.</summary>
      <returns>true if the two binary objects are equal; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Data.Linq.Binary.GetHashCode">
      <summary>Serves as a hash function for a particular type.</summary>
      <returns>A hash code for the current binary object.</returns>
    </member>
    <member name="P:System.Data.Linq.Binary.Length">
      <summary>Gets the length of the binary object.</summary>
      <returns>An integer representing the length.</returns>
    </member>
    <member name="M:System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
      <summary>Describes the equality relationship between two binary objects.</summary>
      <returns>true if the binary objects are equal; otherwise false.</returns>
      <param name="binary1">First binary object.</param>
      <param name="binary2">Second binary object.</param>
    </member>
    <member name="M:System.Data.Linq.Binary.op_Implicit(System.Byte[])~System.Data.Linq.Binary">
      <summary>Enables arrays of bytes to be implicitly coerced to the <see cref="T:System.Data.Linq.Binary" /> type in a programming language.</summary>
      <returns>A <see cref="T:System.Data.Linq.Binary" /> class containing the coerced value.</returns>
      <param name="value">The array of bytes to convert into an instance of the <see cref="T:System.Data.Linq.Binary" /> type.</param>
    </member>
    <member name="M:System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)">
      <summary>Describes the inequality relationship between two binary objects.</summary>
      <returns>true if the binary objects are not equal; otherwise false.</returns>
      <param name="binary1">The first binary object.</param>
      <param name="binary2">The second binary object.</param>
    </member>
    <member name="M:System.Data.Linq.Binary.ToArray">
      <summary>Returns an array of bytes that represents the current binary object.</summary>
      <returns>A byte array that contains the value of the current binary object.</returns>
    </member>
    <member name="M:System.Data.Linq.Binary.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current binary object.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current binary object.</returns>
    </member>
    <member name="T:System.Data.Linq.ChangeAction">
      <summary>Describes the type of change the entity will undergo when changes are submitted to the database.</summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.None">
      <summary>The entity will not be submitted.</summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.Delete">
      <summary>The entity will be deleted.</summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.Insert">
      <summary>The entity will be inserted.</summary>
    </member>
    <member name="F:System.Data.Linq.ChangeAction.Update">
      <summary>The entity will be updated.</summary>
    </member>
    <member name="T:System.Data.Linq.ChangeConflictCollection">
      <summary>Returns a collection of objects involved in concurrency conflicts.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.Clear">
      <summary>Removes all conflicts from the collection.</summary>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.Contains(System.Data.Linq.ObjectChangeConflict)">
      <summary>Specifies whether a given conflict is a member of the collection.</summary>
      <returns>Returns true if the specified conflict is a member of the collection.</returns>
      <param name="item">The specified conflict.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.CopyTo(System.Data.Linq.ObjectChangeConflict[],System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">The array to copy to.</param>
      <param name="arrayIndex">The array index where the copy is to start.</param>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.Count">
      <summary>Returns the number of conflicts in the collection</summary>
      <returns>integer</returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.GetEnumerator">
      <summary>Returns the enumerator for the collection.</summary>
      <returns>An enumerator for the collection.</returns>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.Item(System.Int32)">
      <summary>Returns an item in conflict.</summary>
      <returns>An <see cref="T:System.Data.Linq.ObjectChangeConflict" /> representing the item in conflict.</returns>
      <param name="index">Index in the collection of the item in conflict.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.Remove(System.Data.Linq.ObjectChangeConflict)">
      <summary>Specifies whether the specified conflict is removed from the collection.</summary>
      <returns>Returns true if the <see cref="T:System.Data.Linq.ObjectChangeConflict" /> is removed from the collection.</returns>
      <param name="item">The conflict to remove.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode)">
      <summary>Resolves all conflicts in the collection by using the specified strategy.</summary>
      <param name="mode">One of the options available in <see cref="T:System.Data.Linq.RefreshMode" />.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.ResolveAll(System.Data.Linq.RefreshMode,System.Boolean)">
      <summary>Resolves all conflicts in the collection by using the specified strategy.</summary>
      <param name="mode">The strategy to use to resolve the conflict.</param>
      <param name="autoResolveDeletes">If true, automatically resolves conflicts that result from a modified object that is no longer in the database.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{T}#Add(System.Data.Linq.ObjectChangeConflict)">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)" />.</summary>
      <param name="item">The item to add.</param>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</summary>
      <returns>Returns true if the collection is read-only.</returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>Copies the collection to an array.</summary>
      <param name="array">Name of the array.</param>
      <param name="index">Index of the array.</param>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>Returns true if access to the collection is synchronized (thread safe).</returns>
    </member>
    <member name="P:System.Data.Linq.ChangeConflictCollection.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>Returns an object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An enumerator that iterates through a collection.</returns>
    </member>
    <member name="T:System.Data.Linq.ChangeConflictException">
      <summary>Thrown when an update fails because database values have been updated since the client last read them.</summary>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.ChangeConflictException" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.ChangeConflictException" /> class and specifies a message to explain the exception.</summary>
      <param name="message">The message to be exposed when the exception is thrown.</param>
    </member>
    <member name="M:System.Data.Linq.ChangeConflictException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.ChangeConflictException" /> class, specifies a message to explain the exception, and specifies the exception that caused this exception.</summary>
      <param name="message">The message to be exposed when the exception is thrown.</param>
      <param name="innerException">Specifies the exception of which <see cref="T:System.Data.Linq.ChangeConflictException" /> is a result.</param>
    </member>
    <member name="T:System.Data.Linq.ChangeSet">
      <summary>Provides a container to hold changes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Linq.ChangeSet.Deletes">
      <summary>Gets a list of entities that have been deleted from the <see cref="T:System.Data.Linq.ChangeSet" />.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> of deleted entities.</returns>
    </member>
    <member name="P:System.Data.Linq.ChangeSet.Inserts">
      <summary>Gets a list of entities that have been inserted into the <see cref="T:System.Data.Linq.ChangeSet" />.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> of inserted entities.</returns>
    </member>
    <member name="M:System.Data.Linq.ChangeSet.ToString">
      <summary>Returns a string that represents the current <see cref="T:System.Data.Linq.ChangeSet" />.</summary>
      <returns>A string that represents the current <see cref="T:System.Data.Linq.ChangeSet" />.</returns>
    </member>
    <member name="P:System.Data.Linq.ChangeSet.Updates">
      <summary>Gets a list of entities that have been updated in the <see cref="T:System.Data.Linq.ChangeSet" />.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> of updated entities.</returns>
    </member>
    <member name="T:System.Data.Linq.CompiledQuery">
      <summary>Provides for compilation and caching of queries for reuse.</summary>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg12">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg12">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg13">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg12">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg13">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg14">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query. </returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg8">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg9">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg10">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg11">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg12">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg13">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg14">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg15">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="M:System.Data.Linq.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
      <summary>Compiles the query.</summary>
      <returns>A generic delegate that represents the compiled query.</returns>
      <param name="query">The query expression to be compiled.</param>
      <typeparam name="TArg0">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg1">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg2">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg3">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg4">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg5">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg6">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TArg7">Represents the type of the parameter that has to be passed in when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
      <typeparam name="TResult">The type of T in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> returned when executing the delegate returned by the <see cref="M:System.Data.Linq.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" /> method.</typeparam>
    </member>
    <member name="P:System.Data.Linq.CompiledQuery.Expression">
      <summary>Returns the query as a lambda expression.</summary>
      <returns>The lambda expression that represents the query.</returns>
    </member>
    <member name="T:System.Data.Linq.ConflictMode">
      <summary>Specifies when concurrency conflicts should be reported.</summary>
    </member>
    <member name="F:System.Data.Linq.ConflictMode.FailOnFirstConflict">
      <summary>Specifies that attempts to update the database should stop immediately when the first concurrency conflict error is detected.</summary>
    </member>
    <member name="F:System.Data.Linq.ConflictMode.ContinueOnConflict">
      <summary>Specifies that all updates to the database should be tried, and that concurrency conflicts should be accumulated and returned at the end of the process.</summary>
    </member>
    <member name="T:System.Data.Linq.DataContext">
      <summary>Represents the main entry point for the LINQ to SQL framework. </summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.DataContext" /> class by referencing the connection used by the .NET Framework.</summary>
      <param name="connection">The connection used by the .NET Framework.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.DataContext" /> class by referencing a connection and a mapping source.</summary>
      <param name="connection">The connection used by the .NET Framework.</param>
      <param name="mapping">The <see cref="T:System.Data.Linq.Mapping.MappingSource" />.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.DataContext" /> class by referencing a file source.</summary>
      <param name="fileOrServerOrConnection">This argument can be any one of the following:The name of a file where a SQL Server Express database resides.The name of a server where a database is present. In this case the provider uses the default database for a user.A complete connection string. LINQ to SQL just passes the string to the provider without modification.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.DataContext" /> class by referencing a file source and a mapping source.</summary>
      <param name="fileOrServerOrConnection">This argument can be any one of the following:The name of a file where a SQL Server Express database resides.The name of a server where a database is present. In this case the provider uses the default database for a user.A complete connection string. LINQ to SQL just passes the string to the provider without modification.</param>
      <param name="mapping">The <see cref="T:System.Data.Linq.Mapping.MappingSource" />.</param>
    </member>
    <member name="P:System.Data.Linq.DataContext.ChangeConflicts">
      <summary>Returns a collection of objects that caused concurrency conflicts when <see cref="M:System.Data.Linq.DataContext.SubmitChanges" /> was called.</summary>
      <returns>A collection of the objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Linq.DataContext.CommandTimeout">
      <summary>Increases the time-out period for queries that would otherwise time out during the default time-out period.</summary>
      <returns>An integer value that represents seconds.</returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Connection">
      <summary>Returns the connection used by the framework. </summary>
      <returns>The connection.</returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.CreateDatabase">
      <summary>Creates a database on the server.</summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])">
      <summary>Executes the table-valued database function associated with the specified CLR method. </summary>
      <returns>A collection of resultant values returned by the database query.</returns>
      <param name="instance"> The instance of the method invocation (the current object).</param>
      <param name="methodInfo">Identifies the CLR method that corresponds to a database method.</param>
      <param name="parameters">The array of parameters to be passed to the command.</param>
      <typeparam name="TResult">The type of the elements in the returned collection.</typeparam>
    </member>
    <member name="M:System.Data.Linq.DataContext.DatabaseExists">
      <summary>Determines whether the associated database can be opened. </summary>
      <returns>true if the specified database can be opened; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.DeferredLoadingEnabled">
      <summary>Specifies whether to delay-load one-to-many or one-to-one relationships. </summary>
      <returns>true if deferred loading is enabled; otherwise false. </returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.DeleteDatabase">
      <summary>Deletes the associated database. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Data.Linq.DataContext" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.Dispose(System.Boolean)">
      <summary>Releases resources used by the <see cref="T:System.Data.Linq.DataContext" />.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])">
      <summary>Executes SQL commands directly on the database.</summary>
      <returns>An int representing the number of rows modified by the executed command.</returns>
      <param name="command">The SQL command to be executed.</param>
      <param name="parameters">The array of parameters to be passed to the command. Note the following behavior:If the number of objects in the array is less than the highest number identified in the command string, an exception is thrown.If the array contains objects that are not referenced in the command string, no exception is thrown.If any one of the parameters is null, it is converted to DBNull.Value.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)">
      <summary>Called inside delete override methods to redelegate to LINQ to SQL the task of generating and executing dynamic SQL for delete operations.</summary>
      <param name="entity">The entity to be deleted.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)">
      <summary>Called inside insert override methods to redelegate to LINQ to SQL the task of generating and executing dynamic SQL for insert operations.</summary>
      <param name="entity">The entity to be inserted.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)">
      <summary>Called inside update override methods to redelegate to LINQ to SQL the task of generating and executing dynamic SQL for update operations.</summary>
      <param name="entity">The entity to be updated.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])">
      <summary>Executes the stored database procedure or scalar function associated with the specified CLR method.</summary>
      <returns>The result (the return value and output parameters) of executing the specified method.</returns>
      <param name="instance"> The instance of the method invocation (the current object).</param>
      <param name="methodInfo">Identifies the CLR method that corresponds to a database method. </param>
      <param name="parameters">The array of parameters to be passed to the command.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])">
      <summary>Executes SQL queries directly on the database and returns objects. </summary>
      <returns>A collection of objects returned by the query.</returns>
      <param name="query">The SQL query to be executed.</param>
      <param name="parameters">The array of parameters to be passed to the command. Note the following behavior:If the number of objects in the array is less than the highest number identified in the command string, an exception is thrown.If the array contains objects that are not referenced in the command string, no exception is thrown.If a parameter is null, it is converted to DBNull.Value.</param>
      <typeparam name="TResult">The type of the elements in the returned collection.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])">
      <summary>Executes SQL queries directly on the database.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of objects returned by the query.</returns>
      <param name="elementType">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to be returned.The algorithm for matching columns in the result of the query to fields or properties in the object works as follows:If a field or property is mapped to a particular column name, that column name is expected in the resultset.If a field or property is not mapped, a column with the same name as the field or property is expected in the resultset.The comparison is performed by looking for a case-sensitive match first. If this match is not found, a subsequent search occurs for a case-insensitive match.The query must return all the tracked fields and properties of the object (except those that are loaded on a deferred basis) when all the following conditions are true:<paramref name="T" /> is an entity explicitly tracked by the <see cref="T:System.Data.Linq.DataContext" />.<see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /> is true.The entity has a primary key.Otherwise an exception is thrown.</param>
      <param name="query">The SQL query to be executed.</param>
      <param name="parameters">The array of parameters to be passed to the command. Note the following behavior:If the number of objects in the array is less than the highest number identified in the command string, an exception is thrown.If the array contains objects that are not referenced in the command string, no exception is thrown.If a parameter is null, it is converted to DBNull.Value.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetChangeSet">
      <summary>Provides access to the modified objects tracked by <see cref="T:System.Data.Linq.DataContext" />.</summary>
      <returns>The set of objects is returned as three read-only collections.</returns>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)">
      <summary>Provides information about SQL commands generated by LINQ to SQL.</summary>
      <returns>The requested command information object.</returns>
      <param name="query">The query whose SQL command information is to be retrieved.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetTable``1">
      <summary>Returns a collection of objects of a particular type, where the type is defined by the <paramref name="TEntity" /> parameter.</summary>
      <returns>A collection of objects.</returns>
      <typeparam name="TEntity">The type of the objects to be returned.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.GetTable(System.Type)">
      <summary>Returns a collection of objects of a particular type, where the type is defined by the <paramref name="type" /> parameter.</summary>
      <returns>A collection of objects.</returns>
      <param name="type">The type of the objects to be returned.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Linq.DataContext.LoadOptions">
      <summary>Gets or sets the <see cref="T:System.Data.Linq.DataLoadOptions" /> associated with this <see cref="T:System.Data.Linq.DataContext" />.</summary>
      <returns>The prefetch load options for related data. </returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Log">
      <summary>Specifies the destination to write the SQL query or command. </summary>
      <returns>The <see cref="T:System.IO.TextReader" /> to use for writing the command.</returns>
    </member>
    <member name="P:System.Data.Linq.DataContext.Mapping">
      <summary>Returns the <see cref="T:System.Data.Linq.Mapping.MetaModel" /> on which the mapping is based.</summary>
      <returns>The <see cref="T:System.Data.Linq.Mapping.MetaModel" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Linq.DataContext.ObjectTrackingEnabled">
      <summary>Instructs the framework to track the original value and object identity for this <see cref="T:System.Data.Linq.DataContext" />.</summary>
      <returns>true to enable object tracking; otherwise, false. The default is true.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)">
      <summary>Refreshes a collection of entity objects according to the specified mode.</summary>
      <param name="mode">A value that specifies how optimistic concurrency conflicts are handled. </param>
      <param name="entities">The collection of entities to be refreshed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)">
      <summary>Refreshes an entity object according to the specified mode.</summary>
      <param name="mode">A value that specifies how optimistic concurrency conflicts are handled. </param>
      <param name="entity">The object to be refreshed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])">
      <summary>Refreshes an array of entity objects according to the specified mode.</summary>
      <param name="mode">A value that specifies how optimistic concurrency conflicts are handled. </param>
      <param name="entities">The array of entity objects to be refreshed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.SubmitChanges">
      <summary>Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.</summary>
    </member>
    <member name="M:System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)">
      <summary>Sends changes that were made to retrieved objects to the underlying database, and specifies the action to be taken if the submission fails.</summary>
      <param name="failureMode">The action to be taken if the submission fails. Valid arguments are as follows:<see cref="F:System.Data.Linq.ConflictMode.FailOnFirstConflict" /><see cref="F:System.Data.Linq.ConflictMode.ContinueOnConflict" /></param>
    </member>
    <member name="P:System.Data.Linq.DataContext.Transaction">
      <summary>Sets a local transaction for the .NET Framework to use to access the database.</summary>
      <returns>The transaction object used by the <see cref="T:System.Data.Linq.DataContext" /> when executing queries and commands.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>Converts an existing <see cref="T:System.Data.Common.DbDataReader" /> to objects.</summary>
      <returns>A collection of objects returned by the conversion.</returns>
      <param name="reader">The <see cref="T:System.Data.IDataReader" /> to be converted.</param>
      <typeparam name="TResult">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to be returned. </typeparam>
    </member>
    <member name="M:System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)">
      <summary>Converts an existing <see cref="T:System.Data.Common.DbDataReader" /> to objects.</summary>
      <returns>A list of objects returned by the conversion.</returns>
      <param name="reader">The <see cref="T:System.Data.IDataReader" /> to be converted.</param>
    </member>
    <member name="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)">
      <summary>Converts an existing <see cref="T:System.Data.Common.DbDataReader" /> to objects.</summary>
      <returns>A list of objects returned by the conversion.</returns>
      <param name="elementType">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to be returned.The algorithm for matching columns in the result to fields and properties in the object works as follows:If a field or property is mapped to a particular column name, that column name is expected in the resultset.If a field or property is not mapped, a column with the same name as the field or property is expected in the resultset.The comparison is performed by looking for a case-sensitive match first. If this match is not found, a subsequent search is occurs for a case-insensitive match.The query must return all the tracked fields and properties of the object (except those that are loaded on a deferred basis) when all the following conditions are true:<paramref name="T" /> is an entity explicitly tracked by the <see cref="T:System.Data.Linq.DataContext" />.<see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /> is true.The entity has a primary key.Otherwise an exception is thrown.</param>
      <param name="reader">The <see cref="T:System.Data.IDataReader" /> to be converted.</param>
    </member>
    <member name="T:System.Data.Linq.DataLoadOptions">
      <summary>Provides for immediate loading and filtering of related data.</summary>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.DataLoadOptions" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.AssociateWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>Filters objects retrieved for a particular relationship.</summary>
      <param name="expression">Identifies the query to be used on a particular one-to-many field or property. Note the following:If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.If an operator other than a valid operator appears in the expression, an exception is thrown. Valid operators are as follows:WhereOrderByThenByOrderByDescendingThenByDescendingTake</param>
      <typeparam name="T">The type that is queried against.If the type is unmapped, an exception is thrown.</typeparam>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.AssociateWith(System.Linq.Expressions.LambdaExpression)">
      <summary>Filters the objects retrieved for a particular relationship.</summary>
      <param name="expression">Identifies the query to be used on a particular one-to-many field or property. Note the following:If the expression does not start with a field or property that represents a one-to-many relationship, an exception is thrown.If an operator other than a valid operator appears in the expression, an exception is thrown. Valid operators are as follows:WhereOrderByThenByOrderByDescendingThenByDescendingTake</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.LoadWith``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>Specifies which sub-objects to retrieve when a query is submitted for an object of type T.</summary>
      <param name="expression">Identifies the field or property to be retrieved.If the expression does not identify a field or property that represents a one-to-one or one-to-many relationship, an exception is thrown.</param>
      <typeparam name="T">Type that is queried against.If this type is unmapped, an exception is thrown.</typeparam>
    </member>
    <member name="M:System.Data.Linq.DataLoadOptions.LoadWith(System.Linq.Expressions.LambdaExpression)">
      <summary>Retrieves specified data related to the main target by using a lambda expression.</summary>
      <param name="expression">A lambda expression that identifies the related material.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Linq.DBConvert">
      <summary>Used internally to convert one type to another.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DBConvert.ChangeType``1(System.Object)">
      <summary>Changes the specified value to the current type.</summary>
      <returns>An object of the specified type that contains the converted value.</returns>
      <param name="value">The object to be converted.</param>
      <typeparam name="T">The type to change to.</typeparam>
    </member>
    <member name="M:System.Data.Linq.DBConvert.ChangeType(System.Object,System.Type)">
      <summary>Changes the specified value to the specified type.</summary>
      <returns>An object that contains the converted value of the specified type.</returns>
      <param name="value">The object to be converted.</param>
      <param name="type">The type to convert the object to.</param>
    </member>
    <member name="T:System.Data.Linq.DuplicateKeyException">
      <summary>Thrown when an attempt is made to add an object to the identity cache by using a key that is already being used.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.DuplicateKeyException.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.DuplicateKeyException" /> class.</summary>
      <param name="duplicate">The duplicate key that caused the exception to be thrown.</param>
    </member>
    <member name="M:System.Data.Linq.DuplicateKeyException.#ctor(System.Object,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.DuplicateKeyException" /> class by referencing the duplicate key and providing an error message.</summary>
      <param name="duplicate">The duplicate key that caused the exception to be thrown.</param>
      <param name="message">The message to appear when the exception is thrown.</param>
    </member>
    <member name="M:System.Data.Linq.DuplicateKeyException.#ctor(System.Object,System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.DuplicateKeyException" /> class by referencing the duplicate key, providing an error message, and specifying the exception that caused this exception to be thrown.</summary>
      <param name="duplicate">The duplicate key that caused the exception to be thrown.</param>
      <param name="message">The message to appear when the exception is thrown.</param>
      <param name="innerException">The previous exception that caused the <see cref="T:System.Data.Linq.DuplicateKeyException" /> exception to be thrown.</param>
    </member>
    <member name="P:System.Data.Linq.DuplicateKeyException.Object">
      <summary>Gets the object that caused the exception.</summary>
      <returns>The object that caused the exception.</returns>
    </member>
    <member name="T:System.Data.Linq.EntityRef`1">
      <summary>Provides for deferred loading and relationship maintenance for the singleton side of a one-to-many relationship in a LINQ to SQL application. </summary>
      <typeparam name="TEntity">The type of the target entity.</typeparam>
    </member>
    <member name="M:System.Data.Linq.EntityRef`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.EntityRef`1" /> class by specifying the source.</summary>
      <param name="source">The reference source.</param>
    </member>
    <member name="M:System.Data.Linq.EntityRef`1.#ctor(System.Data.Linq.EntityRef{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.EntityRef`1" /> class by referencing the target entity.</summary>
      <param name="entityRef">The target entity.</param>
    </member>
    <member name="M:System.Data.Linq.EntityRef`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.EntityRef`1" /> class by specifying the target entity.</summary>
      <param name="entity">The target entity.</param>
    </member>
    <member name="P:System.Data.Linq.EntityRef`1.Entity">
      <summary>Gets or sets the target entity.</summary>
      <returns>The target entity.</returns>
    </member>
    <member name="P:System.Data.Linq.EntityRef`1.HasLoadedOrAssignedValue">
      <summary>Gets a value that indicates whether the target has been loaded or assigned.</summary>
      <returns>True if the target has been loaded or assigned.</returns>
    </member>
    <member name="T:System.Data.Linq.EntitySet`1">
      <summary>Provides for deferred loading and relationship maintenance for the collection side of one-to-many and one-to-one relationships in a LINQ to SQL applications. </summary>
      <typeparam name="TEntity">The data type of the target entity.</typeparam>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.EntitySet`1" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.#ctor(System.Action{`0},System.Action{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.EntitySet`1" /> class while supplying handlers for add and remove operations.</summary>
      <param name="onAdd">Delegate for <see cref="M:System.Data.Linq.EntitySet`1.Add(`0)" />.</param>
      <param name="onRemove">Delegate for <see cref="M:System.Data.Linq.EntitySet`1.Remove(`0)" />.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Add(`0)">
      <summary>Adds an entity.</summary>
      <param name="entity">The entity to add.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Adds a collection of entities.</summary>
      <param name="collection">The collection to be added.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Assign(System.Collections.Generic.IEnumerable{`0})">
      <summary>Assigns an <see cref="T:System.Data.Linq.EntitySet`1" /> collection to another <see cref="T:System.Data.Linq.EntitySet`1" /> collection.</summary>
      <param name="entitySource">The collection to assign.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Clear">
      <summary>Removes all items.</summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Contains(`0)">
      <summary>Specifies whether the <see cref="T:System.Data.Linq.EntitySet`1" /> contains a specific entity.</summary>
      <returns>true if the <see cref="T:System.Data.Linq.EntitySet`1" /> contains the entity; otherwise, false.</returns>
      <param name="entity">The entity.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the <see cref="T:System.Data.Linq.EntitySet`1" /> to an array.</summary>
      <param name="array">The array to copy to.</param>
      <param name="arrayIndex">The starting index in the array.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.Count">
      <summary>Gets the number of entities in the <see cref="T:System.Data.Linq.EntitySet`1" /> collection.</summary>
      <returns>An integer representing the number of entities.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" />.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.GetNewBindingList">
      <summary>Creates a new list for binding to a data source.</summary>
      <returns>A new <see cref="T:System.ComponentModel.IBindingList" /> for binding to a data source.</returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.HasLoadedOrAssignedValues">
      <summary>Specifies whether the <see cref="T:System.Data.Linq.EntitySet`1" /> has loaded or assigned a value.</summary>
      <returns>Returns true if the <see cref="T:System.Data.Linq.EntitySet`1" /> has either loaded or assigned a value.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.IndexOf(`0)">
      <summary>Returns the index of the entity.</summary>
      <returns>An integer representing the index.</returns>
      <param name="entity">The entity whose index is to be returned.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Insert(System.Int32,`0)">
      <summary>Inserts an entity at an index position.</summary>
      <param name="index">The index representing the position at which to insert the entity.</param>
      <param name="entity">The entity to be inserted.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.IsDeferred">
      <summary>Specifies whether this <see cref="T:System.Data.Linq.EntitySet`1" /> has a deferred query that has not yet executed.</summary>
      <returns>true if a deferred query has not yet been executed; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>An <see cref="T:System.Data.Linq.EntitySet`1" /> representing the item.</returns>
      <param name="index">The index of the element.</param>
    </member>
    <member name="E:System.Data.Linq.EntitySet`1.ListChanged">
      <summary>Occurs when the contents of a list are changed.</summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Load">
      <summary>Loads the <see cref="T:System.Data.Linq.EntitySet`1" />.</summary>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.Remove(`0)">
      <summary>Removes an entity.</summary>
      <returns>true if the entity is successfully removed; otherwise, false.</returns>
      <param name="entity">The entity to be removed.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.RemoveAt(System.Int32)">
      <summary>Removes an entity at a specified index.</summary>
      <param name="index">The index of the entity to be removed.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.SetSource(System.Collections.Generic.IEnumerable{`0})">
      <summary>Sets the source of the <see cref="T:System.Data.Linq.EntitySet`1" />.</summary>
      <param name="entitySource">The source of the <see cref="T:System.Data.Linq.EntitySet`1" />.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" />.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
      <param name="array">The array to which elements of the collection are copied.</param>
      <param name="index">The array index at which copying begins.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>true if access to the collection is synchronized (thread-safe); otherwise, false. </returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.IEnumerable.GetEnumerator" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through a collection.</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Add(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
      <returns>The position into which the new element was inserted.</returns>
      <param name="value">The object to add to the list.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Contains(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
      <returns>true if the <see cref="T:System.Object" /> is found in the <see cref="T:System.Collections.IList" />; otherwise, false.</returns>
      <param name="value">The object to locate in the list.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#IndexOf(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
      <returns>The index of <paramref name="value" /> if found in the list; otherwise, -1.</returns>
      <param name="value">The object to locate in the list.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
      <param name="index">The index of the object in the list.</param>
      <param name="value">The object to insert into the list.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#IList#IsFixedSize">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
      <returns>true if the collection has a fixed size; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#IList#IsReadOnly">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.IsReadOnly" />.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#Collections#IList#Item(System.Int32)">
      <summary>For a description of this member, see <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
      <returns>The element at the specified index.</returns>
      <param name="index">The index at which to set or get the element.</param>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#Collections#IList#Remove(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
      <param name="value">The object to remove from the list.</param>
    </member>
    <member name="P:System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>For a description of this member, see <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />.</summary>
      <returns>true if the collection is a collection of <see cref="T:System.Collections.IList" /> objects; otherwise false;</returns>
    </member>
    <member name="M:System.Data.Linq.EntitySet`1.System#ComponentModel#IListSource#GetList">
      <summary>For a description of this member, see <see cref="M:System.ComponentModel.IListSource.GetList" />.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> that can be bound to a data source from the object.</returns>
    </member>
    <member name="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException">
      <summary>Represents errors that occur when an attempt is made to change a foreign key when the entity is already loaded.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Data.Linq.IExecuteResult">
      <summary>Provides access to the return value or results of executing a query.</summary>
    </member>
    <member name="M:System.Data.Linq.IExecuteResult.GetParameterValue(System.Int32)">
      <summary>Provides access to the nth output parameter.</summary>
      <returns>An object that contains the value of the specified parameter. </returns>
      <param name="parameterIndex">The index of the parameter to be retrieved.</param>
    </member>
    <member name="P:System.Data.Linq.IExecuteResult.ReturnValue">
      <summary>Gets the return value or result of the executed query.</summary>
      <returns>The value or result of the executed query.</returns>
    </member>
    <member name="T:System.Data.Linq.IFunctionResult">
      <summary>Provides access to the return value of a function.</summary>
    </member>
    <member name="P:System.Data.Linq.IFunctionResult.ReturnValue">
      <summary>Gets the return value of a function.</summary>
      <returns>The value returned by the function.</returns>
    </member>
    <member name="T:System.Data.Linq.IMultipleResults">
      <summary>Represents the results of mapped functions or queries with variable return sequences.</summary>
    </member>
    <member name="M:System.Data.Linq.IMultipleResults.GetResult``1">
      <summary>Retrieves the next result as a sequence of a specified type.</summary>
      <returns>An enumeration for iterating over the results.</returns>
      <typeparam name="TElement">The type of the sequence to be returned.</typeparam>
    </member>
    <member name="T:System.Data.Linq.ISingleResult`1">
      <summary>Represents the result of a mapped function that has a single return sequence.</summary>
      <typeparam name="T">The type of the elements in the return sequence.</typeparam>
    </member>
    <member name="T:System.Data.Linq.ITable">
      <summary>Used for weakly typed query scenarios.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.ITable.Attach(System.Object)">
      <summary>Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in an unmodified state.</summary>
      <param name="entity">The entity to be attached.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)">
      <summary>Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</summary>
      <param name="entity">The collection of entities.</param>
      <param name="asModified">true to attach the entities as modified.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.Attach(System.Object,System.Object)">
      <summary>Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</summary>
      <param name="entity">The entity to be attached.</param>
      <param name="original">An instance of the same entity type with data members that contain the original values.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)">
      <summary>Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</summary>
      <param name="entities">The collection of entities.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)">
      <summary>Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</summary>
      <param name="entities">The collection of entities.</param>
      <param name="asModified">true to attach the entities as modified.</param>
    </member>
    <member name="P:System.Data.Linq.ITable.Context">
      <summary>Gets the <see cref="T:System.Data.Linq.DataContext" /> that has been used to retrieve this <see cref="T:System.Data.Linq.ITable" />.</summary>
      <returns>The <see cref="T:System.Data.Linq.DataContext" /> used to retrieve the <see cref="T:System.Data.Linq.ITable" />.</returns>
    </member>
    <member name="M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)">
      <summary>Puts all entities from the collection into a pending delete state.</summary>
      <param name="entities">The collection from which all items are removed.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)">
      <summary>Puts an entity from this table into a pending delete state.</summary>
      <param name="entity">The entity to be removed.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)">
      <summary>Returns an array of modified members that contain their current and original values.</summary>
      <param name="entity">The entity from which to get the array.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)">
      <summary>Retrieves original values.</summary>
      <returns>A copy of the original entity. The value is null if the entity passed in is not tracked. Disconnected entities sent back by a client must be attached before the <see cref="T:System.Data.Linq.DataContext" /> can begin to track their state. The "original state" of a newly attached entity is established based on values supplied by the client. The data context does not track the state of disconnected entities.</returns>
      <param name="entity">The entity whose original value is to be retrieved.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)">
      <summary>Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in a pending insert state.</summary>
      <param name="entities">The entities to add.</param>
    </member>
    <member name="M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)">
      <summary>Adds an entity in a pending insert state to this table.</summary>
      <param name="entity">The entity to be added.</param>
    </member>
    <member name="P:System.Data.Linq.ITable.IsReadOnly">
      <summary>Indicates if the type of the entities contained in this <see cref="T:System.Data.Linq.ITable" /> instance has a primary key.</summary>
      <returns>Returns true if the entity type does not have a primary key; otherwise, false.</returns>
    </member>
    <member name="T:System.Data.Linq.ITable`1">
      <summary>Represents a table for a particular type in the underlying database. </summary>
      <typeparam name="TEntity"></typeparam>
    </member>
    <member name="M:System.Data.Linq.ITable`1.Attach(`0)">
      <summary>When overridden, attaches a disconnected or "detached" entity to a new <see cref="T:System.Data.Linq.DataContext" /> when original values are required for optimistic concurrency checks.</summary>
      <param name="entity">The object to be added.</param>
    </member>
    <member name="M:System.Data.Linq.ITable`1.DeleteOnSubmit(`0)">
      <summary>When overridden, puts an entity from this table into a pending delete state.</summary>
      <param name="entity">The object to delete.</param>
    </member>
    <member name="M:System.Data.Linq.ITable`1.InsertOnSubmit(`0)">
      <summary>When overridden, adds an entity in a pending insert state to this <see cref="T:System.Data.Linq.ITable`1" />.</summary>
      <param name="entity">The object to insert.</param>
    </member>
    <member name="T:System.Data.Linq.Link`1">
      <summary>Used to enable deferred loading of individual properties (similar to <see cref="T:System.Data.Linq.EntityRef`1" />).</summary>
      <typeparam name="T">The type of the elements in the deferred source.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Link`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Link`1" /> structure by referencing the source.</summary>
      <param name="source">The source collection.</param>
    </member>
    <member name="M:System.Data.Linq.Link`1.#ctor(System.Data.Linq.Link{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Link`1" /> structure by copying the internal state from another <see cref="T:System.Data.Linq.Link`1" /> instance.</summary>
      <param name="link">The <see cref="T:System.Data.Linq.Link`1" /> instance from which to copy.</param>
    </member>
    <member name="M:System.Data.Linq.Link`1.#ctor(`0)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Link`1" /> structure by referencing the value of the property.</summary>
      <param name="value">The value for the property.</param>
    </member>
    <member name="P:System.Data.Linq.Link`1.HasLoadedOrAssignedValue">
      <summary>Specifies whether the <see cref="T:System.Data.Linq.Link`1" /> has loaded or assigned a value.</summary>
      <returns>true if the <see cref="T:System.Data.Linq.Link`1" /> has either loaded or assigned a value; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Linq.Link`1.HasValue">
      <summary>Gets a value that specifies whether the source has a value.</summary>
      <returns>Returns true if the source has an assigned or loaded value (including null).</returns>
    </member>
    <member name="P:System.Data.Linq.Link`1.Value">
      <summary>Gets or sets the value assigned to or loaded by the <see cref="T:System.Data.Linq.Link`1" />.</summary>
      <returns>The value of this deferred property.</returns>
    </member>
    <member name="T:System.Data.Linq.MemberChangeConflict">
      <summary>Represents a situation in which an attempted update fails because member values have been updated since the client last read them.</summary>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.CurrentValue">
      <summary>Gets the current value of the member in conflict.</summary>
      <returns>The object in conflict.</returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.DatabaseValue">
      <summary>Gets the database value of the member in conflict.</summary>
      <returns>The value of the object in conflict.</returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.IsModified">
      <summary>Gets a value that indicates whether the member data has been changed since the last database read or refresh.</summary>
      <returns>True if the member data has been changed.</returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.IsResolved">
      <summary>Gets a value that indicates whether the conflict has been resolved.</summary>
      <returns>True if the conflict has been resolved.</returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.Member">
      <summary>Gets metadata information about the member in conflict.</summary>
      <returns>Information about the member in conflict.</returns>
    </member>
    <member name="P:System.Data.Linq.MemberChangeConflict.OriginalValue">
      <summary>Gets the original value of the member in conflict.</summary>
      <returns>The original value of the member in conflict.</returns>
    </member>
    <member name="M:System.Data.Linq.MemberChangeConflict.Resolve(System.Data.Linq.RefreshMode)">
      <summary>Uses a <see cref="T:System.Data.Linq.RefreshMode" /> parameter to automatically specify the value to set as the current value for the member in conflict.</summary>
      <param name="refreshMode">See <see cref="T:System.Data.Linq.RefreshMode" />.</param>
    </member>
    <member name="M:System.Data.Linq.MemberChangeConflict.Resolve(System.Object)">
      <summary>Specifies the value to set as the current value for the member in conflict.</summary>
      <param name="value">The value to set as the current value.</param>
    </member>
    <member name="T:System.Data.Linq.ModifiedMemberInfo">
      <summary>Holds values of members that have been modified in LINQ to SQL applications.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Linq.ModifiedMemberInfo.CurrentValue">
      <summary>Gets the current value of the modified member.</summary>
      <returns>The value of the member.</returns>
    </member>
    <member name="P:System.Data.Linq.ModifiedMemberInfo.Member">
      <summary>Gets member information for the modified member.</summary>
      <returns>Information about the member in conflict.</returns>
    </member>
    <member name="P:System.Data.Linq.ModifiedMemberInfo.OriginalValue">
      <summary>Gets the original value of the modified member.</summary>
      <returns>The original value for the modified member.</returns>
    </member>
    <member name="T:System.Data.Linq.ObjectChangeConflict">
      <summary>Represents an update attempt with one or more optimistic concurrency conflicts.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.IsDeleted">
      <summary>Gets a value that indicates whether the object in conflict has been deleted from the database.</summary>
      <returns>True if the object has been deleted.</returns>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.IsResolved">
      <summary>Gets a value that indicates whether the conflicts for this object have already been resolved.</summary>
      <returns>True if the conflicts have been resolved.</returns>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.MemberConflicts">
      <summary>Gets a collection of all member conflicts that caused the update to fail.</summary>
      <returns>A collection of member conflicts.</returns>
    </member>
    <member name="P:System.Data.Linq.ObjectChangeConflict.Object">
      <summary>Gets the object in conflict.</summary>
      <returns>The object in conflict.</returns>
    </member>
    <member name="M:System.Data.Linq.ObjectChangeConflict.Resolve">
      <summary>Resolves member conflicts by keeping current values and resetting the baseline original values to match the more recent database values.</summary>
    </member>
    <member name="M:System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode)">
      <summary>Resolves member conflicts by using the specified <see cref="T:System.Data.Linq.RefreshMode" />.</summary>
      <param name="refreshMode">The appropriate option from <see cref="T:System.Data.Linq.RefreshMode" />.</param>
    </member>
    <member name="M:System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode,System.Boolean)">
      <summary>Resolve member conflicts keeping current values and resetting the baseline original values.</summary>
      <param name="refreshMode">The appropriate option from <see cref="T:System.Data.Linq.RefreshMode" />.</param>
      <param name="autoResolveDeletes">When true, automatically resolves conflicts resulting from a modified object that is no longer in the database. </param>
    </member>
    <member name="T:System.Data.Linq.RefreshMode">
      <summary>Defines how the <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> method handles optimistic concurrency conflicts.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Data.Linq.RefreshMode.KeepCurrentValues">
      <summary>Forces the <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> method to swap the original value with the values retrieved from the database. No current value is modified.</summary>
    </member>
    <member name="F:System.Data.Linq.RefreshMode.KeepChanges">
      <summary>Forces the <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> method to keep the current value that has been changed, but updates the other values with the database values.</summary>
    </member>
    <member name="F:System.Data.Linq.RefreshMode.OverwriteCurrentValues">
      <summary>Forces the <see cref="Overload:System.Data.Linq.DataContext.Refresh" /> method to override all the current values with the values from the database.</summary>
    </member>
    <member name="T:System.Data.Linq.Table`1">
      <summary>Represents a table for a particular type in the underlying database.</summary>
      <typeparam name="TEntity">The type of the data in the table.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.Attach(`0)">
      <summary>Attaches a disconnected or "detached" entity to a new <see cref="T:System.Data.Linq.DataContext" /> when original values are required for optimistic concurrency checks.</summary>
      <param name="entity">The original values of the entity to be attached.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)">
      <summary>Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</summary>
      <param name="entity">The entity to be attached.</param>
      <param name="asModified">True to attach the entity as modified.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.Attach(`0,`0)">
      <summary>Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</summary>
      <param name="entity">The entity to be attached.</param>
      <param name="original">An instance of the same entity type with data members that contain the original values.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</summary>
      <param name="entities">The collection of entities.</param>
      <typeparam name="TSubEntity">The type of entities to attach.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
      <summary>Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</summary>
      <param name="entities">The collection of entities.</param>
      <param name="asModified">true if the object has a timestamp or RowVersion member, false if original values are being used for the optimistic concurrency check.</param>
      <typeparam name="TSubEntity">The type of entities to attach.</typeparam>
    </member>
    <member name="P:System.Data.Linq.Table`1.Context">
      <summary>Gets the <see cref="T:System.Data.Linq.DataContext" /> that has been used to retrieve this <see cref="T:System.Data.Linq.Table`1" />.</summary>
      <returns>The <see cref="T:System.Data.Linq.DataContext" />.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Puts all entities from the collection into a pending delete state.</summary>
      <param name="entities">The entities to delete.</param>
      <typeparam name="TSubEntity">The type of the elements to delete.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)">
      <summary>Puts an entity from this table into a pending delete state.</summary>
      <param name="entity">The entity to be deleted.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetEnumerator">
      <summary>Gets an enumerator for the collection.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)">
      <summary>Returns an array of modified members that contain their current and original values.</summary>
      <returns>An array of modified members.</returns>
      <param name="entity">The entity from which to get the array.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetNewBindingList">
      <summary>Creates a new list for binding to a data source.</summary>
      <returns>A new <see cref="T:System.ComponentModel.IBindingList" /> for binding to a data source. </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)">
      <summary>Returns an instance that contains the original state of the entity.</summary>
      <returns>A <see cref="T:System.Data.Linq.Table`1" /> instance in its original state.</returns>
      <param name="entity">The entity whose original state is to be returned.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in a pending insert state.</summary>
      <param name="entities">The entities to add.</param>
      <typeparam name="TSubEntity">The type of the elements to insert.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)">
      <summary>Adds an entity in a pending insert state to this <see cref="T:System.Data.Linq.Table`1" />.</summary>
      <param name="entity">The entity to be added.</param>
    </member>
    <member name="P:System.Data.Linq.Table`1.IsReadOnly">
      <summary>Indicates if the type of the entities contained in this <see cref="T:System.Data.Linq.Table`1" /> instance has a primary key.</summary>
      <returns>Returns true if the entity type does not have a primary key; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.</summary>
      <returns>An enumerator that can be used to iterate through the collection.</returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>For a description of this member, see <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />. </summary>
      <returns>true if the collection is a collection of <see cref="T:System.Collections.IList" /> objects; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList">
      <summary>For a description of this member, see <see cref="M:System.ComponentModel.IListSource.GetList" />.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> that can be bound to a data source.</returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.Attach(System.Object)" />.</summary>
      <param name="entity">The entity to be attached.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)" />.</summary>
      <param name="entity">The entity to be attached.</param>
      <param name="asModified">True to attach the entity as modified.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.Attach(System.Object,System.Object)" />.</summary>
      <param name="entity">The entity to be attached.</param>
      <param name="original">An instance of the same entity type with data members that contain the original values.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)" />.</summary>
      <param name="entities">The collection of entities.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)" />.</summary>
      <param name="entities">The collection of entities.</param>
      <param name="asModified">True to attach the entities as modified.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)" />.</summary>
      <param name="entities">The entities being removed.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)" />.</summary>
      <param name="entity">The entity to be removed.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)" />.</summary>
      <returns>An array of modified members.</returns>
      <param name="entity">The entity from which to obtain the modified members.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)" />.</summary>
      <returns>A copy of the original entity. </returns>
      <param name="entity">The entity whose original state is to be accessed. </param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)" />.</summary>
      <param name="entities">The collection of entities.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)">
      <summary>For a description of this member, see <see cref="M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)" />.</summary>
      <param name="entity">The entity to add.</param>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType">
      <summary>For a description of this member, see <see cref="P:System.Linq.IQueryable.ElementType" />.</summary>
      <returns>A <see cref="T:System.Type" /> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed. </returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression">
      <summary>For a description of this member, see <see cref="P:System.Linq.IQueryable.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of <see cref="T:System.Linq.IQueryable" />. </returns>
    </member>
    <member name="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider">
      <summary>For a description of this member, see <see cref="P:System.Linq.IQueryable.Provider" />.</summary>
      <returns>The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source. </returns>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>For a description of this member, see <see cref="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)" />.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</returns>
      <param name="expression">The query expression.</param>
      <typeparam name="TResult">The type of the data in the table.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>For a description of this member, see <see cref="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)" />.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</returns>
      <param name="expression">The query expression.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>For a description of this member, see <see cref="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)" />.</summary>
      <returns>The value that results from executing the specified query.</returns>
      <param name="expression">The query expression to execute.</param>
    </member>
    <member name="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>For a description of this member, see <see cref="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)" />.</summary>
      <returns>The value that results from executing the specified query.</returns>
      <param name="expression">The query expression to execute.</param>
      <typeparam name="TResult">The type of the data in the table.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Table`1.ToString">
      <summary>Returns a string that represents the table.</summary>
      <returns>A string representing the table.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Data.Linq.Mapping.AssociationAttribute">
      <summary>Designates a property to represent a database association, such as a foreign key relationship.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.AssociationAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.AssociationAttribute" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.DeleteOnNull">
      <summary>When placed on a 1:1 association whose foreign key members are all non-nullable, deletes the object when the association is set to null.</summary>
      <returns>Setting to True deletes the object. The default value is False.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.DeleteRule">
      <summary>Gets or sets delete behavior for an association.</summary>
      <returns>A string representing the rule.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.IsForeignKey">
      <summary>Gets or sets the member as the foreign key in an association representing a database relationship.</summary>
      <returns>Default = false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.IsUnique">
      <summary>Gets or sets the indication of a uniqueness constraint on the foreign key.</summary>
      <returns>Default = false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.OtherKey">
      <summary>Gets or sets one or more members of the target entity class as key values on the other side of the association.</summary>
      <returns>Default = Id of the related class.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.AssociationAttribute.ThisKey">
      <summary>Gets or sets members of this entity class to represent the key values on this side of the association.</summary>
      <returns>Default = Id of the containing class.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.AttributeMappingSource">
      <summary>A mapping source that uses attributes on the context to create the mapping model.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.AttributeMappingSource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.AttributeMappingSource" /> class.</summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.AutoSync">
      <summary>Instructs the runtime how to retrieve the value after an insert or update operation.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.Default">
      <summary>Automatically selects the value.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.Always">
      <summary>Always returns the value.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.Never">
      <summary>Never returns the value.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.OnInsert">
      <summary>Returns the value only after an insert operation.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.AutoSync.OnUpdate">
      <summary>Returns the value only after an update operation.</summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.ColumnAttribute">
      <summary>Associates a class with a column in a database table.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ColumnAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.ColumnAttribute" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.AutoSync">
      <summary>Gets or sets the <see cref="T:System.Data.Linq.Mapping.AutoSync" /> enumeration.</summary>
      <returns>The <see cref="T:System.Data.Linq.Mapping.AutoSync" /> value.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.CanBeNull">
      <summary>Gets or sets whether a column can contain null values.</summary>
      <returns>Default = true.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.DbType">
      <summary>Gets or sets the type of the database column.</summary>
      <returns>See Remarks.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.Expression">
      <summary>Gets or sets whether a column is a computed column in a database.</summary>
      <returns>Default = empty.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsDbGenerated">
      <summary>Gets or sets whether a column contains values that the database auto-generates.</summary>
      <returns>Default = false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsDiscriminator">
      <summary>Gets or sets whether a column contains a discriminator value for a LINQ to SQL inheritance hierarchy.</summary>
      <returns>Default = false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsPrimaryKey">
      <summary>Gets or sets whether this class member represents a column that is part or all of the primary key of the table.</summary>
      <returns>Default = false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion">
      <summary>Gets or sets whether the column type of the member is a database timestamp or version number.</summary>
      <returns>Default value = false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck">
      <summary>Gets or sets how LINQ to SQL approaches the detection of optimistic concurrency conflicts.</summary>
      <returns>Default = <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Always" />, unless <see cref="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion" /> is true for a member.Other values are <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Never" /> and <see cref="F:System.Data.Linq.Mapping.UpdateCheck.WhenChanged" />.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.DataAttribute">
      <summary>Provides members to describe attributes of data in columns.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.DataAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.DataAttribute" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.DataAttribute.Name">
      <summary>Gets or sets the name of a column.</summary>
      <returns>The name.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.DataAttribute.Storage">
      <summary>Gets or sets a private storage field to hold the value from a column.</summary>
      <returns>The name of the storage field. </returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.DatabaseAttribute">
      <summary>Specifies certain attributes of a class that represents a database.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.DatabaseAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.DatabaseAttribute" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.DatabaseAttribute.Name">
      <summary>Gets or sets the name of the database.</summary>
      <returns>The name.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.FunctionAttribute">
      <summary>Associates a method with a stored procedure or user-defined function in the database.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.FunctionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.FunctionAttribute" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.FunctionAttribute.IsComposable">
      <summary>Gets or sets whether a method is mapped to a function or to a stored procedure.</summary>
      <returns>true if a function; false if a stored procedure.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.FunctionAttribute.Name">
      <summary>Gets or sets the name of the function.</summary>
      <returns>The name of the function or stored procedure.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.InheritanceMappingAttribute">
      <summary>Maps an inheritance hierarchy in a LINQ to SQL application. </summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.InheritanceMappingAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.InheritanceMappingAttribute" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.Code">
      <summary>Gets or sets the discriminator code value in a mapped inheritance hierarchy.</summary>
      <returns>Must be user-specified. There is no default value.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.IsDefault">
      <summary>Gets or sets whether an object of this type in instantiated when the discriminator value does not match a specified value.</summary>
      <returns>Default = false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.InheritanceMappingAttribute.Type">
      <summary>Gets or sets the type of the class in the hierarchy.</summary>
      <returns>Must be user-specified. There is no default value.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MappingSource">
      <summary>Represents a source for mapping information.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MappingSource.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MappingSource" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MappingSource.CreateModel(System.Type)">
      <summary>Creates a new mapping model.</summary>
      <returns>The meta-model created to match the current mapping scheme.</returns>
      <param name="dataContextType">The type of <see cref="T:System.Data.Linq.DataContext" /> on which to base the mapping.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MappingSource.GetModel(System.Type)">
      <summary>Returns the mapping model.</summary>
      <returns>The mapping model associated with this mapping source.</returns>
      <param name="dataContextType">The type of <see cref="T:System.Data.Linq.DataContext" /> of the model to be returned.</param>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaAccessor">
      <summary>Represents an accessor to a member.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaAccessor" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.GetBoxedValue(System.Object)">
      <summary>Specifies an object on which to set a value or from which to get a value.</summary>
      <returns>The boxed value of this instance.</returns>
      <param name="instance">The instance from which to get the value or on which to set the value.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasAssignedValue(System.Object)">
      <summary>Specifies whether the instance has an assigned value.</summary>
      <returns>true if the instance currently has an assigned value; otherwise, false.</returns>
      <param name="instance">The instance being looked at.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasLoadedValue(System.Object)">
      <summary>Specifies whether the instance has a value loaded from a deferred source.</summary>
      <returns>true if the instance currently has a value loaded from a deferred source; otherwise, false. </returns>
      <param name="instance">The instance being looked at.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.HasValue(System.Object)">
      <summary>Specifies whether the instance has a loaded or assigned value.</summary>
      <returns>true if the instance currently has a loaded or assigned value; otherwise, false. </returns>
      <param name="instance">The instance being looked at.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor.SetBoxedValue(System.Object@,System.Object)">
      <summary>Sets the value as an object.</summary>
      <param name="instance">The instance into which to set the value.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAccessor.Type">
      <summary>Gets the type of the member accessed by this accessor.</summary>
      <returns>The type of the member.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaAccessor`2">
      <summary>A strongly typed version of the <see cref="T:System.Data.Linq.Mapping.MetaAccessor" /> class.</summary>
      <typeparam name="TEntity">The type of the source.</typeparam>
      <typeparam name="TMember">The type of the member of that source.</typeparam>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaAccessor`2" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.GetBoxedValue(System.Object)">
      <summary>Specifies an object on which to set a value or from which to get a value.</summary>
      <returns>The boxed value of this instance.</returns>
      <param name="instance">The instance from which to get the value or on which to set the value.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.GetValue(`0)">
      <summary>Specifies the strongly typed value.</summary>
      <returns>The value of this instance.</returns>
      <param name="instance">The instance from which to get the value.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.SetBoxedValue(System.Object@,System.Object)">
      <summary>Specifies an instance on which to set the boxed value.</summary>
      <param name="instance">The instance into which to set the boxed value.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAccessor`2.SetValue(`0@,`1)">
      <summary>Specifies an instance on which to set the strongly typed value.</summary>
      <param name="instance">The instance into which to set the value.</param>
      <param name="value">The strongly typed value to set.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAccessor`2.Type">
      <summary>Gets the type of the member accessed by this accessor. </summary>
      <returns>The member type.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaAssociation">
      <summary>Represents an association relationship between two entity types.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaAssociation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaAssociation" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.DeleteOnNull">
      <summary>Gets whether the object should be deleted when the association is set to null.</summary>
      <returns>If true, the object is deleted when the association is set to null.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.DeleteRule">
      <summary>Gets the behavior when the child is deleted.</summary>
      <returns>The string representing the rule, or null if no action is specified on delete.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsForeignKey">
      <summary>Gets whether the other type is the parent of this type.</summary>
      <returns>Returns true is the other type is the parent of this type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsMany">
      <summary>Gets whether the association represents a one-to-many relationship.</summary>
      <returns>Returns true if the association represents a one-to-many relationship.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsNullable">
      <summary>Gets whether the association can be null.</summary>
      <returns>Returns true if the association can be null.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.IsUnique">
      <summary>Gets whether the association is unique.</summary>
      <returns>Returns true if the association is unique.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherKey">
      <summary>Gets a list of members that represents the values on the other side of the association.</summary>
      <returns>Returns a collection representing values on the other side of the association.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherKeyIsPrimaryKey">
      <summary>Gets whether the <see cref="P:System.Data.Linq.Mapping.MetaAssociation.OtherKey" /> forms the identity of the other type.</summary>
      <returns>true if the <see cref="P:System.Data.Linq.Mapping.MetaAssociation.OtherKey" /> forms the identity (primary key) of the other type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherMember">
      <summary>Gets the member on the other side of this association that represents the reverse association.</summary>
      <returns>The member on the other side.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.OtherType">
      <summary>Gets the type on the other side of the association.</summary>
      <returns>The type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.ThisKey">
      <summary>Gets a list of members representing the values on this side of the association.</summary>
      <returns>A collection.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.ThisKeyIsPrimaryKey">
      <summary>Gets whether <see cref="P:System.Data.Linq.Mapping.MetaAssociation.ThisKey" /> forms the identity of this type.</summary>
      <returns>true if <see cref="P:System.Data.Linq.Mapping.MetaAssociation.ThisKey" /> forms the identity (primary key) of the association.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaAssociation.ThisMember">
      <summary>Gets the member on this side that represents the association.</summary>
      <returns>The member.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaDataMember">
      <summary>Represents the mapping between a field or a property of a domain object into a column of a database table.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaDataMember.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaDataMember" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Association">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaAssociation" /> that corresponds to this member.</summary>
      <returns>The corresponding <see cref="T:System.Data.Linq.Mapping.MetaAssociation" /> if one exists; otherwise, null.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.AutoSync">
      <summary>Gets the read-back behavior for this member for insert and update operations. </summary>
      <returns>An <see cref="T:System.Data.Linq.Mapping.AutoSync" /> enumeration.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.CanBeNull">
      <summary>Gets whether the value of this member can be assigned the null value.</summary>
      <returns>true if this member can be assigned the null value; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DbType">
      <summary>Gets the type of the corresponding database column.</summary>
      <returns>The type of the database column as a string.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DeclaringType">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaType" /> that contains this data member.</summary>
      <returns>The meta-type that contains the current member.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DeferredSourceAccessor">
      <summary>Gets the accessor that is used to get and set the deferred source of this member.</summary>
      <returns>The accessor used to access the deferred source for this member.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.DeferredValueAccessor">
      <summary>Gets the accessor that is used to get and set the deferred value of this member (without causing fetch).</summary>
      <returns>The accessor used to access the deferred value for this member.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Expression">
      <summary>Gets the expression that defines a computed column.</summary>
      <returns>The expression for the computed column as a string.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsAssociation">
      <summary>Gets whether this member defines an association relationship.</summary>
      <returns>true if this member defines an association relationship; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsDbGenerated">
      <summary>Gets whether this member is automatically generated by the database.</summary>
      <returns>true if this member is automatically generated by the database; otherwise false.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaDataMember.IsDeclaredBy(System.Data.Linq.Mapping.MetaType)">
      <summary>Specifies whether this member is declared by the specified type.</summary>
      <returns>true if this member is declared by the specified type; otherwise, false.</returns>
      <param name="type">The type to check.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsDeferred">
      <summary>Gets whether the default behavior is to load this member on a deferred basis.</summary>
      <returns>true if this member loaded on a deferred basis by default; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsDiscriminator">
      <summary>Gets whether this member represents the inheritance discriminator.</summary>
      <returns>true if this member represents the inheritance discriminator; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsPersistent">
      <summary>Gets whether this member is mapped to a column (or constraint).</summary>
      <returns>true if this member is mapped to a column (or constraint); otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsPrimaryKey">
      <summary>Gets whether this member is part of the type's identity.</summary>
      <returns>true if this member is part of the type's identity; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.IsVersion">
      <summary>Gets whether this member represents the row version or timestamp.</summary>
      <returns>true if this member represents the row version or timestamp; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.LoadMethod">
      <summary>Gets the <see cref="T:System.Data.Linq.DataContext" /> method that is used to perform load operations.</summary>
      <returns>The load method as <see cref="T:System.Reflection.MethodInfo" />.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.MappedName">
      <summary>Gets the name of the column (or constraint) in the database.</summary>
      <returns>The name of the column (or constraint) as a string.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Member">
      <summary>Gets the underlying <see cref="T:System.Reflection.MemberInfo" />.</summary>
      <returns>Member attribute and metadata information.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.MemberAccessor">
      <summary>Gets the accessor that is used to get or set the value of this member.</summary>
      <returns>The accessor.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Name">
      <summary>Gets the name of the member, same as the <see cref="T:System.Reflection.MemberInfo" /> name.</summary>
      <returns>The name, same as the <see cref="T:System.Reflection.MemberInfo" /> name.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Ordinal">
      <summary>Gets the ordinal position of this member in the default layout of query results.</summary>
      <returns>The ordinal position.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.StorageAccessor">
      <summary>Gets the accessor that is used to get or set the storage value of this member.</summary>
      <returns>The accessor for the storage value of this member.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.StorageMember">
      <summary>Gets the member that stores the data for this member.</summary>
      <returns>The storage member.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.Type">
      <summary>Gets the type of this member.</summary>
      <returns>The type of the current member.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaDataMember.UpdateCheck">
      <summary>Gets the optimistic concurrency check policy for this member.</summary>
      <returns>An <see cref="T:System.Data.Linq.Mapping.UpdateCheck" /> enum.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaFunction">
      <summary>Represents the mapping between a context method and a database function.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaFunction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaFunction" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.HasMultipleResults">
      <summary>Gets whether or not the stored procedure has multiple result types.</summary>
      <returns>true if the stored procedure has multiple result types.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.IsComposable">
      <summary>Gets whether the function can be composed within a query.</summary>
      <returns>true if the function can be composed within a query.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.MappedName">
      <summary>Gets the name of the database function or procedure.</summary>
      <returns>A string representing the name of the database function or procedure.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Method">
      <summary>Gets the underlying context method.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> object that corresponds with the underlying context method.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Model">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaModel" /> that contains this function.</summary>
      <returns>The <see cref="T:System.Data.Linq.Mapping.MetaModel" /> object that contains this function.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Name">
      <summary>Gets the name of the method.</summary>
      <returns>A string that represents the name of the method.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.Parameters">
      <summary>Gets an enumeration of the function parameters.</summary>
      <returns>A collection of the parameters.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.ResultRowTypes">
      <summary>Gets the enumeration of possible result row types.</summary>
      <returns>A collection of possible types.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaFunction.ReturnParameter">
      <summary>Gets the return parameter.</summary>
      <returns>The <see cref="T:System.Data.Linq.Mapping.MetaParameter" /> that corresponds to the return parameter.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaModel">
      <summary>An abstraction that represents the mapping between a database and domain objects.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaModel" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.ContextType">
      <summary>Gets the type of <see cref="T:System.Data.Linq.DataContext" /> type that this model describes.</summary>
      <returns>The data context type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.DatabaseName">
      <summary>Gets the name of the database.</summary>
      <returns>The database name as a string.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetFunction(System.Reflection.MethodInfo)">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaFunction" /> that corresponds to a database function.</summary>
      <returns>The meta-function that corresponds to a database function.</returns>
      <param name="method">The method defined on the <see cref="T:System.Data.Linq.DataContext" /> or subordinate class that represents the database function.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetFunctions">
      <summary>Gets an enumeration of all functions.</summary>
      <returns>An enumeration that can be used to iterate through all functions.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetMetaType(System.Type)">
      <summary>Discovers the <see cref="T:System.Data.Linq.Mapping.MetaType" /> for the specified <see cref="T:System.Type" />.</summary>
      <returns>A meta-type that corresponds to the specified type.</returns>
      <param name="type">The type for which the <see cref="T:System.Data.Linq.Mapping.MetaType" /> is sought.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetTable(System.Type)">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaTable" /> associated with a specified <see cref="T:System.Type" />.</summary>
      <returns>A meta-table associated with the specified row type.</returns>
      <param name="rowType">The common language runtime (CLR) row type.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaModel.GetTables">
      <summary>Get an enumeration of all tables.</summary>
      <returns>An enumerator that can be used to iterate over the tables. </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.MappingSource">
      <summary>Gets the mapping source that originated this model.</summary>
      <returns>The originating mapping source.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaModel.ProviderType">
      <summary>Gets or sets the provider type.</summary>
      <returns>The provider type.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaParameter">
      <summary>Represents the mapping between a method parameter and a database function parameter.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaParameter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaParameter" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.DbType">
      <summary>Gets the database type of the parameter.</summary>
      <returns>The database type of the parameter as a string.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.MappedName">
      <summary>Gets the name of the parameter in the database function.</summary>
      <returns>The name as a string.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.Name">
      <summary>Gets the name of the parameter.</summary>
      <returns>The name of the parameter as a string.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.Parameter">
      <summary>Gets the underlying method parameter.</summary>
      <returns>The underlying method parameter.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaParameter.ParameterType">
      <summary>Gets the common language runtime (CLR) type of the parameter.</summary>
      <returns>The type.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaTable">
      <summary>Represents an abstraction of a database table or view.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaTable.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaTable" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.DeleteMethod">
      <summary>Gets the <see cref="T:System.Data.Linq.DataContext" /> method that is used to perform delete operations.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that corresponds to the method used for delete operations.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.InsertMethod">
      <summary>Gets the <see cref="T:System.Data.Linq.DataContext" /> method that is used to perform insert operations.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that corresponds to the method used for insert operations.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.Model">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaModel" /> that contains this <see cref="T:System.Data.Linq.Mapping.MetaTable" />.</summary>
      <returns>The <see cref="T:System.Data.Linq.Mapping.MetaModel" /> that includes this MetaTable.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.RowType">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaType" /> that describes the type of the rows of the table.</summary>
      <returns>The type of rows in the table.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.TableName">
      <summary>Gets the name of the table as defined by the database.</summary>
      <returns>A string representing the name of the table.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaTable.UpdateMethod">
      <summary>Gets the <see cref="T:System.Data.Linq.DataContext" /> method that is used to perform update operations.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that corresponds to the method used for update operations.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.MetaType">
      <summary>Represents the mapping of a domain object type to the columns of a database table.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.MetaType" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Associations">
      <summary>Gets an enumeration of all the associations.</summary>
      <returns>A collection of associations.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.CanInstantiate">
      <summary>Gets whether the underlying type can be instantiated as the result of a query.</summary>
      <returns>true if the underlying type can be instantiated as the result of a query; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.DataMembers">
      <summary>Gets an enumeration of all the data members (fields and properties).</summary>
      <returns>A collection of the data members.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.DBGeneratedIdentityMember">
      <summary>Gets the member that represents the auto-generated identity column. </summary>
      <returns>The member that represents the auto-generated identity column, or null if there is no auto-generated identity column.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.DerivedTypes">
      <summary>Gets an enumeration of the immediate derived types in an inheritance hierarchy.</summary>
      <returns>An enumeration of meta-types.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Discriminator">
      <summary>Gets the member that represents the inheritance discriminator column.</summary>
      <returns>The member that represents the inheritance discriminator column, or null if there is none.</returns>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.GetDataMember(System.Reflection.MemberInfo)">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaDataMember" /> associated with the specified member.</summary>
      <returns>The <see cref="T:System.Data.Linq.Mapping.MetaDataMember" /> if one is associated with the specified member; otherwise, null. </returns>
      <param name="member">The member for which the associated <see cref="T:System.Data.Linq.Mapping.MetaDataMember" /> is sought.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.GetInheritanceType(System.Type)">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaType" /> for an inheritance subtype.</summary>
      <returns>The <see cref="T:System.Data.Linq.Mapping.MetaType" /> for an inheritance subtype.</returns>
      <param name="type">The subtype.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.MetaType.GetTypeForInheritanceCode(System.Object)">
      <summary>Gets the meta-type associated with the specified inheritance code.</summary>
      <returns>The meta-type associated with the specified inheritance code.</returns>
      <param name="code">The inheritance code.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasAnyLoadMethod">
      <summary>Gets a value that indicates whether the current <see cref="T:System.Data.Linq.Mapping.MetaType" /> or any of its bases types has an OnLoaded method.</summary>
      <returns>true if the meta-type or any base meta-type has an OnLoaded method; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasAnyValidateMethod">
      <summary>Gets a value that indicates whether the <see cref="T:System.Data.Linq.Mapping.MetaType" /> or any of its bases types has an OnValidate method.</summary>
      <returns>true if the meta-type or any base meta-type has an OnValidate method; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasInheritance">
      <summary>Gets a value indicating whether the type is part of a mapped inheritance hierarchy.</summary>
      <returns>true if the type is part of a mapped inheritance hierarchy; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasInheritanceCode">
      <summary>Gets a value indicating whether this type defines an inheritance code.</summary>
      <returns>true if this type defines an inheritance code; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.HasUpdateCheck">
      <summary>Gets a value indicating whether the type has any persistent member that may require a test for optimistic concurrency conflicts. </summary>
      <returns>true if the type has any persistent member with an <see cref="T:System.Data.Linq.Mapping.UpdateCheck" /> policy other than <see cref="F:System.Data.Linq.Mapping.UpdateCheck.Never" />; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.IdentityMembers">
      <summary>Gets an enumeration of all the data members that define the unique identity of the type.</summary>
      <returns>An enumeration of members that define the unique identity of the type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceBase">
      <summary>Gets the base meta-type in the inheritance hierarchy.</summary>
      <returns>The base meta-type for the current inheritance hierarchy.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceCode">
      <summary>Gets a value indicating whether this type defines an inheritance code.</summary>
      <returns>true if this type defines an inheritance code; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceDefault">
      <summary>Gets a value indicating whether this type is used as the default of an inheritance hierarchy.</summary>
      <returns>The metadata for the default type in the inheritance mapping.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceRoot">
      <summary>Gets the root type of the inheritance hierarchy.</summary>
      <returns>The root type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.InheritanceTypes">
      <summary>Gets a collection of all types that are defined by an inheritance hierarchy.</summary>
      <returns>A collection of meta-types in the current inheritance hierarchy.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.IsEntity">
      <summary>Gets a value indicating whether the <see cref="T:System.Data.Linq.Mapping.MetaType" /> is an entity type.</summary>
      <returns>true if the <see cref="T:System.Data.Linq.Mapping.MetaType" /> is an entity type; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.IsInheritanceDefault">
      <summary>Gets a value indicating whether this type is used as the default of an inheritance hierarchy.</summary>
      <returns>true if this type is used as the default of an inheritance hierarchy; otherwise false.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Model">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaModel" /> that contains this <see cref="T:System.Data.Linq.Mapping.MetaType" />.</summary>
      <returns>The containing meta-model.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Name">
      <summary>Gets the name of the <see cref="T:System.Data.Linq.Mapping.MetaType" />.</summary>
      <returns>The name of the current meta-type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.OnLoadedMethod">
      <summary>Gets information about the OnLoaded method contained by this meta-type.</summary>
      <returns>A description of the OnLoaded method for this meta-type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.OnValidateMethod">
      <summary>Gets information about the OnValidate method contained by this meta-type.</summary>
      <returns>A description of the OnValidate method for this meta-type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.PersistentDataMembers">
      <summary>Gets a collection of all the persistent data members.</summary>
      <returns>A collection of all the meta-data members in the current type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Table">
      <summary>Gets the <see cref="T:System.Data.Linq.Mapping.MetaTable" /> that uses this <see cref="T:System.Data.Linq.Mapping.MetaType" /> for row definition.</summary>
      <returns>A meta-table that uses the current meta-type for its row definition. </returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.Type">
      <summary>Gets the underlying common language runtime (CLR) type.</summary>
      <returns>The associated CLR type.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.MetaType.VersionMember">
      <summary>Gets a row-version or timestamp column for this <see cref="T:System.Data.Linq.Mapping.MetaType" />.</summary>
      <returns>The meta-data member that represents the row-version or timestamp column for this meta-type, or null if there is none.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.ParameterAttribute">
      <summary>Enables specification of mapping details for a stored procedure method parameter.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ParameterAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.ParameterAttribute" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.ParameterAttribute.DbType">
      <summary>Gets or sets the type of the parameter for a provider-specific database.</summary>
      <returns>The type as a string.</returns>
    </member>
    <member name="P:System.Data.Linq.Mapping.ParameterAttribute.Name">
      <summary>Gets or sets the name of the parameter.</summary>
      <returns>The name as a string.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.ProviderAttribute">
      <summary>Specifies which database provider to use.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ProviderAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ProviderAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" /> class.</summary>
      <param name="type">The provider type to use to construct the <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" />.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.ProviderAttribute.Type">
      <summary>Gets the type of the provider that is used to construct the <see cref="T:System.Data.Linq.Mapping.ProviderAttribute" />.</summary>
      <returns>The type of the provider.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.ResultTypeAttribute">
      <summary>Used to specify each type of result; for functions having various result types.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.ResultTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.ResultTypeAttribute" /> class.</summary>
      <param name="type">The type of the result returned by a function having various result types.</param>
    </member>
    <member name="P:System.Data.Linq.Mapping.ResultTypeAttribute.Type">
      <summary>Gets the valid or expected type mapping for a function having various result types.</summary>
      <returns>The type of result (<see cref="T:System.Type" />).</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.TableAttribute">
      <summary>Designates a class as an entity class that is associated with a database table.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.TableAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.Mapping.TableAttribute" /> class.</summary>
    </member>
    <member name="P:System.Data.Linq.Mapping.TableAttribute.Name">
      <summary>Gets or sets the name of the table or view.</summary>
      <returns>By default, the value is the same as the name of the class.</returns>
    </member>
    <member name="T:System.Data.Linq.Mapping.UpdateCheck">
      <summary>Specifies when objects are to be tested for concurrency conflicts.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.UpdateCheck.Always">
      <summary>Always check. This is the default unless <see cref="P:System.Data.Linq.Mapping.ColumnAttribute.IsVersion" /> is true for a member.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.UpdateCheck.Never">
      <summary>Never check.</summary>
    </member>
    <member name="F:System.Data.Linq.Mapping.UpdateCheck.WhenChanged">
      <summary>Check only when the object has been changed.</summary>
    </member>
    <member name="T:System.Data.Linq.Mapping.XmlMappingSource">
      <summary>Represents a mapping source that uses an external XML mapping file to create the model.</summary>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromReader(System.Xml.XmlReader)">
      <summary>Creates a mapping source from an XML reader.</summary>
      <returns>The new XML mapping source, as type <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />.</returns>
      <param name="reader">An XML reader.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromStream(System.IO.Stream)">
      <summary>Creates a mapping source from XML in a stream.</summary>
      <returns>The new XML mapping source, as type <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />.</returns>
      <param name="stream">A stream of XML.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromUrl(System.String)">
      <summary>Creates a mapping source from XML that is loaded from a URL.</summary>
      <returns>The new XML mapping source, as type <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />.</returns>
      <param name="url">The URL pointing to the XML.</param>
    </member>
    <member name="M:System.Data.Linq.Mapping.XmlMappingSource.FromXml(System.String)">
      <summary>Creates a mapping source from an XML string. </summary>
      <returns>The new XML mapping source, as type <see cref="T:System.Data.Linq.Mapping.XmlMappingSource" />.</returns>
      <param name="xml">A string that contains XML.</param>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Sql2000Provider">
      <summary>Contains functionality to connect to and communicate with a SQL Server 2000.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Sql2000Provider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.SqlClient.Sql2000Provider" /> class. </summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Sql2005Provider">
      <summary>Contains functionality to connect to and communicate with a SQL Server 2005.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Sql2005Provider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.SqlClient.Sql2005Provider" /> class. </summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Sql2008Provider">
      <summary>Contains functionality to connect to and communicate with a SQL Server 2008.  </summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Sql2008Provider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.SqlClient.Sql2008Provider" /> class.</summary>
    </member>
    <member name="T:System.Data.Linq.SqlClient.SqlHelpers">
      <summary>Provides helper methods for operations that match string patterns.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringContainsPattern(System.String,System.Char)">
      <summary>Creates a search pattern string where the specified text can have other text before and following it.</summary>
      <returns>A search pattern string that contains the specified string and the '%' character before and after it.</returns>
      <param name="text">The string to insert into the search pattern string.</param>
      <param name="escape">The character to use to escape wildcard characters.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringEndsWithPattern(System.String,System.Char)">
      <summary>Creates a search pattern string where the specified text can have other text before it but not following it.</summary>
      <returns>A search pattern string that contains the '%' character followed by the specified string.</returns>
      <param name="text">The string to insert into the search pattern string.</param>
      <param name="escape">The character to use to escape wildcard characters.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.GetStringStartsWithPattern(System.String,System.Char)">
      <summary>Creates a search pattern string where the specified text can have other text after it but not before it.</summary>
      <returns>A search pattern string that contains the specified string followed by the '%' character.</returns>
      <param name="text">The string to insert into the search pattern string.</param>
      <param name="escape">The character to use to escape wildcard characters.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlHelpers.TranslateVBLikePattern(System.String,System.Char)">
      <summary>Translates a search pattern for the Visual Basic Like operator to a search pattern for the SQL Server LIKE operator.</summary>
      <returns>A search pattern for the SQL Server LIKE operator that corresponds to the specified Visual Basic Like search pattern.</returns>
      <param name="pattern">The Visual Basic Like search pattern to translate to a SQL Server LIKE search pattern.</param>
      <param name="escape">The character to use to escape special SQL characters or the escape character itself.</param>
    </member>
    <member name="T:System.Data.Linq.SqlClient.SqlMethods">
      <summary>Provides methods that correspond to SQL Server functions. Methods in the <see cref="T:System.Data.Linq.SqlClient.SqlMethods" /> class are only supported in LINQ to SQL queries.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.DateTime,System.DateTime)">
      <summary>Counts the number of day boundaries between two non-nullable dates.</summary>
      <returns>The number of day boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Counts the number of day boundaries between two non-nullable dates.</summary>
      <returns>The number of day boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Counts the number of day boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of day boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffDay(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Counts the number of day boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of day boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.DateTime,System.DateTime)">
      <summary>Counts the number of hour boundaries between two non-nullable dates.</summary>
      <returns>The number of hour boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Counts the number of hour boundaries between two non-nullable dates.</summary>
      <returns>The number of hour boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Counts the number of hour boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of hour boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffHour(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Counts the number of hour boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of hour boundaries between the two specified dates. When one or both parameters are null, returns a null value is returned.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.DateTime,System.DateTime)">
      <summary>Counts the number of microsecond boundaries between two non-nullable dates.</summary>
      <returns>The number of microsecond boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Counts the number of microsecond boundaries between two non-nullable dates.</summary>
      <returns>The number of microsecond boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Counts the number of microsecond boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of microsecond boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMicrosecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Counts the number of microsecond boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of microsecond boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.DateTime,System.DateTime)">
      <summary>Counts the number of millisecond boundaries between two non-nullable dates.</summary>
      <returns>The number of millisecond boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Counts the number of millisecond boundaries between two non-nullable dates.</summary>
      <returns>The number of millisecond boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Counts the number of millisecond boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of millisecond boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMillisecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Counts the number of millisecond boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of millisecond boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.DateTime,System.DateTime)">
      <summary>Counts the number of minute boundaries between two non-nullable dates.</summary>
      <returns>The number of minute boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Counts the number of minute boundaries between two non-nullable dates.</summary>
      <returns>The number of minute boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Counts the number of minute boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of minute boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMinute(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Counts the number of minute boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of minute boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.DateTime,System.DateTime)">
      <summary>Counts the number of month boundaries between two non-nullable dates.</summary>
      <returns>The number of month boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Counts the number of month boundaries between two non-nullable dates.</summary>
      <returns>The number of month boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Counts the number of month boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of month boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffMonth(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Counts the number of month boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of month boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.DateTime,System.DateTime)">
      <summary>Counts the number of nanosecond boundaries between two non-nullable dates.</summary>
      <returns>The number of nanosecond boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Counts the number of nanosecond boundaries between two non-nullable dates.</summary>
      <returns>The number of nanosecond boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Counts the number of nanosecond boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of nanosecond boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffNanosecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Counts the number of nanosecond boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of nanosecond boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.DateTime,System.DateTime)">
      <summary>Counts the number of second boundaries between two non-nullable dates.</summary>
      <returns>The number of second boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Counts the number of second boundaries between two non-nullable dates.</summary>
      <returns>The number of second boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Counts the number of second boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of second boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffSecond(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Counts the number of second boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of second boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.DateTime,System.DateTime)">
      <summary>Counts the number of year boundaries between two non-nullable dates.</summary>
      <returns>The number of year boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.DateTimeOffset,System.DateTimeOffset)">
      <summary>Counts the number of year boundaries between two non-nullable dates.</summary>
      <returns>The number of year boundaries between the two specified dates.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>Counts the number of year boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of year boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.DateDiffYear(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>Counts the number of year boundaries between two nullable dates.</summary>
      <returns>When both parameters are not null, returns the number of year boundaries between the two specified dates. When one or both parameters are null, returns a null value.</returns>
      <param name="startDate">The start date for the time period.</param>
      <param name="endDate">The end date for the time period.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.Like(System.String,System.String)">
      <summary>Determines whether a specific character string matches a specified pattern. This method is currently only supported in LINQ to SQL queries.</summary>
      <returns>true if <paramref name="matchExpression" /> matches the pattern; otherwise, false.</returns>
      <param name="matchExpression">The string to be searched for a match.</param>
      <param name="pattern">The pattern, which may include wildcard characters, to match in <paramref name="matchExpression" />.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlMethods.Like(System.String,System.String,System.Char)">
      <summary>Determines whether a specific character string matches a specified pattern. This method is currently only supported in LINQ to SQL queries.</summary>
      <returns>true if <paramref name="matchExpression" /> matches the pattern; otherwise, false.</returns>
      <param name="matchExpression">The string to be searched for a match.</param>
      <param name="pattern">The pattern, which may include wildcard characters, to match in <paramref name="matchExpression" />.</param>
      <param name="escapeCharacter">The character to put in front of a wildcard character to indicate that it should be interpreted as a regular character and not as a wildcard character.</param>
    </member>
    <member name="T:System.Data.Linq.SqlClient.SqlProvider">
      <summary>Contains functionality to connect to and communicate with a SQL Server.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.SqlClient.SqlProvider" /> class.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlProvider.Dispose">
      <summary>Releases managed references and closes connections opened by the <see cref="T:System.Data.Linq.SqlClient.SqlProvider" />.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.SqlProvider.Dispose(System.Boolean)">
      <summary>Optionally releases managed references and closes connections opened by the <see cref="T:System.Data.Linq.SqlClient.SqlProvider" />.</summary>
      <param name="disposing">true to release managed references and close connections; otherwise, false.</param>
    </member>
    <member name="T:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1">
      <summary>Defines methods for dynamically materializing objects.</summary>
      <typeparam name="TDataReader">The type of the data reader.</typeparam>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1" /> class. </summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Arguments">
      <summary>Captures internal state for the fast materializer.</summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.BufferReader">
      <summary>Represents a reader that reads data rows in a forward-only manner. </summary>
    </member>
    <member name="P:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.CanDeferLoad">
      <summary>When overridden in a derived class, gets a value that indicates whether deferred loading is enabled.</summary>
      <returns>true if deferred loading is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Convert``1(System.Collections.IEnumerable)">
      <summary>Changes the type of each element in a specified sequence.</summary>
      <returns>A sequence that contains the type-converted elements.</returns>
      <param name="source">A sequence that contains elements to convert.</param>
      <typeparam name="TOutput">The type to convert the elements to.</typeparam>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.CreateGroup``2(``0,System.Collections.Generic.IEnumerable{``1})">
      <summary>Creates a group from a specified key and collection of values.</summary>
      <returns>A group that has the specified key and the specified collection of values.</returns>
      <param name="key">The key for the group.</param>
      <param name="items">The values for the group.</param>
      <typeparam name="TKey">The type of the key of the group.</typeparam>
      <typeparam name="TElement">The type of the values in the group.</typeparam>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.CreateOrderedEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates an ordered sequence from a specified collection of values.</summary>
      <returns>An ordered sequence that contains the specified values.</returns>
      <param name="items">The values to put in the ordered sequence.</param>
      <typeparam name="TElement">The type of the values in the ordered sequence.</typeparam>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.DataReader">
      <summary>Represents a data reader.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.ErrorAssignmentToNull(System.Type)">
      <summary>Returns an exception that indicates that a null value was tried to be assigned to a non-nullable value type.</summary>
      <returns>An exception that indicates that a null value was attempted to be assigned to a non-nullable value type.</returns>
      <param name="type">The type to which a null value was attempted to be assigned.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.ExecuteSubQuery(System.Int32,System.Object[])">
      <summary>When overridden in a derived class, executes a query.</summary>
      <returns>The results from executing the query.</returns>
      <param name="iSubQuery">The index of the query.</param>
      <param name="args">The arguments to the query.</param>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.GetLinkSource``1(System.Int32,System.Int32,System.Object[])">
      <summary>When overridden in a derived class, creates a new deferred source.</summary>
      <returns>An enumerable deferred source.</returns>
      <param name="globalLink">The index of the link.</param>
      <param name="localFactory">The index of the factory.</param>
      <param name="keyValues">The key values for the deferred source.</param>
      <typeparam name="T">The type of the result elements.</typeparam>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.GetNestedLinkSource``1(System.Int32,System.Int32,System.Object)">
      <summary>When overridden in a derived class, creates a new deferred source.</summary>
      <returns>An enumerable deferred source.</returns>
      <param name="globalLink">The index of the link.</param>
      <param name="localFactory">The index of the factory.</param>
      <param name="instance">The instance for the deferred source.</param>
      <typeparam name="T">The type of the result elements.</typeparam>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Globals">
      <summary>Captures internal state for the fast materializer.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.InsertLookup(System.Int32,System.Object)">
      <summary>When overridden in a derived class, inserts a value into a data structure.</summary>
      <returns>The value that was inserted into the data structure.</returns>
      <param name="globalMetaType">The index of the <see cref="T:System.Data.Linq.Mapping.MetaType" />.</param>
      <param name="instance">The object to insert into the data structure.</param>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Locals">
      <summary>Captures internal state for the fast materializer.</summary>
    </member>
    <member name="F:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Ordinals">
      <summary>Represents column ordinals of a data reader.</summary>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.Read">
      <summary>When overridden in a derived class, advances the reader to the next record.</summary>
      <returns>true if there are more rows; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.Linq.SqlClient.Implementation.ObjectMaterializer`1.SendEntityMaterialized(System.Int32,System.Object)">
      <summary>When overridden in a derived class, invokes the method represented by <see cref="P:System.Data.Linq.Mapping.MetaType.OnLoadedMethod" />.</summary>
      <param name="globalMetaType">The index of the <see cref="T:System.Data.Linq.Mapping.MetaType" />.</param>
      <param name="instance">The parameter to pass to the invoked method.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Data.OracleClient.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.OracleClient</name>
  </assembly>
  <members>
    <member name="T:System.Data.OracleClient.OracleBFile">
      <summary>Represents a managed <see cref="T:System.Data.OracleClient.OracleBFile" /> object designed to work with the Oracle BFILE data type. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.CanRead">
      <summary>Gets a value indicating whether the BFILE stream can be read.</summary>
      <returns>false if a BFILE is closed or disposed; otherwise true. Always true for <see cref="F:System.Data.OracleClient.OracleBFile.Null" />.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.CanSeek">
      <summary>Gets a value indicating whether forward-seek and backward-seek operations can be performed.</summary>
      <returns>false if a BFILE is closed or disposed; otherwise true. Always true for <see cref="F:System.Data.OracleClient.OracleBFile.Null" />.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.CanWrite">
      <summary>Gets a value indicating whether the object supports writing.</summary>
      <returns>Always returns false because the Oracle BFILE data type is read-only.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleBFile.Clone">
      <summary>Creates a copy of this <see cref="T:System.Data.OracleClient.OracleBFile" /> object associated with the same physical file as the original.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleBFile" /> object associated with the same physical file as the original OracleBFile object.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.Connection">
      <summary>Gets the <see cref="T:System.Data.OracleClient.OracleConnection" /> used by this instance of the <see cref="T:System.Data.OracleClient.OracleBFile" />.</summary>
      <returns>The connection to a data source. The default is a null value.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleBFile.CopyTo(System.Data.OracleClient.OracleLob)">
      <summary>Copies the entire contents of this <see cref="T:System.Data.OracleClient.OracleBFile" /> to the beginning of a destination <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
      <returns>The number of bytes copied.</returns>
      <param name="destination">The destination <see cref="T:System.Data.OracleClient.OracleLob" /></param>
      <exception cref="T:System.ArgumentNullException">The destination OracleLob is a null object reference. </exception>
      <exception cref="T:System.InvalidOperationException">The destination is a null OracleLob.-or- The connection with which this OracleBFile is associated is closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The OracleBFile object is closed or disposed. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleBFile.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)">
      <summary>Copies the entire contents of this <see cref="T:System.Data.OracleClient.OracleBFile" /> to a destination <see cref="T:System.Data.OracleClient.OracleLob" /> at the specified offset.</summary>
      <returns>The number of bytes copied.</returns>
      <param name="destination">The destination <see cref="T:System.Data.OracleClient.OracleLob" />. </param>
      <param name="destinationOffset">The offset to which to copy. </param>
      <exception cref="T:System.ArgumentNullException">The destination OracleLob is a null object reference. </exception>
      <exception cref="T:System.InvalidOperationException">The destination is a null OracleLob.-or- The connection with which this OracleBFile is associated is closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The OracleBFile object is closed or disposed. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleBFile.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)">
      <summary>Copies from this <see cref="T:System.Data.OracleClient.OracleBFile" /> to a destination <see cref="T:System.Data.OracleClient.OracleLob" /> with the specified amount of data, the source offset, and the destination offset.</summary>
      <returns>The number of bytes copied.</returns>
      <param name="sourceOffset">The offset from which to copy. </param>
      <param name="destination">The destination <see cref="T:System.Data.OracleClient.OracleLob" />. </param>
      <param name="destinationOffset">The offset to which to copy. </param>
      <param name="amount">The quantity of data, in bytes, to copy. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The value of the amount parameter is less than zero or greater than 4 gigabytes. </exception>
      <exception cref="T:System.ArgumentNullException">The destination OracleLob is a null object reference. </exception>
      <exception cref="T:System.InvalidOperationException">The destination is a null OracleLob.-or- The connection with which this OracleBFile is associated is closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The OracleBFile object is closed or disposed. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.DirectoryName">
      <summary>Gets the name of the DIRECTORY object, with which an <see cref="T:System.Data.OracleClient.OracleBFile" /> object is associated.</summary>
      <returns>The name of the DIRECTORY object.</returns>
      <exception cref="T:System.ObjectDisposedException">Attempted to call DirectoryName on a closed or disposed OracleBFile object. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.FileExists">
      <summary>Gets a value indicating whether a physical file containing BFILE data exists in the operating system.</summary>
      <returns>true if a physical file containing BFILE data exists; otherwise false.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Data.OracleClient.OracleBFile" /> object is closed or disposed. </exception>
      <exception cref="T:System.InvalidOperationException">The connection with which a BFILE is associated is closed. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.FileName">
      <summary>Gets the name of the BFILE without the path.</summary>
      <returns>The name of the BFILE.</returns>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Data.OracleClient.OracleBFile" /> object is closed or disposed. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleBFile.Flush">
      <summary>Not currently supported.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.IsNull">
      <summary>Gets a value that indicates whether the <see cref="T:System.Data.OracleClient.OracleBFile" /> is a <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> stream.</summary>
      <returns>true if the <see cref="T:System.Data.OracleClient.OracleBFile" /> is a <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> stream; otherwise false.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.Length">
      <summary>Gets a value that returns the length in bytes of the physical file with which the <see cref="T:System.Data.OracleClient.OracleBFile" /> object is associated.</summary>
      <returns>A long value representing the length of the physical file in bytes.</returns>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed or disposed. </exception>
    </member>
    <member name="F:System.Data.OracleClient.OracleBFile.Null">
      <summary>Represents a null <see cref="T:System.Data.OracleClient.OracleBFile" /> object that is not bound to a physical file.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.Position">
      <summary>Gets the current read position in the <see cref="T:System.Data.OracleClient.OracleBFile" /> stream.</summary>
      <returns>The current position within the <see cref="T:System.Data.OracleClient.OracleBFile" /> stream.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">Attempted to set a position with a negative value or greater than the length of the stream. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed or disposed. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleBFile.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a sequence of bytes from the current <see cref="T:System.Data.OracleClient.OracleBFile" /> stream and advances the position within the stream by the number of bytes read.</summary>
      <returns>The total number of bytes read into the buffer. This may be less than the number of bytes requested if that many bytes are not currently available, or zero if the end of the file has been reached.</returns>
      <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" />) replaced by the bytes read from the current source. </param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream. </param>
      <param name="count">The maximum number of bytes to be read from the current stream. </param>
      <exception cref="T:System.ArgumentException">The sum of <paramref name="offset" /> and <paramref name="count" /> is larger than the buffer length. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is a null reference (Nothing in Visual Basic). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="count" /> is negative. </exception>
      <exception cref="T:System.InvalidOperationException">The connection with which a BFILE is associated is closed. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed or disposed. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleBFile.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the position on the current <see cref="T:System.Data.OracleClient.OracleBFile" /> stream.</summary>
      <returns>The new position within the current stream.</returns>
      <param name="offset">A byte offset relative to origin. If <paramref name="offset" /> is negative, the new position will precede the position specified by <paramref name="origin" /> by the number of bytes specified by <paramref name="offset" />. If <paramref name="offset" /> is zero, the new position will be the position specified by <paramref name="origin" />. If <paramref name="offset" /> is positive, the new position will follow the position specified by <paramref name="origin" /> by the number of bytes specified by <paramref name="offset" />. </param>
      <param name="origin">A value of type System.IO.SeekOrigin indicating the reference point used to obtain the new position. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">Attempted to set a position with a negative value or greater than the length of the stream. </exception>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed or disposed. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleBFile.SetFileName(System.String,System.String)">
      <summary>Binds the <see cref="T:System.Data.OracleClient.OracleBFile" /> object to a different file in the operating system.</summary>
      <param name="directory">The alias of the directory object that contains a physical file. </param>
      <param name="file">The name of the file in the operating system. </param>
      <exception cref="T:System.InvalidOperationException">The operation must be within a transaction. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleBFile.SetLength(System.Int64)">
      <summary>Not currently supported.</summary>
      <param name="value">Not currently supported.</param>
      <exception cref="T:System.NotSupportedException">The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.</exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleBFile.Value">
      <summary>Gets an <see cref="T:System.Array" /> of type <see cref="T:System.Byte" /> that contains the <see cref="T:System.Data.OracleClient.OracleBFile" /> data.</summary>
      <returns>An <see cref="T:System.Array" /> of type <see cref="T:System.Byte" /> that contains the <see cref="T:System.Data.OracleClient.OracleBFile" /> data.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleBFile.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Not currently supported.</summary>
      <param name="buffer">Not currently supported.</param>
      <param name="offset">Not currently supported.</param>
      <param name="count">Not currently supported.</param>
      <exception cref="T:System.NotSupportedException">The exception that is thrown when an invoked method is not supported, or when there is an attempt to read, seek, or write to a stream that does not support the invoked functionality.</exception>
    </member>
    <member name="T:System.Data.OracleClient.OracleBinary">
      <summary>Represents a variable-length stream of binary data to be stored in or retrieved from a database.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.#ctor(System.Byte[])">
      <summary>Initializes a new instance of the OracleBinary structure, setting the <see cref="P:System.Data.OracleClient.OracleBinary.Value" /> property to the contents of the supplied byte array.</summary>
      <param name="b">The byte array to be stored in the <see cref="P:System.Data.OracleClient.OracleBinary.Value" /> property. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.CompareTo(System.Object)">
      <summary>Compares this <see cref="T:System.Data.OracleClient.OracleBinary" /> object to the supplied object and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relative values of this OracleBinary structure and the object.Return Value Condition Less than zero The value of this OracleBinary object is less than the object. Zero This OracleBinary object is the same as the object. Greater than zero This OracleBinary object is greater than the object.-or- The object is a null reference. </returns>
      <param name="obj">The object to be compared to this OracleBinary structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.Concat(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Concatenates two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to create a new OracleBinary structure.</summary>
      <returns>An OracleBinary structure with the concatenated values of the <paramref name="x" /> and <paramref name="y" /> parameters.</returns>
      <param name="x">An OracleBinary structure. </param>
      <param name="y">An OracleBinary structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.Equals(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if they are equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are not equal. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary structure. </param>
      <param name="y">An OracleBinary structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.Equals(System.Object)">
      <summary>Compares the supplied object parameter to the <see cref="P:System.Data.OracleClient.OracleBinary.Value" /> property of the <see cref="T:System.Data.OracleClient.OracleBinary" /> object.</summary>
      <returns>true if object is an instance of <see cref="T:System.Data.OracleClient.OracleBinary" /> and the two are equal; otherwise false.</returns>
      <param name="value">The object to be compared. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Data.OracleClient.OracleBinary" /> structure.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.GreaterThan(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if the first is greater than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary structure. </param>
      <param name="y">An OracleBinary structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.GreaterThanOrEqual(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if the first is greater than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary structure. </param>
      <param name="y">An OracleBinary structure. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleBinary.IsNull">
      <summary>Gets a value indicating whether the <see cref="P:System.Data.OracleClient.OracleBinary.Value" /> property of the <see cref="T:System.Data.OracleClient.OracleBinary" /> structure is null.</summary>
      <returns>true if Value is null, otherwise false.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleBinary.Item(System.Int32)">
      <summary>Gets the single byte from the Value property located at the position indicated by the integer parameter, <paramref name="index" />. If <paramref name="index" /> indicates a position beyond the end of the byte array, an exception is raised.</summary>
      <returns>The byte located at the position indicated by the integer parameter.</returns>
      <param name="index">The position of the byte to be retrieved. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleBinary.Length">
      <summary>Gets the length in bytes of the <see cref="P:System.Data.OracleClient.OracleBinary.Value" /> property. This property is read-only.</summary>
      <returns>The length of the binary data in the Value property.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.LessThan(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if the first is less than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary structure. </param>
      <param name="y">An OracleBinary structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.LessThanOrEqual(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if the first is less than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary structure. </param>
      <param name="y">An OracleBinary structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.NotEquals(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if they are not equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are not equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are equal. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary structure. </param>
      <param name="y">An OracleBinary structure. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleBinary.Null">
      <summary>Represents a null value that can be assigned to the <see cref="P:System.Data.OracleClient.OracleBinary.Value" /> property of an <see cref="T:System.Data.OracleClient.OracleBinary" /> structure.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.op_Addition(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Concatenates the two <see cref="T:System.Data.OracleClient.OracleBinary" /> parameters to create a new OracleBinary structure.</summary>
      <returns>The concatenated values of the <paramref name="x" /> and <paramref name="y" /> parameters.</returns>
      <param name="x">An OracleBinary object. </param>
      <param name="y">An OracleBinary object. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.op_Equality(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if they are equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are not equal. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary object. </param>
      <param name="y">An OracleBinary object. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.op_Explicit(System.Data.OracleClient.OracleBinary)~System.Byte[]">
      <summary>Gets the contents of the <see cref="P:System.Data.OracleClient.OracleBinary.Value" /> property of the <see cref="T:System.Data.OracleClient.OracleBinary" /> parameter as an array of bytes.</summary>
      <returns>An array of bytes.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBinary" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.op_GreaterThan(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if the first is greater than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary object. </param>
      <param name="y">An OracleBinary object. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.op_GreaterThanOrEqual(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if the first is greater than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary object. </param>
      <param name="y">An OracleBinary object. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.op_Implicit(System.Byte[])~System.Data.OracleClient.OracleBinary">
      <summary>Converts an array of bytes to an <see cref="T:System.Data.OracleClient.OracleBinary" /> structure.</summary>
      <returns>An OracleBinary structure that represents the converted array of bytes.</returns>
      <param name="b">The array of bytes to be converted. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.op_Inequality(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if they are equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are not equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are equal. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary object. </param>
      <param name="y">An OracleBinary object. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.op_LessThan(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if the first is less than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary object. </param>
      <param name="y">An OracleBinary object. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBinary.op_LessThanOrEqual(System.Data.OracleClient.OracleBinary,System.Data.OracleClient.OracleBinary)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBinary" /> structures to determine if the first is less than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of OracleBinary is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the OracleBoolean will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An OracleBinary object. </param>
      <param name="y">An OracleBinary object. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleBinary.Value">
      <summary>Gets the value of the <see cref="T:System.Data.OracleClient.OracleBinary" /> structure. This property is read-only.</summary>
      <returns>The value of the OracleBinary structure.</returns>
    </member>
    <member name="T:System.Data.OracleClient.OracleBoolean">
      <summary>Represents the value returned from a database comparison operation between Oracle data types, and exposes methods used to perform data type conversions.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure using the specified Boolean.</summary>
      <param name="value">The Boolean to be used as the initial value of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure using the specified integer.</summary>
      <param name="value">The integer to be used as the initial value of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.And(System.Data.OracleClient.OracleBoolean,System.Data.OracleClient.OracleBoolean)">
      <summary>Computes the bitwise AND of two specified <see cref="T:System.Data.OracleClient.OracleBoolean" /> structures.</summary>
      <returns>The result of the logical AND operation as shown in the following table.Value of <paramref name="x" />Value of <paramref name="y" />Result truetruetruetruefalsefalsefalsefalsefalsetrueunknownunknownfalseunknownfalseunknownunknownunknown</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.CompareTo(System.Object)">
      <summary>Compares this <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure to a specified object and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relative values of the instance and value.Value Description A negative integer This instance is less than <paramref name="value" />. Zero This instance is equal to <paramref name="value" />. A positive integer This instance is greater than <paramref name="value" />.-or- <paramref name="value" /> is a null reference (Nothing in Visual Basic). </returns>
      <param name="obj">An object to compare, or a null reference (Nothing in Visual Basic). </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.Equals(System.Data.OracleClient.OracleBoolean,System.Data.OracleClient.OracleBoolean)">
      <summary>Compares two <see cref="T:System.Data.OracleClient.OracleBoolean" /> structures to determine if they are equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are not equal. If either instance of <see cref="T:System.Data.OracleClient.OracleBoolean" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.Equals(System.Object)">
      <summary>Compares the supplied object parameter to the <see cref="T:System.Data.OracleClient.OracleBoolean" />.</summary>
      <returns>true if object is an instance of <see cref="T:System.Data.OracleClient.OracleBoolean" /> and the two are equal; otherwise false.</returns>
      <param name="value">The object to be compared. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleBoolean.False">
      <summary>Represents a false value that can be assigned to the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> property of an instance of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleBoolean.IsFalse">
      <summary>Indicates whether the current <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.False" />.</summary>
      <returns>true if Value is False, otherwise false.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleBoolean.IsNull">
      <summary>Indicates whether or not the value of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure is null.</summary>
      <returns>true if the <see cref="T:System.Data.OracleClient.OracleBoolean" /> value of the structure is Null, otherwise false.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleBoolean.IsTrue">
      <summary>Indicates whether the current <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.True" />.</summary>
      <returns>true if Value is True, otherwise false.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.NotEquals(System.Data.OracleClient.OracleBoolean,System.Data.OracleClient.OracleBoolean)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleBoolean" /> to determine if they are not equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are not equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are equal. If either instance of <see cref="T:System.Data.OracleClient.OracleBoolean" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleBoolean.Null">
      <summary>Represents a null value that can be assigned to the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> property of an instance of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleBoolean.One">
      <summary>Represents a value of one that can be assigned to the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> property of an instance of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.OnesComplement(System.Data.OracleClient.OracleBoolean)">
      <summary>Performs a ones complement operation on the supplied <see cref="T:System.Data.OracleClient.OracleBoolean" /> structures.</summary>
      <returns>The one's complement of the supplied <see cref="T:System.Data.OracleClient.OracleBoolean" />. If the Boolean contains a null value the result also is a null value.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_BitwiseAnd(System.Data.OracleClient.OracleBoolean,System.Data.OracleClient.OracleBoolean)">
      <summary>Computes the bitwise AND of two specified <see cref="T:System.Data.OracleClient.OracleBoolean" /> structures.</summary>
      <returns>The result of the logical AND operation as shown in the following table.Value of <paramref name="x" />Value of <paramref name="y" />Result truetruetruetruefalsefalsefalsefalsefalsetrueunknownunknownfalseunknownunknownunknownunknownunknown</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_BitwiseOr(System.Data.OracleClient.OracleBoolean,System.Data.OracleClient.OracleBoolean)">
      <summary>Computes the bitwise OR of its two <see cref="T:System.Data.OracleClient.OracleBoolean" /> operands.</summary>
      <returns>The result of the bitwise OR operation as shown in the following table.Value of <paramref name="x" />Value of <paramref name="y" />Result truetruetruetruefalsetruefalsefalsefalsetrueunknowntruefalseunknownunknownunknownunknownunknown</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_Equality(System.Data.OracleClient.OracleBoolean,System.Data.OracleClient.OracleBoolean)">
      <summary>Compares two instances of an <see cref="T:System.Data.OracleClient.OracleBoolean" /> for equality.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are not equal. If either instance of <see cref="T:System.Data.OracleClient.OracleBoolean" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" />. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleBoolean" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_ExclusiveOr(System.Data.OracleClient.OracleBoolean,System.Data.OracleClient.OracleBoolean)">
      <summary>Performs a bitwise exclusive-OR operation on the supplied <see cref="T:System.Data.OracleClient.OracleBoolean" /> parameters.</summary>
      <returns>The results of the bitwise XOR operation as shown in the following table.Value of <paramref name="x" />Value of <paramref name="y" />Result truetruefalsetruefalsetruefalsefalsefalsetrueunknownunknownfalseunknownunknownunknownunknownunknown</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_Explicit(System.Data.OracleClient.OracleBoolean)~System.Boolean">
      <summary>Converts an <see cref="T:System.Data.OracleClient.OracleBoolean" /> to a Boolean.</summary>
      <returns>A Boolean set to the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> to convert. </param>
      <exception cref="T:System.NullReferenceException">The <see cref="T:System.Data.OracleClient.OracleBoolean" /> contains a null value. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_Explicit(System.Data.OracleClient.OracleNumber)~System.Data.OracleClient.OracleBoolean">
      <summary>Converts the <see cref="T:System.Data.OracleClient.OracleNumber" /> parameter to an <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure whose value equals the <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> property of the <see cref="T:System.Data.OracleClient.OracleNumber" /> parameter.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> to be converted to an <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_Explicit(System.String)~System.Data.OracleClient.OracleBoolean">
      <summary>Converts a string to an <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure whose value equals the <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> of the <see cref="T:System.Data.OracleClient.OracleNumber" /> parameter.</returns>
      <param name="x">A string to be converted to an <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_False(System.Data.OracleClient.OracleBoolean)">
      <summary>Used to test the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> to determine whether it is false.</summary>
      <returns>true if the supplied parameter <see cref="T:System.Data.OracleClient.OracleBoolean" /> is false; otherwise false.</returns>
      <param name="x">The <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure to be tested. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_Implicit(System.Boolean)~System.Data.OracleClient.OracleBoolean">
      <summary>Converts a Boolean value to an <see cref="T:System.Data.OracleClient.OracleBoolean" />.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> value containing 0 or 1.</returns>
      <param name="x">A Boolean value to be converted to <see cref="T:System.Data.OracleClient.OracleBoolean" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_Inequality(System.Data.OracleClient.OracleBoolean,System.Data.OracleClient.OracleBoolean)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleBoolean" /> for inequality.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are not equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are equal. If either instance of <see cref="T:System.Data.OracleClient.OracleBoolean" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" />. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleBoolean" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_LogicalNot(System.Data.OracleClient.OracleBoolean)">
      <summary>Performs a NOT operation on an <see cref="T:System.Data.OracleClient.OracleBoolean" />.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> with the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /><see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if argument was true, <see cref="F:System.Data.OracleClient.OracleBoolean.Null" /> if argument was null, and <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> otherwise.</returns>
      <param name="x">The <see cref="T:System.Data.OracleClient.OracleBoolean" /> on which the NOT operation is performed. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_OnesComplement(System.Data.OracleClient.OracleBoolean)">
      <summary>Performs a one's complement operation on the specified <see cref="T:System.Data.OracleClient.OracleBoolean" />.</summary>
      <returns>The one's complement of the specified <see cref="T:System.Data.OracleClient.OracleBoolean" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.op_True(System.Data.OracleClient.OracleBoolean)">
      <summary>Used to test the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> to determine whether it is true.</summary>
      <returns>true if the supplied parameter <see cref="T:System.Data.OracleClient.OracleBoolean" /> is true; otherwise false.</returns>
      <param name="x">The <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure to be tested. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.Or(System.Data.OracleClient.OracleBoolean,System.Data.OracleClient.OracleBoolean)">
      <summary>Performs a bitwise OR operation on the two specified <see cref="T:System.Data.OracleClient.OracleBoolean" /> structures.</summary>
      <returns>The result of the bitwise OR operation as shown in the following table.Value of <paramref name="x" />Value of <paramref name="y" />Result truetruetruetruefalsetruefalsefalsefalsetrueunknowntruefalseunknownunknownunknownunknownunknown</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.Parse(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a logical value to its <see cref="T:System.Data.OracleClient.OracleBoolean" /> equivalent.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure containing the parsed value.</returns>
      <param name="s">The <see cref="T:System.String" /> to be converted. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.ToString">
      <summary>Converts the current <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> to a string.</summary>
      <returns>A string containing the value of the <see cref="T:System.Data.OracleClient.OracleBoolean" />. If the value is null, the string contains a null value.</returns>
    </member>
    <member name="F:System.Data.OracleClient.OracleBoolean.True">
      <summary>Represents a true value that can be assigned to the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> property of an instance of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleBoolean.Value">
      <summary>Gets the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure's value. This property is read-only.</summary>
      <returns>true if the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.True" />; otherwise false.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleBoolean.Xor(System.Data.OracleClient.OracleBoolean,System.Data.OracleClient.OracleBoolean)">
      <summary>Performs a bitwise exclusive-OR operation on the supplied parameters.</summary>
      <returns>The results of the logical XOR operation as shown in the following table.Value of <paramref name="x" />Value of <paramref name="y" />Result truetruefalsetruefalsetruefalsefalsefalsetrueunknownunknownfalseunknownunknownunknownunknownunknown</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleBoolean.Zero">
      <summary>Represents a value of zero that can be assigned to the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> property of an instance of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> structure.</summary>
    </member>
    <member name="T:System.Data.OracleClient.OracleClientFactory">
      <summary>Represents a set of methods for creating instances of the Oracle provider's implementation of the data source classes. </summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleClientFactory.CreateCommand">
      <summary>Returns a strongly typed <see cref="T:System.Data.Common.DbCommand" /> instance.</summary>
      <returns>A new strongly typed instance of <see cref="T:System.Data.Common.DbCommand" />.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleClientFactory.CreateCommandBuilder">
      <summary>Returns a strongly typed <see cref="T:System.Data.Common.DbCommandBuilder" /> instance.</summary>
      <returns>A new strongly typed instance of <see cref="T:System.Data.Common.DbCommandBuilder" />.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleClientFactory.CreateConnection">
      <summary>Returns a strongly typed <see cref="T:System.Data.Common.DbConnection" /> instance.</summary>
      <returns>A new strongly typed instance of <see cref="T:System.Data.Common.DbConnection" />. </returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleClientFactory.CreateConnectionStringBuilder">
      <summary>Returns a strongly typed <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> instance.</summary>
      <returns>A new strongly typed instance of <see cref="T:System.Data.Common.DbConnectionStringBuilder" />.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleClientFactory.CreateDataAdapter">
      <summary>Returns a strongly typed <see cref="T:System.Data.Common.DbDataAdapter" /> instance.</summary>
      <returns>A new strongly typed instance of <see cref="T:System.Data.Common.DbDataAdapter" />.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleClientFactory.CreateParameter">
      <summary>Returns a strongly typed <see cref="T:System.Data.Common.DbParameter" /> instance.</summary>
      <returns>A new strongly typed instance of <see cref="T:System.Data.Common.DbParameter" />.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleClientFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>Returns a strongly typed <see cref="T:System.Security.CodeAccessPermission" /> instance.</summary>
      <returns>A strongly typed instance of <see cref="T:System.Security.CodeAccessPermission" />.</returns>
      <param name="state">A member of the <see cref="T:System.Security.Permissions.PermissionState" /> enumeration.</param>
    </member>
    <member name="F:System.Data.OracleClient.OracleClientFactory.Instance">
      <summary>Gets an instance of the <see cref="T:System.Data.OracleClient.OracleClientFactory" />, which can be used to retrieve strongly typed data objects.</summary>
    </member>
    <member name="T:System.Data.OracleClient.OracleCommand">
      <summary>Represents an SQL statement or stored procedure to execute against a database. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleCommand" />.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleCommand" /> class with the text of the query.</summary>
      <param name="commandText">The text of the query. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.#ctor(System.String,System.Data.OracleClient.OracleConnection)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleCommand" /> class with the text of the query and an <see cref="T:System.Data.OracleClient.OracleConnection" /> object.</summary>
      <param name="commandText">The text of the query. </param>
      <param name="connection">An <see cref="T:System.Data.OracleClient.OracleConnection" /> object that represents the connection to a database. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.#ctor(System.String,System.Data.OracleClient.OracleConnection,System.Data.OracleClient.OracleTransaction)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleCommand" /> class with the text of the query, an <see cref="T:System.Data.OracleClient.OracleConnection" /> object, and an <see cref="T:System.Data.OracleClient.OracleTransaction" />.</summary>
      <param name="commandText">The text of the query. </param>
      <param name="connection">An <see cref="T:System.Data.OracleClient.OracleConnection" /> object that represents the connection to a database. </param>
      <param name="tx">The <see cref="T:System.Data.OracleClient.OracleTransaction" /> in which the <see cref="T:System.Data.OracleClient.OracleCommand" /> executes. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.Cancel">
      <summary>Attempts to cancel the execution of an <see cref="T:System.Data.OracleClient.OracleCommand" />.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.Clone">
      <summary>Creates a copy of this <see cref="T:System.Data.OracleClient.OracleCommand" /> object.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleCommand" /> object in which all property values are the same as the original.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommand.CommandText">
      <summary>Gets or sets the SQL statement or stored procedure to execute against the database.</summary>
      <returns>The SQL statement or stored procedure to execute. The default value is an empty string ("").</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommand.CommandTimeout">
      <summary>Gets or sets the wait time before terminating the attempt to execute a command and generating an error.</summary>
      <returns>The time (in seconds) to wait for the command to execute. The default value is 30 seconds.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommand.CommandType">
      <summary>Gets or sets a value indicating how the <see cref="P:System.Data.OracleClient.OracleCommand.CommandText" /> property is interpreted.</summary>
      <returns>One of the <see cref="T:System.Data.CommandType" /> values. The default is Text.</returns>
      <exception cref="T:System.ArgumentException">The value was not a valid <see cref="T:System.Data.CommandType" />. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommand.Connection">
      <summary>Gets or sets the <see cref="T:System.Data.OracleClient.OracleConnection" /> used by this instance of the <see cref="T:System.Data.OracleClient.OracleCommand" />.</summary>
      <returns>The connection to a data source. The default is a null value.</returns>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Data.OracleClient.OracleCommand.Connection" /> property was changed while a transaction was in progress. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.CreateParameter">
      <summary>Creates a new instance of an <see cref="T:System.Data.OracleClient.OracleParameter" /> object.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleParameter" /> object.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommand.DesignTimeVisible">
      <summary>Gets or sets a value indicating whether the command object should be visible in a customized interface control.</summary>
      <returns>true, if the command object should be visible in a control; otherwise false. The default is true.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.ExecuteNonQuery">
      <summary>Executes an SQL statement against the <see cref="P:System.Data.OracleClient.OracleCommand.Connection" /> and returns the number of rows affected.</summary>
      <returns>For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For CREATE TABLE and DROP TABLE statements, the return value is 0. For all other types of statements, the return value is -1.</returns>
      <exception cref="T:System.InvalidOperationException">The connection does not exist.-or- The connection is not open. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.ExecuteOracleNonQuery(System.Data.OracleClient.OracleString@)">
      <summary>Executes an SQL statement against the <see cref="P:System.Data.OracleClient.OracleCommand.Connection" /> and returns the number of rows affected.</summary>
      <returns>For UPDATE, INSERT, and DELETE statements, the return value is the number of rows affected by the command. For CREATE TABLE and DROP TABLE statements, the return value is 0. For all other types of statements, the return value is -1.</returns>
      <param name="rowid">A base64 string representation of the actual row ID in the server. </param>
      <exception cref="T:System.InvalidOperationException">The connection does not exist.-or- The connection is not open. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.ExecuteOracleScalar">
      <summary>Executes the query, and returns the first column of the first row in the result set returned by the query as an Oracle-specific data type. Extra columns or rows are ignored.</summary>
      <returns>The first column of the first row in the result set as an Oracle-specific data type, or a null reference if the result is a REF CURSOR.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.ExecuteReader">
      <summary>Sends the <see cref="P:System.Data.OracleClient.OracleCommand.CommandText" /> to the <see cref="P:System.Data.OracleClient.OracleCommand.Connection" /> and builds an <see cref="T:System.Data.OracleClient.OracleDataReader" />.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleDataReader" /> object.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>Sends the <see cref="P:System.Data.OracleClient.OracleCommand.CommandText" /> to the <see cref="P:System.Data.OracleClient.OracleCommand.Connection" />, and builds an <see cref="T:System.Data.OracleClient.OracleDataReader" /> using one of the <see cref="T:System.Data.CommandBehavior" /> values.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleDataReader" /> object.</returns>
      <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior" /> values. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.ExecuteScalar">
      <summary>Executes the query, and returns the first column of the first row in the result set returned by the query as a .NET Framework data type. Extra columns or rows are ignored.</summary>
      <returns>The first column of the first row in the result set as a .NET Framework data type, or a null reference if the result set is empty or the result is a REF CURSOR.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommand.Parameters">
      <summary>Gets the <see cref="T:System.Data.OracleClient.OracleParameterCollection" />.</summary>
      <returns>The parameters of the SQL statement or stored procedure. The default is an empty collection.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.Prepare">
      <summary>Creates a prepared (or compiled) version of the command at the data source.</summary>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Data.OracleClient.OracleCommand.Connection" /> is not set.-or- The <see cref="P:System.Data.OracleClient.OracleCommand.Connection" /> is not <see cref="M:System.Data.OracleClient.OracleConnection.Open" />. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommand.ResetCommandTimeout">
      <summary>Resets the <see cref="P:System.Data.OracleClient.OracleCommand.CommandTimeout" /> property to the default value.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommand.Transaction">
      <summary>Gets or sets the <see cref="T:System.Data.OracleClient.OracleTransaction" /> within which the <see cref="T:System.Data.OracleClient.OracleCommand" /> executes.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleTransaction" />. The default is a null value.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommand.UpdatedRowSource">
      <summary>Gets or sets a value that specifies how the Update method should apply command results to the <see cref="T:System.Data.DataRow" />.</summary>
      <returns>One of the <see cref="T:System.Data.UpdateRowSource" /> values.</returns>
      <exception cref="T:System.ArgumentException">The value entered was not one of the <see cref="T:System.Data.UpdateRowSource" /> values.</exception>
    </member>
    <member name="T:System.Data.OracleClient.OracleCommandBuilder">
      <summary>Automatically generates single-table commands used to reconcile changes made to a <see cref="T:System.Data.DataSet" /> with the associated database. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleCommandBuilder" />.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.#ctor(System.Data.OracleClient.OracleDataAdapter)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleCommandBuilder" /> class with the associated <see cref="T:System.Data.OracleClient.OracleDataAdapter" /> object.</summary>
      <param name="adapter">An <see cref="T:System.Data.OracleClient.OracleDataAdapter" /> object to associate with this <see cref="T:System.Data.OracleClient.OracleCommandBuilder" />. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommandBuilder.CatalogLocation">
      <summary>Sets or gets the <see cref="T:System.Data.Common.CatalogLocation" /> for an instance of the <see cref="T:System.Data.Common.DbCommandBuilder" /> class.</summary>
      <returns>A <see cref="T:System.Data.Common.CatalogLocation" /> object.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommandBuilder.CatalogSeparator">
      <summary>Sets or gets a string used as the catalog separator for an instance of the <see cref="T:System.Data.Common.DbCommandBuilder" /> class.</summary>
      <returns>A string indicating the catalog separator for use with an instance of the <see cref="T:System.Data.Common.DbCommandBuilder" /> class.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommandBuilder.DataAdapter">
      <summary>Gets or sets an <see cref="T:System.Data.OracleClient.OracleDataAdapter" /> object for which this <see cref="T:System.Data.OracleClient.OracleCommandBuilder" /> object will generate SQL statements.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleDataAdapter" /> object that is associated with this <see cref="T:System.Data.OracleClient.OracleCommandBuilder" />.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.DeriveParameters(System.Data.OracleClient.OracleCommand)">
      <summary>Retrieves parameter information from the stored procedure specified in the <see cref="T:System.Data.OracleClient.OracleCommand" /> and populates the <see cref="P:System.Data.OracleClient.OracleCommand.Parameters" /> collection of the specified <see cref="T:System.Data.OracleClient.OracleCommand" /> object.</summary>
      <param name="command">The <see cref="T:System.Data.OracleClient.OracleCommand" /> referencing the stored procedure from which the parameter information is to be derived. The derived parameters are added to the <see cref="P:System.Data.OracleClient.OracleCommand.Parameters" /> collection of the <see cref="T:System.Data.OracleClient.OracleCommand" />. </param>
      <exception cref="T:System.InvalidOperationException">The command text is not a valid stored procedure name, or the <see cref="T:System.Data.CommandType" /> specified was not <see cref="F:System.Data.CommandType.StoredProcedure" />. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.GetDeleteCommand">
      <summary>Gets the automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform deletions on the database.</summary>
      <returns>The automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform deletions.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.GetDeleteCommand(System.Boolean)">
      <summary>Gets the automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform deletions on the database.</summary>
      <returns>The automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform deletions.</returns>
      <param name="useColumnsForParameterNames">If true, generate parameter names matching column names, if possible. If false, generate @p1, @p2, and so on.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.GetInsertCommand">
      <summary>Gets the automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform insertions on the database.</summary>
      <returns>The automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform insertions.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.GetInsertCommand(System.Boolean)">
      <summary>Gets the automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform insertions on the database.</summary>
      <returns>The automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform insertions.</returns>
      <param name="useColumnsForParameterNames">If true, generate parameter names matching column names, if possible. If false, generate @p1, @p2, and so on.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.GetUpdateCommand">
      <summary>Gets the automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform updates on the database.</summary>
      <returns>The automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform updates.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.GetUpdateCommand(System.Boolean)">
      <summary>Gets the automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform updates on the database.</summary>
      <returns>The automatically generated <see cref="T:System.Data.OracleClient.OracleCommand" /> object required to perform updates.</returns>
      <param name="useColumnsForParameterNames">If true, generate parameter names matching column names, if possible. If false, generate @p1, @p2, and so on.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.QuoteIdentifier(System.String)">
      <summary>Given an unquoted identifier in the correct catalog case, returns the correct quoted form of that identifier, including properly escaping any embedded quotes in the identifier.</summary>
      <returns>The quoted version of the identifier. Embedded quotes within the identifier are properly escaped.</returns>
      <param name="unquotedIdentifier">The original unquoted identifier.</param>
    </member>
    <member name="P:System.Data.OracleClient.OracleCommandBuilder.SchemaSeparator">
      <summary>Gets or sets the character to be used for the separator between the schema identifier and any other identifiers.</summary>
      <returns>The character to be used as the schema separator.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleCommandBuilder.UnquoteIdentifier(System.String)">
      <summary>Given a quoted identifier, returns the correct unquoted form of that identifier, including properly un-escaping any embedded quotes in the identifier.</summary>
      <returns>The unquoted identifier, with embedded quotes properly un-escaped.</returns>
      <param name="quotedIdentifier">The identifier that will have its embedded quotes removed.</param>
    </member>
    <member name="T:System.Data.OracleClient.OracleConnection">
      <summary>Represents an open connection to a database. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleConnection" />.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleConnection" /> class with the specified connection string.</summary>
      <param name="connectionString">The connection used to open the database. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.BeginTransaction">
      <summary>Begins a transaction at the database.</summary>
      <returns>An object representing the new transaction.</returns>
      <exception cref="T:System.InvalidOperationException">Parallel transactions are not supported. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>Begins a transaction at the database with the specified <see cref="T:System.Data.IsolationLevel" /> value.</summary>
      <returns>An object representing the new transaction.</returns>
      <param name="il">The transaction isolation level for this connection. </param>
      <exception cref="T:System.InvalidOperationException">Parallel transactions are not supported. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.ChangeDatabase(System.String)">
      <summary>Changes the current database for an open <see cref="T:System.Data.OracleClient.OracleConnection" />.</summary>
      <param name="value">The name of the database to use instead of the current database. </param>
      <exception cref="T:System.ArgumentException">The database name is not valid. </exception>
      <exception cref="T:System.InvalidOperationException">The connection is not open. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">Cannot change the database. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.ClearAllPools">
      <summary>Empties the connection pool.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.ClearPool(System.Data.OracleClient.OracleConnection)">
      <summary>Empties the connection pool associated with the specified connection.</summary>
      <param name="connection">The <see cref="T:System.Data.OracleClient.OracleConnection" /> to be cleared from the pool.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.Close">
      <summary>Closes the connection to the database. </summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnection.ConnectionString">
      <summary>Gets or sets the string used to open an Oracle database.</summary>
      <returns>The Oracle connection string that includes settings, such as the server name, needed to establish the initial connection. The default value is an empty string ("").</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnection.ConnectionTimeout">
      <summary>Gets the time to wait to establish a connection before terminating the attempt and generating an error.</summary>
      <returns>The time (in seconds) to wait for a connection to open. The default value is 15 seconds.</returns>
      <exception cref="T:System.ArgumentException">The value specified is less than 0. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.CreateCommand">
      <summary>Creates and returns an <see cref="T:System.Data.OracleClient.OracleCommand" /> object associated with the <see cref="T:System.Data.OracleClient.OracleConnection" />.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleCommand" /> object.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnection.Database">
      <summary>Gets the name of the current database or the database to be used after a connection is opened.</summary>
      <returns>The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnection.DataSource">
      <summary>Gets the name of the Oracle server to which to connect.</summary>
      <returns>The name of the Oracle server to which to connect. The default value is an empty string ("").</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)">
      <summary>Enlists in the specified transaction as a distributed transaction.</summary>
      <param name="distributedTransaction">A reference to an existing <see cref="T:System.EnterpriseServices.ITransaction" /> in which to enlist.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>Enlists in the specified transaction as a distributed transaction.</summary>
      <param name="transaction">A reference to an existing <see cref="T:System.Transactions.Transaction" /> in which to enlist.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.GetSchema">
      <summary>Returns schema information for the data source of this <see cref="T:System.Data.OracleClient.OracleConnection" />.</summary>
      <returns>A <see cref="T:System.Data.DataTable" /> that contains schema information.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.GetSchema(System.String)">
      <summary>Returns schema information for the data source of this <see cref="T:System.Data.OracleClient.OracleConnection" /> using the specified string for the schema name.</summary>
      <returns>A <see cref="T:System.Data.DataTable" /> that contains schema information.</returns>
      <param name="collectionName">Specifies the name of the schema to return.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionName" /> is specified as null.</exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.GetSchema(System.String,System.String[])">
      <summary>Returns schema information for the data source of this <see cref="T:System.Data.OracleClient.OracleConnection" /> using the specified string for the schema name and the specified string array for the restriction values.</summary>
      <returns>A <see cref="T:System.Data.DataTable" /> that contains schema information.</returns>
      <param name="collectionName">Specifies the name of the schema to return.</param>
      <param name="restrictionValues">A set of restriction values for the requested schema.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionName" /> is specified as null.</exception>
    </member>
    <member name="E:System.Data.OracleClient.OracleConnection.InfoMessage">
      <summary>Occurs when Oracle sends a warning or an informational message.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.Open">
      <summary>Opens a connection to a database with the property settings specified by the <see cref="P:System.Data.OracleClient.OracleConnection.ConnectionString" />.</summary>
      <exception cref="T:System.InvalidOperationException">The connection is not open. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">Cannot change the database. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnection.ServerVersion">
      <summary>Gets a string containing the version of the server to which the client is connected.</summary>
      <returns>The version of the connected server.</returns>
      <exception cref="T:System.InvalidOperationException">The connection is closed. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnection.State">
      <summary>Gets the current state of the connection.</summary>
      <returns>A bitwise combination of the <see cref="T:System.Data.ConnectionState" /> values. The default is Closed.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnection.System#ICloneable#Clone">
      <summary>Creates a new object that is a copy of the current instance.</summary>
      <returns>A new object that is a copy of this instance..</returns>
    </member>
    <member name="T:System.Data.OracleClient.OracleConnectionStringBuilder">
      <summary>Provides a simple way to create and manage the contents of connection strings used by the <see cref="T:System.Data.OracleClient.OracleConnection" /> class. </summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnectionStringBuilder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" /> class.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnectionStringBuilder.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" /> class. The provided connection string provides the data for the instance's internal connection information.</summary>
      <param name="connectionString">The basis for the object's internal connection information. Parsed into name/value pairs. Invalid key names raise a <see cref="T:System.Collections.Generic.KeyNotFoundException" />.</param>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Invalid key name within the connection string.</exception>
      <exception cref="T:System.FormatException">Invalid value within the connection string (specifically, when a Boolean or numeric value was expected but not supplied).</exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnectionStringBuilder.Clear">
      <summary>Clears the contents of the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" /> instance.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnectionStringBuilder.ContainsKey(System.String)">
      <summary>Determines whether the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" /> contains a specific key.</summary>
      <returns>true if the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" /> contains an element that has the specified key; otherwise, false.</returns>
      <param name="keyword">The key to locate in the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> is null (Nothing in Visual Basic)</exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.DataSource">
      <summary>Gets or sets the name of the Oracle data source to connect to.</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.DataSource" /> property, or <see cref="F:System.String.Empty" /> if none has been supplied.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.Enlist">
      <summary>Gets or sets a value that indicates whether the pooler automatically enlists the connection in the creation thread's current transaction context.</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.Enlist" /> property, or true if the property has not been previously set.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.IntegratedSecurity">
      <summary>Gets or sets a value that indicates whether "User ID" and "Password" are specified in the connection (when false) or whether the current Windows account credentials are used for authentication (when true).</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.IntegratedSecurity" /> property, or a false if none has been supplied.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.IsFixedSize">
      <summary>Gets a value that indicates whether the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" /> has a fixed size.</summary>
      <returns>true in every case, because the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" /> supplies a fixed-size collection of key/value pairs.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.Item(System.String)">
      <summary>Gets or sets the value associated with the specified key. In C#, this property is the indexer.</summary>
      <returns>The value associated with the specified key. </returns>
      <param name="keyword">The key of the item to get or set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Tried to add a key which does not exist within the available keys.</exception>
      <exception cref="T:System.FormatException">Invalid value within the connection string (specifically, when a Boolean or numeric value was expected but not supplied).</exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.Keys">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> that contains the keys in the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> that contains the keys in the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" />.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.LoadBalanceTimeout">
      <summary>Gets or sets the minimum time, in seconds, for the connection to live in the connection pool before it is removed.</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.LoadBalanceTimeout" /> property, or 0 if none has been supplied.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.MaxPoolSize">
      <summary>Gets or sets the maximum number of connections allowed in the connection pool for this specific connection string.</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.MaxPoolSize" /> property, or 100 if none has been supplied.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.MinPoolSize">
      <summary>Gets or sets the minimum number of connections allowed in the connection pool for this specific connection string.</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.MinPoolSize" /> property, or 0 if none has been supplied.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.OmitOracleConnectionName">
      <summary>Gets or sets the flag that enables transaction rollbacks on earlier versions of Oracle (prior to 8.1.7.4.1). </summary>
      <returns>true if transaction rollbacks are enabled; otherwise false. </returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.Password">
      <summary>Gets or sets the password for the Oracle account.</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.Password" /> property, or <see cref="F:System.String.Empty" /> if none has been supplied.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.PersistSecurityInfo">
      <summary>Gets or sets a Boolean value that indicates if security-sensitive information, such as the password, is not returned as part of the connection if the connection is open or has ever been in an open state.</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.PersistSecurityInfo" /> property, or false if none has been supplied.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.Pooling">
      <summary>Gets or sets a Boolean value that indicates whether the connection will be pooled, or whether each connection will be explicitly opened every time that the connection is requested.</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.Pooling" /> property, or true if none has been supplied.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnectionStringBuilder.Remove(System.String)">
      <summary>Removes the entry with the specified key from the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" /> instance.</summary>
      <returns>true if the key existed within the connection string and was removed, false if the key did not exist.</returns>
      <param name="keyword">The key of the key/value pair to be removed from the connection string in this <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" /> is null (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnectionStringBuilder.ShouldSerialize(System.String)">
      <summary>Indicates whether the specified key exists in this <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" /> instance.</summary>
      <returns>true if the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" /> contains an entry with the specified key; otherwise, false.</returns>
      <param name="keyword">The key to locate in the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" />.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>Retrieves a value corresponding to the supplied key from this <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" />.</summary>
      <returns>true if <paramref name="keyword" /> was found within the connection string; otherwise, false.</returns>
      <param name="keyword">The key of the item to retrieve.</param>
      <param name="value">The value corresponding to <paramref name="keyword." /></param>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.Unicode">
      <summary>Gets or sets a Boolean value that indicates if the client supports the Unicode functionality available in later Oracle clients, or if it is non-Unicode aware.</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.Unicode" /> property, or false if none has been supplied.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.UserID">
      <summary>Gets or sets the user ID to be used when connecting to Oracle.</summary>
      <returns>The value of the <see cref="P:System.Data.OracleClient.OracleConnectionStringBuilder.UserID" /> property, or <see cref="F:System.String.Empty" /> if none has been supplied.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleConnectionStringBuilder.Values">
      <summary>Gets an <see cref="T:System.Collections.ICollection" /> that contains the values in the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" />.</summary>
      <returns>An <see cref="T:System.Collections.ICollection" /> that contains the values in the <see cref="T:System.Data.OracleClient.OracleConnectionStringBuilder" />.</returns>
    </member>
    <member name="T:System.Data.OracleClient.OracleDataAdapter">
      <summary>Represents a set of data commands and a connection to a database that are used to fill the <see cref="T:System.Data.DataSet" /> and update the database. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataAdapter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDataAdapter" /> class.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataAdapter.#ctor(System.Data.OracleClient.OracleCommand)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDataAdapter" /> class with the specified SQL SELECT statement.</summary>
      <param name="selectCommand">An <see cref="T:System.Data.OracleClient.OracleCommand" /> that is an SQL SELECT statement or stored procedure, and is set as the <see cref="P:System.Data.OracleClient.OracleDataAdapter.SelectCommand" /> property of the <see cref="T:System.Data.OracleClient.OracleDataAdapter" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataAdapter.#ctor(System.String,System.Data.OracleClient.OracleConnection)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDataAdapter" /> class with an SQL SELECT statement and an <see cref="T:System.Data.OracleClient.OracleConnection" />.</summary>
      <param name="selectCommandText">A string that is an SQL SELECT statement or stored procedure to be used by the <see cref="P:System.Data.OracleClient.OracleDataAdapter.SelectCommand" /> property of the <see cref="T:System.Data.OracleClient.OracleDataAdapter" />. </param>
      <param name="selectConnection">An <see cref="T:System.Data.OracleClient.OracleConnection" /> that represents the connection. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataAdapter.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDataAdapter" /> class with an SQL SELECT statement and a connection string.</summary>
      <param name="selectCommandText">A string that is an SQL SELECT statement or stored procedure to be used by the <see cref="P:System.Data.OracleClient.OracleDataAdapter.SelectCommand" /> property of the <see cref="T:System.Data.OracleClient.OracleDataAdapter" />. </param>
      <param name="selectConnectionString">The connection string. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataAdapter.DeleteCommand">
      <summary>Gets or sets an SQL statement or stored procedure used to delete records in the database.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleCommand" /> used during an update operation to delete records in the database that correspond to deleted rows in the DataSet.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataAdapter.InsertCommand">
      <summary>Gets or sets an SQL statement or stored procedure used to insert new records into the database.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleCommand" /> used during an update operation to insert records in the database that correspond to new rows in the <see cref="T:System.Data.DataSet" />.</returns>
    </member>
    <member name="E:System.Data.OracleClient.OracleDataAdapter.RowUpdated">
      <summary>Occurs during an update operation after a command is executed against the database.</summary>
    </member>
    <member name="E:System.Data.OracleClient.OracleDataAdapter.RowUpdating">
      <summary>Occurs during <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> before a command is executed against the data source.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataAdapter.SelectCommand">
      <summary>Gets or sets an SQL statement or stored procedure used to select records in the database.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleCommand" /> that is used during a fill operation to select records from database for placement in the <see cref="T:System.Data.DataSet" />.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
      <summary>For a description of this member, see <see cref="P:System.Data.IDbDataAdapter.DeleteCommand" />.</summary>
      <returns>A string representing the command.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
      <summary>For a description of this member, see <see cref="P:System.Data.IDbDataAdapter.InsertCommand" />.</summary>
      <returns>A string representing the command.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
      <summary>For a description of this member, see <see cref="P:System.Data.IDbDataAdapter.SelectCommand" />.</summary>
      <returns>A string representing the command.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
      <summary>For a description of this member, see <see cref="P:System.Data.IDbDataAdapter.UpdateCommand" />.</summary>
      <returns>A string representing the command.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataAdapter.System#ICloneable#Clone">
      <summary>For a description of this member, see <see cref="M:System.ICloneable.Clone" />.</summary>
      <returns>A new object that is a copy of this instance. </returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataAdapter.UpdateBatchSize">
      <summary>Gets or sets a value that enables or disables batch processing support, and specifies the number of commands that can be executed in a batch.</summary>
      <returns>The number of rows to process per batch. Value:Effect:0There is no limit on the batch size.1Disables batch updating.&gt; 1Changes are sent using batches of <see cref="P:System.Data.OracleClient.OracleDataAdapter.UpdateBatchSize" /> operations at a time.When setting this to a value other than 1 all the commands associated with the <see cref="T:System.Data.OracleClient.OracleDataAdapter" /> have to have their <see cref="P:System.Data.IDbCommand.UpdatedRowSource" /> property set to None or OutputParameters. An exception is thrown otherwise. </returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataAdapter.UpdateCommand">
      <summary>Gets or sets an SQL statement or stored procedure used to update records in the database.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleCommand" /> used during an update operation to update records in the database that correspond to modified rows in the <see cref="T:System.Data.DataSet" />.</returns>
    </member>
    <member name="T:System.Data.OracleClient.OracleDataReader">
      <summary>Provides a way of reading a forward-only stream of data rows from a data source. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.Close">
      <summary>Closes the <see cref="T:System.Data.OracleClient.OracleDataReader" /> object.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataReader.Depth">
      <summary>Gets a value indicating the depth of nesting for the current row.</summary>
      <returns>The depth of nesting for the current row.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataReader.FieldCount">
      <summary>Gets the number of columns in the current row.</summary>
      <returns>When not positioned in a valid record set, 0; otherwise the number of columns in the current record. The default is -1.</returns>
      <exception cref="T:System.NotSupportedException">There is no current connection to a data source. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetBoolean(System.Int32)">
      <summary>Gets the value of the specified column as a Boolean.</summary>
      <returns>A Boolean that is the value of the column.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetByte(System.Int32)">
      <summary>Gets the value of the specified column as a byte.</summary>
      <returns>The value of the specified column as a byte.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.</summary>
      <returns>The actual number of bytes read.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <param name="fieldOffset">The index within the field where the read operation is to begin. </param>
      <param name="buffer2">The buffer into which to read the stream of bytes. </param>
      <param name="bufferoffset">The index where <paramref name="buffer" /> is to begin the write operation. </param>
      <param name="length">The number of bytes to read. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetChar(System.Int32)">
      <summary>Gets the value of the specified column as a character.</summary>
      <returns>The value of the specified column as a character.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.</summary>
      <returns>The actual number of characters read.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <param name="fieldOffset">The index within the row where the read operation is to begin. </param>
      <param name="buffer2">The buffer into which to copy data. </param>
      <param name="bufferoffset">The index where <paramref name="buffer" /> is to begin the write operation. </param>
      <param name="length">The number of characters to read. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetDataTypeName(System.Int32)">
      <summary>Gets the name of the source data type.</summary>
      <returns>The name of the source data type.</returns>
      <param name="i">The zero-based column ordinal. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetDateTime(System.Int32)">
      <summary>Gets the value of the specified column as a DateTime object.</summary>
      <returns>The value of the specified column as a DateTime object.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetDecimal(System.Int32)">
      <summary>Gets the value of the specified column as a Decimal object.</summary>
      <returns>The value of the specified column as a Decimal object.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetDouble(System.Int32)">
      <summary>Gets the value of the specified column as a double-precision floating point number.</summary>
      <returns>The value of the specified column as a double-precision floating point number.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the rows in the data reader.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the rows in the data reader.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetFieldType(System.Int32)">
      <summary>Gets the <see cref="T:System.Type" /> that is the data type of the object.</summary>
      <returns>The <see cref="T:System.Type" /> that is the data type of the object.</returns>
      <param name="i">The zero-based column ordinal. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetFloat(System.Int32)">
      <summary>Gets the value of the specified column as a single-precision floating-point number.</summary>
      <returns>The value of the specified column as a single-precision floating-point number.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetGuid(System.Int32)">
      <summary>Gets the value of the specified column as a globally-unique identifier (GUID).</summary>
      <returns>The value of the specified column as a GUID.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetInt16(System.Int32)">
      <summary>Gets the value of the specified column as a 16-bit signed integer.</summary>
      <returns>The value of the specified column as a 16-bit signed integer.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetInt32(System.Int32)">
      <summary>Gets the value of the specified column as a 32-bit signed integer.</summary>
      <returns>The value of the specified column as a 32-bit signed integer.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetInt64(System.Int32)">
      <summary>Gets the value of the specified column as a 64-bit signed integer.</summary>
      <returns>The value of the specified column as a 64-bit signed integer.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetName(System.Int32)">
      <summary>Gets the name of the specified column.</summary>
      <returns>A string that is the name of the specified column.</returns>
      <param name="i">The zero-based column ordinal. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOracleBFile(System.Int32)">
      <summary>Gets the value of the specified column as an <see cref="T:System.Data.OracleClient.OracleBFile" /> object.</summary>
      <returns>The value of the specified column as an <see cref="T:System.Data.OracleClient.OracleBFile" /> object.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOracleBinary(System.Int32)">
      <summary>Gets the value of the specified column as an <see cref="T:System.Data.OracleClient.OracleBinary" /> object.</summary>
      <returns>The value of the specified column as an <see cref="T:System.Data.OracleClient.OracleBinary" /> object.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOracleDateTime(System.Int32)">
      <summary>Gets the value of the specified column as an <see cref="T:System.Data.OracleClient.OracleDateTime" /> object.</summary>
      <returns>The value of the specified column as an <see cref="T:System.Data.OracleClient.OracleDateTime" /> object.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOracleLob(System.Int32)">
      <summary>Gets the value of the specified column as an <see cref="T:System.Data.OracleClient.OracleLob" /> object.</summary>
      <returns>The value of the specified column as an <see cref="T:System.Data.OracleClient.OracleLob" /> object.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOracleMonthSpan(System.Int32)">
      <summary>Gets the value of the specified column as an <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> object.</summary>
      <returns>The value of the specified column as an <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> object.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOracleNumber(System.Int32)">
      <summary>Gets the value of the specified column as an <see cref="T:System.Data.OracleClient.OracleNumber" /> object.</summary>
      <returns>The value of the specified column as an <see cref="T:System.Data.OracleClient.OracleNumber" /> object.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOracleString(System.Int32)">
      <summary>Gets the value of the specified column as an <see cref="T:System.Data.OracleClient.OracleString" /> object.</summary>
      <returns>The value of the specified column as an <see cref="T:System.Data.OracleClient.OracleString" /> object.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOracleTimeSpan(System.Int32)">
      <summary>Gets the value of the specified column as an <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> object.</summary>
      <returns>The value of the specified column as an <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> object.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOracleValue(System.Int32)">
      <summary>Gets the value of the column at the specified ordinal in its Oracle format.</summary>
      <returns>The Oracle value to return.</returns>
      <param name="i">The zero-based column ordinal. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOracleValues(System.Object[])">
      <summary>Gets all the attribute columns in the current row in Oracle format.</summary>
      <returns>The number of instances of <see cref="T:System.Object" /> in the array.</returns>
      <param name="values">An array of type <see cref="T:System.Object" /> into which to copy the attribute columns. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetOrdinal(System.String)">
      <summary>Gets the column ordinal, given the name of the column.</summary>
      <returns>The zero-based column ordinal.</returns>
      <param name="name">The name of the column.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>Gets an Object that is a representation of the underlying provider specific field type.</summary>
      <returns>Gets an <see cref="T:System.Object" /> that is a representation of the underlying provider specific field type.</returns>
      <param name="i">An <see cref="T:System.Int32" />.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>Gets an Object that is a representation of the underlying provider specific field type.</summary>
      <returns>Gets an <see cref="T:System.Object" /> that is a representation of the underlying provider specific field type.</returns>
      <param name="i">An <see cref="T:System.Int32" />.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>Gets an array of objects that are a representation of the underlying provider specific values.</summary>
      <returns>The number of instances of <see cref="T:System.Object" /> in the array.</returns>
      <param name="values">An array of <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetSchemaTable">
      <summary>Returns a <see cref="T:System.Data.DataTable" /> that describes the column metadata of the OracleDataReader.</summary>
      <returns>A <see cref="T:System.Data.DataTable" /> that describes the column metadata.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetString(System.Int32)">
      <summary>Gets the value of the specified column as a string.</summary>
      <returns>The value of the specified column as a string.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetTimeSpan(System.Int32)">
      <summary>Gets the value of the specified column as a System.TimeSpan.</summary>
      <returns>The value of the specified column as a <see cref="T:System.TimeSpan" />.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.InvalidCastException">The specified cast is not valid. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetValue(System.Int32)">
      <summary>Gets the value of the column at the specified ordinal in its native format.</summary>
      <returns>The value to return.</returns>
      <param name="i">The zero-based column ordinal. </param>
      <exception cref="T:System.Data.OracleClient.OracleException">The value is too large to be stored in the .NET Decimal.</exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.GetValues(System.Object[])">
      <summary>Populates an array of objects with the column values of the current row.</summary>
      <returns>The number of instances of <see cref="T:System.Object" /> in the array.</returns>
      <param name="values">An array of type <see cref="T:System.Object" /> into which to copy the attribute columns. </param>
      <exception cref="T:System.Data.OracleClient.OracleException">The value is too large to be stored in the .NET Decimal.</exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataReader.HasRows">
      <summary>Gets a value indicating whether the <see cref="T:System.Data.OracleClient.OracleDataReader" /> contains one or more rows.</summary>
      <returns>true if the <see cref="T:System.Data.OracleClient.OracleDataReader" /> contains one or more rows; otherwise false.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataReader.IsClosed">
      <summary>Indicates whether the <see cref="T:System.Data.OracleClient.OracleDataReader" /> is closed.</summary>
      <returns>true if the <see cref="T:System.Data.OracleClient.OracleDataReader" /> is closed; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.IsDBNull(System.Int32)">
      <summary>Gets a value indicating whether the column contains non-existent or missing values.</summary>
      <returns>true if the specified column value is equivalent to <see cref="T:System.DBNull" />; otherwise, false.</returns>
      <param name="i">The zero-based column ordinal. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataReader.Item(System.Int32)">
      <summary>Gets the value of the specified column in its native format given the column ordinal.</summary>
      <returns>The value of the specified column in its native format.</returns>
      <param name="i">The column ordinal. </param>
      <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount" />. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataReader.Item(System.String)">
      <summary>Gets the value of the specified column in its native format given the column name.</summary>
      <returns>The value of the specified column in its native format.</returns>
      <param name="name">The column name.</param>
      <exception cref="T:System.IndexOutOfRangeException">No column with the specified name was found. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.NextResult">
      <summary>Advances the <see cref="T:System.Data.OracleClient.OracleDataReader" /> to the next result </summary>
      <returns>true if there are more result sets; otherwise, false.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleDataReader.Read">
      <summary>Advances the <see cref="T:System.Data.OracleClient.OracleDataReader" /> to the next record.</summary>
      <returns>true if there are more rows; otherwise, false.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDataReader.RecordsAffected">
      <summary>Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.</summary>
      <returns>The number of rows changed, inserted, or deleted. -1 for SELECT statements; 0 if no rows were affected, or the statement failed.</returns>
    </member>
    <member name="T:System.Data.OracleClient.OracleDateTime">
      <summary>Represents date and time data ranging in value from January 1, 4712 BC to December 31, 4712 AD.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.#ctor(System.Data.OracleClient.OracleDateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure from an existing <see cref="T:System.Data.OracleClient.OracleDateTime" /> object.</summary>
      <param name="from">An existing <see cref="T:System.Data.OracleClient.OracleDateTime" /> object from which to copy. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.#ctor(System.DateTime)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure with the specified <see cref="T:System.DateTime" />.</summary>
      <param name="dt">The specified <see cref="T:System.DateTime" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure using the supplied parameters to initialize the year, month, and day of the new structure.</summary>
      <param name="year">An integer value representing the year of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="month">An integer value representing the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="day">An integer value representing the day of the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure using the supplied parameters to initialize the year, month, day, and calendar of the new structure.</summary>
      <param name="year">An integer value representing the year of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="month">An integer value representing the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="day">An integer value representing the day of the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="calendar">The <see cref="T:System.Globalization.Calendar" /> for this instance of <see cref="T:System.Data.OracleClient.OracleDateTime" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure using the supplied parameters to initialize the year, month, day, hour, minute, and second of the new structure.</summary>
      <param name="year">An integer value representing the year of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="month">An integer value representing the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="day">An integer value representing the day of the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="hour">An integer value representing the hour of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="minute">An integer value representing the minute of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="second">An integer value representing the second of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure using the supplied parameters to initialize the year, month, day, hour, minute, and second for the specified calendar of the new structure.</summary>
      <param name="year">An integer value representing the year of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="month">An integer value representing the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="day">An integer value representing the day of the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="hour">An integer value representing the hour of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="minute">An integer value representing the minute of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="second">An integer value representing the second of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="calendar">The <see cref="T:System.Globalization.Calendar" /> for this instance of <see cref="T:System.Data.OracleClient.OracleDateTime" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure using the supplied parameters to initialize the year, month, day, hour, minute, second, and millisecond of the new structure.</summary>
      <param name="year">An integer value representing the year of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="month">An integer value representing the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="day">An integer value representing the day of the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="hour">An integer value representing the hour of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="minute">An integer value representing the minute of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="second">An integer value representing the second of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="millisecond">An integer value representing the millisecond of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Globalization.Calendar)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure using the supplied parameters to initialize the year, month, day, hour, minute, second, and millisecond for the specified calendar of the new structure.</summary>
      <param name="year">An integer value representing the year of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="month">An integer value representing the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="day">An integer value representing the day of the month of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="hour">An integer value representing the hour of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="minute">An integer value representing the minute of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="second">An integer value representing the second of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="millisecond">An integer value representing the millisecond of the new <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="calendar">The <see cref="T:System.Globalization.Calendar" /> for this instance of <see cref="T:System.Data.OracleClient.OracleDateTime" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure using the supplied number of ticks.</summary>
      <param name="ticks">A time period expressed in 100-nanosecond units. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.CompareTo(System.Object)">
      <summary>Compares this <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure to the supplied object and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relative values of the instance and the object.Return value Condition Less than zero This structure is less than the object. Zero This structure is the same as the object. Greater than zero This structure is greater than the object, object is a null reference (Nothing in Visual Basic) </returns>
      <param name="obj">The object to be compared. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleDateTime.Day">
      <summary>Gets the value of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure as a day.</summary>
      <returns>A day value between 1 and 31.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.Equals(System.Data.OracleClient.OracleDateTime,System.Data.OracleClient.OracleDateTime)">
      <summary>Performs a logical comparison of two <see cref="T:System.Data.OracleClient.OracleDateTime" /> structures to determine whether they are equal.</summary>
      <returns>true if the two values are equal, otherwise false.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.Equals(System.Object)">
      <summary>Compares the supplied object parameter to the <see cref="P:System.Data.OracleClient.OracleDateTime.Value" /> property of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> object.</summary>
      <returns>true if object is an instance of <see cref="T:System.Data.OracleClient.OracleDateTime" /> and the two are equal, otherwise false.</returns>
      <param name="value">The object to be compared. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.GreaterThan(System.Data.OracleClient.OracleDateTime,System.Data.OracleClient.OracleDateTime)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleDateTime" /> to determine whether the first is greater than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleDateTime" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.GreaterThanOrEqual(System.Data.OracleClient.OracleDateTime,System.Data.OracleClient.OracleDateTime)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleDateTime" /> to determine whether the first is greater than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleDateTime" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleDateTime.Hour">
      <summary>Gets the value of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure as an hour.</summary>
      <returns>An hour between 0 and 23.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDateTime.IsNull">
      <summary>Gets a value indicating whether the <see cref="P:System.Data.OracleClient.OracleDateTime.Value" /> property of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure is null.</summary>
      <returns>true if <see cref="P:System.Data.OracleClient.OracleDateTime.Value" /> is null, otherwise false.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.LessThan(System.Data.OracleClient.OracleDateTime,System.Data.OracleClient.OracleDateTime)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleDateTime" /> to determine whether the first is less than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleDateTime" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.LessThanOrEqual(System.Data.OracleClient.OracleDateTime,System.Data.OracleClient.OracleDateTime)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleDateTime" /> to determine whether the first is less than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleDateTime" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleDateTime.MaxValue">
      <summary>Represents the maximum valid date value for an <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleDateTime.Millisecond">
      <summary>Gets the milliseconds component of the date represented by this instance.</summary>
      <returns>The millisecond, between 0 and 999.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDateTime.Minute">
      <summary>Gets the value of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure as a minute.</summary>
      <returns>The minute, between 0 and 59.</returns>
    </member>
    <member name="F:System.Data.OracleClient.OracleDateTime.MinValue">
      <summary>Represents the minimum valid date value for an <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleDateTime.Month">
      <summary>Gets the value of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure as a month.</summary>
      <returns>The month, between 1 and 12.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.NotEquals(System.Data.OracleClient.OracleDateTime,System.Data.OracleClient.OracleDateTime)">
      <summary>Performs a logical comparison of two instances of <see cref="T:System.Data.OracleClient.OracleDateTime" /> to determine if they are not equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are not equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are equal. If either instance of <see cref="T:System.Data.OracleClient.OracleDateTime" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleDateTime.Null">
      <summary>Represents a null value that can be assigned to the <see cref="P:System.Data.OracleClient.OracleDateTime.Value" /> property of an instance of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.op_Equality(System.Data.OracleClient.OracleDateTime,System.Data.OracleClient.OracleDateTime)">
      <summary>Performs a logical comparison of two <see cref="T:System.Data.OracleClient.OracleDateTime" /> structures to determine if they are equal.</summary>
      <returns>true if the two values are equal, otherwise false.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.op_Explicit(System.Data.OracleClient.OracleDateTime)~System.DateTime">
      <summary>Converts an <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure to a <see cref="T:System.DateTime" /> structure.</summary>
      <returns>A <see cref="T:System.DateTime" /> structure whose <see cref="P:System.DateTime.Date" /> and <see cref="P:System.DateTime.TimeOfDay" /> properties contain the same date and time values as the <see cref="P:System.Data.OracleClient.OracleDateTime.Value" /> property of the supplied <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.op_Explicit(System.String)~System.Data.OracleClient.OracleDateTime">
      <summary>Converts a String to an <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure whose <see cref="P:System.Data.OracleClient.OracleDateTime.Value" /> is equal to the values contained in the String.</returns>
      <param name="x">A String to be converted to an <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.op_GreaterThan(System.Data.OracleClient.OracleDateTime,System.Data.OracleClient.OracleDateTime)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleDateTime" /> to determine if the first is greater than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleDateTime" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.op_GreaterThanOrEqual(System.Data.OracleClient.OracleDateTime,System.Data.OracleClient.OracleDateTime)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleDateTime" /> to determine if the first is greater than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleDateTime" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.op_Inequality(System.Data.OracleClient.OracleDateTime,System.Data.OracleClient.OracleDateTime)">
      <summary>Performs a logical comparison of two instances of <see cref="T:System.Data.OracleClient.OracleDateTime" /> to determine if they are equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are not equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are equal. If either instance of <see cref="T:System.Data.OracleClient.OracleDateTime" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.op_LessThan(System.Data.OracleClient.OracleDateTime,System.Data.OracleClient.OracleDateTime)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleDateTime" /> to determine if the first is less than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleDateTime" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.op_LessThanOrEqual(System.Data.OracleClient.OracleDateTime,System.Data.OracleClient.OracleDateTime)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleDateTime" /> to determine if the first is less than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleDateTime" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.Parse(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a date and time to its <see cref="T:System.Data.OracleClient.OracleDateTime" /> equivalent.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure equal to the date and time represented by the specified String.</returns>
      <param name="s">The String to be parsed. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleDateTime.Second">
      <summary>Gets the value of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure as a second.</summary>
      <returns>A second between 0 and 59.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleDateTime.ToString">
      <summary>Converts this <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure to a <see cref="T:System.String" />.</summary>
      <returns>A String representing the <see cref="P:System.Data.OracleClient.OracleDateTime.Value" /> property of this <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDateTime.Value">
      <summary>Gets the value of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure.</summary>
      <returns>The value of this <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleDateTime.Year">
      <summary>Gets the value of the <see cref="T:System.Data.OracleClient.OracleDateTime" /> structure as a year.</summary>
      <returns>A year between 1 and 4712.</returns>
    </member>
    <member name="T:System.Data.OracleClient.OracleException">
      <summary>The exception that is generated when a warning or error is returned by an Oracle database or the .NET Framework Data Provider for Oracle. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleException.Code">
      <summary>Gets the code portion of the error as an integer.</summary>
      <returns>The code portion of the error as an integer.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.</summary>
      <param name="si">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown. </param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
    </member>
    <member name="T:System.Data.OracleClient.OracleInfoMessageEventArgs">
      <summary>Provides data for the <see cref="E:System.Data.OracleClient.OracleConnection.InfoMessage" /> event. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleInfoMessageEventArgs.Code">
      <summary>Gets the code portion of the message as an int.</summary>
      <returns>The code portion of the message as an int.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleInfoMessageEventArgs.Message">
      <summary>Gets the full text of the message sent from the database.</summary>
      <returns>The text describing the message.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleInfoMessageEventArgs.Source">
      <summary>Gets the name of the object that generated the error.</summary>
      <returns>The name of the object that generated the error.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleInfoMessageEventArgs.ToString">
      <summary>Retrieves a string representation of the <see cref="E:System.Data.OracleClient.OracleConnection.InfoMessage" /> event.</summary>
      <returns>A string representing the <see cref="E:System.Data.OracleClient.OracleConnection.InfoMessage" /> event.</returns>
    </member>
    <member name="T:System.Data.OracleClient.OracleInfoMessageEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Data.OracleClient.OracleConnection.InfoMessage" /> event of an <see cref="T:System.Data.OracleClient.OracleConnection" />.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">An <see cref="T:System.Data.OracleClient.OracleInfoMessageEventArgs" /> object that contains the event data. </param>
    </member>
    <member name="T:System.Data.OracleClient.OracleLob">
      <summary>Represents a large object binary (LOB) data type stored on an Oracle server. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleLob.Append(System.Data.OracleClient.OracleLob)">
      <summary>Appends data from the specified LOB to the current LOB.</summary>
      <param name="source">The LOB from which to append data. </param>
      <exception cref="T:System.ArgumentNullException">The source <see cref="T:System.Data.OracleClient.OracleLob" /> is null. </exception>
      <exception cref="T:System.InvalidOperationException">The source <see cref="T:System.Data.OracleClient.OracleLob" /> is null, or the connection is closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The source <see cref="T:System.Data.OracleClient.OracleLob" /> object was closed or disposed. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">An Oracle error has occurred. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleLob.BeginBatch">
      <summary>Prevents server-side triggers from firing while performing multiple read operations.</summary>
      <exception cref="T:System.InvalidOperationException">The connection is closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The object was closed or disposed. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">An Oracle error has occurred. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)">
      <summary>Prevents server-side triggers from firing while performing multiple read and write operations in the specified access mode.</summary>
      <param name="mode">Mode (one of the <see cref="T:System.Data.OracleClient.OracleLobOpenMode" /> values) in which the LOB can be accessed between this <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch(System.Data.OracleClient.OracleLobOpenMode)" /> call and the corresponding <see cref="M:System.Data.OracleClient.OracleLob.EndBatch" /> call. </param>
      <exception cref="T:System.InvalidOperationException">The connection is closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The object was closed or disposed. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">An Oracle error has occurred. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleLob.CanRead">
      <summary>Gets a value indicating whether the LOB stream can be read.</summary>
      <returns>true if the LOB stream supports reading, otherwise false if a LOB is closed or disposed.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleLob.CanSeek">
      <summary>Gets a value indicating whether forward and backward seek operations can be performed.</summary>
      <returns>false if a LOB is closed or disposed, otherwise true. Always true for <see cref="F:System.Data.OracleClient.OracleLob.Null" />.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleLob.CanWrite">
      <summary>Always returns true, regardless of whether the LOB supports writing or not.</summary>
      <returns>Always returns true, regardless of whether an opened or undisposed LOB supports writing or not, false if a LOB is closed or disposed.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleLob.ChunkSize">
      <summary>Gets a value indicating the minimum number of bytes to retrieve from or send to the server during a read/write operation.</summary>
      <returns>The minimum number of bytes to retrieve or send.</returns>
      <exception cref="T:System.InvalidOperationException">The connection is closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The object was closed or disposed. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">An Oracle error has occurred. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleLob.Clone">
      <summary>Creates a new <see cref="T:System.Data.OracleClient.OracleLob" /> object that references the same Oracle LOB as the original <see cref="T:System.Data.OracleClient.OracleLob" /> object.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleLob" /> object that references the same Oracle LOB as the original <see cref="T:System.Data.OracleClient.OracleLob" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The connection is closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The object was closed or disposed. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleLob.Connection">
      <summary>Gets the <see cref="T:System.Data.OracleClient.OracleConnection" /> used by this instance of the <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
      <returns>The connection to a data source.</returns>
      <exception cref="T:System.ObjectDisposedException">The object was closed or disposed. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob)">
      <summary>Copies from this <see cref="T:System.Data.OracleClient.OracleLob" /> to a destination <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
      <returns>The number of bytes copied. This excludes any padded bytes.</returns>
      <param name="destination">The destination <see cref="T:System.Data.OracleClient.OracleLob" />. </param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Data.OracleClient.OracleLob" /> specified in the <paramref name="destination" /> parameter is null. </exception>
      <exception cref="T:System.InvalidOperationException">The operation is not within a transaction, the <see cref="T:System.Data.OracleClient.OracleLob" /> object is null, or the connection is closed. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">An Oracle error has occurred. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleLob.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)">
      <summary>Copies from this <see cref="T:System.Data.OracleClient.OracleLob" /> to a destination <see cref="T:System.Data.OracleClient.OracleLob" /> with the specified amount of data.</summary>
      <returns>The number of bytes copied. This excludes any padded bytes.</returns>
      <param name="destination">The destination <see cref="T:System.Data.OracleClient.OracleLob" /></param>
      <param name="destinationOffset">The offset to which to copy. For CLOB and NCLOB data types, this must be an even number of bytes. </param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Data.OracleClient.OracleLob" /> specified in the <paramref name="destination" /> parameter is full. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A value specified in the <paramref name="destinationOffset" /> parameter is less than zero or greater than 4 gigabytes.-or- A value specified in the <paramref name="destinationOffset" /> parameter for a CLOB or NCLOB data type is not even. -or- You must specify CLOB and NCLOB data types as an even number of bytes. </exception>
      <exception cref="T:System.InvalidOperationException">The operation is not within a transaction, the <see cref="T:System.Data.OracleClient.OracleLob" /> object is null, or the connection is closed. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">An Oracle error has occurred. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleLob.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)">
      <summary>Copies from this <see cref="T:System.Data.OracleClient.OracleLob" /> to a destination <see cref="T:System.Data.OracleClient.OracleLob" /> with the specified amount of data, and the source offset.</summary>
      <returns>The number of bytes copied. This excludes any padded bytes.</returns>
      <param name="sourceOffset">The offset from which to copy. For CLOB and NCLOB data types, this must be an even number. </param>
      <param name="destination">The destination OracleLob<see cref="N:System.Data.OracleClient" />. </param>
      <param name="destinationOffset">The destination offset to which to copy. For CLOB and NCLOB data types, this must be an even number. </param>
      <param name="amount">The quantity of data, in bytes, to copy. For CLOB and NCLOB data types, this must be an even number. </param>
      <exception cref="T:System.ArgumentNullException">The <see cref="T:System.Data.OracleClient.OracleLob" /> specified in the <paramref name="destination" /> parameter is full. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A value specified in the <paramref name="amount" />, <paramref name="sourceOffset" />, or <paramref name="destinationOffset" /> parameter is less than zero or greater than 4 gigabytes.-or- A value specified in the <paramref name="amount" />, <paramref name="sourceOffset" />, or <paramref name="destinationOffset" /> parameter for a CLOB or NCLOB data type is not even. </exception>
      <exception cref="T:System.InvalidOperationException">The operation is not within a transaction, the <see cref="T:System.Data.OracleClient.OracleLob" /> object is null, or the connection is closed. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">An Oracle error has occurred. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleLob.EndBatch">
      <summary>Allows server-side triggers to resume firing after performing multiple write operations.</summary>
      <exception cref="T:System.InvalidOperationException">The connection is closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The object was closed or disposed. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">An Oracle error has occurred. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleLob.Erase">
      <summary>Erases all data from this <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
      <returns>The number of bytes erased.</returns>
      <exception cref="T:System.InvalidOperationException">The operation is not within a transaction, the <see cref="T:System.Data.OracleClient.OracleLob" /> object is null, or the connection is closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The object was closed or disposed. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">An Oracle error has occurred. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleLob.Erase(System.Int64,System.Int64)">
      <summary>Erases the specified amount of data from this <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
      <returns>The number of bytes erased.</returns>
      <param name="offset">The offset from which to erase. For CLOB and NCLOB data types, this must be an even number. </param>
      <param name="amount">The quantity of data, in bytes, to erase. For CLOB and NCLOB data types, this must be an even number. </param>
      <exception cref="T:System.InvalidOperationException">The operation is not within a transaction, the <see cref="T:System.Data.OracleClient.OracleLob" /> object is null, or the connection is closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The object was closed or disposed. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">An Oracle error has occurred. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleLob.Flush">
      <summary>Not currently supported.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleLob.IsBatched">
      <summary>Gets a value indicating whether an application called the <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch" /> method.</summary>
      <returns>true if application called the <see cref="M:System.Data.OracleClient.OracleLob.BeginBatch" /> method, otherwise false.</returns>
      <exception cref="T:System.Data.OracleClient.OracleException">An Oracle error has occurred. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleLob.IsNull">
      <summary>Gets a value that indicates whether the <see cref="T:System.Data.OracleClient.OracleLob" /> is a <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> stream.</summary>
      <returns>true if the <see cref="T:System.Data.OracleClient.OracleLob" /> is a <see cref="F:System.Data.OracleClient.OracleBFile.Null" /> stream, otherwise false.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleLob.IsTemporary">
      <summary>Gets a value indicating whether the <see cref="T:System.Data.OracleClient.OracleLob" /> is a temporary LOB.</summary>
      <returns>true if the <see cref="T:System.Data.OracleClient.OracleLob" /> is a temporary LOB, otherwise false.</returns>
      <exception cref="T:System.InvalidOperationException">The connection is closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The object was closed or disposed. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">An Oracle error has occurred. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleLob.Length">
      <summary>Gets a value that returns the size of the <see cref="T:System.Data.OracleClient.OracleLob" />.</summary>
      <returns>The size of the <see cref="T:System.Data.OracleClient.OracleLob" /> in bytes.</returns>
      <exception cref="T:System.InvalidOperationException">The connection is closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The object was closed or disposed. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">An Oracle error has occurred. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleLob.LobType">
      <summary>Gets a value that returns the LOB data type.</summary>
      <returns>One of the <see cref="T:System.Data.OracleClient.OracleType" />LOB data types.</returns>
    </member>
    <member name="F:System.Data.OracleClient.OracleLob.Null">
      <summary>Represents a null <see cref="T:System.Data.OracleClient.OracleLob" /> object.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleLob.Position">
      <summary>Gets the current read position in the <see cref="T:System.Data.OracleClient.OracleLob" /> stream.</summary>
      <returns>The current position within the <see cref="T:System.Data.OracleClient.OracleLob" /> stream.</returns>
      <exception cref="T:System.InvalidOperationException">The connection is closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The object was closed or disposed. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleLob.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a sequence of bytes from the current <see cref="T:System.Data.OracleClient.OracleLob" /> stream and advances the position within the stream by the number of bytes read.</summary>
      <returns>The total number of bytes read into the buffer. This may be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
      <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" />) replaced by the bytes read from the current source. </param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin storing the data read from the current stream. For CLOB and NCLOB data types, this must be an even number. </param>
      <param name="count">The maximum number of bytes to be read from the current stream. For CLOB and NCLOB data types, this must be an even number. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> is a null reference (Nothing in Visual Basic). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A value in the <paramref name="offset" /> or <paramref name="count" /> parameter is not positive.-or- The sum of the offset and count parameters is larger than the buffer length.-or- A value specified in the <paramref name="amount" /> or <paramref name="offset" /> parameter is less than zero or greater than 4 gigabytes. </exception>
      <exception cref="T:System.InvalidOperationException">The operation is not within a transaction, the <see cref="T:System.Data.OracleClient.OracleLob" /> object is null, or the connection is closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The object was closed or disposed. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">An Oracle error has occurred. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleLob.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the position on the current <see cref="T:System.Data.OracleClient.OracleLob" /> stream.</summary>
      <returns>The new position within the current stream.</returns>
      <param name="offset">A byte offset relative to origin. If <paramref name="offset" /> is negative, the new position precedes the position specified by <paramref name="origin" /> by the number of bytes specified by <paramref name="offset" />. If <paramref name="offset" /> is zero, the new position is the position specified by <paramref name="origin" />. If <paramref name="offset" /> is positive, the new position follows the position specified by <paramref name="origin" /> by the number of bytes specified by <paramref name="offset" />. </param>
      <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin" /> indicating the reference point used to obtain the new position. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="origin" /> parameter does not contain a valid value. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The resulting position is beyond the length of the value. </exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Data.OracleClient.OracleLob" /> object was closed or disposed. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">An Oracle error has occurred. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleLob.SetLength(System.Int64)">
      <summary>Sets the length of the <see cref="T:System.Data.OracleClient.OracleLob" /> stream to a value less than the current length.</summary>
      <param name="value">The desired length of the current <see cref="T:System.Data.OracleClient.OracleLob" /> stream in bytes. For CLOB and NCLOB data types, this must be an even number. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">A value specified in the <paramref name="value" /> parameter for a CLOB or NCLOB data type is not even.-or- A value specified in the <paramref name="value" /> parameter is less than zero or greater than 4 gigabytes. </exception>
      <exception cref="T:System.InvalidOperationException">The operation is not within a transaction, the <see cref="T:System.Data.OracleClient.OracleLob" /> object is null, or the connection is closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The object was closed or disposed. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">An Oracle error has occurred. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleLob.Value">
      <summary>Gets the common language runtime stream value equivalent of the underlying value.</summary>
      <returns>For <see cref="F:System.Data.OracleClient.OracleType.Blob" />, an array of type Byte[]. For <see cref="F:System.Data.OracleClient.OracleType.Clob" /> and <see cref="F:System.Data.OracleClient.OracleType.NClob" />, a String. For null data, <see cref="T:System.DBNull" />.</returns>
      <exception cref="T:System.ObjectDisposedException">The object was closed or disposed. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">An Oracle error has occurred. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleLob.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a sequence of bytes to the current <see cref="T:System.Data.OracleClient.OracleLob" /> stream, and advances the current position within this stream by the number of bytes written.</summary>
      <param name="buffer">An array of bytes. This method copies the number of bytes specified in <paramref name="count" /> from <paramref name="buffer" /> to the current stream. </param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream. For CLOB and NCLOB data types, this must be an even number. </param>
      <param name="count">The number of bytes to be written to the current stream. For CLOB and NCLOB data types, this must be an even number. </param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="buffer" /> parameter is a null reference (Nothing in Visual Basic). </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A value in the <paramref name="offset" /> or <paramref name="count" /> parameter is not positive.-or- The sum of the <paramref name="offset" /> and <paramref name="count" /> parameters is larger than the <paramref name="buffer" /> length.-or- A value specified in the <paramref name="count" /> or <paramref name="offset" /> parameter is less than zero or greater than 4 gigabytes.-or- You must specify CLOB and NCLOB data types as an even number of bytes. </exception>
      <exception cref="T:System.InvalidOperationException">The operation is not within a transaction, the <see cref="T:System.Data.OracleClient.OracleLob" /> object is null, or the connection is closed. </exception>
      <exception cref="T:System.ObjectDisposedException">The object was closed or disposed. </exception>
      <exception cref="T:System.Data.OracleClient.OracleException">An Oracle error has occurred. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleLob.WriteByte(System.Byte)">
      <summary>Writes a byte to the current position in the <see cref="T:System.Data.OracleClient.OracleLob" /> stream, and advances the position within the stream by one byte.</summary>
      <param name="value">The byte to write to the stream. </param>
    </member>
    <member name="T:System.Data.OracleClient.OracleLobOpenMode">
      <summary>Specifies whether an <see cref="T:System.Data.OracleClient.OracleLob" /> should be opened in read-only or read/write mode.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleLobOpenMode.ReadOnly">
      <summary>The <see cref="T:System.Data.OracleClient.OracleLob" /> is opened in read-only mode.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleLobOpenMode.ReadWrite">
      <summary>The <see cref="T:System.Data.OracleClient.OracleLob" /> is opened in read/write mode.</summary>
    </member>
    <member name="T:System.Data.OracleClient.OracleMonthSpan">
      <summary>Represents a time interval in months and corresponds to the Oracle 9i INTERVAL YEAR TO MONTH data type.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.#ctor(System.Data.OracleClient.OracleMonthSpan)">
      <summary>Initializes a new <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure from an existing one.</summary>
      <param name="from">An existing <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure from which to create the new structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.#ctor(System.Int32)">
      <summary>Initializes a new <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure to the specified number of months.</summary>
      <param name="months">Number of months. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure to a specified number years and months.</summary>
      <param name="years">Number of years. </param>
      <param name="months">Number of months. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify an <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> value less than <see cref="F:System.Data.OracleClient.OracleMonthSpan.MinValue" /> or greater than <see cref="F:System.Data.OracleClient.OracleMonthSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.CompareTo(System.Object)">
      <summary>Compares this <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure to the supplied object and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relative values of the instance and the object.Return Value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object -or- The object is a null reference (Nothing). </returns>
      <param name="obj">The object to be compared. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.Equals(System.Data.OracleClient.OracleMonthSpan,System.Data.OracleClient.OracleMonthSpan)">
      <summary>Performs a logical comparison of two <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structures to determine if they are equal.</summary>
      <returns>true if the two values are equal, otherwise false.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.Equals(System.Object)">
      <summary>Compares the supplied object parameter to the <see cref="P:System.Data.OracleClient.OracleMonthSpan.Value" /> property of the <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> object.</summary>
      <returns>true if object is an instance of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> and the two are equal; otherwise false.</returns>
      <param name="value">The object to be compared. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.GreaterThan(System.Data.OracleClient.OracleMonthSpan,System.Data.OracleClient.OracleMonthSpan)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> to determine if the first is greater than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.GreaterThanOrEqual(System.Data.OracleClient.OracleMonthSpan,System.Data.OracleClient.OracleMonthSpan)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> to determine if the first is greater than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleMonthSpan.IsNull">
      <summary>Gets a value indicating whether the <see cref="P:System.Data.OracleClient.OracleMonthSpan.Value" /> property of the <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure is null.</summary>
      <returns>true if <see cref="P:System.Data.OracleClient.OracleMonthSpan.Value" /> is null, otherwise false.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.LessThan(System.Data.OracleClient.OracleMonthSpan,System.Data.OracleClient.OracleMonthSpan)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> to determine if the first is less than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.LessThanOrEqual(System.Data.OracleClient.OracleMonthSpan,System.Data.OracleClient.OracleMonthSpan)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> to determine if the first is less than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleMonthSpan.MaxValue">
      <summary>Represents the maximum valid date value for an <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleMonthSpan.MinValue">
      <summary>Represents the minimum valid date value for an <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.NotEquals(System.Data.OracleClient.OracleMonthSpan,System.Data.OracleClient.OracleMonthSpan)">
      <summary>Performs a logical comparison of two instances of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> to determine if they are not equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are not equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are equal. If either instance of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleMonthSpan.Null">
      <summary>Represents a null value that can be assigned to the <see cref="P:System.Data.OracleClient.OracleMonthSpan.Value" /> property of an instance of the <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.op_Equality(System.Data.OracleClient.OracleMonthSpan,System.Data.OracleClient.OracleMonthSpan)">
      <summary>Performs a logical comparison of two <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structures to determine if they are equal.</summary>
      <returns>true if the two values are equal, otherwise false.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.op_Explicit(System.Data.OracleClient.OracleMonthSpan)~System.Int32">
      <summary>Converts an <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure to an Int32.</summary>
      <returns>An Int32.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure to convert to an Int32. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.op_Explicit(System.String)~System.Data.OracleClient.OracleMonthSpan">
      <summary>Converts a string to an <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure.</returns>
      <param name="x">A string to convert to an <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.op_GreaterThan(System.Data.OracleClient.OracleMonthSpan,System.Data.OracleClient.OracleMonthSpan)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> to determine if the first is greater than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.op_GreaterThanOrEqual(System.Data.OracleClient.OracleMonthSpan,System.Data.OracleClient.OracleMonthSpan)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> to determine if the first is greater than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.op_Inequality(System.Data.OracleClient.OracleMonthSpan,System.Data.OracleClient.OracleMonthSpan)">
      <summary>Performs a logical comparison of two instances of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> to determine if they are equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are not equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are equal. If either instance of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.op_LessThan(System.Data.OracleClient.OracleMonthSpan,System.Data.OracleClient.OracleMonthSpan)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> to determine if the first is less than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.op_LessThanOrEqual(System.Data.OracleClient.OracleMonthSpan,System.Data.OracleClient.OracleMonthSpan)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> to determine if the first is less than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.Parse(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a date and time to its <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> equivalent.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure equal to the date and time represented by the specified String.</returns>
      <param name="s">The String to be converted. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleMonthSpan.ToString">
      <summary>Converts this <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure to a <see cref="T:System.String" />.</summary>
      <returns>A String representing the <see cref="P:System.Data.OracleClient.OracleMonthSpan.Value" /> property of this <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleMonthSpan.Value">
      <summary>Gets the value of the <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure.</summary>
      <returns>The value of this <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> structure.</returns>
    </member>
    <member name="T:System.Data.OracleClient.OracleNumber">
      <summary>Represents a fixed precision and scale numeric value between -10 27 -1 and 10 27 -1 to be stored in or retrieved from a database. </summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.#ctor(System.Data.OracleClient.OracleNumber)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleNumber" /> structure using the supplied <see cref="T:System.Data.OracleClient.OracleNumber" />.</summary>
      <param name="from">The supplied <see cref="T:System.Data.OracleClient.OracleNumber" /> that will be used as the value of the new <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.#ctor(System.Decimal)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleNumber" /> structure using the supplied <see cref="T:System.Decimal" /> value.</summary>
      <param name="decValue">The <see cref="T:System.Decimal" /> value to be stored as an <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.#ctor(System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleNumber" /> using the supplied double precision value.</summary>
      <param name="dblValue">The supplied double precision value that will the used as the value of the new <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleNumber" /> structure using the supplied integer value.</summary>
      <param name="intValue">The supplied integer value that will be used as the value of the new <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.#ctor(System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleNumber" /> structure using the supplied long integer value.</summary>
      <param name="longValue">The supplied long integer value that will be used as the value of the new <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Abs(System.Data.OracleClient.OracleNumber)">
      <summary>Gets the absolute value of the <see cref="T:System.Data.OracleClient.OracleNumber" /> parameter.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure whose <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> property contains the unsigned number representing the absolute value of the <see cref="T:System.Data.OracleClient.OracleNumber" /> parameter.</returns>
      <param name="n">An OracleNumber structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Acos(System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the inverse hyperbolic cosine of an <see cref="T:System.Data.OracleClient.OracleNumber" />.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="n">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Add(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the sum of the two <see cref="T:System.Data.OracleClient.OracleNumber" /> structures.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleNumber" /> structure whose <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> property contains the sum.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Asin(System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the inverse hyperbolic sine of an <see cref="T:System.Data.OracleClient.OracleNumber" />.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="n">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Atan(System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the inverse hyperbolic tangent of an <see cref="T:System.Data.OracleClient.OracleNumber" />.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="n">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Atan2(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the inverse hyperbolic tangent of two <see cref="T:System.Data.OracleClient.OracleNumber" /> structures.</summary>
      <returns>An angle, measured in radians.</returns>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Ceiling(System.Data.OracleClient.OracleNumber)">
      <summary>Returns the smallest whole number greater than or equal to the specified <see cref="T:System.Data.OracleClient.OracleNumber" /> structure.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleNumber" /> representing the smallest whole number greater than or equal to the specified <see cref="T:System.Data.OracleClient.OracleNumber" /> structure.</returns>
      <param name="n">The <see cref="T:System.Data.OracleClient.OracleNumber" /> structure for which the ceiling value is to be calculated. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.CompareTo(System.Object)">
      <summary>Compares this instance of the <see cref="T:System.Data.OracleClient.OracleNumber" /> structure to the supplied object and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relative values of the instance and the object.Return Value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object, or the object is a null reference (Nothing in Visual Basic) </returns>
      <param name="obj">The object to be compared. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Cos(System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the cosine of an <see cref="T:System.Data.OracleClient.OracleNumber" />.</summary>
      <returns>The cosine of <paramref name="n" />.</returns>
      <param name="n">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Cosh(System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the hyperbolic cosine of an <see cref="T:System.Data.OracleClient.OracleNumber" />.</summary>
      <returns>The hyperbolic cosine of <paramref name="n" />.</returns>
      <param name="n">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Divide(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the results of dividing the first <see cref="T:System.Data.OracleClient.OracleNumber" /> structure by the second.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleNumber" /> structure whose <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> property contains the results of the division.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleNumber.E">
      <summary>Returns the value e-2.718.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Equals(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Performs a logical comparison of the two <see cref="T:System.Data.OracleClient.OracleNumber" /> structures to determine if they are equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are not equal. If either instance of <see cref="T:System.Data.OracleClient.OracleNumber" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Equals(System.Object)">
      <summary>Compares the supplied object parameter to the <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> property of the <see cref="T:System.Data.OracleClient.OracleNumber" /> object.</summary>
      <returns>true if the object is an instance of <see cref="T:System.Data.OracleClient.OracleNumber" /> and the two are equal, otherwise false.</returns>
      <param name="value">The object to be compared. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Exp(System.Data.OracleClient.OracleNumber)">
      <summary>Calculates e raised to the power of an <see cref="T:System.Data.OracleClient.OracleNumber" />. The constant e equals 2.71828182845904, the base of the natural logarithm.</summary>
      <returns>A number raised to the power of <paramref name="p" />.</returns>
      <param name="p">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Floor(System.Data.OracleClient.OracleNumber)">
      <summary>Rounds a specified <see cref="T:System.Data.OracleClient.OracleNumber" /> number to the next lower whole number.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure containing the whole number portion of this <see cref="T:System.Data.OracleClient.OracleNumber" /> structure.</returns>
      <param name="n">The <see cref="T:System.Data.OracleClient.OracleNumber" /> structure for which the floor value is to be calculated. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.GetHashCode">
      <summary>Returns the hash code for this instance of the <see cref="T:System.Data.OracleClient.OracleNumber" /> structure.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.GreaterThan(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Performs a logical comparison of two <see cref="T:System.Data.OracleClient.OracleNumber" /> structures to determine whether the first is greater than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleNumber" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.GreaterThanOrEqual(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Performs a logical comparison of the two <see cref="T:System.Data.OracleClient.OracleNumber" /> parameters to determine whether the first is greater than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleNumber" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleNumber.IsNull">
      <summary>Indicates whether or not the <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> of this <see cref="T:System.Data.OracleClient.OracleNumber" /> structure is null.</summary>
      <returns>true if <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> is null, otherwise false.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.LessThan(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Performs a logical comparison of two <see cref="T:System.Data.OracleClient.OracleNumber" /> structures to determine whether the first is less than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleNumber" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.LessThanOrEqual(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Performs a logical comparison of the two <see cref="T:System.Data.OracleClient.OracleNumber" /> parameters to determine whether the first is less than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleNumber" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Log(System.Data.OracleClient.OracleNumber)">
      <summary>Calculates natural logarithm of an <see cref="T:System.Data.OracleClient.OracleNumber" />. Natural logarithms are based on the constant e (2.71828182845904).</summary>
      <returns>The natural logarithm of <paramref name="n" />.</returns>
      <param name="n">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Log(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Calculates an <see cref="T:System.Data.OracleClient.OracleNumber" /> to the base you specify.</summary>
      <returns>The logarithm of a specified number in a specified base.</returns>
      <param name="n">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="newBase">A user-specified <see cref="T:System.Data.OracleClient.OracleNumber" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Log(System.Data.OracleClient.OracleNumber,System.Int32)">
      <summary>Calculates an <see cref="T:System.Data.OracleClient.OracleNumber" /> to the base you specify.</summary>
      <returns>The logarithm of a specified number in a specified base.</returns>
      <param name="n">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="newBase">User-specified integer. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Log10(System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the base 10 logarithm of a number.</summary>
      <returns>The base 10 logarithm of the specified number.</returns>
      <param name="n">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Max(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Returns the larger of the two <see cref="T:System.Data.OracleClient.OracleNumber" /> parameter values.</summary>
      <returns>The larger of <paramref name="x" /> or <paramref name="y" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleNumber.MaxPrecision">
      <summary>A constant representing the largest possible value for precision comparison.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleNumber.MaxScale">
      <summary>A constant representing the maximum value for scale comparison.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleNumber.MaxValue">
      <summary>A constant representing the maximum value of an <see cref="T:System.Data.OracleClient.OracleNumber" /> structure.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Min(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Returns the smaller of the two <see cref="T:System.Data.OracleClient.OracleNumber" /> parameter values.</summary>
      <returns>The smaller of <paramref name="x" /> or <paramref name="y" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleNumber.MinScale">
      <summary>A constant representing the minimum value for scale comparison.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleNumber.MinusOne">
      <summary>Returns the value -1.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleNumber.MinValue">
      <summary>A constant representing the minimum value for an <see cref="T:System.Data.OracleClient.OracleNumber" /> structure.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Modulo(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the modulus from dividing the first <see cref="T:System.Data.OracleClient.OracleNumber" /> structure by the second.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleNumber" /> structure whose <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> property contains the modulus from the results of the division operation.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Multiply(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the product of the two <see cref="T:System.Data.OracleClient.OracleNumber" /> parameters.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleNumber" /> structure whose <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> property contains the product of the multiplication.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Negate(System.Data.OracleClient.OracleNumber)">
      <summary>Negates the value of the <see cref="T:System.Data.OracleClient.OracleNumber" /> parameter.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleNumber" /> with the negative value of x , or zero, if <paramref name="x" /> is zero.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.NotEquals(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Performs a logical comparison of the two <see cref="T:System.Data.OracleClient.OracleNumber" /> parameters to determine whether they are not equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are not equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are equal. If either instance of <see cref="T:System.Data.OracleClient.OracleNumber" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleNumber.Null">
      <summary>Represents a null value that can be assigned to the <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> property of an instance of the <see cref="T:System.Data.OracleClient.OracleNumber" /> class.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleNumber.One">
      <summary>Returns the value 1.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_Addition(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the sum of the two <see cref="T:System.Data.OracleClient.OracleNumber" /> structures.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleNumber" /> structure whose <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> property contains the sum.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_Division(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the results of dividing the first <see cref="T:System.Data.OracleClient.OracleNumber" /> structure by the second.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleNumber" /> structure whose <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> property contains the results of the division.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_Equality(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Performs a logical comparison of the two <see cref="T:System.Data.OracleClient.OracleNumber" /> structures to determine whether they are equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are not equal. If either instance of <see cref="T:System.Data.OracleClient.OracleNumber" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_Explicit(System.Data.OracleClient.OracleNumber)~System.Int32">
      <summary>Converts the <see cref="T:System.Data.OracleClient.OracleNumber" /> structure to <see cref="T:System.Int32" />.</summary>
      <returns>A new Int32 structure whose value equals the <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> of the <see cref="T:System.Data.OracleClient.OracleNumber" /> structure.</returns>
      <param name="x">The <see cref="T:System.Data.OracleClient.OracleNumber" /> structure to be converted. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_Explicit(System.Data.OracleClient.OracleNumber)~System.Int64">
      <summary>Converts the <see cref="T:System.Data.OracleClient.OracleNumber" /> structure to <see cref="T:System.Int64" />.</summary>
      <returns>A new Int64 structure whose value equals the <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> of the <see cref="T:System.Data.OracleClient.OracleNumber" /> structure.</returns>
      <param name="x">The <see cref="T:System.Data.OracleClient.OracleNumber" /> structure to be converted. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_Explicit(System.Data.OracleClient.OracleNumber)~System.Decimal">
      <summary>Converts the <see cref="T:System.Data.OracleClient.OracleNumber" /> structure to <see cref="T:System.Decimal" />.</summary>
      <returns>A new Decimal structure whose value equals the <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> of the <see cref="T:System.Data.OracleClient.OracleNumber" /> structure.</returns>
      <param name="x">The <see cref="T:System.Data.OracleClient.OracleNumber" /> structure to be converted. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_Explicit(System.Data.OracleClient.OracleNumber)~System.Double">
      <summary>Converts the <see cref="T:System.Data.OracleClient.OracleNumber" /> structure to <see cref="T:System.Double" />.</summary>
      <returns>A new Double structure whose value equals the <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> of the <see cref="T:System.Data.OracleClient.OracleNumber" /> structure.</returns>
      <param name="x">The <see cref="T:System.Data.OracleClient.OracleNumber" /> structure to be converted. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_Explicit(System.Decimal)~System.Data.OracleClient.OracleNumber">
      <summary>Converts the supplied Decimal structure to an <see cref="T:System.Data.OracleClient.OracleNumber" /> structure.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleNumber" /> structure whose <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> is equal to the value of the Decimal structure.</returns>
      <param name="x">The Decimal structure to be converted. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_Explicit(System.Double)~System.Data.OracleClient.OracleNumber">
      <summary>Converts the supplied Double structure to an <see cref="T:System.Data.OracleClient.OracleNumber" /> structure.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleNumber" /> structure whose <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> property equals the value of the Double structure.</returns>
      <param name="x">The Double structure to be converted. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_Explicit(System.Int32)~System.Data.OracleClient.OracleNumber">
      <summary>Converts the supplied Int32 structure to an <see cref="T:System.Data.OracleClient.OracleNumber" /> structure.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleNumber" /> structure whose <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> property equals the value of the Int32 structure.</returns>
      <param name="x">The integer structure to be converted. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_Explicit(System.Int64)~System.Data.OracleClient.OracleNumber">
      <summary>Converts the supplied Int64 structure to an <see cref="T:System.Data.OracleClient.OracleNumber" /> structure.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleNumber" /> structure whose <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> property is equal to the value of the Int64 structure.</returns>
      <param name="x">The Int64 structure to be converted. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_Explicit(System.String)~System.Data.OracleClient.OracleNumber">
      <summary>Converts the supplied String to an <see cref="T:System.Data.OracleClient.OracleNumber" /> structure.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleNumber" /> structure whose <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> equals the value of the String structure.</returns>
      <param name="x">The String to be converted. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_GreaterThan(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Performs a logical comparison of two <see cref="T:System.Data.OracleClient.OracleNumber" /> structures to determine whether the first is greater than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleNumber" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_GreaterThanOrEqual(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Performs a logical comparison of the two <see cref="T:System.Data.OracleClient.OracleNumber" /> parameters to determine whether the first is greater than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleNumber" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_Inequality(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Performs a logical comparison of the two <see cref="T:System.Data.OracleClient.OracleNumber" /> parameters to determine whether they are equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are not equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are equal. If either instance of <see cref="T:System.Data.OracleClient.OracleNumber" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_LessThan(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Performs a logical comparison of two <see cref="T:System.Data.OracleClient.OracleNumber" /> structures to determine whether the first is less than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleNumber" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_LessThanOrEqual(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Performs a logical comparison of the two <see cref="T:System.Data.OracleClient.OracleNumber" /> parameters to determine whether the first is less than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleNumber" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_Modulus(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the remainder left over from dividing an <see cref="T:System.Data.OracleClient.OracleNumber" /> structure by a second <see cref="T:System.Data.OracleClient.OracleNumber" /> structure.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleNumber" /> structure whose <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> property contains the modulus of the division.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_Multiply(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the product of two <see cref="T:System.Data.OracleClient.OracleNumber" /> structures.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleNumber" /> structure whose <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> property contains the product of the multiplication.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_Subtraction(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the result of subtracting the second <see cref="T:System.Data.OracleClient.OracleNumber" /> structure from the first.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleNumber" /> structure whose <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> property contains the results of the subtraction.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.op_UnaryNegation(System.Data.OracleClient.OracleNumber)">
      <summary>Negates the <see cref="T:System.Data.OracleClient.OracleNumber" /> structure.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleNumber" /> structure whose value contains the results of the negation.</returns>
      <param name="x">The <see cref="T:System.Data.OracleClient.OracleNumber" /> structure to be negated. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Parse(System.String)">
      <summary>Converts the <see cref="T:System.String" /> representation of a number to its <see cref="T:System.Data.OracleClient.OracleNumber" /> equivalent.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleNumber" /> equivalent to the value contained in the specified <see cref="T:System.String" />.</returns>
      <param name="s">The String to be parsed. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleNumber.PI">
      <summary>Returns the value of pi-3.1415926535897932384626433832795028842.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Pow(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the result of raising a specified <see cref="T:System.Data.OracleClient.OracleNumber" /> structure to the power specified by a second <see cref="T:System.Data.OracleClient.OracleNumber" /> structure.</summary>
      <returns>The number <paramref name="x" /> raised to the power <paramref name="y" />.</returns>
      <param name="x">The <see cref="T:System.Data.OracleClient.OracleNumber" /> to be raised to a power. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> that specifies a power. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Pow(System.Data.OracleClient.OracleNumber,System.Int32)">
      <summary>Calculates the result of raising a specified <see cref="T:System.Data.OracleClient.OracleNumber" /> structure to the power specified by an Int32 structure.</summary>
      <returns>The number <paramref name="x" /> raised to the power <paramref name="y" />.</returns>
      <param name="x">The <see cref="T:System.Data.OracleClient.OracleNumber" /> to be raised to a power. </param>
      <param name="y">An Int32 structure that specifies a power. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Round(System.Data.OracleClient.OracleNumber,System.Int32)">
      <summary>Gets the number nearest the specified <see cref="T:System.Data.OracleClient.OracleNumber" /> structure's value with the specified precision.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure containing the results of the rounding operation.</returns>
      <param name="n">The <see cref="T:System.Data.OracleClient.OracleNumber" /> structure to be rounded. </param>
      <param name="position">The number of significant fractional digits (precision) in the return value. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Shift(System.Data.OracleClient.OracleNumber,System.Int32)">
      <summary>Shifts the specified number of digits to the left or right.</summary>
      <returns>The result of the operation.</returns>
      <param name="n">Number to operate on. </param>
      <param name="digits">The number of decimal places to shift. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Sign(System.Data.OracleClient.OracleNumber)">
      <summary>Gets a value indicating the sign of an <see cref="T:System.Data.OracleClient.OracleNumber" /> structure's <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> property.</summary>
      <returns>A number indicating the sign of the <see cref="T:System.Data.OracleClient.OracleNumber" /> structure.</returns>
      <param name="n">The <see cref="T:System.Data.OracleClient.OracleNumber" /> structure whose sign is to be evaluated. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Sin(System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the sine of an <see cref="T:System.Data.OracleClient.OracleNumber" />.</summary>
      <returns>The sine of <paramref name="n" />.</returns>
      <param name="n">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Sinh(System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the hyperbolic sine of an <see cref="T:System.Data.OracleClient.OracleNumber" />.</summary>
      <returns>The hyperbolic sine of <paramref name="n" />.</returns>
      <param name="n">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Sqrt(System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the square root of the <see cref="T:System.Data.OracleClient.OracleNumber" /> parameter.</summary>
      <returns>The square root of <paramref name="n" />.</returns>
      <param name="n">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Subtract(System.Data.OracleClient.OracleNumber,System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the result of subtracting the second <see cref="T:System.Data.OracleClient.OracleNumber" /> structure from the first.</summary>
      <returns>A new <see cref="T:System.Data.OracleClient.OracleNumber" /> structure whose Value property contains the results of the subtraction.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Tan(System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the tangent of an <see cref="T:System.Data.OracleClient.OracleNumber" />.</summary>
      <returns>The tangent of <paramref name="n" />.</returns>
      <param name="n">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Tanh(System.Data.OracleClient.OracleNumber)">
      <summary>Calculates the hyperbolic tangent of an <see cref="T:System.Data.OracleClient.OracleNumber" />.</summary>
      <returns>The hyperbolic tangent of <paramref name="n" />.</returns>
      <param name="n">An <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.ToString">
      <summary>Converts this <see cref="T:System.Data.OracleClient.OracleNumber" /> structure to <see cref="T:System.String" />.</summary>
      <returns>A new <see cref="T:System.String" /> object containing the string representation of the <see cref="T:System.Data.OracleClient.OracleNumber" /> structure's <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> property.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleNumber.Truncate(System.Data.OracleClient.OracleNumber,System.Int32)">
      <summary>Truncates the specified <see cref="T:System.Data.OracleClient.OracleNumber" /> structure's value to the desired position.</summary>
      <returns>A <see cref="T:System.Data.OracleClient.OracleNumber" /> structure with its <see cref="P:System.Data.OracleClient.OracleNumber.Value" /> truncated to the specified <paramref name="position" />.</returns>
      <param name="n">The <see cref="T:System.Data.OracleClient.OracleNumber" /> structure to be truncated. </param>
      <param name="position">The decimal position to which the number will be truncated. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleNumber.Value">
      <summary>Gets the value of the <see cref="T:System.Data.OracleClient.OracleNumber" /> structure. This property is read-only.</summary>
      <returns>A number in the range -79,228,162,514,264,337,593,543,950,335 through 79,228,162,514, 264,337,593,543,950,335.</returns>
    </member>
    <member name="F:System.Data.OracleClient.OracleNumber.Zero">
      <summary>Returns the value 0.</summary>
    </member>
    <member name="T:System.Data.OracleClient.OracleParameter">
      <summary>Represents a parameter to an <see cref="T:System.Data.OracleClient.OracleCommand" /> and optionally its mapping to a <see cref="T:System.Data.DataColumn" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleParameter" /> class.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameter.#ctor(System.String,System.Data.OracleClient.OracleType)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleParameter" /> class that uses the parameter name and data type.</summary>
      <param name="name">The name of the parameter. </param>
      <param name="oracleType">One of the <see cref="T:System.Data.OracleClient.OracleType" /> values. </param>
      <exception cref="T:System.ArgumentException">The value supplied in the <paramref name="oracleType" /> parameter is an invalid back-end data type. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameter.#ctor(System.String,System.Data.OracleClient.OracleType,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleParameter" /> class that uses the parameter name, data type, and length.</summary>
      <param name="name">The name of the parameter. </param>
      <param name="oracleType">One of the <see cref="T:System.Data.OracleClient.OracleType" /> values. </param>
      <param name="size">The length of the parameter. </param>
      <exception cref="T:System.ArgumentException">The value supplied in the <paramref name="oracleType" /> parameter is an invalid back-end data type. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameter.#ctor(System.String,System.Data.OracleClient.OracleType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleParameter" /> class that uses the parameter name, data type, length, source column name, parameter direction, numeric precision, and other properties.</summary>
      <param name="name">The name of the parameter. </param>
      <param name="oracleType">One of the <see cref="T:System.Data.OracleClient.OracleType" /> values. </param>
      <param name="size">The length of the parameter. </param>
      <param name="direction">One of the <see cref="T:System.Data.ParameterDirection" /> values. </param>
      <param name="isNullable">true if the value of the field can be null, otherwise, false. </param>
      <param name="precision">The total number of digits to the left and right of the decimal point to which <see cref="P:System.Data.OracleClient.OracleParameter.Value" /> is resolved. </param>
      <param name="scale">The total number of decimal places to which <see cref="P:System.Data.OracleClient.OracleParameter.Value" /> is resolved. </param>
      <param name="srcColumn">The name of the source column. </param>
      <param name="srcVersion">One of the <see cref="T:System.Data.DataRowVersion" /> values. </param>
      <param name="value">An <see cref="T:System.Object" /> that is the value of the <see cref="T:System.Data.OracleClient.OracleParameter" />. </param>
      <exception cref="T:System.ArgumentException">The value supplied in the <paramref name="oracleType" /> parameter is an invalid back-end data type. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameter.#ctor(System.String,System.Data.OracleClient.OracleType,System.Int32,System.Data.ParameterDirection,System.String,System.Data.DataRowVersion,System.Boolean,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleParameter" /> class that uses the parameter name, data type, size, direction, source column, source version, and other properties.</summary>
      <param name="name">The name of the parameter to map.</param>
      <param name="oracleType">One of the <see cref="T:System.Data.OracleClient.OracleType" /> values.</param>
      <param name="size">The length of the parameter.</param>
      <param name="direction">One of the <see cref="T:System.Data.ParameterDirection" /> values.</param>
      <param name="sourceColumn">The name of the source column. </param>
      <param name="sourceVersion">One of the <see cref="T:System.Data.DataRowVersion" /> values. </param>
      <param name="sourceColumnNullMapping">true if the source column is nullable, otherwise false.</param>
      <param name="value">An <see cref="T:System.Object" /> that is the value of the <see cref="T:System.Data.OracleClient.OracleParameter" />.</param>
      <exception cref="T:System.ArgumentException">The value supplied in the <paramref name="oracleType" /> parameter is an invalid back-end data type.</exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameter.#ctor(System.String,System.Data.OracleClient.OracleType,System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleParameter" /> class that uses the parameter name, data type, length, and source column name.</summary>
      <param name="name">The name of the parameter. </param>
      <param name="oracleType">One of the <see cref="T:System.Data.OracleClient.OracleType" /> values. </param>
      <param name="size">The length of the parameter. </param>
      <param name="srcColumn">The name of the source column. </param>
      <exception cref="T:System.ArgumentException">The value supplied in the <paramref name="oracleType" /> parameter is an invalid back-end data type. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameter.#ctor(System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleParameter" /> class that uses the parameter name and an <see cref="T:System.Data.OracleClient.OracleParameter" /> object.</summary>
      <param name="name">The name of the parameter. </param>
      <param name="value">An <see cref="T:System.Data.OracleClient.OracleParameter" /> object. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleParameter.DbType">
      <summary>Gets or sets the <see cref="T:System.Data.DbType" /> of the parameter.</summary>
      <returns>One of the <see cref="T:System.Data.DbType" /> values. The default is <see cref="F:System.Data.DbType.AnsiString" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The property was not set to a valid <see cref="T:System.Data.DbType" />. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleParameter.Direction">
      <summary>Gets or sets a value that indicates whether the parameter is input-only, output-only, bidirectional, or a stored procedure return value parameter.</summary>
      <returns>One of the <see cref="T:System.Data.ParameterDirection" /> values. The default is Input.</returns>
      <exception cref="T:System.ArgumentException">The property was not set to one of the valid <see cref="T:System.Data.ParameterDirection" /> values.</exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleParameter.IsNullable">
      <summary>Gets or sets a value that indicates whether the parameter accepts null values.</summary>
      <returns>true if null values are accepted, otherwise false. The default is false.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleParameter.Offset">
      <summary>Gets or sets the offset to the <see cref="P:System.Data.OracleClient.OracleParameter.Value" /> property.</summary>
      <returns>The offset to the <see cref="P:System.Data.OracleClient.OracleParameter.Value" />. The default is 0.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleParameter.OracleType">
      <summary>Gets or sets the <see cref="T:System.Data.OracleClient.OracleType" /> of the parameter.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleType" /> value that is the <see cref="T:System.Data.OracleClient.OracleType" /> of the parameter. The default is <see cref="F:System.Data.OracleClient.OracleType.VarChar" />.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleParameter.ParameterName">
      <summary>Gets or sets the name of the <see cref="T:System.Data.OracleClient.OracleParameter" />.</summary>
      <returns>The name of the <see cref="T:System.Data.OracleClient.OracleParameter" />. The default is an empty string.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleParameter.Precision">
      <summary>Gets or sets the maximum number of digits used to represent the <see cref="P:System.Data.OracleClient.OracleParameter.Value" /> property.</summary>
      <returns>The maximum number of digits used to represent the <see cref="P:System.Data.OracleClient.OracleParameter.Value" /> property. The default value is 0, which indicates that the data provider sets the precision for <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameter.ResetDbType">
      <summary>Resets the type associated with this <see cref="T:System.Data.OracleClient.OracleParameter" />.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameter.ResetOracleType">
      <summary>Resets the type associated with this <see cref="T:System.Data.OracleClient.OracleParameter" />.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleParameter.Scale">
      <summary>Gets or sets the number of decimal places to which <see cref="P:System.Data.OracleClient.OracleParameter.Value" /> is resolved.</summary>
      <returns>The number of decimal places to which <see cref="P:System.Data.OracleClient.OracleParameter.Value" /> is resolved. The default is 0.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleParameter.Size">
      <summary>Gets or sets the maximum size, in bytes, of the data within the column.</summary>
      <returns>The maximum size, in bytes, of the data within the column. The default value is 0 (to be used when you do not want to specify the maximum size of the value).</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleParameter.SourceColumn">
      <summary>Gets or sets the name of the source column mapped to the <see cref="T:System.Data.DataSet" /> and used for loading or returning the <see cref="P:System.Data.OracleClient.OracleParameter.Value" /></summary>
      <returns>The name of the source column mapped to the <see cref="T:System.Data.DataSet" />. The default is an empty string ("").</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleParameter.SourceColumnNullMapping">
      <summary>Sets or gets a value which indicates whether the source column is nullable. This allows <see cref="T:System.Data.OracleClient.OracleCommandBuilder" /> to correctly generate Update statements for nullable columns.</summary>
      <returns>True if the source column is nullable, otherwise false.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleParameter.SourceVersion">
      <summary>Gets or sets the <see cref="T:System.Data.DataRowVersion" /> to use when you load <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
      <returns>One of the <see cref="T:System.Data.DataRowVersion" /> values. The default is Current.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameter.System#ICloneable#Clone">
      <summary>For a description of this member, see <see cref="M:System.ICloneable.Clone" />.</summary>
      <returns>A new object that is a copy of this instance.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameter.ToString">
      <summary>Gets a string that contains the <see cref="P:System.Data.OracleClient.OracleParameter.ParameterName" />.</summary>
      <returns>A string that contains the <see cref="P:System.Data.OracleClient.OracleParameter.ParameterName" />.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleParameter.Value">
      <summary>Gets or sets the value of the parameter.</summary>
      <returns>An object that is the value of the parameter. The default value is null.</returns>
    </member>
    <member name="T:System.Data.OracleClient.OracleParameterCollection">
      <summary>Represents a collection of parameters relevant to an <see cref="T:System.Data.OracleClient.OracleCommand" /> as well as their respective mappings to columns in a <see cref="T:System.Data.DataSet" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> class.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.Add(System.Data.OracleClient.OracleParameter)">
      <summary>Adds the specified <see cref="T:System.Data.OracleClient.OracleParameter" /> to the <see cref="T:System.Data.OracleClient.OracleParameterCollection" />.</summary>
      <returns>A reference to the new <see cref="T:System.Data.OracleClient.OracleParameter" /> object.</returns>
      <param name="value">The <see cref="T:System.Data.OracleClient.OracleParameter" /> to add to the collection. </param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Data.OracleClient.OracleParameter" /> specified in the <paramref name="value" /> parameter is already added to this or another <see cref="T:System.Data.OracleClient.OracleParameterCollection" />. </exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.Add(System.Object)">
      <summary>Adds the specified <see cref="T:System.Data.OracleClient.OracleParameter" /> object to the <see cref="T:System.Data.OracleClient.OracleParameterCollection" />.</summary>
      <returns>The index of the new <see cref="T:System.Data.OracleClient.OracleParameter" /> object in the collection.</returns>
      <param name="value">The <see cref="T:System.Data.OracleClient.OracleParameter" /> object to add to the collection.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.Add(System.String,System.Data.OracleClient.OracleType)">
      <summary>Adds an <see cref="T:System.Data.OracleClient.OracleParameter" /> to the <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> given the parameter name and data type.</summary>
      <returns>A reference to the new <see cref="T:System.Data.OracleClient.OracleParameter" /> object.</returns>
      <param name="parameterName">The name of the parameter. </param>
      <param name="dataType">One of the <see cref="T:System.Data.OracleClient.OracleType" /> values. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.Add(System.String,System.Data.OracleClient.OracleType,System.Int32)">
      <summary>Adds an <see cref="T:System.Data.OracleClient.OracleParameter" /> to the <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> given the parameter name, data type, and column length.</summary>
      <returns>A reference to the new <see cref="T:System.Data.OracleClient.OracleParameter" /> object.</returns>
      <param name="parameterName">The name of the parameter. </param>
      <param name="dataType">One of the <see cref="T:System.Data.OracleClient.OracleType" /> values. </param>
      <param name="size">The length of the column. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.Add(System.String,System.Data.OracleClient.OracleType,System.Int32,System.String)">
      <summary>Adds an <see cref="T:System.Data.OracleClient.OracleParameter" /> to the <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> given the parameter name, data type, column length, and source column name.</summary>
      <returns>A reference to the new <see cref="T:System.Data.OracleClient.OracleParameter" /> object.</returns>
      <param name="parameterName">The name of the parameter. </param>
      <param name="dataType">One of the <see cref="T:System.Data.OracleClient.OracleType" /> values. </param>
      <param name="size">The length of the column. </param>
      <param name="srcColumn">The name of the source column. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.Add(System.String,System.Object)">
      <summary>Adds an <see cref="T:System.Data.OracleClient.OracleParameter" /> to the <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> given the parameter name and value.</summary>
      <returns>A reference to the new <see cref="T:System.Data.OracleClient.OracleParameter" /> object.</returns>
      <param name="parameterName">The name of the parameter. </param>
      <param name="value">The <see cref="P:System.Data.OracleClient.OracleParameter.Value" /> of the <see cref="T:System.Data.OracleClient.OracleParameter" /> to add to the collection. </param>
      <exception cref="T:System.InvalidCastException">The <paramref name="value" /> parameter is not an <see cref="T:System.Data.OracleClient.OracleParameter" />. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.AddRange(System.Array)">
      <summary>Adds an array of values to the end of the <see cref="T:System.Data.OracleClient.OracleParameterCollection" />.</summary>
      <param name="values">The <see cref="T:System.Array" /> values to add.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.AddRange(System.Data.OracleClient.OracleParameter[])">
      <summary>Adds an array of <see cref="T:System.Data.OracleClient.OracleParameter" /> values to the end of the <see cref="T:System.Data.OracleClient.OracleParameterCollection" />.</summary>
      <param name="values">The <see cref="T:System.Data.OracleClient.OracleParameter" /> values to add.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>Adds a value to the end of the <see cref="T:System.Data.OracleClient.OracleParameterCollection" />.</summary>
      <returns>A <see cref="T:System.Data.OracleClient.OracleParameter" /> object.</returns>
      <param name="parameterName">The name of the parameter.</param>
      <param name="value">The value to be added.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.Clear">
      <summary>Removes all of the <see cref="T:System.Data.OracleClient.OracleParameter" /> objects from the <see cref="T:System.Data.OracleClient.OracleParameterCollection" />.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.Contains(System.Data.OracleClient.OracleParameter)">
      <summary>Determines whether the specified <see cref="T:System.Data.OracleClient.OracleParameter" /> is in the <see cref="T:System.Data.OracleClient.OracleParameterCollection" />.</summary>
      <returns>true if the <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> contains the value, false otherwise.</returns>
      <param name="value">The <see cref="T:System.Data.OracleClient.OracleParameter" /> value.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.Contains(System.Object)">
      <summary>Determines whether the specified object is in the <see cref="T:System.Data.OracleClient.OracleParameterCollection" />.</summary>
      <returns>true if the <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> contains the value, false otherwise.</returns>
      <param name="value">The <see cref="T:System.Object" /> value.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.Contains(System.String)">
      <summary>Indicates whether an <see cref="T:System.Data.OracleClient.OracleParameter" /> with the specified name is contained in the collection.</summary>
      <returns>true if the <see cref="T:System.Data.OracleClient.OracleParameter" /> is in the collection; otherwise, false.</returns>
      <param name="parameterName">The name of the <see cref="T:System.Data.OracleClient.OracleParameter" /> to look for in the collection.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies all the elements of the current <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> to the specified one-dimensional <see cref="T:System.Array" /> starting at the specified destination <see cref="T:System.Array" /> index.</summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from the current <see cref="T:System.Data.OracleClient.OracleParameterCollection" />.</param>
      <param name="index">A 32-bit integer that represents the index in the <see cref="T:System.Array" /> at which copying begins.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.CopyTo(System.Data.OracleClient.OracleParameter[],System.Int32)">
      <summary>Copies all the elements of the current <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> to the specified <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> starting at the specified destination index.</summary>
      <param name="array">The <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> that is the destination of the elements copied from the current <see cref="T:System.Data.OracleClient.OracleParameterCollection" />.</param>
      <param name="index">A 32-bit integer that represents the index in the <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> at which copying begins.</param>
    </member>
    <member name="P:System.Data.OracleClient.OracleParameterCollection.Count">
      <summary>Returns an Integer containing the number of elements in the <see cref="T:System.Data.OracleClient.OracleParameterCollection" />. Read-only. </summary>
      <returns>The number of elements in the <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> as an Integer.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Data.OracleClient.OracleParameterCollection" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.IndexOf(System.Data.OracleClient.OracleParameter)">
      <summary>Gets the location of the specified <see cref="T:System.Data.OracleClient.OracleParameter" /> within the collection.</summary>
      <returns>The zero-based location of the specified <see cref="T:System.Data.OracleClient.OracleParameter" /> that is a <see cref="T:System.Data.OracleClient.OracleParameter" /> within the collection. </returns>
      <param name="value">The <see cref="T:System.Data.OracleClient.OracleParameter" /> to find.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.IndexOf(System.Object)">
      <summary>Gets the location of the specified <see cref="T:System.Object" /> within the collection.</summary>
      <returns>The zero-based location of the specified <see cref="T:System.Object" /> that is a <see cref="T:System.Data.OracleClient.OracleParameter" /> within the collection. </returns>
      <param name="value">The <see cref="T:System.Object" /> to find.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.IndexOf(System.String)">
      <summary>Gets the location of the specified <see cref="T:System.Data.OracleClient.OracleParameter" /> with the specified name.</summary>
      <returns>The zero-based location of the specified <see cref="T:System.Data.OracleClient.OracleParameter" /> that is a <see cref="T:System.Data.OracleClient.OracleParameter" /> within the collection. </returns>
      <param name="parameterName">The case-sensitive name of the <see cref="T:System.Data.OracleClient.OracleParameter" /> to find.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.Insert(System.Int32,System.Data.OracleClient.OracleParameter)">
      <summary>Inserts a <see cref="T:System.Data.OracleClient.OracleParameter" /> object into the <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> at the specified index.</summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">A <see cref="T:System.Data.OracleClient.OracleParameter" /> object to be inserted in the <see cref="T:System.Data.OracleClient.OracleParameterCollection" />.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.Insert(System.Int32,System.Object)">
      <summary>Inserts a <see cref="T:System.Object" /> into the <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> at the specified index.</summary>
      <param name="index">The zero-based index at which value should be inserted.</param>
      <param name="value">A <see cref="T:System.Object" /> to be inserted in the <see cref="T:System.Data.OracleClient.OracleParameterCollection" />.</param>
    </member>
    <member name="P:System.Data.OracleClient.OracleParameterCollection.IsFixedSize">
      <summary>Gets a value that indicates whether the <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> has a fixed size. </summary>
      <returns>Returns true if the <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> has a fixed size, false otherwise.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleParameterCollection.IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> is read-only. </summary>
      <returns>Returns true if the <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> is read only, false otherwise.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleParameterCollection.IsSynchronized">
      <summary>Gets a value that indicates whether the <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> is synchronized.</summary>
      <returns>Returns true if the <see cref="T:System.Data.OracleClient.OracleParameterCollection" /> is synchronized, false otherwise.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleParameterCollection.Item(System.Int32)">
      <summary>Gets or sets the <see cref="T:System.Data.OracleClient.OracleParameter" /> at the specified index.</summary>
      <returns>The <see cref="T:System.Data.OracleClient.OracleParameter" /> at the specified index.</returns>
      <param name="index">The zero-based index of the parameter to retrieve. </param>
      <exception cref="T:System.IndexOutOfRangeException">The index specified does not exist. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleParameterCollection.Item(System.String)">
      <summary>Gets or sets the <see cref="T:System.Data.OracleClient.OracleParameter" /> with the specified name.</summary>
      <returns>The <see cref="T:System.Data.OracleClient.OracleParameter" /> with the specified name.</returns>
      <param name="parameterName">The name of the parameter to retrieve. </param>
      <exception cref="T:System.IndexOutOfRangeException">The name specified does not exist. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.Remove(System.Data.OracleClient.OracleParameter)">
      <summary>Removes the specified <see cref="T:System.Data.OracleClient.OracleParameter" /> object from the collection.</summary>
      <param name="value">A <see cref="T:System.Data.OracleClient.OracleParameter" /> object to remove from the collection.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.Remove(System.Object)">
      <summary>Removes the specified <see cref="T:System.Data.OracleClient.OracleParameter" /> object from the collection.</summary>
      <param name="value">A <see cref="T:System.Object" /> object to remove from the collection.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Data.OracleClient.OracleParameter" /> object at the specified index from the collection.</summary>
      <param name="index">The zero-based index of the <see cref="T:System.Data.OracleClient.OracleParameter" /> object to remove.</param>
    </member>
    <member name="M:System.Data.OracleClient.OracleParameterCollection.RemoveAt(System.String)">
      <summary>Removes the <see cref="T:System.Data.OracleClient.OracleParameter" /> object with the specified name from the collection.</summary>
      <param name="parameterName">The name of the <see cref="T:System.Data.OracleClient.OracleParameter" /> object to remove.</param>
    </member>
    <member name="P:System.Data.OracleClient.OracleParameterCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Data.OracleClient.OracleParameterCollection" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Data.OracleClient.OracleParameterCollection" />.</returns>
    </member>
    <member name="T:System.Data.OracleClient.OraclePermission">
      <summary>Enables the .NET Framework Data Provider for Oracle to help ensure that a user has a security level adequate to access an Oracle database. </summary>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OraclePermission" /> class with one of the <see cref="T:System.Security.Permissions.PermissionState" /> values.</summary>
      <param name="state">One of the <see cref="T:System.Security.Permissions.PermissionState" /> values. </param>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.Add(System.String,System.String,System.Data.KeyRestrictionBehavior)">
      <summary>Creates a new set of permissions.</summary>
      <param name="connectionString">The connection string.</param>
      <param name="restrictions">The key restrictions.</param>
      <param name="behavior">One of the <see cref="T:System.Data.KeyRestrictionBehavior" /> enumerations.</param>
    </member>
    <member name="P:System.Data.OracleClient.OraclePermission.AllowBlankPassword">
      <summary>Gets a value indicating whether a blank password is allowed.</summary>
      <returns>true if a blank password is allowed, otherwise false.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.Copy">
      <returns>A copy of the current permission object.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.FromXml(System.Security.SecurityElement)">
      <param name="securityElement">A <see cref="System.Security.SecurityElement" /> expression.</param>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.Intersect(System.Security.IPermission)">
      <returns>A new permission that represents the intersection of the current permission and the specified permission. This new permission is null if the intersection is empty.</returns>
      <param name="target">A permission to intersect with the current permission. It must be of the same type as the current permission. </param>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.IsSubsetOf(System.Security.IPermission)">
      <returns>true if the current permission is a subset of the specified permission; otherwise, false.</returns>
      <param name="target">A permission that is to be tested for the subset relationship. This permission must be of the same type as the current permission. </param>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.IsUnrestricted">
      <summary>Returns a value indicating whether the permission can be represented as unrestricted without any knowledge of the permission semantics.</summary>
      <returns>true if the permission can be represented as unrestricted.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.ToXml">
      <summary>Creates an XML encoding of the security object and its current state.</summary>
      <returns>An XML encoding of the security object, including any state information.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermission.Union(System.Security.IPermission)">
      <returns>A new permission that represents the union of the current permission and the specified permission.</returns>
      <param name="target">A <see cref="System.Security.IPermission" /> expression.</param>
    </member>
    <member name="T:System.Data.OracleClient.OraclePermissionAttribute">
      <summary>Associates a security action with a custom security attribute.  </summary>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermissionAttribute.#ctor(System.Security.Permissions.SecurityAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OraclePermissionAttribute" /> class.</summary>
      <param name="action">One of the <see cref="T:System.Security.Permissions.SecurityAction" /> values representing an action that can be performed using declarative security. </param>
    </member>
    <member name="P:System.Data.OracleClient.OraclePermissionAttribute.AllowBlankPassword">
      <summary>Gets or sets a value indicating whether a blank password is allowed.</summary>
      <returns>true if a blank password is allowed, otherwise false.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OraclePermissionAttribute.ConnectionString">
      <summary>Gets or sets a permitted connection string.</summary>
      <returns>A permitted connection string.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermissionAttribute.CreatePermission">
      <summary>Returns an <see cref="T:System.Data.OracleClient.OraclePermission" /> object that is configured according to the attribute properties.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OraclePermission" /> object.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OraclePermissionAttribute.KeyRestrictionBehavior">
      <summary>Identifies whether the list of connection string parameters identified by the <see cref="P:System.Data.OracleClient.OraclePermissionAttribute.KeyRestrictions" /> property are the only connection string parameters allowed.</summary>
      <returns>One of the <see cref="P:System.Data.OracleClient.OraclePermissionAttribute.KeyRestrictionBehavior" /> values.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OraclePermissionAttribute.KeyRestrictions">
      <summary>Gets or sets connection string parameters that are allowed or disallowed.</summary>
      <returns>One or more connection string parameters that are allowed or disallowed.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermissionAttribute.ShouldSerializeConnectionString">
      <summary>Identifies whether the attribute should serialize the connection string.</summary>
      <returns>true if the attribute should serialize the connection string; otherwise false.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OraclePermissionAttribute.ShouldSerializeKeyRestrictions">
      <summary>Identifies whether the attribute should serialize the set of key restrictions.</summary>
      <returns>true if the attribute should serialize the set of key restrictions, otherwise false.</returns>
    </member>
    <member name="T:System.Data.OracleClient.OracleRowUpdatedEventArgs">
      <summary>Provides data for the <see cref="E:System.Data.OracleClient.OracleDataAdapter.RowUpdated" /> event. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleRowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleRowUpdatedEventArgs" /> class.</summary>
      <param name="row">The <see cref="T:System.Data.DataRow" /> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />. </param>
      <param name="command">The <see cref="T:System.Data.IDbCommand" /> executed when <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> is called. </param>
      <param name="statementType">One of the <see cref="T:System.Data.StatementType" /> values that specifies the type of query executed. </param>
      <param name="tableMapping">The <see cref="T:System.Data.Common.DataTableMapping" /> sent through an <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleRowUpdatedEventArgs.Command">
      <summary>Gets or sets the <see cref="T:System.Data.OracleClient.OracleCommand" /> executed when <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> is called.</summary>
      <returns>The <see cref="T:System.Data.OracleClient.OracleCommand" /> executed when <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> is called.</returns>
    </member>
    <member name="T:System.Data.OracleClient.OracleRowUpdatedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Data.OracleClient.OracleDataAdapter.RowUpdated" /> event of an <see cref="T:System.Data.OracleClient.OracleDataAdapter" />.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">The <see cref="T:System.Data.OracleClient.OracleRowUpdatedEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Data.OracleClient.OracleRowUpdatingEventArgs">
      <summary>Provides data for the <see cref="E:System.Data.OracleClient.OracleDataAdapter.RowUpdating" /> event.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleRowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleRowUpdatingEventArgs" /> class.</summary>
      <param name="row">The <see cref="T:System.Data.DataRow" /> to update. </param>
      <param name="command">The <see cref="T:System.Data.IDbCommand" /> to execute during update. </param>
      <param name="statementType">One of the <see cref="T:System.Data.StatementType" /> values that specifies the type of query executed. </param>
      <param name="tableMapping">The <see cref="T:System.Data.Common.DataTableMapping" /> sent through an update. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleRowUpdatingEventArgs.Command">
      <summary>Gets or sets the <see cref="T:System.Data.OracleClient.OracleCommand" /> to execute when performing the <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</summary>
      <returns>The <see cref="T:System.Data.OracleClient.OracleCommand" /> to execute when performing the <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />.</returns>
    </member>
    <member name="T:System.Data.OracleClient.OracleRowUpdatingEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Data.OracleClient.OracleDataAdapter.RowUpdating" /> event of an <see cref="T:System.Data.OracleClient.OracleDataAdapter" />.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">The <see cref="T:System.Data.OracleClient.OracleRowUpdatingEventArgs" /> that contains the event data. </param>
    </member>
    <member name="T:System.Data.OracleClient.OracleString">
      <summary>Represents a variable-length stream of characters to be stored in or retrieved from the database.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleString" /> class and specifies the string to store.</summary>
      <param name="s">The string to store. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.CompareTo(System.Object)">
      <summary>Compares this instance of <see cref="T:System.Data.OracleClient.OracleString" /> to the supplied object and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relative values of the instance and the object.Return Value Condition Less than zero This instance is less than object. Zero This instance is the same as object. Greater than zero This instance is greater than object -or- object is a null reference (Nothing) </returns>
      <param name="obj">The object to be compared. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.Concat(System.Data.OracleClient.OracleString,System.Data.OracleClient.OracleString)">
      <summary>Concatenates the two specified <see cref="T:System.Data.OracleClient.OracleString" /> structures.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleString" /> containing the newly concatenated value representing the contents of the two <see cref="T:System.Data.OracleClient.OracleString" /> parameters.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleString.Empty">
      <summary>Represents an empty string that can be assigned to the <see cref="P:System.Data.OracleClient.OracleString.Value" /> property of an instance of the <see cref="T:System.Data.OracleClient.OracleString" /> structure.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.Equals(System.Data.OracleClient.OracleString,System.Data.OracleClient.OracleString)">
      <summary>Performs a logical comparison of the two <see cref="T:System.Data.OracleClient.OracleString" /> operands to determine if they are equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are not equal. If either instance of <see cref="T:System.Data.OracleClient.OracleString" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.Equals(System.Object)">
      <summary>Compares the supplied object parameter to the <see cref="P:System.Data.OracleClient.OracleString.Value" /> property of the <see cref="T:System.Data.OracleClient.OracleString" /> object.</summary>
      <returns>Equals will return true if the object is an instance of <see cref="T:System.Data.OracleClient.OracleString" /> and the two are equal; otherwise false.</returns>
      <param name="value">The object to be compared. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.GreaterThan(System.Data.OracleClient.OracleString,System.Data.OracleClient.OracleString)">
      <summary>Performs a logical comparison of the two <see cref="T:System.Data.OracleClient.OracleString" /> operands to determine if the first is greater than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleString" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.GreaterThanOrEqual(System.Data.OracleClient.OracleString,System.Data.OracleClient.OracleString)">
      <summary>Performs a logical comparison of the two <see cref="T:System.Data.OracleClient.OracleString" /> operands to determine if the first is greater than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleString" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleString.IsNull">
      <summary>Indicates whether the <see cref="P:System.Data.OracleClient.OracleString.Value" /> of the <see cref="T:System.Data.OracleClient.OracleString" /> is <see cref="F:System.Data.OracleClient.OracleString.Null" />.</summary>
      <returns>true if <see cref="P:System.Data.OracleClient.OracleString.Value" /> is <see cref="F:System.Data.OracleClient.OracleString.Null" />, otherwise false.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleString.Item(System.Int32)">
      <summary>Gets the single byte from the Value property located at the position indicated by the integer parameter, <paramref name="index" />.</summary>
      <returns>The byte located at the position indicated by the integer parameter.</returns>
      <param name="index">The position of the byte to be retrieved. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleString.Length">
      <summary>Gets the length of the string that is stored in this <see cref="T:System.Data.OracleClient.OracleString" /> structure.</summary>
      <returns>The length of the string that is stored.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.LessThan(System.Data.OracleClient.OracleString,System.Data.OracleClient.OracleString)">
      <summary>Performs a logical comparison of the two <see cref="T:System.Data.OracleClient.OracleString" /> operands to determine if the first is less than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleString" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.LessThanOrEqual(System.Data.OracleClient.OracleString,System.Data.OracleClient.OracleString)">
      <summary>Performs a logical comparison of the two <see cref="T:System.Data.OracleClient.OracleString" /> operands to determine if the first is less than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleString" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.NotEquals(System.Data.OracleClient.OracleString,System.Data.OracleClient.OracleString)">
      <summary>Performs a logical comparison of the two <see cref="T:System.Data.OracleClient.OracleString" /> operands to determine if they are not equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are not equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are equal. If either instance of <see cref="T:System.Data.OracleClient.OracleString" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleString.Null">
      <summary>Represents a null value that can be assigned to the <see cref="P:System.Data.OracleClient.OracleString.Value" /> property of an instance of the <see cref="T:System.Data.OracleClient.OracleString" /> structure.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.op_Addition(System.Data.OracleClient.OracleString,System.Data.OracleClient.OracleString)">
      <summary>Concatenates the two specified <see cref="T:System.Data.OracleClient.OracleString" /> structures.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleString" /> containing the newly concatenated value representing the contents of the two <see cref="T:System.Data.OracleClient.OracleString" /> parameters.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.op_Equality(System.Data.OracleClient.OracleString,System.Data.OracleClient.OracleString)">
      <summary>Performs a logical comparison of the two <see cref="T:System.Data.OracleClient.OracleString" /> operands to determine if they are equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are not equal. If either instance of <see cref="T:System.Data.OracleClient.OracleString" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.op_Explicit(System.Data.OracleClient.OracleString)~System.String">
      <summary>Converts an <see cref="T:System.Data.OracleClient.OracleString" /> to a <see cref="T:System.String" />.</summary>
      <returns>A String, whose contents are the same as the <see cref="P:System.Data.OracleClient.OracleString.Value" /> property of the OracleString parameter.</returns>
      <param name="x">The OracleString to be converted. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.op_GreaterThan(System.Data.OracleClient.OracleString,System.Data.OracleClient.OracleString)">
      <summary>Performs a logical comparison of the two <see cref="T:System.Data.OracleClient.OracleString" /> operands to determine if the first is greater than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleString" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.op_GreaterThanOrEqual(System.Data.OracleClient.OracleString,System.Data.OracleClient.OracleString)">
      <summary>Performs a logical comparison of the two <see cref="T:System.Data.OracleClient.OracleString" /> operands to determine if the first is greater than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleString" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.op_Implicit(System.String)~System.Data.OracleClient.OracleString">
      <summary>Converts the <see cref="T:System.String" /> parameter to an <see cref="T:System.Data.OracleClient.OracleString" />.</summary>
      <returns>An OracleString containing the value of the specified String.</returns>
      <param name="s">The <see cref="T:System.String" /> to be converted. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.op_Inequality(System.Data.OracleClient.OracleString,System.Data.OracleClient.OracleString)">
      <summary>Performs a logical comparison of the two <see cref="T:System.Data.OracleClient.OracleString" /> operands to determine if they are equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are not equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are equal. If either instance of <see cref="T:System.Data.OracleClient.OracleString" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.op_LessThan(System.Data.OracleClient.OracleString,System.Data.OracleClient.OracleString)">
      <summary>Performs a logical comparison of the two <see cref="T:System.Data.OracleClient.OracleString" /> operands to determine if the first is less than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleString" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.op_LessThanOrEqual(System.Data.OracleClient.OracleString,System.Data.OracleClient.OracleString)">
      <summary>Performs a logical comparison of the two <see cref="T:System.Data.OracleClient.OracleString" /> operands to determine if the first is less than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleString" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleString" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleString.ToString">
      <summary>Converts an OracleString object to a String.</summary>
      <returns>A String with the same value as this OracleString structure.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleString.Value">
      <summary>Gets the string that is stored in the <see cref="T:System.Data.OracleClient.OracleString" /> structure.</summary>
      <returns>The string that is stored.This property is read-only.</returns>
    </member>
    <member name="T:System.Data.OracleClient.OracleTimeSpan">
      <summary>Represents a time interval and corresponds to the Oracle 9i INTERVAL DAY TO SECOND data type.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.#ctor(System.Data.OracleClient.OracleTimeSpan)">
      <summary>Initializes a new <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure from an existing one.</summary>
      <param name="from">An existing <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure from which to create the new structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure to a specified number of hours, minutes, and seconds.</summary>
      <param name="hours">Number of hours. </param>
      <param name="minutes">Number of minutes. </param>
      <param name="seconds">Number of seconds. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify an <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> value less than <see cref="F:System.Data.OracleClient.OracleTimeSpan.MinValue" /> or greater than <see cref="F:System.Data.OracleClient.OracleTimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure to a specified number of days, hours, minutes, and seconds.</summary>
      <param name="days">Number of days. </param>
      <param name="hours">Number of hours. </param>
      <param name="minutes">Number of minutes. </param>
      <param name="seconds">Number of seconds. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify an <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> value less than <see cref="F:System.Data.OracleClient.OracleTimeSpan.MinValue" /> or greater than <see cref="F:System.Data.OracleClient.OracleTimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initializes a new <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure to a specified number of days, hours, minutes, seconds, and milliseconds.</summary>
      <param name="days">Number of days. </param>
      <param name="hours">Number of hours. </param>
      <param name="minutes">Number of minutes. </param>
      <param name="seconds">Number of seconds. </param>
      <param name="milliseconds">Number of milliseconds. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameters specify an <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> value less than <see cref="F:System.Data.OracleClient.OracleTimeSpan.MinValue" /> or greater than <see cref="F:System.Data.OracleClient.OracleTimeSpan.MaxValue" />. </exception>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.#ctor(System.Int64)">
      <summary>Initializes a new <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure to the specified number of ticks.</summary>
      <param name="ticks">A time period expressed in 100-nanosecond units. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.#ctor(System.TimeSpan)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure with the specified <see cref="T:System.TimeSpan" />.</summary>
      <param name="ts">The specified <see cref="T:System.TimeSpan" />. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.CompareTo(System.Object)">
      <summary>Compares this <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure to the supplied object and returns an indication of their relative values.</summary>
      <returns>A signed number indicating the relative values of the instance of the <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure and the object.Return Value Condition Less than zero This instance is less than the object. Zero This instance is the same as the object. Greater than zero This instance is greater than the object, or the object is a null reference (Nothing in Visual Basic). </returns>
      <param name="obj">The object to be compared. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleTimeSpan.Days">
      <summary>Gets the number of whole days represented by this instance.</summary>
      <returns>The day component of this instance.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.Equals(System.Data.OracleClient.OracleTimeSpan,System.Data.OracleClient.OracleTimeSpan)">
      <summary>Performs a logical comparison of two <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structures to determine whether they are equal.</summary>
      <returns>true if the two values are equal, otherwise false.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.Equals(System.Object)">
      <summary>Compares the supplied object parameter to the <see cref="P:System.Data.OracleClient.OracleTimeSpan.Value" /> property of the <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> object.</summary>
      <returns>true if the object is an instance of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> and the two are equal, otherwise false.</returns>
      <param name="value">The object to be compared. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.GetHashCode">
      <summary>Gets the hash code for this instance.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.GreaterThan(System.Data.OracleClient.OracleTimeSpan,System.Data.OracleClient.OracleTimeSpan)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> to determine whether the first is greater than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.GreaterThanOrEqual(System.Data.OracleClient.OracleTimeSpan,System.Data.OracleClient.OracleTimeSpan)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> to determine whether the first is greater than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> will be <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleTimeSpan.Hours">
      <summary>Gets the number of whole hours represented by this instance.</summary>
      <returns>The hour component of this instance between 0 and 23.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleTimeSpan.IsNull">
      <summary>Gets a value indicating whether the <see cref="P:System.Data.OracleClient.OracleTimeSpan.Value" /> property of the <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure is null.</summary>
      <returns>true if <see cref="P:System.Data.OracleClient.OracleTimeSpan.Value" /> is null, otherwise false.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.LessThan(System.Data.OracleClient.OracleTimeSpan,System.Data.OracleClient.OracleTimeSpan)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> to determine whether the first is less than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.LessThanOrEqual(System.Data.OracleClient.OracleTimeSpan,System.Data.OracleClient.OracleTimeSpan)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> to determine whether the first is less than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleTimeSpan.MaxValue">
      <summary>Represents the maximum valid date value for an <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure.</summary>
    </member>
    <member name="P:System.Data.OracleClient.OracleTimeSpan.Milliseconds">
      <summary>Gets the number of whole milliseconds represented by this instance.</summary>
      <returns>The millisecond component of this instance between 0 and 999.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleTimeSpan.Minutes">
      <summary>Gets the number of whole minutes represented by this instance.</summary>
      <returns>The minute component of this instance between 0 and 59.</returns>
    </member>
    <member name="F:System.Data.OracleClient.OracleTimeSpan.MinValue">
      <summary>Represents the minimum valid date value for an <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.NotEquals(System.Data.OracleClient.OracleTimeSpan,System.Data.OracleClient.OracleTimeSpan)">
      <summary>Performs a logical comparison of two instances of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> to determine whether they are not equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are not equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are equal. If either instance of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
    </member>
    <member name="F:System.Data.OracleClient.OracleTimeSpan.Null">
      <summary>Represents a null value that can be assigned to the <see cref="P:System.Data.OracleClient.OracleTimeSpan.Value" /> property of an instance of the <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.op_Equality(System.Data.OracleClient.OracleTimeSpan,System.Data.OracleClient.OracleTimeSpan)">
      <summary>Performs a logical comparison of two <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structures to determine whether they are equal.</summary>
      <returns>true if the two values are equal, otherwise false.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.op_Explicit(System.Data.OracleClient.OracleTimeSpan)~System.TimeSpan">
      <summary>Converts an <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure to a <see cref="T:System.TimeSpan" /> structure.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> structure.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure to convert to a <see cref="T:System.TimeSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.op_Explicit(System.String)~System.Data.OracleClient.OracleTimeSpan">
      <summary>Converts a string to an <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure.</returns>
      <param name="x">A string to convert to an <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.op_GreaterThan(System.Data.OracleClient.OracleTimeSpan,System.Data.OracleClient.OracleTimeSpan)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> to determine whether the first is greater than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.op_GreaterThanOrEqual(System.Data.OracleClient.OracleTimeSpan,System.Data.OracleClient.OracleTimeSpan)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> to determine whether the first is greater than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is greater than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.op_Inequality(System.Data.OracleClient.OracleTimeSpan,System.Data.OracleClient.OracleTimeSpan)">
      <summary>Performs a logical comparison of two instances of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> to determine whether they are equal.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the two instances are not equal or <see cref="F:System.Data.OracleClient.OracleBoolean.False" /> if the two instances are equal. If either instance of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.op_LessThan(System.Data.OracleClient.OracleTimeSpan,System.Data.OracleClient.OracleTimeSpan)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> to determine whether the first is less than the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.op_LessThanOrEqual(System.Data.OracleClient.OracleTimeSpan,System.Data.OracleClient.OracleTimeSpan)">
      <summary>Compares two instances of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> to determine whether the first is less than or equal to the second.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleBoolean" /> that is <see cref="F:System.Data.OracleClient.OracleBoolean.True" /> if the first instance is less than or equal to the second instance, otherwise <see cref="F:System.Data.OracleClient.OracleBoolean.False" />. If either instance of <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> is null, the <see cref="P:System.Data.OracleClient.OracleBoolean.Value" /> of the <see cref="T:System.Data.OracleClient.OracleBoolean" /> is <see cref="F:System.Data.OracleClient.OracleBoolean.Null" />.</returns>
      <param name="x">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
      <param name="y">An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure. </param>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.Parse(System.String)">
      <summary>Converts the specified <see cref="T:System.String" /> representation of a date and time to its <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> equivalent.</summary>
      <returns>An <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure equal to the date and time represented by the specified String.</returns>
      <param name="s">The String to be parsed. </param>
    </member>
    <member name="P:System.Data.OracleClient.OracleTimeSpan.Seconds">
      <summary>Gets the number of whole seconds represented by this instance.</summary>
      <returns>The second component of this instance between 0 and 59.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleTimeSpan.ToString">
      <summary>Converts this <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure to a <see cref="T:System.String" />.</summary>
      <returns>A String representing the <see cref="P:System.Data.OracleClient.OracleTimeSpan.Value" /> property of this <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleTimeSpan.Value">
      <summary>Gets the value of the <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure.</summary>
      <returns>The value of this <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> structure.</returns>
    </member>
    <member name="T:System.Data.OracleClient.OracleTransaction">
      <summary>Represents a transaction to be made in the database.</summary>
    </member>
    <member name="M:System.Data.OracleClient.OracleTransaction.Commit">
      <summary>Commits the SQL database transaction.</summary>
      <exception cref="T:System.Exception">An error occurred while trying to commit the transaction. </exception>
      <exception cref="T:System.InvalidOperationException">The transaction has already been committed or rolled back.-or- The connection is broken. </exception>
    </member>
    <member name="P:System.Data.OracleClient.OracleTransaction.Connection">
      <summary>Specifies the <see cref="T:System.Data.OracleClient.OracleConnection" /> object associated with the transaction.</summary>
      <returns>The <see cref="T:System.Data.OracleClient.OracleConnection" /> object associated with the transaction.</returns>
    </member>
    <member name="P:System.Data.OracleClient.OracleTransaction.IsolationLevel">
      <summary>Specifies the <see cref="T:System.Data.IsolationLevel" /> for this transaction.</summary>
      <returns>The <see cref="T:System.Data.IsolationLevel" /> for this transaction. The default is ReadCommitted.</returns>
    </member>
    <member name="M:System.Data.OracleClient.OracleTransaction.Rollback">
      <summary>Rolls back a transaction from a pending state.</summary>
      <exception cref="T:System.Exception">An error occurred while trying to commit the transaction. </exception>
      <exception cref="T:System.InvalidOperationException">The transaction has already been committed or rolled back.-or- The connection is broken. </exception>
    </member>
    <member name="T:System.Data.OracleClient.OracleType">
      <summary>Specifies the data type of a field or property for use in an <see cref="T:System.Data.OracleClient.OracleParameter" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.BFile">
      <summary>An Oracle BFILE data type that contains a reference to binary data with a maximum size of 4 gigabytes that is stored in an external file. Use the OracleClient <see cref="T:System.Data.OracleClient.OracleBFile" /> data type with the <see cref="P:System.Data.OracleClient.OracleParameter.Value" /> property.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.Blob">
      <summary>An Oracle BLOB data type that contains binary data with a maximum size of 4 gigabytes. Use the OracleClient <see cref="T:System.Data.OracleClient.OracleLob" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.Char">
      <summary>An Oracle CHAR data type that contains a fixed-length character string with a maximum size of 2,000 bytes. Use the .NET Framework <see cref="T:System.String" /> or OracleClient <see cref="T:System.Data.OracleClient.OracleString" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.Clob">
      <summary>An Oracle CLOB data type that contains character data, based on the default character set on the server, with a maximum size of 4 gigabytes. Use the OracleClient <see cref="T:System.Data.OracleClient.OracleLob" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.Cursor">
      <summary>An Oracle REF CURSOR. The <see cref="T:System.Data.OracleClient.OracleDataReader" /> object is not available.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.DateTime">
      <summary>An Oracle DATE data type that contains a fixed-length representation of a date and time, ranging from January 1, 4712 B.C. to December 31, A.D. 4712, with the default format dd-mmm-yy. For A.D. dates, DATE maps to <see cref="T:System.DateTime" />. To bind B.C. dates, use a String parameter and the Oracle TO_DATE or TO_CHAR conversion functions for input and output parameters respectively. Use the .NET Framework <see cref="T:System.DateTime" /> or OracleClient <see cref="T:System.Data.OracleClient.OracleDateTime" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.IntervalDayToSecond">
      <summary>An Oracle INTERVAL DAY TO SECOND data type (Oracle 9i or later) that contains an interval of time in days, hours, minutes, and seconds, and has a fixed size of 11 bytes. Use the .NET Framework <see cref="T:System.TimeSpan" /> or OracleClient <see cref="T:System.Data.OracleClient.OracleTimeSpan" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.IntervalYearToMonth">
      <summary>An Oracle INTERVAL YEAR TO MONTH data type (Oracle 9i or later) that contains an interval of time in years and months, and has a fixed size of 5 bytes. Use the .NET Framework <see cref="T:System.Int32" /> or OracleClient <see cref="T:System.Data.OracleClient.OracleMonthSpan" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.LongRaw">
      <summary>An Oracle LONGRAW data type that contains variable-length binary data with a maximum size of 2 gigabytes. Use the .NET Framework Byte[] or OracleClient <see cref="T:System.Data.OracleClient.OracleBinary" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.LongVarChar">
      <summary>An Oracle LONG data type that contains a variable-length character string with a maximum size of 2 gigabytes. Use the .NET Framework <see cref="T:System.String" /> or OracleClient <see cref="T:System.Data.OracleClient.OracleString" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.NChar">
      <summary>An Oracle NCHAR data type that contains fixed-length character string to be stored in the national character set of the database, with a maximum size of 2,000 bytes (not characters) when stored in the database. The size of the value depends on the national character set of the database. See your Oracle documentation for more information. Use the .NET Framework <see cref="T:System.String" /> or OracleClient <see cref="T:System.Data.OracleClient.OracleString" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.NClob">
      <summary>An Oracle NCLOB data type that contains character data to be stored in the national character set of the database, with a maximum size of 4 gigabytes (not characters) when stored in the database. The size of the value depends on the national character set of the database. See your Oracle documentation for more information. Use the .NET Framework <see cref="T:System.String" /> or OracleClient <see cref="T:System.Data.OracleClient.OracleString" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.Number">
      <summary>An Oracle NUMBER data type that contains variable-length numeric data with a maximum precision and scale of 38. This maps to <see cref="T:System.Decimal" />. To bind an Oracle NUMBER that exceeds what <see cref="F:System.Decimal.MaxValue" /> can contain, either use an <see cref="T:System.Data.OracleClient.OracleNumber" /> data type, or use a String parameter and the Oracle TO_NUMBER or TO_CHAR conversion functions for input and output parameters respectively. Use the .NET Framework <see cref="T:System.Decimal" /> or OracleClient <see cref="T:System.Data.OracleClient.OracleNumber" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.NVarChar">
      <summary>An Oracle NVARCHAR2 data type that contains a variable-length character string stored in the national character set of the database, with a maximum size of 4,000 bytes (not characters) when stored in the database. The size of the value depends on the national character set of the database. See your Oracle documentation for more information. Use the .NET Framework <see cref="T:System.String" /> or OracleClient <see cref="T:System.Data.OracleClient.OracleString" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.Raw">
      <summary>An Oracle RAW data type that contains variable-length binary data with a maximum size of 2,000 bytes. Use the .NET Framework Byte[] or OracleClient <see cref="T:System.Data.OracleClient.OracleBinary" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.RowId">
      <summary>The base64 string representation of an Oracle ROWID data type. Use the .NET Framework <see cref="T:System.String" /> or OracleClient <see cref="T:System.Data.OracleClient.OracleString" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.Timestamp">
      <summary>An Oracle TIMESTAMP (Oracle 9i or later) that contains date and time (including seconds), and ranges in size from 7 to 11 bytes. Use the .NET Framework <see cref="T:System.DateTime" /> or OracleClient <see cref="T:System.Data.OracleClient.OracleDateTime" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.TimestampLocal">
      <summary>An Oracle TIMESTAMP WITH LOCAL TIMEZONE (Oracle 9i or later) that contains date, time, and a reference to the original time zone, and ranges in size from 7 to 11 bytes. Use the .NET Framework <see cref="T:System.DateTime" /> or OracleClient <see cref="T:System.Data.OracleClient.OracleDateTime" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.TimestampWithTZ">
      <summary>An Oracle TIMESTAMP WITH TIMEZONE (Oracle 9i or later) that contains date, time, and a specified time zone, and has a fixed size of 13 bytes. Use the .NET Framework <see cref="T:System.DateTime" /> or OracleClient <see cref="T:System.Data.OracleClient.OracleDateTime" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.VarChar">
      <summary>An Oracle VARCHAR2 data type that contains a variable-length character string with a maximum size of 4,000 bytes. Use the .NET Framework <see cref="T:System.String" /> or OracleClient <see cref="T:System.Data.OracleClient.OracleString" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.Byte">
      <summary>An integral type representing unsigned 8-bit integers with values between 0 and 255. This is not a native Oracle data type, but is provided to improve performance when binding input parameters. Use the .NET Framework <see cref="T:System.Byte" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.UInt16">
      <summary>An integral type representing unsigned 16-bit integers with values between 0 and 65535. This is not a native Oracle data type, but is provided to improve performance when binding input parameters. For information about conversion of Oracle numeric values to common language runtime (CLR) data types, see <see cref="T:System.Data.OracleClient.OracleNumber" />. Use the .NET Framework <see cref="T:System.UInt16" /> or OracleClient <see cref="T:System.Data.OracleClient.OracleNumber" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.UInt32">
      <summary>An integral type representing unsigned 32-bit integers with values between 0 and 4294967295. This is not a native Oracle data type, but is provided to improve performance when binding input parameters. For information about conversion of Oracle numeric values to common language runtime (CLR) data types, see <see cref="T:System.Data.OracleClient.OracleNumber" />. Use the .NET Framework <see cref="T:System.UInt32" /> or OracleClient <see cref="T:System.Data.OracleClient.OracleNumber" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.SByte">
      <summary>An integral type representing signed 8 bit integers with values between -128 and 127. This is not a native Oracle data type, but is provided to improve performance when binding input parameters. Use the .NET Framework <see cref="T:System.SByte" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.Int16">
      <summary>An integral type representing signed 16-bit integers with values between -32768 and 32767. This is not a native Oracle data type, but is provided to improve performance when binding input parameters. For information about conversion of Oracle numeric values to common language runtime (CLR) data types, see <see cref="T:System.Data.OracleClient.OracleNumber" />. Use the .NET Framework <see cref="T:System.Int16" /> or OracleClient <see cref="T:System.Data.OracleClient.OracleNumber" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.Int32">
      <summary>An integral type representing signed 32-bit integers with values between -2147483648 and 2147483647. This is not a native Oracle data type, but is provided for performance when binding input parameters. For information about conversion of Oracle numeric values to common language runtime data types, see <see cref="T:System.Data.OracleClient.OracleNumber" />. Use the .NET Framework <see cref="T:System.Int32" /> or OracleClient <see cref="T:System.Data.OracleClient.OracleNumber" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.Float">
      <summary>A single-precision floating-point value. This is not a native Oracle data type, but is provided to improve performance when binding input parameters. For information about conversion of Oracle numeric values to common language runtime data types, see <see cref="T:System.Data.OracleClient.OracleNumber" />. Use the .NET Framework <see cref="T:System.Single" /> or OracleClient <see cref="T:System.Data.OracleClient.OracleNumber" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
    <member name="F:System.Data.OracleClient.OracleType.Double">
      <summary>A double-precision floating-point value. This is not a native Oracle data type, but is provided to improve performance when binding input parameters. For information about conversion of Oracle numeric values to common language runtime (CLR) data types, see <see cref="T:System.Data.OracleClient.OracleNumber" />. Use the .NET Framework <see cref="T:System.Double" /> or OracleClient <see cref="T:System.Data.OracleClient.OracleNumber" /> data type in <see cref="P:System.Data.OracleClient.OracleParameter.Value" />.</summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Data.Entity.Design.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Entity.Design</name>
  </assembly>
  <members>
    <member name="T:System.Data.Entity.Design.EdmToObjectNamespaceMap">
      <summary>Represents a collection of conceptual model to code namespace mappings.</summary>
    </member>
    <member name="M:System.Data.Entity.Design.EdmToObjectNamespaceMap.Add(System.String,System.String)">
      <summary>Adds a namespace mapping to the <see cref="T:System.Data.Entity.Design.EdmToObjectNamespaceMap" />.</summary>
      <param name="edmNamespace">The model namespace name.</param>
      <param name="objectNamespace">The code namespace name.</param>
    </member>
    <member name="M:System.Data.Entity.Design.EdmToObjectNamespaceMap.Clear">
      <summary>Removes all namespace mappings from the <see cref="T:System.Data.Entity.Design.EdmToObjectNamespaceMap" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Design.EdmToObjectNamespaceMap.Contains(System.String)">
      <summary>Gets a value indicating whether the <see cref="T:System.Data.Entity.Design.EdmToObjectNamespaceMap" /> contains the specified model namespace name.</summary>
      <returns>true if the model namespace name is found; otherwise false.</returns>
      <param name="edmNamespace">The model namespace name.</param>
    </member>
    <member name="P:System.Data.Entity.Design.EdmToObjectNamespaceMap.Count">
      <summary>Gets the number of mappings in the <see cref="T:System.Data.Entity.Design.EdmToObjectNamespaceMap" />.</summary>
      <returns>The number of mappings.</returns>
    </member>
    <member name="P:System.Data.Entity.Design.EdmToObjectNamespaceMap.EdmNamespaces">
      <summary>Gets the list of model namespace names in the <see cref="T:System.Data.Entity.Design.EdmToObjectNamespaceMap" />.</summary>
      <returns>The list of model namespace names.</returns>
    </member>
    <member name="P:System.Data.Entity.Design.EdmToObjectNamespaceMap.Item(System.String)">
      <summary>Gets or sets the code namespace name of the specified model namespace name.</summary>
      <returns>The code namespace name that maps to the specified model namespace name.</returns>
      <param name="edmNamespace">The model namespace name.</param>
    </member>
    <member name="M:System.Data.Entity.Design.EdmToObjectNamespaceMap.Remove(System.String)">
      <summary>Removes the specified namespace mapping.</summary>
      <returns>true if the namespace mapping was successfully removed; otherwise false.</returns>
      <param name="edmNamespace">The model namespace mapping to remove.</param>
    </member>
    <member name="M:System.Data.Entity.Design.EdmToObjectNamespaceMap.TryGetObjectNamespace(System.String,System.String@)">
      <summary>Gets a value indicating whether the object namespace was retrieved.</summary>
      <returns>true if the object namespace was retrieved; otherwise false.</returns>
      <param name="edmNamespace">The model namespace name.</param>
      <param name="objectNamespace">The code namespace name.</param>
    </member>
    <member name="T:System.Data.Entity.Design.EntityClassGenerator">
      <summary>Generates object context and entity classes (object layer code) from conceptual schema definition language (CSDL) files.</summary>
    </member>
    <member name="M:System.Data.Entity.Design.EntityClassGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Design.EntityClassGenerator" /> class with a <see cref="F:System.Data.Entity.Design.LanguageOption.GenerateCSharpCode" /> language option. </summary>
    </member>
    <member name="M:System.Data.Entity.Design.EntityClassGenerator.#ctor(System.Data.Entity.Design.LanguageOption)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Design.EntityClassGenerator" /> class with the specified <see cref="T:System.Data.Entity.Design.LanguageOption" />. </summary>
      <param name="languageOption">A <see cref="T:System.Data.Entity.Design.LanguageOption" /> value that specifies the language of the generated code. The default language is C#.</param>
    </member>
    <member name="P:System.Data.Entity.Design.EntityClassGenerator.EdmToObjectNamespaceMap">
      <summary>Gets an <see cref="T:System.Data.Entity.Design.EdmToObjectNamespaceMap" /> that contains the conceptual schema definition language (CSDL) to code namespace mappings.</summary>
      <returns>The CSDL to code namespace mappings.</returns>
    </member>
    <member name="M:System.Data.Entity.Design.EntityClassGenerator.GenerateCode(System.String,System.String)">
      <summary>Generates a source code file that contains the objects that were generated from the specified conceptual schema definition language (CSDL) file.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Data.Metadata.Edm.EdmSchemaError" /> that contains any generated errors.</returns>
      <param name="sourceEdmSchemaFilePath">The CSDL file path.</param>
      <param name="targetFilePath">The generated source code file path.</param>
    </member>
    <member name="M:System.Data.Entity.Design.EntityClassGenerator.GenerateCode(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Generates source code using the specified conceptual schema definition language (CSDL) file. The list of schema file paths is used to resolve any references contained in the CSDL file.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Data.Metadata.Edm.EdmSchemaError" /> objects that contains any generated errors.</returns>
      <param name="sourceEdmSchemaFilePath">The CSDL file path.</param>
      <param name="targetPath">The generated source code file path.</param>
      <param name="additionalEdmSchemaFilePaths">A list of schema file paths that can be used to resolve any references in the source schema (the CSDL file). If the source schema does not have any dependencies, pass in an empty list.</param>
    </member>
    <member name="M:System.Data.Entity.Design.EntityClassGenerator.GenerateCode(System.Xml.XmlReader,System.IO.TextWriter)">
      <summary>Generates source code using the conceptual schema definition language (CSDL) file contained in the <see cref="T:System.Xml.XmlReader" /> object and outputs the generated source code to a <see cref="T:System.IO.TextWriter" />.</summary>
      <returns>An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Data.Metadata.Edm.EdmSchemaError" /> that contains any generated errors.</returns>
      <param name="sourceEdmSchema">An <see cref="T:System.Xml.XmlReader" /> that contains the CSDL file.</param>
      <param name="target">The <see cref="T:System.IO.TextWriter" /> to which the source code is written.</param>
    </member>
    <member name="M:System.Data.Entity.Design.EntityClassGenerator.GenerateCode(System.Xml.XmlReader,System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Generates source code based on the conceptual schema definition language (CSDL) file in the <see cref="T:System.Xml.XmlReader" /> object, then outputs the generated source code to a <see cref="T:System.IO.TextWriter" />. An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Xml.XmlReader" /> objects is used to resolve any references that are contained in the CSDL file.</summary>
      <returns>A list of <see cref="T:System.Data.Metadata.Edm.EdmSchemaError" /> objects that contains any generated errors.</returns>
      <param name="sourceEdmSchema">An <see cref="T:System.Xml.XmlReader" /> that contains the CSDL file.</param>
      <param name="target">The <see cref="T:System.IO.TextWriter" /> to which you want to output the generated source code.</param>
      <param name="additionalEdmSchemas">The list of <see cref="T:System.Xml.XmlReader" /> objects that contain schemas that are referenced by the source schema (the CSDL file). If the source schema does not have any dependencies, pass in an empty <see cref="T:System.Collections.IList" /> object.</param>
    </member>
    <member name="P:System.Data.Entity.Design.EntityClassGenerator.LanguageOption">
      <summary>Gets or sets a <see cref="T:System.Data.Entity.Design.LanguageOption" /> value that indicates the language of the generated code. </summary>
      <returns>One of the <see cref="T:System.Data.Entity.Design.LanguageOption" /> values. The default is <see cref="F:System.Data.Entity.Design.LanguageOption.GenerateCSharpCode" />.</returns>
    </member>
    <member name="E:System.Data.Entity.Design.EntityClassGenerator.OnPropertyGenerated">
      <summary>Occurs when a property has changed.</summary>
    </member>
    <member name="E:System.Data.Entity.Design.EntityClassGenerator.OnTypeGenerated">
      <summary>Occurs when type information has changed.</summary>
    </member>
    <member name="T:System.Data.Entity.Design.EntityCodeGenerator">
      <summary>Generates object layer source code from conceptual schema definition language (CSDL).</summary>
    </member>
    <member name="M:System.Data.Entity.Design.EntityCodeGenerator.#ctor(System.Data.Entity.Design.LanguageOption)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Design.EntityCodeGenerator" /> class with the specified <see cref="T:System.Data.Entity.Design.LanguageOption" />.</summary>
      <param name="languageOption">Specifies the language of the generated code.</param>
    </member>
    <member name="P:System.Data.Entity.Design.EntityCodeGenerator.EdmToObjectNamespaceMap">
      <summary>Gets an <see cref="T:System.Data.Entity.Design.EdmToObjectNamespaceMap" /> that contains the conceptual schema definition language (CSDL) to code namespace mappings.</summary>
      <returns>The CSDL to code namespace mappings.</returns>
    </member>
    <member name="M:System.Data.Entity.Design.EntityCodeGenerator.GenerateCode(System.String,System.String)">
      <summary>Creates a source code file that contains the object layer code generated from the specified conceptual schema definition language (CSDL) file.</summary>
      <returns>A list of <see cref="T:System.Data.Metadata.Edm.EdmSchemaError" /> objects that contains any generated errors.</returns>
      <param name="sourceEdmSchemaFilePath">The path of the CSDL file.</param>
      <param name="targetPath">The path of the file that contains the generated object layer code.</param>
    </member>
    <member name="M:System.Data.Entity.Design.EntityCodeGenerator.GenerateCode(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Creates a source code file that contains object layer code generated from the specified conceptual schema definition language (CSDL) file. The list of schema file paths is used to resolve any references contained in the CSDL file.</summary>
      <returns>A list of <see cref="T:System.Data.Metadata.Edm.EdmSchemaError" /> objects that contains any generated errors.</returns>
      <param name="sourceEdmSchemaFilePath">The path of the CSDL file.</param>
      <param name="targetPath">The path of the file that contains the generated object layer code.</param>
      <param name="additionalEdmSchemaFilePaths">A list of schema file paths that can be used to resolve any references in the source schema (the CSDL file). If the source schema does not have any dependencies, pass in an empty list.</param>
    </member>
    <member name="M:System.Data.Entity.Design.EntityCodeGenerator.GenerateCode(System.Xml.XmlReader,System.IO.TextWriter)">
      <summary>Generates object layer code using the conceptual schema definition language (CSDL) specified in the <see cref="T:System.Xml.XmlReader" /> object, and outputs the generated code to a <see cref="T:System.IO.TextWriter" />.</summary>
      <returns>A list of <see cref="T:System.Data.Metadata.Edm.EdmSchemaError" /> objects that contains any generated errors.</returns>
      <param name="sourceEdmSchema">An <see cref="T:System.Xml.XmlReader" /> that contains the CSDL.</param>
      <param name="target">The <see cref="T:System.IO.TextWriter" /> to which the object layer code is written.</param>
    </member>
    <member name="M:System.Data.Entity.Design.EntityCodeGenerator.GenerateCode(System.Xml.XmlReader,System.IO.TextWriter,System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Generates object layer code based on the conceptual schema definition language (CSDL) specified in the <see cref="T:System.Xml.XmlReader" /> object, then outputs the generated code to a <see cref="T:System.IO.TextWriter" />. An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Xml.XmlReader" /> objects is used to resolve any references that are contained in the CSDL.</summary>
      <returns>A list of <see cref="T:System.Data.Metadata.Edm.EdmSchemaError" /> objects that contains any generated errors.</returns>
      <param name="sourceEdmSchema">An <see cref="T:System.Xml.XmlReader" /> that contains the CSDL.</param>
      <param name="target">The <see cref="T:System.IO.TextWriter" /> to which you want to output the generated object layer code.</param>
      <param name="additionalEdmSchemas">A list of <see cref="T:System.Xml.XmlReader" /> objects that contain schemas that are referenced by the source schema (the CSDL). If the source schema does not have any dependencies, pass in an empty <see cref="T:System.Collections.IList" /> object.</param>
    </member>
    <member name="P:System.Data.Entity.Design.EntityCodeGenerator.LanguageOption">
      <summary>Gets or sets a <see cref="T:System.Data.Entity.Design.LanguageOption" /> value that indicates the language of the generated code. </summary>
      <returns>One of the <see cref="T:System.Data.Entity.Design.LanguageOption" /> values.</returns>
    </member>
    <member name="T:System.Data.Entity.Design.EntityFrameworkVersions">
      <summary>Provides information about different versions of the Entity Framework.</summary>
    </member>
    <member name="M:System.Data.Entity.Design.EntityFrameworkVersions.GetSchemaXsd(System.Version,System.Data.Metadata.Edm.DataSpace)">
      <summary>Returns a stream of the XSD that corresponds to the specified Entity Framework version, with default model names as specified in the <see cref="T:System.Data.Metadata.Edm.DataSpace" /> parameter.</summary>
      <returns>A <see cref="T:System.IO.Stream" /> of the XSD that corresponds to the specified Entity Framework version and <see cref="T:System.Data.Metadata.Edm.DataSpace" />.</returns>
      <param name="entityFrameworkVersion">The property of <see cref="T:System.Data.Entity.Design.EntityFrameworkVersions" /> that corresponds to the targeted version of the Entity Framework.</param>
      <param name="dataSpace">The desired <see cref="T:System.Data.Metadata.Edm.DataSpace" /> of the XSD.</param>
    </member>
    <member name="F:System.Data.Entity.Design.EntityFrameworkVersions.Version1">
      <summary>A read-only property that represents version 1 of the Entity Framework.</summary>
      <returns>A <see cref="T:System.Version" /> object that represents version 1 of the Entity Framework.</returns>
    </member>
    <member name="F:System.Data.Entity.Design.EntityFrameworkVersions.Version2">
      <summary>A read-only property that represents version 2 of the Entity Framework.</summary>
      <returns>A <see cref="T:System.Version" /> object that represents version 2 of the Entity Framework.</returns>
    </member>
    <member name="T:System.Data.Entity.Design.EntityModelSchemaGenerator">
      <summary>Generates conceptual schema definition language (CSDL) and mapping specification language (MSL), based on store schema definition language (SSDL).</summary>
    </member>
    <member name="M:System.Data.Entity.Design.EntityModelSchemaGenerator.#ctor(System.Data.Metadata.Edm.EntityContainer)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Design.EntityModelSchemaGenerator" /> class.</summary>
      <param name="storeEntityContainer">The storage model <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> from which conceptual and mapping metadata is created.</param>
    </member>
    <member name="M:System.Data.Entity.Design.EntityModelSchemaGenerator.#ctor(System.Data.Metadata.Edm.EntityContainer,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Design.EntityModelSchemaGenerator" /> class.</summary>
      <param name="storeEntityContainer">The storage model <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> from which conceptual and mapping metadata is created.</param>
      <param name="namespaceName">The name for the conceptual model namespace. If this value is null, the <paramref name="storeEntityContainer" /> name is used for the namespace name.</param>
      <param name="modelEntityContainerName">The EntityContainer name declared in the conceptual model.</param>
    </member>
    <member name="P:System.Data.Entity.Design.EntityModelSchemaGenerator.EdmItemCollection">
      <summary>Gets the <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> that was created by the <see cref="M:System.Data.Entity.Design.EntityModelSchemaGenerator.GenerateMetadata" /> method.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> object that contains the conceptual schema definition language (CSDL).</returns>
    </member>
    <member name="P:System.Data.Entity.Design.EntityModelSchemaGenerator.EntityContainer">
      <summary>Gets the conceptual model <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> that was created by the <see cref="M:System.Data.Entity.Design.EntityModelSchemaGenerator.GenerateMetadata" /> method.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object that contains the conceptual model EntityContainer.</returns>
    </member>
    <member name="P:System.Data.Entity.Design.EntityModelSchemaGenerator.GenerateForeignKeyProperties">
      <summary>Gets or sets the flag for generating foreign key properties in a conceptual model.</summary>
      <returns>If the value of this property is set to true then foreign key properties are generated in the conceptual model; otherwise foreign key properties are not generated in the conceptual model.</returns>
    </member>
    <member name="M:System.Data.Entity.Design.EntityModelSchemaGenerator.GenerateMetadata">
      <summary>Generates the conceptual model metadata information and returns any schema errors.</summary>
      <returns>A collection of <see cref="T:System.Data.Metadata.Edm.EdmSchemaError" /> objects.</returns>
    </member>
    <member name="M:System.Data.Entity.Design.EntityModelSchemaGenerator.GenerateMetadata(System.Version)">
      <summary>Generates the conceptual model metadata information and returns any schema errors.</summary>
      <returns>A collection of <see cref="T:System.Data.Metadata.Edm.EdmSchemaError" /> objects.</returns>
      <param name="targetEntityFrameworkVersion">The property of <see cref="T:System.Data.Entity.Design.EntityFrameworkVersions" /> that corresponds to the targeted version of the Entity Framework.</param>
    </member>
    <member name="P:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService">
      <summary>Gets or sets the <see cref="T:System.Data.Entity.Design.PluralizationServices.PluralizationService" /> value that indicates the service used when generating a model.</summary>
      <returns>The <see cref="T:System.Data.Entity.Design.PluralizationServices.PluralizationService" /> value that indicates the service used when generating a model.</returns>
    </member>
    <member name="M:System.Data.Entity.Design.EntityModelSchemaGenerator.WriteModelSchema(System.String)">
      <summary>Writes the generated conceptual schema definition language (CSDL) to the specified file.</summary>
      <param name="outputFileName">The name of the output file.</param>
    </member>
    <member name="M:System.Data.Entity.Design.EntityModelSchemaGenerator.WriteModelSchema(System.Xml.XmlWriter)">
      <summary>Writes the generated conceptual schema definition language (CSDL) to an <see cref="T:System.Xml.XmlWriter" /> object.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to which the CSDL is written.</param>
    </member>
    <member name="M:System.Data.Entity.Design.EntityModelSchemaGenerator.WriteStorageMapping(System.String)">
      <summary>Writes the generated mapping specification language (MSL) to the specified file.</summary>
      <param name="outputFileName">The name of the output file.</param>
    </member>
    <member name="M:System.Data.Entity.Design.EntityModelSchemaGenerator.WriteStorageMapping(System.Xml.XmlWriter)">
      <summary>Writes the generated mapping specification language (MSL) to an <see cref="T:System.Xml.XmlWriter" /> object.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to which the MSL is written.</param>
    </member>
    <member name="T:System.Data.Entity.Design.EntityStoreSchemaFilterEffect">
      <summary>Specifies whether to allow or exclude database objects that match the pattern specified in the <see cref="T:System.Data.Entity.Design.EntityStoreSchemaFilterEntry" />.</summary>
    </member>
    <member name="F:System.Data.Entity.Design.EntityStoreSchemaFilterEffect.Allow">
      <summary>Allow the entries that match the specified pattern.</summary>
    </member>
    <member name="F:System.Data.Entity.Design.EntityStoreSchemaFilterEffect.Exclude">
      <summary>Exclude the entries that match the specified pattern.</summary>
    </member>
    <member name="T:System.Data.Entity.Design.EntityStoreSchemaFilterEntry">
      <summary>Represents a single filter entry. The filter is used to allow or exclude particular database objects during generation.</summary>
    </member>
    <member name="M:System.Data.Entity.Design.EntityStoreSchemaFilterEntry.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Design.EntityStoreSchemaFilterEntry" /> class with the specified catalog, schema, and name filters. </summary>
      <param name="catalog">The pattern to use to select the appropriate catalog.</param>
      <param name="schema">The pattern to use to select the appropriate schema or null to not limit by schema.</param>
      <param name="name">The pattern to use to select the appropriate name or null to not limit by name.</param>
    </member>
    <member name="M:System.Data.Entity.Design.EntityStoreSchemaFilterEntry.#ctor(System.String,System.String,System.String,System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes,System.Data.Entity.Design.EntityStoreSchemaFilterEffect)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Design.EntityStoreSchemaFilterEntry" /> class the specified catalog, schema, name, and type filters, and filter effect setting.</summary>
      <param name="catalog">The pattern to use to select the appropriate catalog or null to not limit by catalog.</param>
      <param name="schema">The pattern to use to select the appropriate schema or null to not limit by schema.</param>
      <param name="name">The pattern to use to select the appropriate name or null to not limit by name.</param>
      <param name="types">The type of objects to apply this filter to.</param>
      <param name="effect">An <see cref="T:System.Data.Entity.Design.EntityStoreSchemaFilterEffect" /> value indicating whether to allow or exclude entries that match the specified filters.</param>
    </member>
    <member name="P:System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Catalog">
      <summary>Gets the pattern that will be used to select the appropriate catalog.</summary>
      <returns>The Catalog part of the database name where the database name is formatted as Catalog.Schema.Name.</returns>
    </member>
    <member name="P:System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Effect">
      <summary>Gets the effect that this filter has on results.</summary>
      <returns>An <see cref="T:System.Data.Entity.Design.EntityStoreSchemaFilterEffect" /> value that indicates whether to allow or exclude entries that match the specified filters.</returns>
    </member>
    <member name="P:System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Name">
      <summary>Gets the pattern that will be used to select the appropriate name.</summary>
      <returns>The Name part of the database name where the database name is formatted as Catalog.Schema.Name.</returns>
    </member>
    <member name="P:System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Schema">
      <summary>Gets the pattern that will be used to select the appropriate schema.</summary>
      <returns>The Schema part of the database name where the database name is formatted as Catalog.Schema.Name.</returns>
    </member>
    <member name="P:System.Data.Entity.Design.EntityStoreSchemaFilterEntry.Types">
      <summary>Gets the types of objects that this filter applies to.</summary>
      <returns>An <see cref="T:System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes" /> value indicating the types of objects to apply to the filter to.</returns>
    </member>
    <member name="T:System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes">
      <summary>Specifies the store object type to apply the schema filter to.</summary>
    </member>
    <member name="F:System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes.None">
      <summary>Initial value. This is not a valid value to apply.</summary>
    </member>
    <member name="F:System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes.Table">
      <summary>Apply the filter to table object types.</summary>
    </member>
    <member name="F:System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes.View">
      <summary>Apply the filter to view object types.</summary>
    </member>
    <member name="F:System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes.Function">
      <summary>Apply this filter to function object types.</summary>
    </member>
    <member name="F:System.Data.Entity.Design.EntityStoreSchemaFilterObjectTypes.All">
      <summary>Apply the filter to all object types.</summary>
    </member>
    <member name="T:System.Data.Entity.Design.EntityStoreSchemaGenerator">
      <summary>Provides methods and properties for loading database schema information and generating store schema definition language (SSDL).</summary>
    </member>
    <member name="M:System.Data.Entity.Design.EntityStoreSchemaGenerator.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Design.EntityStoreSchemaGenerator" /> class. </summary>
      <param name="providerInvariantName">The invariant name of a provider.The invariant name is a name that can be used programmatically to refer to the data provider. You can retrieve information about all of the data providers installed on the local computer by using the <see cref="M:System.Data.Common.DbProviderFactories.GetFactoryClasses" />  method.</param>
      <param name="connectionString">The connection used to open the database.</param>
      <param name="namespaceName">The namespace name for the store schema definition language (SSDL).</param>
    </member>
    <member name="M:System.Data.Entity.Design.EntityStoreSchemaGenerator.CreateStoreSchemaConnection(System.String,System.String)">
      <summary>Creates an <see cref="T:System.Data.EntityClient.EntityConnection" /> loaded with the conceptual schema metadata of the specified the provider.</summary>
      <returns>An <see cref="T:System.Data.EntityClient.EntityConnection" /> that can query the <see cref="F:System.Data.Common.DbProviderManifest.ConceptualSchemaDefinition" /> for the provider.</returns>
      <param name="providerInvariantName">The invariant name of a provider.The invariant name is a name that can be used programmatically to refer to the data provider. You can retrieve information about all of the data providers installed on the local computer by using the <see cref="M:System.Data.Common.DbProviderFactories.GetFactoryClasses" />  method.</param>
      <param name="connectionString">The connection used to open the database.</param>
    </member>
    <member name="P:System.Data.Entity.Design.EntityStoreSchemaGenerator.EntityContainer">
      <summary>Gets the storage model <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> that was created. The returned <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> is the same as the <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> in the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> that is returned by the <see cref="P:System.Data.Entity.Design.EntityStoreSchemaGenerator.StoreItemCollection" /> property.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EntityContainer" /> object.</returns>
    </member>
    <member name="P:System.Data.Entity.Design.EntityStoreSchemaGenerator.GenerateForeignKeyProperties">
      <summary>Gets or sets the flag for generating foreign key properties in a storage model.</summary>
      <returns>true (True in Visual Basic) if foreign key properties are generated in the storage model; false (False in Visual Basic) otherwise.</returns>
    </member>
    <member name="M:System.Data.Entity.Design.EntityStoreSchemaGenerator.GenerateStoreMetadata">
      <summary>Generates store metadata and returns any schema errors.</summary>
      <returns>A collection of <see cref="T:System.Data.Metadata.Edm.EdmSchemaError" /> objects</returns>
    </member>
    <member name="M:System.Data.Entity.Design.EntityStoreSchemaGenerator.GenerateStoreMetadata(System.Collections.Generic.IEnumerable{System.Data.Entity.Design.EntityStoreSchemaFilterEntry})">
      <summary>Generates store metadata and returns any schema errors.</summary>
      <returns>A collection of <see cref="T:System.Data.Metadata.Edm.EdmSchemaError" /> objects.</returns>
      <param name="filters">An <see cref="T:System.Data.Entity.Design.EntityStoreSchemaFilterEntry" /> that specifies which database objects to allow or exclude during generation.</param>
    </member>
    <member name="M:System.Data.Entity.Design.EntityStoreSchemaGenerator.GenerateStoreMetadata(System.Collections.Generic.IEnumerable{System.Data.Entity.Design.EntityStoreSchemaFilterEntry},System.Version)">
      <summary>Generates store schema definition language (SSDL) and returns any schema errors.</summary>
      <returns>A collection of <see cref="T:System.Data.Metadata.Edm.EdmSchemaError" /> objects.</returns>
      <param name="filters">An <see cref="T:System.Data.Entity.Design.EntityStoreSchemaFilterEntry" /> that specifies which database objects to allow or exclude during generation.</param>
      <param name="targetEntityFrameworkVersion">The property of <see cref="T:System.Data.Entity.Design.EntityFrameworkVersions" /> that corresponds to the targeted version of the Entity Framework.</param>
    </member>
    <member name="P:System.Data.Entity.Design.EntityStoreSchemaGenerator.StoreItemCollection">
      <summary>Gets the <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> that was created.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> object.</returns>
    </member>
    <member name="M:System.Data.Entity.Design.EntityStoreSchemaGenerator.WriteStoreSchema(System.String)">
      <summary>Writes the generated store schema definition language (SSDL) to a file.</summary>
      <param name="outputFileName">The name of the output file.</param>
    </member>
    <member name="M:System.Data.Entity.Design.EntityStoreSchemaGenerator.WriteStoreSchema(System.Xml.XmlWriter)">
      <summary>Writes the generated store schema definition language (SSDL) to an <see cref="T:System.Xml.XmlWriter" /> object.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to which the SSDL is written.</param>
    </member>
    <member name="T:System.Data.Entity.Design.EntityViewGenerator">
      <summary>Generates views for the extents in the <see cref="T:System.Data.Mapping.StorageMappingItemCollection" />, and creates a source code file for a type that will cache these views.</summary>
    </member>
    <member name="M:System.Data.Entity.Design.EntityViewGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Design.EntityViewGenerator" /> class with a <see cref="F:System.Data.Entity.Design.LanguageOption.GenerateCSharpCode" /> language option.</summary>
    </member>
    <member name="M:System.Data.Entity.Design.EntityViewGenerator.#ctor(System.Data.Entity.Design.LanguageOption)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Design.EntityViewGenerator" /> class with the specified <see cref="T:System.Data.Entity.Design.LanguageOption" />.</summary>
      <param name="languageOption">One of the <see cref="T:System.Data.Entity.Design.LanguageOption" /> values that specifies the language of the generated code. The default language is C#.</param>
    </member>
    <member name="M:System.Data.Entity.Design.EntityViewGenerator.GenerateViews(System.Data.Mapping.StorageMappingItemCollection,System.IO.TextWriter)">
      <summary>Generates views at compile time for the extents in a <see cref="T:System.Data.Mapping.StorageMappingItemCollection" />. Sends a source code file to a <see cref="T:System.IO.TextWriter" /> to make these views available at run time.</summary>
      <returns>A list that contains any generated errors.</returns>
      <param name="mappingCollection">The <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> from which views will be generated. </param>
      <param name="outputWriter">The <see cref="T:System.IO.TextWriter" /> to which the generated code will be sent.</param>
    </member>
    <member name="M:System.Data.Entity.Design.EntityViewGenerator.GenerateViews(System.Data.Mapping.StorageMappingItemCollection,System.IO.TextWriter,System.Version)">
      <summary>Generates views at compile time for the extents in a <see cref="T:System.Data.Mapping.StorageMappingItemCollection" />. Sends a source code file to a <see cref="T:System.IO.TextWriter" /> to make these views available at run time.</summary>
      <returns>A list that contains any generated errors.</returns>
      <param name="mappingCollection">The <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> to be validated.</param>
      <param name="outputWriter">The <see cref="T:System.IO.TextWriter" /> to which the output is written.</param>
      <param name="targetEntityFrameworkVersion">The property of <see cref="T:System.Data.Entity.Design.EntityFrameworkVersions" /> that corresponds to the targeted version of the Entity Framework.</param>
    </member>
    <member name="M:System.Data.Entity.Design.EntityViewGenerator.GenerateViews(System.Data.Mapping.StorageMappingItemCollection,System.String)">
      <summary>Generates views at compile time for the extents in a <see cref="T:System.Data.Mapping.StorageMappingItemCollection" />. Writes a source code file to a specified location that makes the views available at run time.</summary>
      <returns>A list that contains any generated errors.</returns>
      <param name="mappingCollection">The <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> from which views will be generated.</param>
      <param name="outputPath">The <see cref="T:System.String" /> that specifies the location to which the source code file will be written.</param>
    </member>
    <member name="P:System.Data.Entity.Design.EntityViewGenerator.LanguageOption">
      <summary>Gets or sets a <see cref="T:System.Data.Entity.Design.LanguageOption" /> value that indicates the language of the generated code.</summary>
      <returns>One of the <see cref="T:System.Data.Entity.Design.LanguageOption" /> values. The default is <see cref="F:System.Data.Entity.Design.LanguageOption.GenerateCSharpCode" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Design.EntityViewGenerator.Validate(System.Data.Mapping.StorageMappingItemCollection)">
      <summary>Validates a <see cref="T:System.Data.Mapping.StorageMappingItemCollection" />.</summary>
      <returns>A list that contains any generated errors.</returns>
      <param name="mappingCollection">The <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> to be validated.</param>
    </member>
    <member name="M:System.Data.Entity.Design.EntityViewGenerator.Validate(System.Data.Mapping.StorageMappingItemCollection,System.Version)">
      <summary>Validates a <see cref="T:System.Data.Mapping.StorageMappingItemCollection" />.</summary>
      <returns>A list that contains any validation errors. </returns>
      <param name="mappingCollection">The <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> to be validated.</param>
      <param name="targetEntityFrameworkVersion">The property of <see cref="T:System.Data.Entity.Design.EntityFrameworkVersions" /> that corresponds to the targeted version of the Entity Framework.</param>
    </member>
    <member name="T:System.Data.Entity.Design.LanguageOption">
      <summary>Specifies the language for the generated code.</summary>
    </member>
    <member name="F:System.Data.Entity.Design.LanguageOption.GenerateCSharpCode">
      <summary>C# code. This is the default.</summary>
    </member>
    <member name="F:System.Data.Entity.Design.LanguageOption.GenerateVBCode">
      <summary>Visual Basic code. </summary>
    </member>
    <member name="T:System.Data.Entity.Design.MetadataItemCollectionFactory">
      <summary>Represents a set of methods for creating metadata <see cref="T:System.Data.Metadata.Edm.ItemCollection" /> instances.</summary>
    </member>
    <member name="M:System.Data.Entity.Design.MetadataItemCollectionFactory.CreateEdmItemCollection(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.Generic.IList{System.Data.Metadata.Edm.EdmSchemaError}@)">
      <summary>Creates an <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> and loads the metadata that is contained in the <see cref="T:System.Collections.IEnumerable" /> of <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> that contains the specified metadata.</returns>
      <param name="readers">An <see cref="T:System.Collections.IEnumerable" /> of <see cref="T:System.Xml.XmlReader" /> that contains the metadata files.</param>
      <param name="errors">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Data.Metadata.Edm.EdmSchemaError" />. Any errors that are generated during the <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> creation are added to the list.</param>
    </member>
    <member name="M:System.Data.Entity.Design.MetadataItemCollectionFactory.CreateEdmItemCollection(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Version,System.Collections.Generic.IList{System.Data.Metadata.Edm.EdmSchemaError}@)">
      <summary>Creates an <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> and loads the metadata that is contained in the <see cref="T:System.Collections.IEnumerable" /> of <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>An <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> that contains the specified metadata.</returns>
      <param name="readers">An <see cref="T:System.Collections.IEnumerable" /> of <see cref="T:System.Xml.XmlReader" /> that contains the metadata files.</param>
      <param name="targetEntityFrameworkVersion">The property of <see cref="T:System.Data.Entity.Design.EntityFrameworkVersions" /> that corresponds to the targeted version of the Entity Framework.</param>
      <param name="errors">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Data.Metadata.Edm.EdmSchemaError" />. Any errors that are generated during the <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> creation are added to the list.</param>
    </member>
    <member name="M:System.Data.Entity.Design.MetadataItemCollectionFactory.CreateStorageMappingItemCollection(System.Data.Metadata.Edm.EdmItemCollection,System.Data.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.Generic.IList{System.Data.Metadata.Edm.EdmSchemaError}@)">
      <summary>Creates a <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> and loads the metadata that is contained in the specified <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" />, <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />, and collection of <see cref="T:System.Xml.XmlReader" /> objects.</summary>
      <returns>A <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> that contains the specified metadata.</returns>
      <param name="edmCollection">An <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> object.</param>
      <param name="storeCollection">A <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> object.</param>
      <param name="readers">An <see cref="T:System.Collections.IEnumerable" /> of <see cref="T:System.Xml.XmlReader" /> containing the metadata files.</param>
      <param name="errors">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Data.Metadata.Edm.EdmSchemaError" />. Any errors generated during the <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> creation are added to the list.</param>
    </member>
    <member name="M:System.Data.Entity.Design.MetadataItemCollectionFactory.CreateStorageMappingItemCollection(System.Data.Metadata.Edm.EdmItemCollection,System.Data.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Version,System.Collections.Generic.IList{System.Data.Metadata.Edm.EdmSchemaError}@)">
      <summary>Creates a <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> from the mapping information in the <see cref="T:System.Xml.XmlReader" /> objects and the metadata in the specified <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> and <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> objects.</summary>
      <returns>A <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> that contains the specified metadata.</returns>
      <param name="edmCollection">An <see cref="T:System.Data.Metadata.Edm.EdmItemCollection" /> object.</param>
      <param name="storeCollection">A <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> object.</param>
      <param name="readers">An <see cref="T:System.Collections.IEnumerable" /> of <see cref="T:System.Xml.XmlReader" /> containing the metadata files.</param>
      <param name="targetEntityFrameworkVersion">The property of <see cref="T:System.Data.Entity.Design.EntityFrameworkVersions" /> that corresponds to the targeted version of the Entity Framework.</param>
      <param name="errors">An <see cref="T:System.Collections.IList" /> of <see cref="T:System.Data.Metadata.Edm.EdmSchemaError" />. Any errors generated during the <see cref="T:System.Data.Mapping.StorageMappingItemCollection" /> creation are added to the list.</param>
    </member>
    <member name="M:System.Data.Entity.Design.MetadataItemCollectionFactory.CreateStoreItemCollection(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.Generic.IList{System.Data.Metadata.Edm.EdmSchemaError}@)">
      <summary>Constructs a <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> and provides a list of errors and warnings.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />.</returns>
      <param name="readers">A collection of <see cref="T:System.Xml.XmlReader" /> objects, each of which each reads from a storage model file. The storage model file is written in the store schema definition language (SSDL).</param>
      <param name="errors">A list of errors that were encountered while loading the SSDL metadata.</param>
    </member>
    <member name="M:System.Data.Entity.Design.MetadataItemCollectionFactory.CreateStoreItemCollection(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Version,System.Collections.Generic.IList{System.Data.Metadata.Edm.EdmSchemaError}@)">
      <summary>Constructs a <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" /> and provides a list of errors and warnings.</summary>
      <returns>A <see cref="T:System.Data.Metadata.Edm.StoreItemCollection" />.</returns>
      <param name="readers">A collection of <see cref="T:System.Xml.XmlReader" /> objects, each of which each reads from a storage model file. The storage model file is written in the store schema definition language (SSDL).</param>
      <param name="targetEntityFrameworkVersion">The property of <see cref="T:System.Data.Entity.Design.EntityFrameworkVersions" /> that corresponds to the targeted version of the Entity Framework.</param>
      <param name="errors">A list of errors that were encountered while loading the SSDL metadata.</param>
    </member>
    <member name="T:System.Data.Entity.Design.PropertyGeneratedEventArgs">
      <summary>Provides data for the <see cref="E:System.Data.Entity.Design.EntityClassGenerator.OnPropertyGenerated" /> event. </summary>
    </member>
    <member name="M:System.Data.Entity.Design.PropertyGeneratedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Design.PropertyGeneratedEventArgs" /> class.</summary>
    </member>
    <member name="M:System.Data.Entity.Design.PropertyGeneratedEventArgs.#ctor(System.Data.Metadata.Edm.MetadataItem,System.String,System.CodeDom.CodeTypeReference)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Design.PropertyGeneratedEventArgs" /> class with the specified property source, backing field name, and return type.</summary>
      <param name="propertySource">The <see cref="T:System.Data.Metadata.Edm.MetadataItem" /> object that is the source of the property.</param>
      <param name="backingFieldName">The name of the field that backs the property.</param>
      <param name="returnType">The base type of the property.</param>
    </member>
    <member name="P:System.Data.Entity.Design.PropertyGeneratedEventArgs.AdditionalAttributes">
      <summary>Gets a List(CodeAttributeDeclaration) of attributes that will be added to the property.</summary>
      <returns>A collection that contains the attributes that will be added to the property. The collection is empty if no attributes will be added.</returns>
    </member>
    <member name="P:System.Data.Entity.Design.PropertyGeneratedEventArgs.AdditionalGetStatements">
      <summary>Gets a List(CodeStatement) containing the get statements to be added to the property.</summary>
      <returns>A collection that contains the get statements to be added to the property.</returns>
    </member>
    <member name="P:System.Data.Entity.Design.PropertyGeneratedEventArgs.AdditionalSetStatements">
      <summary>Gets a List(CodeStatement) containing the set statements to be added to the property.</summary>
      <returns>A collection that contains the set statements to be added to the property. </returns>
    </member>
    <member name="P:System.Data.Entity.Design.PropertyGeneratedEventArgs.BackingFieldName">
      <summary>Gets the name of the field that backs the property.</summary>
      <returns>The name of the field that backs the property. This can be null for navigation properties.</returns>
    </member>
    <member name="P:System.Data.Entity.Design.PropertyGeneratedEventArgs.PropertySource">
      <summary>Gets the <see cref="T:System.Data.Metadata.Edm.MetadataItem" /> object that is the source of the property.</summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.MetadataItem" /> object that is the source of the property.</returns>
    </member>
    <member name="P:System.Data.Entity.Design.PropertyGeneratedEventArgs.ReturnType">
      <summary>Gets or sets the type of the property.</summary>
      <returns>The type of the property. </returns>
    </member>
    <member name="T:System.Data.Entity.Design.PropertyGeneratedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Data.Entity.Design.EntityClassGenerator.OnPropertyGenerated" /> event. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The data for the event.</param>
    </member>
    <member name="T:System.Data.Entity.Design.TypeGeneratedEventArgs">
      <summary>Provides data for the <see cref="E:System.Data.Entity.Design.EntityClassGenerator.OnTypeGenerated" /> event. </summary>
    </member>
    <member name="M:System.Data.Entity.Design.TypeGeneratedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Design.TypeGeneratedEventArgs" /> class.</summary>
    </member>
    <member name="M:System.Data.Entity.Design.TypeGeneratedEventArgs.#ctor(System.Data.Metadata.Edm.GlobalItem,System.CodeDom.CodeTypeReference)">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Design.TypeGeneratedEventArgs" /> class with the specified source and base type. </summary>
      <param name="typeSource">The source of the type.</param>
      <param name="baseType">The base type.</param>
    </member>
    <member name="P:System.Data.Entity.Design.TypeGeneratedEventArgs.AdditionalAttributes">
      <summary>Gets a List(CodeAttributeDeclaration) containing the attributes that will be added to the type.</summary>
      <returns>A collection that contains the attributes that will be added to the type. The collection is empty if no attributes will be added to the type.</returns>
    </member>
    <member name="P:System.Data.Entity.Design.TypeGeneratedEventArgs.AdditionalInterfaces">
      <summary>Gets a List(Type) containing the interfaces that will be added to the type.</summary>
      <returns>A collection that contains the interfaces that will be added to the type. The collection is empty if no interfaces will be added.</returns>
    </member>
    <member name="P:System.Data.Entity.Design.TypeGeneratedEventArgs.AdditionalMembers">
      <summary>Gets a List(CodeTypeMember) containing the members that will be added to the type.</summary>
      <returns>A collection that contains the members that will be added to the type. The collection is empty if no members will be added.</returns>
    </member>
    <member name="P:System.Data.Entity.Design.TypeGeneratedEventArgs.BaseType">
      <summary>Gets or sets the base type.</summary>
      <returns>The base type. The default is <see cref="T:System.Data.Objects.DataClasses.EntityObject" />, <see cref="T:System.Data.Objects.DataClasses.ComplexObject" />, or <see cref="T:System.Data.Objects.ObjectContext" />, depending on the <see cref="P:System.Data.Entity.Design.TypeGeneratedEventArgs.TypeSource" /> property value.</returns>
    </member>
    <member name="P:System.Data.Entity.Design.TypeGeneratedEventArgs.TypeSource">
      <summary>Gets the <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> object that is the source of the type.</summary>
      <returns>The <see cref="T:System.Data.Metadata.Edm.GlobalItem" /> object that is the source of the type.</returns>
    </member>
    <member name="T:System.Data.Entity.Design.TypeGeneratedEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Data.Entity.Design.EntityClassGenerator.OnTypeGenerated" /> event.</summary>
      <param name="sender">The source of the event.</param>
      <param name="e">The data for the event.</param>
    </member>
    <member name="T:System.Data.Entity.Design.AspNet.EntityDesignerBuildProvider">
      <summary>Extracts the model and mapping portions of .edmx files under the App_Code directory of an ASP.NET Web site, and embeds them as resources in the assembly that is dynamically compiled by the ASP.NET runtime. </summary>
    </member>
    <member name="M:System.Data.Entity.Design.AspNet.EntityDesignerBuildProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Design.AspNet.EntityDesignerBuildProvider" /> class.</summary>
    </member>
    <member name="M:System.Data.Entity.Design.AspNet.EntityDesignerBuildProvider.GenerateCode(System.Web.Compilation.AssemblyBuilder)">
      <summary>Generates C# or Visual Basic code based on the model and mapping portions of an .edmx file.</summary>
      <param name="assemblyBuilder">A container for building an assembly.</param>
    </member>
    <member name="M:System.Data.Entity.Design.AspNet.EntityDesignerBuildProvider.GetResultFlags(System.CodeDom.Compiler.CompilerResults)">
      <summary>Provides instructions to the ASP.NET compiler about building a project.</summary>
      <returns>The required behavior when a virtual path is built.</returns>
      <param name="results">The results of compilation returned from the ASP.NET compiler.</param>
    </member>
    <member name="T:System.Data.Entity.Design.AspNet.EntityModelBuildProvider">
      <summary>Represents the CSDL build provider for the ASP.NET build environment.</summary>
    </member>
    <member name="M:System.Data.Entity.Design.AspNet.EntityModelBuildProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Design.AspNet.EntityModelBuildProvider" /> class.</summary>
    </member>
    <member name="M:System.Data.Entity.Design.AspNet.EntityModelBuildProvider.GenerateCode(System.Web.Compilation.AssemblyBuilder)">
      <summary>Generates source code for the entity model build provider, and adds the source code to a specified assembly builder.</summary>
      <param name="assemblyBuilder">The assembly builder that references the source code generated by the build provider.</param>
    </member>
    <member name="M:System.Data.Entity.Design.AspNet.EntityModelBuildProvider.GetResultFlags(System.CodeDom.Compiler.CompilerResults)">
      <summary>Returns a value indicating actions required when a entity model build provider is built.</summary>
      <returns>The <see cref="F:System.Web.Compilation.BuildProviderResultFlags.ShutdownAppDomainOnChange" /> value, which indicates that the containing <see cref="T:System.AppDomain" /> will be unloaded and restarted.</returns>
      <param name="results">The compilation results for the build provider.</param>
    </member>
    <member name="T:System.Data.Entity.Design.AspNet.MappingModelBuildProvider">
      <summary>Represents the MSL build provider for the ASP.NET build environment.</summary>
    </member>
    <member name="M:System.Data.Entity.Design.AspNet.MappingModelBuildProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Design.AspNet.MappingModelBuildProvider" /> class.</summary>
    </member>
    <member name="M:System.Data.Entity.Design.AspNet.MappingModelBuildProvider.GenerateCode(System.Web.Compilation.AssemblyBuilder)">
      <summary>Embeds the MSL file as a resource to the specified assembly builder.</summary>
      <param name="assemblyBuilder">The assembly builder that references the source code generated by the build provider.</param>
    </member>
    <member name="M:System.Data.Entity.Design.AspNet.MappingModelBuildProvider.GetResultFlags(System.CodeDom.Compiler.CompilerResults)">
      <summary>Returns a value indicating actions required when a storage model build provider is built.</summary>
      <returns>The <see cref="F:System.Web.Compilation.BuildProviderResultFlags.ShutdownAppDomainOnChange" /> value, which indicates that the containing <see cref="T:System.AppDomain" /> will be unloaded and restarted.</returns>
      <param name="results">The compilation results for the build provider.</param>
    </member>
    <member name="T:System.Data.Entity.Design.AspNet.StorageModelBuildProvider">
      <summary>Represents the SSDL build provider for the ASP.NET build environment.</summary>
    </member>
    <member name="M:System.Data.Entity.Design.AspNet.StorageModelBuildProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Design.AspNet.StorageModelBuildProvider" /> class.</summary>
    </member>
    <member name="M:System.Data.Entity.Design.AspNet.StorageModelBuildProvider.GenerateCode(System.Web.Compilation.AssemblyBuilder)">
      <summary>Embeds the SSDL file as a resource to the specified assembly builder.</summary>
      <param name="assemblyBuilder">The assembly builder that references the source code generated by the build provider.</param>
    </member>
    <member name="M:System.Data.Entity.Design.AspNet.StorageModelBuildProvider.GetResultFlags(System.CodeDom.Compiler.CompilerResults)">
      <summary>Returns a value indicating actions required when a storage model build provider is built.</summary>
      <returns>The <see cref="F:System.Web.Compilation.BuildProviderResultFlags.ShutdownAppDomainOnChange" /> value, which indicates that the containing <see cref="T:System.AppDomain" /> will be unloaded and restarted.</returns>
      <param name="results">The compilation results for the build provider.</param>
    </member>
    <member name="T:System.Data.Entity.Design.PluralizationServices.ICustomPluralizationMapping">
      <summary>Represents a collection of the singular and plural forms of words.</summary>
    </member>
    <member name="M:System.Data.Entity.Design.PluralizationServices.ICustomPluralizationMapping.AddWord(System.String,System.String)">
      <summary>Adds singular and plural forms of a word to the <see cref="T:System.Data.Entity.Design.PluralizationServices.ICustomPluralizationMapping" /> object.</summary>
      <param name="singular">The singular version of the word added to the <see cref="T:System.Data.Entity.Design.PluralizationService" />.</param>
      <param name="plural">The plural version of the word added to the <see cref="T:System.Data.Entity.Design.PluralizationService" />.</param>
    </member>
    <member name="T:System.Data.Entity.Design.PluralizationServices.PluralizationService">
      <summary>Provides methods for constructing plural and singular forms of words.</summary>
    </member>
    <member name="M:System.Data.Entity.Design.PluralizationServices.PluralizationService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Data.Entity.Design.PluralizationServices" /> class.</summary>
    </member>
    <member name="M:System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService(System.Globalization.CultureInfo)">
      <summary>Creates a <see cref="T:System.Data.Entity.Design.PluralizationServices.PluralizationService" /> that applies language rules that correspond to the specified <see cref="T:System.Globalization.CultureInfo" />.</summary>
      <returns>A <see cref="T:System.Data.Entity.Design.PluralizationServices.PluralizationService" />.</returns>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> that corresponds to the language rules applied for singular and plural forms of words.</param>
    </member>
    <member name="P:System.Data.Entity.Design.PluralizationServices.PluralizationService.Culture">
      <summary>Gets or sets the <see cref="T:System.Data.Entity.Design.PluralizationServices.PluralizationService" /> culture.</summary>
      <returns>An object that specifies which language rules to apply for singulars and plurals.</returns>
    </member>
    <member name="M:System.Data.Entity.Design.PluralizationServices.PluralizationService.IsPlural(System.String)">
      <summary>Determines if the specified word is plural.</summary>
      <returns>true if the word is plural; otherwise, false.</returns>
      <param name="word">The <see cref="T:System.String" /> value to be analyzed.</param>
    </member>
    <member name="M:System.Data.Entity.Design.PluralizationServices.PluralizationService.IsSingular(System.String)">
      <summary>Determines if the specified word is singular.</summary>
      <returns>true if the word is singular; otherwise, false.</returns>
      <param name="word">The value to be analyzed.</param>
    </member>
    <member name="M:System.Data.Entity.Design.PluralizationServices.PluralizationService.Pluralize(System.String)">
      <summary>Returns the plural form of the specified word</summary>
      <returns>A <see cref="T:System.String" /> that is the plural form of the input parameter.</returns>
      <param name="word">The word to be made plural.</param>
    </member>
    <member name="M:System.Data.Entity.Design.PluralizationServices.PluralizationService.Singularize(System.String)">
      <summary>Returns the singular form of the specified word.</summary>
      <returns>The singular form of the input parameter.</returns>
      <param name="word">The  the word to be made singular.</param>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\Profile\Client\System.Core.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Core</name>
  </assembly>
  <members>
    <member name="T:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle">
      <summary>Provides a safe handle that represents a memory-mapped file for sequential access.</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle">
      <summary>Provides a safe handle that represents a view of a block of unmanaged memory for random access. </summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle">
      <summary>Provides a safe handle that can be used by Cryptography Next Generation (CNG) objects.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptHandle" /> class.</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseHandle">
      <summary>Releases a handle used by a Cryptography Next Generation (CNG) object.</summary>
      <returns>true if the handle is released successfully; otherwise, false.</returns>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptHandle.ReleaseNativeHandle">
      <summary>Releases a native handle used by a Cryptography Next Generation (CNG) object.</summary>
      <returns>true if the handle is released successfully; otherwise, false.</returns>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle">
      <summary>Provides a safe handle that represents a key (NCRYPT_KEY_HANDLE).</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle" /> class.</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle">
      <summary>Provides a safe handle that represents a key storage provider (NCRYPT_PROV_HANDLE).</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle" /> class.</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle">
      <summary>Provides a safe handle that represents a secret agreement value (NCRYPT_SECRET_HANDLE).</summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle" /> class.</summary>
    </member>
    <member name="T:Microsoft.Win32.SafeHandles.SafePipeHandle">
      <summary>Represents a wrapper class for a file handle. </summary>
    </member>
    <member name="M:Microsoft.Win32.SafeHandles.SafePipeHandle.#ctor(System.IntPtr,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> class.</summary>
      <param name="preexistingHandle">An <see cref="T:System.IntPtr" /> object that represents the pre-existing handle to use.</param>
      <param name="ownsHandle">true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended).</param>
    </member>
    <member name="T:System.Action`10">
      <summary>Encapsulates a method that has 10 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`11">
      <summary>Encapsulates a method that has 11 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`12">
      <summary>Encapsulates a method that has 12 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`13">
      <summary>Encapsulates a method that has 13 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`14">
      <summary>Encapsulates a method that has 14 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`15">
      <summary>Encapsulates a method that has 15 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`16">
      <summary>Encapsulates a method that has 16 parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg16">The sixteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T16">The type of the sixteenth parameter of the method that this delegate encapsulates.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Action`9">
      <summary>Encapsulates a method that has nine parameters and does not return a value.</summary>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`10">
      <summary>Encapsulates a method that has nine parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
      <returns>The return value of the method that this delegate encapsulates.</returns>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`11">
      <summary>Encapsulates a method that has 10 parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
      <returns>The return value of the method that this delegate encapsulates.</returns>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`12">
      <summary>Encapsulates a method that has 11 parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
      <returns>The return value of the method that this delegate encapsulates.</returns>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`13">
      <summary>Encapsulates a method that has 12 parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
      <returns>The return value of the method that this delegate encapsulates.</returns>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`14">
      <summary>Encapsulates a method that has 13 parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
      <returns>The return value of the method that this delegate encapsulates.</returns>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`15">
      <summary>Encapsulates a method that has 14 parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
      <returns>The return value of the method that this delegate encapsulates.</returns>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`16">
      <summary>Encapsulates a method that has 15 parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
      <returns>The return value of the method that this delegate encapsulates.</returns>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Func`17">
      <summary>Encapsulates a method that has 16 parameters and returns a value of the type specified by the <paramref name="TResult" /> parameter.</summary>
      <returns>The return value of the method that this delegate encapsulates.</returns>
      <param name="arg1">The first parameter of the method that this delegate encapsulates.</param>
      <param name="arg2">The second parameter of the method that this delegate encapsulates.</param>
      <param name="arg3">The third parameter of the method that this delegate encapsulates.</param>
      <param name="arg4">The fourth parameter of the method that this delegate encapsulates.</param>
      <param name="arg5">The fifth parameter of the method that this delegate encapsulates.</param>
      <param name="arg6">The sixth parameter of the method that this delegate encapsulates.</param>
      <param name="arg7">The seventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg8">The eighth parameter of the method that this delegate encapsulates.</param>
      <param name="arg9">The ninth parameter of the method that this delegate encapsulates.</param>
      <param name="arg10">The tenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg11">The eleventh parameter of the method that this delegate encapsulates.</param>
      <param name="arg12">The twelfth parameter of the method that this delegate encapsulates.</param>
      <param name="arg13">The thirteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg14">The fourteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg15">The fifteenth parameter of the method that this delegate encapsulates.</param>
      <param name="arg16">The sixteenth parameter of the method that this delegate encapsulates.</param>
      <typeparam name="T1">The type of the first parameter of the method that this delegate encapsulates.This type parameter is contravariant. That is, you can use either the type you specified or any type that is less derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="T2">The type of the second parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T3">The type of the third parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T4">The type of the fourth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T5">The type of the fifth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T6">The type of the sixth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T7">The type of the seventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T8">The type of the eighth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T9">The type of the ninth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T10">The type of the tenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T11">The type of the eleventh parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T12">The type of the twelfth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T13">The type of the thirteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T14">The type of the fourteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T15">The type of the fifteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="T16">The type of the sixteenth parameter of the method that this delegate encapsulates.</typeparam>
      <typeparam name="TResult">The type of the return value of the method that this delegate encapsulates.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary>Represents a set of values.</summary>
      <typeparam name="T">The type of elements in the hast set.</typeparam>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1" /> class that is empty and uses the default equality comparer for the set type.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1" /> class that uses the default equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.</summary>
      <param name="collection">The collection whose elements are copied to the new set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1" /> class that uses the specified equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.</summary>
      <param name="collection">The collection whose elements are copied to the new set.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing values in the set, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> implementation for the set type.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="collection" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1" /> class that is empty and uses the specified equality comparer for the set type.</summary>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> implementation to use when comparing values in the set, or null to use the default <see cref="T:System.Collections.Generic.EqualityComparer`1" /> implementation for the set type.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Collections.Generic.HashSet`1" /> class with serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the information required to serialize the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary>Adds the specified element to a set.</summary>
      <returns>true if the element is added to the <see cref="T:System.Collections.Generic.HashSet`1" /> object; false if the element is already present.</returns>
      <param name="item">The element to add to the set.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary>Removes all elements from a <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary>Gets the <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> object that is used to determine equality for the values in the set.</summary>
      <returns>The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> object that is used to determine equality for the values in the set.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.HashSet`1" /> object contains the specified element.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.HashSet`1" /> object contains the specified element; otherwise, false.</returns>
      <param name="item">The element to locate in the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary>Copies the elements of a <see cref="T:System.Collections.Generic.HashSet`1" /> object to an array.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.HashSet`1" /> object. The array must have zero-based indexing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary>Copies the elements of a <see cref="T:System.Collections.Generic.HashSet`1" /> object to an array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.HashSet`1" /> object. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> is greater than the length of the destination <paramref name="array" />.-or-<paramref name="count" /> is larger than the size of the destination <paramref name="array" />.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary>Copies the specified number of elements of a <see cref="T:System.Collections.Generic.HashSet`1" /> object to an array, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array that is the destination of the elements copied from the <see cref="T:System.Collections.Generic.HashSet`1" /> object. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying begins.</param>
      <param name="count">The number of elements to copy to <paramref name="array" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="arrayIndex" /> is less than 0.-or-<paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="arrayIndex" /> is greater than the length of the destination <paramref name="array" />.-or-<paramref name="count" /> is greater than the available space from the <paramref name="index" /> to the end of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary>Gets the number of elements that are contained in a set.</summary>
      <returns>The number of elements that are contained in the set.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CreateSetComparer">
      <summary>Returns an <see cref="T:System.Collections.IEqualityComparer" /> object that can be used for equality testing of a <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
      <returns>An <see cref="T:System.Collections.IEqualityComparer" /> object that can be used for deep equality testing of the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Removes all elements in the specified collection from the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
      <param name="other">The collection of items to remove from the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through a <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
      <returns>A <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> object for the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and returns the data needed to serialize a <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the information required to serialize the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> structure that contains the source and destination of the serialized stream associated with the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current <see cref="T:System.Collections.Generic.HashSet`1" /> object to contain only elements that are present in that object and in the specified collection.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.HashSet`1" /> object is a proper subset of the specified collection.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.HashSet`1" /> object is a proper subset of <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.HashSet`1" /> object is a proper superset of the specified collection.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.HashSet`1" /> object is a proper superset of <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.HashSet`1" /> object is a subset of the specified collection.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.HashSet`1" /> object is a subset of <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.HashSet`1" /> object is a superset of the specified collection.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.HashSet`1" /> object is a superset of <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)">
      <summary>Implements the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface and raises the deserialization event when the deserialization is complete.</summary>
      <param name="sender">The source of the deserialization event.</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object associated with the current <see cref="T:System.Collections.Generic.HashSet`1" /> object is invalid.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether the current <see cref="T:System.Collections.Generic.HashSet`1" /> object and a specified collection share common elements.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.HashSet`1" /> object and <paramref name="other" /> share at least one common element; otherwise, false.</returns>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary>Removes the specified element from a <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
      <returns>true if the element is successfully found and removed; otherwise, false.  This method returns false if <paramref name="item" /> is not found in the <see cref="T:System.Collections.Generic.HashSet`1" /> object.</returns>
      <param name="item">The element to remove.</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary>Removes all elements that match the conditions defined by the specified predicate from a <see cref="T:System.Collections.Generic.HashSet`1" /> collection.</summary>
      <returns>The number of elements that were removed from the <see cref="T:System.Collections.Generic.HashSet`1" /> collection.</returns>
      <param name="match">The <see cref="T:System.Predicate`1" /> delegate that defines the conditions of the elements to remove.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="match" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary>Determines whether a <see cref="T:System.Collections.Generic.HashSet`1" /> object and the specified collection contain the same elements.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.HashSet`1" /> object is equal to <paramref name="other" />; otherwise, false.</returns>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current <see cref="T:System.Collections.Generic.HashSet`1" /> object to contain only elements that are present either in that object or in the specified collection, but not both.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary>Adds an item to an <see cref="T:System.Collections.Generic.ICollection`1" /> object.</summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" /> object.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether a collection is read-only.</summary>
      <returns>true if the collection is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through a collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary>Sets the capacity of a <see cref="T:System.Collections.Generic.HashSet`1" /> object to the actual number of elements it contains, rounded up to a nearby, implementation-specific value.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary>Modifies the current <see cref="T:System.Collections.Generic.HashSet`1" /> object to contain all elements that are present in both itself and in the specified collection.</summary>
      <param name="other">The collection to compare to the current <see cref="T:System.Collections.Generic.HashSet`1" /> object.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> is null.</exception>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary>Enumerates the elements of a <see cref="T:System.Collections.Generic.HashSet`1" /> object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the <see cref="T:System.Collections.Generic.HashSet`1" /> collection at the current position of the enumerator.</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary>Releases all resources used by a <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> object.</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary>Advances the enumerator to the next element of the <see cref="T:System.Collections.Generic.HashSet`1" /> collection.</summary>
      <returns>true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection.</returns>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Gets the element at the current position of the enumerator.</summary>
      <returns>The element in the collection at the current position of the enumerator, as an <see cref="T:System.Object" />.</returns>
      <exception cref="T:System.InvalidOperationException">The enumerator is positioned before the first element of the collection or after the last element. </exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary>Sets the enumerator to its initial position, which is before the first element in the collection.</summary>
      <exception cref="T:System.InvalidOperationException">The collection was modified after the enumerator was created. </exception>
    </member>
    <member name="T:System.Diagnostics.EventSchemaTraceListener">
      <summary>Directs tracing or debugging output of end-to-end events to an XML-encoded, schema-compliant log file.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> class, using the specified file as the recipient of debugging and tracing output.</summary>
      <param name="fileName">The path for the log file.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> class with the specified name, using the specified file as the recipient of debugging and tracing output.</summary>
      <param name="fileName">The path for the log file.</param>
      <param name="name">The name of the listener.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> class with the specified name and specified buffer size, using the specified file as the recipient of debugging and tracing output.</summary>
      <param name="fileName">The path for the log file.</param>
      <param name="name">The name of the listener.</param>
      <param name="bufferSize">The size of the output buffer, in bytes.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> class with the specified name and specified buffer size, using the specified file with the specified log retention policy as the recipient of the debugging and tracing output.</summary>
      <param name="fileName">The path for the log file.</param>
      <param name="name">The name of the listener.</param>
      <param name="bufferSize">The size of the output buffer, in bytes.</param>
      <param name="logRetentionOption">One of the <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> values. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> class with the specified name and specified buffer size, using the specified file with the specified log retention policy and maximum size as the recipient of the debugging and tracing output.</summary>
      <param name="fileName">The path for the log file.</param>
      <param name="name">The name of the listener.</param>
      <param name="bufferSize">The size of the output buffer, in bytes.</param>
      <param name="logRetentionOption">One of the <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> values.</param>
      <param name="maximumFileSize">The maximum file size, in bytes.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumFileSize" /> is less than <paramref name="bufferSize" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumFileSize" /> is a negative number.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.#ctor(System.String,System.String,System.Int32,System.Diagnostics.TraceLogRetentionOption,System.Int64,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> class with the specified name and specified buffer size, using the specified file with the specified log retention policy, maximum size, and file count as the recipient of the debugging and tracing output.</summary>
      <param name="fileName">The path for the log file.</param>
      <param name="name">The name of the listener.</param>
      <param name="bufferSize">The size of the output buffer, in bytes.</param>
      <param name="logRetentionOption">One of the <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> values.</param>
      <param name="maximumFileSize">The maximum file size, in bytes.</param>
      <param name="maximumNumberOfFiles">The maximum number of output log files.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumFileSize" /> is less than <paramref name="bufferSize" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumFileSize" /> is a negative number.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumNumberOfFiles" /> is less than 1, and <paramref name="logRetentionOption" /> is <see cref="F:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="maximumNumberOfFiles" /> is less than 2, and <paramref name="logRetentionOption" /> is <see cref="F:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.BufferSize">
      <summary>Gets the size of the output buffer.</summary>
      <returns>The size of the output buffer, in bytes. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Close">
      <summary>Closes the log file for this listener so that it no longer receives tracing or debugging output.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Fail(System.String,System.String)">
      <summary>Writes error information, including a basic error message and a detailed error message, to the log file.</summary>
      <param name="message">The basic error message to write.</param>
      <param name="detailMessage">The detailed error message to append to the basic error message.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Flush">
      <summary>Causes buffered data to be written to the log for this listener.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.GetSupportedAttributes">
      <summary>Gets the custom XML configuration attributes that the trace listener supports.</summary>
      <returns>A <see cref="T:System.String" /> array that contains the XML configuration attributes recognized by this listener.</returns>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.IsThreadSafe">
      <summary>Gets a value indicating whether the trace listener is thread safe.</summary>
      <returns>Always returns true.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize">
      <summary>Gets the maximum size of the log file.</summary>
      <returns>The maximum file size, in bytes.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles">
      <summary>Gets the maximum number of log files.</summary>
      <returns>The maximum number of log files, determined by the value of the <see cref="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption" /> property for the file.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <summary>Writes trace information, a single data object, and event information to the log file.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">The source name. </param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="data">A data object to emit.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <summary>Writes trace information, multiple data objects, and event information to the log file.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">The source name. </param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="data">An array of data objects to emit.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <summary>Writes trace information, a message, and event information to the log file.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">The source name. </param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="message">The message to write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <summary>Writes trace information, a formatted message, and event information to the log file.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">The source name. </param>
      <param name="eventType">One of the <see cref="T:System.Diagnostics.TraceEventType" /> values.</param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="format">A format string that contains zero or more format items that correspond to objects in the <paramref name="args" /> array.</param>
      <param name="args">An object array that contains zero or more objects to format.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.TraceLogRetentionOption">
      <summary>Gets the trace log retention option for the file.</summary>
      <returns>One of the <see cref="T:System.Diagnostics.TraceLogRetentionOption" /> values. The default is <see cref="F:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize" />. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
      <summary>Writes trace information, including the identity of a related activity, a message, and event information, to the log file.</summary>
      <param name="eventCache">A <see cref="T:System.Diagnostics.TraceEventCache" /> that contains the current process ID, thread ID, and stack trace information.</param>
      <param name="source">The source name. </param>
      <param name="id">A numeric identifier for the event.</param>
      <param name="message">A trace message to write.</param>
      <param name="relatedActivityId">A <see cref="T:System.Guid" /> structure that identifies a related activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.Write(System.String)">
      <summary>Writes a message to the log file without providing any additional context information.</summary>
      <param name="message">The message to write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.EventSchemaTraceListener.WriteLine(System.String)">
      <summary>Writes a message followed by the current line terminator to the log file without providing any additional context information.</summary>
      <param name="message">The message to write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.EventSchemaTraceListener.Writer">
      <summary>Gets or sets the underlying text writer that writes to the log file.</summary>
      <returns>A <see cref="T:System.IO.TextWriter" /> object.</returns>
      <exception cref="T:System.NotSupportedException">An attempt was made to assign a value to the <see cref="P:System.Diagnostics.EventSchemaTraceListener.Writer" /> property.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.TraceLogRetentionOption">
      <summary>Specifies the file structure that will be used for the <see cref="T:System.Diagnostics.EventSchemaTraceListener" /> log.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.SingleFileUnboundedSize">
      <summary>One file with no maximum file size restriction.</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.SingleFileBoundedSize">
      <summary>One file with a maximum file size that is determined by the <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> property.</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.UnlimitedSequentialFiles">
      <summary>An unlimited number of sequential files, each with a maximum file size that is determined by the <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> property. There is no logical bound to the number or size of the files, but it is limited by the physical constraints imposed by the computer.</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.LimitedSequentialFiles">
      <summary>A finite number of sequential files, each with a maximum file size. When the <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> property value is reached, writing starts in a new file with an incremented integer suffix.</summary>
    </member>
    <member name="F:System.Diagnostics.TraceLogRetentionOption.LimitedCircularFiles">
      <summary>A finite number of sequential files, each with a maximum file size. When the <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumFileSize" /> property value is reached, writing starts in a new file with an incremented integer suffix. When the <see cref="P:System.Diagnostics.EventSchemaTraceListener.MaximumNumberOfFiles" /> property value is reached, the first file is cleared and overwritten. Files are then incrementally overwritten in a circular manner.</summary>
    </member>
    <member name="T:System.Diagnostics.UnescapedXmlDiagnosticData">
      <summary>Provides unescaped XML data for the logging of user-provided trace data.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.UnescapedXmlDiagnosticData.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" /> class by using the specified XML data string.</summary>
      <param name="xmlPayload">The XML data to be logged in the UserData node of the event schema.  </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.UnescapedXmlDiagnosticData.ToString">
      <summary>Returns a string representation of the <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" /> object.</summary>
      <returns>A string representation of the <see cref="T:System.Diagnostics.UnescapedXmlDiagnosticData" /> object. If the object is null, this method returns an empty string.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.UnescapedXmlDiagnosticData.UnescapedXml">
      <summary>Gets or sets the unescaped XML data string.</summary>
      <returns>An unescaped XML string.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventDescriptor">
      <summary>Contains the metadata that defines an event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventDescriptor.#ctor(System.Int32,System.Byte,System.Byte,System.Byte,System.Byte,System.Int32,System.Int64)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> class.</summary>
      <param name="id">The event identifier.</param>
      <param name="version">Version of the event. The version indicates a revision to the event definition. You can use this member and the Id member to identify a unique event.</param>
      <param name="channel">Defines a potential target for the event.</param>
      <param name="level">Specifies the level of detail included in the event.</param>
      <param name="opcode">Operation being performed at the time the event is written.</param>
      <param name="task">Identifies a logical component of the application that is writing the event.</param>
      <param name="keywords">Bit mask that specifies the event category. The keyword can contain one or more provider-defined keywords, standard keywords, or both.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Channel">
      <summary>Retrieves the channel value from the event descriptor.</summary>
      <returns>The channel that defines a potential target for the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.EventId">
      <summary>Retrieves the event identifier value from the event descriptor.</summary>
      <returns>The event identifier.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Keywords">
      <summary>Retrieves the keyword value from the event descriptor.</summary>
      <returns>The keyword, which is a bit mask, that specifies the event category.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Level">
      <summary>Retrieves the level value from the event descriptor.</summary>
      <returns>The level of detail included in the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Opcode">
      <summary>Retrieves the operation code value from the event descriptor.</summary>
      <returns>The operation being performed at the time the event is written.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Task">
      <summary>Retrieves the task value from the event descriptor.</summary>
      <returns>The task that identifies the logical component of the application that is writing the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventDescriptor.Version">
      <summary>Retrieves the version value from the event descriptor.</summary>
      <returns>The version of the event. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventProvider">
      <summary>Use this class to write events.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.#ctor(System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.EventProvider" /> class.</summary>
      <param name="providerGuid">Guid that uniquely identifies the provider.</param>
      <exception cref="T:System.InsufficientMemoryException">There is not enough memory to complete the operation.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The classes in the <see cref="N:System.Diagnostics.Eventing" /> namespace work only on Windows Vista.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="providerGuid" /> parameter cannot be null.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An error returned by the ETW subsystem. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Close">
      <summary>Removes the provider's registration from the ETW subsystem and releases all unmanaged resources.</summary>
      <exception cref="T:System.ComponentModel.Win32Exception">An error returned by the ETW subsystem. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.CreateActivityId">
      <summary>Creates a unique activity identifier for the provider.</summary>
      <returns>A unique Guid that you use when calling the <see cref="M:System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)" /> method to set the activity identifier for the provider.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Dispose">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Dispose(System.Boolean)">
      <param name="disposing"></param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.Finalize"></member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError">
      <summary>Gets the last error associated with an event write failure.</summary>
      <returns>Use the value to determine the cause of an event write failure.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.IsEnabled">
      <summary>Determines whether any session enabled the provider, regardless of the level and keyword values used to enable the provider.</summary>
      <returns>Is true if the provider is enabled to any session; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.IsEnabled(System.Byte,System.Int64)">
      <summary>Determines whether any session is requesting the specified event from the provider.</summary>
      <returns>Is true if any session is requesting the specified event; otherwise, false.</returns>
      <param name="level">Level of detail included in the event.</param>
      <param name="keywords">Bit mask that specifies the event category. This mask should be the same keyword mask that is defined in the manifest for the event.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)">
      <summary>Sets the current activity identifier used by the <see cref="Overload:System.Diagnostics.Eventing.EventProvider.WriteEvent" /> methods.</summary>
      <param name="id">A unique activity identifier that the <see cref="M:System.Diagnostics.Eventing.EventProvider.CreateActivityId" /> method returns.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.IntPtr)">
      <summary>Writes an event. The event data is specified as a block of memory.</summary>
      <returns>Is true if the event is written; otherwise, false. If false, call the <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> method to determine the cause of the failure.</returns>
      <param name="eventDescriptor">An instance of <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> that identifies the event to write.</param>
      <param name="dataCount">Size of the event data to which the <paramref name="data" /> parameter points. The maximum event data size is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.</param>
      <param name="data">Pointer to the event data to write.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Object[])">
      <summary>Writes an event. The event data is specified as an array of objects.</summary>
      <returns>Is true if the event is written; otherwise, false. If false, call the <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> method to determine the cause of the failure.</returns>
      <param name="eventDescriptor">An instance of <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> that identifies the event to write.</param>
      <param name="eventPayload">An array of objects that contain the event data to write. The object must be in the order specified in the manifest. The array is limited to 32 objects, of which only eight may be strings. The maximum data size for the event is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.This parameter can be null.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="eventPayload" /> parameter contains too many objects or strings.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.String)">
      <summary>Writes an event. The event data is specified as a string.</summary>
      <returns>Is true if the event is written; otherwise, false. If false, call the <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> method to determine the cause of the failure.</returns>
      <param name="eventDescriptor">An instance of <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> that identifies the event to write.</param>
      <param name="data">The string to write as the event data.</param>
      <exception cref="T:System.ArgumentException">If <paramref name="data" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String)">
      <summary>Writes an event that contains a string as its data.</summary>
      <returns>Is true if the event is written; otherwise, false. If false, call the <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> method to determine the cause of the failure.</returns>
      <param name="eventMessage">String to write as the event data.</param>
      <exception cref="T:System.ArgumentException">If <paramref name="eventMessage" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String,System.Byte,System.Int64)">
      <summary>Writes an event that contains a string as its data if the level and keyword value match the events requested by the session.</summary>
      <returns>Is true if the event is written; otherwise, false. If false, call the <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> method to determine the cause of the failure.</returns>
      <param name="eventMessage">String to write as the event data.</param>
      <param name="eventLevel">Level of detail included in the event. If the provider uses a manifest to define the event, set this value to the same level defined in the manifest.</param>
      <param name="eventKeywords">Bit mask that specifies the event category. If the provider uses a manifest to define the event, set this value to the same keyword mask defined in the manifest.</param>
      <exception cref="T:System.ArgumentException">If <paramref name="eventMessage" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Int32,System.IntPtr)">
      <summary>Links events together when tracing events in an end-to-end scenario. The event data is specified as a block of memory.</summary>
      <returns>Is true if the event is written; otherwise, false. If false, call the <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> method to determine the cause of the failure.</returns>
      <param name="eventDescriptor">An instance of <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> that identifies the event to write.</param>
      <param name="relatedActivityId">Activity identifier from the previous component. Use this parameter to link your component's events to the previous component's events.</param>
      <param name="dataCount">Size of the event data to which the <paramref name="data" /> parameter points. The maximum event data size is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.</param>
      <param name="data">Pointer to the event data to write.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Object[])">
      <summary>Links events together when tracing events in an end-to-end scenario. The event data is specified as an array of objects.</summary>
      <returns>Is true if the event is written; otherwise, false. If false, call the <see cref="M:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError" /> method to determine the cause of the failure.</returns>
      <param name="eventDescriptor">An instance of <see cref="T:System.Diagnostics.Eventing.EventDescriptor" /> that identifies the event to write.</param>
      <param name="relatedActivityId">Activity identifier from the previous component. Use this parameter to link your component's events to the previous component's events.</param>
      <param name="eventPayload">An array of objects that contain the event data to write. The data must be in the order specified in the manifest. The array is limited to 32 objects, of which only eight may be strings. The maximum data size for the event is limited to 64 KB minus the size of the event headers. The event size is less if the session's buffer size is less and the session includes extended data items with the event.</param>
      <exception cref="T:System.ArgumentException">If <paramref name="eventPayload" /> contains too many objects or strings.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode">
      <summary>Defines the possible states of the last write operation.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode.NoError">
      <summary>The write was successful.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode.NoFreeBuffers">
      <summary>The session ran out of free buffers to write to. This can occur during high event rates because the disk subsystem is overloaded or the number of buffers is too small. Rather than blocking until more buffers become available, the event is dropped. Consider increasing the number and size of the buffers for the session, or reducing the number of events written or the size of the events.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode.EventTooBig">
      <summary>The event is larger than the session buffer size; events cannot span buffers.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.EventProviderTraceListener">
      <summary>A listener for <see cref="T:System.Diagnostics.TraceSource" /> that writes events to the ETW subsytem. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> class using the specified provider identifier.</summary>
      <param name="providerId">A unique string <see cref="T:System.Guid" /> that identifies the provider.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> class using the specified provider identifier and name of the listener.</summary>
      <param name="providerId">A unique string <see cref="T:System.Guid" /> that identifies the provider.</param>
      <param name="name">Name of the listener.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.EventProviderTraceListener" /> class using the specified provider identifier, name of the listener, and delimiter.</summary>
      <param name="providerId">A unique string <see cref="T:System.Guid" /> that identifies the provider.</param>
      <param name="name">Name of the listener.</param>
      <param name="delimiter">Delimiter used to delimit the event data. (For more details, see the <see cref="P:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter" /> property.)</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Close">
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.EventProviderTraceListener.Delimiter">
      <summary>Gets and sets the delimiter used to delimit the event data that is written to the ETW subsystem.</summary>
      <returns>The delimiter used to delimit the event data. The default delimiter is a comma.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Fail(System.String,System.String)">
      <param name="message"></param>
      <param name="detailMessage"></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Flush">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.GetSupportedAttributes"></member>
    <member name="P:System.Diagnostics.Eventing.EventProviderTraceListener.IsThreadSafe">
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object)">
      <param name="eventCache"></param>
      <param name="source"></param>
      <param name="eventType"></param>
      <param name="id"></param>
      <param name="data"></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceData(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.Object[])">
      <param name="eventCache"></param>
      <param name="source"></param>
      <param name="eventType"></param>
      <param name="id"></param>
      <param name="data"></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32)">
      <param name="eventCache"></param>
      <param name="source"></param>
      <param name="eventType"></param>
      <param name="id"></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String)">
      <param name="eventCache"></param>
      <param name="source"></param>
      <param name="eventType"></param>
      <param name="id"></param>
      <param name="message"></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceEvent(System.Diagnostics.TraceEventCache,System.String,System.Diagnostics.TraceEventType,System.Int32,System.String,System.Object[])">
      <param name="eventCache"></param>
      <param name="source"></param>
      <param name="eventType"></param>
      <param name="id"></param>
      <param name="format"></param>
      <param name="args"></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.TraceTransfer(System.Diagnostics.TraceEventCache,System.String,System.Int32,System.String,System.Guid)">
      <param name="eventCache"></param>
      <param name="source"></param>
      <param name="id"></param>
      <param name="message"></param>
      <param name="relatedActivityId"></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.Write(System.String)">
      <param name="message"></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.EventProviderTraceListener.WriteLine(System.String)">
      <param name="message"></param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventBookmark">
      <summary>Represents a placeholder (bookmark) within an event stream. You can use the placeholder to mark a position and return to this position in a stream of events. An instance of this object can be obtained from an <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> object, in which case it corresponds to the position of that event record.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventBookmark.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> class from the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> instances.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that contains the information required to serialize the new <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> object.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains the source of the serialized stream that is associated with the new <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" />.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventBookmark.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization." /><see cref="SerializationInfo" /> object with the data required to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization." /><see cref="SerializationInfo" /> object to populate with data.</param>
      <param name="context">The destination for this serialization.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventBookmark.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization." /><see cref="SerializationInfo" /> object with the data needed to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization." /><see cref="SerializationInfo" /> object to populate with data.</param>
      <param name="context">The destination for this serialization.</param>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventKeyword">
      <summary>Represents a keyword for an event. Keywords are defined in an event provider and are used to group the event with other similar events (based on the usage of the events).</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventKeyword.DisplayName">
      <summary>Gets the localized name of the keyword.</summary>
      <returns>Returns a string that contains a localized name for this keyword.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventKeyword.Name">
      <summary>Gets the non-localized name of the keyword.</summary>
      <returns>Returns a string that contains the non-localized name of this keyword.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventKeyword.Value">
      <summary>Gets the numeric value associated with the keyword.</summary>
      <returns>Returns a long value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLevel">
      <summary>Contains an event level that is defined in an event provider. The level signifies the severity of the event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLevel.DisplayName">
      <summary>Gets the localized name for the event level. The name describes what severity level of events this level is used for.</summary>
      <returns>Returns a string that contains the localized name for the event level.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLevel.Name">
      <summary>Gets the non-localized name of the event level.</summary>
      <returns>Returns a string that contains the non-localized name of the event level.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLevel.Value">
      <summary>Gets the numeric value of the event level.</summary>
      <returns>Returns an integer value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration">
      <summary>Contains static information and configuration settings for an event log. Many of the configurations settings were defined by the event provider that created the log.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor(System.String)">
      <summary>Initializes a new <see cref="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration" /> object by specifying the local event log for which to get information and configuration settings. </summary>
      <param name="logName">The name of the local event log for which to get information and configuration settings.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.#ctor(System.String,System.Diagnostics.Eventing.Reader.EventLogSession)">
      <summary>Initializes a new <see cref="T:System.Diagnostics.Eventing.Reader.EventLogConfiguration" /> object by specifying the name of the log for which to get information and configuration settings. The log can be on the local computer or a remote computer, based on the event log session specified.</summary>
      <param name="logName">The name of the event log for which to get information and configuration settings.</param>
      <param name="session">The event log session used to determine the event log service that the specified log belongs to. The session is either connected to the event log service on the local computer or a remote computer.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose">
      <summary>Releases all the resources used by this object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by this object, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsClassicLog">
      <summary>Gets the flag that indicates if the event log is a classic event log. A classic event log is one that has its events defined in a .mc file instead of a manifest (.xml file) used by the event provider.</summary>
      <returns>Returns true if the event log is a classic log, and returns false if the event log is not a classic log.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.IsEnabled">
      <summary>Gets or sets a Boolean value that determines whether the event log is enabled or disabled. An enabled log is one in which events can be logged, and a disabled log is one in which events cannot be logged.</summary>
      <returns>Returns true if the log is enabled, and returns false if the log is disabled.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogFilePath">
      <summary>Gets or sets the file directory path to the location of the file where the events are stored for the log.</summary>
      <returns>Returns a string that contains the path to the event log file.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogIsolation">
      <summary>Gets an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogIsolation" /> value that specifies whether the event log is an application, system, or custom event log. </summary>
      <returns>Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogIsolation" /> value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogMode">
      <summary>Gets or sets an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogMode" /> value that determines how events are handled when the event log becomes full.</summary>
      <returns>Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogMode" /> value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogName">
      <summary>Gets the name of the event log.</summary>
      <returns>Returns a string that contains the name of the event log.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.LogType">
      <summary>Gets an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogType" /> value that determines the type of the event log.</summary>
      <returns>Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogType" /> value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.MaximumSizeInBytes">
      <summary>Gets or sets the maximum size, in bytes, that the event log file is allowed to be. When the file reaches this maximum size, it is considered full.</summary>
      <returns>Returns a long value that represents the maximum size, in bytes, that the event log file is allowed to be.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.OwningProviderName">
      <summary>Gets the name of the event provider that created this event log.</summary>
      <returns>Returns a string that contains the name of the event provider that created this event log.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderBufferSize">
      <summary>Gets the size of the buffer that the event provider uses for publishing events to the log.</summary>
      <returns>Returns an integer value that can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderControlGuid">
      <summary>Gets the control globally unique identifier (GUID) for the event log if the log is a debug log. If this log is not a debug log, this value will be null. </summary>
      <returns>Returns a GUID value or null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderKeywords">
      <summary>Gets or sets keyword mask used by the event provider.</summary>
      <returns>Returns a long value that can be null if the event provider did not define any keywords.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLatency">
      <summary>Gets the maximum latency time used by the event provider when publishing events to the log.</summary>
      <returns>Returns an integer value that can be null if no latency time was specified by the event provider.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderLevel">
      <summary>Gets or sets the maximum event level (which defines the severity of the event) that is allowed to be logged in the event log. This value is defined by the event provider.</summary>
      <returns>Returns an integer value that can be null if the maximum event level was not defined in the event provider.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMaximumNumberOfBuffers">
      <summary>Gets the maximum number of buffers used by the event provider to publish events to the event log.</summary>
      <returns>Returns an integer value that is the maximum number of buffers used by the event provider to publish events to the event log. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderMinimumNumberOfBuffers">
      <summary>Gets the minimum number of buffers used by the event provider to publish events to the event log.</summary>
      <returns>Returns an integer value that is the minimum number of buffers used by the event provider to publish events to the event log. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.ProviderNames">
      <summary>Gets an enumerable collection of the names of all the event providers that can publish events to this event log.</summary>
      <returns>Returns an enumerable collection of strings that contain the event provider names.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SaveChanges">
      <summary>Saves the configuration settings that </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogConfiguration.SecurityDescriptor">
      <summary>Gets or sets the security descriptor of the event log. The security descriptor defines the users and groups of users that can read and write to the event log.</summary>
      <returns>Returns a string that contains the security descriptor for the event log.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogException">
      <summary>Represents the base class for all the exceptions that are thrown when an error occurs while reading event log related information. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> class with the error code for the exception.</summary>
      <param name="errorCode">The error code for the error that occurred while reading or configuring event log related information. For more information and a list of event log related error codes, see http://go.microsoft.com/fwlink/?LinkId=82629.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> class with serialized data.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception being thrown.</param>
      <param name="streamingContext">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> class by specifying the error message that describes the current exception.</summary>
      <param name="message">The error message that describes the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogException" /> class with an error message and inner exception.</summary>
      <param name="message">The error message that describes the current exception.</param>
      <param name="innerException">The Exception instance that caused the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the SerializationInfo object with information about the exception.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogException.Message">
      <summary>Gets the error message that describes the current exception.</summary>
      <returns>Returns a string that contains the error message that describes the current exception.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogInformation">
      <summary>Allows you to access the run-time properties of active event logs and event log files. These properties include the number of events in the log, the size of the log, a value that determines whether the log is full, and the last time the log was written to or accessed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.Attributes">
      <summary>Gets the file attributes of the log file associated with the log.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.CreationTime">
      <summary>Gets the time that the log file associated with the event log was created.</summary>
      <returns>Returns a <see cref="T:System.DateTime" /> object. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.FileSize">
      <summary>Gets the size of the file, in bytes, associated with the event log.</summary>
      <returns>Returns a long value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.IsLogFull">
      <summary>Gets a Boolean value that determines whether the log file has reached its maximum size (the log is full).</summary>
      <returns>Returns true if the log is full, and returns false if the log is not full.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.LastAccessTime">
      <summary>Gets the last time the log file associated with the event log was accessed.</summary>
      <returns>Returns a <see cref="T:System.DateTime" /> object. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.LastWriteTime">
      <summary>Gets the last time data was written to the log file associated with the event log.</summary>
      <returns>Returns a <see cref="T:System.DateTime" /> object. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.OldestRecordNumber">
      <summary>Gets the number of the oldest event record in the event log.</summary>
      <returns>Returns a long value that represents the number of the oldest event record in the event log. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogInformation.RecordCount">
      <summary>Gets the number of event records in the event log.</summary>
      <returns>Returns a long value that represents the number of event records in the event log. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException">
      <summary>Represents the exception thrown when an event provider publishes invalid data in an event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> class with serialized data.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception thrown.</param>
      <param name="streamingContext">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> class by specifying the error message that describes the current exception.</summary>
      <param name="message">The error message that describes the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInvalidDataException" /> class with an error message and inner exception.</summary>
      <param name="message">The error message that describes the current exception.</param>
      <param name="innerException">The Exception instance that caused the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogIsolation">
      <summary>Defines the default access permissions for the event log. The Application and System values indicate that the log shares the access control list (ACL) with the appropriate Windows log (the Application or System event logs) and share the Event Tracing for Windows (ETW) session with other logs of the same isolation. All channels with Custom isolation use a private ETW session.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogIsolation.Application">
      <summary>The log shares the access control list with the Application event log and shares the ETW session with other logs that have Application isolation.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogIsolation.System">
      <summary>The log shares the access control list with the System event log and shares the ETW session with other logs that have System isolation.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogIsolation.Custom">
      <summary>The event log is a custom event log that uses its own private ETW session.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogLink">
      <summary>Represents a link between an event provider and an event log that the provider publishes events into. This object cannot be instantiated.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogLink.DisplayName">
      <summary>Gets the localized name of the event log.</summary>
      <returns>Returns a string that contains the localized name of the event log.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogLink.IsImported">
      <summary>Gets a Boolean value that determines whether the event log is imported, rather than defined in the event provider. An imported event log is defined in a different provider.</summary>
      <returns>Returns true if the event log is imported by the event provider, and returns false if the event log is not imported by the event provider.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogLink.LogName">
      <summary>Gets the non-localized name of the event log associated with this object.</summary>
      <returns>Returns a string that contains the non-localized name of the event log associated with this object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogMode">
      <summary>Determines the behavior for the event log service handles an event log when the log reaches its maximum allowed size (when the event log is full).</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogMode.Circular">
      <summary>New events continue to be stored when the log file is full. Each new incoming event replaces the oldest event in the log.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogMode.AutoBackup">
      <summary>Archive the log when full, do not overwrite events. The log is automatically archived when necessary. No events are overwritten. </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogMode.Retain">
      <summary>Do not overwrite events. Clear the log manually rather than automatically.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException">
      <summary>Represents the exception that is thrown when a requested event log (usually specified by the name of the event log or the path to the event log file) does not exist.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> class with serialized data.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception thrown.</param>
      <param name="streamingContext">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> class by specifying the error message that describes the current exception.</summary>
      <param name="message">The error message that describes the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogNotFoundException" /> class with an error message and inner exception.</summary>
      <param name="message">The error message that describes the current exception.</param>
      <param name="innerException">The Exception instance that caused the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogPropertySelector">
      <summary>Contains an array of strings that represent XPath queries for elements in the XML representation of an event, which is based on the Event Schema. The queries in this object are used to extract values from the event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogPropertySelector.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Initializes a new <see cref="T:System.Diagnostics.Eventing.Reader.EventLogPropertySelector" /> class instance.</summary>
      <param name="propertyQueries">XPath queries used to extract values from the XML representation of the event.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogPropertySelector.Dispose">
      <summary>Releases all the resources used by this object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogPropertySelector.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by this object, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException">
      <summary>Represents the exception that is thrown when a specified event provider name references a disabled event provider. A disabled event provider cannot publish events.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> class with serialized data.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception thrown.</param>
      <param name="streamingContext">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> class by specifying the error message that describes the current exception.</summary>
      <param name="message">The error message that describes the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogProviderDisabledException" /> class with an error message and inner exception.</summary>
      <param name="message">The error message that describes the current exception.</param>
      <param name="innerException">The Exception instance that caused the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogQuery">
      <summary>Represents a query for events in an event log and the settings that define how the query is executed and on what computer the query is executed on.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogQuery.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" /> class by specifying the target of the query. The target can be an active event log or a log file.</summary>
      <param name="path">The name of the event log to query, or the path to the event log file to query.</param>
      <param name="pathType">Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogQuery.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" /> class by specifying the target of the query and the event query. The target can be an active event log or a log file.</summary>
      <param name="path">The name of the event log to query, or the path to the event log file to query.</param>
      <param name="pathType">Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.</param>
      <param name="query">The event query used to retrieve events that match the query conditions.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogQuery.ReverseDirection">
      <summary>Gets or sets the Boolean value that determines whether to read events from the newest event in an event log to the oldest event in the log.</summary>
      <returns>Returns true if events are read from the newest event in the log to the oldest event, and returns false if events are read from the oldest event in the log to the newest event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogQuery.Session">
      <summary>Gets or sets the session that access the Event Log service on the local computer or a remote computer. This object can be set to access a remote event log by creating a <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> object or an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> object with this <see cref="T:System.Diagnostics.Eventing.Reader.EventLogQuery" /> object.</summary>
      <returns>Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogQuery.TolerateQueryErrors">
      <summary>Gets or sets a Boolean value that determines whether this query will continue to retrieve events when the query has an error.</summary>
      <returns>true indicates that the query will continue to retrieve events even if the query fails for some logs, and false indicates that this query will not continue to retrieve events when the query fails.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogReader">
      <summary>Enables you to read events from an event log based on an event query. The events that are read by this object are returned as <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> class by specifying an event query.</summary>
      <param name="eventQuery">The event query used to retrieve events.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> class by specifying an event query and a bookmark that is used as starting position for the query.</summary>
      <param name="eventQuery">The event query used to retrieve events.</param>
      <param name="bookmark">The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events logged after the bookmark event will be returned by the query.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> class by specifying an active event log to retrieve events from.</summary>
      <param name="path">The name of the event log to retrieve events from.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.#ctor(System.String,System.Diagnostics.Eventing.Reader.PathType)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> class by specifying the name of an event log to retrieve events from or the path to a log file to retrieve events from.</summary>
      <param name="path">The name of the event log to retrieve events from, or the path to the event log file to retrieve events from.</param>
      <param name="pathType">Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogReader.BatchSize">
      <summary>Gets or sets the number of events retrieved from the stream of events on every read operation.</summary>
      <returns>Returns an integer value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.CancelReading">
      <summary>Cancels the current query operation.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Dispose">
      <summary>Releases all the resources used by this object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by this object, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogReader.LogStatus">
      <summary>Gets the status of each event log or log file associated with the event query in this object.</summary>
      <returns>Returns a list of <see cref="T:System.Diagnostics.Eventing.Reader.EventLogStatus" /> objects that each contain status information about an event log associated with the event query in this object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent">
      <summary>Reads the next event that is returned from the event query in this object.</summary>
      <returns>Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.ReadEvent(System.TimeSpan)">
      <summary>Reads the next event that is returned from the event query in this object.</summary>
      <returns>Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> object.</returns>
      <param name="timeout">The maximum time to allow the read operation to run before canceling the operation.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark)">
      <summary>Changes the position in the event stream where the next event that is read will come from by specifying a bookmark event. No events logged before the bookmark event will be retrieved.</summary>
      <param name="bookmark">The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.Diagnostics.Eventing.Reader.EventBookmark,System.Int64)">
      <summary>Changes the position in the event stream where the next event that is read will come from by specifying a bookmark event and an offset number of events from the bookmark. No events logged before the bookmark plus the offset will be retrieved.</summary>
      <param name="bookmark">The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.</param>
      <param name="offset">The offset number of events to change the position of the bookmark.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReader.Seek(System.IO.SeekOrigin,System.Int64)">
      <summary>Changes the position in the event stream where the next event that is read will come from by specifying a starting position and an offset from the starting position. No events logged before the starting position plus the offset will be retrieved.</summary>
      <param name="origin">A value from the <see cref="T:System.IO.SeekOrigin" /> enumeration defines where in the stream of events to start querying for events.</param>
      <param name="offset">The offset number of events to add to the origin.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogReadingException">
      <summary>Represents an exception that is thrown when an error occurred while reading, querying, or subscribing to the events in an event log. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> class with serialized data.</summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object that holds the serialized object data about the exception thrown.</param>
      <param name="streamingContext">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> object that contains contextual information about the source or destination.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> class by specifying the error message that describes the current exception.</summary>
      <param name="message">The error message that describes the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogReadingException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReadingException" /> class with an error message and inner exception.</summary>
      <param name="message">The error message that describes the current exception.</param>
      <param name="innerException">The Exception instance that caused the current exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogRecord">
      <summary>Contains the properties of an event instance for an event that is received from an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> object. The event properties provide information about the event such as the name of the computer where the event was logged and the time that the event was created.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ActivityId">
      <summary>Gets the globally unique identifier (GUID) for the activity in process for which the event is involved. This allows consumers to group related activities.</summary>
      <returns>Returns a GUID value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Bookmark">
      <summary>Gets a placeholder (bookmark) that corresponds to this event. This can be used as a placeholder in a stream of events.</summary>
      <returns>Returns a <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ContainerLog">
      <summary>Gets the name of the event log or the event log file in which the event is stored.</summary>
      <returns>Returns a string that contains the name of the event log or the event log file in which the event is stored.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by this object, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.FormatDescription">
      <summary>Gets the event message in the current locale.</summary>
      <returns>Returns a string that contains the event message in the current locale.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.FormatDescription(System.Collections.Generic.IEnumerable{System.Object})">
      <summary>Gets the event message, replacing variables in the message with the specified values.</summary>
      <returns>Returns a string that contains the event message in the current locale.</returns>
      <param name="values">The values used to replace variables in the event message. Variables are represented by %n, where n is a number.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.GetPropertyValues(System.Diagnostics.Eventing.Reader.EventLogPropertySelector)">
      <summary>Gets the enumeration of the values of the user-supplied event properties, or the results of XPath-based data if the event has XML representation.</summary>
      <returns>Returns a list of objects.</returns>
      <param name="propertySelector">Selects the property values to return.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Id">
      <summary>Gets the identifier for this event. All events with this identifier value represent the same type of event.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Keywords">
      <summary>Gets the keyword mask of the event. Get the value of the <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.KeywordsDisplayNames" /> property to get the name of the keywords used in this mask.</summary>
      <returns>Returns a long value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.KeywordsDisplayNames">
      <summary>Gets the display names of the keywords used in the keyword mask for this event.</summary>
      <returns>Returns an enumerable collection of strings that contain the display names of the keywords used in the keyword mask for this event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Level">
      <summary>Gets the level of the event. The level signifies the severity of the event. For the name of the level, get the value of the <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.LevelDisplayName" /> property.</summary>
      <returns>Returns a byte value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.LevelDisplayName">
      <summary>Gets the display name of the level for this event.</summary>
      <returns>Returns a string that contains the display name of the level for this event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.LogName">
      <summary>Gets the name of the event log where this event is logged.</summary>
      <returns>Returns a string that contains a name of the event log that contains this event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.MachineName">
      <summary>Gets the name of the computer on which this event was logged.</summary>
      <returns>Returns a string that contains the name of the computer on which this event was logged.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.MatchedQueryIds">
      <summary>Gets a list of query identifiers that this event matches. This event matches a query if the query would return this event.</summary>
      <returns>Returns an enumerable collection of integer values.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Opcode">
      <summary>Gets the opcode of the event. The opcode defines a numeric value that identifies the activity or a point within an activity that the application was performing when it raised the event. For the name of the opcode, get the value of the <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.OpcodeDisplayName" /> property.</summary>
      <returns>Returns a short value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.OpcodeDisplayName">
      <summary>Gets the display name of the opcode for this event.</summary>
      <returns>Returns a string that contains the display name of the opcode for this event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ProcessId">
      <summary>Gets the process identifier for the event provider that logged this event.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Properties">
      <summary>Gets the user-supplied properties of the event.</summary>
      <returns>Returns a list of <see cref="T:System.Diagnostics.Eventing.Reader.EventProperty" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ProviderId">
      <summary>Gets the globally unique identifier (GUID) of the event provider that published this event.</summary>
      <returns>Returns a GUID value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ProviderName">
      <summary>Gets the name of the event provider that published this event.</summary>
      <returns>Returns a string that contains the name of the event provider that published this event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Qualifiers">
      <summary>Gets qualifier numbers that are used for event identification.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.RecordId">
      <summary>Gets the event record identifier of the event in the log.</summary>
      <returns>Returns a long value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.RelatedActivityId">
      <summary>Gets a globally unique identifier (GUID) for a related activity in a process for which an event is involved.</summary>
      <returns>Returns a GUID value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Task">
      <summary>Gets a task identifier for a portion of an application or a component that publishes an event. A task is a 16-bit value with 16 top values reserved. This type allows any value between 0x0000 and 0xffef to be used. For the name of the task, get the value of the <see cref="P:System.Diagnostics.Eventing.Reader.EventLogRecord.TaskDisplayName" /> property.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.TaskDisplayName">
      <summary>Gets the display name of the task for the event.</summary>
      <returns>Returns a string that contains the display name of the task for the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.ThreadId">
      <summary>Gets the thread identifier for the thread that the event provider is running in.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.TimeCreated">
      <summary>Gets the time, in <see cref="T:System.DateTime" /> format, that the event was created.</summary>
      <returns>Returns a <see cref="T:System.DateTime" /> value. The value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogRecord.ToXml">
      <summary>Gets the XML representation of the event. All of the event properties are represented in the event's XML. The XML conforms to the event schema.</summary>
      <returns>Returns a string that contains the XML representation of the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.UserId">
      <summary>Gets the security descriptor of the user whose context is used to publish the event.</summary>
      <returns>Returns a <see cref="T:System.Security.Principal.SecurityIdentifier" /> value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogRecord.Version">
      <summary>Gets the version number for the event.</summary>
      <returns>Returns a byte value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogSession">
      <summary>Used to access the Event Log service on the local computer or a remote computer so you can manage and gather information about the event logs and event providers on the computer.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor">
      <summary>Initializes a new <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> object, establishes a connection with the local Event Log service.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor(System.String)">
      <summary>Initializes a new <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> object, and establishes a connection with the Event Log service on the specified computer. The credentials (user name and password) of the user who calls the method is used for the credentials to access the remote computer.</summary>
      <param name="server">The name of the computer on which to connect to the Event Log service.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.#ctor(System.String,System.String,System.String,System.Security.SecureString,System.Diagnostics.Eventing.Reader.SessionAuthentication)">
      <summary>Initializes a new <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> object, and establishes a connection with the Event Log service on the specified computer. The specified credentials (user name and password) are used for the credentials to access the remote computer.</summary>
      <param name="server">The name of the computer on which to connect to the Event Log service.</param>
      <param name="domain">The domain of the specified user.</param>
      <param name="user">The user name used to connect to the remote computer.</param>
      <param name="password">The password used to connect to the remote computer.</param>
      <param name="logOnType">The type of connection to use for the connection to the remote computer.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.CancelCurrentOperations">
      <summary>Cancels any operations (such as reading an event log or subscribing to an event log) that are currently active for the Event Log service that this session object is connected to.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ClearLog(System.String)">
      <summary>Clears events from the specified event log.</summary>
      <param name="logName">The name of the event log to clear all the events from.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ClearLog(System.String,System.String)">
      <summary>Clears events from the specified event log, and saves the cleared events to the specified file.</summary>
      <param name="logName">The name of the event log to clear all the events from.</param>
      <param name="backupPath">The path to the file in which the cleared events will be saved. The file should end in .evtx.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.Dispose">
      <summary>Releases all the resources used by this object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by this object, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLog(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String)">
      <summary>Exports events into an external log file. The events are stored without the event messages.</summary>
      <param name="path">The name of the event log to export events from, or the path to the event log file to export events from.</param>
      <param name="pathType">Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.</param>
      <param name="query">The query used to select the events to export.  Only the events returned from the query will be exported.</param>
      <param name="targetFilePath">The path to the log file (ends in .evtx) in which the exported events will be stored after this method is executed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLog(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String,System.Boolean)">
      <summary>Exports events into an external log file. A flag can be set to indicate that the method will continue exporting events even if the specified query fails for some logs. The events are stored without the event messages.</summary>
      <param name="path">The name of the event log to export events from, or the path to the event log file to export events from.</param>
      <param name="pathType">Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.</param>
      <param name="query">The query used to select the events to export. Only the events returned from the query will be exported.</param>
      <param name="targetFilePath">The path to the log file (ends in .evtx) in which the exported events will be stored after this method is executed.</param>
      <param name="tolerateQueryErrors">true indicates that the method will continue exporting events even if the specified query fails for some logs, and false indicates that this method will not continue to export events when the specified query fails.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLogAndMessages(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String)">
      <summary>Exports events and their messages into an external log file.</summary>
      <param name="path">The name of the event log to export events from, or the path to the event log file to export events from.</param>
      <param name="pathType">Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.</param>
      <param name="query">The query used to select the events to export.  Only the events returned from the query will be exported.</param>
      <param name="targetFilePath">The path to the log file (ends in .evtx) in which the exported events will be stored after this method is executed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.ExportLogAndMessages(System.String,System.Diagnostics.Eventing.Reader.PathType,System.String,System.String,System.Boolean,System.Globalization.CultureInfo)">
      <summary>Exports events and their messages into an external log file. A flag can be set to indicate that the method will continue exporting events even if the specified query fails for some logs. The event messages are exported in the specified language.</summary>
      <param name="path">The name of the event log to export events from, or the path to the event log file to export events from.</param>
      <param name="pathType">Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.</param>
      <param name="query">The query used to select the events to export.  Only the events returned from the query will be exported.</param>
      <param name="targetFilePath">The path to the log file (ends in .evtx) in which the exported events will be stored after this method is executed.</param>
      <param name="tolerateQueryErrors">true indicates that the method will continue exporting events even if the specified query fails for some logs, and false indicates that this method will not continue to export events when the specified query fails.</param>
      <param name="targetCultureInfo">The culture that specifies which language that the exported event messages will be in.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetLogInformation(System.String,System.Diagnostics.Eventing.Reader.PathType)">
      <summary>Gets an object that contains runtime information for the specified event log.</summary>
      <returns>Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogInformation" /> object that contains information about the specified log.</returns>
      <param name="logName">The name of the event log to get information about, or the path to the event log file to get information about.</param>
      <param name="pathType">Specifies whether the string used in the path parameter specifies the name of an event log, or the path to an event log file.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetLogNames">
      <summary>Gets an enumerable collection of all the event log names that are registered with the Event Log service.</summary>
      <returns>Returns an enumerable collection of strings that contain the event log names.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogSession.GetProviderNames">
      <summary>Gets an enumerable collection of all the event provider names that are registered with the Event Log service. An event provider is an application that publishes events to an event log.</summary>
      <returns>Returns an enumerable collection of strings that contain the event provider names.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogSession.GlobalSession">
      <summary>Gets a static predefined session object that is connected to the Event Log service on the local computer.</summary>
      <returns>Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> object that is a predefined session object that is connected to the Event Log service on the local computer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogStatus">
      <summary>Contains the status code or error code for a specific event log. This status can be used to determine if the event log is available for an operation.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogStatus.LogName">
      <summary>Gets the name of the event log for which the status code is obtained.</summary>
      <returns>Returns a string that contains the name of the event log for which the status code is obtained.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogStatus.StatusCode">
      <summary>Gets the status code or error code for the event log. This status or error is the result of a read or subscription operation on the event log.</summary>
      <returns>Returns an integer value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogType">
      <summary>Defines the type of events that are logged in an event log. Each log can only contain one type of event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Administrative">
      <summary>These events are primarily for end users, administrators, and support. The events that are found in the Administrative type logs indicate a problem and a well-defined solution that an administrator can act on. An example of an administrative event is an event that occurs when an application fails to connect to a printer. </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Operational">
      <summary>Events in an operational type event log are used for analyzing and diagnosing a problem or occurrence. They can be used to trigger tools or tasks based on the problem or occurrence. An example of an operational event is an event that occurs when a printer is added or removed from a system.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Analytical">
      <summary>Events in an analytic event log are published in high volume. They describe program operation and indicate problems that cannot be handled by user intervention.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.EventLogType.Debug">
      <summary>Events in a debug type event log are used solely by developers to diagnose a problem for debugging.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventLogWatcher">
      <summary>Allows you to subscribe to incoming events. Each time a desired event is published to an event log, the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised, and the method that handles this event will be executed. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying an event query.</summary>
      <param name="eventQuery">Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying an event query and a bookmark that is used as starting position for the query.</summary>
      <param name="eventQuery">Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</param>
      <param name="bookmark">The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying an event query, a bookmark that is used as starting position for the query, and a Boolean value that determines whether to read the events that already exist in the event log.</summary>
      <param name="eventQuery">Specifies a query for the event subscription. When an event is logged that matches the criteria expressed in the query, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</param>
      <param name="bookmark">The bookmark (placeholder) used as a starting position in the event log or stream of events. Only events that have been logged after the bookmark event will be returned by the query.</param>
      <param name="readExistingEvents">A Boolean value that determines whether to read the events that already exist in the event log. If this value is true, then the existing events are read and if this value is false, then the existing events are not read.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventLogWatcher" /> class by specifying the name or path to an event log.</summary>
      <param name="path">The path or name of the event log monitor for events. If any event is logged in this event log, then the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose">
      <summary>Releases all the resources used by this object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by this object, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled">
      <summary>Determines whether this object starts delivering events to the event delegate.</summary>
      <returns>Returns true when this object can deliver events to the event delegate, and returns false when this object has stopped delivery.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten">
      <summary>Allows setting a delegate (event handler method) that gets called every time an event is published that matches the criteria specified in the event query for this object. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventMetadata">
      <summary>Contains the metadata (properties and settings) for an event that is defined in an event provider. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Description">
      <summary>Gets the description template associated with the event using the current thread locale for the description language.</summary>
      <returns>Returns a string that contains the description template associated with the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Id">
      <summary>Gets the identifier of the event that is defined in the event provider.</summary>
      <returns>Returns a long value that is the event identifier.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Keywords">
      <summary>Gets the keywords associated with the event that is defined in the even provider.</summary>
      <returns>Returns an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Level">
      <summary>Gets the level associated with the event that is defined in the event provider. The level defines the severity of the event.</summary>
      <returns>Returns an <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.LogLink">
      <summary>Gets a link to the event log that receives this event when the provider publishes this event.</summary>
      <returns>Returns a <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Opcode">
      <summary>Gets the opcode associated with this event that is defined by an event provider. The opcode defines a numeric value that identifies the activity or a point within an activity that the application was performing when it raised the event.</summary>
      <returns>Returns a <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Task">
      <summary>Gets the task associated with the event. A task identifies a portion of an application or a component that publishes an event. </summary>
      <returns>Returns a <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Template">
      <summary>Gets the template string for the event. Templates are used to describe data that is used by a provider when an event is published. Templates optionally specify XML that provides the structure of an event. The XML allows values that the event publisher provides to be inserted during the rendering of an event.</summary>
      <returns>Returns a string that contains the template for the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventMetadata.Version">
      <summary>Gets the version of the event that qualifies the event identifier.</summary>
      <returns>Returns a byte value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventOpcode">
      <summary>Contains an event opcode that is defined in an event provider. An opcode defines a numeric value that identifies the activity or a point within an activity that the application was performing when it raised the event.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventOpcode.DisplayName">
      <summary>Gets the localized name for an event opcode.</summary>
      <returns>Returns a string that contains the localized name for an event opcode.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventOpcode.Name">
      <summary>Gets the non-localized name for an event opcode.</summary>
      <returns>Returns a string that contains the non-localized name for an event opcode.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventOpcode.Value">
      <summary>Gets the numeric value associated with the event opcode.</summary>
      <returns>Returns an integer value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventProperty">
      <summary>Contains the value of an event property that is specified by the event provider when the event is published.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventProperty.Value">
      <summary>Gets the value of the event property that is specified by the event provider when the event is published.</summary>
      <returns>Returns an object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventRecord">
      <summary>Defines the properties of an event instance for an event that is received from an <see cref="T:System.Diagnostics.Eventing.Reader.EventLogReader" /> object. The event properties provide information about the event such as the name of the computer where the event was logged and the time the event was created. This class is an abstract class. The <see cref="T:System.Diagnostics.Eventing.Reader.EventLogRecord" /> class implements this class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> class.</summary>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ActivityId">
      <summary>Gets the globally unique identifier (GUID) for the activity in process for which the event is involved. This allows consumers to group related activities.</summary>
      <returns>Returns a GUID value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Bookmark">
      <summary>Gets a placeholder (bookmark) that corresponds to this event. This can be used as a placeholder in a stream of events.</summary>
      <returns>Returns a <see cref="T:System.Diagnostics.Eventing.Reader.EventBookmark" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.Dispose">
      <summary>Releases all the resources used by this object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by this object, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.FormatDescription">
      <summary>Gets the event message in the current locale.</summary>
      <returns>Returns a string that contains the event message in the current locale.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.FormatDescription(System.Collections.Generic.IEnumerable{System.Object})">
      <summary>Gets the event message, replacing variables in the message with the specified values.</summary>
      <returns>Returns a string that contains the event message in the current locale.</returns>
      <param name="values">The values used to replace variables in the event message. Variables are represented by %n, where n is a number.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Id">
      <summary>Gets the identifier for this event. All events with this identifier value represent the same type of event.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Keywords">
      <summary>Gets the keyword mask of the event. Get the value of the <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.KeywordsDisplayNames" /> property to get the name of the keywords used in this mask.</summary>
      <returns>Returns a long value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.KeywordsDisplayNames">
      <summary>Gets the display names of the keywords used in the keyword mask for this event. </summary>
      <returns>Returns an enumerable collection of strings that contain the display names of the keywords used in the keyword mask for this event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Level">
      <summary>Gets the level of the event. The level signifies the severity of the event. For the name of the level, get the value of the <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.LevelDisplayName" /> property.</summary>
      <returns>Returns a byte value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.LevelDisplayName">
      <summary>Gets the display name of the level for this event.</summary>
      <returns>Returns a string that contains the display name of the level for this event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.LogName">
      <summary>Gets the name of the event log where this event is logged.</summary>
      <returns>Returns a string that contains a name of the event log that contains this event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.MachineName">
      <summary>Gets the name of the computer on which this event was logged.</summary>
      <returns>Returns a string that contains the name of the computer on which this event was logged.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Opcode">
      <summary>Gets the opcode of the event. The opcode defines a numeric value that identifies the activity or a point within an activity that the application was performing when it raised the event. For the name of the opcode, get the value of the <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.OpcodeDisplayName" /> property.</summary>
      <returns>Returns a short value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.OpcodeDisplayName">
      <summary>Gets the display name of the opcode for this event.</summary>
      <returns>Returns a string that contains the display name of the opcode for this event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ProcessId">
      <summary>Gets the process identifier for the event provider that logged this event.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Properties">
      <summary>Gets the user-supplied properties of the event.</summary>
      <returns>Returns a list of <see cref="T:System.Diagnostics.Eventing.Reader.EventProperty" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ProviderId">
      <summary>Gets the globally unique identifier (GUID) of the event provider that published this event.</summary>
      <returns>Returns a GUID value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ProviderName">
      <summary>Gets the name of the event provider that published this event.</summary>
      <returns>Returns a string that contains the name of the event provider that published this event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Qualifiers">
      <summary>Gets qualifier numbers that are used for event identification.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.RecordId">
      <summary>Gets the event record identifier of the event in the log.</summary>
      <returns>Returns a long value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.RelatedActivityId">
      <summary>Gets a globally unique identifier (GUID) for a related activity in a process for which an event is involved.</summary>
      <returns>Returns a GUID value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Task">
      <summary>Gets a task identifier for a portion of an application or a component that publishes an event. A task is a 16-bit value with 16 top values reserved. This type allows any value between 0x0000 and 0xffef to be used. To obtain the task name, get the value of the <see cref="P:System.Diagnostics.Eventing.Reader.EventRecord.TaskDisplayName" /> property.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.TaskDisplayName">
      <summary>Gets the display name of the task for the event.</summary>
      <returns>Returns a string that contains the display name of the task for the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.ThreadId">
      <summary>Gets the thread identifier for the thread that the event provider is running in.</summary>
      <returns>Returns an integer value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.TimeCreated">
      <summary>Gets the time, in <see cref="T:System.DateTime" /> format, that the event was created.</summary>
      <returns>Returns a <see cref="T:System.DateTime" /> value. The value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.EventRecord.ToXml">
      <summary>Gets the XML representation of the event. All of the event properties are represented in the event XML. The XML conforms to the event schema.</summary>
      <returns>Returns a string that contains the XML representation of the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.UserId">
      <summary>Gets the security descriptor of the user whose context is used to publish the event.</summary>
      <returns>Returns a <see cref="T:System.Security.Principal.SecurityIdentifier" /> value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecord.Version">
      <summary>Gets the version number for the event.</summary>
      <returns>Returns a byte value. This value can be null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs">
      <summary>When the <see cref="E:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten" /> event is raised, an instance of this object is passed to the delegate method that handles the event. This object contains the event that was published to the event log or the exception that occurred when the event subscription failed. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs.EventException">
      <summary>Gets the exception that occurred when the event subscription failed. The exception has a description of why the subscription failed.</summary>
      <returns>Returns an <see cref="T:System.Exception" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs.EventRecord">
      <summary>Gets the event record that is published to the event log. This event matches the criteria from the query specified in the event subscription.</summary>
      <returns>Returns a <see cref="T:System.Diagnostics.Eventing.Reader.EventRecord" /> object.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.EventTask">
      <summary>Contains an event task that is defined in an event provider. The task identifies a portion of an application or a component that publishes an event. A task is a 16-bit value with 16 top values reserved.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.DisplayName">
      <summary>Gets the localized name for the event task.</summary>
      <returns>Returns a string that contains the localized name for the event task.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.EventGuid">
      <summary>Gets the event globally unique identifier (GUID) associated with the task. </summary>
      <returns>Returns a GUID value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.Name">
      <summary>Gets the non-localized name of the event task.</summary>
      <returns>Returns a string that contains the non-localized name of the event task.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.EventTask.Value">
      <summary>Gets the numeric value associated with the task.</summary>
      <returns>Returns an integer value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.PathType">
      <summary>Specifies that a string contains a name of an event log or the file system path to an event log file.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.PathType.LogName">
      <summary>A path parameter contains the name of the event log.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.PathType.FilePath">
      <summary>A path parameter contains the file system path to an event log file.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.ProviderMetadata">
      <summary>Contains static information about an event provider, such as the name and id of the provider, and the collection of events defined in the provider.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.ProviderMetadata" /> class by specifying the name of the provider that you want to retrieve information about.</summary>
      <param name="providerName">The name of the event provider that you want to retrieve information about.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.#ctor(System.String,System.Diagnostics.Eventing.Reader.EventLogSession,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.Eventing.Reader.ProviderMetadata" /> class by specifying the name of the provider that you want to retrieve information about, the event log service that the provider is registered with, and the language that you want to return the information in.</summary>
      <param name="providerName">The name of the event provider that you want to retrieve information about.</param>
      <param name="session">The <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> object that specifies whether to get the provider information from a provider on the local computer or a provider on a remote computer.</param>
      <param name="targetCultureInfo">The culture that specifies the language that the information should be returned in.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.DisplayName">
      <summary>Gets the localized name of the event provider.</summary>
      <returns>Returns a string that contains the localized name of the event provider.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.Dispose">
      <summary>Releases all the resources used by this object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.Eventing.Reader.ProviderMetadata.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by this object, and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Events">
      <summary>Gets an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventMetadata" /> objects, each of which represents an event that is defined in the provider.</summary>
      <returns>Returns an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventMetadata" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.HelpLink">
      <summary>Gets the base of the URL used to form help requests for the events in this event provider.</summary>
      <returns>Returns a <see cref="T:System.Uri" /> value.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Id">
      <summary>Gets the globally unique identifier (GUID) for the event provider.</summary>
      <returns>Returns the GUID value for the event provider.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Keywords">
      <summary>Gets an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" /> objects, each of which represent an event keyword that is defined in the event provider.</summary>
      <returns>Returns an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Levels">
      <summary>Gets an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" /> objects, each of which represent a level that is defined in the event provider.</summary>
      <returns>Returns an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.LogLinks">
      <summary>Gets an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" /> objects, each of which represent a link to an event log that is used by the event provider.</summary>
      <returns>Returns an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventLogLink" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.MessageFilePath">
      <summary>Gets the path of the file that contains the message table resource that has the strings associated with the provider metadata.</summary>
      <returns>Returns a string that contains the path of the provider message file.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Name">
      <summary>Gets the unique name of the event provider.</summary>
      <returns>Returns a string that contains the unique name of the event provider.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Opcodes">
      <summary>Gets an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" /> objects, each of which represent an opcode that is defined in the event provider.</summary>
      <returns>Returns an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.ParameterFilePath">
      <summary>Gets the path of the file that contains the message table resource that has the strings used for parameter substitutions in event descriptions.</summary>
      <returns>Returns a string that contains the path of the file that contains the message table resource that has the strings used for parameter substitutions in event descriptions.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.ResourceFilePath">
      <summary>Gets the path to the file that contains the metadata associated with the provider.</summary>
      <returns>Returns a string that contains the path to the file that contains the metadata associated with the provider.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.Eventing.Reader.ProviderMetadata.Tasks">
      <summary>Gets an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" /> objects, each of which represent a task that is defined in the event provider.</summary>
      <returns>Returns an enumerable collection of <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" /> objects.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.SessionAuthentication">
      <summary>Defines values for the type of authentication used during a Remote Procedure Call (RPC) login to a server. This login occurs when you create a <see cref="T:System.Diagnostics.Eventing.Reader.EventLogSession" /> object that specifies a connection to a remote computer.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Default">
      <summary>Use the default authentication method during RPC login. The default authentication is equivalent to Negotiate.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Negotiate">
      <summary>Use the Negotiate authentication method during RPC login. This allows the client application to select the most appropriate authentication method (NTLM or Kerberos) for the situation. </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Kerberos">
      <summary>Use Kerberos authentication during RPC login. </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.SessionAuthentication.Ntlm">
      <summary>Use Windows NT LAN Manager (NTLM) authentication during RPC login.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventKeywords">
      <summary>Defines the standard keywords that are attached to events by the event provider. For more information about keywords, see <see cref="T:System.Diagnostics.Eventing.Reader.EventKeyword" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.None">
      <summary>This value indicates that no filtering on keyword is performed when the event is published.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.WdiContext">
      <summary>Attached to all Windows Diagnostic Infrastructure (WDI) context events.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.WdiDiagnostic">
      <summary>Attached to all Windows Diagnostic Infrastructure (WDI) diagnostic events.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.Sqm">
      <summary>Attached to all Service Quality Mechanism (SQM) events.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.AuditFailure">
      <summary>Attached to all failed security audit events. This keyword should only be used for events in the Security log.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.AuditSuccess">
      <summary>Attached to all successful security audit events. This keyword should only be used for events in the Security log.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.CorrelationHint">
      <summary>Attached to transfer events where the related Activity ID (Correlation ID) is a computed value and is not guaranteed to be unique (not a real GUID).</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventKeywords.EventLogClassic">
      <summary>Attached to events which are raised using the RaiseEvent function.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventLevel">
      <summary>Defines the standard event levels that are used in the Event Log service. The level defines the severity of the event. Custom event levels can be defined beyond these standard levels. For more information about levels, see <see cref="T:System.Diagnostics.Eventing.Reader.EventLevel" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.LogAlways">
      <summary>This value indicates that not filtering on the level is done during the event publishing.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Critical">
      <summary>This level corresponds to critical errors, which is a serious error that has caused a major failure. </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Error">
      <summary>This level corresponds to normal errors that signify a problem. </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Warning">
      <summary>This level corresponds to warning events. For example, an event that gets published because a disk is nearing full capacity is a warning event.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Informational">
      <summary>This level corresponds to informational events or messages that are not errors. These events can help trace the progress or state of an application.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventLevel.Verbose">
      <summary>This level corresponds to lengthy events or messages. </summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventOpcode">
      <summary>Defines the standard opcodes that are attached to events by the event provider. For more information about opcodes, see <see cref="T:System.Diagnostics.Eventing.Reader.EventOpcode" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Info">
      <summary>An event with this opcode is an informational event.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Start">
      <summary>An event with this opcode is published when an application starts a new transaction or activity. This can be embedded into another transaction or activity when multiple events with the Start opcode follow each other without an event with a Stop opcode.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Stop">
      <summary>An event with this opcode is published when an activity or a transaction in an application ends. The event corresponds to the last unpaired event with a Start opcode.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.DataCollectionStart">
      <summary>An event with this opcode is a trace collection start event.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.DataCollectionStop">
      <summary>An event with this opcode is a trace collection stop event.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Extension">
      <summary>An event with this opcode is an extension event.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Reply">
      <summary>An event with this opcode is published after an activity in an application replies to an event.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Resume">
      <summary>An event with this opcode is published after an activity in an application resumes from a suspended state. The event should follow an event with the Suspend opcode.</summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Suspend">
      <summary>An event with this opcode is published when an activity in an application is suspended. </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Send">
      <summary>An event with this opcode is published when one activity in an application transfers data or system resources to another activity. </summary>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventOpcode.Receive">
      <summary>An event with this opcode is published when one activity in an application receives data.</summary>
    </member>
    <member name="T:System.Diagnostics.Eventing.Reader.StandardEventTask">
      <summary>Defines the standard tasks that are attached to events by the event provider. For more information about tasks, see <see cref="T:System.Diagnostics.Eventing.Reader.EventTask" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.Eventing.Reader.StandardEventTask.None">
      <summary>No task is used to identify a portion of an application that publishes an event.</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterData">
      <summary>Contains the raw data for a counter.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.Decrement">
      <summary>Decrements the counter value by 1.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.Increment">
      <summary>Increments the counter value by 1.</summary>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterData.IncrementBy(System.Int64)">
      <summary>Increments the counter value by the specified amount.</summary>
      <param name="value">The amount by which to increment the counter value. The increment value can be positive or negative.</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterData.RawValue">
      <summary>Sets or gets the raw counter data.</summary>
      <returns>The raw counter data.</returns>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterData.Value">
      <summary>Sets or gets the counter data.</summary>
      <returns>The counter data.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSet">
      <summary>Defines a set of logical counters.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.#ctor(System.Guid,System.Guid,System.Diagnostics.PerformanceData.CounterSetInstanceType)">
      <summary>Initializes a new instance of the <see cref="T:System.Diagnostics.PerformanceData.CounterSet" /> class.</summary>
      <param name="providerGuid">Guid that uniquely identifies the provider of the counter data. Use the Guid specified in the manifest.</param>
      <param name="counterSetGuid">Guid that uniquely identifies the counter set for a provider. Use the Guid specified in the manifest.</param>
      <param name="instanceType">Identifies the type of the counter set, for example, whether the counter set is a single or multiple instance counter set.</param>
      <exception cref="T:System.InsufficientMemoryException">Not enough memory is available to complete the operation.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Not supported prior to Windows Vista.</exception>
      <exception cref="T:System.ArgumentException">One of the parameters is NULL or not valid.</exception>
      <exception cref="T:System.ComponentModel.Win32Exception">An underlying Win32 function call failed.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType)">
      <summary>Adds a counter to the counter set by using the specified counter identifier and type.</summary>
      <param name="counterId">Identifies the counter. Use the same value that you used in the manifest to define the counter.</param>
      <param name="counterType">Identifies the counter type. The counter type determines how the counter data is calculated, averaged, and displayed. </param>
      <exception cref="T:System.ArgumentException">The counter identifier already exists in the set or is negative, or the counter type is NULL or not valid.</exception>
      <exception cref="T:System.InvalidOperationException">You cannot add counters to the counter set after creating an instance of the counter set.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.AddCounter(System.Int32,System.Diagnostics.PerformanceData.CounterType,System.String)">
      <summary>Adds a counter to the counter set by using the specified counter identifier and type and a display name for the counter.</summary>
      <param name="counterId">Identifies the counter. Use the same value that you used in the manifest to define the counter.</param>
      <param name="counterType">Identifies the counter type. The counter type determines how the counter data is calculated, averaged, and displayed. </param>
      <param name="counterName">Name of the counter. You can use this name to index the counter in the counter set instance. (See <see cref="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.String)" />.)</param>
      <exception cref="T:System.ArgumentException">The counter identifier already exists in the set or is negative, or the counter type is NULL or not valid.</exception>
      <exception cref="T:System.InvalidOperationException">You cannot add counters to the counter set after creating an instance of the counter set.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.CreateCounterSetInstance(System.String)">
      <summary>Creates an instance of the counter set.</summary>
      <returns>An instance of the counter set which will contain the counter data.</returns>
      <param name="instanceName">Name of the instance. The name must be unique.</param>
      <exception cref="T:System.ArgumentException">The instance name is NULL.</exception>
      <exception cref="T:System.InvalidOperationException">You must add counters to the counter set before creating an instance of the counter set.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Dispose">
      <summary>Releases all unmanaged resources used by this object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Dispose(System.Boolean)">
      <summary>Releases all unmanaged resources used by this object and optionally release the managed resources.</summary>
      <param name="disposing">True if this was called from the Dispose method, False if called from the finalizer.</param>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSet.Finalize">
      <summary>Frees resources before the object is reclaimed by garbage collection.</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstance">
      <summary>Creates an instance of the logical counters defined in the <see cref="T:System.Diagnostics.PerformanceData.CounterSet" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstance.Counters">
      <summary>Retrieves the collection of counter data for the counter set instance.</summary>
      <returns>A collection of the counter data contained in the counter set instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstance.Dispose">
      <summary>Releases all unmanaged resources used by this object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet">
      <summary>Contains the collection of counter values.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Dispose">
      <summary>Releases all unmanaged resources used by this object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.Int32)">
      <summary>Accesses a counter value in the collection by using the specified counter identifier.</summary>
      <returns>The counter data.</returns>
      <param name="counterId">Identifier of the counter. This is the identifier you used when you added the counter to the counter set.</param>
    </member>
    <member name="P:System.Diagnostics.PerformanceData.CounterSetInstanceCounterDataSet.Item(System.String)">
      <summary>Accesses a counter value in the collection by using the specified counter name.</summary>
      <returns>The counter data.</returns>
      <param name="counterName">Name of the counter. This is the name that you used when you added the counter to the counter set.</param>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterSetInstanceType">
      <summary>Specifies whether the counter set allows multiple instances such as processes and physical disks, or a single instance such as memory.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Single">
      <summary>The counter set contains single instance counters, for example, a counter that measures physical memory.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Multiple">
      <summary>The counter set contains multiple instance counters, for example, a counter that measures the average disk I/O for a process.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregate">
      <summary>The counter set contains single instance counters whose aggregate value is obtained from one or more sources. For example, a counter in this type of counter set might obtain the number of reads from each of the three hard disks on the computer and sum their values.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregateWithHistory">
      <summary>This type is similar to <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.GlobalAggregate" /> except that this counter set type stores all counter values for the lifetime of the consumer application (the counter value is cached beyond the lifetime of the counter). For example, if one of the hard disks in the global aggregate example were to become unavailable, the total bytes read by that disk would still be available and used to calculate the aggregate value.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate">
      <summary>The counter set contains multiple instance counters whose aggregate value is obtained from all instances of the counter. For example, a counter in this type of counter set might obtain the total thread execution time for all threads in a multithreaded application and sum their values.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.InstanceAggregate">
      <summary>This type is similar to <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate" />, except that instead of aggregating all instance data to one aggregated (_Total) instance, it will aggregate counter data from instances of the same name. For example, if multiple provider processes contained instances named IExplore, <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.Multiple" /> and <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.MultipleAggregate" /> CounterSet will show multiple IExplore instances (IExplore, IExplore#1, IExplore#2, and so on); however, a <see cref="F:System.Diagnostics.PerformanceData.CounterSetInstanceType.InstanceAggregate" /> instance type will publish only one IExplore instance with aggregated counter data from all instances named IExplore.</summary>
    </member>
    <member name="T:System.Diagnostics.PerformanceData.CounterType">
      <summary>Defines the possible types of counters. Each counter is assigned a counter type. The counter type determines how the counter data is calculated, averaged, and displayed.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLength">
      <summary>This counter type is designed to monitor the average length of a queue to a resource over time. It shows the difference between the queue lengths observed during the last two sample intervals divided by the duration of the interval. (See the PERF_COUNTER_QUEUELEN_TYPE counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.LargeQueueLength">
      <summary>This counter type monitors the average length of a queue to a resource over time. Counters of this type display the difference between the queue lengths observed during the last two sample intervals, divided by the duration of the interval. This counter type is the same as the <see cref="F:System.Diagnostics.PerformanceData.CounterType.QueueLength" /> counter type, except that it uses larger fields to accommodate larger values. (See the PERF_COUNTER_LARGE_QUEUELEN_TYPE counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLength100Ns">
      <summary>This counter type measures the queue-length space-time product using a 100-nanosecond time base. (See the PERF_COUNTER_100NS_QUEUELEN_TYPE counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.QueueLengthObjectTime">
      <summary>This counter type measures the queue-length space-time product using an object-specific time base. (See the PERF_COUNTER_OBJ_QUEUELEN_TYPE counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawData32">
      <summary>This counter type shows the last observed value only. It does not display an average. (See the PERF_COUNTER_RAWCOUNT counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawData64">
      <summary>This counter type shows the last observed value only, not an average. It is the same as the <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawData32" /> counter type, except that it uses larger fields to accommodate larger values. (See the PERF_COUNTER_LARGE_RAWCOUNT counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex32">
      <summary>This counter type shows the most recently observed value, in hexadecimal format. It does not display an average. (See the PERF_COUNTER_RAWCOUNT_HEX counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex64">
      <summary>This counter type shows the last observed value, in hexadecimal format. It is the same as the <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawDataHex32" /> counter type, except that it uses larger fields to accommodate larger values. (See the PERF_COUNTER_LARGE_RAWCOUNT_HEX counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond32">
      <summary>This counter type shows the average number of operations completed during each second of the sample interval. Counters of this type measure time in ticks of the system clock. (See the PERF_COUNTER_COUNTER counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond64">
      <summary>This counter type shows the average number of operations completed during each second of the sample interval. Counters of this type measure time in ticks of the system clock. This counter type is the same as the <see cref="F:System.Diagnostics.PerformanceData.CounterType.RateOfCountPerSecond32" /> type, but it uses larger fields to accommodate larger values. (See the PERF_COUNTER_BULK_COUNT counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32">
      <summary>This counter type shows the ratio of a subset to its set as a percentage. For example, it compares the number of bytes in use on a disk to the total number of bytes on the disk. Counters of this type display the current percentage only, not an average over time. (See the PERF_RAW_FRACTION counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawFraction64">
      <summary>This counter type shows the ratio of a subset to its set as a percentage. For example, it compares the number of bytes in use on a disk to the total number of bytes on the disk. Counters of this type display the current percentage only, not an average over time. It is the same as the <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32" /> counter type, except that it uses larger fields to accommodate larger values.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawBase32">
      <summary>This counter type collects the last observed value only. The value is used as the denominator of a counter that presents a general arithmetic fraction. This type supports the <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction32" /> counter type. (See the PERF_RAW_BASE counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.RawBase64">
      <summary>This counter type collects the last observed value. It is the same as the <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawBase32" />counter type except that it uses larger fields to accommodate larger values. This type supports the <see cref="F:System.Diagnostics.PerformanceData.CounterType.RawFraction64" /> counter type. (See the PERF_LARGE_RAW_BASE counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleFraction">
      <summary>This counter type shows the average ratio of hits to all operations during the last two sample intervals. (See the PERF_SAMPLE_FRACTION counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleCounter">
      <summary>This counter type shows the average number of operations completed in one second. It measures time in units of ticks of the system performance timer. The variable F represents the number of ticks that occur in one second. The value of F is factored into the equation so that the result is displayed in seconds. (See the PERF_SAMPLE_COUNTER counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.SampleBase">
      <summary>This counter stores the number of sampling interrupts taken and is used as a denominator in the sampling fraction. This type supports the <see cref="F:System.Diagnostics.PerformanceData.CounterType.SampleFraction" /> counter type.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageTimer32">
      <summary>This counter type measures the average time it takes to complete a process or operation. Counters of this type display a ratio of the total elapsed time of the sample interval to the number of processes or operations completed during that time. This counter type measures time in ticks of the system clock. (See the PERF_AVERAGE_TIMER counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageBase">
      <summary>This counter is used as the base data (denominator) in the computation of time or count averages for the <see cref="F:System.Diagnostics.PerformanceData.CounterType.AverageCount64" /> and <see cref="F:System.Diagnostics.PerformanceData.CounterType.AverageTimer32" /> counter types. This counter type collects the last observed value only. (See the PERF_AVERAGE_BASE counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.AverageCount64">
      <summary>This counter type shows how many items are processed, on average, during an operation. Counters of this type display a ratio of the items processed (such as bytes sent) to the number of operations completed. The ratio is calculated by comparing the number of items processed during the last interval to the number of operations completed during the last interval. (See the PERF_AVERAGE_BULK counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageActive">
      <summary>This counter type shows the average time that a component was active as a percentage of the total sample time. (See the PERF_COUNTER_TIMER counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive">
      <summary>This is an inverse counter type. Inverse counters measure the time that a component is not active and derive the active time from that measurement. Counters of this type display the average percentage of active time observed during sample interval. The value of these counters is calculated by monitoring the percentage of time that the service was inactive and then subtracting that value from 100 percent. This counter type is the same as the <see cref="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive100Ns" /> counter type, except that it measures time in units of ticks of the system performance timer, rather than in 100 nanosecond units. (See the PERF_COUNTER_TIMER_INV counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageActive100Ns">
      <summary>This counter type shows the active time of a component as a percentage of the total elapsed time of the sample interval. It measures time in units of 100 nanoseconds. Counters of this type are designed to measure the activity of one component at a time. (See the PERF_100NSEC_TIMER counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PercentageNotActive100Ns">
      <summary>This counter type shows the average percentage of active time observed during the sample interval. This is an inverse counter. Inverse counters are calculated by monitoring the percentage of time that the service was inactive and then subtracting that value from 100 percent. (See the PERF_100NSEC_TIMER_INV counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.ElapsedTime">
      <summary>This counter type shows the total time between when the component or process started and the time when this value is calculated. (See the PERF_ELAPSED_TIME counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive">
      <summary>This counter type is a multitimer. Multitimers collect data from more than one instance of a component, such as a processor or disk. Counters of this type display the active time of one or more components as a percentage of the total time of the sample interval. Because the numerator records the active time of components operating simultaneously, the resulting percentage can exceed 100 percent. This counter type differs from <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns" /> in that it measures time in units of ticks of the system performance timer, rather than in 100 nanosecond units. (See the PERF_COUNTER_MULTI_TIMER counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive">
      <summary>This counter type shows the active time of one or more components as a percentage of the total time of the sample interval. This counter type is an inverse multitimer. Multitimers monitor more than one instance of a component, such as a processor or disk. Inverse counters measure the time that a component is not active and derive the active time from that measurement. This counter differs from <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns" /> in that it measures time in units of ticks of the system performance timer, rather than in 100 nanosecond units. (See the PERF_COUNTER_MULTI_TIMER_INV counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns">
      <summary>This counter type shows the active time of one or more components as a percentage of the total time of the sample interval. It measures time in 100 nanosecond units. This counter type is a multitimer. Multitimers are designed to monitor more than one instance of a component, such as a processor or disk. (See the PERF_100NSEC_MULTI_TIMER counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns">
      <summary>This counter type shows the active time of one or more components as a percentage of the total time of the sample interval. Counters of this type measure time in 100 nanosecond units. This counter type is an inverse multitimer. Multitimers are designed to monitor more than one instance of a component, such as a processor or disk. Inverse counters measure the time that a component is not active and derive its active time from the measurement of inactive time. (See the PERF_100NSEC_MULTI_TIMER_INV counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerBase">
      <summary>Indicates the number of items sampled. It is used as the denominator in the calculations to get an average among the items sampled when taking timings of multiple, but similar, items. This type supports the following counter types: <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive" />, <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive" />, <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageActive100Ns" />, and <see cref="F:System.Diagnostics.PerformanceData.CounterType.MultiTimerPercentageNotActive100Ns" />.</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.Delta32">
      <summary>This counter type shows the change in the measured attribute between the two most recent sample intervals. (See the PERF_COUNTER_DELTA counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.Delta64">
      <summary>This counter type shows the change in the measured attribute between the two most recent sample intervals. It is the same as the <see cref="F:System.Diagnostics.PerformanceData.CounterType.Delta32" /> counter type, except that it uses larger fields to accommodate larger values. (See the PERF_COUNTER_LARGE_DELTA counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.ObjectSpecificTimer">
      <summary>This 64-bit counter type is a timer that displays in object-specific units. (See the PERF_OBJ_TIME_TIMER counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionSystemTimer">
      <summary>This counter type shows a value that consists of two counter values: the count of the elapsed time of the event being monitored, and the frequency from the system performance timer. This counter type differs from other counter timers in that the clock tick value accompanies the counter value, eliminating any possible difference due to latency from the function call. Precision counter types are used when standard system timers are not precise enough for accurate readings. (See the PERF_PRECISION_TIMER counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionTimer100Ns">
      <summary>This counter type shows a value that consists of two counter values: the count of the elapsed time of the event being monitored, and the "clock" time from a private timer in the same units. It measures time in 100 nanosecond units. This counter type differs from other counter timers in that the clock tick value accompanies the counter value eliminating any possible difference due to latency from the function call. Precision counter types are used when standard system timers are not precise enough for accurate readings. (See the PERF_PRECISION_100NS_TIMER counter type in the deployment kit.)</summary>
    </member>
    <member name="F:System.Diagnostics.PerformanceData.CounterType.PrecisionObjectSpecificTimer">
      <summary>This counter type shows a value that consists of two counter values: the count of the elapsed time of the event being monitored, and the frequency specified in the PerfFreq field of the object header. This counter type differs from other counter timers in that the clock tick value accompanies the counter value so as to eliminate any possible difference due to latency from the function call. Precision counter types are used when standard system timers are not precise enough for accurate readings. (See the PERF_PRECISION_OBJECT_TIMER counter type in the deployment kit.)</summary>
    </member>
    <member name="T:System.Dynamic.BinaryOperationBinder">
      <summary>Represents the binary dynamic operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.BinaryOperationBinder" /> class.</summary>
      <param name="operation">The binary operation kind.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic binary operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic operation.</param>
      <param name="args">An array of arguments of the dynamic operation.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the binary dynamic operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic binary operation.</param>
      <param name="arg">The right hand side operand of the dynamic binary operation.</param>
    </member>
    <member name="M:System.Dynamic.BinaryOperationBinder.FallbackBinaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the binary dynamic operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic binary operation.</param>
      <param name="arg">The right hand side operand of the dynamic binary operation.</param>
      <param name="errorSuggestion">The binding result if the binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.Operation">
      <summary>The binary operation kind.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> object representing the kind of binary operation.</returns>
    </member>
    <member name="P:System.Dynamic.BinaryOperationBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.BindingRestrictions">
      <summary>Represents a set of binding restrictions on the <see cref="T:System.Dynamic.DynamicMetaObject" /> under which the dynamic binding is valid.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Combine(System.Collections.Generic.IList{System.Dynamic.DynamicMetaObject})">
      <summary>Combines binding restrictions from the list of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances into one set of restrictions.</summary>
      <returns>The new set of binding restrictions.</returns>
      <param name="contributingObjects">The list of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances from which to combine restrictions.</param>
    </member>
    <member name="F:System.Dynamic.BindingRestrictions.Empty">
      <summary>Represents an empty set of binding restrictions. This field is read only.</summary>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetExpressionRestriction(System.Linq.Expressions.Expression)">
      <summary>Creates the binding restriction that checks the expression for arbitrary immutable properties.</summary>
      <returns>The new binding restrictions.</returns>
      <param name="expression">The expression representing the restrictions.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Linq.Expressions.Expression,System.Object)">
      <summary>Creates the binding restriction that checks the expression for object instance identity.</summary>
      <returns>The new binding restrictions.</returns>
      <param name="expression">The expression to test.</param>
      <param name="instance">The exact object instance to test.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.GetTypeRestriction(System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates the binding restriction that check the expression for runtime type identity.</summary>
      <returns>The new binding restrictions.</returns>
      <param name="expression">The expression to test.</param>
      <param name="type">The exact type to test.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.Merge(System.Dynamic.BindingRestrictions)">
      <summary>Merges the set of binding restrictions with the current binding restrictions.</summary>
      <returns>The new set of binding restrictions.</returns>
      <param name="restrictions">The set of restrictions with which to merge the current binding restrictions.</param>
    </member>
    <member name="M:System.Dynamic.BindingRestrictions.ToExpression">
      <summary>Creates the <see cref="T:System.Linq.Expressions.Expression" /> representing the binding restrictions.</summary>
      <returns>The expression tree representing the restrictions.</returns>
    </member>
    <member name="T:System.Dynamic.CallInfo">
      <summary>Describes arguments in the dynamic binding process.</summary>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Creates a new CallInfo that represents arguments in the dynamic binding process.</summary>
      <param name="argCount">The number of arguments.</param>
      <param name="argNames">The argument names.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.#ctor(System.Int32,System.String[])">
      <summary>Creates a new PositionalArgumentInfo.</summary>
      <param name="argCount">The number of arguments.</param>
      <param name="argNames">The argument names.</param>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentCount">
      <summary>The number of arguments.</summary>
      <returns>The number of arguments.</returns>
    </member>
    <member name="P:System.Dynamic.CallInfo.ArgumentNames">
      <summary>The argument names.</summary>
      <returns>The read-only collection of argument names.</returns>
    </member>
    <member name="M:System.Dynamic.CallInfo.Equals(System.Object)">
      <summary>Determines whether the specified CallInfo instance is considered equal to the current.</summary>
      <returns>true if the specified instance is equal to the current one otherwise, false.</returns>
      <param name="obj">The instance of <see cref="T:System.Dynamic.CallInfo" /> to compare with the current instance.</param>
    </member>
    <member name="M:System.Dynamic.CallInfo.GetHashCode">
      <summary>Serves as a hash function for the current <see cref="T:System.Dynamic.CallInfo" />.</summary>
      <returns>A hash code for the current <see cref="T:System.Dynamic.CallInfo" />.</returns>
    </member>
    <member name="T:System.Dynamic.ConvertBinder">
      <summary>Represents the convert dynamic operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.#ctor(System.Type,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.ConvertBinder" />.</summary>
      <param name="type">The type to convert to.</param>
      <param name="explicit">Is true if the conversion should consider explicit conversions; otherwise, false.</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic convert operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic convert operation.</param>
      <param name="args">An array of arguments of the dynamic convert operation.</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Explicit">
      <summary>Gets the value indicating if the conversion should consider explicit conversions.</summary>
      <returns>True if there is an explicit conversion, otherwise false.</returns>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic convert operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic convert operation.</param>
    </member>
    <member name="M:System.Dynamic.ConvertBinder.FallbackConvert(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic convert operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic convert operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="P:System.Dynamic.ConvertBinder.Type">
      <summary>The type to convert to.</summary>
      <returns>The <see cref="T:System.Type" /> object that represents the type to convert to.</returns>
    </member>
    <member name="T:System.Dynamic.CreateInstanceBinder">
      <summary>Represents the dynamic create operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initializes a new intsance of the <see cref="T:System.Dynamic.CreateInstanceBinder" />.</summary>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic create operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic create operation.</param>
      <param name="args">An array of arguments of the dynamic create operation.</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic create operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic create operation.</param>
      <param name="args">The arguments of the dynamic create operation.</param>
    </member>
    <member name="M:System.Dynamic.CreateInstanceBinder.FallbackCreateInstance(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic create operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic create operation.</param>
      <param name="args">The arguments of the dynamic create operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.CreateInstanceBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteIndexBinder">
      <summary>Represents the dynamic delete index operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.DeleteIndexBinder" />.</summary>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic delete index operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic delete index operation.</param>
      <param name="args">An array of arguments of the dynamic delete index operation.</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic delete index operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic delete index operation.</param>
      <param name="indexes">The arguments of the dynamic delete index operation.</param>
    </member>
    <member name="M:System.Dynamic.DeleteIndexBinder.FallbackDeleteIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic delete index operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic delete index operation.</param>
      <param name="indexes">The arguments of the dynamic delete index operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.DeleteIndexBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.DeleteMemberBinder">
      <summary>Represents the dynamic delete member operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.DeleteIndexBinder" />.</summary>
      <param name="name">The name of the member to delete.</param>
      <param name="ignoreCase">Is true if the name should be matched ignoring case; false otherwise.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic delete member operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic delete member operation.</param>
      <param name="args">An array of arguments of the dynamic delete member operation.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic delete member operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic delete member operation.</param>
    </member>
    <member name="M:System.Dynamic.DeleteMemberBinder.FallbackDeleteMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic delete member operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic delete member operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.IgnoreCase">
      <summary>Gets the value indicating if the string comparison should ignore the case of the member name.</summary>
      <returns>True if the string comparison should ignore the case, otherwise false.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.Name">
      <summary>Gets the name of the member to delete.</summary>
      <returns>The name of the member to delete.</returns>
    </member>
    <member name="P:System.Dynamic.DeleteMemberBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObject">
      <summary>Represents the dynamic binding and a binding logic of an object participating in the dynamic binding.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.DynamicMetaObject" /> class.</summary>
      <param name="expression">The expression representing this <see cref="T:System.Dynamic.DynamicMetaObject" /> during the dynamic binding process.</param>
      <param name="restrictions">The set of binding restrictions under which the binding is valid.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.#ctor(System.Linq.Expressions.Expression,System.Dynamic.BindingRestrictions,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.DynamicMetaObject" /> class.</summary>
      <param name="expression">The expression representing this <see cref="T:System.Dynamic.DynamicMetaObject" /> during the dynamic binding process.</param>
      <param name="restrictions">The set of binding restrictions under which the binding is valid.</param>
      <param name="value">The runtime value represented by the <see cref="T:System.Dynamic.DynamicMetaObject" />.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic binary operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.BinaryOperationBinder" /> that represents the details of the dynamic operation.</param>
      <param name="arg">An instance of the <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the right hand side of the binary operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)">
      <summary>Performs the binding of the dynamic conversion operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.ConvertBinder" /> that represents the details of the dynamic operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindCreateInstance(System.Dynamic.CreateInstanceBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic create instance operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.CreateInstanceBinder" /> that represents the details of the dynamic operation.</param>
      <param name="args">An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - arguments to the create instance operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic delete index operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.DeleteIndexBinder" /> that represents the details of the dynamic operation.</param>
      <param name="indexes">An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - indexes for the delete index operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>Performs the binding of the dynamic delete member operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.DeleteMemberBinder" /> that represents the details of the dynamic operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetIndex(System.Dynamic.GetIndexBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic get index operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.GetIndexBinder" /> that represents the details of the dynamic operation.</param>
      <param name="indexes">An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - indexes for the get index operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindGetMember(System.Dynamic.GetMemberBinder)">
      <summary>Performs the binding of the dynamic get member operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.GetMemberBinder" /> that represents the details of the dynamic operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvoke(System.Dynamic.InvokeBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.InvokeBinder" /> that represents the details of the dynamic operation.</param>
      <param name="args">An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - arguments to the invoke operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindInvokeMember(System.Dynamic.InvokeMemberBinder,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke member operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.InvokeMemberBinder" /> that represents the details of the dynamic operation.</param>
      <param name="args">An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - arguments to the invoke member operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetIndex(System.Dynamic.SetIndexBinder,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic set index operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.SetIndexBinder" /> that represents the details of the dynamic operation.</param>
      <param name="indexes">An array of <see cref="T:System.Dynamic.DynamicMetaObject" /> instances - indexes for the set index operation.</param>
      <param name="value">The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the value for the set index operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindSetMember(System.Dynamic.SetMemberBinder,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic set member operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.SetMemberBinder" /> that represents the details of the dynamic operation.</param>
      <param name="value">The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the value for the set member operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.BindUnaryOperation(System.Dynamic.UnaryOperationBinder)">
      <summary>Performs the binding of the dynamic unary operation.</summary>
      <returns>The new <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="binder">An instance of the <see cref="T:System.Dynamic.UnaryOperationBinder" /> that represents the details of the dynamic operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.Create(System.Object,System.Linq.Expressions.Expression)">
      <summary>Creates a meta-object for the specified object.</summary>
      <returns>If the given object implements <see cref="T:System.Dynamic.IDynamicMetaObjectProvider" /> and is not a remote object from outside the current AppDomain, returns the object's specific meta-object returned by <see cref="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)" />. Otherwise a plain new meta-object with no restrictions is created and returned.</returns>
      <param name="value">The object to get a meta-object for.</param>
      <param name="expression">The expression representing this <see cref="T:System.Dynamic.DynamicMetaObject" /> during the dynamic binding process.</param>
    </member>
    <member name="F:System.Dynamic.DynamicMetaObject.EmptyMetaObjects">
      <summary>Represents an empty array of type <see cref="T:System.Dynamic.DynamicMetaObject" />. This field is read only.</summary>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Expression">
      <summary>The expression representing the <see cref="T:System.Dynamic.DynamicMetaObject" /> during the dynamic binding process.</summary>
      <returns>The expression representing the <see cref="T:System.Dynamic.DynamicMetaObject" /> during the dynamic binding process.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObject.GetDynamicMemberNames">
      <summary>Returns the enumeration of all dynamic member names.</summary>
      <returns>The list of dynamic member names.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.HasValue">
      <summary>Gets a value indicating whether the <see cref="T:System.Dynamic.DynamicMetaObject" /> has the runtime value.</summary>
      <returns>True if the <see cref="T:System.Dynamic.DynamicMetaObject" /> has the runtime value, otherwise false.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.LimitType">
      <summary>Gets the limit type of the <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <returns>
        <see cref="P:System.Dynamic.DynamicMetaObject.RuntimeType" /> if runtime value is available, a type of the <see cref="P:System.Dynamic.DynamicMetaObject.Expression" /> otherwise.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Restrictions">
      <summary>The set of binding restrictions under which the binding is valid.</summary>
      <returns>The set of binding restrictions.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.RuntimeType">
      <summary>Gets the <see cref="T:System.Type" /> of the runtime value or null if the <see cref="T:System.Dynamic.DynamicMetaObject" /> has no value associated with it.</summary>
      <returns>The <see cref="T:System.Type" /> of the runtime value or null.</returns>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObject.Value">
      <summary>The runtime value represented by this <see cref="T:System.Dynamic.DynamicMetaObject" />.</summary>
      <returns>The runtime value represented by this <see cref="T:System.Dynamic.DynamicMetaObject" />.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicMetaObjectBinder">
      <summary>The dynamic call site binder that participates in the <see cref="T:System.Dynamic.DynamicMetaObject" /> binding protocol.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.DynamicMetaObjectBinder" /> class.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>When overridden in the derived class, performs the binding of the dynamic operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic operation.</param>
      <param name="args">An array of arguments of the dynamic operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Bind(System.Object[],System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.LabelTarget)">
      <summary>Performs the runtime binding of the dynamic operation on a set of arguments.</summary>
      <returns>An Expression that performs tests on the dynamic operation arguments, and performs the dynamic operation if the tests are valid. If the tests fail on subsequent occurrences of the dynamic operation, Bind will be called again to produce a new <see cref="T:System.Linq.Expressions.Expression" /> for the new argument types.</returns>
      <param name="args">An array of arguments to the dynamic operation.</param>
      <param name="parameters">The array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> instances that represent the parameters of the call site in the binding process.</param>
      <param name="returnLabel">A LabelTarget used to return the result of the dynamic binding.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Defers the binding of the operation until later time when the runtime values of all dynamic operation arguments have been computed.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic operation.</param>
      <param name="args">An array of arguments of the dynamic operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.Defer(System.Dynamic.DynamicMetaObject[])">
      <summary>Defers the binding of the operation until later time when the runtime values of all dynamic operation arguments have been computed.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="args">An array of arguments of the dynamic operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicMetaObjectBinder.GetUpdateExpression(System.Type)">
      <summary>Gets an expression that will cause the binding to be updated. It indicates that the expression's binding is no longer valid. This is typically used when the "version" of a dynamic object has changed.</summary>
      <returns>The update expression.</returns>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the resulting expression; any type is allowed.</param>
    </member>
    <member name="P:System.Dynamic.DynamicMetaObjectBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.DynamicObject">
      <summary>Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.#ctor">
      <summary>Enables derived types to initialize a new instance of the <see cref="T:System.Dynamic.DynamicObject" /> type.</summary>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetDynamicMemberNames">
      <summary>Returns the enumeration of all dynamic member names. </summary>
      <returns>A sequence that contains dynamic member names.</returns>
    </member>
    <member name="M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Provides a <see cref="T:System.Dynamic.DynamicMetaObject" /> that dispatches to the dynamic virtual methods. The object can be encapsulated inside another <see cref="T:System.Dynamic.DynamicMetaObject" /> to provide custom behavior for individual actions. This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</summary>
      <returns>An object of the <see cref="T:System.Dynamic.DynamicMetaObject" /> type.</returns>
      <param name="parameter">The expression that represents <see cref="T:System.Dynamic.DynamicMetaObject" /> to dispatch to the dynamic virtual methods.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)">
      <summary>Provides implementation for binary operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
      <param name="binder">Provides information about the binary operation. The binder.Operation property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object. For example, for the sum = first + second statement, where first and second are derived from the DynamicObject class, binder.Operation returns ExpressionType.Add.</param>
      <param name="arg">The right operand for the binary operation. For example, for the sum = first + second statement, where first and second are derived from the DynamicObject class, <paramref name="arg" /> is equal to second.</param>
      <param name="result">The result of the binary operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
      <summary>Provides implementation for type conversion operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
      <param name="binder">Provides information about the conversion operation. The binder.Type property provides the type to which the object must be converted. For example, for the statement (String)sampleObject in C# (CType(sampleObject, Type) in Visual Basic), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Type returns the <see cref="T:System.String" /> type. The binder.Explicit property provides information about the kind of conversion that occurs. It returns true for explicit conversion and false for implicit conversion.</param>
      <param name="result">The result of the type conversion operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)">
      <summary>Provides the implementation for operations that initialize a new instance of a dynamic object. This method is not intended for use in C# or Visual Basic.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
      <param name="binder">Provides information about the initialization operation.</param>
      <param name="args">The arguments that are passed to the object during initialization. For example, for the new SampleType(100) operation, where SampleType is the type derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="args[0]" /> is equal to 100.</param>
      <param name="result">The result of the initialization.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])">
      <summary>Provides the implementation for operations that delete an object by index. This method is not intended for use in C# or Visual Basic.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
      <param name="binder">Provides information about the deletion.</param>
      <param name="indexes">The indexes to be deleted.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
      <param name="binder">Provides information about the deletion.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for indexing operations.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
      <param name="binder">Provides information about the operation. </param>
      <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] operation in C# (sampleObject(3) in Visual Basic), where sampleObject is derived from the DynamicObject class, <paramref name="indexes[0]" /> is equal to 3.</param>
      <param name="result">The result of the index operation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</returns>
      <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
      <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to <paramref name="result" />.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
      <summary>Provides the implementation for operations that invoke an object. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</returns>
      <param name="binder">Provides information about the invoke operation.</param>
      <param name="args">The arguments that are passed to the object during the invoke operation. For example, for the sampleObject(100) operation, where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="args[0]" /> is equal to 100.</param>
      <param name="result">The result of the object invocation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as calling a method.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
      <param name="binder">Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
      <param name="args">The arguments that are passed to the object member during the invoke operation. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="args[0]" /> is equal to 100.</param>
      <param name="result">The result of the member invocation.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
      <summary>Provides the implementation for operations that set a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.</returns>
      <param name="binder">Provides information about the operation. </param>
      <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="indexes[0]" /> is equal to 3.</param>
      <param name="value">The value to set to the object that has the specified index. For example, for the sampleObject[3] = 10 operation in C# (sampleObject(3) = 10 in Visual Basic), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, <paramref name="value" /> is equal to 10.</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>Provides the implementation for operations that set member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
      <param name="binder">Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.</param>
      <param name="value">The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".</param>
    </member>
    <member name="M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)">
      <summary>Provides implementation for unary operations. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</summary>
      <returns>true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</returns>
      <param name="binder">Provides information about the unary operation. The binder.Operation property returns an <see cref="T:System.Linq.Expressions.ExpressionType" /> object. For example, for the negativeNumber = -number statement, where number is derived from the DynamicObject class, binder.Operation returns "Negate".</param>
      <param name="result">The result of the unary operation.</param>
    </member>
    <member name="T:System.Dynamic.ExpandoObject">
      <summary>Represents an object whose members can be dynamically added and removed at run time.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.#ctor">
      <summary>Initializes a new ExpandoObject that does not have members.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Adds the specified value to the <see cref="T:System.Collections.Generic.ICollection`1" /> that has the specified key.</summary>
      <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure that represents the key and value to add to the collection.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Removes all items from the collection.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific key and value.</summary>
      <returns>true if the collection contains a specific key and value; otherwise, false.</returns>
      <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1" /> to an array of type <see cref="T:System.Collections.Generic.KeyValuePair`2" />, starting at the specified array index.</summary>
      <param name="array">The one-dimensional array of type <see cref="T:System.Collections.Generic.KeyValuePair`2" /> that is the destination of the <see cref="T:System.Collections.Generic.KeyValuePair`2" /> elements copied from the <see cref="T:System.Collections.Generic.ICollection`1" />. The array must have zero-based indexing.</param>
      <param name="arrayIndex">The zero-based index in <paramref name="array" /> at which copying starts.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Count">
      <summary>Gets the number of elements in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The number of elements in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</summary>
      <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#ICollection{T}#Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>Removes a key and value from the collection.</summary>
      <returns>true if the key and value are successfully found and removed; otherwise, false. This method returns false if the key and value are not found in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
      <param name="item">The <see cref="T:System.Collections.Generic.KeyValuePair`2" /> structure that represents the key and value to remove from the collection.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Add(System.String,System.Object)">
      <summary>Adds the specified key and value to the dictionary.</summary>
      <param name="key">The object to use as the key.</param>
      <param name="value">The object to use as the value.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#ContainsKey(System.String)">
      <summary>Determines whether the dictionary contains the specified key.</summary>
      <returns>true if the dictionary contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key to locate in the dictionary.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Item(System.String)">
      <summary>Gets or sets the element that has the specified key.</summary>
      <returns>The element that has the specified key.</returns>
      <param name="key">The key of the element to get or set.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> that contains the keys of the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> that contains the keys of the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(System.String)">
      <summary>Removes the element that has the specified key from the <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns>true if the element is successfully removed; otherwise, false. This method also returns false if <paramref name="key" /> was not found in the original <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
      <param name="key">The key of the element to remove.</param>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#TryGetValue(System.String,System.Object@)">
      <summary>Gets the value associated with the specified key.</summary>
      <returns>true if the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" /> contains an element that has the specified key; otherwise, false.</returns>
      <param name="key">The key of the value to get.</param>
      <param name="value">When this method returns, contains the value associated with the specified key, if the key is found; otherwise, contains the default value for the type of the <paramref name="value" /> parameter. This parameter is passed uninitialized.</param>
    </member>
    <member name="P:System.Dynamic.ExpandoObject.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary>Gets an <see cref="T:System.Collections.Generic.ICollection`1" /> that contains the values in the <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.ICollection`1" /> that contains the values in the object that implements <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> object that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="E:System.Dynamic.ExpandoObject.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>Occurs when a property value changes.</summary>
    </member>
    <member name="M:System.Dynamic.ExpandoObject.System#Dynamic#IDynamicMetaObjectProvider#GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>The provided MetaObject will dispatch to the dynamic virtual methods. The object can be encapsulated inside another MetaObject to provide custom behavior for individual actions.</summary>
      <returns>The object of the <see cref="T:System.Dynamic.DynamicMetaObject" /> type.</returns>
      <param name="parameter">The expression that represents the MetaObject to dispatch to the Dynamic virtual methods.</param>
    </member>
    <member name="T:System.Dynamic.GetIndexBinder">
      <summary>Represents the dynamic get index operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.GetIndexBinder" />.</summary>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic get index operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic get index operation.</param>
      <param name="args">An array of arguments of the dynamic get index operation.</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic get index operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic get index operation.</param>
      <param name="indexes">The arguments of the dynamic get index operation.</param>
    </member>
    <member name="M:System.Dynamic.GetIndexBinder.FallbackGetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic get index operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic get index operation.</param>
      <param name="indexes">The arguments of the dynamic get index operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.GetIndexBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.GetMemberBinder">
      <summary>Represents the dynamic get member operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.GetMemberBinder" />.</summary>
      <param name="name">The name of the member to obtain.</param>
      <param name="ignoreCase">Is true if the name should be matched ignoring case; false otherwise.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic get member operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic get member operation.</param>
      <param name="args">An array of arguments of the dynamic get member operation.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic get member operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic get member operation.</param>
    </member>
    <member name="M:System.Dynamic.GetMemberBinder.FallbackGetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic get member operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic get member operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.IgnoreCase">
      <summary>Gets the value indicating if the string comparison should ignore the case of the member name.</summary>
      <returns>True if the case is ignored, otherwise false.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.Name">
      <summary>Gets the name of the member to obtain.</summary>
      <returns>The name of the member to obtain.</returns>
    </member>
    <member name="P:System.Dynamic.GetMemberBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.IDynamicMetaObjectProvider">
      <summary>Represents a dynamic object, that can have its operations bound at runtime.</summary>
    </member>
    <member name="M:System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.</returns>
      <param name="parameter">The expression tree representation of the runtime value.</param>
    </member>
    <member name="T:System.Dynamic.IInvokeOnGetBinder">
      <summary>Represents information about a dynamic get member operation that indicates if the get member should invoke properties when they perform the get operation.</summary>
    </member>
    <member name="P:System.Dynamic.IInvokeOnGetBinder.InvokeOnGet">
      <summary>Gets the value indicating if this get member operation should invoke properties when they perform the get operation. The default value when this interface is not present is true.</summary>
      <returns>True if this get member operation should invoke properties when they perform the get operation; otherwise false.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeBinder">
      <summary>Represents the invoke dynamic operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.InvokeBinder" />.</summary>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic invoke operation.</param>
      <param name="args">An array of arguments of the dynamic invoke operation.</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic invoke operation.</param>
      <param name="args">The arguments of the dynamic invoke operation.</param>
    </member>
    <member name="M:System.Dynamic.InvokeBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic invoke operation.</param>
      <param name="args">The arguments of the dynamic invoke operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.InvokeBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.InvokeMemberBinder">
      <summary>Represents the invoke member dynamic operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.#ctor(System.String,System.Boolean,System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.InvokeMemberBinder" />.</summary>
      <param name="name">The name of the member to invoke.</param>
      <param name="ignoreCase">true if the name should be matched ignoring case; false otherwise.</param>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke member operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic invoke member operation.</param>
      <param name="args">An array of arguments of the dynamic invoke member operation.</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvoke(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic invoke operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic invoke operation.</param>
      <param name="args">The arguments of the dynamic invoke operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic invoke member operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic invoke member operation.</param>
      <param name="args">The arguments of the dynamic invoke member operation.</param>
    </member>
    <member name="M:System.Dynamic.InvokeMemberBinder.FallbackInvokeMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic invoke member operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic invoke member operation.</param>
      <param name="args">The arguments of the dynamic invoke member operation.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.IgnoreCase">
      <summary>Gets the value indicating if the string comparison should ignore the case of the member name.</summary>
      <returns>True if the case is ignored, otherwise false.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.Name">
      <summary>Gets the name of the member to invoke.</summary>
      <returns>The name of the member to invoke.</returns>
    </member>
    <member name="P:System.Dynamic.InvokeMemberBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.SetIndexBinder">
      <summary>Represents the dynamic set index operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.#ctor(System.Dynamic.CallInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.SetIndexBinder" />.</summary>
      <param name="callInfo">The signature of the arguments at the call site.</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic set index operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic set index operation.</param>
      <param name="args">An array of arguments of the dynamic set index operation.</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.CallInfo">
      <summary>Gets the signature of the arguments at the call site.</summary>
      <returns>The signature of the arguments at the call site.</returns>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic set index operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic set index operation.</param>
      <param name="indexes">The arguments of the dynamic set index operation.</param>
      <param name="value">The value to set to the collection.</param>
    </member>
    <member name="M:System.Dynamic.SetIndexBinder.FallbackSetIndex(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[],System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>When overridden in the derived class, performs the binding of the dynamic set index operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic set index operation.</param>
      <param name="indexes">The arguments of the dynamic set index operation.</param>
      <param name="value">The value to set to the collection.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.SetIndexBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.SetMemberBinder">
      <summary>Represents the dynamic set member operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.#ctor(System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.SetMemberBinder" />.</summary>
      <param name="name">The name of the member to obtain.</param>
      <param name="ignoreCase">Is true if the name should be matched ignoring case; false otherwise.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic set member operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic set member operation.</param>
      <param name="args">An array of arguments of the dynamic set member operation.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic set member operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic set member operation.</param>
      <param name="value">The value to set to the member.</param>
    </member>
    <member name="M:System.Dynamic.SetMemberBinder.FallbackSetMember(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the dynamic set member operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic set member operation.</param>
      <param name="value">The value to set to the member.</param>
      <param name="errorSuggestion">The binding result to use if binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.IgnoreCase">
      <summary>Gets the value indicating if the string comparison should ignore the case of the member name.</summary>
      <returns>True if the case is ignored, otherwise false.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.Name">
      <summary>Gets the name of the member to obtain.</summary>
      <returns>The name of the member to obtain.</returns>
    </member>
    <member name="P:System.Dynamic.SetMemberBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.Dynamic.UnaryOperationBinder">
      <summary>Represents the unary dynamic operation at the call site, providing the binding semantic and the details about the operation.</summary>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.#ctor(System.Linq.Expressions.ExpressionType)">
      <summary>Initializes a new instance of the <see cref="T:System.Dynamic.BinaryOperationBinder" /> class.</summary>
      <param name="operation">The unary operation kind.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.Bind(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject[])">
      <summary>Performs the binding of the dynamic unary operation.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic operation.</param>
      <param name="args">An array of arguments of the dynamic operation.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the unary dynamic operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic unary operation.</param>
    </member>
    <member name="M:System.Dynamic.UnaryOperationBinder.FallbackUnaryOperation(System.Dynamic.DynamicMetaObject,System.Dynamic.DynamicMetaObject)">
      <summary>Performs the binding of the unary dynamic operation if the target dynamic object cannot bind.</summary>
      <returns>The <see cref="T:System.Dynamic.DynamicMetaObject" /> representing the result of the binding.</returns>
      <param name="target">The target of the dynamic unary operation.</param>
      <param name="errorSuggestion">The binding result in case the binding fails, or null.</param>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.Operation">
      <summary>The unary operation kind.</summary>
      <returns>The object of the <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents the unary operation kind.</returns>
    </member>
    <member name="P:System.Dynamic.UnaryOperationBinder.ReturnType">
      <summary>The result type of the operation.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the result type of the operation.</returns>
    </member>
    <member name="T:System.IO.HandleInheritability">
      <summary>Specifies whether the underlying handle is inheritable by child processes.</summary>
    </member>
    <member name="F:System.IO.HandleInheritability.None">
      <summary>Specifies that the handle is not inheritable by child processes.</summary>
    </member>
    <member name="F:System.IO.HandleInheritability.Inheritable">
      <summary>Specifies that the handle is inheritable by child processes.</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFile">
      <summary>Represents a memory-mapped file. </summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability,System.Boolean)">
      <summary>Creates a memory-mapped file that has the specified name, capacity, access type, security permissions, inheritability, and disposal requirement from an existing file. </summary>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <param name="fileStream">The <paramref name="fileStream" /> to the file to map.</param>
      <param name="mapName">A name to assign to the memory-mapped file.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />. </param>
      <param name="memoryMappedFileSecurity">The permissions that can be granted for file access and operations on memory-mapped files.This parameter can be null.</param>
      <param name="inheritability">One of the enumeration values that specifies whether a handle to the memory-mapped file can be inherited by a child process. The default is <see cref="F:System.IO.HandleInheritability.None" />.</param>
      <param name="leaveOpen">true to not dispose <paramref name="fileStream" /> after the <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> is closed; false to dispose <paramref name="fileStream" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileStream" /> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> method. -or-<paramref name="fileStream" /> refers to an invalid device.-or-<paramref name="mapName" /> is an empty string. (A null reference is valid.)-or-<paramref name="capacity" /> and the length of the file are zero.-or-<paramref name="capacity" /> is greater than the file size.-or-<paramref name="access" /> is set to write-only with the <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> enumeration value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileStream" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than or equal to zero.-or-<paramref name="capacity" /> is less than the file size.-or-<paramref name="access" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.-or-<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> enumeration value.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The operating system denied the specified <paramref name="access" /> to the file; for example, <paramref name="access" /> is set to <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> or <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />, but the file or directory is read-only. </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="fileStream" /> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions for the file.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String)">
      <summary>Creates a memory-mapped file from an existing file.</summary>
      <returns>A memory-mapped file.</returns>
      <param name="path">The path to file to map.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> method. -or-<paramref name="path" /> refers to an invalid device. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions for the file.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode)">
      <summary>Creates a memory-mapped file that has the specified access mode from an existing file. </summary>
      <returns>A memory-mapped file that has the specified access mode.</returns>
      <param name="path">The path to file to map.</param>
      <param name="mode">One of the enumeration values that specifies how the source file on disk should be used.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> method. -or-<paramref name="path" /> refers to an invalid device.-or-<paramref name="mapName" /> is an empty string. (A null reference is valid.)-or-<paramref name="mode" /> is <see cref="F:System.IO.FileMode.Append" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> is <see cref="F:System.IO.FileMode.CreateNew" />-or-An I/O error occurred.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions for the file.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String)">
      <summary>Creates a memory-mapped file that has the specified access mode and name from an existing file.</summary>
      <returns>A memory-mapped file that has the specified name and access mode.</returns>
      <param name="path">The path to the file to map.</param>
      <param name="mode">One of the enumeration values that specifies how the source file on disk should be used.</param>
      <param name="mapName">A name to assign to the memory-mapped file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> method. -or-<paramref name="path" /> refers to an invalid device.-or-<paramref name="mapName" /> is an empty string. (A null reference is valid.)-or-<paramref name="capacity" /> and the length of the file are zero.-or-<paramref name="capacity" /> is greater than the file size.-or-<paramref name="mode" /> is <see cref="F:System.IO.FileMode.Append" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is greater than the size of the logical address space.-or-<paramref name="capacity" /> is less than or equal to zero.-or-<paramref name="capacity" /> is less than the file size.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> is <see cref="F:System.IO.FileMode.CreateNew" />-or-An I/O error occurred.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions for the file.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64)">
      <summary>Creates a memory-mapped file that has the specified access mode, name, and capacity from an existing file.</summary>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <param name="path">The path to the file to map.</param>
      <param name="mode">One of the enumeration values that specifies how the source file on disk should be used.</param>
      <param name="mapName">A name to assign to the memory-mapped file. </param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="path" /> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <see cref="M:System.IO.Path.GetInvalidFileNameChars" /> method. -or-<paramref name="path" /> refers to an invalid device.-or-<paramref name="mapName" /> is an empty string. (A null reference is valid.)-or-<paramref name="capacity" /> and the length of the file are zero.-or-<paramref name="capacity" /> is greater than the file size.-or-<paramref name="mode" /> is <see cref="F:System.IO.FileMode.Append" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is greater than the size of the logical address space.-or-<paramref name="capacity" /> is less than or equal to zero.-or-<paramref name="capacity" /> is less than the file size.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> is <see cref="F:System.IO.FileMode.CreateNew" />-or-An I/O error occurred.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions for the file.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>Creates a memory-mapped file that has the specified access mode, name, capacity, and access type from an existing file.</summary>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <param name="path">The path to the file to map.</param>
      <param name="mode">One of the enumeration values that specifies how the source file on disk should be used.</param>
      <param name="mapName">A name to assign to the memory-mapped file. </param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file. </param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string.-or-<paramref name="mode" /> is not an allowed value.-or-<paramref name="access" /> is not an allowed value.-or-<paramref name="path" /> specifies an empty file.-or-<paramref name="capacity" /> is 0 and the size of the file indicated by <paramref name="path" /> is 0.-or-<paramref name="access" /> is specified as <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read" /> and capacity is greater than the size of the file indicated by <paramref name="path" />.-or-<paramref name="mode" /> is <see cref="F:System.IO.FileMode.Append" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is null. </exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="mode" /> is <see cref="F:System.IO.FileMode.CreateNew" />-or-An I/O error occurred.</exception>
      <exception cref="T:System.IO.PathTooLongException">
        <paramref name="path" /> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters.</exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permissions for the file.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than 0.-or-<paramref name="access" /> is not a defined <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> value..-or-The size of the file indicated by <paramref name="path" /> is greater than <paramref name="capacity" />.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64)">
      <summary>Creates a memory-mapped file that has the specified capacity in system memory. </summary>
      <returns>A memory-mapped file that has the specified name and capacity.</returns>
      <param name="mapName">A name to assign to the memory-mapped file.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string. (A null reference is valid.)</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>Creates a memory-mapped file that has the specified capacity and access type in system memory. </summary>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <param name="mapName">A name to assign to the memory-mapped file.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string. (A null reference is valid.)-or-<paramref name="access" /> is set to write-only with the <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> enumeration value. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than or equal to zero.-or-<paramref name="access" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)">
      <summary>Creates a memory-mapped file that has the specified capacity, access type, memory allocation, security permissions, and inheritability in system memory.</summary>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <param name="mapName">A name to assign to the memory-mapped file.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />. </param>
      <param name="options">A bitwise combination of enumeration values that specifies memory allocation options for the memory-mapped file.</param>
      <param name="memoryMappedFileSecurity">The permissions that can be granted for file access and operations on memory-mapped files.This parameter can be null.</param>
      <param name="inheritability">One of the enumeration values that specifies whether a handle to the memory-mapped file can be inherited by a child process. The default is <see cref="F:System.IO.HandleInheritability.None" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string. (A null reference is valid.)-or-<paramref name="access" /> is set to write-only with the <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> enumeration value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is less than or equal to zero.-or-<paramref name="access" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.-or-<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> enumeration value.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64)">
      <summary>Creates or opens a memory-mapped file that has the specified capacity in system memory.</summary>
      <returns>A memory-mapped file that has the specified name and size.</returns>
      <param name="mapName">A name to assign to the memory-mapped file.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string. (A null reference is valid.)</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is greater than the size of the logical address space.-or-<paramref name="capacity" /> is less than or equal to zero.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>Creates or opens a memory-mapped file that has the specified capacity and access type in system memory. </summary>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <param name="mapName">A name to assign to the memory-mapped file.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string. (A null reference is valid.)-or-<paramref name="access" /> is set to write-only with the <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> enumeration value.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is greater than the size of the logical address space.-or-<paramref name="capacity" /> is less than or equal to zero.-or-<paramref name="access" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The operating system denied the specified access to the file; for example, access is set to <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> or <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />, but the file or directory is read-only. </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.MemoryMappedFiles.MemoryMappedFileSecurity,System.IO.HandleInheritability)">
      <summary>Creates or opens a memory-mapped file that has the specified capacity, access type, memory allocation, security permissions, and inheritability in system memory.</summary>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <param name="mapName">A name to assign to the memory-mapped file.</param>
      <param name="capacity">The maximum size, in bytes, to allocate to the memory-mapped file.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />. </param>
      <param name="options">A bitwise combination of enumeration values that specifies memory allocation options for the memory-mapped file.</param>
      <param name="memoryMappedFileSecurity">The permissions that can be granted for file access and operations on memory-mapped files.This parameter can be null.</param>
      <param name="inheritability">One of the enumeration values that specifies whether a handle to the memory-mapped file can be inherited by a child process. The default is <see cref="F:System.IO.HandleInheritability.None" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string. -or-<paramref name="access" /> is set to write-only with the <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> enumeration value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="capacity" /> is greater than the size of the logical address space.-or-<paramref name="capacity" /> is less than or equal to zero.-or-<paramref name="access" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.-or-<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> enumeration value.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The operating system denied the specified <paramref name="access" /> to the file; for example, <paramref name="access" /> is set to <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> or <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />, but the file or directory is read-only. </exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor">
      <summary>Creates a <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" /> that maps to a view of the memory-mapped file.</summary>
      <returns>A randomly accessible block of memory.</returns>
      <exception cref="T:System.UnauthorizedAccessException">Access to the memory-mapped file is unauthorized.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64)">
      <summary>Creates a <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" /> that maps to a view of the memory-mapped file, and that has the specified offset and size.</summary>
      <returns>A randomly accessible block of memory.</returns>
      <param name="offset">The byte at which to start the view.</param>
      <param name="size">The size of the view. Specify 0 (zero) to create a view that starts at <paramref name="offset" /> and ends at the end of the memory-mapped file.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="size" /> is a negative value.-or-<paramref name="size" /> is greater than the logical address space.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the memory-mapped file is unauthorized.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>Creates a <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" /> that maps to a view of the memory-mapped file, and that has the specified offset, size, and access restrictions.</summary>
      <returns>A randomly accessible block of memory.</returns>
      <param name="offset">The byte at which to start the view.</param>
      <param name="size">The size of the view. Specify 0 (zero) to create a view that starts at <paramref name="offset" /> and ends at the end of the memory-mapped file.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="size" /> is a negative value.-or-<paramref name="size" /> is greater than the logical address space.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="access" /> is invalid for the memory-mapped file.</exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream">
      <summary>Creates a stream that maps to a view of the memory-mapped file.  </summary>
      <returns>A stream of memory.</returns>
      <exception cref="T:System.UnauthorizedAccessException">Access to the memory-mapped file is unauthorized.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64)">
      <summary>Creates a stream that maps to a view of the memory-mapped file, and that has the specified offset and size.</summary>
      <returns>A stream of memory that has the specified offset and size.</returns>
      <param name="offset">The byte at which to start the view.</param>
      <param name="size">The size of the view. Specify 0 (zero) to create a view that starts at <paramref name="offset" /> and ends at the end of the memory-mapped file.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="size" /> is a negative value.-or-<paramref name="size" /> is greater than the logical address space.</exception>
      <exception cref="T:System.UnauthorizedAccessException">Access to the memory-mapped file is unauthorized.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="size" /> is greater than the total virtual memory.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)">
      <summary>Creates a stream that maps to a view of the memory-mapped file, and that has the specified offset, size, and access type.</summary>
      <returns>A stream of memory that has the specified characteristics.</returns>
      <param name="offset">The byte at which to start the view.</param>
      <param name="size">The size of the view. Specify 0 (zero) to create a view that starts at <paramref name="offset" /> and ends at the end of the memory-mapped file.</param>
      <param name="access">One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> or <paramref name="size" /> is a negative value.-or-<paramref name="size" /> is greater than the logical address space.-or-<paramref name="access " />is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> enumeration value.</exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="access" /> is invalid for the memory-mapped file.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="size" /> is greater than the total virtual memory.-or-<paramref name="access" /> is invalid for the memory-mapped file.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" />. </summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFile" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.GetAccessControl">
      <summary>Gets the access control to the memory-mapped file resource.</summary>
      <returns>The permissions that can be granted for file access and operations on memory-mapped files.</returns>
      <exception cref="T:System.InvalidOperationException">An underlying call to set security information failed.</exception>
      <exception cref="T:System.NotSupportedException">An underlying call to set security information failed.</exception>
      <exception cref="T:System.ObjectDisposedException">The memory-mapped file is closed.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The current platform is Windows 98 or earlier.</exception>
      <exception cref="T:System.UnauthorizedAccessException">An underlying call to set security information failed.-or-The memory-mapped file was opened as <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" /> only.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String)">
      <summary>Opens an existing memory-mapped file that has the specified name in system memory.</summary>
      <returns>A memory-mapped file that has the specified name. </returns>
      <param name="mapName">The name of the memory-mapped file to open.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string. (A null reference is valid.)</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="mapName" /> is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified for <paramref name="mapName" /> does not exist.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights)">
      <summary>Opens an existing memory-mapped file that has the specified name and access rights in system memory.</summary>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <param name="mapName">The name of the memory-mapped file to open.</param>
      <param name="desiredAccessRights">One of the enumeration values that specifies the access rights to apply to the memory-mapped file.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string. (A null reference is valid.)</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="desiredAccessRights" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights" /> enumeration value.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified for <paramref name="mapName" /> does not exist.</exception>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.IO.HandleInheritability)">
      <summary>Opens an existing memory-mapped file that has the specified name, access rights, and inheritability in system memory.</summary>
      <returns>A memory-mapped file that has the specified characteristics.</returns>
      <param name="mapName">The name of the memory-mapped file to open.</param>
      <param name="desiredAccessRights">One of the enumeration values that specifies the access rights to apply to the memory-mapped file.</param>
      <param name="inheritability">One of the enumeration values that specifies whether a handle to the memory-mapped file can be inherited by a child process. The default is <see cref="F:System.IO.HandleInheritability.None" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="mapName" /> is an empty string. (A null reference is valid.)</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="desiredAccessRights" /> is not a valid <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights" /> enumeration value.-or-<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> enumeration value.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The requested access is invalid for the memory-mapped file.</exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified for <paramref name="mapName" /> does not exist.</exception>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle">
      <summary>Gets the file handle of a memory-mapped file.</summary>
      <returns>The handle to the memory-mapped file.</returns>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFile.SetAccessControl(System.IO.MemoryMappedFiles.MemoryMappedFileSecurity)">
      <summary>Sets the access control to the memory-mapped file resource.</summary>
      <param name="memoryMappedFileSecurity">The permissions that can be granted for file access and operations on memory-mapped files.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="memoryMappedFileSecurity" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">An underlying call to set security information failed.</exception>
      <exception cref="T:System.NotSupportedException">An underlying call to set security information failed.</exception>
      <exception cref="T:System.UnauthorizedAccessException">An underlying call to set security information failed.</exception>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess">
      <summary>Specifies access capabilities and restrictions for a memory-mapped file or view. </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite">
      <summary>Read and write access to the file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read">
      <summary>Read-only access to the file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write">
      <summary>Write-only access to file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.CopyOnWrite">
      <summary>Read and write access to the file, with the restriction that any write operations will not be seen by other processes. </summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadExecute">
      <summary>Read access to the file that can store and run executable code.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWriteExecute">
      <summary>Read and write access to the file that can can store and run executable code.</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileOptions">
      <summary>Provides memory allocation options for memory-mapped files.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileOptions.None">
      <summary>No memory allocation options are applied.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileOptions.DelayAllocatePages">
      <summary>Memory allocation is delayed until a view is created with either the <see cref="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor" /> or <see cref="M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream" /> method.</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileRights">
      <summary>Specifies access rights to a memory-mapped file that is not associated with a file on disk.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.CopyOnWrite">
      <summary>The right to read and write to a file with the restriction that write operations will not be seen by other processes.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Write">
      <summary>The right to add data to a file or remove data from a file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Read">
      <summary>The right to open and copy a file as read-only.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Execute">
      <summary>The right to run an application file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Delete">
      <summary>The right to delete a file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadPermissions">
      <summary>The right to open and copy access and audit rules from a file. This does not include the right to read data, file system attributes, or extended file system attributes.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ChangePermissions">
      <summary>The right to change the security and audit rules associated with a file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.TakeOwnership">
      <summary>The right to change the owner of a file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadWrite">
      <summary>The right to open and copy a file, and the right to add data to a file or remove data from a file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadExecute">
      <summary>The right to open and copy a folder or file as read-only, and to run application files. This right includes the <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Read" /> right and the <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.Execute" /> right.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.ReadWriteExecute">
      <summary>The right to open and copy a file, the right to add data to a file or remove data from a file, and the right to run an application file.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.FullControl">
      <summary>The right to exert full control over a file, and to modify access control and audit rules. This value represents the right to do anything with a file and is the combination of all rights in this enumeration.</summary>
    </member>
    <member name="F:System.IO.MemoryMappedFiles.MemoryMappedFileRights.AccessSystemSecurity">
      <summary>The right to get or set permissions on a file.</summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity">
      <summary>Represents the permissions that can be granted for file access and operations on memory-mapped files. </summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileSecurity" /> class. </summary>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor">
      <summary>Represents a randomly accessed view of a memory-mapped file.</summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.Flush">
      <summary>Clears all buffers for this view and causes any buffered data to be written to the underlying file.</summary>
      <exception cref="T:System.ObjectDisposedException">Methods were called after the accessor was closed.</exception>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewAccessor.SafeMemoryMappedViewHandle">
      <summary>Gets a handle to the view of a memory-mapped file.</summary>
      <returns>A wrapper for the operating system's handle to the view of the file. </returns>
    </member>
    <member name="T:System.IO.MemoryMappedFiles.MemoryMappedViewStream">
      <summary>Represents a view of a memory-mapped file as a sequentially accessed stream.</summary>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewStream.Flush">
      <summary>Clears all buffers for this stream and causes any buffered data to be written to the underlying file.</summary>
    </member>
    <member name="P:System.IO.MemoryMappedFiles.MemoryMappedViewStream.SafeMemoryMappedViewHandle">
      <summary>Gets a handle to the view of a memory-mapped file.</summary>
      <returns>A wrapper for the operating system's handle to the view of the file. </returns>
    </member>
    <member name="M:System.IO.MemoryMappedFiles.MemoryMappedViewStream.SetLength(System.Int64)">
      <summary>Sets the length of the current stream.</summary>
      <param name="value">The desired length of the current stream in bytes.</param>
      <exception cref="T:System.NotSupportedException">This method is not supported.</exception>
    </member>
    <member name="T:System.IO.Pipes.AnonymousPipeClientStream">
      <summary>Exposes the client side of an anonymous pipe stream, which supports both synchronous and asynchronous read and write operations.</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> class from the specified handle.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.Anonymous pipes can only be in one direction, so <paramref name="direction" /> cannot be set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="safePipeHandle">A safe handle for the pipe that this <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object will encapsulate.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="safePipeHandle " />is not a valid handle.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="safePipeHandle" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="direction" /> is set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as a disk error, has occurred.-or-The stream has been closed.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> class with the specified pipe direction and a string representation of the pipe handle.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.Anonymous pipes can only be in one direction, so <paramref name="direction" /> cannot be set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="pipeHandleAsString">A string that represents the pipe handle.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeHandleAsString" /> is an invalid handle.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeHandleAsString" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="direction" /> is set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeClientStream.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> class with the specified string representation of the pipe handle.</summary>
      <param name="pipeHandleAsString">A string that represents the pipe handle.</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="pipeHandleAsString" /> is not a valid pipe handle.</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeClientStream.ReadMode">
      <summary>Sets the reading mode for the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object.</summary>
      <returns>Always <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The transmission mode is not valid. For anonymous pipes, only <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" /> is supported.</exception>
      <exception cref="T:System.NotSupportedException">The transmission mode is <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />.</exception>
      <exception cref="T:System.IO.IOException">The connection is broken or another I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeClientStream.TransmissionMode">
      <summary>Gets the pipe transmission mode supported by the current pipe.</summary>
      <returns>Always <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />.</returns>
    </member>
    <member name="T:System.IO.Pipes.AnonymousPipeServerStream">
      <summary>Exposes a stream around an anonymous pipe, which supports both synchronous and asynchronous read and write operations.</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> class.</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> class with the specified pipe direction.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.Anonymous pipes can only be in one direction, so <paramref name="direction" /> cannot be set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="direction" /> is set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,Microsoft.Win32.SafeHandles.SafePipeHandle,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> class from the specified pipe handles.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.Anonymous pipes can only be in one direction, so <paramref name="direction" /> cannot be set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="serverSafePipeHandle">A safe handle for the pipe that this <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> object will encapsulate.</param>
      <param name="clientSafePipeHandle">A safe handle for the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="serverSafePipeHandle" /> or <paramref name="clientSafePipeHandle" /> is an invalid handle.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serverSafePipeHandle" /> or <paramref name="clientSafePipeHandle" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="direction" /> is set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
      <exception cref="T:System.IO.IOException">An I/O error, such as a disk error, has occurred.-or-The stream has been closed.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> class with the specified pipe direction and inheritability mode.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.Anonymous pipes can only be in one direction, so <paramref name="direction" /> cannot be set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="inheritability">One of the enumeration values that determines whether the underlying handle can be inherited by child processes. Must be set to either <see cref="F:System.IO.HandleInheritability.None" /> or <see cref="F:System.IO.HandleInheritability.Inheritable" />. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inheritability" /> is not set to either <see cref="F:System.IO.HandleInheritability.None" /> or <see cref="F:System.IO.HandleInheritability.Inheritable" />.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="direction" /> is set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> class with the specified pipe direction, inheritability mode, and buffer size.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.Anonymous pipes can only be in one direction, so <paramref name="direction" /> cannot be set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="inheritability">One of the enumeration values that determines whether the underlying handle can be inherited by child processes. Must be set to either <see cref="F:System.IO.HandleInheritability.None" /> or <see cref="F:System.IO.HandleInheritability.Inheritable" />.</param>
      <param name="bufferSize">The size of the buffer. This value must be greater than or equal to 0. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inheritability" /> is not set to either <see cref="F:System.IO.HandleInheritability.None" /> or <see cref="F:System.IO.HandleInheritability.Inheritable" />.-or-<paramref name="bufferSize" /> is less than 0.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="direction" /> is set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.HandleInheritability,System.Int32,System.IO.Pipes.PipeSecurity)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> class with the specified pipe direction, inheritability mode, buffer size, and pipe security.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.Anonymous pipes can only be in one direction, so <paramref name="direction" /> cannot be set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</param>
      <param name="inheritability">One of the enumeration values that determines whether the underlying handle can be inherited by child processes.</param>
      <param name="bufferSize">The size of the buffer. This value must be greater than or equal to 0. </param>
      <param name="pipeSecurity">An object that determines the access control and audit security for the pipe.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="inheritability" /> is not set to either <see cref="F:System.IO.HandleInheritability.None" /> or <see cref="F:System.IO.HandleInheritability.Inheritable" />.-or-<paramref name="bufferSize" /> is less than 0.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="direction" /> is set to <see cref="F:System.IO.Pipes.PipeDirection.InOut" />.</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.ClientSafePipeHandle">
      <summary>Gets the safe handle for the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object that is currently connected to the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> object.</summary>
      <returns>A handle for the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object that is currently connected to the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> object.</returns>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.DisposeLocalCopyOfClientHandle">
      <summary>Closes the local copy of the <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object's handle.</summary>
    </member>
    <member name="M:System.IO.Pipes.AnonymousPipeServerStream.GetClientHandleAsString">
      <summary>Gets the connected <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object's handle as a string.</summary>
      <returns>A string that represents the connected <see cref="T:System.IO.Pipes.AnonymousPipeClientStream" /> object's handle.</returns>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.ReadMode">
      <summary>Sets the reading mode for the <see cref="T:System.IO.Pipes.AnonymousPipeServerStream" /> object. For anonymous pipes, transmission mode must be <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />.</summary>
      <returns>Always <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />. </returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The transmission mode is not valid. For anonymous pipes, only <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" /> is supported. </exception>
      <exception cref="T:System.NotSupportedException">The property is set to <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />, which is not supported for anonymous pipes.</exception>
      <exception cref="T:System.IO.IOException">The connection is broken or another I/O error occurs.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="P:System.IO.Pipes.AnonymousPipeServerStream.TransmissionMode">
      <summary>Gets the pipe transmission mode that is supported by the current pipe.</summary>
      <returns>Always <see cref="F:System.IO.Pipes.PipeTransmissionMode.Byte" />.</returns>
    </member>
    <member name="T:System.IO.Pipes.NamedPipeClientStream">
      <summary>Exposes a <see cref="T:System.IO.Stream" /> around a named pipe, which supports both synchronous and asynchronous read and write operations.</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.IO.Pipes.PipeDirection,System.Boolean,System.Boolean,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class for the specified pipe handle with the specified pipe direction.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="isAsync">true to indicate that the handle was opened asynchronously; otherwise, false.</param>
      <param name="isConnected">true to indicate that the pipe is connected; otherwise, false.</param>
      <param name="safePipeHandle">A safe handle for the pipe that this <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> object will encapsulate.</param>
      <exception cref="T:System.IO.IOException">
        <paramref name="safePipeHandle" /> is not a valid handle.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="safePipeHandle" /> is not a valid handle.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="safePipeHandle" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.</exception>
      <exception cref="T:System.IO.IOException">The stream has been closed. </exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class with the specified pipe name.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class with the specified pipe and server names.</summary>
      <param name="serverName">The name of the remote computer to connect to, or "." to specify the local computer.</param>
      <param name="pipeName">The name of the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeAccessRights,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel,System.IO.HandleInheritability)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class with the specified pipe and server names, and the specified pipe options, security impersonation level, and inheritability mode.</summary>
      <param name="serverName">The name of the remote computer to connect to, or "." to specify the local computer.</param>
      <param name="pipeName">The name of the pipe.</param>
      <param name="desiredAccessRights">One of the enumeration values that specifies the desired access rights of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <param name="impersonationLevel">One of the enumeration values that determines the security impersonation level.</param>
      <param name="inheritability">One of the enumeration values that determines whether the underlying handle will be inheritable by child processes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.-or-<paramref name="impersonationLevel" /> is not a valid <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> value.-or-<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> value.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class with the specified pipe and server names, and the specified pipe direction.</summary>
      <param name="serverName">The name of the remote computer to connect to, or "." to specify the local computer.</param>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class with the specified pipe and server names, and the specified pipe direction and pipe options.</summary>
      <param name="serverName">The name of the remote computer to connect to, or "." to specify the local computer.</param>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class with the specified pipe and server names, and the specified pipe direction, pipe options, and security impersonation level.</summary>
      <param name="serverName">The name of the remote computer to connect to, or "." to specify the local computer.</param>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <param name="impersonationLevel">One of the enumeration values that determines the security impersonation level.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.-or-<paramref name="impersonationLevel" /> is not a valid <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> value.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.#ctor(System.String,System.String,System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeOptions,System.Security.Principal.TokenImpersonationLevel,System.IO.HandleInheritability)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> class with the specified pipe and server names, and the specified pipe direction, pipe options, security impersonation level, and inheritability mode.</summary>
      <param name="serverName">The name of the remote computer to connect to, or "." to specify the local computer.</param>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <param name="impersonationLevel">One of the enumeration values that determines the security impersonation level.</param>
      <param name="inheritability">One of the enumeration values that determines whether the underlying handle will be inheritable by child processes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> or <paramref name="serverName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.-or-<paramref name="impersonationLevel" /> is not a valid <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> value.-or-<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> value.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.Connect">
      <summary>Connects to a waiting server.</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeClientStream.Connect(System.Int32)">
      <summary>Connects to a waiting server within the specified timeout period.</summary>
      <param name="timeout">The number of milliseconds to wait for the server to respond before the connection times out.</param>
      <exception cref="T:System.TimeoutException">Could not connect to the server within the specified <paramref name="timeout" /> period.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> is less than 0.</exception>
    </member>
    <member name="P:System.IO.Pipes.NamedPipeClientStream.NumberOfServerInstances">
      <summary>Gets the number of server instances that share the same pipe name.</summary>
      <returns>The number of server instances that share the same pipe name.</returns>
      <exception cref="T:System.InvalidOperationException">The pipe handle has not been set.-or-The current <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> object has not yet connected to a <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> object.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or an I/O error occurred.</exception>
      <exception cref="T:System.ObjectDisposedException">The underlying pipe handle is closed.</exception>
    </member>
    <member name="T:System.IO.Pipes.NamedPipeServerStream">
      <summary>Exposes a <see cref="T:System.IO.Stream" /> around a named pipe, supporting both synchronous and asynchronous read and write operations.</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.IO.Pipes.PipeDirection,System.Boolean,System.Boolean,Microsoft.Win32.SafeHandles.SafePipeHandle)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class from the specified pipe handle.</summary>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="isAsync">true to indicate that the handle was opened asynchronously; otherwise, false.</param>
      <param name="isConnected">true to indicate that the pipe is connected; otherwise, false.</param>
      <param name="safePipeHandle">A safe handle for the pipe that this <see cref="T:System.IO.Pipes.NamedPipeClientStream" /> object will encapsulate.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="safePipeHandle" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="safePipeHandle" /> is an invalid handle.</exception>
      <exception cref="T:System.IO.IOException">
        <paramref name="safePipeHandle" /> is not a valid pipe handle.-or-The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported. </exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name and pipe direction.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name, pipe direction, and maximum number of server instances.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="maxNumberOfServerInstances">The maximum number of server instances that share the same name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-A non-negative number is required. -or-<paramref name="maxNumberofServerInstances" /> is less than one or greater than 254.-or-<see cref="F:System.IO.HandleInheritability.None" />  or <see cref="F:System.IO.HandleInheritability.Inheritable" />  is required.-or-Access rights is limited to the <see cref="F:System.IO.Pipes.PipeAccessRights.ChangePermissions" /> , <see cref="F:System.IO.Pipes.PipeAccessRights.TakeOwnership" /> , and <see cref="F:System.IO.Pipes.PipeAccessRights.AccessSystemSecurity" />  flags.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name, pipe direction, maximum number of server instances, and transmission mode.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="maxNumberOfServerInstances">The maximum number of server instances that share the same name.</param>
      <param name="transmissionMode">One of the enumeration values that determines the transmission mode of the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="maxNumberofServerInstances" /> is less than one or greater than 254.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name, pipe direction, maximum number of server instances, transmission mode, and pipe options.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="maxNumberOfServerInstances">The maximum number of server instances that share the same name.</param>
      <param name="transmissionMode">One of the enumeration values that determines the transmission mode of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="maxNumberofServerInstances" /> is less than one or greater than 254.-or-<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name, pipe direction, maximum number of server instances, transmission mode, pipe options, and recommended in and out buffer sizes.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="maxNumberOfServerInstances">The maximum number of server instances that share the same name.</param>
      <param name="transmissionMode">One of the enumeration values that determines the transmission mode of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <param name="inBufferSize">A positive value greater than 0 that indicates the input buffer size.</param>
      <param name="outBufferSize">A positive value greater than 0 that indicates the output buffer size.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="maxNumberofServerInstances" /> is less than one or greater than 254.-or-<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.-or-<paramref name="inBufferSize" /> is negative.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name, pipe direction, maximum number of server instances, transmission mode, pipe options, recommended in and out buffer sizes, and pipe security.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="maxNumberOfServerInstances">The maximum number of server instances that share the same name.</param>
      <param name="transmissionMode">One of the enumeration values that determines the transmission mode of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <param name="inBufferSize">A positive value greater than 0 that indicates the input buffer size.</param>
      <param name="outBufferSize">A positive value greater than 0 that indicates the output buffer size.</param>
      <param name="pipeSecurity">An object that determines the access control and audit security for the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="maxNumberofServerInstances" /> is less than one or greater than 254.-or-<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.-or-<paramref name="inBufferSize" /> is negative.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity,System.IO.HandleInheritability)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name, pipe direction, maximum number of server instances, transmission mode, pipe options, recommended in and out buffer sizes, pipe security, and inheritability mode.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="maxNumberOfServerInstances">The maximum number of server instances that share the same name.</param>
      <param name="transmissionMode">One of the enumeration values that determines the transmission mode of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <param name="inBufferSize">A positive value greater than 0 that indicates the input buffer size.</param>
      <param name="outBufferSize">A positive value greater than 0 that indicates the output buffer size.</param>
      <param name="pipeSecurity">An object that determines the access control and audit security for the pipe.</param>
      <param name="inheritability">One of the enumeration values that determines whether the underlying handle can be inherited by child processes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="maxNumberofServerInstances" /> is less than one or greater than 254.-or-<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.-or-<paramref name="inBufferSize" /> is negative.-or-<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> value.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity,System.IO.HandleInheritability,System.IO.Pipes.PipeAccessRights)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> class with the specified pipe name, pipe direction, maximum number of server instances, transmission mode, pipe options, recommended in and out buffer sizes, pipe security, inheritability mode, and pipe access rights.</summary>
      <param name="pipeName">The name of the pipe.</param>
      <param name="direction">One of the enumeration values that determines the direction of the pipe.</param>
      <param name="maxNumberOfServerInstances">The maximum number of server instances that share the same name.</param>
      <param name="transmissionMode">One of the enumeration values that determines the transmission mode of the pipe.</param>
      <param name="options">One of the enumeration values that determines how to open or create the pipe.</param>
      <param name="inBufferSize">The input buffer size.</param>
      <param name="outBufferSize">The output buffer size.</param>
      <param name="pipeSecurity">An object that determines the access control and audit security for the pipe.</param>
      <param name="inheritability">One of the enumeration values that determines whether the underlying handle can be inherited by child processes.</param>
      <param name="additionalAccessRights">One of the enumeration values that specifies the access rights of the pipe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="pipeName" /> is a zero-length string.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="pipeName" /> is set to "anonymous".-or-<paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="maxNumberofServerInstances" /> is less than one or greater than 254.-or-<paramref name="options" /> is not a valid <see cref="T:System.IO.Pipes.PipeOptions" /> value.-or-<paramref name="inBufferSize" /> is negative.-or-<paramref name="inheritability" /> is not a valid <see cref="T:System.IO.HandleInheritability" /> value.-or-<paramref name="additionalAccessRights" /> is not a valid <see cref="T:System.IO.Pipes.PipeAccessRights" /> value.</exception>
      <exception cref="T:System.PlatformNotSupportedException">The operating system is Windows Millennium Edition, Windows 98, or Windows 95, which are not supported.</exception>
      <exception cref="T:System.IO.IOException">The maximum number of server instances has been exceeded.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.BeginWaitForConnection(System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous operation to wait for a client to connect.</summary>
      <returns>An object that references the asynchronous request.</returns>
      <param name="callback">The method to call when a client connects to the <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> object.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous request from other requests.</param>
      <exception cref="T:System.InvalidOperationException">The pipe was not opened asynchronously.-or-A pipe connection has already been established.-or-The pipe handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">The pipe connection has been broken.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.Disconnect">
      <summary>Disconnects the current connection.</summary>
      <exception cref="T:System.InvalidOperationException">No pipe connections have been made yet.-or-The connected pipe has already disconnected.-or-The pipe handle has not been set.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.EndWaitForConnection(System.IAsyncResult)">
      <summary>Ends an asynchronous operation to wait for a client to connect.</summary>
      <param name="asyncResult">The pending asynchronous request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe was not opened asynchronously.-or-The pipe handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">The pipe connection has been broken.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.GetImpersonationUserName">
      <summary>Gets the user name of the client on the other end of the pipe.</summary>
      <returns>The user name of the client on the other end of the pipe.</returns>
      <exception cref="T:System.InvalidOperationException">No pipe connections have been made yet.-or-The connected pipe has already disconnected.-or-The pipe handle has not been set.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.IO.IOException">The pipe connection has been broken.</exception>
    </member>
    <member name="F:System.IO.Pipes.NamedPipeServerStream.MaxAllowedServerInstances">
      <summary>Represents the maximum number of server instances that the system resources allow.</summary>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.RunAsClient(System.IO.Pipes.PipeStreamImpersonationWorker)">
      <summary>Calls a delegate while impersonating the client.</summary>
      <param name="impersonationWorker">The delegate that specifies a method to call.</param>
      <exception cref="T:System.InvalidOperationException">No pipe connections have been made yet.-or-The connected pipe has already disconnected.-or-The pipe handle has not been set.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.IO.IOException">The pipe connection has been broken.-or-An I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.NamedPipeServerStream.WaitForConnection">
      <summary>Waits for a client to connect to this <see cref="T:System.IO.Pipes.NamedPipeServerStream" /> object.</summary>
      <exception cref="T:System.InvalidOperationException">A pipe connection has already been established.-or-The pipe handle has not been set.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.IO.IOException">The pipe connection has been broken.</exception>
    </member>
    <member name="T:System.IO.Pipes.PipeAccessRights">
      <summary>Defines the access rights to use when you create access and audit rules. This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadData">
      <summary>Specifies the right to read data from the pipe. This does not include the right to read file system attributes, extended file system attributes, or access and audit rules.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.WriteData">
      <summary>Specifies the right to write data to a pipe. This does not include the right to write file system attributes or extended file system attributes.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadAttributes">
      <summary>Specifies the right to read file system attributes from a pipe. This does not include the right to read data, extended file system attributes, or access and audit rules.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.WriteAttributes">
      <summary>Specifies the right to write file system attributes to a pipe. This does not include the right to write data or extended file system attributes.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes">
      <summary>Specifies the right to read extended file system attributes from a pipe. This does not include the right to read data, file system attributes, or access and audit rules.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes">
      <summary>Specifies the right to write extended file system attributes to a pipe. This does not include the right to write file attributes or data.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.CreateNewInstance">
      <summary>Specifies the right to create a new pipe. Setting this right also sets the <see cref="F:System.IO.Pipes.PipeAccessRights.Synchronize" /> right.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Delete">
      <summary>Specifies the right to delete a pipe.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadPermissions">
      <summary>Specifies the right to read access and audit rules from the pipe. This does not include the right to read data, file system attributes, or extended file system attributes.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ChangePermissions">
      <summary>Specifies the right to change the security and audit rules that are associated with a pipe.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.TakeOwnership">
      <summary>Specifies the right to change the owner of a pipe. Note that owners of a pipe have full access to that resource.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Synchronize">
      <summary>Specifies whether the application can wait for a pipe handle to synchronize with the completion of an I/O operation.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.FullControl">
      <summary>Specifies the right to exert full control over a pipe, and to modify access control and audit rules. This value represents the combination of all rights in this enumeration.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Read">
      <summary>Specifies the right to read from the pipe. This right includes the <see cref="F:System.IO.Pipes.PipeAccessRights.ReadAttributes" />, <see cref="F:System.IO.Pipes.PipeAccessRights.ReadData" />, <see cref="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes" />, and <see cref="F:System.IO.Pipes.PipeAccessRights.ReadPermissions" /> rights.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.Write">
      <summary>Specifies the right to write to the pipe. This right includes the <see cref="F:System.IO.Pipes.PipeAccessRights.WriteAttributes" />, <see cref="F:System.IO.Pipes.PipeAccessRights.WriteData" />, and <see cref="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes" /> rights.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.ReadWrite">
      <summary>Specifies the right to read and write from the pipe. This right includes the <see cref="F:System.IO.Pipes.PipeAccessRights.ReadAttributes" />, <see cref="F:System.IO.Pipes.PipeAccessRights.ReadData" />, <see cref="F:System.IO.Pipes.PipeAccessRights.ReadExtendedAttributes" />, <see cref="F:System.IO.Pipes.PipeAccessRights.ReadPermissions" />, <see cref="F:System.IO.Pipes.PipeAccessRights.WriteAttributes" />, <see cref="F:System.IO.Pipes.PipeAccessRights.WriteData" />, and <see cref="F:System.IO.Pipes.PipeAccessRights.WriteExtendedAttributes" /> rights.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeAccessRights.AccessSystemSecurity">
      <summary>Specifies the right to make changes to the system access control list (SACL).</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeAccessRule">
      <summary>Represents an abstraction of an access control entry (ACE) that defines an access rule for a pipe.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeAccessRule.#ctor(System.Security.Principal.IdentityReference,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.PipeAccessRule" /> class with the specified identity, pipe access rights, and access control type.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that encapsulates a reference to a user account.</param>
      <param name="rights">One of the <see cref="T:System.IO.Pipes.PipeAccessRights" /> values that specifies the type of operation associated with the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values that specifies whether to allow or deny the operation.</param>
    </member>
    <member name="M:System.IO.Pipes.PipeAccessRule.#ctor(System.String,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AccessControlType)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.PipeAccessRule" /> class with the specified identity, pipe access rights, and access control type.</summary>
      <param name="identity">The name of the user account.</param>
      <param name="rights">One of the <see cref="T:System.IO.Pipes.PipeAccessRights" /> values that specifies the type of operation associated with the access rule.</param>
      <param name="type">One of the <see cref="T:System.Security.AccessControl.AccessControlType" /> values that specifies whether to allow or deny the operation.</param>
    </member>
    <member name="P:System.IO.Pipes.PipeAccessRule.PipeAccessRights">
      <summary>Gets the <see cref="T:System.IO.Pipes.PipeAccessRights" /> flags that are associated with the current <see cref="T:System.IO.Pipes.PipeAccessRule" /> object.</summary>
      <returns>A bitwise combination of the <see cref="T:System.IO.Pipes.PipeAccessRights" /> values.</returns>
    </member>
    <member name="T:System.IO.Pipes.PipeAuditRule">
      <summary>Represents an abstraction of an access control entry (ACE) that defines an audit rule for a pipe.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeAuditRule.#ctor(System.Security.Principal.IdentityReference,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AuditFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.PipeAuditRule" /> class for a user account specified in a <see cref="T:System.Security.Principal.IdentityReference" /> object.</summary>
      <param name="identity">An <see cref="T:System.Security.Principal.IdentityReference" /> object that encapsulates a reference to a user account.</param>
      <param name="rights">One of the <see cref="T:System.IO.Pipes.PipeAccessRights" /> values that specifies the type of operation associated with the access rule.</param>
      <param name="flags">One of the <see cref="T:System.Security.AccessControl.AuditFlags" /> values that specifies when to perform auditing.</param>
    </member>
    <member name="M:System.IO.Pipes.PipeAuditRule.#ctor(System.String,System.IO.Pipes.PipeAccessRights,System.Security.AccessControl.AuditFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.PipeAuditRule" /> class for a named user account.</summary>
      <param name="identity">The name of the user account.</param>
      <param name="rights">One of the <see cref="T:System.IO.Pipes.PipeAccessRights" /> values that specifies the type of operation associated with the access rule.</param>
      <param name="flags">One of the <see cref="T:System.Security.AccessControl.AuditFlags" /> values that specifies when to perform auditing.</param>
    </member>
    <member name="P:System.IO.Pipes.PipeAuditRule.PipeAccessRights">
      <summary>Gets the <see cref="T:System.IO.Pipes.PipeAccessRights" /> flags that are associated with the current <see cref="T:System.IO.Pipes.PipeAuditRule" /> object.</summary>
      <returns>A bitwise combination of the <see cref="T:System.IO.Pipes.PipeAccessRights" /> values. </returns>
    </member>
    <member name="T:System.IO.Pipes.PipeDirection">
      <summary>Specifies the direction of the pipe.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.In">
      <summary>Specifies that the pipe direction is in.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.Out">
      <summary>Specifies that the pipe direction is out.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeDirection.InOut">
      <summary>Specifies that the pipe direction is two-way.</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeOptions">
      <summary>Provides options for creating a <see cref="T:System.IO.Pipes.PipeStream" /> object. This enumeration has a <see cref="T:System.FlagsAttribute" /> attribute that allows a bitwise combination of its member values.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.None">
      <summary>Indicates that there are no additional parameters.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.WriteThrough">
      <summary>Indicates that the system should write through any intermediate cache and go directly to the pipe.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeOptions.Asynchronous">
      <summary>Indicates that the pipe can be used for asynchronous reading and writing.</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeSecurity">
      <summary>Represents the access control and audit security for a pipe.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.PipeSecurity" /> class.</summary>
    </member>
    <member name="P:System.IO.Pipes.PipeSecurity.AccessRightType">
      <summary>Gets the <see cref="T:System.Type" /> of the securable object that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <returns>The type of the securable object that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</returns>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.AccessRule" /> class with the specified values.</summary>
      <returns>The <see cref="T:System.Security.AccessControl.AccessRule" /> object that this method creates.</returns>
      <param name="identityReference">The identity that the access rule applies to. It must be an object that can be cast as a <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</param>
      <param name="accessMask">The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators</param>
      <param name="isInherited">true if this rule is inherited from a parent container; otherwise false.</param>
      <param name="inheritanceFlags">One of the <see cref="T:System.Security.AccessControl.InheritanceFlags" /> values that specifies the inheritance properties of the access rule.</param>
      <param name="propagationFlags">One of the <see cref="T:System.Security.AccessControl.PropagationFlags" /> values that specifies whether inherited access rules are automatically propagated. The propagation flags are ignored if <paramref name="inheritanceFlags" /> is set to <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
      <param name="type">Specifies the valid access control type.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, or <paramref name="type" /> specifies an invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identityReference" /> is null. -or-<paramref name="accessMask" /> is zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="identityReference" /> is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> nor of a type, such as <see cref="T:System.Security.Principal.NTAccount" />, that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeSecurity.AccessRuleType">
      <summary>Gets the <see cref="T:System.Type" /> of the object that is associated with the access rules of the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <returns>The type of the object that is associated with the access rules of the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</returns>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AddAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>Adds an access rule to the Discretionary Access Control List (DACL) that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <param name="rule">The access rule to add.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AddAuditRule(System.IO.Pipes.PipeAuditRule)">
      <summary>Adds an audit rule to the System Access Control List (SACL)that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <param name="rule">The audit rule to add.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Security.AccessControl.AuditRule" /> class with the specified values.</summary>
      <returns>The <see cref="T:System.Security.AccessControl.AuditRule" /> object that this method creates.</returns>
      <param name="identityReference">The identity that the access rule applies to. It must be an object that can be cast as a <see cref="T:System.Security.Principal.SecurityIdentifier" /> object.</param>
      <param name="accessMask">The access mask of this rule. The access mask is a 32-bit collection of anonymous bits, the meaning of which is defined by the individual integrators</param>
      <param name="isInherited">true if this rule is inherited from a parent container; otherwise, false..</param>
      <param name="inheritanceFlags">One of the <see cref="T:System.Security.AccessControl.InheritanceFlags" /> values that specifies the inheritance properties of the access rule.</param>
      <param name="propagationFlags">One of the <see cref="T:System.Security.AccessControl.PropagationFlags" /> values that specifies whether inherited access rules are automatically propagated. The propagation flags are ignored if <paramref name="inheritanceFlags" /> is set to <see cref="F:System.Security.AccessControl.InheritanceFlags.None" />.</param>
      <param name="flags">One of the <see cref="T:System.Security.AccessControl.AuditFlags" /> values that specifies the valid access control type.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="accessMask" />, <paramref name="inheritanceFlags" />, <paramref name="propagationFlags" />, or <paramref name="flags" /> properties specify an invalid value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="identityReference" /> property is null. -or-The <paramref name="accessMask" /> property is zero.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="identityReference" /> property is neither of type <see cref="T:System.Security.Principal.SecurityIdentifier" /> nor of a type, such as <see cref="T:System.Security.Principal.NTAccount" />, that can be converted to type <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeSecurity.AuditRuleType">
      <summary>Gets the <see cref="T:System.Type" /> object associated with the audit rules of the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <returns>The type of the object that is associated with the audit rules of the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</returns>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.Persist(System.Runtime.InteropServices.SafeHandle)">
      <summary>Saves the specified sections of the security descriptor that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object to permanent storage.</summary>
      <param name="handle">The handle of the securable object that the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object is associated with.</param>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.Persist(System.String)">
      <summary>Saves the specified sections of the security descriptor that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object to permanent storage.</summary>
      <param name="name">The name of the securable object that the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object is associated with.</param>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>Removes an access rule from the Discretionary Access Control List (DACL) that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <returns>true if the operation is successful; otherwise, false.</returns>
      <param name="rule">The access rule to remove.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAccessRuleSpecific(System.IO.Pipes.PipeAccessRule)">
      <summary>Removes the specified access rule from the Discretionary Access Control List (DACL) that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <param name="rule">The access rule to remove.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRule(System.IO.Pipes.PipeAuditRule)">
      <summary>Removes an audit rule from the System Access Control List (SACL) that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <returns>true if the audit rule was removed; otherwise, false</returns>
      <param name="rule">The audit rule to remove.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRuleAll(System.IO.Pipes.PipeAuditRule)">
      <summary>Removes all audit rules that have the same security identifier as the specified audit rule from the System Access Control List (SACL) that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <param name="rule">The audit rule to remove.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.RemoveAuditRuleSpecific(System.IO.Pipes.PipeAuditRule)">
      <summary>Removes the specified audit rule from the System Access Control List (SACL) that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <param name="rule">The audit rule to remove.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.ResetAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>Removes all access rules in the Discretionary Access Control List (DACL) that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object and then adds the specified access rule.</summary>
      <param name="rule">The access rule to add.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.SetAccessRule(System.IO.Pipes.PipeAccessRule)">
      <summary>Sets an access rule in the Discretionary Access Control List (DACL) that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <param name="rule">The rule to set.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeSecurity.SetAuditRule(System.IO.Pipes.PipeAuditRule)">
      <summary>Sets an audit rule in the System Access Control List (SACL) that is associated with the current <see cref="T:System.IO.Pipes.PipeSecurity" /> object.</summary>
      <param name="rule">The rule to set.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="rule" /> parameter is null.</exception>
    </member>
    <member name="T:System.IO.Pipes.PipeStream">
      <summary>Exposes a <see cref="T:System.IO.Stream" /> object around a pipe, which supports both anonymous and named pipes.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.PipeStream" /> class using the specified <see cref="T:System.IO.Pipes.PipeDirection" /> value and buffer size.</summary>
      <param name="direction">One of the <see cref="T:System.IO.Pipes.PipeDirection" /> values that indicates the direction of the pipe object.</param>
      <param name="bufferSize">A positive <see cref="T:System.Int32" /> value greater than or equal to 0 that indicates the buffer size.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="bufferSize" /> is less than 0.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.#ctor(System.IO.Pipes.PipeDirection,System.IO.Pipes.PipeTransmissionMode,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.IO.Pipes.PipeStream" /> class using the specified <see cref="T:System.IO.Pipes.PipeDirection" />, <see cref="T:System.IO.Pipes.PipeTransmissionMode" />, and buffer size.</summary>
      <param name="direction">One of the <see cref="T:System.IO.Pipes.PipeDirection" /> values that indicates the direction of the pipe object.</param>
      <param name="transmissionMode">One of the <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> values that indicates the transmission mode of the pipe object.</param>
      <param name="outBufferSize">A positive <see cref="T:System.Int32" /> value greater than or equal to 0 that indicates the buffer size.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="direction" /> is not a valid <see cref="T:System.IO.Pipes.PipeDirection" /> value.-or-<paramref name="transmissionMode" /> is not a valid <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> value.-or-<paramref name="bufferSize" /> is less than 0.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous read operation.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous read.</returns>
      <param name="buffer">The buffer to read data into.</param>
      <param name="offset">The byte offset in <paramref name="buffer" /> at which to begin reading.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <param name="callback">The method to call when the asynchronous read operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than 0.-or-<paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> is greater than the number of bytes available in <paramref name="buffer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support read operations.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is disconnected, waiting to connect, or the handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
      <summary>Begins an asynchronous write operation.</summary>
      <returns>An <see cref="T:System.IAsyncResult" /> object that references the asynchronous write operation.</returns>
      <param name="buffer">The buffer that contains the data to write to the current stream.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
      <param name="count">The maximum number of bytes to write.</param>
      <param name="callback">The method to call when the asynchronous write operation is completed.</param>
      <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than 0.-or-<paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> is greater than the number of bytes available in <paramref name="buffer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support write operations.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is disconnected, waiting to connect, or the handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanRead">
      <summary>Gets a value indicating whether the current stream supports read operations.</summary>
      <returns>true if the stream supports read operations; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanSeek">
      <summary>Gets a value indicating whether the current stream supports seek operations.</summary>
      <returns>false in all cases.</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.CanWrite">
      <summary>Gets a value indicating whether the current stream supports write operations.</summary>
      <returns>true if the stream supports write operations; otherwise, false.</returns>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckPipePropertyOperations">
      <summary>Verifies that the pipe is in a proper state for getting or setting properties.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckReadOperations">
      <summary>Verifies that the pipe is in a connected state for read operations.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.CheckWriteOperations">
      <summary>Verifies that the pipe is in a connected state for write operations.</summary>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.Pipes.PipeStream" /> class and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.EndRead(System.IAsyncResult)">
      <summary>Ends a pending asynchronous read request.</summary>
      <returns>The number of bytes that were read. A return value of 0 indicates the end of the stream (the pipe has been closed).</returns>
      <param name="asyncResult">The reference to the pending asynchronous request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Pipes.PipeStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream. </exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.EndWrite(System.IAsyncResult)">
      <summary>Ends a pending asynchronous write request.</summary>
      <param name="asyncResult">The reference to the pending asynchronous request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="asyncResult" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="asyncResult" /> did not originate from a <see cref="M:System.IO.Pipes.PipeStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> method on the current stream. </exception>
      <exception cref="T:System.IO.IOException">The stream is closed or an internal error has occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Flush">
      <summary>Clears the buffer for the current stream and causes any buffered data to be written to the underlying device.</summary>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support write operations.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.GetAccessControl">
      <summary>Gets a <see cref="T:System.IO.Pipes.PipeSecurity" /> object that encapsulates the access control list (ACL) entries for the pipe described by the current <see cref="T:System.IO.Pipes.PipeStream" /> object.</summary>
      <returns>A <see cref="T:System.IO.Pipes.PipeSecurity" /> object that encapsulates the access control list (ACL) entries for the pipe described by the current <see cref="T:System.IO.Pipes.PipeStream" /> object.</returns>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The underlying call to set security information failed.</exception>
      <exception cref="T:System.InvalidOperationException">The underlying call to set security information failed.</exception>
      <exception cref="T:System.NotSupportedException">The underlying call to set security information failed.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.InBufferSize">
      <summary>Gets the size, in bytes, of the inbound buffer for a pipe.</summary>
      <returns>An integer value that represents the inbound buffer size, in bytes.</returns>
      <exception cref="T:System.NotSupportedException">The stream is unreadable.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is waiting to connect.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.InitializeHandle(Microsoft.Win32.SafeHandles.SafePipeHandle,System.Boolean,System.Boolean)">
      <summary>Initializes a <see cref="T:System.IO.Pipes.PipeStream" /> object from the specified <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> object.</summary>
      <param name="handle">The <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> object of the pipe to initialize.</param>
      <param name="isExposed">true to expose the handle; otherwise, false.</param>
      <param name="isAsync">true to indicate that the handle was opened asynchronously; otherwise, false.</param>
      <exception cref="T:System.IO.IOException">A handle cannot be bound to the pipe.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsAsync">
      <summary>Gets a value indicating whether a <see cref="T:System.IO.Pipes.PipeStream" /> object was opened asynchronously or synchronously.</summary>
      <returns>true if the <see cref="T:System.IO.Pipes.PipeStream" /> object was opened asynchronously; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsConnected">
      <summary>Gets or sets a value indicating whether a <see cref="T:System.IO.Pipes.PipeStream" /> object is connected.</summary>
      <returns>true if the <see cref="T:System.IO.Pipes.PipeStream" /> object is connected; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsHandleExposed">
      <summary>Gets a value indicating whether a handle to a <see cref="T:System.IO.Pipes.PipeStream" /> object is exposed.</summary>
      <returns>true if a handle to the <see cref="T:System.IO.Pipes.PipeStream" /> object is exposed; otherwise, false.</returns>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.IsMessageComplete">
      <summary>Gets a value indicating whether there is more data in the message returned from the most recent read operation.</summary>
      <returns>true if there are no more characters to read in the message; otherwise, false.</returns>
      <exception cref="T:System.InvalidOperationException">The pipe is not connected.-or-The pipe handle has not been set.-or-The pipe's <see cref="P:System.IO.Pipes.PipeStream.ReadMode" /> property value is not <see cref="F:System.IO.Pipes.PipeTransmissionMode.Message" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.Length">
      <summary>Gets the length of a stream, in bytes.</summary>
      <returns>0 in all cases.</returns>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.OutBufferSize">
      <summary>Gets the size, in bytes, of the outbound buffer for a pipe.</summary>
      <returns>The outbound buffer size, in bytes.</returns>
      <exception cref="T:System.NotSupportedException">The stream is unwriteable.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is waiting to connect.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.Position">
      <summary>Gets or sets the current position of the current stream.</summary>
      <returns>0 in all cases.</returns>
      <exception cref="T:System.NotSupportedException">Always thrown.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>Reads a block of bytes from a stream and writes the data to a specified buffer.</summary>
      <returns>The total number of bytes that are read into <paramref name="buffer" />. This might be less than the number of bytes requested if that number of bytes is not currently available, or 0 if the end of the stream is reached.</returns>
      <param name="buffer">When this method returns, contains the specified byte array with the values between <paramref name="offset" /> and (<paramref name="offset" /> + <paramref name="count" /> - 1) replaced by the bytes read from the current source.</param>
      <param name="offset">The byte offset in the <paramref name="buffer" /> array at which the bytes that are read will be placed.</param>
      <param name="count">The maximum number of bytes to read.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than 0.-or-<paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> is greater than the number of bytes available in <paramref name="buffer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support read operations.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is disconnected, waiting to connect, or the handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">Any I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.ReadByte">
      <summary>Reads a byte from a pipe.</summary>
      <returns>The byte, cast to <see cref="T:System.Int32" />, or -1 indicates the end of the stream (the pipe has been closed).</returns>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support read operations.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is disconnected, waiting to connect, or the handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">Any I/O error occurred.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.ReadMode">
      <summary>Gets or sets the reading mode for a <see cref="T:System.IO.Pipes.PipeStream" /> object.</summary>
      <returns>One of the <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> values that indicates how the <see cref="T:System.IO.Pipes.PipeStream" /> object reads from the pipe.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">The supplied value is not a valid <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> value.</exception>
      <exception cref="T:System.NotSupportedException">The supplied value is not a supported <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> value for this pipe stream.</exception>
      <exception cref="T:System.InvalidOperationException">The handle has not been set.-or-The pipe is waiting to connect with a named client.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or an I/O error occurred with a named client.</exception>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.SafePipeHandle">
      <summary>Gets the safe handle for the local end of the pipe that the current <see cref="T:System.IO.Pipes.PipeStream" /> object encapsulates.</summary>
      <returns>A <see cref="T:Microsoft.Win32.SafeHandles.SafePipeHandle" /> object for the pipe that is encapsulated by the current <see cref="T:System.IO.Pipes.PipeStream" /> object.</returns>
      <exception cref="T:System.InvalidOperationException">The pipe handle has not been set.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>Sets the current position of the current stream to the specified value.</summary>
      <returns>The new position in the stream.</returns>
      <param name="offset">The point, relative to <paramref name="origin" />, to begin seeking from.</param>
      <param name="origin">Specifies the beginning, the end, or the current position as a reference point for <paramref name="offset" />, using a value of type <see cref="T:System.IO.SeekOrigin" />.</param>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)">
      <summary>Applies the access control list (ACL) entries specified by a <see cref="T:System.IO.Pipes.PipeSecurity" /> object to the pipe specified by the current <see cref="T:System.IO.Pipes.PipeStream" /> object.</summary>
      <param name="pipeSecurity">A <see cref="T:System.IO.Pipes.PipeSecurity" /> object that specifies an access control list (ACL) entry to apply to the current pipe.</param>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pipeSecurity" /> is null.</exception>
      <exception cref="T:System.UnauthorizedAccessException">The underlying call to set security information failed.</exception>
      <exception cref="T:System.InvalidOperationException">The underlying call to set security information failed.</exception>
      <exception cref="T:System.NotSupportedException">The underlying call to set security information failed.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.SetLength(System.Int64)">
      <summary>Sets the length of the current stream to the specified value.</summary>
      <param name="value">The new length of the stream.</param>
    </member>
    <member name="P:System.IO.Pipes.PipeStream.TransmissionMode">
      <summary>Gets the pipe transmission mode supported by the current pipe.</summary>
      <returns>One of the <see cref="T:System.IO.Pipes.PipeTransmissionMode" /> values that indicates the transmission mode supported by the current pipe.</returns>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.InvalidOperationException">The handle has not been set.-or-The pipe is waiting to connect in an anonymous client/server operation or with a named client. </exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.WaitForPipeDrain">
      <summary>Waits for the other end of the pipe to read all sent bytes.</summary>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support write operations.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>Writes a block of bytes to the current stream using data from a buffer.</summary>
      <param name="buffer">The buffer that contains data to write to the pipe.</param>
      <param name="offset">The zero-based byte offset in <paramref name="buffer" /> at which to begin copying bytes to the current stream.</param>
      <param name="count">The maximum number of bytes to write to the current stream.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> is less than 0.-or-<paramref name="count" /> is less than 0.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="count" /> is greater than the number of bytes available in <paramref name="buffer" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support write operations.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="M:System.IO.Pipes.PipeStream.WriteByte(System.Byte)">
      <summary>Writes a byte to the current stream.</summary>
      <param name="value">The byte to write to the stream.</param>
      <exception cref="T:System.ObjectDisposedException">The pipe is closed.</exception>
      <exception cref="T:System.NotSupportedException">The pipe does not support write operations.</exception>
      <exception cref="T:System.InvalidOperationException">The pipe is disconnected, waiting to connect, or the handle has not been set.</exception>
      <exception cref="T:System.IO.IOException">The pipe is broken or another I/O error occurred.</exception>
    </member>
    <member name="T:System.IO.Pipes.PipeStreamImpersonationWorker">
      <summary>Represents the method to call as the client.</summary>
    </member>
    <member name="T:System.IO.Pipes.PipeTransmissionMode">
      <summary>Specifies the transmission mode of the pipe.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeTransmissionMode.Byte">
      <summary>Indicates that data in the pipe is transmitted and read as a stream of bytes.</summary>
    </member>
    <member name="F:System.IO.Pipes.PipeTransmissionMode.Message">
      <summary>Indicates that data in the pipe is transmitted and read as a stream of messages.</summary>
    </member>
    <member name="T:System.Linq.Enumerable">
      <summary>Provides a set of static (Shared in Visual Basic) methods for querying objects that implement <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})">
      <summary>Applies an accumulator function over a sequence.</summary>
      <returns>The final accumulator value.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</param>
      <param name="func">An accumulator function to be invoked on each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})">
      <summary>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</summary>
      <returns>The final accumulator value.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">An accumulator function to be invoked on each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</summary>
      <returns>The transformed final accumulator value.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">An accumulator function to be invoked on each element.</param>
      <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <typeparam name="TResult">The type of the resulting value.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Determines whether all elements of a sequence satisfy a condition.</summary>
      <returns>true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to apply the predicate to.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Determines whether a sequence contains any elements.</summary>
      <returns>true if the source sequence contains any elements; otherwise, false.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to check for emptiness.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Determines whether any element of a sequence satisfies a condition.</summary>
      <returns>true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to apply the predicate to.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the input typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <returns>The input sequence typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <param name="source">The sequence to type as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Computes the average of a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Computes the average of a sequence of <see cref="T:System.Double" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int32" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int64" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" />values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Computes the average of a sequence of <see cref="T:System.Single" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Computes the average of a sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Computes the average of a sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only values that are null.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Computes the average of a sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)">
      <summary>Converts the elements of an <see cref="T:System.Collections.IEnumerable" /> to the specified type.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains each element of the source sequence converted to the specified type.</returns>
      <param name="source">The <see cref="T:System.Collections.IEnumerable" /> that contains the elements to be converted.</param>
      <typeparam name="TResult">The type to convert the elements of <paramref name="source" /> to.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidCastException">An element in the sequence cannot be cast to type <paramref name="TResult" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatenates two sequences.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the concatenated elements of the two input sequences.</returns>
      <param name="first">The first sequence to concatenate.</param>
      <param name="second">The sequence to concatenate to the first sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Determines whether a sequence contains a specified element by using the default equality comparer.</summary>
      <returns>true if the source sequence contains an element that has the specified value; otherwise, false.</returns>
      <param name="source">A sequence in which to locate a value.</param>
      <param name="value">The value to locate in the sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>true if the source sequence contains an element that has the specified value; otherwise, false.</returns>
      <param name="source">A sequence in which to locate a value.</param>
      <param name="value">The value to locate in the sequence.</param>
      <param name="comparer">An equality comparer to compare values.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the number of elements in a sequence.</summary>
      <returns>The number of elements in the input sequence.</returns>
      <param name="source">A sequence that contains elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns a number that represents how many elements in the specified sequence satisfy a condition.</summary>
      <returns>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</returns>
      <param name="source">A sequence that contains elements to be tested and counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.OverflowException">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that contains the default value for the <paramref name="TSource" /> type if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</returns>
      <param name="source">The sequence to return a default value for if it is empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</returns>
      <param name="source">The sequence to return the specified value for if it is empty.</param>
      <param name="defaultValue">The value to return if the sequence is empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns distinct elements from a sequence by using the default equality comparer to compare values.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</returns>
      <param name="source">The sequence to remove duplicate elements from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</returns>
      <param name="source">The sequence to remove duplicate elements from.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Returns the element at a specified index in a sequence.</summary>
      <returns>The element at the specified position in the source sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than or equal to the number of elements in <paramref name="source" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Returns the element at a specified index in a sequence or a default value if the index is out of range.</summary>
      <returns>default(<paramref name="TSource" />) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Empty``1">
      <summary>Returns an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has the specified type argument.</summary>
      <returns>An empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose type argument is <paramref name="TResult" />.</returns>
      <typeparam name="TResult">The type to assign to the type parameter of the returned generic <see cref="T:System.Collections.Generic.IEnumerable`1" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set difference of two sequences by using the default equality comparer to compare values.</summary>
      <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <paramref name="second" /> will be returned.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <paramref name="second" /> will be returned.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the first element of a sequence.</summary>
      <returns>The first element in the specified sequence.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the first element in a sequence that satisfies a specified condition.</summary>
      <returns>The first element in the sequence that passes the test in the specified predicate function.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />.-or-The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function.</summary>
      <returns>An IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a sequence of objects and a key.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</summary>
      <returns>An IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects and a key.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</summary>
      <returns>An IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in the <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.</summary>
      <returns>An IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IEnumerable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.</summary>
      <returns>A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</summary>
      <returns>A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</summary>
      <returns>A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.</summary>
      <returns>A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Correlates the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates the elements of two sequences based on key equality and groups the results. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set intersection of two sequences by using the default equality comparer to compare values.</summary>
      <returns>A sequence that contains the elements that form the set intersection of two sequences.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <returns>A sequence that contains the elements that form the set intersection of two sequences.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates the elements of two sequences based on matching keys. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the last element of a sequence.</summary>
      <returns>The value at the last position in the source sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the last element of a sequence that satisfies a specified condition.</summary>
      <returns>The last element in the sequence that passes the test in the specified predicate function.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />.-or-The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the last element of a sequence, or a default value if the sequence contains no elements.</summary>
      <returns>default(<paramref name="TSource" />) if the source sequence is empty; otherwise, the last element in the <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</summary>
      <returns>default(<paramref name="TSource" />) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.</summary>
      <returns>The number of elements in the source sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The number of elements exceeds <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns an <see cref="T:System.Int64" /> that represents how many elements in a sequence satisfy a condition.</summary>
      <returns>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.OverflowException">The number of matching elements exceeds <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Returns the maximum value in a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Returns the maximum value in a sequence of <see cref="T:System.Double" /> values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Returns the maximum value in a sequence of <see cref="T:System.Int32" /> values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Returns the maximum value in a sequence of <see cref="T:System.Int64" /> values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <returns>A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence. </returns>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <returns>A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <returns>A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence. </returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <returns>A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence. </returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Returns the maximum value in a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <returns>A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Returns the maximum value in a sequence of <see cref="T:System.Single" /> values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to determine the maximum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the maximum value in a generic sequence.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Decimal" /> value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Double" /> value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int32" /> value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int64" /> value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Decimal" /> value.</summary>
      <returns>The value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Double" /> value.</summary>
      <returns>The value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int32" /> value.</summary>
      <returns>The value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int64" /> value.</summary>
      <returns>The value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Single" /> value.</summary>
      <returns>The value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Single" /> value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Returns the minimum value in a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Returns the minimum value in a sequence of <see cref="T:System.Double" /> values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Returns the minimum value in a sequence of <see cref="T:System.Int32" /> values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Returns the minimum value in a sequence of <see cref="T:System.Int64" /> values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <returns>A value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <returns>A value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <returns>A value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <returns>A value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Returns the minimum value in a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <returns>A value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Returns the minimum value in a sequence of <see cref="T:System.Single" /> values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to determine the minimum value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the minimum value in a generic sequence.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Decimal" /> value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Double" /> value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int32" /> value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int64" /> value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Decimal" /> value.</summary>
      <returns>The value of type Nullable&lt;Decimal&gt; in C# or Nullable(Of Decimal) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Double" /> value.</summary>
      <returns>The value of type Nullable&lt;Double&gt; in C# or Nullable(Of Double) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int32" /> value.</summary>
      <returns>The value of type Nullable&lt;Int32&gt; in C# or Nullable(Of Int32) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int64" /> value.</summary>
      <returns>The value of type Nullable&lt;Int64&gt; in C# or Nullable(Of Int64) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Single" /> value.</summary>
      <returns>The value of type Nullable&lt;Single&gt; in C# or Nullable(Of Single) in Visual Basic that corresponds to the minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Single" /> value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)">
      <summary>Filters the elements of an <see cref="T:System.Collections.IEnumerable" /> based on a specified type.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence of type <paramref name="TResult" />.</returns>
      <param name="source">The <see cref="T:System.Collections.IEnumerable" /> whose elements to filter.</param>
      <typeparam name="TResult">The type to filter the elements of the sequence on.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Sorts the elements of a sequence in ascending order according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts the elements of a sequence in ascending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Sorts the elements of a sequence in descending order according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts the elements of a sequence in descending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)">
      <summary>Generates a sequence of integral numbers within a specified range.</summary>
      <returns>An IEnumerable&lt;Int32&gt; in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.</returns>
      <param name="start">The value of the first integer in the sequence.</param>
      <param name="count">The number of sequential integers to generate.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than 0.-or-<paramref name="start" /> + <paramref name="count" /> -1 is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)">
      <summary>Generates a sequence that contains one repeated value.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains a repeated value.</returns>
      <param name="element">The value to be repeated.</param>
      <param name="count">The number of times to repeat the value in the generated sequence.</param>
      <typeparam name="TResult">The type of the value to be repeated in the result sequence.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than 0.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Inverts the order of the elements in a sequence.</summary>
      <returns>A sequence whose elements correspond to those of the input sequence in reverse order.</returns>
      <param name="source">A sequence of values to reverse.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Projects each element of a sequence into a new form.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</returns>
      <param name="source">A sequence of values to invoke a transform function on.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
      <summary>Projects each element of a sequence into a new form by incorporating the element's index.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</returns>
      <param name="source">A sequence of values to invoke a transform function on.</param>
      <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A transform function to apply to each element of the input sequence.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <param name="resultSelector">A transform function to apply to each element of the intermediate sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</summary>
      <returns>true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <paramref name="second" />.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines whether two sequences are equal by comparing their elements by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>true if the two source sequences are of equal length and their corresponding elements compare equal according to <paramref name="comparer" />; otherwise, false.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <paramref name="second" />.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> has more than one element.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</summary>
      <returns>The single element of the input sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The input sequence contains more than one element.-or-The input sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</summary>
      <returns>The single element of the input sequence that satisfies a condition.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />.-or-More than one element satisfies the condition in <paramref name="predicate" />.-or-The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</summary>
      <returns>The single element of the input sequence, or default(<paramref name="TSource" />) if the sequence contains no elements.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The input sequence contains more than one element.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</summary>
      <returns>The single element of the input sequence that satisfies the condition, or default(<paramref name="TSource" />) if no such element is found.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">More than one element satisfies the condition in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements that occur after the specified index in the input sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</param>
      <param name="count">The number of elements to skip before returning the remaining elements.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</param>
      <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Double" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Int32" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Int64" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Single" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
      <exception cref="T:System.OverflowException">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values that are used to calculate a sum.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>Returns a specified number of contiguous elements from the start of a sequence.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified number of elements from the start of the input sequence.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="count">The number of elements to return.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Returns elements from a sequence as long as a specified condition is true.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
      <param name="source">A sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that occur before the element at which the test no longer passes.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates an array from a <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <returns>An array that contains the elements from the input sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create an array from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.-or-<paramref name="keySelector" /> produces a key that is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> produces duplicate keys for two elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the keys returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.-or-<paramref name="keySelector" /> produces a key that is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> produces duplicate keys for two elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.-or-<paramref name="keySelector" /> produces a key that is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> produces duplicate keys for two elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer, and an element selector function.</summary>
      <returns>A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.-or-<paramref name="keySelector" /> produces a key that is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="keySelector" /> produces duplicate keys for two elements.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <returns>A <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.List`1" /> from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
      <summary>Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</summary>
      <returns>A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</summary>
      <returns>A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</summary>
      <returns>A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer and an element selector function.</summary>
      <returns>A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</returns>
      <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set union of two sequences by using the default equality comparer.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</returns>
      <param name="first">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</param>
      <param name="second">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
      <summary>Filters a sequence of values based on a predicate.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</param>
      <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>Merges two sequences by using the specified predicate function.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains merged elements of two input sequences.</returns>
      <param name="first">The first sequence to merge.</param>
      <param name="second">The second sequence to merge.</param>
      <param name="resultSelector">A function that specifies how to merge the elements from the two sequences.</param>
      <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
      <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
      <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
    </member>
    <member name="T:System.Linq.EnumerableExecutor">
      <summary>Represents an expression tree and provides functionality to execute the expression tree after rewriting it.</summary>
    </member>
    <member name="M:System.Linq.EnumerableExecutor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.EnumerableExecutor" /> class.</summary>
    </member>
    <member name="T:System.Linq.EnumerableExecutor`1">
      <summary>Represents an expression tree and provides functionality to execute the expression tree after rewriting it.</summary>
      <typeparam name="T">The data type of the value that results from executing the expression tree.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableExecutor`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.EnumerableExecutor`1" /> class.</summary>
      <param name="expression">An expression tree to associate with the new instance.</param>
    </member>
    <member name="T:System.Linq.EnumerableQuery">
      <summary>Represents an <see cref="T:System.Collections.IEnumerable" /> as an <see cref="T:System.Linq.EnumerableQuery" /> data source. </summary>
    </member>
    <member name="M:System.Linq.EnumerableQuery.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.EnumerableQuery" /> class.</summary>
    </member>
    <member name="T:System.Linq.EnumerableQuery`1">
      <summary>Represents an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection as an <see cref="T:System.Linq.IQueryable`1" /> data source.</summary>
      <typeparam name="T">The type of the data in the collection.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.EnumerableQuery`1" /> class and associates it with an <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection.</summary>
      <param name="enumerable">A collection to associate with the new instance.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.#ctor(System.Linq.Expressions.Expression)">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.EnumerableQuery`1" /> class and associates the instance with an expression tree.</summary>
      <param name="expression">An expression tree to associate with the new instance.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that can iterate through the associated <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection, or, if it is null, through the collection that results from rewriting the associated expression tree as a query on an <see cref="T:System.Collections.Generic.IEnumerable`1" /> data source and executing it.</summary>
      <returns>An enumerator that can be used to iterate through the associated data source.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that can iterate through the associated <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection, or, if it is null, through the collection that results from rewriting the associated expression tree as a query on an <see cref="T:System.Collections.Generic.IEnumerable`1" /> data source and executing it.</summary>
      <returns>An enumerator that can be used to iterate through the associated data source.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#ElementType">
      <summary>Gets the type of the data in the collection that this instance represents.</summary>
      <returns>The type of the data in the collection that this instance represents.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Expression">
      <summary>Gets the expression tree that is associated with or that represents this instance.</summary>
      <returns>The expression tree that is associated with or that represents this instance.</returns>
    </member>
    <member name="P:System.Linq.EnumerableQuery`1.System#Linq#IQueryable#Provider">
      <summary>Gets the query provider that is associated with this instance.</summary>
      <returns>The query provider that is associated with this instance.</returns>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Constructs a new <see cref="T:System.Linq.EnumerableQuery`1" /> object and associates it with a specified expression tree that represents an <see cref="T:System.Linq.IQueryable`1" /> collection of data.</summary>
      <returns>An EnumerableQuery object that is associated with <paramref name="expression" />.</returns>
      <param name="expression">An expression tree to execute.</param>
      <typeparam name="S">The type of the data in the collection that <paramref name="expression" /> represents.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Constructs a new <see cref="T:System.Linq.EnumerableQuery`1" /> object and associates it with a specified expression tree that represents an <see cref="T:System.Linq.IQueryable" /> collection of data.</summary>
      <returns>An <see cref="T:System.Linq.EnumerableQuery`1" /> object that is associated with <paramref name="expression" />.</returns>
      <param name="expression">An expression tree that represents an <see cref="T:System.Linq.IQueryable" /> collection of data.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)">
      <summary>Executes an expression after rewriting it to call <see cref="T:System.Linq.Enumerable" /> methods instead of <see cref="T:System.Linq.Queryable" /> methods on any enumerable data sources that cannot be queried by <see cref="T:System.Linq.Queryable" /> methods.</summary>
      <returns>The value that results from executing <paramref name="expression" />.</returns>
      <param name="expression">An expression tree to execute.</param>
      <typeparam name="S">The type of the data in the collection that <paramref name="expression" /> represents.</typeparam>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)">
      <summary>Executes an expression after rewriting it to call <see cref="T:System.Linq.Enumerable" /> methods instead of <see cref="T:System.Linq.Queryable" /> methods on any enumerable data sources that cannot be queried by <see cref="T:System.Linq.Queryable" /> methods.</summary>
      <returns>The value that results from executing <paramref name="expression" />.</returns>
      <param name="expression">An expression tree to execute.</param>
    </member>
    <member name="M:System.Linq.EnumerableQuery`1.ToString">
      <summary>Returns a textual representation of the enumerable collection or, if it is null, of the expression tree that is associated with this instance.</summary>
      <returns>A textual representation of the enumerable collection or, if it is null, of the expression tree that is associated with this instance.</returns>
    </member>
    <member name="T:System.Linq.IGrouping`2">
      <summary>Represents a collection of objects that have a common key.</summary>
      <typeparam name="TKey">The type of the key of the <see cref="T:System.Linq.IGrouping`2" />.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
      <typeparam name="TElement">The type of the values in the <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Linq.IGrouping`2.Key">
      <summary>Gets the key of the <see cref="T:System.Linq.IGrouping`2" />.</summary>
      <returns>The key of the <see cref="T:System.Linq.IGrouping`2" />.</returns>
    </member>
    <member name="T:System.Linq.ILookup`2">
      <summary>Defines an indexer, size property, and Boolean search method for data structures that map keys to <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequences of values.</summary>
      <typeparam name="TKey">The type of the keys in the <see cref="T:System.Linq.ILookup`2" />.</typeparam>
      <typeparam name="TElement">The type of the elements in the <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequences that make up the values in the <see cref="T:System.Linq.ILookup`2" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.ILookup`2.Contains(`0)">
      <summary>Determines whether a specified key exists in the <see cref="T:System.Linq.ILookup`2" />.</summary>
      <returns>true if <paramref name="key" /> is in the <see cref="T:System.Linq.ILookup`2" />; otherwise, false.</returns>
      <param name="key">The key to search for in the <see cref="T:System.Linq.ILookup`2" />.</param>
    </member>
    <member name="P:System.Linq.ILookup`2.Count">
      <summary>Gets the number of key/value collection pairs in the <see cref="T:System.Linq.ILookup`2" />.</summary>
      <returns>The number of key/value collection pairs in the <see cref="T:System.Linq.ILookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.ILookup`2.Item(`0)">
      <summary>Gets the <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequence of values indexed by a specified key.</summary>
      <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1" /> sequence of values indexed by the specified key.</returns>
      <param name="key">The key of the desired sequence of values.</param>
    </member>
    <member name="T:System.Linq.IOrderedEnumerable`1">
      <summary>Represents a sorted sequence.</summary>
      <typeparam name="TElement">The type of the elements of the sequence.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
      <summary>Performs a subsequent ordering on the elements of an <see cref="T:System.Linq.IOrderedEnumerable`1" /> according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</returns>
      <param name="keySelector">The <see cref="T:System.Func`2" /> used to extract the key for each element.</param>
      <param name="comparer">The <see cref="T:System.Collections.Generic.IComparer`1" /> used to compare keys for placement in the returned sequence.</param>
      <param name="descending">true to sort the elements in descending order; false to sort the elements in ascending order.</param>
      <typeparam name="TKey">The type of the key produced by <paramref name="keySelector" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Linq.IOrderedQueryable">
      <summary>Represents the result of a sorting operation.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Linq.IOrderedQueryable`1">
      <summary>Represents the result of a sorting operation.</summary>
      <typeparam name="T">The type of the content of the data source.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryable">
      <summary>Provides functionality to evaluate queries against a specific data source wherein the type of the data is not specified.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Linq.IQueryable.ElementType">
      <summary>Gets the type of the element(s) that are returned when the expression tree associated with this instance of <see cref="T:System.Linq.IQueryable" /> is executed.</summary>
      <returns>A <see cref="T:System.Type" /> that represents the type of the element(s) that are returned when the expression tree associated with this object is executed.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Expression">
      <summary>Gets the expression tree that is associated with the instance of <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</returns>
    </member>
    <member name="P:System.Linq.IQueryable.Provider">
      <summary>Gets the query provider that is associated with this data source.</summary>
      <returns>The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source.</returns>
    </member>
    <member name="T:System.Linq.IQueryable`1">
      <summary>Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.</summary>
      <typeparam name="T">The type of the data in the data source.This type parameter is covariant. That is, you can use either the type you specified or any type that is more derived. For more information about covariance and contravariance, see Covariance and Contravariance in Generics.</typeparam>
    </member>
    <member name="T:System.Linq.IQueryProvider">
      <summary>Defines methods to create and execute queries that are described by an <see cref="T:System.Linq.IQueryable" /> object.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery``1(System.Linq.Expressions.Expression)">
      <summary>Constructs an <see cref="T:System.Linq.IQueryable`1" /> object that can evaluate the query represented by a specified expression tree.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that can evaluate the query represented by the specified expression tree.</returns>
      <param name="expression">An expression tree that represents a LINQ query.</param>
      <typeparam name="TElement">The type of the elements of the <see cref="T:System.Linq.IQueryable`1" /> that is returned.</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.CreateQuery(System.Linq.Expressions.Expression)">
      <summary>Constructs an <see cref="T:System.Linq.IQueryable" /> object that can evaluate the query represented by a specified expression tree.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</returns>
      <param name="expression">An expression tree that represents a LINQ query.</param>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)">
      <summary>Executes the strongly-typed query represented by a specified expression tree.</summary>
      <returns>The value that results from executing the specified query.</returns>
      <param name="expression">An expression tree that represents a LINQ query.</param>
      <typeparam name="TResult">The type of the value that results from executing the query.</typeparam>
    </member>
    <member name="M:System.Linq.IQueryProvider.Execute(System.Linq.Expressions.Expression)">
      <summary>Executes the query represented by a specified expression tree.</summary>
      <returns>The value that results from executing the specified query.</returns>
      <param name="expression">An expression tree that represents a LINQ query.</param>
    </member>
    <member name="T:System.Linq.Lookup`2">
      <summary>Represents a collection of keys each mapped to one or more values.</summary>
      <typeparam name="TKey">The type of the keys in the <see cref="T:System.Linq.Lookup`2" />.</typeparam>
      <typeparam name="TElement">The type of the elements of each <see cref="T:System.Collections.Generic.IEnumerable`1" /> value in the <see cref="T:System.Linq.Lookup`2" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})">
      <summary>Applies a transform function to each key and its associated values and returns the results.</summary>
      <returns>A collection that contains one value for each key/value collection pair in the <see cref="T:System.Linq.Lookup`2" />.</returns>
      <param name="resultSelector">A function to project a result value from each key and its associated values.</param>
      <typeparam name="TResult">The type of the result values produced by <paramref name="resultSelector" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Linq.Lookup`2.Contains(`0)">
      <summary>Determines whether a specified key is in the <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>true if <paramref name="key" /> is in the <see cref="T:System.Linq.Lookup`2" />; otherwise, false.</returns>
      <param name="key">The key to find in the <see cref="T:System.Linq.Lookup`2" />.</param>
    </member>
    <member name="P:System.Linq.Lookup`2.Count">
      <summary>Gets the number of key/value collection pairs in the <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>The number of key/value collection pairs in the <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="M:System.Linq.Lookup`2.GetEnumerator">
      <summary>Returns a generic enumerator that iterates through the <see cref="T:System.Linq.Lookup`2" />.</summary>
      <returns>An enumerator for the <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="P:System.Linq.Lookup`2.Item(`0)">
      <summary>Gets the collection of values indexed by the specified key.</summary>
      <returns>The collection of values indexed by the specified key.</returns>
      <param name="key">The key of the desired collection of values.</param>
    </member>
    <member name="M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the <see cref="T:System.Linq.Lookup`2" />. This class cannot be inherited.</summary>
      <returns>An enumerator for the <see cref="T:System.Linq.Lookup`2" />.</returns>
    </member>
    <member name="T:System.Linq.OrderedParallelQuery`1">
      <summary>Represents a sorted, parallel sequence.</summary>
      <typeparam name="TSource">The type of elements in the source collection.</typeparam>
    </member>
    <member name="M:System.Linq.OrderedParallelQuery`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the sequence.</summary>
      <returns>An enumerator that iterates through the sequence.</returns>
    </member>
    <member name="T:System.Linq.ParallelEnumerable">
      <summary>Provides a set of methods for querying objects that implement ParallelQuery{TSource}. This is the parallel equivalent of <see cref="T:System.Linq.Enumerable" />.</summary>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>Applies in parallel an accumulator function over a sequence. This overload is not available in the sequential implementation.</summary>
      <returns>The transformed final accumulator value.</returns>
      <param name="source">A sequence to aggregate over.</param>
      <param name="seedFactory">A function that returns the initial accumulator value. </param>
      <param name="updateAccumulatorFunc">An accumulator function to be invoked on each element in a partition. </param>
      <param name="combineAccumulatorsFunc">An accumulator function to be invoked on the yielded element from each partition.  </param>
      <param name="resultSelector">A function to transform the final accumulator value into the result value. </param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <typeparam name="TResult">The type of the resulting value.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="seedFactory" /> or <paramref name="updateAccumulatorFunc" /> or <paramref name="combineAccumulatorsFunc" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})">
      <summary>Applies in parallel an accumulator function over a sequence.</summary>
      <returns>The final accumulator value.</returns>
      <param name="source">A sequence to aggregate over.</param>
      <param name="func">An accumulator function to be invoked on each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})">
      <summary>Applies in parallel an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</summary>
      <returns>The final accumulator value.</returns>
      <param name="source">A sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">An accumulator function to be invoked on each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
      <summary>Applies in parallel an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</summary>
      <returns>The transformed final accumulator value.</returns>
      <param name="source">A sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">An accumulator function to be invoked on each element.</param>
      <param name="resultSelector">A function to transform the final accumulator value into the result value.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <typeparam name="TResult">The type of the resulting value.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})">
      <summary>Applies in parallel an accumulator function over a sequence. This overload is not available in the sequential implementation.</summary>
      <returns>The transformed final accumulator value.</returns>
      <param name="source">A sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="updateAccumulatorFunc">An accumulator function to be invoked on each element in a partition. </param>
      <param name="combineAccumulatorsFunc">An accumulator function to be invoked on the yielded element from each partition. </param>
      <param name="resultSelector">A function to transform the final accumulator value into the result value. </param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <typeparam name="TResult">The type of the resulting value.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="updateAccumulatorFunc" /> or <paramref name="combineAccumulatorsFunc" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Determines in parallel whether all elements of a sequence satisfy a condition.</summary>
      <returns>true if all elements in the source sequence pass the test in the specified predicate; otherwise, false.</returns>
      <param name="source">A sequence whose elements to apply the predicate to.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})">
      <summary>Determines whether a parallel sequence contains any elements.</summary>
      <returns>true if the source sequence contains any elements; otherwise, false.</returns>
      <param name="source">The IEnumerable to check for emptiness.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Determines in parallel whether any element of a sequence satisfies a condition.</summary>
      <returns>true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.</returns>
      <param name="source">An IEnumerable whose elements to apply the predicate to.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})">
      <summary>Converts a <see cref="T:System.Linq.ParallelQuery`1" /> into an <see cref="T:System.Collections.Generic.IEnumerable`1" /> to force sequential evaluation of the query.</summary>
      <returns>The input sequence types as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <param name="source">The sequence to type as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)">
      <summary>Enables treatment of a data source as if it was ordered, overriding the default of unordered. AsOrdered may only be invoked on sequences returned by AsParallel, ParallelEnumerable.Range, and ParallelEnumerable.Repeat.</summary>
      <returns>The source sequence which will maintain ordering in the query.</returns>
      <param name="source">The input sequence.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if the <paramref name="source" /> is not one of AsParallel, ParallelEnumerable.Range, or ParallelEnumerable.Repeat.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})">
      <summary>Enables treatment of a data source as if it was ordered, overriding the default of unordered. AsOrdered may only be invoked on sequences returned by AsParallel, ParallelEnumerable.Range, and ParallelEnumerable.Repeat.</summary>
      <returns>The source sequence which will maintain ordering in the query.</returns>
      <param name="source">The input sequence.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="source" /> is not one of AsParallel, ParallelEnumerable.Range, or ParallelEnumerable.Repeat.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})">
      <summary>Enables parallelization of a query, as sourced by a partitioner responsible for splitting the input sequence into partitions.</summary>
      <returns>The <paramref name="source" /> as a ParallelQuery to bind to ParallelEnumerable extension methods.</returns>
      <param name="source">A partitioner over the input sequence.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Enables parallelization of a query.</summary>
      <returns>The source as a <see cref="T:System.Linq.ParallelQuery`1" /> to bind to ParallelEnumerable extension methods.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to convert to a <see cref="T:System.Linq.ParallelQuery`1" />.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)">
      <summary>Enables parallelization of a query.</summary>
      <returns>The source as a ParallelQuery to bind to ParallelEnumerable extension methods.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to convert to a <see cref="T:System.Linq.ParallelQuery`1" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})">
      <summary>Converts a <see cref="T:System.Linq.ParallelQuery`1" /> into an <see cref="T:System.Collections.Generic.IEnumerable`1" /> to force sequential evaluation of the query.</summary>
      <returns>The source as an <see cref="T:System.Collections.Generic.IEnumerable`1" /> to bind to sequential extension methods.</returns>
      <param name="source">A <see cref="T:System.Linq.ParallelQuery`1" /> to convert to an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})">
      <summary>Allows an intermediate query to be treated as if no ordering is implied among the elements.</summary>
      <returns>The source sequence with arbitrary order.</returns>
      <param name="source">The input sequence.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <returns>Returns the average of the sequence of values.</returns>
      <param name="source">The source sequence.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">A sequence of values that are used to calculate an average.The average of the sequence of values.<paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})">
      <summary>Computes in parallel the average of a sequence of values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum or count of the elements in the sequence is larger than <see cref="M:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)">
      <summary>Converts the elements of a ParallelQuery to the specified type.</summary>
      <returns>A sequence that contains each element of the source sequence converted to the specified type.</returns>
      <param name="source">The sequence that contains the elements to be converted.</param>
      <typeparam name="TResult">The type to convert the elements of <paramref name="source" /> to.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>This Concat overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Concatenates two parallel sequences.</summary>
      <returns>A sequence that contains the concatenated elements of the two input sequences.</returns>
      <param name="first">The first sequence to concatenate.</param>
      <param name="second">The sequence to concatenate to the first sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>Determines in parallel whether a sequence contains a specified element by using the default equality comparer.</summary>
      <returns>true if the source sequence contains an element that has the specified value; otherwise, false.</returns>
      <param name="source">A sequence in which to locate a value.</param>
      <param name="value">The value to locate in the sequence.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines in parallel whether a sequence contains a specified element by using a specified IEqualityComparer{T}.</summary>
      <returns>true if the source sequence contains an element that has the specified value; otherwise, false.</returns>
      <param name="source">A sequence in which to locate a value.</param>
      <param name="value">The value to locate in the sequence.</param>
      <param name="comparer">An equality comparer to compare values.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the number of elements in a parallel sequence.</summary>
      <returns>The number of elements in the input sequence.</returns>
      <param name="source">A sequence that contains elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The number of elements in source is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns a number that represents how many elements in the specified parallel sequence satisfy a condition.</summary>
      <returns>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</returns>
      <param name="source">A sequence that contains elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The number of elements in source is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the elements of the specified parallel sequence or the type parameter's default value in a singleton collection if the sequence is empty.</summary>
      <returns>A sequence that contains default(TSource) if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</returns>
      <param name="source">The sequence to return a default value for if it is empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)">
      <summary>Returns the elements of the specified parallel sequence or the specified value in a singleton collection if the sequence is empty.</summary>
      <returns>A sequence that contains defaultValue if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</returns>
      <param name="source">The sequence to return the specified value for if it is empty.</param>
      <param name="defaultValue">The value to return if the sequence is empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns distinct elements from a parallel sequence by using the default equality comparer to compare values.</summary>
      <returns>A sequence that contains distinct elements from the source sequence.</returns>
      <param name="source">The sequence to remove duplicate elements from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Returns distinct elements from a parallel sequence by using a specified IEqualityComparer{T} to compare values.</summary>
      <returns>A sequence that contains distinct elements from the source sequence.</returns>
      <param name="source">The sequence to remove duplicate elements from.</param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare values.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Returns the element at a specified index in a parallel sequence.</summary>
      <returns>The element at the specified position in the source sequence.</returns>
      <param name="source">A sequence to return an element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than 0 or greater than or equal to the number of elements in <paramref name="source" />.</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Returns the element at a specified index in a parallel sequence or a default value if the index is out of range.</summary>
      <returns>default(TSource) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</returns>
      <param name="source">A sequence to return an element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Empty``1">
      <summary>Returns an empty ParallelQuery{TResult} that has the specified type argument.</summary>
      <returns>An empty sequence whose type argument is .</returns>
      <typeparam name="TResult">The type to assign to the type parameter of the returned generic sequence.</typeparam>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>This Except overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>This Except overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <param name="comparer">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Produces the set difference of two parallel sequences by using the default equality comparer to compare values.</summary>
      <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
      <param name="first">A sequence whose elements that are not also in <paramref name="second" /> will be returned.</param>
      <param name="second">A sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set difference of two parallel sequences by using the specified IEqualityComparer{T} to compare values.</summary>
      <returns>A sequence that contains the set difference of the elements of two sequences.</returns>
      <param name="first">A sequence whose elements that are not also in <paramref name="second" /> will be returned.</param>
      <param name="second">A sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence. </param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the first element of a parallel sequence.</summary>
      <returns>The first element in the specified sequence.</returns>
      <param name="source">The sequence to return the first element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the first element in a parallel sequence that satisfies a specified condition.</summary>
      <returns>The first element in the sequence that passes the test in the specified predicate function.</returns>
      <param name="source">The sequence to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">No element in <paramref name="source" /> satisfies the condition in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the first element of a parallel sequence, or a default value if the sequence contains no elements.</summary>
      <returns>default(TSource) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</returns>
      <param name="source">The sequence to return the first element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the first element of the parallel sequence that satisfies a condition or a default value if no such element is found.</summary>
      <returns>default(TSource) if <paramref name="source" /> is empty or if no element passes the test specified by predicate; otherwise, the first element in <paramref name="source" /> that passes the test specified by predicate.</returns>
      <param name="source">The sequence to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})">
      <summary>Invokes in parallel the specified action for each element in the <paramref name="source" />.</summary>
      <param name="source">The <see cref="T:System.Linq.ParallelQuery`1" /> whose elements will be processed by <paramref name="action" />.</param>
      <param name="action">An Action to invoke on each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="action" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Groups in parallel the elements of a sequence according to a specified key selector function.</summary>
      <returns>An OrderedParallelQuery{TSource}whose elements are sorted descending according to a key.</returns>
      <param name="source">An OrderedParallelQuery{TSource}than contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups in parallel the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</summary>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.</returns>
      <param name="source">An OrderedParallelQuery{TSource} than contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An IComparer{TSource} to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />&gt;.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Groups in parallel the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</summary>
      <returns>A ParallelQuery&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or ParallelQuery(Of IGrouping(Of TKey, TElement)) in Visual Basic where each IGrouping generic object contains a collection of objects of type  and a key.</returns>
      <param name="source">An OrderedParallelQuery&lt;(Of &lt;(TElement&gt;)&gt;) than contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="elementSelector">A function to map each source element to an element in an IGrouping.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in the IGrouping</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups in parallel the elements of a sequence according to a key selector function.  The keys are compared by using a comparer and each group's elements are projected by using a specified function.</summary>
      <returns>A ParallelQuery{IGrouping{TKey, TElement}} in C# or ParallelQuery(Of IGrouping(Of TKey, TElement)) in Visual Basic where each IGrouping generic object contains a collection of objects of type  and a key.</returns>
      <param name="source">An OrderedParallelQuery{TSource}than contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="elementSelector">A function to map each source element to an element in an IGrouping.</param>
      <param name="comparer">An IComparer{TSource} to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in the IGrouping</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
      <summary>Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.  The elements of each group are projected by using a specified function.</summary>
      <returns>A collection of elements of type  where each element represents a projection over a group and its key.</returns>
      <param name="source">A sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an IGrouping&lt;TKey, TElement&gt;.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each IGrouping{TKey, TElement}.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</summary>
      <returns>A collection of elements of type  where each element represents a projection over a group and its key.</returns>
      <param name="source">A sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an IGrouping{Key, TElement}.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <param name="comparer">An IEqualityComparer{TKey} to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each IGrouping{TKey, TElement}.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
      <summary>Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</summary>
      <returns>A collection of elements of type  where each element represents a projection over a group and its key.</returns>
      <param name="source">A sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.</summary>
      <returns>An ParallelQuery&lt;IGrouping&lt;TKey, TResult&gt;&gt; in C# or ParallelQuery(Of IGrouping(Of TKey, TResult)) in Visual Basic where each IGrouping&lt;(Of &lt;(TKey, TResult&gt;)&gt;) object contains a collection of objects of type  and a key.</returns>
      <param name="source">A sequence whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <param name="comparer">An IEqualityComparer{TKey} to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>This GroupJoin overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">This parameter is not used.</param>
      <param name="inner">This parameter is not used.</param>
      <param name="outerKeySelector">This parameter is not used.</param>
      <param name="innerKeySelector">This parameter is not used.</param>
      <param name="resultSelector">This parameter is not used.</param>
      <typeparam name="TOuter">This type parameter is not used.</typeparam>
      <typeparam name="TInner">This type parameter is not used.</typeparam>
      <typeparam name="TKey">This type parameter is not used.</typeparam>
      <typeparam name="TResult">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>This GroupJoin overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">This parameter is not used.</param>
      <param name="inner">This parameter is not used.</param>
      <param name="outerKeySelector">This parameter is not used.</param>
      <param name="innerKeySelector">This parameter is not used.</param>
      <param name="resultSelector">This parameter is not used.</param>
      <param name="comparer">This parameter is not used.</param>
      <typeparam name="TOuter">This type parameter is not used.</typeparam>
      <typeparam name="TInner">This type parameter is not used.</typeparam>
      <typeparam name="TKey">This type parameter is not used.</typeparam>
      <typeparam name="TResult">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})">
      <summary>Correlates in parallel the elements of two sequences based on equality of keys and groups the results.  The default equality comparer is used to compare keys.</summary>
      <returns>A sequence that has elements of type  that are obtained by performing a grouped join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates in parallel the elements of two sequences based on key equality and groups the results.  A specified IEqualityComparer{T} is used to compare keys.</summary>
      <returns>A sequence that has elements of type  that are obtained by performing a grouped join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>This Intersect overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>This Intersect overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <param name="comparer">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Produces the set intersection of two parallel sequences by using the default equality comparer to compare values.</summary>
      <returns>A sequence that contains the elements that form the set intersection of two sequences.</returns>
      <param name="first">A sequence whose distinct elements that also appear in <paramref name="second" /> will be returned.</param>
      <param name="second">A sequence whose distinct elements that also appear in the first sequence will be returned.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set intersection of two parallel sequences by using the specified IEqualityComparer{T} to compare values.</summary>
      <returns>A sequence that contains the elements that form the set intersection of two sequences.</returns>
      <param name="first">A sequence whose distinct elements that also appear in <paramref name="second" /> will be returned.</param>
      <param name="second">A sequence whose distinct elements that also appear in the first sequence will be returned.</param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>This Join overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when invoked.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">This parameter is not used.</param>
      <param name="inner">This parameter is not used.</param>
      <param name="outerKeySelector">This parameter is not used.</param>
      <param name="innerKeySelector">This parameter is not used.</param>
      <param name="resultSelector">This parameter is not used.</param>
      <typeparam name="TOuter">This type parameter is not used.</typeparam>
      <typeparam name="TInner">This type parameter is not used.</typeparam>
      <typeparam name="TKey">This type parameter is not used.</typeparam>
      <typeparam name="TResult">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>This Join overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when invoked.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="outer">This parameter is not used.</param>
      <param name="inner">This parameter is not used.</param>
      <param name="outerKeySelector">This parameter is not used.</param>
      <param name="innerKeySelector">This parameter is not used.</param>
      <param name="resultSelector">This parameter is not used.</param>
      <param name="comparer">This parameter is not used.</param>
      <typeparam name="TOuter">This type parameter is not used.</typeparam>
      <typeparam name="TInner">This type parameter is not used.</typeparam>
      <typeparam name="TKey">This type parameter is not used.</typeparam>
      <typeparam name="TResult">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})">
      <summary>Correlates in parallel the elements of two sequences based on matching keys.  The default equality comparer is used to compare keys.</summary>
      <returns>A sequence that has elements of type  that are obtained by performing an inner join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates in parallel the elements of two sequences based on matching keys.  A specified IEqualityComparer{T} is used to compare keys.</summary>
      <returns>A sequence that has elements of type  that are obtained by performing an inner join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the last element of a parallel sequence.</summary>
      <returns>The value at the last position in the source sequence.</returns>
      <param name="source">The sequence to return the last element from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the last element of a parallel sequence that satisfies a specified condition.</summary>
      <returns>The last element in the sequence that passes the test in the specified predicate function.</returns>
      <param name="source">The sequence to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">No element in <paramref name="source" /> satisfies the condition in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the last element of a parallel sequence, or a default value if the sequence contains no elements.</summary>
      <returns>default() if the source sequence is empty; otherwise, the last element in the sequence.</returns>
      <param name="source">The sequence to return an element from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the last element of a parallel sequence that satisfies a condition, or a default value if no such element is found.</summary>
      <returns>default() if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</returns>
      <param name="source">The sequence to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns an Int64 that represents the total number of elements in a parallel sequence.</summary>
      <returns>The number of elements in the input sequence.</returns>
      <param name="source">A sequence that contains elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The number of elements in source is larger than <see cref="M:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns an Int64 that represents how many elements in a parallel sequence satisfy a condition.</summary>
      <returns>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</returns>
      <param name="source">A sequence that contains elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The number of elements in source is larger than <see cref="M:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the maximum value in a parallel sequence of values.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and  is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and  is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the minimum value in a parallel sequence of values.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and  is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum value of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> contains no elements and  is a non-nullable value type.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)">
      <summary>Filters the elements of a ParallelQuery based on a specified type.</summary>
      <returns>A sequence that contains elements from the input sequence of type .</returns>
      <param name="source">The sequence whose elements to filter.</param>
      <typeparam name="TResult">The type to filter the elements of the sequence on.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Sorts in parallel the elements of a sequence in ascending order according to a key.</summary>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts in parallel the elements of a sequence in ascending order by using a specified comparer.</summary>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An IComparer{TKey} to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Sorts in parallel the elements of a sequence in descending order according to a key.</summary>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts the elements of a sequence in descending order by using a specified comparer.</summary>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An IComparer{TKey} to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)">
      <summary>Generates a parallel sequence of integral numbers within a specified range.</summary>
      <returns>An IEnumerable&lt;Int32&gt; in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.</returns>
      <param name="start">The value of the first integer in the sequence.</param>
      <param name="count">The number of sequential integers to generate.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than 0 -or- <paramref name="start" /> + <paramref name="count" /> - 1 is larger than <see cref="M:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)">
      <summary>Generates a parallel sequence that contains one repeated value.</summary>
      <returns>A sequence that contains a repeated value.</returns>
      <param name="element">The value to be repeated.</param>
      <param name="count">The number of times to repeat the value in the generated sequence.</param>
      <typeparam name="TResult">The type of the value to be repeated in the result sequence.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> is less than 0.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})">
      <summary>Inverts the order of the elements in a parallel sequence.</summary>
      <returns>A sequence whose elements correspond to those of the input sequence in reverse order.</returns>
      <param name="source">A sequence of values to reverse.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Projects in parallel each element of a sequence into a new form.</summary>
      <returns>A sequence whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</returns>
      <param name="source">A sequence of values to invoke a transform function on.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of elements resturned by selector.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})">
      <summary>Projects in parallel each element of a sequence into a new form by incorporating the element's index.</summary>
      <returns>A sequence whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</returns>
      <param name="source">A sequence of values to invoke a transform function on.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of elements resturned by selector.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projects each element of a sequence to an IEnumerable{T}, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</summary>
      <returns>A sequence whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">The type of elements in the result sequence.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projects in parallel each element of a sequence to an IEnumerable{T} and flattens the resulting sequences into one sequence.</summary>
      <returns>A sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by selector.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})">
      <summary>Projects each element of a sequence to an IEnumerable{T}, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.</summary>
      <returns>A sequence whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">The type of elements to return.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})">
      <summary>Projects in parallel each element of a sequence to an IEnumerable{T}, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</summary>
      <returns>A sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by selector.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>This SequenceEqual overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">Thrown every time this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>This SequenceEqual overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <param name="comparer">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">Thrown every time this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Determines whether two parallel sequences are equal by comparing the elements by using the default equality comparer for their type.</summary>
      <returns>true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.</returns>
      <param name="first">A sequence to compare to second.</param>
      <param name="second">A sequence to compare to the first input sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines whether two parallel sequences are equal by comparing their elements by using a specified IEqualityComparer{T}.</summary>
      <returns>true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.</returns>
      <param name="first">A sequence to compare to <paramref name="second" />.</param>
      <param name="second">A sequence to compare to the first input sequence.</param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to use to compare elements.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the only element of a parallel sequence, and throws an exception if there is not exactly one element in the sequence.</summary>
      <returns>The single element of the input sequence.</returns>
      <param name="source">The sequence to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">The input sequence contains more than one element. -or- The input sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the only element of a parallel sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</summary>
      <returns>The single element of the input sequence that satisfies a condition.</returns>
      <param name="source">The sequence to return the single element of.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />. -or- More than one element satisfies the condition in <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})">
      <summary>Returns the only element of a parallel sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</summary>
      <returns>The single element of the input sequence, or default() if the sequence contains no elements.</returns>
      <param name="source">The sequence to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns the only element of a parallel sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</summary>
      <returns>The single element of the input sequence that satisfies the condition, or default() if no such element is found.</returns>
      <param name="source">The sequence to return the single element of.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Bypasses a specified number of elements in a parallel sequence and then returns the remaining elements.</summary>
      <returns>A sequence that contains the elements that occur after the specified index in the input sequence.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="count">The number of elements to skip before returning the remaining elements.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Bypasses elements in a parallel sequence as long as a specified condition is true and then returns the remaining elements.</summary>
      <returns>A sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Bypasses elements in a parallel sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.</summary>
      <returns>A sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element. </param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Decimal.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Decimal.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})">
      <summary>Computes in parallel the sum of a sequence of values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Decimal.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements in the source sequence.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Decimal.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Int32.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">The sum is larger than <see cref="M:System.Int64.MaxValue" />. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})">
      <summary>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of values to calculate the sum of.</param>
      <param name="selector">A transform function to apply to each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Returns a specified number of contiguous elements from the start of a parallel sequence.</summary>
      <returns>A sequence that contains the specified number of elements from the start of the input sequence.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="count">The number of elements to return.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Returns elements from a parallel sequence as long as a specified condition is true.</summary>
      <returns>A sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Returns elements from a parallel sequence as long as a specified condition is true.  The element's index is used in the logic of the predicate function.</summary>
      <returns>A sequence that contains elements from the input sequence that occur before the element at which the test no longer passes.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each source element for a condition; the second parameter of the function represents the index of the source element. </param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>Performs in parallel a subsequent ordering of the elements in a sequence in ascending order according to a key.</summary>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</returns>
      <param name="source">An OrderedParallelQuery{TSource} than contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Performs in parallel a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</summary>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</returns>
      <param name="source">An OrderedParallelQuery{TSource} that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An IComparer{TKey} to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})">
      <summary>Performs in parallel a subsequent ordering of the elements in a sequence in descending order, according to a key.</summary>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.</returns>
      <param name="source">An OrderedParallelQuery{TSource} than contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>Performs in parallel a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</summary>
      <returns>An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.</returns>
      <param name="source">An OrderedParallelQuery{TSource} than contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An IComparer{TKey} to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})">
      <summary>Creates an array from a ParallelQuery{T}.</summary>
      <returns>An array that contains the elements from the input sequence.</returns>
      <param name="source">A sequence to create an array from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Creates a Dictionary{TKey,TValue} from a ParallelQuery{T} according to a specified key selector function.</summary>
      <returns>A Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) that contains keys and values.</returns>
      <param name="source">A sequence to create a Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produces a key that is a null reference (Nothing in Visual Basic). -or- <paramref name="keySelector" /> produces duplicate keys for two elements. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a Dictionary{TKey,TValue} from a ParallelQuery{T} according to a specified key selector function and key comparer.</summary>
      <returns>A Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) that contains keys and values.</returns>
      <param name="source">A sequence to create a Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produces a key that is a null reference (Nothing in Visual Basic). -or- <paramref name="keySelector" /> produces duplicate keys for two elements. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Creates a Dictionary{TKey,TValue} from a ParallelQuery{T} according to specified key selector and element selector functions.</summary>
      <returns>A Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) that contains values of type  selected from the input sequence</returns>
      <param name="source">A sequence to create a Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element. </param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produces a key that is a null reference (Nothing in Visual Basic). -or- <paramref name="keySelector" /> produces duplicate keys for two elements. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates a Dictionary{TKey,TValue from a ParallelQuery{T} according to a specified key selector function, a comparer, and an element selector function.</summary>
      <returns>A Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) that contains values of type  selected from the input sequence</returns>
      <param name="source">A sequence to create a Dictionary&lt;(Of &lt;(TKey, TValue&gt;)&gt;) from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element.</param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">
        <paramref name="keySelector" /> produces a key that is a null reference (Nothing in Visual Basic). -or- <paramref name="keySelector" /> produces duplicate keys for two elements. -or- One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})">
      <summary>Creates a List{T} from an ParallelQuery{T}.</summary>
      <returns>A List&lt;(Of &lt;(T&gt;)&gt;) that contains elements from the input sequence.</returns>
      <param name="source">A sequence to create a List&lt;(Of &lt;(T&gt;)&gt;) from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})">
      <summary>Creates an ILookup{TKey,T} from a ParallelQuery{T} according to a specified key selector function.</summary>
      <returns>A Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) that contains keys and values.</returns>
      <param name="source">The sequence to create a Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates an ILookup{TKey,T} from a ParallelQuery{T} according to a specified key selector function and key comparer.</summary>
      <returns>A Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) that contains keys and values.</returns>
      <param name="source">The sequence to create a Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Creates an ILookup{TKey,TElement} from a ParallelQuery{T} according to specified key selector and element selector functions.</summary>
      <returns>A Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) that contains values of type TElement selected from the input sequence.</returns>
      <param name="source">The sequence to create a Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element. </param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Creates an ILookup{TKey,TElement} from a ParallelQuery{T} according to a specified key selector function, a comparer and an element selector function.</summary>
      <returns>A Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) that contains values of type TElement selected from the input sequence.</returns>
      <param name="source">The sequence to create a Lookup&lt;(Of &lt;(TKey, TElement&gt;)&gt;) from.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="elementSelector">A transform function to produce a result element value from each element. </param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare keys.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the value returned by <paramref name="elementSelector" />.</typeparam>
      <exception cref="T:System.OperationCanceledException">The query was canceled.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.AggregateException">One or more exceptions occurred during the evaluation of the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>This Union overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>This Union overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when called.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <param name="comparer">This parameter is not used.</param>
      <typeparam name="TSource">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})">
      <summary>Produces the set union of two parallel sequences by using the default equality comparer.</summary>
      <returns>A sequence that contains the elements from both input sequences, excluding duplicates.</returns>
      <param name="first">A sequence whose distinct elements form the first set for the union.</param>
      <param name="second">A sequence whose distinct elements form the second set for the union.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set union of two parallel sequences by using a specified IEqualityComparer{T}.</summary>
      <returns>A sequence that contains the elements from both input sequences, excluding duplicates.</returns>
      <param name="first">A sequence whose distinct elements form the first set for the union.</param>
      <param name="second">A sequence whose distinct elements form the second set for the union.</param>
      <param name="comparer">An IEqualityComparer&lt;(Of &lt;(T&gt;)&gt;) to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})">
      <summary>Filters in parallel a sequence of values based on a predicate.</summary>
      <returns>A sequence that contains elements from the input sequence that satisfy the condition.</returns>
      <param name="source">A sequence to filter.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})">
      <summary>Filters in parallel a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.</summary>
      <returns>A sequence that contains elements from the input sequence that satisfy the condition.</returns>
      <param name="source">A sequence to filter.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)">
      <summary>Sets the <see cref="T:System.Threading.CancellationToken" /> to associate with the query.</summary>
      <returns>ParallelQuery representing the same query as source, but with the registered cancellation token.</returns>
      <param name="source">A ParallelQuery on which to set the option.</param>
      <param name="cancellationToken">A cancellation token.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Threading.CancellationTokenSource" /> associated with the <paramref name="cancellationToken" /> has been disposed.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">WithCancellation is used multiple times in the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)">
      <summary>Sets the degree of parallelism to use in a query. Degree of parallelism is the maximum number of concurrently executing tasks that will be used to process the query.</summary>
      <returns>ParallelQuery representing the same query as source, with the limit on the degrees of parallelism set.</returns>
      <param name="source">A ParallelQuery on which to set the limit on the degrees of parallelism.</param>
      <param name="degreeOfParallelism">The degree of parallelism for the query.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="degreeOfParallelism" /> is less than 1 or greater than 64.</exception>
      <exception cref="T:System.InvalidOperationException">WithDegreeOfParallelism is used multiple times in the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)">
      <summary>Sets the execution mode of the query.</summary>
      <returns>ParallelQuery representing the same query as source, but with the registered execution mode.</returns>
      <param name="source">A ParallelQuery on which to set the option.</param>
      <param name="executionMode">The mode in which to execute the query.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="executionMode" /> is not a valid <see cref="T:System.Linq.ParallelExecutionMode" /> value.</exception>
      <exception cref="T:System.InvalidOperationException">WithExecutionMode is used multiple times in the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)">
      <summary>Sets the merge options for this query, which specify how the query will buffer output.</summary>
      <returns>ParallelQuery representing the same query as source, but with the registered merge options.</returns>
      <param name="source">A ParallelQuery on which to set the option.</param>
      <param name="mergeOptions">The merge options to set for this query.</param>
      <typeparam name="TSource">The type of elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="mergeOptions" /> is not a valid <see cref="T:System.Linq.ParallelMergeOptions" /> value.</exception>
      <exception cref="T:System.InvalidOperationException">WithMergeOptions is used multiple times in the query.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})">
      <summary>This Zip overload should never be called.  This method is marked as obsolete and always throws <see cref="T:System.NotSupportedException" /> when invoked.</summary>
      <returns>This overload always throws a <see cref="T:System.NotSupportedException" />.</returns>
      <param name="first">This parameter is not used.</param>
      <param name="second">This parameter is not used.</param>
      <param name="resultSelector">This parameter is not used.</param>
      <typeparam name="TFirst">This type parameter is not used.</typeparam>
      <typeparam name="TSecond">This type parameter is not used.</typeparam>
      <typeparam name="TResult">This type parameter is not used.</typeparam>
      <exception cref="T:System.NotSupportedException">The exception that occurs when this method is called.</exception>
    </member>
    <member name="M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})">
      <summary>Merges in parallel two sequences by using the specified predicate function.</summary>
      <returns>A sequence that has elements of type  that are obtained by performing resultSelector pairwise on two sequences. If the sequence lengths are unequal, this truncates to the length of the shorter sequence.</returns>
      <param name="first">The first sequence to zip.</param>
      <param name="second">The second sequence to zip.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <typeparam name="TFirst">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TSecond">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TResult">The type of the return elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="first" /> or <paramref name="second" /> or <paramref name="resultSelector" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Linq.ParallelExecutionMode">
      <summary>The query execution mode is a hint that specifies how the system should handle performance trade-offs when parallelizing queries.</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.Default">
      <summary>By default, the system will use algorithms for queries that are ripe for parallelism and will avoid algorithms with high overheads that will likely result in slow downs for parallel execution.</summary>
    </member>
    <member name="F:System.Linq.ParallelExecutionMode.ForceParallelism">
      <summary>Parallelize the entire query, even if that means using high-overhead algorithms.</summary>
    </member>
    <member name="T:System.Linq.ParallelMergeOptions">
      <summary>Specifies the preferred type of output merge to use in a query. This is a hint only, and may not be respected by the system when parallelizing all queries.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.Default">
      <summary>Use the default merge type, which is AutoBuffered.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.NotBuffered">
      <summary>Use a merge without output buffers. As soon as result elements have been computed, make that element available to the consumer of the query.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.AutoBuffered">
      <summary>Use a merge with output buffers of a size chosen by the system. Results will accumulate into an output buffer before they are available to the consumer of the query.</summary>
    </member>
    <member name="F:System.Linq.ParallelMergeOptions.FullyBuffered">
      <summary>Use a merge with full output buffers. The system will accumulate all of the results before making any of them available to the consumer of the query.</summary>
    </member>
    <member name="T:System.Linq.ParallelQuery">
      <summary>Represents a parallel sequence.</summary>
    </member>
    <member name="M:System.Linq.ParallelQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an enumerator that iterates through the sequence.</summary>
      <returns>An enumerator that iterates through the sequence.</returns>
    </member>
    <member name="T:System.Linq.ParallelQuery`1">
      <summary>Represents a parallel sequence.</summary>
      <typeparam name="TSource">The type of element in the source sequence.</typeparam>
    </member>
    <member name="M:System.Linq.ParallelQuery`1.GetEnumerator">
      <summary>Returns an enumerator that iterates through the sequence.</summary>
      <returns>An enumerator that iterates through the sequence.</returns>
    </member>
    <member name="T:System.Linq.Queryable">
      <summary>Provides a set of static (Shared in Visual Basic) methods for querying data structures that implement <see cref="T:System.Linq.IQueryable`1" />.</summary>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})">
      <summary>Applies an accumulator function over a sequence.</summary>
      <returns>The final accumulator value.</returns>
      <param name="source">A sequence to aggregate over.</param>
      <param name="func">An accumulator function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})">
      <summary>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</summary>
      <returns>The final accumulator value.</returns>
      <param name="source">A sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">An accumulator function to invoke on each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})">
      <summary>Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</summary>
      <returns>The transformed final accumulator value.</returns>
      <param name="source">A sequence to aggregate over.</param>
      <param name="seed">The initial accumulator value.</param>
      <param name="func">An accumulator function to invoke on each element.</param>
      <param name="selector">A function to transform the final accumulator value into the result value.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TAccumulate">The type of the accumulator value.</typeparam>
      <typeparam name="TResult">The type of the resulting value.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="func" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Determines whether all the elements of a sequence satisfy a condition.</summary>
      <returns>true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.</returns>
      <param name="source">A sequence whose elements to test for a condition.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})">
      <summary>Determines whether a sequence contains any elements.</summary>
      <returns>true if the source sequence contains any elements; otherwise, false.</returns>
      <param name="source">A sequence to check for being empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Determines whether any element of a sequence satisfies a condition.</summary>
      <returns>true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.</returns>
      <param name="source">A sequence whose elements to test for a condition.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Converts a generic <see cref="T:System.Collections.Generic.IEnumerable`1" /> to a generic <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that represents the input sequence.</returns>
      <param name="source">A sequence to convert.</param>
      <typeparam name="TElement">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)">
      <summary>Converts an <see cref="T:System.Collections.IEnumerable" /> to an <see cref="T:System.Linq.IQueryable" />.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable" /> that represents the input sequence.</returns>
      <param name="source">A sequence to convert.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="source" /> does not implement <see cref="T:System.Collections.Generic.IEnumerable`1" /> for some <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})">
      <summary>Computes the average of a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})">
      <summary>Computes the average of a sequence of <see cref="T:System.Double" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int32" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int64" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" />values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <returns>The average of the sequence of values, or null if the source sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})">
      <summary>Computes the average of a sequence of <see cref="T:System.Single" /> values.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Computes the average of a sequence of <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values that are used to calculate an average.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Computes the average of a sequence of <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Computes the average of a sequence of <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the <paramref name="source" /> sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the <paramref name="source" /> sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the <paramref name="source" /> sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the <paramref name="source" /> sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Computes the average of a sequence of nullable <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values, or null if the <paramref name="source" /> sequence is empty or contains only null values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Computes the average of a sequence of <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The average of the sequence of values.</returns>
      <param name="source">A sequence of values to calculate the average of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)">
      <summary>Converts the elements of an <see cref="T:System.Linq.IQueryable" /> to the specified type.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains each element of the source sequence converted to the specified type.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable" /> that contains the elements to be converted.</param>
      <typeparam name="TResult">The type to convert the elements of <paramref name="source" /> to.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Concatenates two sequences.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the concatenated elements of the two input sequences.</returns>
      <param name="source1">The first sequence to concatenate.</param>
      <param name="source2">The sequence to concatenate to the first sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)">
      <summary>Determines whether a sequence contains a specified element by using the default equality comparer.</summary>
      <returns>true if the input sequence contains an element that has the specified value; otherwise, false.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> in which to locate <paramref name="item" />.</param>
      <param name="item">The object to locate in the sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>true if the input sequence contains an element that has the specified value; otherwise, false.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> in which to locate <paramref name="item" />.</param>
      <param name="item">The object to locate in the sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})">
      <summary>Returns the number of elements in a sequence.</summary>
      <returns>The number of elements in the input sequence.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the number of elements in the specified sequence that satisfies a condition.</summary>
      <returns>The number of elements in the sequence that satisfies the condition in the predicate function.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})">
      <summary>Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains default(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to return a default value for if empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)">
      <summary>Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains <paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to return the specified value for if empty.</param>
      <param name="defaultValue">The value to return if the sequence is empty.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})">
      <summary>Returns distinct elements from a sequence by using the default equality comparer to compare values.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains distinct elements from <paramref name="source" />.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to remove duplicates from.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains distinct elements from <paramref name="source" />.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to remove duplicates from.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Returns the element at a specified index in a sequence.</summary>
      <returns>The element at the specified position in <paramref name="source" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Returns the element at a specified index in a sequence or a default value if the index is out of range.</summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="index" /> is outside the bounds of <paramref name="source" />; otherwise, the element at the specified position in <paramref name="source" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="index">The zero-based index of the element to retrieve.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set difference of two sequences by using the default equality comparer to compare values.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the set difference of the two sequences.</returns>
      <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose elements that are not also in <paramref name="source2" /> will be returned.</param>
      <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will not appear in the returned sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the set difference of the two sequences.</returns>
      <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose elements that are not also in <paramref name="source2" /> will be returned.</param>
      <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will not appear in the returned sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})">
      <summary>Returns the first element of a sequence.</summary>
      <returns>The first element in <paramref name="source" />.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the first element of a sequence that satisfies a specified condition.</summary>
      <returns>The first element in <paramref name="source" /> that passes the test in <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Returns the first element of a sequence, or a default value if the sequence contains no elements.</summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</returns>
      <param name="source">The <see cref="T:System.Linq.IQueryable`1" /> to return the first element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.</summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Groups the elements of a sequence according to a specified key selector function.</summary>
      <returns>An IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IQueryable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a sequence of objects and a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</summary>
      <returns>An IQueryable&lt;IGrouping&lt;TKey, TSource&gt;&gt; in C# or IQueryable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> contains a sequence of objects and a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})">
      <summary>Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</summary>
      <returns>An IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IQueryable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> contains a sequence of objects of type <paramref name="TElement" /> and a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.</summary>
      <returns>An IQueryable&lt;IGrouping&lt;TKey, TElement&gt;&gt; in C# or IQueryable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> contains a sequence of objects of type <paramref name="TElement" /> and a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.</summary>
      <returns>An T:System.Linq.IQueryable`1 that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.</summary>
      <returns>An T:System.Linq.IQueryable`1 that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="elementSelector">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> or <paramref name="resultSelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</summary>
      <returns>An T:System.Linq.IQueryable`1 that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer.</summary>
      <returns>An T:System.Linq.IQueryable`1 that has a type argument of <paramref name="TResult" /> and where each element represents a projection over a group and its key.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to group.</param>
      <param name="keySelector">A function to extract the key for each element.</param>
      <param name="resultSelector">A function to create a result value from each group.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented in <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">The type of the result value returned by <paramref name="resultSelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="resultSelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})">
      <summary>Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements of type <paramref name="TResult" /> obtained by performing a grouped join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates the elements of two sequences based on key equality and groups the results. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements of type <paramref name="TResult" /> obtained by performing a grouped join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</param>
      <param name="comparer">A comparer to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set intersection of two sequences by using the default equality comparer to compare values.</summary>
      <returns>A sequence that contains the set intersection of the two sequences.</returns>
      <param name="source1">A sequence whose distinct elements that also appear in <paramref name="source2" /> are returned.</param>
      <param name="source2">A sequence whose distinct elements that also appear in the first sequence are returned.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the set intersection of the two sequences.</returns>
      <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose distinct elements that also appear in <paramref name="source2" /> are returned.</param>
      <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence are returned.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})">
      <summary>Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that has elements of type <paramref name="TResult" /> obtained by performing an inner join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})">
      <summary>Correlates the elements of two sequences based on matching keys. A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that has elements of type <paramref name="TResult" /> obtained by performing an inner join on two sequences.</returns>
      <param name="outer">The first sequence to join.</param>
      <param name="inner">The sequence to join to the first sequence.</param>
      <param name="outerKeySelector">A function to extract the join key from each element of the first sequence.</param>
      <param name="innerKeySelector">A function to extract the join key from each element of the second sequence.</param>
      <param name="resultSelector">A function to create a result element from two matching elements.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</param>
      <typeparam name="TOuter">The type of the elements of the first sequence.</typeparam>
      <typeparam name="TInner">The type of the elements of the second sequence.</typeparam>
      <typeparam name="TKey">The type of the keys returned by the key selector functions.</typeparam>
      <typeparam name="TResult">The type of the result elements.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})">
      <summary>Returns the last element in a sequence.</summary>
      <returns>The value at the last position in <paramref name="source" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the last element of a sequence that satisfies a specified condition.</summary>
      <returns>The last element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Returns the last element in a sequence, or a default value if the sequence contains no elements.</summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the last element in <paramref name="source" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return the last element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</summary>
      <returns>default(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no elements pass the test in the predicate function; otherwise, the last element of <paramref name="source" /> that passes the test in the predicate function.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return an element from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})">
      <summary>Returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.</summary>
      <returns>The number of elements in <paramref name="source" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence that satisfy a condition.</summary>
      <returns>The number of elements in <paramref name="source" /> that satisfy the condition in the predicate function.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements to be counted.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})">
      <summary>Returns the maximum value in a generic <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Invokes a projection function on each element of a generic <see cref="T:System.Linq.IQueryable`1" /> and returns the maximum resulting value.</summary>
      <returns>The maximum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the maximum of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by the function represented by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})">
      <summary>Returns the minimum value of a generic <see cref="T:System.Linq.IQueryable`1" />.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Invokes a projection function on each element of a generic <see cref="T:System.Linq.IQueryable`1" /> and returns the minimum resulting value.</summary>
      <returns>The minimum value in the sequence.</returns>
      <param name="source">A sequence of values to determine the minimum of.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by the function represented by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)">
      <summary>Filters the elements of an <see cref="T:System.Linq.IQueryable" /> based on a specified type.</summary>
      <returns>A collection that contains the elements from <paramref name="source" /> that have type <paramref name="TResult" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable" /> whose elements to filter.</param>
      <typeparam name="TResult">The type to filter the elements of the sequence on.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Sorts the elements of a sequence in ascending order according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function that is represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts the elements of a sequence in ascending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function that is represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Sorts the elements of a sequence in descending order according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function that is represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Sorts the elements of a sequence in descending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">A sequence of values to order.</param>
      <param name="keySelector">A function to extract a key from an element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function that is represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})">
      <summary>Inverts the order of the elements in a sequence.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements correspond to those of the input sequence in reverse order.</returns>
      <param name="source">A sequence of values to reverse.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Projects each element of a sequence into a new form.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a projection function on each element of <paramref name="source" />.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by the function represented by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})">
      <summary>Projects each element of a sequence into a new form by incorporating the element's index.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a projection function on each element of <paramref name="source" />.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the value returned by the function represented by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking the one-to-many projection function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding <paramref name="source" /> element to a result element.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A projection function to apply to each element of the input sequence.</param>
      <param name="resultSelector">A projection function to apply to each element of each intermediate sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by the function represented by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and combines the resulting sequences into one sequence.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by the function represented by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> that incorporates the index of the source element that produced it. A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking the one-to-many projection function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding <paramref name="source" /> element to a result element.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="collectionSelector">A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.</param>
      <param name="resultSelector">A projection function to apply to each element of each intermediate sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TCollection">The type of the intermediate elements collected by the function represented by <paramref name="collectionSelector" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the resulting sequence.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})">
      <summary>Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and combines the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.</returns>
      <param name="source">A sequence of values to project.</param>
      <param name="selector">A projection function to apply to each element; the second parameter of this function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TResult">The type of the elements of the sequence returned by the function represented by <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Determines whether two sequences are equal by using the default equality comparer to compare elements.</summary>
      <returns>true if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, false.</returns>
      <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to compare to those of <paramref name="source2" />.</param>
      <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to compare to those of the first sequence.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Determines whether two sequences are equal by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare elements.</summary>
      <returns>true if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, false.</returns>
      <param name="source1">An <see cref="T:System.Linq.IQueryable`1" /> whose elements to compare to those of <paramref name="source2" />.</param>
      <param name="source2">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to compare to those of the first sequence.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})">
      <summary>Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</summary>
      <returns>The single element of the input sequence.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> has more than one element.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</summary>
      <returns>The single element of the input sequence that satisfies the condition in <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return a single element from.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No element satisfies the condition in <paramref name="predicate" />.-or-More than one element satisfies the condition in <paramref name="predicate" />.-or-The source sequence is empty.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})">
      <summary>Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</summary>
      <returns>The single element of the input sequence, or default(<paramref name="TSource" />) if the sequence contains no elements.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return the single element of.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</summary>
      <returns>The single element of the input sequence that satisfies the condition in <paramref name="predicate" />, or default(<paramref name="TSource" />) if no such element is found.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return a single element from.</param>
      <param name="predicate">A function to test an element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Bypasses a specified number of elements in a sequence and then returns the remaining elements.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements that occur after the specified index in the input sequence.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return elements from.</param>
      <param name="count">The number of elements to skip before returning the remaining elements.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from <paramref name="source" /> starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from <paramref name="source" /> starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to return elements from.</param>
      <param name="predicate">A function to test each element for a condition; the second parameter of this function represents the index of the source element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Double" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Int32" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Int64" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})">
      <summary>Computes the sum of a sequence of <see cref="T:System.Single" /> values.</summary>
      <returns>The sum of the values in the sequence.</returns>
      <param name="source">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Computes the sum of the sequence of <see cref="T:System.Single" /> values that is obtained by invoking a projection function on each element of the input sequence.</summary>
      <returns>The sum of the projected values.</returns>
      <param name="source">A sequence of values of type <paramref name="TSource" />.</param>
      <param name="selector">A projection function to apply to each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="selector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)">
      <summary>Returns a specified number of contiguous elements from the start of a sequence.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the specified number of elements from the start of <paramref name="source" />.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="count">The number of elements to return.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Returns elements from a sequence as long as a specified condition is true.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence occurring before the element at which the test specified by <paramref name="predicate" /> no longer passes.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence occurring before the element at which the test specified by <paramref name="predicate" /> no longer passes.</returns>
      <param name="source">The sequence to return elements from.</param>
      <param name="predicate">A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</summary>
      <returns>An <see cref="T:System.Linq.IOrderedQueryable`1" /> whose elements are sorted in descending order according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key returned by the function represented by <paramref name="keySelector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})">
      <summary>Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</summary>
      <returns>A collection whose elements are sorted in descending order according to a key.</returns>
      <param name="source">An <see cref="T:System.Linq.IOrderedQueryable`1" /> that contains elements to sort.</param>
      <param name="keySelector">A function to extract a key from each element.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <typeparam name="TKey">The type of the key that is returned by the <paramref name="keySelector" /> function.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="comparer" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>Produces the set union of two sequences by using the default equality comparer.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements from both input sequences, excluding duplicates.</returns>
      <param name="source1">A sequence whose distinct elements form the first set for the union operation.</param>
      <param name="source2">A sequence whose distinct elements form the second set for the union operation.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains the elements from both input sequences, excluding duplicates.</returns>
      <param name="source1">A sequence whose distinct elements form the first set for the union operation.</param>
      <param name="source2">A sequence whose distinct elements form the second set for the union operation.</param>
      <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</param>
      <typeparam name="TSource">The type of the elements of the input sequences.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source1" /> or <paramref name="source2" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Filters a sequence of values based on a predicate.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence that satisfy the condition specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to filter.</param>
      <param name="predicate">A function to test each element for a condition.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})">
      <summary>Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains elements from the input sequence that satisfy the condition specified by <paramref name="predicate" />.</returns>
      <param name="source">An <see cref="T:System.Linq.IQueryable`1" /> to filter.</param>
      <param name="predicate">A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.</param>
      <typeparam name="TSource">The type of the elements of <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="predicate" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Merges two sequences by using the specified predicate function.</summary>
      <returns>An <see cref="T:System.Linq.IQueryable`1" /> that contains merged elements of two input sequences.</returns>
      <param name="source1">The first sequence to merge.</param>
      <param name="source2">The second sequence to merge.</param>
      <param name="resultSelector">A function that specifies how to merge the elements from the two sequences.</param>
      <typeparam name="TFirst">The type of the elements of the first input sequence.</typeparam>
      <typeparam name="TSecond">The type of the elements of the second input sequence.</typeparam>
      <typeparam name="TResult">The type of the elements of the result sequence.</typeparam>
    </member>
    <member name="T:System.Linq.Expressions.BinaryExpression">
      <summary>Represents an expression that has a binary operator.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.CanReduce">
      <summary>Gets a value that indicates whether the expression tree node can be reduced.</summary>
      <returns>True if the expression tree node can be reduced, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Conversion">
      <summary>Gets the type conversion function that is used by a coalescing or compound assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLifted">
      <summary>Gets a value that indicates whether the expression tree node represents a lifted call to an operator.</summary>
      <returns>true if the node represents a lifted call; otherwise, false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull">
      <summary>Gets a value that indicates whether the expression tree node represents a lifted call to an operator whose return type is lifted to a nullable type.</summary>
      <returns>true if the operator's return type is lifted to a nullable type; otherwise, false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Left">
      <summary>Gets the left operand of the binary operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand of the binary operation.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Method">
      <summary>Gets the implementing method for the binary operation.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Reduce">
      <summary>Reduces the binary expression node to a simpler expression.</summary>
      <returns>The reduced expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BinaryExpression.Right">
      <summary>Gets the right operand of the binary operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand of the binary operation.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BinaryExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="left">The <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property of the result. </param>
      <param name="conversion">The <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property of the result.</param>
      <param name="right">The <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property of the result. </param>
    </member>
    <member name="T:System.Linq.Expressions.BlockExpression">
      <summary>Represents a block that contains a sequence of expressions where variables can be defined.</summary>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Expressions">
      <summary>Gets the expressions in this block.</summary>
      <returns>The read-only collection containing all the expressions in this block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Result">
      <summary>Gets the last expression in this block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the last expression in this block.</returns>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.BlockExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children changed, or an expression with the updated children.</returns>
      <param name="variables">The <see cref="P:System.Linq.Expressions.BlockExpression.Variables" /> property of the result. </param>
      <param name="expressions">The <see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /> property of the result. </param>
    </member>
    <member name="P:System.Linq.Expressions.BlockExpression.Variables">
      <summary>Gets the variables defined in this block.</summary>
      <returns>The read-only collection containing all the variables defined in this block.</returns>
    </member>
    <member name="T:System.Linq.Expressions.CatchBlock">
      <summary>Represents a catch statement in a try block.</summary>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Body">
      <summary>Gets the body of the catch block.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the catch body.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Filter">
      <summary>Gets the body of the <see cref="T:System.Linq.Expressions.CatchBlock" /> filter.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.Expression" /> object representing the body of the <see cref="T:System.Linq.Expressions.CatchBlock" /> filter.</returns>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Test">
      <summary>Gets the type of <see cref="T:System.Exception" /> this handler catches.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the type of <see cref="T:System.Exception" /> this handler catches.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="variable">The <see cref="P:System.Linq.Expressions.CatchBlock.Variable" /> property of the result.</param>
      <param name="filter">The <see cref="P:System.Linq.Expressions.CatchBlock.Filter" /> property of the result.</param>
      <param name="body">The <see cref="P:System.Linq.Expressions.CatchBlock.Body" /> property of the result.</param>
    </member>
    <member name="P:System.Linq.Expressions.CatchBlock.Variable">
      <summary>Gets a reference to the <see cref="T:System.Exception" /> object caught by this handler.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ParameterExpression" /> object representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</returns>
    </member>
    <member name="T:System.Linq.Expressions.ConditionalExpression">
      <summary>Represents an expression that has a conditional operator.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfFalse">
      <summary>Gets the expression to execute if the test evaluates to false.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the expression to execute if the test is false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.IfTrue">
      <summary>Gets the expression to execute if the test evaluates to true.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the expression to execute if the test is true.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Test">
      <summary>Gets the test of the conditional operation.</summary>
      <returns>An <see cref="T:System.Linq.Expressions.Expression" /> that represents the test of the conditional operation.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConditionalExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.ConditionalExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ConditionalExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression</summary>
      <returns>This expression if no children changed, or an expression with the updated children.</returns>
      <param name="test">The <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property of the result.</param>
      <param name="ifTrue">The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property of the result.</param>
      <param name="ifFalse">The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.ConstantExpression">
      <summary>Represents an expression that has a constant value.</summary>
    </member>
    <member name="M:System.Linq.Expressions.ConstantExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.NodeType">
      <summary>Returns the node type of this Expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.ConstantExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ConstantExpression.Value">
      <summary>Gets the value of the constant expression.</summary>
      <returns>An <see cref="T:System.Object" /> equal to the value of the represented expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DebugInfoExpression">
      <summary>Emits or clears a sequence point for debug information. This allows the debugger to highlight the correct source code when debugging.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DebugInfoExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Document">
      <summary>Gets the <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndColumn">
      <summary>Gets the end column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>The number of the end column of the code that was used to generate the wrapped expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.EndLine">
      <summary>Gets the end line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>The number of the end line of the code that was used to generate the wrapped expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.IsClear">
      <summary>Gets the value to indicate if the <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> is for clearing a sequence point.</summary>
      <returns>True if the <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> is for clearing a sequence point, otherwise false.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.NodeType">
      <summary>Returns the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> that represents this expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartColumn">
      <summary>Gets the start column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>The number of the start column of the code that was used to generate the wrapped expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.StartLine">
      <summary>Gets the start line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</summary>
      <returns>The number of the start line of the code that was used to generate the wrapped expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DebugInfoExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.DebugInfoExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DefaultExpression">
      <summary>Represents the default value of a type or an empty expression.</summary>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DefaultExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.DefaultExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="T:System.Linq.Expressions.DynamicExpression">
      <summary>Represents a dynamic operation.</summary>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Arguments">
      <summary>Gets the arguments to the dynamic operation.</summary>
      <returns>The read-only collections containing the arguments to the dynamic operation.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Binder">
      <summary>Gets the <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, which determines the runtime behavior of the dynamic site.</summary>
      <returns>The <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />, which determines the runtime behavior of the dynamic site.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.DelegateType">
      <summary>Gets the type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</summary>
      <returns>The <see cref="T:System.Type" /> object representing the type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.NodeType">
      <summary>Returns the node type of this expression. Extension nodes should return <see cref="F:System.Linq.Expressions.ExpressionType.Extension" /> when overriding this method.</summary>
      <returns>The <see cref="T:System.Linq.Expressions.ExpressionType" /> of the expression.</returns>
    </member>
    <member name="P:System.Linq.Expressions.DynamicExpression.Type">
      <summary>Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</summary>
      <returns>The <see cref="P:System.Linq.Expressions.DynamicExpression.Type" /> that represents the static type of the expression.</returns>
    </member>
    <member name="M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.ElementInit">
      <summary>Represents an initializer for a single element of an <see cref="T:System.Collections.IEnumerable" /> collection.</summary>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.AddMethod">
      <summary>Gets the instance method that is used to add an element to an <see cref="T:System.Collections.IEnumerable" /> collection.</summary>
      <returns>A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method that adds an element to a collection.</returns>
    </member>
    <member name="P:System.Linq.Expressions.ElementInit.Arguments">
      <summary>Gets the collection of arguments that are passed to a method that adds an element to an <see cref="T:System.Collections.IEnumerable" /> collection.</summary>
      <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments for a method that adds an element to a collection.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.ToString">
      <summary>Returns a textual representation of an <see cref="T:System.Linq.Expressions.ElementInit" /> object.</summary>
      <returns>A textual representation of the <see cref="T:System.Linq.Expressions.ElementInit" /> object.</returns>
    </member>
    <member name="M:System.Linq.Expressions.ElementInit.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</summary>
      <returns>This expression if no children are changed or an expression with the updated children.</returns>
      <param name="arguments">The <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property of the result.</param>
    </member>
    <member name="T:System.Linq.Expressions.Expression">
      <summary>Provides the base class from which the classes that represent expression tree nodes are derived. It also contains static (Shared in Visual Basic) factory methods to create the various node types. This is an abstract class.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor">
      <summary>Constructs a new instance of <see cref="T:System.Linq.Expressions.Expression" />.</summary>
    </member>
    <member name="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Linq.Expressions.Expression" /> class.</summary>
      <param name="nodeType">The <see cref="T:System.Linq.Expressions.ExpressionType" /> to set as the node type.</param>
      <param name="type">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of this <see cref="T:System.Linq.Expressions.Expression" />.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)">
      <summary>Dispatches to the specific visit method for this node type. For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</summary>
      <returns>The result of visiting this node.</returns>
      <param name="visitor">The visitor to visit this node with.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The bitwise AND operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND operation. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the bitwise AND operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional AND operation that evaluates the second operand only if the first operand evaluates to true.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">The bitwise AND operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.-or-<paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional AND operation that evaluates the second operand only if the first operand is resolved to true. The implementing method can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> or <paramref name="right" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="method" /> is not null and the method it represents returns void, is not static (Shared in Visual Basic), or does not take exactly two arguments.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="method" /> is null and the bitwise AND operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.-or-<paramref name="method" /> is null and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</param>
      <param name="conversion">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access a multidimensional array.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="array">An expression that represents the multidimensional array.</param>
      <param name="indexes">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing expressions used to index the array.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access an array.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</returns>
      <param name="array">An expression representing the array to index.</param>
      <param name="indexes">An array that contains expressions used to index the array.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to an array of rank more than one.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="array">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to.</param>
      <param name="indexes">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> or <paramref name="indexes" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type does not represent an array type.-or-The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents applying an array index operator to an array of rank one.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="array">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="index">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> or <paramref name="index" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type does not represent an array type.-or-<paramref name="array" />.Type represents an array type whose rank is not 1.-or-<paramref name="index" />.Type does not represent the <see cref="T:System.Int32" /> type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to a multidimensional array.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="array">An array of <see cref="T:System.Linq.Expressions.Expression" /> instances - indexes for the array index operation.</param>
      <param name="indexes">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> or <paramref name="indexes" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type does not represent an array type.-or-The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.-or-The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression for obtaining the length of a one-dimensional array.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to <paramref name="array" />.</returns>
      <param name="array">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" />.Type does not represent an array type.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an assignment operation.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</returns>
      <param name="left">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</param>
      <param name="right">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a field or property.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> properties set to the specified values.</returns>
      <param name="member">A <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</param>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> or <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="member" /> does not represent a field or property.-or-The property represented by <paramref name="member" /> does not have a set accessor.-or-<paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a member by using a property accessor method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property set to <paramref name="expression" />.</returns>
      <param name="propertyAccessor">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</param>
      <param name="expression">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyAccessor" /> or <paramref name="expression" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="propertyAccessor" /> does not represent a property accessor method.-or-The property accessed by <paramref name="propertyAccessor" /> does not have a set accessor.-or-<paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="variables">The variables in the block.</param>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="variables">The variables in the block.</param>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains two expressions and has no variables.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">The first expression in the block.</param>
      <param name="arg1">The second expression in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains three expressions and has no variables.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">The first expression in the block.</param>
      <param name="arg1">The second expression in the block.</param>
      <param name="arg2">The third expression in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains four expressions and has no variables.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">The first expression in the block.</param>
      <param name="arg1">The second expression in the block.</param>
      <param name="arg2">The third expression in the block.</param>
      <param name="arg3">The fourth expression in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains five expressions and has no variables.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="arg0">The first expression in the block.</param>
      <param name="arg1">The second expression in the block.</param>
      <param name="arg2">The third expression in the block.</param>
      <param name="arg3">The fourth expression in the block.</param>
      <param name="arg4">The fifth expression in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">The result type of the block.</param>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">The result type of the block.</param>
      <param name="variables">The variables in the block.</param>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">The result type of the block.</param>
      <param name="variables">The variables in the block.</param>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</returns>
      <param name="type">The result type of the block.</param>
      <param name="expressions">The expressions in the block.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement. The value passed to the label upon jumping can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type. The value passed to the label upon jumping can be specified.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="value">The value that will be passed to the associated label upon jumping.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />.</returns>
      <param name="target">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</param>
      <param name="type">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to an instance method that takes no arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance method call (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.-or-<paramref name="instance" /> is null and <paramref name="method" /> represents an instance method.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arguments">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.-or-<paramref name="instance" /> is null and <paramref name="method" /> represents an instance method.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.-or-The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.-or-One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes two arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes no arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call. (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <param name="arg2">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance fo an instance method call (pass null for a static (Shared in Visual Basic) method).</param>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.-or-<paramref name="instance" /> is null and <paramref name="method" /> represents an instance method.-or-<paramref name="arguments" /> is not null and one or more of its elements is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.-or-The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.-or-One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to an instance method by calling the appropriate factory method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to <paramref name="instance" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified instance method, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> set to the specified arguments.</returns>
      <param name="instance">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> property value will be searched for a specific method.</param>
      <param name="methodName">The name of the method.</param>
      <param name="typeArguments">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represents the arguments to the method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> or <paramref name="methodName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.-or-More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="method">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</param>
      <param name="arguments">A collection of <see cref="T:System.Linq.Expressions.Expression" /> that represents the call arguments.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method that takes one argument.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to an static method that takes two arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes three arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <param name="arg2">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes four arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <param name="arg2">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</param>
      <param name="arg3">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes five arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arg0">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</param>
      <param name="arg1">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</param>
      <param name="arg2">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</param>
      <param name="arg3">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</param>
      <param name="arg4">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fifth argument.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method that has arguments.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</returns>
      <param name="method">A <see cref="T:System.Reflection.MethodInfo" /> that represents a static (Shared in Visual Basic) method to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.-or-One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</exception>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])">
      <summary>Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method by calling the appropriate factory method.</summary>
      <returns>A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified static (Shared in Visual Basic) method, and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> property set to the specified arguments.</returns>
      <param name="type">The <see cref="T:System.Type" /> that specifies the type that contains the specified static (Shared in Visual Basic) method.</param>
      <param name="methodName">The name of the method.</param>
      <param name="typeArguments">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method. This argument should be null when methodName specifies a non-generic method.</param>
      <param name="arguments">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments to the method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> or <paramref name="methodName" /> is null.</exception>
      <exception cref="T:System.InvalidOperationException">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.-or-More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.</exception>
    </member>
    <member name="P:System.Linq.Expressions.Expression.CanReduce">
      <summary>Indicates that the node can be reduced to a simpler node. If this returns true, Reduce() can be called to produce the reduced form.</summary>
      <returns>True if the node can be reduced, otherwise false.</returns>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with a reference to the caught <see cref="T:System.Exception" /> object for use in the handler body.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="variable">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</param>
      <param name="body">The body of the catch statement.</param>
    </member>
    <member name="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
      <summary>Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter and a reference to the caught <see cref="T:System.Exception" /> object.</summary>
      <returns>The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</returns>
      <param name="variable">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this h