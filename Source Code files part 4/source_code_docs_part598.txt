icrosoft.Expression.Controls.PathLayoutData.OrientationAngle">
            <summary>
            Gets or sets the angle perpendicular to the path at an element's location if the element is oriented to the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.IPathLayoutItem">
            <summary>
            Represents an element that is arranged by a <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </summary>
            <remarks>
            Implementing this interface enables <see cref="T:Microsoft.Expression.Controls.PathPanel"/> to set these properties when the element is arranged.
            This interface is not intended for general implementation.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.IPathLayoutItem.Update(Microsoft.Expression.Controls.PathLayoutData)">
            <summary>
            Updates the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/> properties based on the given <see cref="T:Microsoft.Expression.Controls.PathLayoutData"/> and raises the <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
            <param name="data">The data needed to update the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/>.</param>
        </member>
        <member name="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated">
            <summary>
            Occurs when one or more of the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/> properties change.
            </summary>
            <remarks>
            This event is raised whenever the item’s position along the path is updated. This can occur due to changes in the properties on the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> or changes to <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LayoutPathIndex">
            <summary>
            Gets the index of the path on which the item is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalIndex">
            <summary>
            Gets the index of the item in a collection of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalIndex">
            <summary>
            Gets the index of the item on the path on which it is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalOffset">
            <summary>
            Gets the offset of the item proportional to the total length of a collection of paths.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalOffset">
            <summary>
            Gets the offset of the item proportional to the length of the path on which it is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.NormalAngle">
            <summary>
            Gets the angle perpendicular to the path at the item's location.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.OrientationAngle">
            <summary>
            Gets the angle perpendicular to the path at the items's location if the item is oriented to the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.Distribution">
            <summary>
            Specifies the distribution of a <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.Orientation">
            <summary>
            Specifies the orientation of elements on a <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.FillBehavior">
            <summary>
            Specifies the method for altering the <see cref="P:Microsoft.Expression.Controls.LayoutPath.Span"/> on an open path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.LayoutPath">
            <summary>
            Describes a path along which elements are arranged.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Controls.LayoutPath.transformedPolylines">
            <summary>
            Ideally, we want to cache the Bezier curves before flattening, because transform will affect flattening.
            That requires us to cache curves that we don't support very well yet.  Instead, we cache the flatten points
            in distribution strategy and transform them on demand.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.SourceElement">
            <summary>
            Gets or sets the element that defines the path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Distribution">
            <summary>
            Gets or sets whether items are laid out evenly or with a fixed padding.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Capacity">
            <summary>
            Gets or sets the maximum number of items displayed on the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Padding">
            <summary>
            Gets or sets the distance in pixels along the arc length of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> between two items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Orientation">
            <summary>
            Gets or sets the orientation of the items.
            </summary>
            <remarks>
            This property is supported on <see cref="T:Microsoft.Expression.Controls.PathListBox"/>, but not <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Start">
            <summary>
            Gets or sets the distance from the start of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> to place the first item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Span">
            <summary>
            Gets or sets the percentage of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> that participates in layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.FillBehavior">
            <summary>
            Gets or set the method to alter <see cref="P:Microsoft.Expression.Controls.LayoutPath.Span"/> on an open path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.ActualCapacity">
            <summary>
            Gets the computed Capacity.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.IsValid">
            <summary>
            Gets whether or not the <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/> is valid in the context.
            A <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/> is invalid if it is a descendant of the <see cref="T:Microsoft.Expression.Controls.PathPanel"/> in which it used.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PaddedDistributionStrategy">
            <summary>
            Distributes the children of a layout path based on the size of the children and a given padding between the children.
            The distance in arclength between children is determined by the padding plus the sum of the radii of the children's bounding boxes.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathListBox">
            <summary>
            Contains a list of items that are laid out along one or more paths.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathListBox"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.GetContainerForItemOverride">
            <summary>
            Creates the element used to display a specified item.
            </summary>
            <returns>A <see cref="T:Microsoft.Expression.Controls.PathListBoxItem"/> corresponding to a specified item.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own item container.
            </summary>
            <returns>true if the item is its own item container; otherwise, false.</returns>
            <param name="item">The specified item.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements.
            </summary>
            <param name="finalSize">The size that this object should use to arrange its child elements.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.LayoutPaths">
            <summary>
            Gets or sets a collection of objects that define the path(s) used for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.StartItemIndex">
            <summary>
            Gets or sets the index to use within the list of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.WrapItems">
            <summary>
            Gets or sets whether the item index wraps to the beginning of the collection when StartItemIndex is greater than 0.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathListBoxItem">
            <summary>
            Represents an item in a <see cref="T:Microsoft.Expression.Controls.PathListBox"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBoxItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathListBoxItem"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBoxItem.Update(Microsoft.Expression.Controls.PathLayoutData)">
            <summary>
            For a description of this member, see <see cref="M:Microsoft.Expression.Controls.IPathLayoutItem.Update(Microsoft.Expression.Controls.PathLayoutData)"/>.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.PathListBoxItem.PathLayoutUpdated">
            <summary>
            For a description of this member, see <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LayoutPathIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LayoutPathIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.GlobalIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LocalIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.GlobalOffset">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalOffset"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LocalOffset">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalOffset"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.NormalAngle">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.NormalAngle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.OrientationAngle">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.OrientationAngle"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathPanel">
            <summary>
            Arranges child elements along one or more path.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Expression.Controls.PathPanel"/> can be used as an alternative to <see cref="T:Microsoft.Expression.Controls.PathListBox"/> when selection is not necessary.
            The <see cref="P:Microsoft.Expression.Controls.LayoutPath.Orientation"/> property is not supported on <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathPanel"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the size required for child elements.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. </param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements.
            </summary>
            <param name="finalSize">The size that this object should use to arrange its child elements.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.ArrangeChild(System.Int32,System.Int32,Microsoft.Expression.Drawing.Core.PolylineData,Microsoft.Expression.Drawing.Core.MarchLocation,System.Int32)">
            <summary>
            Arranges the child at the given index at a particular location on a LayoutPath.
            </summary>
            <param name="indirectIndex">An index from the range 0 to PathPanel.Count.</param>
            <param name="pathIndex">The index of the layout path on which to arrange the child.</param>
            <param name="polyline">The polyline in the layout path.</param>
            <param name="location">The location on the polyline.</param>
            <param name="localIndex">The index of the child on the LayoutPath.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.GetChildRadius(System.Int32)">
            <summary>
            Calculates the radius of the bounding circle for the child at the given index.
            </summary>
            <param name="indirectIndex">An index from the range 0 to PathPanel.Count.</param>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.LayoutPaths">
            <summary>
            Gets or sets a collection of objects that define the path(s) used for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.StartItemIndex">
            <summary>
            Gets or sets the index to use within the list of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.WrapItems">
            <summary>
            Gets or sets whether the item index wraps to the beginning of the collection when StartItemIndex is greater than 0.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.ValidPaths">
            <summary>
            The subset of LayoutPaths that are attached and not Collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.Count">
            <summary>
            Count is the number of Children that the PathPanel will layout.
            If StartItemIndex > 0 and WrapItems is false, this can be less than PathPanel.Children.Count
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetItemsHost(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the Panel that contains the containers of an ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>
            The Panel that contains the containers of an ItemsControl, or null
            if the Panel could not be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.TraverseBreadthFirst``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Traverses a tree by accepting an initial value and a function that 
            retrieves the child nodes of a node.
            </summary>
            <typeparam name="T">The type of the stream.</typeparam>
            <param name="initialNode">The initial node.</param>
            <param name="getChildNodes">A function that retrieves the child
            nodes of a node.</param>
            <param name="traversePredicate">A predicate that evaluates a node
            and returns a value indicating whether that node and it's children
            should be traversed.</param>
            <returns>A stream of nodes.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetVisualChildrenAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree children of an element and the element itself.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetLogicalChildren(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical children of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetLogicalDescendents(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical descendents of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\de\Microsoft.Expression.Interactions.xml ===
﻿<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Interactions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Interactivity.Core.ActionCommand">
            <summary>
            Eine grundlegende Implementierung von &quot;ICommand&quot;, die eine Methode, die keinen Parameter annimmt, oder eine Methode, die einen Parameter annimmt, umschließt.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action)">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:Microsoft.Expression.Interactivity.Core.ActionCommand"/>-Klasse.
            </summary>
            <param name="action">Die Aktion.</param>
            <remarks>Stellen Sie mithilfe dieses Konstruktors eine Aktion bereit, die den Parameter &quot;ICommand&quot; ignoriert.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action{System.Object})">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:Microsoft.Expression.Interactivity.Core.ActionCommand"/>-Klasse.
            </summary>
            <param name="objectAction">Eine Aktion, die einen Objektparameter annimmt.</param>
            <remarks>Stellen Sie mithilfe dieses Konstruktors eine Aktion bereit, die den über die Methode &quot;Execute&quot; übergebenen Objektparameter nutzt.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
            Definiert die Methode, die bestimmt, ob der Befehl im aktuellen Zustand ausgeführt werden kann.
            </summary>
            <param name="parameter">Vom Befehl verwendete Daten.  Wenn für den Befehl keine Daten übergeben werden müssen, kann dieses Objekt auf Null gesetzt werden.</param>
            <returns>
            Gibt immer &quot;true&quot; zurück.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.Execute(System.Object)">
            <summary>
            Definiert die Methode, die aufgerufen wird, wenn der Befehl aufgerufen wird.
            </summary>
            <param name="parameter">Vom Befehl verwendete Daten.  Wenn für den Befehl keine Daten übergeben werden müssen, kann dieses Objekt auf Null gesetzt werden.</param>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecuteChanged">
            <summary>
            Tritt auf, wenn Änderungen auftreten, die Auswirkungen darauf haben, ob der Befehl ausgeführt wird. Wird von &quot;ActionCommand&quot; nicht ausgelöst.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ChangePropertyAction">
            <summary>
            Eine Aktion, die, wenn sie aufgerufen wird, eine angegebene Eigenschaft in einen angegebenen Wert ändert.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.#ctor">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:Microsoft.Expression.Interactivity.Core.ChangePropertyAction"/>-Klasse.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Invoke(System.Object)">
            <summary>
            Ruft die Aktion auf.
            </summary>
            <param name="parameter">Der Parameter zur Aktion. Wenn die Aktion keinen Parameter erfordert, kann der Parameter auf einen Nullverweis gesetzt werden.</param>
            <exception cref="T:System.ArgumentException">Am Ziel wurde keine Eigenschaft mit <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName"/> gefunden.</exception>
            <exception cref="T:System.ArgumentException"><c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName"/> konnte nicht auf den durch <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Value"/> angegebenen Wert gesetzt werden.</exception>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName">
            <summary>
            Ruft den Namen der zu ändernden Eigenschaft ab, oder legt ihn fest. Hierbei handelt es sich um eine Abhängigkeitseigenschaft.
            </summary>
            <value>Der Name der zu ändernden Eigenschaft.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Value">
            <summary>
            Ruft den festzulegenden Wert ab, oder legt ihn fest. Hierbei handelt es sich um eine Abhängigkeitseigenschaft.
            </summary>
            <value>Der festzulegende Wert.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Duration">
            <summary>
            Ruft die Dauer der Animation ab, die beim Aufrufen von &quot;ChangePropertyAction&quot; auftritt, oder legt die Dauer fest.  Hierbei handelt es sich um eine Abhängigkeitseigenschaft. Wenn keine Dauer festgelegt wird, wird keine Animation angewendet.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager">
            <summary>
            &quot;ExtendedVisualStateManager&quot; ist ein benutzerdefinierter VisualStateManager, der die Animation von Layouteigenschaften glätten kann. Bei diesem benutzerdefinierten VisualStateManager können Zustände Änderungen an Eigenschaften wie &quot;Grid.Column&quot; beinhalten und Elementhöhen in oder von &quot;Automatisch&quot; ändern. Diese Änderungen werden im Laufe der Zeit mithilfe der &quot;GeneratedDuration&quot; und der &quot;GeneratedEasingFunction&quot; des entsprechenden Übergangs geglättet. Eine allgemeine Beschreibung des Algorithmus finden Sie weiter unten im Abschnitt &quot;VisualStateManager-Überschreibungen&quot;.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.UseFluidLayoutProperty">
            <summary>
            Eine &quot;VisualStateGroup&quot; kann &quot;Fließendes Layout&quot; verwenden.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValuesProperty">
            <summary>
            Eine &quot;VisualStateGroup&quot; speichert eine Liste mit diesen ursprünglichen Werten in einer angefügten Eigenschaft.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutStoryboardProperty">
            <summary>
            Die layoutspezifischen Eigenschaften werden für jeden Zustand extrahiert und dann an den Zustand angefügt. Diese Eigenschaften werden vom Zustand selbst entfernt.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CurrentStateProperty">
            <summary>
            Merken Sie sich den aktuellen Zustand.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.MovingElements">
            <summary>
            Dies ist der Satz Elemente, der derzeit in der Animation angezeigt wird.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutTransitionStoryboard">
            <summary>
            Dies ist das Storyboard, das den Übergang animiert.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutProperties">
            <summary>
            Diese Liste enthält alle bekannten Layouteigenschaften.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.StopAnimations">
            <summary>
            Stoppen Sie die Animation, und ersetzen Sie die Layoutänderungen, die vorgenommen wurden, um diese Animation zu unterstützen.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.FindTransition(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState)">
            <summary>
            Lokalisieren Sie den Übergang, den VisualStateManager verwendet, um die Änderung zu animieren, sodass die Layoutanimation an die Dauer und Beschleunigung angepasst wird.
            </summary>
            <param name="group">Die Gruppe, in der der Übergang stattfindet</param>
            <param name="previousState">Der Zustand, von dem Sie kommen</param>
            <param name="state">Der Zustand, in den Sie übergehen</param>
            <returns>Der Übergang</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.ExtractLayoutStoryboard(System.Windows.VisualState)">
            <summary>
            Entfernen Sie alle das Layout betreffende Eigenschaften aus dem Storyboard des Zustands, und speichern Sie sie in einer angefügten Eigenschaft.
            </summary>
            <param name="state">Der Zustand, in den Sie übergehen</param>
            <returns>Ein Storyboard, das die Layouteigenschaften in diesem Zustand enthält</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.FindTargetElements(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Der Satz Zielelemente ist der Satz aller Elemente, die bei einem Layoutübergang möglicherweise verschoben wurden. Dieser Satz schließt: - Elemente mit im Zustand animierten Layouteigenschaften - nebengeordnete Elemente im Satz - übergeordnete Elemente im Satz
             
            Nachfolgender Code überprüft diese Rechtecke sowohl vor als auch nach der Layoutänderung.
            </summary>
            <param name="control">Das Steuerelement, dessen Layout den Zustand ändert</param>
            <param name="layoutStoryboard">Das Storyboard, das die Layoutänderungen enthält</param>
            <param name="originalValueRecords">Frühere Werte aus früheren Zustandsnavigationen, die möglicherweise umgekehrt werden</param>
            <param name="movingElements">Der Satz Elemente, der derzeit in der Animation angezeigt wird, wenn ein Übergang der Zustandsänderung stattfindet</param>
            <returns>Der Satz aller Elemente, deren Layout geändert wurde</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetRectsOfTargets(System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Rufen Sie einen Satz Rechtecke für alle Elemente in der Zielliste ab.
            </summary>
            <param name="targets">Der zu berücksichtigende Satz Elemente</param>
            <param name="movingElements">Der Satz Elemente, der derzeit in der Animation angezeigt wird</param>
            <returns>Ein Verzeichnis, in dem Elemente den zugehörigen Rechtecken zuordnet sind</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetLayoutRect(System.Windows.FrameworkElement)">
            <summary>
            Ruft das Layoutrechteck eines Elements ab, indem der Layoutbereich abgerufen und anschließend berechnet wird, welcher Teil des Bereichs verwendet wird.
            </summary>
            <param name="element">Das Element, dessen Rechteck abgerufen werden soll</param>
            <returns>Das Layoutrechteck dieses Elements</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetOldOpacities(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Rufen Sie die Deckkraft der Elemente während der Zustandsänderung und nicht deren Sichtbarkeit ab, da sich der Zustand möglicherweise noch weiter ändert und der aktuelle Wert der eigentlich wichtige Wert ist.
            </summary>
            <param name="control">Das Steuerelement, dessen Zustand sich ändert</param>
            <param name="layoutStoryboard">Das Storyboard mit den Layouteigenschaften</param>
            <param name="originalValueRecords">Der Satz ursprünglicher Werte</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.SetLayoutStoryboardProperties(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord})">
            <summary>
            Überprüfen Sie das Layoutstoryboard, und legen Sie alle Eigenschaften fest. Verwenden Sie hierzu &quot;SetValue&quot;, sodass Sie &quot;UpdateLayout&quot; aufrufen können, ohne die Zeitachse mit Teilstrichen zu markieren, wodurch ein Rendering verursacht wird. Alle Werte, die überschrieben werden, werden in der Auflistung von &quot;OriginalValueRecords&quot; gespeichert, sodass sie später ersetzt werden können.
            </summary>
            <param name="control">Das Steuerelement, dessen Zustand sich ändert</param>
            <param name="layoutStoryboard">Das Storyboard, in dem die Layouteigenschaften gespeichert sind</param>
            <param name="originalValueRecords">Der Speicher mit den ursprünglichen Werten</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.WrapMovingElementsInCanvases(System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Windows.Rect},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Windows.Rect})">
            <summary>
            Hüllen Sie alle Elemente, die aufgrund der Layoutanimation verschoben werden, in Canvase, sodass sie die zugehörigen nebengeordneten Elemente nicht beeinflussen.
            </summary>
            <param name="movingElements">Der Satz Elemente, der verschoben wird</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.UnwrapMovingElementsFromCanvases(System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Entfernen Sie die Canvase um die Elemente, die aufgrund der Layoutanimation verschoben wurden.
            </summary>
            <param name="movingElements">Der Satz Elemente, der verschoben wurde</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CopyLayoutProperties(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Kopieren Sie die Layouteigenschaften aus dem Quellelement in das Zielelement, und löschen Sie sie im Quellelement.
            </summary>
            <param name="source">Die Quelle der Layouteigenschaften</param>
            <param name="target">Das Ziel der Layouteigenschaften</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CreateLayoutTransitionStoryboard(System.Windows.VisualTransition,System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Double})">
            <summary>
            Erstellen Sie das eigentliche Storyboard, das für die Animation des Übergangs verwendet wird. Verwenden Sie alle zuvor berechneten Ergebnisse.
            </summary>
            <param name="duration">Die Dauer der Animation</param>
            <param name="ease">Die bei der Animation zu verwendende Beschleunigungsfunktion</param>
            <param name="movingElements">Der Satz Elemente, der verschoben wird</param>
            <param name="oldOpacities">Die alte Deckkraft der Elemente, deren Sichtbarkeit geändert wird</param>
            <returns>Das Storyboard</returns>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord">
            <summary>
            &quot;OriginalValueRecord&quot; speichert den ursprünglichen Wert einer Eigenschaft, die in einen Zustand geändert wurde.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.FluidMoveScope">
            <summary>
            Dieser Aufzählungstyp gibt an, ob ein &quot;FluidMoveBehavior&quot; auf das Element, an das es angefügt wurde, oder auf die untergeordneten Elemente dieses Elements angewendet wird. &quot;Self&quot; ist nützlich, wenn sich ein Element auf besondere Weise verhalten soll. &quot;Children&quot; ist nützlich, wenn dasselbe Verhalten auf alle untergeordneten Elemente eines &quot;WrapPanel&quot; oder das &quot;ItemsHostPanel&quot; eines &quot;ItemsControl&quot; angewendet werden soll.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior">
            <summary>
            Verhalten, das ein Element (oder einen Satz Elemente) auf Layoutänderungen überwacht und das Element ggf. reibungslos an die neue Position verschiebt. Dieses Verhalten animiert nicht die Größe oder Sichtbarkeit eines Elements. Es animiert lediglich den Versatz dieses Elements innerhalb des zugehörigen übergeordneten Containers.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.DurationProperty">
            <summary>
            &quot;DependencyProperty&quot; für die Dauer der Verschiebung.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.AppliesToProperty">
            <summary>
            &quot;DependencyProperty&quot; für den Bereich des Verhaltens. Weitere Informationen finden Sie unter &quot;FluidMoveScope&quot;.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.IsActiveProperty">
            <summary>
            &quot;DependencyProperty&quot; für den aktiven Zustand des Verhaltens.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.Duration">
            <summary>
            Die Dauer der Verschiebung.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.AppliesTo">
            <summary>
            Gibt an, ob das Verhalten nur auf dieses Element oder auf alle untergeordneten Elemente des Elements angewendet wird (wenn das Element ein Panel ist).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.IsActive">
            <summary>
            Gibt an, ob das Verhalten derzeit aktiv ist.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.GoToStateAction">
            <summary>
            Eine Aktion, die, wenn sie aufgerufen wird, ein &quot;FrameworkElement&quot; in einen angegebenen &quot;VisualState&quot; übergehen lässt.
            </summary>
            <remarks>
            Wenn die &quot;TargetName&quot;-Eigenschaft gesetzt ist, versucht diese Aktion, den Zustand des Zielelements zu ändern. Wenn diese Eigenschaft nicht gesetzt ist, sucht die Aktion in der Elementstruktur nach einem anderen Ziel, das Zustände beschreibt. &quot;ControlTemplate&quot; und &quot;UserControl&quot; sind zwei häufig verwendete Möglichkeiten.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.GoToStateAction.OnTargetChanged(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Wird aufgerufen, wenn sich das Ziel ändert. Wenn die &quot;TargetName&quot;-Eigenschaft nicht gesetzt wird, weist diese Aktion ein benutzerdefiniertes Verhalten auf.
            </summary>
            <param name="oldTarget"></param>
            <param name="newTarget"></param>
            <exception cref="T:System.InvalidOperationException">Es wurde kein entsprechendes &quot;FrameworkElement&quot; mit Zuständen gefunden.</exception>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.GoToStateAction.Invoke(System.Object)">
            <summary>
            Diese Methode wird aufgerufen, wenn einige Kriterien erfüllt werden und die Aktion aufgerufen wird.
            </summary>
            <param name="parameter"></param>
            <exception cref="T:System.InvalidOperationException">Das Ziel konnte nicht in den angegebenen &quot;StateName&quot; geändert werden.</exception>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.GoToStateAction.UseTransitions">
            <summary>
            Gibt an, ob für den Übergang von einem Zustand in einen anderen ein &quot;VisualTransition&quot; verwendet wird.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.GoToStateAction.StateName">
            <summary>
            Der Name des &quot;VisualState&quot;.  
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Input.KeyTrigger">
            <summary>
            Ein Auslöser, der durch ein Tastaturereignis ausgelöst wird.  Er löst aus, wenn die Zieltaste und Zielzusatztasten erkannt werden.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.Key">
            <summary>
            Die Taste, die gedrückt werden muss, damit der Auslöser auslöst.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.Modifiers">
            <summary>
            Die Zusatztasten, die aktiv sein müssen, damit der Auslöser auslöst (standardmäßig sind keine Zusatztasten gedrückt).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.ActiveOnFocus">
            <summary>
            Wenn die Bedingung wahr ist, überwacht der Auslöser nur das zugehörige &quot;Source&quot;-Objekt des Auslösers, was bedeutet, dass dieses Element zum Auslösen den Fokus auf dem Auslöser haben muss. Wenn die Bedingung falsch ist, überwacht der Auslöser den Stamm, sodass alle nicht behandelten &quot;KeyDown&quot;- bzw. &quot;KeyUp&quot;-Meldungen abgefangen werden.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.FiredOn">
            <summary>
            Gibt an, ob das &quot;KeyDown&quot;- oder &quot;KeyUp&quot;-Ereignis überwacht wird.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction">
            <summary>
            Eine Aktion, die einen Prozess zum Öffnen einer Datei oder eines URIs startet. Bei Dateien startet diese Aktion das Standardprogramm für die angegebene Dateierweiterung. Eine URI wird in einem Webbrowser geöffnet.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction.Invoke(System.Object)">
            <summary>
            Diese Methode wird aufgerufen, wenn einige Kriterien erfüllt werden und die Aktion aufgerufen wird.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction.Path">
            <summary>
            Die zu öffnende Datei oder der zu öffnende URI. 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior">
            <summary>
            Ändert die Position des angefügten Elements als Reaktion auf das Ziehen der Maus auf einem Element.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.XProperty">
            <summary>
            &quot;DependencyProperty&quot; für die X-Position des gezogenen Elements relativ zum linken Rand des Stammelements.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.YProperty">
            <summary>
            &quot;DependencyProperty&quot; für die Y-Position des gezogenen Elements relativ zum oberen Rand des Stammelements.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ConstrainToParentBoundsProperty">
            <summary>
            &quot;DependencyProperty&quot; für die Eigenschaft &quot;ConstrainToParentBounds&quot;. Wenn die Bedingung wahr ist, muss das gezogene Element innerhalb der Begrenzungen des übergeordneten Containers verbleiben.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.UpdatePosition(System.Windows.Point)">
            <summary>
            Versucht, die Position des zugeordneten Elements auf die festgelegten Koordinaten zu aktualisieren.
            </summary>
            <param name="point">Die gewünschte Position des Elements in Stammkoordinaten.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ApplyTranslation(System.Double,System.Double)">
            <summary>
            Wendet eine relative Positionstranslation auf das zugeordnete Element an.
            </summary>
            <param name="x">Die X-Komponente der gewünschten Translation in Stammkoordinaten.</param>
            <param name="y">Die Y-Komponente der gewünschten Translation in Stammkoordinaten.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ApplyTranslationTransform(System.Double,System.Double)">
            <summary>
            Wendet die angegebene Translation auf das &quot;RenderTransform&quot;-Element des zugeordneten Elements an.
            </summary>
            <param name="x">Die X-Komponente der Translation in übergeordnete Koordinaten.</param>
            <param name="y">Die Y-Komponente der Translation in übergeordnete Koordinaten.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.UpdatePosition">
            <summary>
            Aktualisiert die X- und Y-Eigenschaften basierend auf der aktuellen gerenderten Position des zugeordneten Elements.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.IsValidConstrainedMove(System.Windows.Point)">
            <summary>
            Bestimmt, ob die angegebene Cursorposition als Teil des Ziehvorgangs zählt.
            </summary>
            <param name="currentPosition">Die Cursorposition.</param>
            <returns>
            	<c>true</c>, falls die angegebene Cursorposition als Teil des Ziehvorgangs zählt, andernfalls <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.RectContainsRect(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Überprüfen Sie, ob ein Rechteck in einem anderen enthalten ist.
            </summary>
            <param name="rect1">Das Rechteck, das ein anderes Rechteck enthält.</param>
            <param name="rect2">Das Rechteck, das in einem anderen Rechteck enthalten ist.</param>
            <returns><c>true</c>, falls Rechteck1 Rechteck2 enthält, andernfalls <c>false</c></returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.TransformAsVector(System.Windows.Media.GeneralTransform,System.Double,System.Double)">
            <summary>
            Transformiert als Vektor.
            </summary>
            <param name="transform">Die Transformation.</param>
            <param name="x">Die X-Komponente des Vektors.</param>
            <param name="y">Die Y-Komponente des Vektors.</param>
            <returns>Ein Punkt, der die als Vektor transformierten X- und Y-Werte enthält.</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.GetTransformOffset(System.Windows.Media.GeneralTransform)">
            <summary>
            Ruft den Versatz der Transformation ab.
            </summary>
            <param name="transform">Die Transformation.</param>
            <returns>Der Versatz der Transformation.</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.OnAttached">
            <summary>
            Wird nach dem Anfügen des Verhaltens an das AssociatedObject aufgerufen.
            </summary>
            <remarks>Setzen Sie dies außer Kraft, um die Funktionalität in das AssociatedObject einzubinden.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.OnDetaching">
            <summary>
            Wird aufgerufen, wenn das Verhalten vom AssociatedObject getrennt wird. Der Aufruf erfolgt vor dem eigentlichen Trennvorgang.
            </summary>
            <remarks>Setzen Sie dies außer Kraft, um die Bindung der Funktionalität zum AssociatedObject zu lösen.</remarks>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.DragBegun">
            <summary>
            Tritt auf, wenn eine Ziehgeste initiiert wird.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.Dragging">
            <summary>
            Tritt auf, wenn eine Ziehgestenaktualisierung verarbeitet wird.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.DragFinished">
            <summary>
            Tritt auf, wenn eine Ziehgeste beendet wird.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.X">
            <summary>
            Ruft die X-Position des gezogenen Elements relativ zum linken Rand des Stammelements ab, oder legt diese fest. Hierbei handelt es sich um eine Abhängigkeitseigenschaft.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.Y">
            <summary>
            Ruft die Y-Position des gezogenen Elements relativ zum oberen Rand des Stammelements ab, oder legt diese fest. Hierbei handelt es sich um eine Abhängigkeitseigenschaft.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ConstrainToParentBounds">
            <summary>
            Ruft einen Wert ab oder legt einen Wert fest, der angibt, ob das gezogene Element innerhalb der Begrenzungen des übergeordneten Containers verbleiben muss. Hierbei handelt es sich um eine Abhängigkeitseigenschaft.
            </summary>
            <value>
            	<c>true</c>, falls das gezogene Element innerhalb der Begrenzungen des übergeordneten Containers verbleiben muss, andernfalls <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ActualPosition">
            <summary>
            Ruft die Bildschirmposition des zugeordneten Elements in Stammkoordinaten ab.
            </summary>
            <value>Die Bildschirmposition des zugeordneten Elements in Stammkoordinaten.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ElementBounds">
            <summary>
            Ruft den Bereich des Elements in Elementkoordinaten ab.
            </summary>
            <value>Der Bereich des Elements in Elementkoordinaten.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ParentElement">
            <summary>
            Ruft das übergeordnete Element des zugeordneten Objekts ab.
            </summary>
            <value>Das übergeordnete Element des zugeordneten Objekts.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.RootElement">
            <summary>
            Ruft das Stammelement der Szene ab, in der sich das zugeordnete Objekt befindet.
            </summary>
            <value>Das Stammelement der Szene, in der sich das zugeordnete Objekt befindet.</value>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.PlaySoundAction">
            <summary>
            Eine Aktion, die bei Abschluss einen Ton wiedergibt.
            </summary>
            <remarks>
            Diese Aktion soll mit kurzen Soundeffekten verwendet werden, die nicht beendet oder kontrolliert werden müssen. Wenn Sie einen Musik-Player oder ein Spiel erstellen, entspricht dies möglicherweise nicht Ihren Anforderungen.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.#ctor">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:Microsoft.Expression.Interactivity.Media.PlaySoundAction"/>-Klasse.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.SetMediaElementProperties(System.Windows.Controls.MediaElement)">
            <summary>
            Wenn die Aktion aufgerufen wird, wird mithilfe dieser Methode das dynamisch erstellte &quot;MediaElement&quot; angepasst.
            </summary>
            <remarks>
            Diese Methode kann für Ersteller von Aktionen hilfreich sein, die &quot;PlaySoundAction&quot; erweitern möchten. Wenn Sie die &quot;Balance&quot;-Eigenschaft von &quot;MediaElement&quot; kontrollieren möchten, können Sie diese von &quot;PlaySoundAction&quot; übernehmen und diese Methode außer Kraft setzen.
            </remarks>
            <param name="mediaElement"></param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Invoke(System.Object)">
            <summary>
            Diese Methode wird aufgerufen, wenn einige Kriterien erfüllt werden und die Aktion aufgerufen werden sollte. 
            </summary>
            <remarks>
            Bei jedem Aufruf der Aktion wird ein neuer Ton wiedergegeben.  Auch wenn sich die Implementierung ändern kann, sollte der Aufrufer damit rechnen, dass damit ein neues &quot;MediaElement&quot; erstellt wird, das gelöscht wird, wenn der Ton wiedergegeben wurde oder wenn bei der Wiedergabe des Mediums ein Fehler auftritt.
            </remarks>
            <param name="parameter"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Source">
            <summary>
            Ein URI, der den Speicherort der Sounddatei definiert.  Wird verwendet, um die &quot;Source&quot;-Eigenschaft von &quot;MediaElement&quot; festzulegen. Hierbei handelt es sich um eine Abhängigkeitseigenschaft.
            </summary>
            <remarks>
            Bei der Sounddatei kann es sich um ein beliebiges, von &quot;MediaElement&quot; unterstütztes Dateiformat handeln.  Bei einem Video wird nur der Audioteil wiedergegeben.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Volume">
            <summary>
            Regeln Sie die Tonlautstärke.  Wird verwendet, um die &quot;Volume&quot;-Eigenschaft von &quot;MediaElement&quot; festzulegen.  Hierbei handelt es sich um eine Abhängigkeitseigenschaft.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.RemoveElementAction">
            <summary>
            Eine Aktion, die, wenn sie aufgerufen wird, das Zielelement aus der Struktur entfernt.
            </summary>
            <remarks>
            Bei dieser Aktion kann ein Fehler auftreten. Mit dieser Aktion können Elemente aus häufig verwendeten, übergeordneten Elementen, jedoch nicht aus benutzerdefinierten Auflistungen oder aus einer direkten Bearbeitung der sichtbaren Struktur entfernt werden.
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardAction">
            <summary>
            Eine abstrakte Klasse, die die Auswahl eines Storyboards als Ziel ermöglicht.
            </summary>
            <remarks>
            Diese Klasse stellt für Ersteller von Aktionen eine Standardmethode für die Auswahl eines Storyboards als Ziel bereit.  In Designtools können spezielle Bearbeitungsoptionen für Klassen, die von dieser Aktion erben, bereitgestellt und somit die Benutzerfreundlichkeit verbessert werden. 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardAction.OnStoryboardChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Diese Methode wird aufgerufen, wenn sich die &quot;Storyboard&quot;-Eigenschaft ändert.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.StoryboardAction.Storyboard">
            <summary>
            Das Zielstoryboard.  Hierbei handelt es sich um eine Abhängigkeitseigenschaft.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.ControlStoryboardAction">
            <summary>
            Eine Aktion, die, wenn sie aufgerufen wird, den Zustand des Zielstoryboards ändert.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.ControlStoryboardAction.Invoke(System.Object)">
            <summary>
            Diese Methode wird aufgerufen, wenn einige Kriterien erfüllt werden und die Aktion aufgerufen werden sollte. Mit dieser Methode wird das Zielstoryboard so geändert, wie durch die &quot;ControlStoryboardOption&quot; festgelegt.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardTrigger">
            <summary>
            Eine abstrakte Klasse, die die Auswahl eines Storyboards als Ziel ermöglicht.
            </summary>
            <remarks>
            Diese Klasse stellt für Ersteller von Auslösern eine Standardmethode für die Auswahl eines Storyboards als Ziel bereit.  In Designtools können spezielle Bearbeitungsoptionen für Klassen, die von diesem Auslöser erben, bereitgestellt und somit die Benutzerfreundlichkeit verbessert werden. 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardTrigger.OnStoryboardChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Diese Methode wird aufgerufen, wenn sich die &quot;Storyboard&quot;-Eigenschaft ändert.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.StoryboardTrigger.Storyboard">
            <summary>
            Das Zielstoryboard.  Hierbei handelt es sich um eine Abhängigkeitseigenschaft.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger">
            <summary>
            Ein Auslöser, der die Ausführung eines Storyboards überwacht.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger.#ctor">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger"/>-Klasse.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.TimerTrigger">
            <summary>
            Ein Auslöser, der durch ein angegebenes Ereignis in der zugehörigen Quelle ausgelöst wird und nach dem Auslösen dieses Ereignisses mit einer Verzögerung auslöst.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.TimerTrigger.#ctor">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:Microsoft.Expression.Interactivity.Core.TimerTrigger"/>-Klasse.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.TimerTrigger.MillisecondsPerTick">
            <summary>
            Ruft die Anzahl an Millisekunden zwischen zwei Teilstrichen ab, oder legt sie fest. Hierbei handelt es sich um eine Abhängigkeitseigenschaft.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.TimerTrigger.TotalTicks">
            <summary>
            Ruft die Gesamtzahl der Teilstriche ab, die ausgelöst werden müssen, bevor der Auslöser abgeschlossen ist, oder legt sie fest.  Hierbei handelt es sich um eine Abhängigkeitseigenschaft.
            </summary>
        </member>
        <member name="T:ExceptionStringTable">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Nachschlagen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte &quot;ResourceManager&quot;-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.Culture">
            <summary>
              Setzt mithilfe dieser stark typisierten Ressourcenklasse die &quot;CurrentUICulture&quot;-Eigenschaft des aktuellen Threads für alle Ressourcensuchen außer Kraft.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotFindPropertyNameExceptionMessage">
            <summary>
              Sucht nach einer lokalisierten Zeichenfolge, die der folgenden Zeichenfolge ähnelt: &quot;In Typ &quot;{1}&quot; wurde keine Eigenschaft mit dem Namen &quot;{0}&quot; gefunden.&quot;
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotSetValueExceptionMessage">
            <summary>
              Sucht nach einer lokalisierten Zeichenfolge, die der folgenden Zeichenfolge ähnelt: &quot;Der Wert vom Typ &quot;{0}&quot; konnte der Eigenschaft &quot;{1}&quot; vom Typ &quot;{2}&quot; nicht zugewiesen werden. Die &quot;{1}&quot;-Eigenschaft kann nur Werten vom Typ &quot;{2}&quot; zugewiesen werden.&quot;
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionPropertyIsReadOnlyExceptionMessage">
            <summary>
              Sucht nach einer lokalisierten Zeichenfolge, die der folgenden Zeichenfolge ähnelt: &quot;Die durch Typ &quot;{1}&quot; definierte Eigenschaft &quot;{0}&quot; stellt keine &quot;Set&quot;-Methode bereit und kann daher nicht bearbeitet werden&quot;.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.GoToStateActionStateChangeFailed">
            <summary>
              Sucht nach einer lokalisierten Zeichenfolge, die der folgenden Zeichenfolge ähnelt: &quot;Zustand von Ziel {0} konnte nicht in {1} geändert werden.&quot;
            </summary>
        </member>
        <member name="P:ExceptionStringTable.GoToStateActionTargetHasNoStateGroups">
            <summary>
              Sucht nach einer lokalisierten Zeichenfolge, die der folgenden Zeichenfolge ähnelt: &quot;Ziel {0} definiert keine &quot;VisualStateGroups&quot;.&quot; .
            </summary>
        </member>
        <member name="P:ExceptionStringTable.UnsupportedRemoveTargetExceptionMessage">
            <summary>
              Sucht nach einer lokalisierten Zeichenfolge, die der folgenden Zeichenfolge ähnelt: &quot;Das Ziel der &quot;RemoveElementAction&quot; wird nicht unterstützt.&quot;
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\de\System.Windows.Interactivity.xml ===
﻿<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Interactivity</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Interactivity.AttachableCollection`1">
            <summary>
            Stellt eine Auflistung von IAttachedObject-Elementen mit einem freigegebenen AssociatedObject dar und stellt bei Änderungen am AssociatedObject Änderungsbenachrichtigungen für den dazugehörenden Inhalt bereit.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.IAttachedObject">
            <summary>
            Eine Schnittstelle für ein Objekt, das an ein anderes Objekt angefügt werden kann.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.IAttachedObject.Attach(System.Windows.DependencyObject)">
            <summary>
            Wird an das angegebene Objekt angefügt.
            </summary>
            <param name="dependencyObject">Das Objekt, an das angefügt wird.</param>
        </member>
        <member name="M:System.Windows.Interactivity.IAttachedObject.Detach">
            <summary>
            Trennt diese Instanz von dem zugeordneten Objekt.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.IAttachedObject.AssociatedObject">
            <summary>
            Ruft das zugeordnete Objekt ab.
            </summary>
            <value>Das zugeordnete Objekt.</value>
            <remarks>Stellt das Objekt dar, dem diese Instanz zugeordnet ist.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.#ctor">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:System.Windows.Interactivity.AttachableCollection`1"/>-Klasse.
            </summary>
            <remarks>Intern, da dies nicht außerhalb der Assembly vererbt werden darf.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.OnAttached">
            <summary>
            Wird sofort nach dem Anfügen der Auflistung an das AssociatedObject aufgerufen.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.OnDetaching">
            <summary>
            Wird aufgerufen, wenn die Auflistung vom dazugehörenden AssociatedObject getrennt wird. Der Aufruf erfolgt vor dem eigentlichen Trennvorgang.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.ItemAdded(`0)">
            <summary>
            Wird aufgerufen, wenn ein neues Element der Auflistung hinzugefügt wird.
            </summary>
            <param name="item">Das neue Element.</param>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.ItemRemoved(`0)">
            <summary>
            Wird aufgerufen, wenn ein Element aus der Auflistung entfernt wird.
            </summary>
            <param name="item">Das entfernte Element.</param>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.VerifyAdd(`0)">
            <exception cref="T:System.InvalidOperationException">Instanz kann der Auflistung nicht mehrmals hinzugefügt werden.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.Attach(System.Windows.DependencyObject)">
            <summary>
            Wird an das angegebene Objekt angefügt.
            </summary>
            <param name="dependencyObject">Das Objekt, an das angefügt wird.</param>
            <exception cref="T:System.InvalidOperationException">Das IAttachedObject wurde bereits einem anderen Objekt angefügt.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.Detach">
            <summary>
            Trennt diese Instanz von dem zugeordneten Objekt.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.AttachableCollection`1.AssociatedObject">
            <summary>
            Das Objekt, auf dem die Auflistung gehostet wird.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.AttachableCollection`1.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Ruft das zugeordnete Objekt ab.
            </summary>
            <value>Das zugeordnete Objekt.</value>
        </member>
        <member name="T:System.Windows.Interactivity.Behavior`1">
            <summary>
            Kapselt Zustandsinformationen und ggf. auch ICommands in einem anfügbaren Objekt.
            </summary>
            <typeparam name="T">Der Typ, dem <see cref="T:System.Windows.Interactivity.Behavior`1"/> angefügt werden kann.</typeparam>
            <remarks>
            	Verhalten ist die Basisklasse für die Bereitstellung eines anfügbaren Zustands und anfügbarer Befehle für ein Objekt. Die Typen, denen das Verhalten angefügt werden kann, können über die allgemeinen Parameter gesteuert werden. Setzen Sie die Methoden &quot;OnAttached()&quot; und &quot;OnDetaching()&quot; außer Kraft, um die erforderlichen Handler in das AssociatedObject einzubinden bzw. deren Bindung zu lösen.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.Behavior">
            <summary>
            Kapselt Zustandsinformationen und ggf. auch ICommands in einem anfügbaren Objekt.
            </summary>
            <remarks>Dies ist eine Infrastrukturklasse. Ersteller von Verhalten sollten vom Verhalten&lt;T&gt; statt von dieser Klasse abgeleitet werden.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.OnAttached">
            <summary>
            Wird nach dem Anfügen des Verhaltens an das AssociatedObject aufgerufen.
            </summary>
            <remarks>Setzen Sie dies außer Kraft, um die Funktionalität in das AssociatedObject einzubinden.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.OnDetaching">
            <summary>
            Wird aufgerufen, wenn das Verhalten vom AssociatedObject getrennt wird. Der Aufruf erfolgt vor dem eigentlichen Trennvorgang.
            </summary>
            <remarks>Setzen Sie dies außer Kraft, um die Bindung der Funktionalität zum AssociatedObject zu lösen.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.Attach(System.Windows.DependencyObject)">
            <summary>
            Wird an das angegebene Objekt angefügt.
            </summary>
            <param name="dependencyObject">Das Objekt, an das angefügt wird.</param>
            <exception cref="T:System.InvalidOperationException">Das Verhalten wird bereits auf einem anderen Element gehostet.</exception>
            <exception cref="T:System.InvalidOperationException">Das dependencyObject erfüllt nicht die Verhaltenstypeinschränkung.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.Detach">
            <summary>
            Trennt diese Instanz von dem zugeordneten Objekt.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.AssociatedType">
            <summary>
            Der Typ, dem dieses Verhalten angefügt werden kann.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.AssociatedObject">
            <summary>
            Ruft das Objekt ab, dem dieses Verhalten angefügt wurde.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Ruft das zugeordnete Objekt ab.
            </summary>
            <value>Das zugeordnete Objekt.</value>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior`1.#ctor">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:System.Windows.Interactivity.Behavior`1"/>-Klasse.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior`1.AssociatedObject">
            <summary>
            Ruft das Objekt ab, dem dieses <see cref="T:System.Windows.Interactivity.Behavior`1"/> angefügt wurde.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.BehaviorCollection">
            <summary>
            Stellt eine Auflistung von Verhalten mit einem freigegebenen AssociatedObject dar und stellt bei Änderungen am AssociatedObject Änderungsbenachrichtigungen für den dazugehörenden Inhalt bereit.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.#ctor">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:System.Windows.Interactivity.BehaviorCollection"/>-Klasse.
            </summary>
            <remarks>Intern, da dies nicht außerhalb der Assembly vererbt werden darf.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.OnAttached">
            <summary>
            Wird sofort nach dem Anfügen der Auflistung an das AssociatedObject aufgerufen.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.OnDetaching">
            <summary>
            Wird aufgerufen, wenn die Auflistung vom dazugehörenden AssociatedObject getrennt wird. Der Aufruf erfolgt vor dem eigentlichen Trennvorgang.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.ItemAdded(System.Windows.Interactivity.Behavior)">
            <summary>
            Wird aufgerufen, wenn ein neues Element der Auflistung hinzugefügt wird.
            </summary>
            <param name="item">Das neue Element.</param>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.ItemRemoved(System.Windows.Interactivity.Behavior)">
            <summary>
            Wird aufgerufen, wenn ein Element aus der Auflistung entfernt wird.
            </summary>
            <param name="item">Das entfernte Element.</param>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.CreateInstanceCore">
            <summary>
            Erstellt eine neue Instanz der BehaviorCollection.
            </summary>
            <returns>Die neue Instanz.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.CustomPropertyValueEditor">
            <summary>
            Listet mögliche Werte für wiederverwendbare Eigenschaftswert-Editoren auf.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.Element">
            <summary>
            Verwendet die Elementauswahl (falls diese unterstützt wird), um diese Eigenschaft in der Designphase zu bearbeiten.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.Storyboard">
            <summary>
            Verwendet die Storyboardauswahl (falls diese unterstützt wird), um diese Eigenschaft in der Designphase zu bearbeiten.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.StateName">
            <summary>
            Verwendet die Zustandsauswahl (falls diese unterstützt wird), um diese Eigenschaft in der Designphase zu bearbeiten.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.CustomPropertyValueEditorAttribute">
            <summary>
            Ordnet den angegebenen Editortyp der Eigenschaft zu, auf die der CustomPropertyValueEditor angewendet wird.
            </summary>
            <remarks>Verwenden Sie dieses Attribut, um die Bearbeitung von Eigenschaften, die Element (über den Namen), Storyboards oder Zustände (über den Namen) kennzeichnen, in der Designphase zu verbessern.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.CustomPropertyValueEditorAttribute.#ctor(System.Windows.Interactivity.CustomPropertyValueEditor)">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:System.Windows.Interactivity.CustomPropertyValueEditorAttribute"/>-Klasse.
            </summary>
            <param name="customPropertyValueEditor">Der Editor für benutzerdefinierte Eigenschaftswerte.</param>
        </member>
        <member name="P:System.Windows.Interactivity.CustomPropertyValueEditorAttribute.CustomPropertyValueEditor">
            <summary>
            Ruft den Editor für benutzerdefinierte Eigenschaftswerte ab, oder legt ihn fest.
            </summary>
            <value>Der Editor für benutzerdefinierte Eigenschaftswerte.</value>
        </member>
        <member name="T:System.Windows.Interactivity.DefaultTriggerAttribute">
            <summary>
            Stellt Designtoolsinformationen darüber bereit, welche <see cref="T:System.Windows.Interactivity.TriggerBase"/> für die angegebene Aktion oder den Befehl instanziiert werden muss.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.#ctor(System.Type,System.Type,System.Object)">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:System.Windows.Interactivity.DefaultTriggerAttribute"/>-Klasse.
            </summary>
            <param name="targetType">Der Typ, auf den dieses Attribut angewendet wird.</param>
            <param name="triggerType">Der Typ der zu instanziierenden <see cref="T:System.Windows.Interactivity.TriggerBase"/>.</param>
            <param name="parameters">Ein einzelnes Argument für die angegebene <see cref="T:System.Windows.Interactivity.TriggerBase"/>.</param>
            <exception cref="T:System.ArgumentException"><c cref="F:System.Windows.Interactivity.DefaultTriggerAttribute.triggerType"/> ist nicht von TriggerBase abgeleitet.</exception>
            <remarks>Dieser Konstruktor ist nützlich, wenn die angegebene <see cref="T:System.Windows.Interactivity.TriggerBase"/> ein einzelnes Argument hat. Der resultierende Code ist CLS-kompatibel.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.#ctor(System.Type,System.Type,System.Object[])">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:System.Windows.Interactivity.DefaultTriggerAttribute"/>-Klasse.
            </summary>
            <param name="targetType">Der Typ, auf den dieses Attribut angewendet wird.</param>
            <param name="triggerType">Der Typ der zu instanziierenden <see cref="T:System.Windows.Interactivity.TriggerBase"/>.</param>
            <param name="parameters">Die Konstruktorargumente für die angegebene <see cref="T:System.Windows.Interactivity.TriggerBase"/>.</param>
            <exception cref="T:System.ArgumentException"><c cref="F:System.Windows.Interactivity.DefaultTriggerAttribute.triggerType"/> ist nicht von TriggerBase abgeleitet.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.Instantiate">
            <summary>
            Instanziiert diese Instanz.
            </summary>
            <returns>Die vom DefaultTriggerAttribute angegebene <see cref="T:System.Windows.Interactivity.TriggerBase"/>.</returns>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.TargetType">
            <summary>
            Ruft den Typ ab, auf den dieses DefaultTriggerAttribute angewendet wird.
            </summary>
            <value>Der Typ, auf den dieses DefaultTriggerAttribute angewendet wird.</value>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.TriggerType">
            <summary>
            Ruft den Typ der zu instanziierenden <see cref="T:System.Windows.Interactivity.TriggerBase"/> ab.
            </summary>
            <value>Der Typ der zu instanziierenden <see cref="T:System.Windows.Interactivity.TriggerBase"/>.</value>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.Parameters">
            <summary>
            Ruft die Parameter ab, die an den <see cref="T:System.Windows.Interactivity.TriggerBase"/>-Konstruktor übergeben werden.
            </summary>
            <value>Die Parameter, die an den <see cref="T:System.Windows.Interactivity.TriggerBase"/>-Konstruktor übergeben werden.</value>
        </member>
        <member name="T:System.Windows.Interactivity.EventTrigger">
            <summary>
            Ein Auslöser, der ein angegebenes Ereignis in der zugehörigen Quelle überwacht und nach dem Auslösen dieses Ereignisses auslöst.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.EventTriggerBase`1">
            <summary>
            Stellt einen Auslöser dar, der ein anderes Element als sein AssociatedObject überwachen kann.
            </summary>
            <typeparam name="T">Der Typ, dem dieser Auslöser zugeordnet werden kann.</typeparam>
            <remarks>
            	EventTriggerBase erweitert TriggerBase, indem sie Kenntnisse über ein anderes Element als das Element, dem sie angefügt wurde, hinzufügt. Dies ermöglicht es einem Benutzer, ein Auslöser/Aktion-Paar einem Element anzufügen und die Aktion als Antwort auf eine Änderung an einem anderen Element an anderer Stelle aufzurufen. Setzen Sie &quot;OnSourceChanged&quot; außer Kraft, um Handler in ein Quellelement einzubinden oder deren Bindung zu lösen, und setzen Sie &quot;OnAttached/OnDetaching&quot; für das zugeordnete Element außer Kraft. Der Typ des Quellelements kann durch den Parameter &quot;Generischer Typ&quot; eingeschränkt werden. Wenn Sie Kontrolle über den Typ des AssociatedObject benötigen, legen Sie ein TypeConstraintAttribute für Ihren abgeleiteten Typ fest.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.EventTriggerBase">
            <summary>
            Stellt einen Auslöser dar, der ein anderes Element als sein AssociatedObject überwachen kann.
            </summary>
            <remarks>Dies ist eine Infrastrukturklasse. Ersteller von Auslösern sollten von der EventTriggerBase&lt;T&gt; statt von dieser Klasse abgeleitet werden.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerBase">
            <summary>
            Stellt ein Objekt dar, das Aktionen unter Vorbehalt aufrufen kann.
            </summary>
            <remarks>Dies ist eine Infrastrukturklasse. Ersteller von Auslösern sollten vom Auslöser&lt;T&gt; statt von dieser Klasse abgeleitet werden.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.InvokeActions(System.Object)">
            <summary>
            Ruft alle Aktionen auf, die diesem Auslöser zugeordnet sind.
            </summary>
            <remarks>Abgeleitete Klassen sollten dies aufrufen, um den Auslöser auszulösen.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.OnAttached">
            <summary>
            Wird nach dem Anfügen des Auslösers an das AssociatedObject aufgerufen.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.OnDetaching">
            <summary>
            Wird aufgerufen, wenn der Auslöser vom AssociatedObject getrennt wird. Der Aufruf erfolgt vor dem eigentlichen Trennvorgang.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.CreateInstanceCore">
            <summary>
            Erstellt eine neue Instanz der von TriggerBase abgeleiteten Klasse.
            </summary>
            <returns>Die neue Instanz.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.Attach(System.Windows.DependencyObject)">
            <summary>
            Wird an das angegebene Objekt angefügt.
            </summary>
            <param name="dependencyObject">Das Objekt, an das angefügt wird.</param>
            <exception cref="T:System.InvalidOperationException">Derselbe Auslöser kann nicht auf mehreren Objekten gleichzeitig gehostet werden.</exception>
            <exception cref="T:System.InvalidOperationException">Das dependencyObject erfüllt nicht die Auslösertypeinschränkung.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.Detach">
            <summary>
            Trennt diese Instanz von dem zugeordneten Objekt.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.AssociatedObject">
            <summary>
            Ruft das Objekt ab, dem dieser Auslöser angefügt wurde.
            </summary>
            <value>Das zugeordnete Objekt.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.AssociatedObjectTypeConstraint">
            <summary>
            Ruft die Typeinschränkung des zugeordneten Objekts ab.
            </summary>
            <value>Die Typeinschränkung des zugeordneten Objekts.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.Actions">
            <summary>
            Ruft alle Aktionen ab, die diesem Auslöser zugeordnet sind.
            </summary>
            <value>Die Aktionen, die diesem Auslöser zugeordnet sind.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Ruft das zugeordnete Objekt ab.
            </summary>
            <value>Das zugeordnete Objekt.</value>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.GetEventName">
            <summary>
            Legt den Namen des Ereignisses fest, das diese EventTriggerBase überwacht.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnEvent(System.EventArgs)">
            <summary>
            Wird aufgerufen, wenn das dieser EventTriggerBase zugeordnete Ereignis ausgelöst wird. Standardmäßig werden dabei alle Aktionen des Auslöser aufgerufen.
            </summary>
            <param name="eventArgs">Die <see cref="T:System.EventArgs"/>-Instanz, die die Ereignisdaten enthält.</param>
            <remarks>Setzen Sie dies außer Kraft, um eine genauere Steuerung dafür bereitzustellen, wann die diesem Auslöser zugeordneten Aktionen aufgerufen werden.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnSourceChangedImpl(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Wird aufgerufen, wenn sich die Quelle ändert.
            </summary>
            <param name="oldSource">Die alte Quelle.</param>
            <param name="newSource">Die neue Quelle.</param>
            <remarks>Diese Funktion sollte in abgeleiteten Klassen außer Kraft gesetzt werden, um Funktionalität in die sich ändernden Quellobjekte einzubinden bzw. die Bindung der Funktionalität zu den sich ändernden Quellobjekten zu lösen.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnAttached">
            <summary>
            Wird nach dem Anfügen des Auslösers an das AssociatedObject aufgerufen.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnDetaching">
            <summary>
            Wird aufgerufen, wenn der Auslöser vom AssociatedObject getrennt wird. Der Aufruf erfolgt vor dem eigentlichen Trennvorgang.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.RegisterEvent(System.Object,System.String)">
            <exception cref="T:System.ArgumentException">eventName konnte nicht am Ziel gefunden werden.</exception>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.AssociatedObjectTypeConstraint">
            <summary>
            Ruft die Typeinschränkung des zugeordneten Objekts ab.
            </summary>
            <value>Die Typeinschränkung des zugeordneten Objekts.</value>
            <remarks>Definieren Sie ein TypeConstraintAttribute für einen abgeleiteten Typ, um die Typen einzuschränken, den dieses angefügt werden kann.</remarks>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.SourceTypeConstraint">
            <summary>
            Ruft die Quelltypeinschränkung ab.
            </summary>
            <value>Ruft die Quelltypeinschränkung ab.</value>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.SourceName">
            <summary>
            Ruft den Namen des Elements ab, das diese EventTriggerBase als Quelle überwacht, oder legt ihn fest. Ist der Name nicht festgelegt oder kann er nicht aufgelöst werden, wird das AssociatedObject verwendet.  Hierbei handelt es sich um eine Abhängigkeitseigenschaft.
            </summary>
            <value>Der Name des Quellelements.</value>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.Source">
            <summary>
            Ruft die aufgelöste Quelle ab. Ist der <c ref="SourceName"/> nicht festgelegt oder kann dieser nicht aufgelöst werden, wird das AssociatedObject standardmäßig verwendet.
            </summary>
            <value>Das aufgelöste Quellobjekt.</value>
            <remarks>Im Allgemeinen sollte diese Eigenschaft anstelle des AssociatedObject in abgeleiteten Klassen verwendet werden.</remarks>
            <exception cref="T:System.InvalidOperationException">Das Element, auf das <c cref="P:System.Windows.Interactivity.EventTriggerBase.Source"/> verweist, erfüllt nicht die Typeinschränkungen.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase`1.#ctor">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:System.Windows.Interactivity.EventTriggerBase`1"/>-Klasse.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase`1.OnSourceChanged(`0,`0)">
            <summary>
            Wird aufgerufen, wenn sich die Quelleigenschaft ändert.
            </summary>
            <remarks>Setzen Sie dies außer Kraft, um Funktionalität in die angegebene Quelle statt in das AssociatedObject einzubinden bzw. die Bindung der Funktionalität zur angegebenen Quelle zu lösen.</remarks>
            <param name="oldSource">Die alte Quelle.</param>
            <param name="newSource">Die neue Quelle.</param>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase`1.Source">
            <summary>
            Ruft die aufgelöste Quelle ab. Ist der <c ref="SourceName"/> nicht festgelegt oder dieser nicht aufgelöst werden, wird das AssociatedObject standardmäßig verwendet.
            </summary>
            <value>Das aufgelöste Quellobjekt.</value>
            <remarks>Im Allgemeinen sollte diese Eigenschaft anstelle des AssociatedObject in abgeleiteten Klassen verwendet werden.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTrigger.#ctor">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:System.Windows.Interactivity.EventTrigger"/>-Klasse.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTrigger.#ctor(System.String)">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:System.Windows.Interactivity.EventTrigger"/>-Klasse.
            </summary>
            <param name="eventName">Name des Ereignisses.</param>
        </member>
        <member name="P:System.Windows.Interactivity.EventTrigger.EventName">
            <summary>
            Ruft den Namen des zu überwachenden Ereignisses ab, oder legt ihn fest. Hierbei handelt es sich um eine Abhängigkeitseigenschaft.
            </summary>
            <value>Der Name des Ereignisses.</value>
        </member>
        <member name="T:System.Windows.Interactivity.Interaction">
            <summary>
            Statische Klasse, die den Auslösern und Verhalten angefügte Eigenschaften besitzt. Handhabt die Propagierung von Benachrichtigungen bezüglich der Änderungen am AssociatedObject.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.Interaction.TriggersProperty">
            <summary>
            Diese Eigenschaft wird als interner Sicherungsspeicher für die Eigenschaft verwendet, die den öffentlichen Auslösern angefügt ist.
            </summary>
            <remarks>
            Diese Eigenschaft ist nicht öffentlich zugänglich. Dies zwingt Clients, die Methoden &quot;GetTriggers&quot; und &quot;SetTriggers&quot; zum Zugriff auf die Auflistung zu verwenden, und stellt so sicher, dass die Auflistung vorhanden ist und festgelegt wurde, bevor sie verwendet wird.
            </remarks>
        </member>
        <member name="F:System.Windows.Interactivity.Interaction.BehaviorsProperty">
            <summary>
            Diese Eigenschaft wird als interner Sicherungsspeicher für die Eigenschaft verwendet, die den öffentlichen Verhalten angefügt ist.
            </summary>
            <remarks>
            Diese Eigenschaft ist nicht öffentlich zugänglich. Dies zwingt Clients, die Methoden &quot;GetBehaviors&quot; und &quot;SetBehaviors&quot; zum Zugriff auf die Auflistung zu verwenden, und stellt so sicher, dass die Auflistung vorhanden ist und festgelegt wurde, bevor sie verwendet wird.
            </remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.GetTriggers(System.Windows.DependencyObject)">
            <summary>
            Ruft die TriggerCollection ab, die die Auslöser enthält, die dem angegebenen Objekt zugeordnet wurden.
            </summary>
            <param name="obj">Das Objekt, von dem die Auslöser abgerufen werden.</param>
            <returns>Eine TriggerCollection, die die Auslöser enthält, die dem angegebenen Objekt zugeordnet sind.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.GetBehaviors(System.Windows.DependencyObject)">
            <summary>
            Ruft die <see cref="T:System.Windows.Interactivity.BehaviorCollection"/> ab, die dem angegebenen Objekt zugeordnet ist.
            </summary>
            <param name="obj">Das Objekt, von dem die <see cref="T:System.Windows.Interactivity.BehaviorCollection"/> abgerufen wird.</param>
            <returns>Eine <see cref="T:System.Windows.Interactivity.BehaviorCollection"/>, die die Verhalten enthält, die dem angegebenen Objekt zugeordnet sind.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.OnBehaviorsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <exception cref="T:System.InvalidOperationException">Dieselbe BehaviorCollection kann nicht auf mehreren Objekten gleichzeitig gehostet werden.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.OnTriggersChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <exception cref="T:System.InvalidOperationException">Dieselbe TriggerCollection kann nicht auf mehreren Objekten gleichzeitig gehostet werden.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.IsElementLoaded(System.Windows.FrameworkElement)">
            <summary>
            Eine Helferfunktion, die FrameworkElement.IsLoaded ersetzt, da Silverlight keine Eigenschaft dieser Art aufweist.
            </summary>
            <param name="element">Das betreffende Element.</param>
            <returns>&quot;true&quot;, wenn das Element geladen wurde, andernfalls &quot;false&quot;.</returns>
        </member>
        <member name="P:System.Windows.Interactivity.Interaction.ShouldRunInDesignMode">
            <summary>
            Ruft einen Wert ab bzw. legt einen Wert fest, der angibt, ob die Ausführung im Designmodus erfolgen soll.
            </summary>
            <value>
            	<c>true</c>, falls die Ausführung im Designmodus erfolgt, andernfalls <c>false</c>.
            </value>
            <remarks>Nicht außerhalb der Einheitstests zu verwenden.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.InvokeCommandAction">
            <summary>
            Führt bei Aufruf eine festgelegte Aktion auf dem Hostverhalten aus.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerAction`1">
            <summary>
            Stellt ein anhängbares Objekt dar, das eine Funktionalitätseinheit kapselt.
            </summary>
            <typeparam name="T">Der Typ, dem diese Aktion angefügt werden kann.</typeparam>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerAction">
            <summary>
            Stellt ein anhängbares Objekt dar, das eine Funktionalitätseinheit kapselt.
            </summary>
            <remarks>Dies ist eine Infrastrukturklasse. Ersteller von Aktionen sollten von der TriggerAction&lt;T&gt; statt von dieser Klasse abgeleitet werden.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.CallInvoke(System.Object)">
            <summary>
            Versucht, die Aktion aufzurufen.
            </summary>
            <param name="parameter">Der Parameter zur Aktion. Wenn die Aktion keinen Parameter erfordert, kann der Parameter auf einen Nullverweis gesetzt werden.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Invoke(System.Object)">
            <summary>
            Ruft die Aktion auf.
            </summary>
            <param name="parameter">Der Parameter zur Aktion. Wenn die Aktion keinen Parameter erfordert, kann der Parameter auf einen Nullverweis gesetzt werden.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.OnAttached">
            <summary>
            Wird nach dem Anfügen der Aktion an das AssociatedObject aufgerufen.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.OnDetaching">
            <summary>
            Wird aufgerufen, wenn die Aktion vom AssociatedObject getrennt wird. Der Aufruf erfolgt vor dem eigentlichen Trennvorgang.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.CreateInstanceCore">
            <summary>
            Erstellt bei Implementierung in eine abgeleitete Klasse eine neue Instanz der von <see cref="T:System.Windows.Freezable"/> abgeleiteten Klasse.
            </summary>
            <returns>Die neue Instanz.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Attach(System.Windows.DependencyObject)">
            <summary>
            Wird an das angegebene Objekt angefügt.
            </summary>
            <param name="dependencyObject">Das Objekt, an das angefügt wird.</param>
            <exception cref="T:System.InvalidOperationException">Dieselbe TriggerAction kann nicht auf mehreren Objekten gleichzeitig gehostet werden.</exception>
            <exception cref="T:System.InvalidOperationException">Das dependencyObject erfüllt nicht die TriggerAction-Typeinschränkung.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Detach">
            <summary>
            Trennt diese Instanz von dem zugeordneten Objekt.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.IsEnabled">
            <summary>
            Ruft einen Wert ab bzw. legt einen Wert fest, der angibt, ob diese Aktion beim Aufruf ausgeführt wird. Hierbei handelt es sich um eine Abhängigkeitseigenschaft.
            </summary>
            <value>
            	<c>true</c>, falls diese Aktion beim Aufruf ausgeführt wird, andernfalls <c>false</c>.
            </value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.AssociatedObject">
            <summary>
            Ruft das Objekt ab, dem diese Aktion angefügt wurde.
            </summary>
            <value>Das zugeordnete Objekt.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.AssociatedObjectTypeConstraint">
            <summary>
            Ruft die Typeinschränkung des zugeordneten Objekts ab.
            </summary>
            <value>Die Typeinschränkung des zugeordneten Objekts.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.IsHosted">
            <summary>
            Ruft einen Wert ab bzw. legt einen Wert fest, der angibt, ob diese Instanz angefügt wurde.
            </summary>
            <value><c>true</c>, falls diese Instanz angefügt wurde; andernfalls <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Ruft das zugeordnete Objekt ab.
            </summary>
            <value>Das zugeordnete Objekt.</value>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction`1.#ctor">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:System.Windows.Interactivity.TriggerAction`1"/>-Klasse.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject">
            <summary>
            Ruft das Objekt ab, dem diese <see cref="T:System.Windows.Interactivity.TriggerAction`1"/> angefügt wurde.
            </summary>
            <value>Das zugeordnete Objekt.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObjectTypeConstraint">
            <summary>
            Ruft die Typeinschränkung des zugeordneten Objekts ab.
            </summary>
            <value>Die Typeinschränkung des zugeordneten Objekts.</value>
        </member>
        <member name="M:System.Windows.Interactivity.InvokeCommandAction.Invoke(System.Object)">
            <summary>
            Ruft die Aktion auf.
            </summary>
            <param name="parameter">Der Parameter zur Aktion. Wenn die Aktion keinen Parameter erfordert, kann der Parameter auf einen Nullverweis gesetzt werden.</param>
        </member>
        <member name="M:System.Windows.Interactivity.InvokeCommandAction.OnAttached">
            <summary>
            Wird nach dem Anfügen der Auflistung an das AssociatedObject aufgerufen.
            </summary>
            <exception cref="T:System.InvalidOperationException">InvokeActionCommand muss auf einem Verhalten gehostet werden.</exception>
        </member>
        <member name="P:System.Windows.Interactivity.InvokeCommandAction.CommandName">
            <summary>
            Ruft den Namen des Befehls ab, den diese Aktion aufrufen soll, oder legt den Namen fest.
            </summary>
            <value>Der Name des Befehls, den diese Aktion aufrufen soll.</value>
        </member>
        <member name="P:System.Windows.Interactivity.InvokeCommandAction.CommandParameter">
            <summary>
            Ruft den Befehlsparameter ab, oder legt ihn fest.
            </summary>
            <value>Der Befehlsparameter.</value>
            <remarks>Dies ist der Wert, der an ICommand.CanExecute und ICommand.Execute übergeben wird.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.NameResolvedEventArgs">
            <summary>
            Stellt Daten dazu bereit, welche Objekte bei der Auflösung einer Namensänderung betroffen sind.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.NameResolver">
            <summary>
            Helferklasse zur Handhabung der Logik für die Auflösung eines TargetName in ein Zielelement basierend auf dem von einem Hostelement bereitgestellten Kontext.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.NameResolver.UpdateObjectFromName(System.Windows.DependencyObject)">
            <summary>
            Versucht, das aufgelöste Objekt über den Namen innerhalb des Kontexts des NameScope-Referenzelements zu aktualisieren.
            </summary>
            <param name="oldObject">Das alte aufgelöste Objekt.</param>
            <remarks>
            Setzt das vorhandene Ziel zurück, und versucht, den aktuellen TargetName mithilfe des Kontexts des aktuellen Hosts aufzulösen. Ist keine Auflösung mithilfe des Hostkontexts möglich, wird der Vorgang solange auf der jeweils übergeordneten Ebene innerhalb der visuellen Struktur wiederholt, bis eine Auflösung erfolgt ist. Wenn der Stamm der visuellen Struktur erreicht wird, ohne dass eine Auflösung erfolgt ist, wird das Ziel auf Null gesetzt und eine Warnmeldung wird an die Debugausgabe gesendet.
            </remarks>
        </member>
        <member name="E:System.Windows.Interactivity.NameResolver.ResolvedElementChanged">
            <summary>
            Tritt auf, wenn das aufgelöste Element geändert wurde.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.Name">
            <summary>
            Ruft den Namen des Elements ab, dessen Auflösung versucht werden soll, oder legt ihn fest.
            </summary>
            <value>Der aufzulösende Name.</value>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.Object">
            <summary>
            Das aufgelöste Objekt. Gibt das Referenzelement zurück, falls TargetName Null oder leer ist oder falls keine Auflösung versucht wurde.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.NameScopeReferenceElement">
            <summary>
            Ruft das Referenzelement für die Auflösung des Namens ab, oder legt dieses fest.
            </summary>
            <value>Das Referenzelement.</value>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.PendingReferenceElementLoad">
            <summary>
            Ruft einen Wert ab bzw. legt einen Wert fest, der angibt, ob das Laden des Referenzelements aussteht.
            </summary>
            <value>
            	<c>true</c>, falls das Laden des Referenzelements aussteht, andernfalls <c>false</c>.
            </value>
            <remarks>
            Wenn der Host nicht geladen wurde, wird der Name nicht aufgelöst. Verzögern Sie in diesem Fall die Auflösung, und verfolgen Sie diesen Umstand mit dieser Eigenschaft.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TargetedTriggerAction`1">
            <summary>
            Stellt eine Aktion dar, die darauf gerichtet sein kann, ein anderes Objekt als ihr AssociatedObject zu beeinflussen.
            </summary>
            <typeparam name="T">Die Typeinschränkung für das Ziel.</typeparam>
            <remarks>
            	Die TargetedTriggerAction erweitert die TriggerAction, indem sie Kenntnisse über ein anderes Element als das Element, dem sie angefügt wurde, hinzufügt. Dies ermöglicht es einem Benutzer, als Antwort auf einen Auslöser eine Aktion an einem anderen Element als dem Element, dem die Aktion angefügt wurde, aufzurufen. Setzen Sie &quot;OnTargetChanged&quot; außer Kraft, um Handler in ein Zielelement einzubinden oder deren Bindung zu lösen, und setzen Sie &quot;OnAttached/OnDetaching&quot; für das zugeordnete Element außer Kraft. Der Typ des Zielelements kann durch den Parameter &quot;Generischer Typ&quot; eingeschränkt werden. Wenn Sie Kontrolle über den Typ des AssociatedObject benötigen, legen Sie ein TypeConstraintAttribute für Ihren abgeleiteten Typ fest.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TargetedTriggerAction">
            <summary>
            Stellt eine Aktion dar, die darauf gerichtet sein kann, ein anderes Objekt als ihr AssociatedObject zu beeinflussen.
            </summary>
            <remarks>Dies ist eine Infrastrukturklasse. Ersteller von Aktionen sollten von der TargetedTriggerAction&lt;T&gt; statt von dieser Klasse abgeleitet werden.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnTargetChangedImpl(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Wird aufgerufen, wenn sich das Ziel ändert.
            </summary>
            <param name="oldTarget">Das alte Ziel.</param>
            <param name="newTarget">Das neue Ziel.</param>
            <remarks>Diese Funktion sollte in abgeleiteten Klassen außer Kraft gesetzt werden, um Funktionalität in die sich ändernden Quellobjekte einzubinden bzw. die Bindung der Funktionalität zu den sich ändernden Quellobjekten zu lösen.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnAttached">
            <summary>
            Wird nach dem Anfügen der Aktion an das AssociatedObject aufgerufen.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnDetaching">
            <summary>
            Wird aufgerufen, wenn die Aktion vom AssociatedObject getrennt wird. Der Aufruf erfolgt vor dem eigentlichen Trennvorgang.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.TargetName">
            <summary>
            Ruft den Namen des Ziels ab, oder legt ihn fest. Ist TargetName nicht festgelegt oder kann er nicht aufgelöst werden, wird standardmäßig das AssociatedObject verwendet. Hierbei handelt es sich um eine Abhängigkeitseigenschaft.
            </summary>
            <value>Der Name des Ziels.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.Target">
            <summary>
            Ruft das Zielobjekt ab. Ist der TargetName nicht festgelegt oder kann er nicht aufgelöst werden, wird das AssociatedObject standardmäßig verwendet.
            </summary>
            <value>Das Ziel.</value>
            <remarks>Im Allgemeinen sollte diese Eigenschaft anstelle des AssociatedObject in abgeleiteten Klassen verwendet werden.</remarks>
            <exception cref="T:System.InvalidOperationException">Das Zielelement erfüllt nicht die Typeinschränkung.</exception>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.AssociatedObjectTypeConstraint">
            <summary>
            Ruft die Typeinschränkung des zugeordneten Objekts ab.
            </summary>
            <value>Die Typeinschränkung des zugeordneten Objekts.</value>
            <remarks>Definieren Sie ein TypeConstraintAttribute für einen abgeleiteten Typ, um die Typen einzuschränken, den dieses angefügt werden kann.</remarks>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.TargetTypeConstraint">
            <summary>
            Ruft die Zieltypeinschränkung ab.
            </summary>
            <value>Die Zieltypeinschränkung.</value>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction`1.#ctor">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:System.Windows.Interactivity.TargetedTriggerAction`1"/>-Klasse.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction`1.OnTargetChanged(`0,`0)">
            <summary>
            Wird aufgerufen, wenn sich die Zieleigenschaft ändert.
            </summary>
            <remarks>Setzen Sie dies außer Kraft, um Funktionalität in das angegebene Ziel statt in das AssociatedObject einzubinden bzw. die Bindung der Funktionalität zum angegebenen Ziel zu lösen.</remarks>
            <param name="oldTarget">Das alte Ziel.</param>
            <param name="newTarget">Das neue Ziel.</param>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction`1.Target">
            <summary>
            Ruft das Zielobjekt ab. Ist der TargetName nicht festgelegt oder kann er nicht aufgelöst werden, wird das AssociatedObject standardmäßig verwendet.
            </summary>
            <value>Das Ziel.</value>
            <remarks>Im Allgemeinen sollte diese Eigenschaft anstelle des AssociatedObject in abgeleiteten Klassen verwendet werden.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerActionCollection">
            <summary>
            Stellt eine Auflistung von Aktionen mit einem freigegebenen AssociatedObject dar und stellt bei Änderungen am AssociatedObject Änderungsbenachrichtigungen für den dazugehörenden Inhalt bereit.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.#ctor">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:System.Windows.Interactivity.TriggerActionCollection"/>-Klasse.
            </summary>
            <remarks>Intern, da dies nicht außerhalb der Assembly vererbt werden darf.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.OnAttached">
            <summary>
            Wird sofort nach dem Anfügen der Auflistung an das AssociatedObject aufgerufen.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.OnDetaching">
            <summary>
            Wird aufgerufen, wenn die Auflistung vom dazugehörenden AssociatedObject getrennt wird. Der Aufruf erfolgt vor dem eigentlichen Trennvorgang.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.ItemAdded(System.Windows.Interactivity.TriggerAction)">
            <summary>
            Wird aufgerufen, wenn ein neues Element der Auflistung hinzugefügt wird.
            </summary>
            <param name="item">Das neue Element.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.ItemRemoved(System.Windows.Interactivity.TriggerAction)">
            <summary>
            Wird aufgerufen, wenn ein Element aus der Auflistung entfernt wird.
            </summary>
            <param name="item">Das entfernte Element.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.CreateInstanceCore">
            <summary>
            Erstellt eine neue Instanz der TriggerActionCollection.
            </summary>
            <returns>Die neue Instanz.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerBase`1">
            <summary>
            Stellt ein Objekt dar, das Aktionen unter Vorbehalt aufrufen kann.
            </summary>
            <typeparam name="T">Der Typ, dem dieser Auslöser angefügt werden kann.</typeparam>
            <remarks>
            	TriggerBase ist die Basisklasse für steuernde Aktionen. Setzen Sie &quot;OnAttached()&quot; und &quot;OnDetaching()&quot; außer Kraft, um die Handler in ein AssociatedObject einzubinden oder deren Bindung zu lösen. Sie können die Typen, denen eine abgeleitete TriggerBase angefügt werden kann, mithilfe generischer Parameter einschränken. Rufen Sie &quot;InvokeActions()&quot; auf, um alle Aktionen, die dieser TriggerBase zu geordnet sind, auszulösen.
            </remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase`1.#ctor">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:System.Windows.Interactivity.TriggerBase`1"/>-Klasse.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject">
            <summary>
            Ruft das Objekt ab, dem dieser Auslöser angefügt wurde.
            </summary>
            <value>Das zugeordnete Objekt.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObjectTypeConstraint">
            <summary>
            Ruft die Typeinschränkung des zugeordneten Objekts ab.
            </summary>
            <value>Die Typeinschränkung des zugeordneten Objekts.</value>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerCollection">
            <summary>
             Stellt eine Auflistung von Auslösern mit einem freigegebenen AssociatedObject dar und stellt bei Änderungen am AssociatedObject Änderungsbenachrichtigungen für den dazugehörenden Inhalt bereit.
             </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.#ctor">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:System.Windows.Interactivity.TriggerCollection"/>-Klasse.
            </summary>
            <remarks>Intern, da dies nicht außerhalb der Assembly vererbt werden darf.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.OnAttached">
            <summary>
            Wird sofort nach dem Anfügen der Auflistung an das AssociatedObject aufgerufen.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.OnDetaching">
            <summary>
            Wird aufgerufen, wenn die Auflistung vom dazugehörenden AssociatedObject getrennt wird. Der Aufruf erfolgt vor dem eigentlichen Trennvorgang.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.ItemAdded(System.Windows.Interactivity.TriggerBase)">
            <summary>
            Wird aufgerufen, wenn ein neues Element der Auflistung hinzugefügt wird.
            </summary>
            <param name="item">Das neue Element.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.ItemRemoved(System.Windows.Interactivity.TriggerBase)">
            <summary>
            Wird aufgerufen, wenn ein Element aus der Auflistung entfernt wird.
            </summary>
            <param name="item">Das entfernte Element.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.CreateInstanceCore">
            <summary>
            Erstellt eine neue Instanz der <see cref="T:System.Windows.Interactivity.TriggerCollection"/>.
            </summary>
            <returns>Die neue Instanz.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.TypeConstraintAttribute">
            <summary>
            Legen Sie Typeinschränkungen für das AssociatedObject der TargetedTriggerAction und der EventTriggerBase fest.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TypeConstraintAttribute.#ctor(System.Type)">
            <summary>
            Initialisiert eine neue Instanz der <see cref="T:System.Windows.Interactivity.TypeConstraintAttribute"/>-Klasse.
            </summary>
            <param name="constraint">Der Einschränkungstyp.</param>
        </member>
        <member name="P:System.Windows.Interactivity.TypeConstraintAttribute.Constraint">
            <summary>
            Ruft den Einschränkungstyp ab.
            </summary>
            <value>Der Einschränkungstyp.</value>
        </member>
        <member name="T:ExceptionStringTable">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Nachschlagen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte &quot;ResourceManager&quot;-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.Culture">
            <summary>
              Setzt mithilfe dieser stark typisierten Ressourcenklasse die &quot;CurrentUICulture&quot;-Eigenschaft des aktuellen Threads für alle Ressourcensuchen außer Kraft.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostBehaviorCollectionMultipleTimesExceptionMessage">
            <summary>
              Sucht nach einer lokalisierten Zeichenfolge, die der folgenden Zeichenfolge ähnelt: &quot;Es ist nicht möglich, dasselbe BehaviorCollection-Element für mehrere Objekte festzulegen.&quot;
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostBehaviorMultipleTimesExceptionMessage">
            <summary>
              Sucht nach einer lokalisierten Zeichenfolge, die der folgenden Zeichenfolge ähnelt: &quot;Eine Instanz eines Verhaltens kann nicht gleichzeitig an mehrere Objekte angefügt werden.&quot;
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerActionMultipleTimesExceptionMessage">
            <summary>
              Sucht nach einer lokalisierten Zeichenfolge, die der folgenden Zeichenfolge ähnelt: &quot;Eine Instanz eines TriggerAction-Elements kann nicht gleichzeitig in mehreren TriggerCollections-Elementen gehostet werden. Entfernen Sie sie aus einem TriggerCollection-Element, bevor Sie sie einem anderen hinzufügen.&quot;
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerCollectionMultipleTimesExceptionMessage">
            <summary>
              Sucht nach einer lokalisierten Zeichenfolge, die der folgenden Zeichenfolge ähnelt: &quot;Es ist nicht möglich, dasselbe TriggerCollection-Element für mehrere Objekte festzulegen.&quot;
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerMultipleTimesExceptionMessage">
            <summary>
              Sucht nach einer lokalisierten Zeichenfolge, die der folgenden Zeichenfolge ähnelt: &quot;Eine Instanz eines Auslösers kann nicht gleichzeitig an mehrere Objekte angefügt werden.&quot;
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CommandDoesNotExistOnBehaviorWarningMessage">
            <summary>
              Sucht nach einer lokalisierten Zeichenfolge, die der folgenden Zeichenfolge ähnelt: &quot;Der Befehl &quot;{0}&quot; ist nicht vorhanden oder nicht in {1} verfügbar.&quot;
            </summary>
        </member>
        <member name="P:ExceptionStringTable.DefaultTriggerAttributeInvalidTriggerTypeSpecifiedExceptionMessage">
            <summary>
              Sucht nach einer lokalisierten Zeichenfolge, die der folgenden Zeichenfolge ähnelt: &quot;&quot;{0}&quot; ist kein gültiger Typ für TriggerType-Parameter. Stellen Sie sicher, dass &quot;{0}&quot; von TriggerBase abgeleitet wird.&quot;
            </summary>
        </member>
        <member name="P:ExceptionStringTable.DuplicateItemInCollectionExceptionMessage">
            <summary>
              Sucht nach einer lokalisierten Zeichenfolge, die der folgenden Zeichenfolge ähnelt: &quot;Es ist nicht möglich, &quot;{1}&quot; dieselbe Instanz von &quot;{0}&quot; mehrmals hinzuzufügen.&quot;
            </summary>
        </member>
        <member name="P:ExceptionStringTable.EventTriggerCannotFindEventNameExceptionMessage">
            <summary>
              Sucht nach einer lokalisierten Zeichenfolge, die der folgenden Zeichenfolge ähnelt: &quot;Ein Ereignis mit der Bezeichnung &quot;{0}&quot; unter dem Typ &quot;{1}&quot; kann nicht gefunden werden.&quot;
            </summary>
        </member>
        <member name="P:ExceptionStringTable.InvokeActionCommandMustBeHostedOnBehaviorExceptionMessage">
            <summary>
              Sucht nach einer lokalisierten Zeichenfolge, die der folgenden Zeichenfolge ähnelt: &quot;InvokeCommandAction muss einem Verhalten angefügt sein. Dazu wird es der Actions-Auflistung eines Auslösers in der Triggers-Auflistung eines Behavior-Objekts hinzugefügt.&quot;
            </summary>
        </member>
        <member name="P:ExceptionStringTable.RetargetedTypeConstraintViolatedExceptionMessage">
            <summary>
              Sucht nach einer lokalisierten Zeichenfolge, die der folgenden Zeichenfolge ähnelt: &quot;Ein Objekt des Typs &quot;{0}&quot; kann nicht über eine {3}-Eigenschaft des Typs &quot;{1}&quot; verfügen. Instanzen des Typs &quot;{0}&quot; können nur über eine {3}-Eigenschaft des Typs &quot;{2}&quot; verfügen.&quot;
            </summary>
        </member>
        <member name="P:ExceptionStringTable.TypeConstraintViolatedExceptionMessage">
            <summary>
              Sucht nach einer lokalisierten Zeichenfolge, die der folgenden Zeichenfolge ähnelt: &quot;Typ &quot;{0}&quot; kann nicht Typ &quot;{1}&quot; angefügt werden. Instanzen des Typs &quot;{0}&quot; können nur an Objekte des Typs &quot;{2}&quot; angefügt werden.&quot;
            </summary>
        </member>
        <member name="P:ExceptionStringTable.UnableToResolveTargetNameWarningMessage">
            <summary>
              Sucht nach einer lokalisierten Zeichenfolge, die der folgenden Zeichenfolge ähnelt: &quot;TargetName &quot;{0}&quot; kann nicht aufgelöst werden.&quot;
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\en\Microsoft.Expression.Effects.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Effects</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Media.Effects.BlindOrientation">
            <summary>
            Determine the orientation of the blinds
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.BlindsTransitionEffect">
            <summary>
            Transition shader that simulates blinds opening when transitioning
            from one visual to another. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.OrientationProperty">
            <summary>
            Gets or sets the orientation of the blinds
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.CountProperty">
            <summary>
            Gets or sets the number of blinds
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.ShaderOrientationProperty">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the BlindsTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of BlindsTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.Orientation">
            <summary>
            Gets or sets orientatio of the blinds.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.Count">
            <summary>
            Gets or sets the number of blinds to display.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.ShaderOrientation">
            <summary>
            Gets or sets orientation of the blinds.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.BloomEffect">
            <summary>
            Effect that implements a bloom illumination of a visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
            
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BloomIntensityProperty">
            <summary>
            This property is mapped to the BloomIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseIntensityProperty">
            <summary>
            This property is mapped to the BaseIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BloomSaturationProperty">
            <summary>
            This property is mapped to the BloomSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseSaturationProperty">
            <summary>
            This property is mapped to the BaseSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomIntensityProperty">
            <summary>
            This property is mapped to the BloomIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomSaturationProperty">
            <summary>
            This property is mapped to the BloomSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.ThresholdProperty">
            <summary>
            This property is mapped to the BaseSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BloomEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.Threshold">
            <summary>
            Gets or sets the minimum intensity that will be used for the bloom
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseIntensity">
            <summary>
            Gets or sets the base intensity
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BloomIntensity">
            <summary>
            Gets or sets the bloom intensity
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseSaturation">
            <summary>
            Gets or sets the base saturation
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BloomSaturation">
            <summary>
            Gets or sets the bloom saturation
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomIntensity">
            <summary>
            Gets or sets the Base/BloomIntensity variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomSaturation">
            <summary>
            Gets or sets the BaseBloomSaturation variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect">
            <summary>
            Transition effect that reveals two visuals through a growing/shrinking circle. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.FeatherAmountProperty">
            <summary>
            Dependency property which modifies the Feather amount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseProperty">
            <summary>
            Dependency property which modifies the circle movement.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseShaderProperty">
            <summary>
            Dependency property which modifies the reverseShader variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the CircleRevealTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of CircleRevealTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.FeatherAmount">
            <summary>
            Gets or sets the FuzzyAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.Reverse">
            <summary>
            Gets or sets playing the circle reveal backward
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseShader">
            <summary>
            Gets or sets playing the circle reveal backward into the shader
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect">
            <summary>
            Transition effect that transitions two visuals using a cloud 
            texture as the sampler threshold.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CloudyTransitionEffect">
            <summary>
            Defines a transition shader effect that uses an image as a sampler threshold
            for interpolating pixel value between two visuals. 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect">
            <summary>
            Defines a transition shader effect that provides a random value
            allowing the effect to provide variance each time the effect is run.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.RandomSeedProperty">
            <summary>
            Dependency property which modifies the RandomSeed variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.#ctor">
            <summary>
            Updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.RandomSeed">
            <summary>
            Gets or sets the RandomSeed variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.CloudImageProperty">
            <summary>
            Dependency property which modifies the CloudImage variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.CloudImage">
            <summary>
            Gets or sets the CloudImage variable within the shader used for sampling. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the CloudRevealTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of CloudRevealTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.ColorToneEffect">
            <summary>
            Effects that modifies the color tone of a visual using
            two colors as the sampling.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.DesaturationProperty">
            <summary>
            This property is mapped to the Desaturation variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.ToneAmountProperty">
            <summary>
            This property is mapped to the Toned variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.LightColorProperty">
            <summary>
            This property is mapped to the LightColor variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.DarkColorProperty">
            <summary>
            This property is mapped to the DarkColor variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.ColorToneEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.Desaturation">
            <summary>
            Gets or sets the Desaturation variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.ToneAmount">
            <summary>
            Gets or sets the Toned variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.LightColor">
            <summary>
            Gets or sets the LightColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.DarkColor">
            <summary>
            Gets or sets the DarkColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.EmbossedEffect">
            <summary>
            Effect that simulates an embossed look to the visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.AmountProperty">
            <summary>
            This property is mapped to the Amount variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.HeightProperty">
            <summary>
            This property is mapped to the Height variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.ColorProperty">
            <summary>
            This property is mapped to the Color variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.EmbossedEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Amount">
            <summary>
            Gets or sets the Amount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Height">
            <summary>
            Gets or sets the Height variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Color">
            <summary>
            Gets or sets the Color variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.FadeTransitionEffect">
            <summary>
            Transition effect that gradually transitions from one visual to another.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.FadeTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.FadeTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the FadeTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of FadeTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MagnifyEffect">
            <summary>
            Effect that simulates a magnifying lens.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.InnerRadiusProperty">
            <summary>
            Gets or sets the InnerRadius variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.OuterRadiusProperty">
            <summary>
            Gets or sets the OuterRadius variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.CenterProperty">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.AmountProperty">
            <summary>
            Gets or sets the amount variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.InputProperty">
            <summary>
            Gets or sets the input used in the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.generalTransform">
            <summary>
            The transform used for this shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.InnerRadius">
            <summary>
            Gets or sets the inner radius variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.OuterRadius">
            <summary>
            Gets or sets the outer radius variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Center">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Amount">
            <summary>
            Gets or sets the ShrinkFactor: 
            The higher the shrink factor the "smaller" the content inside the ellipse will appear. 
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.EffectMapping">
            <summary>
            Gets the EffectMapping.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform">
            <summary>
            The GeneralTransform corrosponding to the Magnify effect.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.biasValue">
            <summary>
            Attempt to transform a point based on the effect.
            </summary>
            <param name="targetPoint">The point to transform.</param>
            <param name="result">The result if available.</param>
            <returns>Return true if successful.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.effect">
            <summary>
            The effect instance.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.IsInverse">
            <summary>
            If the transform is an inverse.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.inverseTransform">
            <summary>
            The transform specific to this Effect.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.#ctor(Microsoft.Expression.Media.Effects.MagnifyEffect)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fx">The source effect.</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.TransformBounds(System.Windows.Rect)">
            <summary>
            This particular effect keeps axis aligned lines axis aligned, so transformation of the rect is just
            transformation of its corner points.
            </summary>
            <param name="rect">The input rect.</param>
            <returns>The output rect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.OutToIn(System.Windows.Point,System.Double,System.Double,System.Windows.Point,System.Double)">
            <summary>
            For the inverse of the shader, we need to find Pin which is the Pixel Ouput, given Pout the texture input (is the reverse of the shader)
            However, the shader algorithm is dependant on the radius of the pixel output from the center, which is a variable that we don't
            have when computing the inverse. We need to perform bisection in order to converge using the equation below
            PHatout = PHat_in*Scalar where
            PHatout = Pout - Pcenter  
            pHatin = Pin -Pcenter
            
            Scalar is dependent on the radius of Pin (which we don't have). 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.InToOut(System.Windows.Point,System.Double,System.Double,System.Windows.Point,System.Double)">
            <summary>
            Given a pixel output (Pin) find the texture input (Pout)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.CreateInstanceCore">
            <summary>
            Creats a new instance.
            </summary>
            <returns>A new instance of this.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.PointIsInCircle(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Determines if a point is within an ellipse.
            </summary>
            <param name="pt">The test point.</param>
            <param name="center">The center point of the ellipse.</param>
            <param name="radius">The radius of the ellipse.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.Inverse">
            <summary>
            Gets the inverse transform.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MonochromeEffect">
             <summary>
            Effect that turns a visual into a monochrom color
             </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MonochromeEffect.ColorProperty">
            <summary>
            Gets or sets the FilterColor variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MonochromeEffect.InputProperty">
            <summary>
            Gets or sets the Input of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MonochromeEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MonochromeEffect.Color">
            <summary>
            Gets or sets the FilterColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MonochromeEffect.Input">
            <summary>
            Gets or sets the input used in the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.PixelateEffect">
            <summary>
            Effect that pixelates a visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.PixelateEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.PixelateEffect.PixelationProperty">
            <summary>
            This property is mapped to the pixelation amount variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.PixelateEffect.Pixelation">
            <summary>
            Gets or sets the amount of pixelation inside the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.PixelateEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.PixelateTransitionEffect">
            <summary>
            Transition effect that increase/decrease pixelation between two visuals.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the PixelateTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of PixelateTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect">
            <summary>
            Transition effects that performs a radial blur of the current visual  as the new visual is introduced.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the RadialBlurTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of RadialBlurTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RippleEffect">
            <summary>
            Effect that simulates water ripples on the visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.CenterProperty">
            <summary>
            Gets or sets the Center variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.MagnitudeProperty">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.FrequencyProperty">
            <summary>
            Gets or sets the Frequency variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.PhaseProperty">
            <summary>
            Gets or sets the Phase variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.InputProperty">
            <summary>
            Gets or sets the input brush used in the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Center">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Magnitude">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Frequency">
            <summary>
            Gets or sets the frequency variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Phase">
            <summary>
            Gets or sets the Phase variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RippleTransitionEffect">
            <summary>
            Transition effect that simulate water ripple during transition. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the RippleTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of RippleTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SharpenEffect">
            <summary>
            Effects that makes a visual more crisp and sharper. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.AmountProperty">
            <summary>
            This property is mapped to the Amount variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.HeightProperty">
            <summary>
            This property is mapped to the Width variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SharpenEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Amount">
            <summary>
            Gets or sets the Amount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Height">
            <summary>
            Gets or sets the Height variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SlideDirection">
            <summary>
            Define the slide orientation
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SlideInTransitionEffect">
            <summary>
            Transition effect that slide the current visual away, revealing the new visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideDirectionProperty">
            <summary>
            Dependency property which modifies the SlideAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideNormalProperty">
            <summary>
            Dependency property which modifies the SlideAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the SlideInTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of SlideInTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideDirection">
            <summary>
            Gets or sets the SlideAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideNormal">
            <summary>
            Gets or sets the SlideAmount variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect">
             <summary>
            Transition effect that swirl the current visual while introducing the new visual.
             </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.TwistAmountProperty">
            <summary>
            Dependency property which modifies the TwistAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.CellCountProperty">
            <summary>
            Dependency property which modifies the number of cell where pixels will be twisted.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.#ctor(System.Double)">
            <summary>
            Creates an instance and sets the shader's twist variable to the specified values.
            </summary>
            <param name="twist">level of swirl twist</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the SmoothSwirlGridTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of SmoothSwirlGridTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.TwistAmount">
            <summary>
            Gets or sets the TwistAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.CellCount">
            <summary>
            Gets or sets the CellCount variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SwirlEffect">
            <summary>
            Effect that swirls the current visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.CenterProperty">
            <summary>
            This property is mapped to the Center variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.TwistAmountProperty">
            <summary>
            This property is mapped to the SwirlStrength variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.AngleFrequencyProperty">
            <summary>
            This property is mapped to the AngleFrequency variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.generalTransform">
            <summary>
            The transform used when this Effect is applied.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.Center">
            <summary>
            Gets or sets the Center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.TwistAmount">
            <summary>
            Gets or sets the SwirlStrength variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.AngleFrequency">
            <summary>
            Gets or sets the AngleFrequency variable within the shader.
            We do not expose this property. 
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.EffectMapping">
            <summary>
            Gets the GeneralTransform for this effect.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform">
            <summary>
            For transforming input and tree transformations.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.theEffect">
            <summary>
            The instance of the Effect.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.thisIsInverse">
            <summary>
            The inverse of the transform.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.inverseTransform">
            <summary>
            The inverse of this GeneralTransform.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.#ctor(Microsoft.Expression.Media.Effects.SwirlEffect)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="eff">The effect itself.</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.TransformBounds(System.Windows.Rect)">
            <summary>
            For this operation, the bounds is the bounding box of the 4 transformed points. 
            Need to transform each of them, and then circumscribe.  This is true for both the 
            forward and the inverse.
            </summary>
            <param name="rect">The input rect.</param>
            <returns>The transformed rect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.TryTransform(System.Windows.Point,System.Windows.Point@)">
            <summary>
            Attempt to transform inPoint with the Swirl effect.
            </summary>
            <param name="targetPoint">The input point.</param>
            <param name="result">The output point after transformed using the Swirl effect.</param>
            <returns>True and throws if false.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.CreateInstanceCore">
            <summary>
            Returns a new instance of this.
            </summary>
            <returns>A new instance.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.Inverse">
            <summary>
            Gets a clone of the inverse of the current transform.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WaveTransitionEffect">
            <summary>
            Transition effect that waves the current visual while introducing the new visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.MagnitudeProperty">
            <summary>
            Dependency property which modifies the Magnitude variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.PhaseProperty">
            <summary>
            Dependency property which modifies the Phase variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.FrequencyProperty">
            <summary>
            Dependency property which modifies the Phase variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WaveTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WaveTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the WaveTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of WaveTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Magnitude">
            <summary>
            Gets or sets the magnitude of the wave
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Phase">
            <summary>
            Gets or sets the phase of the wave
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Frequency">
            <summary>
            Gets or sets the magnitude of the wave
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WipeDirection">
            <summary>
            Define the wipe direction.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WipeTransitionEffect">
            <summary>
            Transition effect that wipes the current visual introducing the new visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.WipeDirectionProperty">
            <summary>
            Dependency property which modifies the preset of the wipe
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.FeatherAmountProperty">
            <summary>
            Dependency property which modifies the FuzzyAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOriginProperty">
            <summary>
            Dependency property which modifies the LineOrigin variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineNormalProperty">
            <summary>
            Dependency property which modifies the LineNormal variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOffsetProperty">
            <summary>
            Dependency property which modifies the LineOffset variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WipeTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WipeTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the WipeTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of WipeTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.WipeDirection">
            <summary>
            Gets or sets the direction of the wipe.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.FeatherAmount">
            <summary>
            Gets or sets the FuzzyAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOrigin">
            <summary>
            Gets or sets the LineOrigin variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineNormal">
            <summary>
            Gets or sets the LineNormal variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOffset">
            <summary>
            Gets or sets the LineOffset variable within the shader.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\en\Microsoft.Expression.Drawing.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Drawing</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Controls.Callout">
            <summary>
            Renders a callout shape supporting several shapes combined with a callout arrow.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.CompositeContentShape">
             <summary>
             Provides a base class of a composite shape that derives from <see cref="T:System.Windows.Controls.ContentControl"/> and implements <see cref="T:Microsoft.Expression.Media.IShape"/>.
             </summary>
             <remarks>
             <see cref="T:Microsoft.Expression.Controls.CompositeContentShape"/> implements <see cref="T:Microsoft.Expression.Media.IShape"/> interface,
             and supports rendering a geometry similar to <see cref="T:System.Windows.Shapes.Shape"/>, but the geometry can be rendered outside of layout boundary.
             
             A typical implementation will have a customized default template in generic.xaml which template-binds most shape properties to a <see cref="T:System.Windows.Shapes.Path"/>.
             It should also extend the <see cref="P:GeometrySource"/> property to customize the appearance of the <see cref="T:System.Windows.Shapes.Path"/>.
            
             This class also supports showing content together with the shape.
             </remarks>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySourceParameters">
            <summary>
            Provides an interface to discribe the parameters of a Shape.
            </summary>
            <remarks>
            This interface is the data for communication between Shape and GeometrySource.
            Typically a concrete implementation of IShape will implements this interface and pass it into
            GeometrySource.UpdateGeometry(), who will consume the shape as readonly data provider.
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Media.IShape">
            <summary>
            Provides the necessary interface to define a Shape.
            Both primitive and composite shapes need to match this interface, although they might derive from different type of FrameworkElement.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.IShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Fill">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how to paint the interior of the shape.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that describes how the shape's interior is painted. The default is null. See Remarks.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values. The default value at run time depends on the type of <see cref="T:System.Windows.Shapes.Shape" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.RenderedGeometry">
            <summary>
            Gets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.GeometryMargin">
            <summary>
            Gets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Media.IShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.CreateGeometrySource">
            <summary>
            Extends how the shape is drawn with creating geometry source.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Controls.CompositeContentShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.OnContentChanged(System.Object,System.Object)">
            <summary>
            Transforms a string content into <see cref="T:TextBlock"/> with center alignment and mulitple line support.
            </summary>
            <remarks>
            Use template binding to <see cref="P:Microsoft.Expression.Controls.CompositeContentShape.InternalContent"/> instead of <see cref="P:Content"/> to enable this method.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that specifies how to paint the interior of the shape.
            </summary>
            <returns>A <see cref="T:System.Windows.Media.Brush"/> that describes how the shape's interior is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeStartLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. </summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineCap" /> enumeration that specifies the shape at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeEndLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the end of a line. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeLineJoin">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:System.Windows.Shapes.Shape" />.</summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration that specifies the join appearance. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeMiterLimit">
            <summary>Gets or sets a limit on the ratio of the miter length to half the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. </summary>
            <returns>The limit on the ratio of the miter length to the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. This value is always a positive number that is greater than or equal to 1.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashArray">
            <summary>Gets or sets a collection of <see cref="T:System.Double" /> values that indicate the pattern of dashes and gaps that is used to outline shapes. </summary>
            <returns>A collection of <see cref="T:System.Double" /> values that specify the pattern of dashes and gaps. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that specifies how the ends of a dash are drawn. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashOffset">
            <summary>Gets or sets a <see cref="T:System.Double" /> that specifies the distance within the dash pattern where a dash begins.</summary>
            <returns>A <see cref="T:System.Double" /> that represents the distance within the dash pattern where a dash begins. The default value is 0.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.RenderedGeometry">
            <summary>
            Gets or sets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.GeometryMargin">
            <summary>
            Gets or sets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.InternalContent">
            <summary>
            Gets or sets the internal content that converts string into center aligned multiple line textblock.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.CompositeContentShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.Callout.AnchorPoint">
            <summary>
            Gets or sets the position of the callout relative to the top and left corner.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.Callout.CalloutStyle">
            <summary>
            Gets or sets the callout style.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.CompositeShape">
            <summary>
            Provides a base class of a composite shape that derives from <see cref="T:System.Windows.Controls.Control"/> and implements <see cref="T:Microsoft.Expression.Media.IShape"/>.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Expression.Controls.CompositeShape"/> implements <see cref="T:Microsoft.Expression.Media.IShape"/> interface,
            and supports rendering a geometry similar to <see cref="T:System.Windows.Shapes.Shape"/>, but the geometry can be rendered outside of layout boundary.
            
            A typical implementation will have a customized default template in generic.xaml which template-binds most shape properties to a <see cref="T:System.Windows.Shapes.Path"/>.
            It should also extend the <see cref="P:GeometrySource"/> property to customize the appearance of the <see cref="T:System.Windows.Shapes.Path"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.CreateGeometrySource">
            <summary>
            Extends how the shape is drawn with creating geometry source.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Controls.CompositeShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that specifies how to paint the interior of the shape.
            </summary>
            <returns>A <see cref="T:System.Windows.Media.Brush"/> that describes how the shape's interior is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeStartLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. </summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineCap" /> enumeration that specifies the shape at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeEndLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the end of a line. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeLineJoin">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:System.Windows.Shapes.Shape" />.</summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration that specifies the join appearance. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeMiterLimit">
            <summary>Gets or sets a limit on the ratio of the miter length to half the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. </summary>
            <returns>The limit on the ratio of the miter length to the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. This value is always a positive number that is greater than or equal to 1.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashArray">
            <summary>Gets or sets a collection of <see cref="T:System.Double" /> values that indicate the pattern of dashes and gaps that is used to outline shapes. </summary>
            <returns>A collection of <see cref="T:System.Double" /> values that specify the pattern of dashes and gaps. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that specifies how the ends of a dash are drawn. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashOffset">
            <summary>Gets or sets a <see cref="T:System.Double" /> that specifies the distance within the dash pattern where a dash begins.</summary>
            <returns>A <see cref="T:System.Double" /> that represents the distance within the dash pattern where a dash begins. The default value is 0.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.RenderedGeometry">
            <summary>
            Gets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.GeometryMargin">
            <summary>
            Gets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.CompositeShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.LineArrow">
            <summary>
            Renders a bended line segment with optional arrowhead on both end.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.LineArrow.MeasureOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
            <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes, or possibly on other considerations such as fixed container size.</returns>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <remarks>
            A default <see cref="T:LineArrow"/> can render at anysize.
            The <see cref="P:RenderedGeometry"/> will stretch to layout boundary and render to outside if necessary.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.BendAmount">
            <summary>
            Gets or sets the amount of bend for the arrow.
            </summary>
            <value>The bend amount between 0 to 1.</value>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.StartArrow">
            <summary>
            Gets or sets how the arrow head is rendered at the start of the line.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.EndArrow">
            <summary>
            Gets or sets how the arrow head is rendered at the end of the line.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.StartCorner">
            <summary>
            Gets or sets from which corner to start drawing the arrow.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.ArrowSize">
            <summary>
            Gets or sets the length of the arrow in pixels.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PanningItems">
            <summary>
            Provides an items control that displays one selected item, and allows panning between items using touch gestures.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PanningItems.#ctor">
            <summary>
            The constructor for PanningItems.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PanningItems.OnApplyTemplate">
            <summary>
            Called when the PanningItems template is applied.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.ScrollDirection">
            <summary>
            Gets or sets the orientation of items in the control.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.FlickTolerance">
            <summary>
            Gets or sets the flick tolerance.  This can be a value between 0 and 1.  
            It represents the percentage of the size of the PanningItems needed to be covered by the flick gesture to trigger an items change.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.PreviousItem">
            <summary>
            Gets or sets the item before the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.NextItem">
            <summary>
            Gets or sets the item after the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.LoopContents">
            <summary>
            Gets or sets whether the contents of the items control will loop, so that the first item will follow the last item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.SliderValue">
            <summary>
            Gets or sets the value of the slider controlling the panning motion.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathGeometryHelper">
            <summary>
            Helper class to work with PathGeometry
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.ConvertToPathGeometry(System.String)">
            <summary>
            Converts a string in the path mini-langauge into a PathGeometry.
            </summary>
            <param name="abbreviatedGeometry">A string in the path mini-langauge.</param>
            <remarks>
            Algorithm is modified from WPF: MS.Internal.Parsers.ParseStringToStreamGeometryContext.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.AsPathGeometry(System.Windows.Media.Geometry)">
            <summary>
            Convert the given geometry into a single PathGeometry.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.SyncPolylineGeometry(System.Windows.Media.Geometry@,System.Collections.Generic.IList{System.Windows.Point},System.Boolean)">
            <summary>
            Update the given geometry as PathGeometry with polyline matching given point list.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathGeometryHelper.AbbreviatedGeometryParser">
            <summary>
            Parses abbreviated geometry sytax.
            </summary>
            <remarks>
            The algorithm is modified from WPF: MS.Internal.AbbreviatedGeometryParser
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathSegmentHelper">
            <summary>
            Helper class to Convert ArcSegment to BezierSegment(s)
            </summary>
            <summary>
            Helper class to work with PathSegment and all variations.
            </summary>
            <summary>
            Strategy classes to handle different types of PathSegment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierSegments(System.Windows.Media.ArcSegment,System.Windows.Point)">
            <summary>
            Convert an Arc segment into Bezier format
            Return BezierSegment, PolyBezierSegment, LineSegment, or null
            When returning null, the Arc degenerated into start point.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SetIsStroked(System.Windows.Media.PathSegment,System.Boolean)">
            <summary>
            Avoid calling the three-parameter constructor, since it always sets a local value for IsStroked.
            </summary>
            <param name="segment"></param>
            <param name="isStroked"></param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SyncPolylineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Collections.Generic.IList{System.Windows.Point},System.Int32,System.Int32)">
            <summary>
            Update the SegmentCollection with given polyline matching given point list.
            Try to keep changes minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SyncPolyBezierSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Collections.Generic.IList{System.Windows.Point},System.Int32,System.Int32)">
            <summary>
            Update the collection[index] segment with poly bezier segment matching given point list.
            givne point list must contain 3*N points for N Bezier segments.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.IsEmpty(System.Windows.Media.PathSegment)">
            <summary>
            Test if given path segment is empty.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetPointCount(System.Windows.Media.PathSegment)">
            <summary>
            Get the point count in given path segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetLastPoint(System.Windows.Media.PathSegment)">
            <summary>
            Get the last point of given path segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetPoint(System.Windows.Media.PathSegment,System.Int32)">
            <summary>
            Get the point of given index in given segment.
            If input is (-1), return the last point.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.FlattenSegment(System.Windows.Media.PathSegment,System.Collections.Generic.IList{System.Windows.Point},System.Windows.Point,System.Double)">
            <summary>
            Flatten given segment and add result points into given point list.
            </summary>
            <param name="segment">The segment to be flatten</param>
            <param name="points">The result point list</param>
            <param name="start">The start point of the segment</param>
            <param name="tolerance">The error tolerance. Must be possitive. Can be 0, fallback to default tolerance.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.ArcToBezier(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Double,System.Double,System.Windows.Point[]@,System.Int32@)">
            <summary>
            ArcToBezier, Compute the Bezier approximation of an arc
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            </summary>
            <remarks>
            This utility computes the Bezier approximation for an elliptical arc as
            it is defined in the SVG arc spec. The ellipse from which the arc is
            carved is axis-aligned in its own coordinates, and defined there by its
            x and y radii. The rotation angle defines how the ellipse's axes are
            rotated relative to our x axis. The start and end points define one of 4
            possible arcs; the sweep and large-arc flags determine which one of
            these arcs will be chosen. See SVG spec for details.
            
            Returning cPieces = 0 indicates a line instead of an arc
                      cPieces = -1 indicates that the arc degenerates to a point 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.GetArcAngle(System.Windows.Point,System.Windows.Point,System.Boolean,System.Boolean,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Get the number of Bezier arcs, and sine/cosine of each.
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            </summary>
            <remarks>
            This is a private utility used by ArcToBezier.  We break the arc into
            pieces so that no piece will span more than 90 degrees.  The input
            points are on the unit circle.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.GetBezierDistance(System.Double,System.Double)">
             <summary>
             GetBezierDistance, return the distance as a fraction of the radius
             Adopted from MIL:Graphics\core\geometry\utils.cpp
             </summary>
            <remarks>
                  Get the distance from a circular arc's endpoints to the control points
                  of the Bezier arc that approximates it, as a fraction of the arc's
                  radius.
            
                  Since the result is relative to the arc's radius, it depends strictly on
                  the arc's angle. The arc is assumed to be of 90 degrees of less, so the
                  angle is determined by the cosine of that angle, which is derived from
                  rDot = the dot product of two radius vectors.  We need the Bezier curve
                  that agrees with the arc's points and tangents at the ends and midpoint. 
                  Here we compute the distance from the curve's endpoints to its control
                  points.
            
                  Since we are looking for the relative distance, we can work on the unit
                  circle. Place the center of the circle at the origin, and put the X axis
                  as the bisector between the 2 vectors.  Let a be the angle between the
                  vectors.  Then the X coordinates of the 1st and last points are cos(a/2). 
                  Let x be the X coordinate of the 2nd and 3rd points.  At t=1/2 we have a
                  point at (1,0). But the terms of the polynomial there are all equal:
            
                            (1-t)^3 = t*(1-t)^2 = t^2*(1-t) = t^3 = 1/8,
            
                  so from the Bezier formula there we have:
            
                            1 = (1/8) * (cos(a/2) + 3x + 3x + cos(a/2)), 
            
                  hence
            
                            x = (4 - cos(a/2)) / 3
            
                  The X difference between that and the 1st point is:
                  
                            DX = x - cos(a/2) = 4(1 - cos(a/2)) / 3.
            
                  But DX = distance / sin(a/2), hence the distance is
            
                            dist = (4/3)*(1 - cos(a/2)) / sin(a/2).
            
                  Rather than the angle a, we are given rDot = R^2 * cos(a), so we
                  multiply top and bottom by R:
             
                            dist = (4/3)*(R - Rcos(a/2)) / Rsin(a/2)
             
                  and use some trig:
                                           ________________
                            cos(a/2)   = \/(1 + cos(a)) / 2
                                           ______________________
                            R*cos(a/2) = \/(R^2 + R^2 cos(a)) / 2 
                                           ________________
                                       = \/(R^2 + rDot) / 2
            
                  Let A = (R^2 + rDot)/2.
                                           ____________________
                            R*sin(a/2) = \/R^2 - R^2 cos^2(a/2)
                                           _______
                                       = \/R^2 - A
            
                  so:
                                                      _
                                         4      R - \/A
                                  dist = - * ------------
                                         3      _______
                                              \/R^2 - A
            
              History:
                  5/29/2001 MichKa
                      Created it.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.AcceptRadius(System.Double,System.Double,System.Double@)">
            <summary>
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            Return false if the radius is too small compared to the chord length (returns true on NaNs)
            radius is modified to the value that's accepted.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.BezierCurveFlattener">
            <summary>
            A utility class to flatten Bezier curves.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.BezierCurveFlattener.FlattenCubic(System.Windows.Point[],System.Double,System.Collections.Generic.ICollection{System.Windows.Point},System.Boolean,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Flattens a Bezier cubic curve and adds the result polyline to the third parameter.
            </summary>
            <param name="controlPoints">The 4 Bezier cubic control points.</param>
            <param name="errorTolerance">The maximum distance between two corresponding points on the true curve 
            and on the flattened polyline. Must be strictly positive.</param>
            <param name="resultPolyline">Where to add the flattened polyline.</param>
            <param name="skipFirstPoint">True to skip the first control point when adding the flattened polyline.
            <param name="resultParameters">Where to add the value of the Bezier curve parameter associated to 
            each of the polyline vertices</param> 
            If <paramref name="resultPolyline"/> is empty, the first control point 
            and its associated parameter are always added.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.BezierCurveFlattener.FlattenQuadratic(System.Windows.Point[],System.Double,System.Collections.Generic.ICollection{System.Windows.Point},System.Boolean,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Flattens a Bezier quadratic curve and adds the result polyline to the third parameter.
            We use degree elevation for Bezier curves to reuse the code for the cubic case.
            </summary>
            <param name="controlPoints">The 3 Bezier quadratic control points.</param>
            <param name="errorTolerance">The maximum distance between two corresponding points on the true curve 
            and on the flattened polyline. Must be strictly positive.</param>
            <param name="resultPolyline">Where to add the flattened polyline.</param>
            <param name="skipFirstPoint">Whether to skip the first control point when adding the flattened polyline. 
            <param name="resultParameters">Where to add the value of the Bezier curve parameter associated to
            each of the polyline vertices</param>
            If <paramref name="resultPolyline"/> is empty, the first control point and 
            its associated parameter are always added.</param>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.CommonExtensions">
            <summary>
            Extension methods supporting non-geometry types
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence with the index of each item.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.EnsureListCount``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Ensure the count of list to given count.  Create default(T) or remove items when necessary.
            If Input IList is a List, AddRange or RemoveRange is used.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.EnsureListCount``1(System.Collections.Generic.IList{``0},System.Int32,System.Func{``0})">
            <summary>
            Ensure the count of list to given count.  Create with given fatory or remove items when necessary.
            If Input IList is a List, AddRange or RemoveRange is used when there's no factory.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a range of items to the end of a collection.
            If collection is list, List.AddRange is used.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.Last``1(System.Collections.Generic.IList{``0})">
            <summary>
            Get the last item of given list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.RemoveLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove the last item from the given list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.DeepCopy``1(``0)">
            <summary>
            Make a copy of obj and all it's public properties, including all collection properties.
            Possible perf optimization: this is used only for Transform and Geometry.
            We should develope a copier for them instead of using reflection.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.SetIfDifferent(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object)">
            <summary>
            Set the value if different.  Avoid setting local value if possible.
            return true when the value has been changed
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ClearIfSet(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Clears the dependency property when it is locally set on the given dependency object.
            Return false if the dependeny property is not locally set.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.FindVisualDesendent``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean})">
            <summary>
            Find all visual desendent of given type and condition using breath first search.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get all visual children in IEnumerable
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.DrawingPropertyMetadata">
            <summary>
            Unify the interface of PropertyMetadata in WPF and Silverlight.
            Providing the necessary notification about render, arrange or measure.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.#ctor(Microsoft.Expression.Media.DrawingPropertyMetadataOptions,System.Object)">
            <summary>
            This private Ctor should only be used by AttachCallback.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.AttachCallback(System.Object,Microsoft.Expression.Media.DrawingPropertyMetadataOptions,System.Windows.PropertyChangedCallback)">
            <summary>
            Chain InternalCallback() to attach the instance of DrawingPropertyMetadata on property callback.
            In Silverlight4-, the property metadata is thrown away after setting. Use callback to remember it.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.InternalCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Before chaining the original callback, trigger DrawingPropertyChangedEvent
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.GeometryHelper">
            <summary>
            Extension methods for Geometry related data structures (Point/Vector/Size/Rect)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Resize(System.Windows.Rect,System.Double)">
            <summary>
            Resize the rectangle to relative size while keeping center invariant.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Subtract(System.Windows.Point,System.Windows.Point)">
            <summary>
            Get the difference Vector between two Points
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Plus(System.Windows.Point,System.Windows.Point)">
            <summary>
            Memberwise plus for Point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Minus(System.Windows.Point,System.Windows.Point)">
            <summary>
            Memberwise minus for Point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.ConvertToPathGeometry(System.String)">
            <summary>
            Converts a string of mini-languages to a <see cref="T:PathGeometry"/>.
            </summary>
            <remarks>See: Path Markup Syntax(http://msdn.microsoft.com/en-us/library/cc189041(VS.95).aspx)</remarks>
            <param name="abbreviatedGeometry">The string of path mini-languages for describing geometric paths.</param>
            <returns>A <see cref="T:PathGeometry"/> converted from the the path mini-languages/></returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.FlattenFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Double)">
            <summary>
            Flattens a <see cref="T:PathFigure"/> and adds result points to given <paramref name="points"/>.
            </summary>
            <param name="figure">The input <see cref="T:PathFigure"/>.</param>
            <param name="points">The point list to which result points will append.</param>
            <param name="tolerance">A positive number specifying the maximum allowed error from result points to input path figure.  Value 0 allows algorithm to pick the tolerance automatically.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcPoint(System.Double)">
            <summary>
            Get the normalized arc in (0,0)(1,1) box.
            Zero degree is mapped to [0.5, 0] (up), and clockwise
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcPoint(System.Double,System.Windows.Rect)">
            <summary>
            Get the absolute arc point in given bound with given relative radius.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcAngle(System.Windows.Point)">
            <summary>
            Get the angle on arc relative to (0,0)(1,1) box.
            Zero degree is mapped to [0.5, 0] (up), and clockwise
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcAngle(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Get the angle on arc from given absolute point relative to bound
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeTransform(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Compute the transform that moves Rect from to Rect to.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeTransform(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Computes the transform from the coordinate space of one <c>UIElement</c> to another.
            </summary>
            <param name="from">The source element.</param>
            <param name="to">The destination element.</param>
            <returns>The transform between the <c>UIElement</c>s, or null if it cannot be computed.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeToAbsolutePoint(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Map relative point to absolute using the mapping from given bound to (0,0)(1,1) box.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.AbsoluteToRelativePoint(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Map absolute point to relative using the mapping from (0,0)(1,1) box to given bound.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetStretchBound(System.Windows.Rect,System.Windows.Media.Stretch,System.Windows.Size)">
            <summary>
            Compute the bound after stretch within given logical bound.
            If stretch to uniform, use given aspectRatio.
            If aspectRatio is empty, it's equivalent to Fill.
            If stretch is None, equivalent to Fill or Uniform.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Midpoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the mid point of given 2 points
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The mid point between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Dot(System.Windows.Vector,System.Windows.Vector)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="lhs">The first vector.</param>
            <param name="rhs">The second vector.</param>
            <returns>The dot product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Dot(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the dot product of two Points.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Distance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance between two points.
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The distance between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.SquaredDistance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the square of the distance between two points.
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The square of the distance between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Determinant(System.Windows.Point,System.Windows.Point)">
            <summary>
            Determinant of cross product.  Equivalent to directional area
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Normal(System.Windows.Point,System.Windows.Point)">
            <summary>
            Compute the normal direction vector of given line segments
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Perpendicular(System.Windows.Vector)">
            <summary>
            Compute perpendicular vector, 90 degrees counter-clockwise.
            Vector to right perpendicular result a vector to up.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GeometryEquals(System.Windows.Media.Geometry,System.Windows.Media.Geometry)">
            <summary>
            Returns whether the two geometries are identical.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureGeometryType``1(``0@,System.Windows.Media.Geometry@,System.Func{``0})">
            <summary>
            Ensure the value is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureGeometryType``1(``0@,System.Collections.Generic.IList{System.Windows.Media.Geometry},System.Int32,System.Func{``0})">
            <summary>
            Ensure the list[index] is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureSegmentType``1(``0@,System.Collections.Generic.IList{System.Windows.Media.PathSegment},System.Int32,System.Func{``0})">
            <summary>
            Ensure the list[index] is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.ComputeBSpline(System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Double)">
            <summary>
            de'Boor algorithm to subdevide BSpline into poly Bezier segments.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.MathHelper">
            <summary>
            Helper class providing static properties and methods related to floating point arithmetic.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.Epsilon">
            <summary>
            The minimum distance to consider two values are same.
            Note: internal floating point in MIL/SL is float, not double.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.TwoPI">
            <summary>
            The value of angle of a full circle.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.PentagramInnerRadius">
            <summary>
            The inner radius for pentagram polygon shape, at precision of 3 digits in percentage.
            (1 - Sin36 * Sin72 / Sin54) / (Cos36) ^ 2, which is 0.47210998990512996761913067272407
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.IsVerySmall(System.Double)">
            <summary>
            Determines whether a <c>System.Double</c> value is small enough to be considered
            equivalent to zero.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if value is smaller than <c>DoubleTolerance</c>;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.EnsureRange(System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Return the value that's within the given range
            Given min/max is null means no limit.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.Hypotenuse(System.Double,System.Double)">
            <summary>
            Computes the Euclidean norm of the vector (x, y).
            </summary>
            <param name="x">The first component.</param>
            <param name="y">The second component.</param>
            <returns>The Euclidean norm of the vector (x, y).</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.DoubleFromMantissaAndExponent(System.Double,System.Int32)">
            <summary>
            Computes a real number from the mantissa and exponent.
            </summary>
            <param name="x"></param>
            <param name="exp"></param>
            <returns>The value of x * 2^exp if successful.</returns>
            <remarks>See ::ldexp in any decent C language runtime library.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.IsFiniteDouble(System.Double)">
            <summary>
            Tests a double.
            </summary>
            <param name="x">The double to test.</param>
            <returns><c>true</c> if x is not a NaN and is not equal to plus or minus infinity;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathFigureHelper">
            <summary>
            Helper class to work with PathFigure
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.FlattenFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Double,System.Boolean)">
            <summary>
            Flatten the given figure and add to the point list.
            </summary>
            <param name="tolerance">The error tolerance. Must be possitive. Can be 0, fallback to default tolerance.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.AllSegments(System.Windows.Media.PathFigure)">
            <summary>
            Iterate all segments inside given figure, and returns correct start point for each segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncPolylineFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
            <summary>
            Synchronize the figure to the given list of points as a single polyline segment.
            Try to keep the change minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncPolyBezierFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
            <summary>
            Synchronize the figure to the given list of points as a single PolyBezierSegment.
            Try to keep the change minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncEllipseFigure(System.Windows.Media.PathFigure,System.Windows.Rect,System.Windows.Media.SweepDirection,System.Boolean)">
            <summary>
            Synchronize the given figure to be a closed ellipse with 2 arc segments.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathSegmentData">
            <summary>
            A Tuple data structure for PathSegment and corresponding StartPoint.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PolylineData">
            <summary>
            Represent a polyline consist with a list of connecting points.
            A closed polygon is represented by repeating the first point at the end.
            The differences, normals, angles, and lengths are computed on Demand.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.#ctor(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Construct a polyline with two or more points.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.Difference(System.Int32)">
            The forward difference vector of polyline.
            Points[i] + Differences[i] = Points[i+1]
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.SmoothNormal(System.Int32,System.Double,System.Double)">
            <summary>
            Compute the normal vector of given location (lerp(index, index+1, fraction).
            If the location is within range of cornerRadius, interpolate the normal direction.
            </summary>
            <param name="cornerRadius">The range of normal smoothless.  If zero, no smoothness and return the exact normal on index.</param>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.IsClosed">
            <summary>
            The polyline is closed when first and last point is repeated.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Count">
            <summary>
            The count of points in this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.TotalLength">
            <summary>
            The total arc length of this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Points">
            <summary>
            The point array of this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Lengths">
            <summary>
            The length between line segments, Points[i] to Points[i+1]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Normals">
            <summary>
            The list of normal vectors for each segment.
            Normals[i] is the normal of segment p[i] to p[i + 1].
            Normals[N-1] == Normals[N-2].
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Angles">
            <summary>
            The list of Cos(angle) between 2 line segments on point p[i]
            Note: The value is cos(angle) = Dot(u, v). It's not in degree.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.AccumulatedLength">
            <summary>
            The list of accumulated length from points[i] to points[0]
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.MarchLocation">
            <summary>
            The data structure to communicate with PathMarch algorithm.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetPoint(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Get the interpolated position of this this MarchLocation on given point list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetNormal(Microsoft.Expression.Drawing.Core.PolylineData,System.Double)">
            <summary>
            Get the interpolated normal direction of this this MarchLocation on given normal vector list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetArcLength(System.Collections.Generic.IList{System.Double})">
            <summary>
            Get the arc length of this MarchLocation to the start of the entire polyline.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Reason">
            <summary>
            The reason why this location is sampled.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Index">
            <summary>
            The index of the point on polyline point list.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Ratio">
            <summary>
            Ratio: [0, 1], which is always before / (before + after)
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Before">
            <summary>
            Arc length before stop point.  It's non-negative, and less than Length[index]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.After">
            <summary>
            Arc length after the stop point.  It's non-negative, and less than Length[index]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Remain">
            <summary>
            Remaining length within a step to hit next stop.  Positive to go forward. Negative to go backward.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PolylineHelper">
            <summary>
            Helper class to work with list of points
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineHelper.PathMarch(Microsoft.Expression.Drawing.Core.PolylineData,System.Double,System.Double,System.Func{Microsoft.Expression.Drawing.Core.MarchLocation,System.Double})">
            <summary>
            March the given polyline with given interval and output each stop through callback
            </summary>
            <param name="polyline">The polyline points to march on</param>
            <param name="startArcLength">The arc length to march before stopping at the first point.</param>
            <param name="cornerThreshold">The max angle between edges to be considered a corner vertex</param>
            <param name="stopCallback">Callback when marching algorithm stop at a point.  The callback returns the arc length for next stop.
            If the asked length is negative, march backwards. If callback returns NaN, finish marching.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineHelper.GetWrappedPolylines(System.Collections.Generic.IList{Microsoft.Expression.Drawing.Core.PolylineData},System.Double@)">
            <summary>
            Reorders the given list of polylines so that the polyline a given arclength into the list is the first.
            Polylines that preceded this line are concatenated to the end of the list, with the first polyline at the very end. 
            </summary>
            <param name="lines">A list of polylines.</param>
            <param name="startArcLength">The arclength into the entire list of polylines at which to find the start line.
            The arc length into that line is returned in this variable.</param>
            <returns>The reordered and wrapped list.</returns>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.RandomEngine">
            <summary>
            A random generator support uniform and gaussian distributions.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.RandomEngine.Gaussian">
            <summary>
            Generate a pair of independent standard normally distributed random numbers,
            zero expectation, unit variance, using polar form of the Box-Muller transformation.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.#ctor">
            <summary>
            Private constructor. Force to use factory methods.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a line segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a cubic bezier segment from quatratic curve (3 control points)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a cubic bezier segment with 4 control points.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.SimpleSegment.Points">
            <summary>
            Control points of path segment.  Length is variant.
            Line segment has 2 points, Cubic bezier has 4 points.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.TransformExtensions.TransformEquals(System.Windows.Media.Transform,System.Windows.Media.Transform)">
            <summary>
            Compares two transforms for an exact match.  Transforms with the same value but different structure(e.g. Translate(0,0) and Rotate(0) are not considered equivalent).
            </summary>
            <param name="firstTransform">The first transform.</param>
            <param name="secondTransform">The second transform.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Expression.Media.UnitType">
            <summary>
            Specifies the unit of thickness.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.UnitType.Pixel">
            <summary>
            Unit in pixels.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.UnitType.Percent">
            <summary>
            Unit in percentage relative to bounding box.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometrySource`1">
            <summary>
            Provides the base class of a source of geometry.
            It generate and cache the geometry based on input parameters and layout bounds.
            </summary>
            <remarks>
            A typical implementation will extend the UpdateCachedGeometry() to update this.cachedGeometry.
            This base class will then handle the invalidation, pipeline to geometry effects and caching realtive to layout bounds.
            An implementation should try to reuse the cached geometry as much as possible to avoid reconstruction in rendering thread.
            An implementation can extend the ComputeLogicalBounds to handle Stretch differently.
            </remarks>
            <typeparam name="TParameters">The type of geometry source parameter on which the base class is working on.</typeparam>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySource">
            <summary>
            Provides an interface to describe the source of a geometry.
            </summary>
            <remarks>
            This interface is designed to expose geometry source in a non-generic way.
            Typical implementation should subclass GeometrySource&lt;&gt; instead of implementing this interface directly.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.IGeometrySource.InvalidateGeometry">
            <summary>
            Notify the geometry is invalidated because of external changes.
            </summary>
            <remarks>
            Typically geometry is invalidated when parameters are changed.
            If any geometry has been invalidated externally, geometry will be recomputed regardless bounds' change.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.IGeometrySource.UpdateGeometry(Microsoft.Expression.Media.IGeometrySourceParameters,System.Windows.Rect)">
            <summary>
            Update the geometry using given parameter and layout bounds.
            Returns false if nothing has been updated.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.Geometry">
            <summary>
            Gets or sets the result geometry after the latest UpdateGeometry()
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.LogicalBounds">
            <summary>
            Gets the bounding box where geometry should stretch to.
            The actual geometry might be smaller or larger than this.
            <see cref="P:Microsoft.Expression.Media.IGeometrySource.LogicalBounds"/> should already take stroke thickness and stretch into consideration.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.LayoutBounds">
            <summary>
            Gets the actuall bound of FrameworkElement.
            <see cref="P:Microsoft.Expression.Media.IGeometrySource.LayoutBounds"/> includes logical bounds, stretch and stroke thickness.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometrySource`1.cachedGeometry">
            <summary>
            Specifics the geometry from the previous geometry effect process.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.InvalidateGeometry">
            <summary>
            Notify the geometry is invalidated because of external changes.
            </summary>
            <remarks>
            Typically geometry is invalidated when parameters are changed.
            If any geometry has been invalidated externally, geometry will be recomputed regardless bounds' change.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.UpdateGeometry(Microsoft.Expression.Media.IGeometrySourceParameters,System.Windows.Rect)">
            <summary>
            Update the geometry based on given parameters and layoutBounds.
            Returns false if geometry hasn't been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.UpdateCachedGeometry(`0)">
            <summary>
            Extend the way to provide geometry by implementing this function.
            Return true when any of the geometry is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Extend the way to handle stretch mode.
            Default is to always use Stretch.Fill and center stroke.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.ApplyGeometryEffect(Microsoft.Expression.Media.IGeometrySourceParameters,System.Boolean)">
            <summary>
            Apply geometry effect when dirty or forced, update this.Geometry.
            Otherwise, keep this.Geometry as this.cachedGeometry.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.Geometry">
            <summary>
            Gets or sets the result geometry after the latest UpdateGeometry()
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.LogicalBounds">
            <summary>
            Gets the bounding box where geometry should stretch to.
            The actual geometry might be smaller or larger than this.
            <see cref="P:Microsoft.Expression.Media.GeometrySource`1.LogicalBounds"/> should already take stroke thickness and stretch into consideration.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.LayoutBounds">
            <summary>
            Gets the actuall bound of FrameworkElement.
            <see cref="P:Microsoft.Expression.Media.GeometrySource`1.LayoutBounds"/> includes logical bounds, stretch and stroke thickness.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Expression.Media.ArcGeometrySource.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Arc think Stretch.None is same as Stretch.Fill, assuming aspect ratio = 1:1
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.ArcGeometrySource.NormalizeThickness(Microsoft.Expression.Media.IArcGeometrySourceParameters)">
            <summary>
            Normalize thickness, both relative to bounding box and absolute pixel.
            realtive thickness = 0 -> full circle radius or clamped.
            realtive thickness = 1 -> shrinked to a dot, or degenerated.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.ArrowOrientation">
            <summary>
            Specifies the direction the arrow points.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Left">
            <summary>
            The arrow points to left.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Right">
            <summary>
            The arrow points to right.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Up">
            <summary>
            The arrow points up.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Down">
            <summary>
            The arrow points down.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.BlockArrowGeometrySource.ArrowBuilder">
            <summary>
                 B
                /|
               / C--D
              A     |
               \ C--D
                \|
                 B
            Algorithm only use Width/Height assuming top-left at 0,0
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.CalloutStyle">
            <summary>
            Specifies the rendering style of a Callout shape
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Rectangle">
            <summary>
            A rectangle shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.RoundedRectangle">
            <summary>
            A rounded rectangle shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Oval">
            <summary>
            A oval shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Cloud">
            <summary>
            A cloud shaped callout.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateEdge(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double,System.Boolean)">
            <summary>
            Update the edge line, and connect to anchor point if necessary
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdatePolylineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Update polyline segment, connecting start, anchor and end point with Callout style
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateLineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point)">
            <summary>
            Update the line segment to given point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.ComputeCorners(System.Double)">
            <summary>
            Compute the corner points, clockwise, 8 points for 4 corners
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateCornerArc(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point)">
            <summary>
            Corner Arc is always smaller arc with 90 degree
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometryEffect">
            <summary>
            Provides the base class of GeometryEffect that transform a geometry into another geometry.
            </summary>
            <remarks>
            This class provides the basic implementation of processing the rendered geometry of a IShape before it's passed to rendering.
            A typical implementation will extend the virtual function <see cref="F:ProcessGeometry"/> to transform input geometry.
            <see cref="T:GeometryEffect"/> is typically attached to <see cref="T:IShape"/> as an attached property and activated when <see cref="T:IShape"/> geometry is updated.
            The <see cref="P:OutputGeometry"/> of a <see cref="T:GeometryEffect"/> will replace the rendered geometry in <see cref="T:IShape"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.GetGeometryEffect(System.Windows.DependencyObject)">
            <summary>
            Gets the geometry effect as attached property on given dependency object.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.SetGeometryEffect(System.Windows.DependencyObject,Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Sets the geometry effect as attached property on given dependency object.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.CloneCurrentValue">
            <summary>
            Creates a modifiable clone (deep copy) of the <see cref="T:GeometryEffect"/> using its current values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.DeepCopy">
            <summary>
            Makes a deep copy of the geometry effect. Implements CloneCurrentValue in Silverlight.
            </summary>
            <returns>A clone of current instance of geometry effect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Equals(Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Tests if given geometry effect is equivalent to the current instance.
            </summary>
            <param name="geometryEffect">a geometry effect compare with.</param>
            <returns>Returns true when two effects renders a same appearance.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometryEffect.cachedGeometry">
            <summary>
            Specifics the geometry from the previous geometry effect process.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.InvalidateGeometry">
            <summary>
            Invalidate the geometry effect without actually compute the geometry.
            It will notify all parent shapes or effects to invalidate accordingly.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.ProcessGeometry(System.Windows.Media.Geometry)">
            <summary>
            Process geometry effect on given input geometry.
            Result is stored in GeometryEffect.OutputGeometry.
            </summary>
            <returns>Return false if nothing has been changed.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.UpdateCachedGeometry(System.Windows.Media.Geometry)">
            <summary>
            Extend the way of updating cachedGeometry based on given input geometry.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Detach">
            <summary>
            Notified when detached from parent chain.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Attach(System.Windows.DependencyObject)">
            <summary>
            Notified when attached to a parent chain.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.InvalidateParent(System.Windows.DependencyObject)">
            <summary>
            Invalidate the geometry on given dependency object when
            the object is a valid parent type (IShape or GeometryEffect).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.CreateInstanceCore">
            <summary>
            Implement the Freezable in WPF.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.DefaultGeometryEffect">
            <summary>
            The default geometry effect that does nothing but passing through the input geometry.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.OutputGeometry">
            <summary>
            Gets the output geometry of this geometry effect.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.Parent">
            <summary>
            Parent can be either IShape or GeometryEffectGroup.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometryEffectConverter">
            <summary>
            Provides the conversion between string and geometry effect
            </summary>
            <remarks>
            This class enables the brief sytax in xaml like <code>GeometryEffect="Sketch"</code>
            It will create a clone of instance of geometry effect so it can be used as resources.
            </remarks>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometryEffectConverter.registeredEffects">
            <summary>
            Build a preset list of supported geometry effects.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A GeometryEffect can be converted from string type.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A GeometryEffect can be converted to string type.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts a string to a geometry effect.  Fallback value is null.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a geometry effect into a string.  Fallback value is null.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySourceExtensions">
            <summary>
            Provides helper extension methods to work with IGeometrySource and parameters.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.ArrowType">
            <summary>
            Specifies the Arrow head type.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.NoArrow">
            <summary>
            No arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.Arrow">
            <summary>
            A triagle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.StealthArrow">
            <summary>
            A stealth triangle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.OpenArrow">
            <summary>
            An open triangle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.OvalArrow">
            <summary>
            An oval head.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.CornerType">
            <summary>
            Specifies the corner location.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.TopLeft">
            <summary>
            On top left of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.TopRight">
            <summary>
            On top right of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.BottomRight">
            <summary>
            On bottom right of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.BottomLeft">
            <summary>
            On bottom left of bounding box.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.PolygonGeometrySource.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Polygon think Stretch.None is same as Stretch.Fill
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.SketchGeometryEffect">
            <summary>
            A geometry effect to transform any geometry into a Sketch style as in SketchFlow.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.DeepCopy">
            <summary>
            Makes a deep copy of the geometry effect
            </summary>
            <returns>A clone of current instance of geometry effect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.Equals(Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Tests if given geometry effect is equivalent to the current instance.
            </summary>
            <param name="geometryEffect">a geometry effect compare with.</param>
            <returns>Returns true when two effects renders a same appearance.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.UpdateCachedGeometry(System.Windows.Media.Geometry)">
            <summary>
            Updating cachedGeometry based on given input geometry.
            </summary>
            <param name="input">A input geometry</param>
            <returns>Returns true when anything on cachedGeometry has been updated.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.SketchGeometryEffect.randomSeed">
            <summary>
            Use the same random seed on creation to keep visual flickering minimum
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.GetEffectiveSegments(System.Windows.Media.PathFigure)">
            <summary>
            Iterates all simple segments in given path figure including the closing chord.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Shapes.Arc">
            <summary>
            Renderes an Arc shape supporting Arc, Ring and Pie mode controled by ArcThickness.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Shapes.PrimitiveShape">
            <summary>
            Platform neutral implementation of Shape deriving from WPF:Shape or SL:Path
            </summary>
            <summary>
            Provides WPF implementation of Shap who derives from platform Shape.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.CreateGeometrySource">
            <summary>
            Extend how the shape is drawn with creating geometry source
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.MeasureOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
            <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes, or possibly on other considerations such as fixed container size.</returns>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <remarks>
            In WPF, measure override works from Shape.DefiningGeometry which is not always as expected
            see bug 99497 for details where WPF is not having correct measure by default.
            
            In Silverlight, measure override on Path does not work the same as primitive shape works.
            
            We should return the smallest size this shape can correctly render without clipping.
            By default a shape can render as small as a dot, therefore returning the strokethickness.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Shapes.PrimitiveShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Shapes.PrimitiveShape.GeometryMargin">
            <summary>
            Gets or sets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Shapes.PrimitiveShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.PrimitiveShape.RenderedGeometry">
            <summary>
            Gets a value that represents the final rendered <see cref="T:System.Windows.Media.Geometry"/> of a <see cref="T:System.Windows.Shapes.Shape"/>.
            </summary>
            <returns>The final rendered <see cref="T:System.Windows.Media.Geometry"/> of a <see cref="T:System.Windows.Shapes.Shape"/>.</returns>
            <remarks>The WPF primitive shape hides base class RenderedGeometry to provide a local storage and matches Silverlight primitive shape interface.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
            <value>The start angle in degrees. 0 degree is pointing up.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.EndAngle">
            <summary>
            Gets or sets the end angle.
            </summary>
            <value>The end angle in degree. 0 degree is pointing up.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.ArcThickness">
            <summary>
            Gets or sets the arc thickness.
            </summary>
            <value>The arc thickness in pixels or percentage depending on "ArcThicnessUnit"/>.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.ArcThicknessUnit">
            <summary>
            Gets or sets the arc thickness unit.
            </summary>
            <value>The arc thickness unit, either pixel or percentage.</value>
        </member>
        <member name="T:Microsoft.Expression.Shapes.BlockArrow">
            <summary>
            Renders a block arrow shape supporting resizable arrow head and body.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation where the arrow is pointing to.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.ArrowheadAngle">
            <summary>
            Gets or sets the arrowhead angle.
            </summary>
            <value>The arrowhead angle in degrees.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.ArrowBodySize">
            <summary>
            Gets or sets the size of the arrow body.
            </summary>
            <value>The size of the arrow body in pixels.</value>
        </member>
        <member name="T:Microsoft.Expression.Shapes.RegularPolygon">
            <summary>
            Renders a regular polygon shape or corresponding star shape with variable number of points.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.RegularPolygon.PointCount">
            <summary>
            Gets or sets the number of points of the <see cref="T:Microsoft.Expression.Shapes.RegularPolygon"/>
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.RegularPolygon.InnerRadius">
            <summary>
            Gets or sets the the distance between the center and the innermost point.
            </summary>
            <value>The distance between the center and the innermost point.</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\en\Microsoft.Expression.Interactions.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Interactions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Interactivity.Core.ActionCommand">
            <summary>
            A basic implementation of ICommand that wraps a method that takes no parameters or a method that takes one parameter.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Core.ActionCommand"/> class.
            </summary>
            <param name="action">The action.</param>
            <remarks>Use this constructor to provide an action that ignores the ICommand parameter.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Core.ActionCommand"/> class.
            </summary>
            <param name="objectAction">An action that takes an object parameter.</param>
            <remarks>Use this constructor to provide an action that uses the object parameter passed by the Execute method.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
            <returns>
            Always returns true.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">Data used by the command.  If the command does not require data to be passed, this object can be set to null.</param>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether the command should execute. Will not be fired by ActionCommand.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.CallMethodAction">
            <summary>
            Calls a method on a specified object when invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.CallMethodAction.Invoke(System.Object)">
            <summary>
            Invokes the action.
            </summary>
            <param name="parameter">The parameter to the action. If the Action does not require a parameter, the parameter may be set to a null reference.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.CallMethodAction.OnAttached">
            <summary>
            Called after the action is attached to an AssociatedObject.
            </summary>
            <remarks>Override this to hook up functionality to the AssociatedObject.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.CallMethodAction.OnDetaching">
            <summary>
            Called when the action is getting detached from its AssociatedObject, but before it has actually occurred.
            </summary>
            <remarks>Override this to unhook functionality from the AssociatedObject.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.CallMethodAction.TargetObject">
            <summary>
            The object that exposes the method of interest. This is a dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.CallMethodAction.MethodName">
            <summary>
            The name of the method to invoke. This is a dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ChangePropertyAction">
            <summary>
            An action that will change a specified property to a specified value when invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Core.ChangePropertyAction"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Invoke(System.Object)">
            <summary>
            Invokes the action.
            </summary>
            <param name="parameter">The parameter to the action. If the Action does not require a parameter, the parameter may be set to a null reference.</param>
            <exception cref="T:System.ArgumentException">A property with <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName"/> could not be found on the Target.</exception>
            <exception cref="T:System.ArgumentException">Could not set <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName"/> to the value specified by <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Value"/>.</exception>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName">
            <summary>
            Gets or sets the name of the property to change. This is a dependency property.
            </summary>
            <value>The name of the property to change.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Value">
            <summary>
            Gets or sets the value to set. This is a dependency property.
            </summary>
            <value>The value to set.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Duration">
            <summary>
            Gets or sets the duration of the animation that will occur when the ChangePropertyAction is invoked.  This is a dependency property.
            If the duration is unset, no animation will be applied.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Increment">
            <summary>
            Increment by Value if true; otherwise, set the value directly. If the property cannot be incremented, it will instead try to set the value directly.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ComparisonCondition">
            <summary>
            Represent one ternary condition
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ComparisonCondition.Evaluate">
            <summary>
            Method that evaluate the condition. Note that this method can throw ArgumentException if the operator is
            incompatible with the type. For instance, operator LessThan, LessThanOrEqual, GreaterThan, GreaterThanOrEqual
            require both operators to implement IComparable. 
            </summary>
            <returns>return true if the condition has been met, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ComparisonCondition.EnsureBindingUpToDate">
            <summary>
            Ensure that any binding on DP operands are up to date.  
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ComparisonCondition.LeftOperand">
            <summary>
            Get or Set the left operand
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ComparisonCondition.RightOperand">
            <summary>
            Get or Set the right operand
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ComparisonCondition.Operator">
            <summary>
            Get or Set the comparison operator. 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ComparisonConditionType">
            <summary>
            enumeration of different comparison operator
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.ComparisonLogic.EvaluateImpl(System.Object,Microsoft.Expression.Interactivity.Core.ComparisonConditionType,System.Object)">
            <summary>
            This method evaluates operands 
            </summary>
            <param name="leftOperand">left operand from the LeftOperand property</param>
            <param name="operatorType">operator from Operator property</param>
            <param name="rightOperand">right operand from the RightOperand property</param>
            <returns>return true if the condition is met, false otherwise</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.ComparisonLogic.EvaluateComparable(System.IComparable,Microsoft.Expression.Interactivity.Core.ComparisonConditionType,System.IComparable)">
            <summary>
            Evalute operands that both implement IComparable interface
            </summary>
            <param name="leftOperand">left operand from the LeftOperand property</param>
            <param name="operatorType">operator from Operator property</param>
            <param name="rightOperand">right operand from the LeftOperand property</param>
            <returns>true if the condition is met, false otherwise</returns>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ForwardChaining">
            <summary>
            Forward chaining
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ConditionalExpression">
            <summary>
            Represent a conditional expression that we set on a ConditionBehavior.Condition property. 
            Contains a list of conditions that gets evaluated in order return true or false for ICondition.Evaluate(). 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ICondition">
            <summary>
            Interface that a given object must implement in order to be 
            set on a ConditionBehavior.Condition property. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ConditionalExpression.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Core.ConditionalExpression"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ConditionalExpression.Evaluate">
            <summary>
            Goes through the Conditions collection and evalute each condition based on 
            ForwardChaining property.
            </summary>
            <returns>true, conditions are met, false conditions are not met</returns>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ConditionalExpression.ForwardChaining">
            <summary>
            Get or set forward chaining for the conditions
            If forward chaining is set to ForwardChaining.And, all conditions must be met.
            If forward chaining is set to ForwardChaining.or, only one condition must be met.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ConditionalExpression.Conditions">
            <summary>
            Return the Condition collections
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ConditionBehavior">
            <summary>
            A behavior that attach to a trigger and control the conditions
            to fire the actions. 
            </summary>
            
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ConditionBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Core.ConditionBehavior"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ConditionBehavior.OnPreviewInvoke(System.Object,System.Windows.Interactivity.PreviewInvokeEventArgs)">
            <summary>
            Event handler listening to the preview invoke event fired by 
            the trigger. Setting PreviewInvokeEventArgs.Cancelling to true will
            cancel the invocation.
            </summary>
            <param name="sender">the trigger base objec</param>
            <param name="e">object of type PreviewInvokeEventArgs where e.Cancelling can be set to true</param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ConditionBehavior.Condition">
            <summary>
            Get or Set the IConditon object on behavior
            </summary>
            <value>The name of the condition to change.</value>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.DataBindingHelper">
            <summary>
            Helper class for managing binding expression on dependency objects
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.DataBindingHelper.EnsureDataBindingUpToDateOnMembers(System.Windows.DependencyObject)">
            <summary>
            Ensure that all DP on an action with binding expression are
            up to date. DataTrigger fires during data binding phase. Since
            actions are children of the trigger, any bindings on the action
            may not be up to date. This routine is called before the action
            is invoked in order to guarantee that all bindings are up to date
            with the most current data. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.DataBindingHelper.EnsureDataBindingOnActionsUpToDate(System.Windows.Interactivity.TriggerBase{System.Windows.DependencyObject})">
            <summary>
            Ensures that all binding expression on actions are up to date
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.DataBindingHelper.EnsureBindingUpToDate(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
             This helper function ensures that if a dependency property on a dependency object
             has a binding expression, the binding expression is up to date. 
            </summary>
            <param name="target"></param>
            <param name="dp"></param>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.DataStateBehavior">
            <summary>
            Toggles between two states based on a conditional statement.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.DataStateBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>Override this to hook up functionality to the AssociatedObject.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.DataStateBehavior.IsElementLoaded(System.Windows.FrameworkElement)">
            <summary>
            A helper function to take the place of FrameworkElement.IsLoaded, as Silverlight doesn't have a property like that.
            </summary>
            <param name="element">The element of interest.</param>
            <returns>True if the element has been loaded; otherwise, false</returns>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.DataStateBehavior.Binding">
            <summary>
            Gets or sets the binding that produces the property value of the data object. This is a dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.DataStateBehavior.Value">
            <summary>
            Gets or sets the value to be compared with the property value of the data object. This is a dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.DataStateBehavior.TrueState">
            <summary>
            Gets or sets the name of the visual state to transition to when the condition is met. This is a dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.DataStateBehavior.FalseState">
            <summary>
            Gets or sets the name of the visual state to transition to when the condition is not met. This is a dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.DataStoreChangedTrigger">
            <summary>
            Trigger designed to be binded on a data store property. Fires when the property changes
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.PropertyChangedTrigger">
             <summary>
             Represents a trigger that performs actions when the bound data have changed. 
             </summary>
            UA_REVIEW:chabiss
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.PropertyChangedTrigger.EvaluateBindingChange(System.Object)">
            <summary>
            Called when the binding property has changed. 
            UA_REVIEW:chabiss
            </summary>
            <param name="args"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> argument.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.PropertyChangedTrigger.OnAttached">
            <summary>
            Called after the trigger is attached to an AssociatedObject.
            UA_REVIEW:chabiss
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.PropertyChangedTrigger.OnDetaching">
            <summary>
            Called when the trigger is being detached from its AssociatedObject, but before it has actually occurred.
            UA_REVIEW:chabiss
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.PropertyChangedTrigger.Binding">
             <summary>
             Binding object the trigger will listen to and fire on change.  
             </summary>
            UA_REVIEW:chabiss
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.DataTrigger">
            <summary>
            Represents a trigger that performs actions when the bound data meets a specified condition.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.DataTrigger.EvaluateBindingChange(System.Object)">
            <summary>
            Called when the binding property has changed. 
            UA_REVIEW:chabiss
            </summary>
            <param name="args"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> argument.</param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.DataTrigger.Value">
            <summary>
            Gets or sets the value to be compared with the property value of the data object. This is a dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.DataTrigger.Comparison">
            <summary>
            Gets or sets the type of comparison to be performed between the specified values. This is a dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager">
            <summary>
            ExtendedVisualStateManager is a custom VisualStateManager that can smooth out the animation of layout properties.
            With this custom VisualStateManager, states can include changes to properties like Grid.Column, can change element heights to or from Auto, and so on.
            These changes will be smoothed out over time using the GeneratedDuration and GeneratedEasingFunction of the appropriate transition.
            See the "VisualStateManager overrides" region below for a general description of the algorithm.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.UseFluidLayoutProperty">
            <summary>
            A VisualStateGroup can use Fluid Layout or not.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.RuntimeVisibilityPropertyProperty">
            <summary>
            Visibility is shadowed by a custom attached property at runtime.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValuesProperty">
            <summary>
            A VisualStateGroup keeps a list of these original values in an attached property.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutStoryboardProperty">
            <summary>
            For every state, the layout-specific properties get extracted and then are attached to the state. These properties are removed from the state itself.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CurrentStateProperty">
            <summary>
            Remember the current state.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.TransitionEffectProperty">
            <summary>
            The TransitionEffect to use when the state changes.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.TransitionEffectStoryboardProperty">
            <summary>
            The TransitionEffectStoryboard in use during the state change.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.DidCacheBackgroundProperty">
            <summary>
            The cached background in use during the state change.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CachedBackgroundProperty">
            <summary>
            The cached background in use during the state change.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.MovingElements">
            <summary>
            This is the set of elements that are currently in motion.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutTransitionStoryboard">
            <summary>
            This is the storyboard that is animating the transition.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutProperties">
            <summary>
            This list contains all the known layout properties.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.StopAnimations">
            <summary>
            Stop the animation and replace the layout changes that were made to support that animation.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.FindTransition(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState)">
            <summary>
            Locate the transition that VisualStateManager will use to animate the change, so that the layout animation can match the duration and ease.
            </summary>
            <param name="group">The group in which the transition is taking place</param>
            <param name="previousState">The state that you are coming from</param>
            <param name="state">The state you are going to</param>
            <returns>The transition</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.ExtractLayoutStoryboard(System.Windows.VisualState)">
            <summary>
            Remove all layout-affecting properties from the Storyboard for the state and cache them in an attached property.
            </summary>
            <param name="state">The state you are moving to</param>
            <returns>A Storyboard containing the layout properties in that state</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.FindTargetElements(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            The set of target elements is the set of all elements that might have moved in a layout transition. This set is the closure of:
             - Elements with layout properties animated in the state.
             - Siblings of elements in the set.
             - Parents of elements in the set.
             
            Subsequent code will check these rectangles both before and after the layout change.
            </summary>
            <param name="control">The control whose layout is changing state</param>
            <param name="layoutStoryboard">The storyboard containing the layout changes</param>
            <param name="originalValueRecords">Any previous values from previous state navigations that might be reverted</param>
            <param name="movingElements">The set of elements currently in motion, if there is a state change transition ongoing</param>
            <returns>The full set of elements whose layout may have changed</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetRectsOfTargets(System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Get a set of rectangles for all the elements in the target list.
            </summary>
            <param name="targets">The set of elements to consider</param>
            <param name="movingElements">The set of elements currently in motion</param>
            <returns>A Dictionary mapping elements to their rects</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetLayoutRect(System.Windows.FrameworkElement)">
            <summary>
            Get the layout rectangle of an element, by getting the layout slot and then computing which portion of the slot is being used.
            </summary>
            <param name="element">The element whose rect we want to get</param>
            <returns>The layout rect of that element</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetOldOpacities(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Get the opacities of elements at the time of the state change, instead of visibilities, because the state change may be in process and the current value is the most important.
            </summary>
            <param name="control">The control whose state is changing</param>
            <param name="layoutStoryboard">The storyboard with the layout properties</param>
            <param name="originalValueRecords">The set of original values</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.SetLayoutStoryboardProperties(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord})">
            <summary>
            Go through the layout Storyboard and set all the properties by using SetValue to enable calling UpdateLayout without
            ticking the timeline, which would cause a render.
            All values that are overwritten will be stored in the collection of OriginalValueRecords so that they can be replaced later.
            </summary>
            <param name="control">The control whose state is changing</param>
            <param name="layoutStoryboard">The storyboard holding the layout properties</param>
            <param name="originalValueRecords">The store of original values</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.WrapMovingElementsInCanvases(System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Windows.Rect},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Windows.Rect})">
            <summary>
            Take all the elements that will be moving as a result of the layout animation, and wrap them in Canvases so that
            they do not affect their sibling elements.
            </summary>
            <param name="movingElements">The set of elements that will be moving</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.UnwrapMovingElementsFromCanvases(System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Take all the elements that have been moving as a result of the layout animation, and unwrap them from their Canvases.
            </summary>
            <param name="movingElements">The set of elements that have been moving</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CopyLayoutProperties(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Copy the layout properties from the source element to the target element, clearing them from the source.
            </summary>
            <param name="source">The source of the layout properties</param>
            <param name="target">The destination of the layout properties</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CreateLayoutTransitionStoryboard(System.Windows.VisualTransition,System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Double})">
            <summary>
            Create the actual storyboard that will be used to animate the transition. Use all previously calculated results.
            </summary>
            <param name="duration">The duration of the animation</param>
            <param name="ease">The easing function to be used in the animation</param>
            <param name="movingElements">The set of elements that will be moving</param>
            <param name="oldOpacities">The old opacities of the elements whose viisibility is changing</param>
            <returns>The storyboard</returns>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord">
            <summary>
            OriginalValueRecord remembers the original value of a property that was changed in a state.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.FluidMoveScope">
            <summary>
            This enumerated type indicates whether a FluidMoveBehavior applies to the element to which it is attached, or to the children of that element.
            "Self" is useful when there is a single element that should behave in a special manner; "Children" is useful when the same behavior should apply to all
            children of a WrapPanel or to the ItemsHost Panel of an ItemsControl.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.TagType">
            <summary>
            This enumerated type indicates whether an element is identified by itself, or by its DataContext.
            DataContext identification allows movement from one data-driven location to another.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehaviorBase.AppliesToProperty">
            <summary>
            DependencyProperty for the scope of the behavior. See FluidMoveScope for more details.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehaviorBase.IsActiveProperty">
            <summary>
            DependencyProperty for the active state of the behavior.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehaviorBase.TagProperty">
            <summary>
            DependencyProperty for ability to use the element as its own tag, or the binding on the element.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehaviorBase.TagPathProperty">
            <summary>
            DependencyProperty for the extra path to add to the binding when UsaBindingAsTag is true.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehaviorBase.IdentityTagProperty">
            <summary>
            Identity tag used to detect element motion between containers.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehaviorBase.AppliesTo">
            <summary>
            Indicates whether the behavior applies just to this element, or to all children of the element (if the element is a Panel).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehaviorBase.IsActive">
            <summary>
            Indicates whether the behavior is currently active.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehaviorBase.Tag">
            <summary>
            Indicates whether to use the element as its own tag, or use the binding on the element as the tag.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehaviorBase.TagPath">
            <summary>
            Extra path to add to the binding when TagType is specified.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.FluidMoveBehaviorBase.TagData">
            <summary>
            Private structure that stores all relevant data pertaining to a tagged item
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior">
            <summary>
            Behavior that watches an element (or a set of elements) for layout changes, and moves the element smoothly to the new position when needed.
            This behavior does not animate the size or visibility of an element; it only animates the offset of that element within its parent container.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.DurationProperty">
            <summary>
            DependencyProperty for the duration of the move.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.InitialTagProperty">
            <summary>
            DependencyProperty for the tag type to use just before the object is loaded.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.InitialTagPathProperty">
            <summary>
            DependencyProperty for the extra path to add to the binding when UsaBindingAsTag is true.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.InitialIdentityTagProperty">
            <summary>
            Identity tag used to detect element motion between containers.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.FloatAboveProperty">
            <summary>
            DependencyProperty for the FloatAbove flag.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.EaseXProperty">
            <summary>
            DependencyProperty for the EasingFunction to use for the horizontal component of the move.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.EaseYProperty">
            <summary>
            DependencyProperty for the EasingFunction to use for the vertical component of the move.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.OverlayProperty">
            <summary>
            Remember the popup/adorner being used, in case of element motion between containers with FloatAbove = true.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.CacheDuringOverlayProperty">
            <summary>
            Opacity cache used when floating a popup.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.HasTransformWrapperProperty">
            <summary>
            Marks the animation transform.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.Duration">
            <summary>
            The duration of the move.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.InitialTag">
            <summary>
            Spawning point for this item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.InitialTagPath">
            <summary>
            Extra path to add to the binding when TagType is specified.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.FloatAbove">
            <summary>
            Flag that says whether elements are allowed to float above their containers (in a Popup or Adorner) when changing containers.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.EaseX">
            <summary>
            EasingFunction to use for the horizontal component of the move.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.EaseY">
            <summary>
            EasingFunction to use for the vertical component of the move.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.AdornerContainer">
            <summary>
            Simple helper class to allow any UIElements to be used as an Adorner.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.GoToStateAction">
            <summary>
            An action that will transition a FrameworkElement to a specified VisualState when invoked.
            </summary>
            <remarks>
            If the TargetName property is set, this action will attempt to change the state of the targeted element. If not, it walks
            the element tree in an attempt to locate an alternative target that defines states. ControlTemplate and UserControl are 
            two common possibilities.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.GoToStateAction.OnTargetChanged(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Called when the target changes. If the TargetName property isn't set, this action has custom behavior.
            </summary>
            <param name="oldTarget"></param>
            <param name="newTarget"></param>
            <exception cref="T:System.InvalidOperationException">Could not locate an appropriate FrameworkElement with states.</exception>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.GoToStateAction.Invoke(System.Object)">
            <summary>
            This method is called when some criteria is met and the action is invoked.
            </summary>
            <param name="parameter"></param>
            <exception cref="T:System.InvalidOperationException">Could not change the target to the specified StateName.</exception>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.GoToStateAction.UseTransitions">
            <summary>
            Whether or not to use a VisualTransition to transition between states.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.GoToStateAction.StateName">
            <summary>
            The name of the VisualState.  
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Input.KeyTrigger">
            <summary>
            A Trigger that is triggered by a keyboard event.  If the target Key and Modifiers are detected, it fires.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.Key">
            <summary>
            The Key that must be pressed for the Trigger to fire.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.Modifiers">
            <summary>
            The Modifiers that must be active for the Trigger to fire (the default is no modifiers pressed).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.ActiveOnFocus">
            <summary>
            If true, the Trigger only listens to its trigger Source object, which means that element must have focus for the trigger to fire.
            If false, the Trigger listens at the root, so any unhandled KeyDown/Up messages will be caught.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.FiredOn">
            <summary>
            Whether to listen to the KeyDown or KeyUp event.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction">
            <summary>
            An action that will launch a process to open a file or Uri. For files, this action will launch the default program 
            for the given file extension. A Uri will open in a web browser.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction.Invoke(System.Object)">
            <summary>
            This method is called when some criteria is met and the action is invoked.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction.Path">
            <summary>
            The file or Uri to open. 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior">
            <summary>
            Repositions the attached element in response to mouse drag gestures on the element.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.XProperty">
            <summary>
            DependencyProperty for the X position of the dragged element, relative to the left of the root element.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.YProperty">
            <summary>
            DependencyProperty for the Y position of the dragged element, relative to the top of the root element.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ConstrainToParentBoundsProperty">
            <summary>
            DependencyProperty for the ConstrainToParentBounds property. If true, the dragged element will be constrained to stay within the bounds of its parent container.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.UpdatePosition(System.Windows.Point)">
            <summary>
            Attempts to update the position of the associated element to the specified coordinates.
            </summary>
            <param name="point">The desired position of the element in root coordinates.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ApplyTranslation(System.Double,System.Double)">
            <summary>
            Applies a relative position translation to the associated element.
            </summary>
            <param name="x">The X component of the desired translation in root coordinates.</param>
            <param name="y">The Y component of the desired translation in root coordinates.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ApplyTranslationTransform(System.Double,System.Double)">
            <summary>
            Applies the given translation to the RenderTransform of the associated element.
            </summary>
            <param name="x">The X component of the translation in parent coordinates.</param>
            <param name="y">The Y component of the translation in parent coordinates.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.CloneTransform(System.Windows.Media.Transform)">
            <summary>
            Does a recursive deep copy of the specified transform.
            </summary>
            <param name="transform">The transform to clone.</param>
            <returns>A deep copy of the specified transform, or null if the specified transform is null.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the type of the Transform is not recognized.</exception>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.UpdatePosition">
            <summary>
            Updates the X and Y properties based on the current rendered position of the associated element.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.RectContainsRect(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Check if one Rect is contained by another.
            </summary>
            <param name="rect1">The containing Rect.</param>
            <param name="rect2">The contained Rect.</param>
            <returns><c>true</c> if rect1 contains rect2; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.TransformAsVector(System.Windows.Media.GeneralTransform,System.Double,System.Double)">
            <summary>
            Transforms as vector.
            </summary>
            <param name="transform">The transform.</param>
            <param name="x">The X component of the vector.</param>
            <param name="y">The Y component of the vector.</param>
            <returns>A Point containing the values of X and Y transformed by transform as a Vector.</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.GetTransformOffset(System.Windows.Media.GeneralTransform)">
            <summary>
            Gets the transform offset.
            </summary>
            <param name="transform">The transform.</param>
            <returns>The offset of the transform.</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>Override this to hook up functionality to the AssociatedObject.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.OnDetaching">
            <summary>
            Called when the behavior is getting detached from its AssociatedObject, but before it has actually occurred.
            </summary>
            <remarks>Override this to unhook functionality from the AssociatedObject.</remarks>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.DragBegun">
            <summary>
            Occurs when a drag gesture is initiated.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.Dragging">
            <summary>
            Occurs when a drag gesture update is processed.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.DragFinished">
            <summary>
            Occurs when a drag gesture is finished.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.X">
            <summary>
            Gets or sets the X position of the dragged element, relative to the left of the root element. This is a dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.Y">
            <summary>
            Gets or sets the Y position of the dragged element, relative to the top of the root element. This is a dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ConstrainToParentBounds">
            <summary>
            Gets or sets a value indicating whether the dragged element is constrained to stay within the bounds of its parent container. This is a dependency property.
            </summary>
            <value>
            	<c>true</c> if the dragged element should be constrained to its parents bounds; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ActualPosition">
            <summary>
            Gets the on-screen position of the associated element in root coordinates.
            </summary>
            <value>The on-screen position of the associated element in root coordinates.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ElementBounds">
            <summary>
            Gets the element bounds in element coordinates.
            </summary>
            <value>The element bounds in element coordinates.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ParentElement">
            <summary>
            Gets the parent element of the associated object.
            </summary>
            <value>The parent element of the associated object.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.RootElement">
            <summary>
            Gets the root element of the scene in which the associated object is located.
            </summary>
            <value>The root element of the scene in which the associated object is located.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.RenderTransform">
            <summary>
            Gets and sets the RenderTransform of the associated element.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.PlaySoundAction">
            <summary>
            An Action that will play a sound to completion.
            </summary>
            <remarks>
            This Action is intended for use with short sound effects that don't need to be stopped or controlled. If you're trying 
            to create a music player or game, it may not meet your needs.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Media.PlaySoundAction"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.SetMediaElementProperties(System.Windows.Controls.MediaElement)">
            <summary>
            When the Action is invoked, this method is used to customize the dynamically created MediaElement.
            </summary>
            <remarks>
            This method may be useful for Action authors who wish to extend PlaySoundAction. If you wanted to control the 
            MediaElement Balance property, you could inherit from PlaySoundAction and override this method.
            </remarks>
            <param name="mediaElement"></param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Invoke(System.Object)">
            <summary>
            This method is called when some criteria are met and the action should be invoked. 
            </summary>
            <remarks>
            Each invocation of the Action plays a new sound.  Although the implementation is subject-to-change, the caller should 
            anticipate that this will create a new MediaElement, which will be cleaned up when the sound completes or if the media 
            fails to play.
            </remarks>
            <param name="parameter"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Source">
            <summary>
            A Uri defining the location of the sound file.  This is used to set the source property of the MediaElement. This is a dependency property.
            </summary>
            <remarks>
            The sound can be any file format supported by MediaElement.  In the case of a video, it will only play the
            audio portion.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Volume">
            <summary>
            Control the volume of the sound.  This is used to set the Volume property of the MediaElement.  This is a dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.RemoveElementAction">
            <summary>
            An Action that will remove the targeted element from the tree when invoked.
            </summary>
            <remarks>
            This Action may fail. The Action understands how to remove elements from common parents but not from custom collections or direct manipulation
            of the visual tree.
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.SetDataStoreValueAction">
            <summary>
            An action that will change the value of a property from a data store object.
            This class is identical to ChangePropertyAction. The only difference is that we load the data store picker
            for this action.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardAction">
            <summary>
            An abstract class that provides the ability to target a Storyboard.
            </summary>
            <remarks>
            For Action authors, this class provides a standard way to target a Storyboard.  Design tools may choose to provide a 
            special editing experience for classes that inherit from this Action, thereby improving the designer experience. 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardAction.OnStoryboardChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            This method is called when the Storyboard property is changed.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.StoryboardAction.Storyboard">
            <summary>
            The targeted Storyboard.  This is a dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.ControlStoryboardAction">
            <summary>
            An action that will change the state of a targeted storyboard when invoked.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.ControlStoryboardAction.Invoke(System.Object)">
            <summary>
            This method is called when some criteria is met and the action should be invoked. This method will attempt to 
            change the targeted storyboard in a way defined by the ControlStoryboardOption.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardTrigger">
            <summary>
            An abstract class that provides the ability to target a Storyboard.
            </summary>
            <remarks>
            For Trigger authors, this class provides a standard way to target a Storyboard.  Design tools may choose to provide a 
            special editing experience for classes that inherit from this Trigger, thereby improving the designer experience. 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardTrigger.OnStoryboardChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            This method is called when the Storyboard property is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.StoryboardTrigger.Storyboard">
            <summary>
            The targeted Storyboard.  This is a dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger">
            <summary>
            A trigger that listens for the completion of a Storyboard.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger"/> class.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.TimerTrigger">
            <summary>
            A Trigger that is triggered by a specified event occurring on its source and fires after a delay when that event is fired.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.TimerTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Interactivity.Core.TimerTrigger"/> class.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.TimerTrigger.MillisecondsPerTick">
            <summary>
            Gets or sets the number of milliseconds to wait between ticks. This is a dependency property.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.TimerTrigger.TotalTicks">
            <summary>
            Gets or sets the total number of ticks to be fired before the Trigger is finished.  This is a dependency property.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.TransitionEffect">
            <summary>
            Defines a transition effect shader that transitions from one visual to another visual
            using an interpolated value between 0 and 1
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.TransitionEffect.InputProperty">
            <summary>
            Brush-valued properties turn into sampler-property in the shader.
            Represents the image present in the final state of the transition
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.TransitionEffect.OldImageProperty">
            <summary>
            Brush-valued properties turn into sampler-property in the shader.
            Represents the image present in the initial state of the transition
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.TransitionEffect.ProgressProperty">
            <summary>
            Using a DependencyProperty as the backing store for Progress.  This enables animation, styling, binding, etc...
            Double used to represent state of Transition from start to finish (range between 0 and 1)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.TransitionEffect.CloneCurrentValue">
            <summary>
            Creates a modifiable clone (deep copy) of the <see cref="T:TransitionEffect"/> using its current values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.TransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the transition effect. Implements CloneCurrentValue in Silverlight.
            </summary>
            <returns>A clone of current instance of transition effect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.TransitionEffect.#ctor">
            <summary>
            Updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.TransitionEffect.Input">
            <summary>
            Gets or sets the Input variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.TransitionEffect.OldImage">
            <summary>
            Gets or sets the OldImage variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.TransitionEffect.Progress">
            <summary>
            Gets or sets the Progress variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Input.TranslateZoomRotateBehavior">
            <summary>
            Allows the user to use common touch gestures to translate, zoom, and rotate the attached object.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Input.TranslateZoomRotateBehavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>Override this to hook up functionality to the AssociatedObject.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Input.TranslateZoomRotateBehavior.OnDetaching">
            <summary>
            Called when the behavior is getting detached from its AssociatedObject, but before it has actually occurred.
            </summary>
            <remarks>Override this to unhook functionality from the AssociatedObject.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.TranslateZoomRotateBehavior.SupportedGestures">
            <summary>
            Gets or sets a value specifying which zooming and translation variants to support.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.TranslateZoomRotateBehavior.TranslateFriction">
            <summary>
            Gets or sets a number describing the rate at which the translation will decrease.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.TranslateZoomRotateBehavior.RotationalFriction">
            <summary>
            Gets or sets a number describing the rate at which the rotation will decrease.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.TranslateZoomRotateBehavior.ConstrainToParentBounds">
            <summary>
            Gets or sets the value indicating whether the zoom and translate position of the attached object is limited by the bounds of the parent object.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.TranslateZoomRotateBehavior.MinimumScale">
            <summary>
            Gets or sets a number indicating the minimum zoom value allowed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.TranslateZoomRotateBehavior.MaximumScale">
            <summary>
            Gets or sets a number indicating the maximum zoom value allowed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.VisualStateUtilities">
            <summary>
            This class provides various platform agnostic standard operations for working with the visual state manager.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.VisualStateUtilities.GoToState(System.Windows.FrameworkElement,System.String,System.Boolean)">
            <summary>
            Transitions the control between two states.
            </summary>
            <param name="element">The element to transition between states.</param>
            <param name="stateName">The state to transition to.</param>
            <param name="useTransitions">true to use a System.Windows.VisualTransition to transition between states; otherwise, false.</param>
            <returns>true if the control successfully transitioned to the new state; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">control is null</exception>
            <exception cref="T:System.ArgumentNullException">stateName is null</exception>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.VisualStateUtilities.GetVisualStateGroups(System.Windows.FrameworkElement)">
            <summary>
            Gets the value of the VisualStateManager.VisualStateGroups attached property.
            </summary>
            <param name="targetObject">The element from which to get the VisualStateManager.VisualStateGroups.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.VisualStateUtilities.TryFindNearestStatefulControl(System.Windows.FrameworkElement,System.Windows.FrameworkElement@)">
            <summary>
            Find the nearest parent which contains visual states.
            </summary>
            <param name="contextElement">The element from which to find the nearest stateful control.</param>
            <param name="resolvedControl">The nearest stateful control if true; else null.</param>
            <returns>True if a parent contains visual states; else false.</returns>
        </member>
        <member name="T:ExceptionStringTable">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CallMethodActionValidMethodNotFoundExceptionMessage">
            <summary>
              Looks up a localized string similar to Could not find method named &apos;{0}&apos; on object of type &apos;{1}&apos; that matches the expected signature..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionAmbiguousAdditionOperationExceptionMessage">
            <summary>
              Looks up a localized string similar to More than one potential addition operator was found on type &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotAnimateTargetTypeExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot animate a property change on a type &apos;{0}&apos; Target. Property changes can only be animated on types derived from DependencyObject..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotFindPropertyNameExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot find a property named &quot;{0}&quot; on type &quot;{1}.&quot;.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotIncrementAnimatedPropertyChangeExceptionMessage">
            <summary>
              Looks up a localized string similar to The Increment property cannot be set to True if the Duration property is set..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotIncrementWriteOnlyPropertyExceptionMessage">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; property cannot be incremented because its value cannot be read..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotSetValueExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot assign value of type &quot;{0}&quot; to property &quot;{1}&quot; of type &quot;{2}&quot;. The &quot;{1}&quot; property can be assigned only values of type &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionPropertyIsReadOnlyExceptionMessage">
            <summary>
              Looks up a localized string similar to Property &quot;{0}&quot; defined by type &quot;{1}&quot; does not expose a set method and therefore cannot be modified..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.DataStateBehaviorStateNameNotFoundExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot find state named &apos;{0}&apos; on type &apos;{1}.&apos; Ensure that the state exists and that it can be accessed from this context..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.GoToStateActionTargetHasNoStateGroups">
            <summary>
              Looks up a localized string similar to Target {0} does not define any VisualStateGroups. .
            </summary>
        </member>
        <member name="P:ExceptionStringTable.InvalidLeftOperand">
            <summary>
              Looks up a localized string similar to LeftOperand of type &quot;{0}&quot; cannot be used with operator &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.InvalidOperands">
            <summary>
              Looks up a localized string similar to LeftOperand of type &quot;{1}&quot;  and RightOperand of type &quot;{0}&quot; cannot be used with operator &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.InvalidRightOperand">
            <summary>
              Looks up a localized string similar to RightOperand of type &quot;{0}&quot; cannot be used with operator &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.UnsupportedRemoveTargetExceptionMessage">
            <summary>
              Looks up a localized string similar to The target of the RemoveElementAction is not supported..
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\en\System.Windows.Interactivity.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Interactivity</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Interactivity.AttachableCollection`1">
            <summary>
            Represents a collection of IAttachedObject with a shared AssociatedObject and provides change notifications to its contents when that AssociatedObject changes.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.IAttachedObject">
            <summary>
            An interface for an object that can be attached to another object.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.IAttachedObject.Attach(System.Windows.DependencyObject)">
            <summary>
            Attaches to the specified object.
            </summary>
            <param name="dependencyObject">The object to attach to.</param>
        </member>
        <member name="M:System.Windows.Interactivity.IAttachedObject.Detach">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.IAttachedObject.AssociatedObject">
            <summary>
            Gets the associated object.
            </summary>
            <value>The associated object.</value>
            <remarks>Represents the object the instance is attached to.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.AttachableCollection`1"/> class.
            </summary>
            <remarks>Internal, because this should not be inherited outside this assembly.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.OnAttached">
            <summary>
            Called immediately after the collection is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.OnDetaching">
            <summary>
            Called when the collection is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.ItemAdded(`0)">
            <summary>
            Called when a new item is added to the collection.
            </summary>
            <param name="item">The new item.</param>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.ItemRemoved(`0)">
            <summary>
            Called when an item is removed from the collection.
            </summary>
            <param name="item">The removed item.</param>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.VerifyAdd(`0)">
            <exception cref="T:System.InvalidOperationException">Cannot add the instance to a collection more than once.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.Attach(System.Windows.DependencyObject)">
            <summary>
            Attaches to the specified object.
            </summary>
            <param name="dependencyObject">The object to attach to.</param>
            <exception cref="T:System.InvalidOperationException">The IAttachedObject is already attached to a different object.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.Detach">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.AttachableCollection`1.AssociatedObject">
            <summary>
            The object on which the collection is hosted.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.AttachableCollection`1.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Gets the associated object.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="T:System.Windows.Interactivity.Behavior`1">
            <summary>
            Encapsulates state information and zero or more ICommands into an attachable object.
            </summary>
            <typeparam name="T">The type the <see cref="T:System.Windows.Interactivity.Behavior`1"/> can be attached to.</typeparam>
            <remarks>
            	Behavior is the base class for providing attachable state and commands to an object.
            	The types the Behavior can be attached to can be controlled by the generic parameter.
            	Override OnAttached() and OnDetaching() methods to hook and unhook any necessary handlers
            	from the AssociatedObject.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.Behavior">
            <summary>
            Encapsulates state information and zero or more ICommands into an attachable object.
            </summary>
            <remarks>This is an infrastructure class. Behavior authors should derive from Behavior&lt;T&gt; instead of from this class.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.OnAttached">
            <summary>
            Called after the behavior is attached to an AssociatedObject.
            </summary>
            <remarks>Override this to hook up functionality to the AssociatedObject.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.OnDetaching">
            <summary>
            Called when the behavior is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
            <remarks>Override this to unhook functionality from the AssociatedObject.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.Attach(System.Windows.DependencyObject)">
            <summary>
            Attaches to the specified object.
            </summary>
            <param name="dependencyObject">The object to attach to.</param>
            <exception cref="T:System.InvalidOperationException">The Behavior is already hosted on a different element.</exception>
            <exception cref="T:System.InvalidOperationException">dependencyObject does not satisfy the Behavior type constraint.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.Detach">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.AssociatedType">
            <summary>
            The type to which this behavior can be attached.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.AssociatedObject">
            <summary>
            Gets the object to which this behavior is attached.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Gets the associated object.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.Behavior`1"/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior`1.AssociatedObject">
            <summary>
            Gets the object to which this <see cref="T:System.Windows.Interactivity.Behavior`1"/> is attached.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.BehaviorCollection">
            <summary>
            Represents a collection of behaviors with a shared AssociatedObject and provides change notifications to its contents when that AssociatedObject changes.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.BehaviorCollection"/> class.
            </summary>
            <remarks>Internal, because this should not be inherited outside this assembly.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.OnAttached">
            <summary>
            Called immediately after the collection is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.OnDetaching">
            <summary>
            Called when the collection is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.ItemAdded(System.Windows.Interactivity.Behavior)">
            <summary>
            Called when a new item is added to the collection.
            </summary>
            <param name="item">The new item.</param>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.ItemRemoved(System.Windows.Interactivity.Behavior)">
            <summary>
            Called when an item is removed from the collection.
            </summary>
            <param name="item">The removed item.</param>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.CreateInstanceCore">
            <summary>
            Creates a new instance of the BehaviorCollection.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.CustomPropertyValueEditor">
            <summary>
            Enumerates possible values for reusable property value editors.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.Element">
            <summary>
            Uses the element picker, if supported, to edit this property at design time.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.Storyboard">
            <summary>
            Uses the storyboard picker, if supported, to edit this property at design time.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.StateName">
            <summary>
            Uses the state picker, if supported, to edit this property at design time.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.ElementBinding">
            <summary>
            Use the element binding picker, if supported, to edit this property at design time.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.PropertyBinding">
            <summary>
            Use the property binding picker, if supported, to edit this property at design time.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.CustomPropertyValueEditorAttribute">
            <summary>
            Associates the given editor type with the property on which the CustomPropertyValueEditor is applied.
            </summary>
            <remarks>Use this attribute to get improved design-time editing for properties that denote element (by name), storyboards, or states (by name).</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.CustomPropertyValueEditorAttribute.#ctor(System.Windows.Interactivity.CustomPropertyValueEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.CustomPropertyValueEditorAttribute"/> class.
            </summary>
            <param name="customPropertyValueEditor">The custom property value editor.</param>
        </member>
        <member name="P:System.Windows.Interactivity.CustomPropertyValueEditorAttribute.CustomPropertyValueEditor">
            <summary>
            Gets or sets the custom property value editor.
            </summary>
            <value>The custom property value editor.</value>
        </member>
        <member name="T:System.Windows.Interactivity.DefaultTriggerAttribute">
            <summary>
            Provides design tools information about what <see cref="T:System.Windows.Interactivity.TriggerBase"/> to instantiate for a given action or command.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.#ctor(System.Type,System.Type,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.DefaultTriggerAttribute"/> class.
            </summary>
            <param name="targetType">The type this attribute applies to.</param>
            <param name="triggerType">The type of <see cref="T:System.Windows.Interactivity.TriggerBase"/> to instantiate.</param>
            <param name="parameters">A single argument for the specified <see cref="T:System.Windows.Interactivity.TriggerBase"/>.</param>
            <exception cref="T:System.ArgumentException"><c cref="F:System.Windows.Interactivity.DefaultTriggerAttribute.triggerType"/> is not derived from TriggerBase.</exception>
            <remarks>This constructor is useful if the specifed <see cref="T:System.Windows.Interactivity.TriggerBase"/> has a single argument. The
            resulting code will be CLS compliant.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.#ctor(System.Type,System.Type,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.DefaultTriggerAttribute"/> class.
            </summary>
            <param name="targetType">The type this attribute applies to.</param>
            <param name="triggerType">The type of <see cref="T:System.Windows.Interactivity.TriggerBase"/> to instantiate.</param>
            <param name="parameters">The constructor arguments for the specified <see cref="T:System.Windows.Interactivity.TriggerBase"/>.</param>
            <exception cref="T:System.ArgumentException"><c cref="F:System.Windows.Interactivity.DefaultTriggerAttribute.triggerType"/> is not derived from TriggerBase.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.Instantiate">
            <summary>
            Instantiates this instance.
            </summary>
            <returns>The <see cref="T:System.Windows.Interactivity.TriggerBase"/> specified by the DefaultTriggerAttribute.</returns>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.TargetType">
            <summary>
            Gets the type that this DefaultTriggerAttribute applies to.
            </summary>
            <value>The type this DefaultTriggerAttribute applies to.</value>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.TriggerType">
            <summary>
            Gets the type of the <see cref="T:System.Windows.Interactivity.TriggerBase"/> to instantiate.
            </summary>
            <value>The type of the <see cref="T:System.Windows.Interactivity.TriggerBase"/> to instantiate.</value>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.Parameters">
            <summary>
            Gets the parameters to pass to the <see cref="T:System.Windows.Interactivity.TriggerBase"/> constructor.
            </summary>
            <value>The parameters to pass to the <see cref="T:System.Windows.Interactivity.TriggerBase"/> constructor.</value>
        </member>
        <member name="M:System.Windows.Interactivity.DependencyObjectHelper.GetSelfAndAncestors(System.Windows.DependencyObject)">
            <summary>
            This method will use the VisualTreeHelper.GetParent method to do a depth first walk up 
            the visual tree and return all ancestors of the specified object, including the object itself.
            </summary>
            <param name="dependencyObject">The object in the visual tree to find ancestors of.</param>
            <returns>Returns itself an all ancestors in the visual tree.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.EventObserver">
            <summary>
            EventObserver is designed to help manage event handlers by detatching when disposed. Creating this object will also attach in the constructor.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventObserver.#ctor(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            Creates an instance of EventObserver and attaches to supplied event on supplied target. Call dispose to detach.
            </summary>
            <param name="eventInfo">The event to attach and detach from.</param>
            <param name="target">The target object the event is defined on. null if the method is static.</param>
            <param name="handler">The delegate to attach to the event.</param>
        </member>
        <member name="M:System.Windows.Interactivity.EventObserver.Dispose">
            <summary>
            Detaches the handler from the event.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.EventTrigger">
            <summary>
            A trigger that listens for a specified event on its source and fires when that event is fired.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.EventTriggerBase`1">
            <summary>
            Represents a trigger that can listen to an element other than its AssociatedObject.
            </summary>
            <typeparam name="T">The type that this trigger can be associated with.</typeparam>
            <remarks>
            	EventTriggerBase extends TriggerBase to add knowledge of another object than the one it is attached to. 
            	This allows a user to attach a Trigger/Action pair to one element and invoke the Action in response to a 
            	change in another object somewhere else. Override OnSourceChanged to hook or unhook handlers on the source 
            	element, and OnAttached/OnDetaching for the associated element. The type of the Source element can be 
            	constrained by the generic type parameter. If you need control over the type of the 
            	AssociatedObject, set a TypeConstraintAttribute on your derived type.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.EventTriggerBase">
            <summary>
            Represents a trigger that can listen to an object other than its AssociatedObject.
            </summary>
            <remarks>This is an infrastructure class. Trigger authors should derive from EventTriggerBase&lt;T&gt; instead of this class.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerBase">
            <summary>
            Represents an object that can invoke Actions conditionally.
            </summary>
            <remarks>This is an infrastructure class. Trigger authors should derive from Trigger&lt;T&gt; instead of this class.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.InvokeActions(System.Object)">
            <summary>
            Invoke all Actions associated with this trigger.
            </summary>
            <remarks>Derived classes should call this to fire the trigger.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.OnAttached">
            <summary>
            Called after the trigger is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.OnDetaching">
            <summary>
            Called when the trigger is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.CreateInstanceCore">
            <summary>
            Creates a new instance of the TriggerBase derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.Attach(System.Windows.DependencyObject)">
            <summary>
            Attaches to the specified object.
            </summary>
            <param name="dependencyObject">The object to attach to.</param>
            <exception cref="T:System.InvalidOperationException">Cannot host the same Trigger on more than one object at a time.</exception>
            <exception cref="T:System.InvalidOperationException">dependencyObject does not satisfy the Trigger type constraint.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.Detach">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.AssociatedObject">
            <summary>
            Gets the object to which the trigger is attached.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.AssociatedObjectTypeConstraint">
            <summary>
            Gets the type constraint of the associated object.
            </summary>
            <value>The associated object type constraint.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.Actions">
            <summary>
            Gets the actions associated with this trigger.
            </summary>
            <value>The actions associated with this trigger.</value>
        </member>
        <member name="E:System.Windows.Interactivity.TriggerBase.PreviewInvoke">
            <summary>
            Event handler for registering to PreviewInvoke
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Gets the associated object.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.GetEventName">
            <summary>
            Specifies the name of the Event this EventTriggerBase is listening for.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnEvent(System.EventArgs)">
            <summary>
            Called when the event associated with this EventTriggerBase is fired. By default, this will invoke all actions on the trigger.
            </summary>
            <param name="eventArgs">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
            <remarks>Override this to provide more granular control over when actions associated with this trigger will be invoked.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnSourceChangedImpl(System.Object,System.Object)">
            <summary>
            Called when the source changes.
            </summary>
            <param name="oldSource">The old source.</param>
            <param name="newSource">The new source.</param>
            <remarks>This function should be overridden in derived classes to hook functionality to and unhook functionality from the changing source objects.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnAttached">
            <summary>
            Called after the trigger is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnDetaching">
            <summary>
            Called when the trigger is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.RegisterEvent(System.Object,System.String)">
            <exception cref="T:System.ArgumentException">Could not find eventName on the Target.</exception>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.AssociatedObjectTypeConstraint">
            <summary>
            Gets the type constraint of the associated object.
            </summary>
            <value>The associated object type constraint.</value>
            <remarks>Define a TypeConstraintAttribute on a derived type to constrain the types it may be attached to.</remarks>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.SourceTypeConstraint">
            <summary>
            Gets the source type constraint.
            </summary>
            <value>The source type constraint.</value>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.SourceObject">
            <summary>
            Gets or sets the target object. If TargetObject is unset, the target will look for the object specified by TargetName. If an element referred to by TargetName cannot be found, the target will default to the AssociatedObject. This is a dependency property.
            </summary>
            <value>The target object.</value>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.SourceName">
            <summary>
            Gets or sets the name of the element this EventTriggerBase listens for as a source. If the name is unset or cannot be resolved, the AssociatedObject will be used.  This is a dependency property.
            </summary>
            <value>The name of the source element.</value>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.Source">
            <summary>
            Gets the resolved source. If <c ref="SourceName"/> is unset or cannot be resolved, defaults to AssociatedObject.
            </summary>
            <value>The resolved source object.</value>
            <remarks>In general, this property should be used in place of AssociatedObject in derived classes.</remarks>
            <exception cref="T:System.InvalidOperationException">The element pointed to by <c cref="P:System.Windows.Interactivity.EventTriggerBase.Source"/> does not satisify the type constraint.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.EventTriggerBase`1"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase`1.OnSourceChanged(`0,`0)">
            <summary>
            Called when the source property changes.
            </summary>
            <remarks>Override this to hook functionality to and unhook functionality from the specified Source, rather than the AssociatedObject.</remarks>
            <param name="oldSource">The old source.</param>
            <param name="newSource">The new source.</param>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase`1.Source">
            <summary>
            Gets the resolved source. If <c ref="SourceName"/> is not set or cannot be resolved, defaults to AssociatedObject.
            </summary>
            <value>The resolved source object.</value>
            <remarks>In general, this property should be used in place of AssociatedObject in derived classes.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTrigger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.EventTrigger"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTrigger.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.EventTrigger"/> class.
            </summary>
            <param name="eventName">Name of the event.</param>
        </member>
        <member name="P:System.Windows.Interactivity.EventTrigger.EventName">
            <summary>
            Gets or sets the name of the event to listen for. This is a dependency property.
            </summary>
            <value>The name of the event.</value>
        </member>
        <member name="T:System.Windows.Interactivity.Interaction">
            <summary>
            Static class that owns the Triggers and Behaviors attached properties. Handles propagation of AssociatedObject change notifications.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.Interaction.TriggersProperty">
            <summary>
            This property is used as the internal backing store for the public Triggers attached property.
            </summary>
            <remarks>
            This property is not exposed publicly. This forces clients to use the GetTriggers and SetTriggers methods to access the
            collection, ensuring the collection exists and is set before it is used.
            </remarks>
        </member>
        <member name="F:System.Windows.Interactivity.Interaction.BehaviorsProperty">
            <summary>
            This property is used as the internal backing store for the public Behaviors attached property.
            </summary>
            <remarks>
            This property is not exposed publicly. This forces clients to use the GetBehaviors and SetBehaviors methods to access the
            collection, ensuring the collection exists and is set before it is used.
            </remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.GetTriggers(System.Windows.DependencyObject)">
            <summary>
            Gets the TriggerCollection containing the triggers associated with the specified object.
            </summary>
            <param name="obj">The object from which to retrieve the triggers.</param>
            <returns>A TriggerCollection containing the triggers associated with the specified object.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.GetBehaviors(System.Windows.DependencyObject)">
            <summary>
            Gets the <see cref="T:System.Windows.Interactivity.BehaviorCollection"/> associated with a specified object.
            </summary>
            <param name="obj">The object from which to retrieve the <see cref="T:System.Windows.Interactivity.BehaviorCollection"/>.</param>
            <returns>A <see cref="T:System.Windows.Interactivity.BehaviorCollection"/> containing the behaviors associated with the specified object.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.OnBehaviorsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <exception cref="T:System.InvalidOperationException">Cannot host the same BehaviorCollection on more than one object at a time.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.OnTriggersChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <exception cref="T:System.InvalidOperationException">Cannot host the same TriggerCollection on more than one object at a time.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.IsElementLoaded(System.Windows.FrameworkElement)">
            <summary>
            A helper function to take the place of FrameworkElement.IsLoaded, as Silverlight doesn't have a property like that.
            </summary>
            <param name="element">The element of interest.</param>
            <returns>True if the element has been loaded; otherwise, false</returns>
        </member>
        <member name="P:System.Windows.Interactivity.Interaction.ShouldRunInDesignMode">
            <summary>
            Gets or sets a value indicating whether to run as if in design mode.
            </summary>
            <value>
            	<c>true</c> if [should run in design mode]; otherwise, <c>false</c>.
            </value>
            <remarks>Not to be used outside unit tests.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.InvokeCommandAction">
            <summary>
            Executes a specified ICommand when invoked.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerAction`1">
            <summary>
            Represents an attachable object that encapsulates a unit of functionality.
            </summary>
            <typeparam name="T">The type to which this action can be attached.</typeparam>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerAction">
            <summary>
            Represents an attachable object that encapsulates a unit of functionality.
            </summary>
            <remarks>This is an infrastructure class. Action authors should derive from TriggerAction&lt;T&gt; instead of this class.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.CallInvoke(System.Object)">
            <summary>
            Attempts to invoke the action.
            </summary>
            <param name="parameter">The parameter to the action. If the Action does not require a parameter, the parameter may be set to a null reference.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Invoke(System.Object)">
            <summary>
            Invokes the action.
            </summary>
            <param name="parameter">The parameter to the action. If the Action does not require a parameter, the parameter may be set to a null reference.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.OnAttached">
            <summary>
            Called after the action is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.OnDetaching">
            <summary>
            Called when the action is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.CreateInstanceCore">
            <summary>
            When implemented in a derived class, creates a new instance of the <see cref="T:System.Windows.Freezable"/> derived class.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Attach(System.Windows.DependencyObject)">
            <summary>
            Attaches to the specified object.
            </summary>
            <param name="dependencyObject">The object to attach to.</param>
            <exception cref="T:System.InvalidOperationException">Cannot host the same TriggerAction on more than one object at a time.</exception>
            <exception cref="T:System.InvalidOperationException">dependencyObject does not satisfy the TriggerAction type constraint.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Detach">
            <summary>
            Detaches this instance from its associated object.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.IsEnabled">
            <summary>
            Gets or sets a value indicating whether this action will run when invoked. This is a dependency property.
            </summary>
            <value>
            	<c>true</c> if this action will be run when invoked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.AssociatedObject">
            <summary>
            Gets the object to which this Action is attached.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.AssociatedObjectTypeConstraint">
            <summary>
            Gets the associated object type constraint.
            </summary>
            <value>The associated object type constraint.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.IsHosted">
            <summary>
            Gets or sets a value indicating whether this instance is attached.
            </summary>
            <value><c>true</c> if this instance is attached; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Gets the associated object.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.TriggerAction`1"/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject">
            <summary>
            Gets the object to which this <see cref="T:System.Windows.Interactivity.TriggerAction`1"/> is attached.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObjectTypeConstraint">
            <summary>
            Gets the associated object type constraint.
            </summary>
            <value>The associated object type constraint.</value>
        </member>
        <member name="M:System.Windows.Interactivity.InvokeCommandAction.Invoke(System.Object)">
            <summary>
            Invokes the action.
            </summary>
            <param name="parameter">The parameter to the action. If the Action does not require a parameter, the parameter may be set to a null reference.</param>
        </member>
        <member name="P:System.Windows.Interactivity.InvokeCommandAction.CommandName">
            <summary>
            Gets or sets the name of the command this action should invoke.
            </summary>
            <value>The name of the command this action should invoke.</value>
            <remarks>This property will be superseded by the Command property if both are set.</remarks>
        </member>
        <member name="P:System.Windows.Interactivity.InvokeCommandAction.Command">
            <summary>
            Gets or sets the command this action should invoke. This is a dependency property.
            </summary>
            <value>The command to execute.</value>
            <remarks>This property will take precedence over the CommandName property if both are set.</remarks>
        </member>
        <member name="P:System.Windows.Interactivity.InvokeCommandAction.CommandParameter">
            <summary>
            Gets or sets the command parameter. This is a dependency property.
            </summary>
            <value>The command parameter.</value>
            <remarks>This is the value passed to ICommand.CanExecute and ICommand.Execute.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.NameResolvedEventArgs">
            <summary>
            Provides data about which objects were affected when resolving a name change.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.NameResolver">
            <summary>
            Helper class to handle the logic of resolving a TargetName into a Target element
            based on the context provided by a host element.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.NameResolver.UpdateObjectFromName(System.Windows.DependencyObject)">
            <summary>
            Attempts to update the resolved object from the name within the context of the namescope reference element.
            </summary>
            <param name="oldObject">The old resolved object.</param>
            <remarks>
            Resets the existing target and attempts to resolve the current TargetName from the
            context of the current Host. If it cannot resolve from the context of Host, it will
            continue up the visual tree until it resolves. If it has not resolved it when it reaches
            the root, it will set the Target to null and write a warning message to Debug output.
            </remarks>
        </member>
        <member name="E:System.Windows.Interactivity.NameResolver.ResolvedElementChanged">
            <summary>
            Occurs when the resolved element has changed.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.Name">
            <summary>
            Gets or sets the name of the element to attempt to resolve.
            </summary>
            <value>The name to attempt to resolve.</value>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.Object">
            <summary>
            The resolved object. Will return the reference element is TargetName is null or empty, or if a resolve has not been attempted.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.NameScopeReferenceElement">
            <summary>
            Gets or sets the reference element from which to perform the name resolution.
            </summary>
            <value>The reference element.</value>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.PendingReferenceElementLoad">
            <summary>
            Gets or sets a value indicating whether the reference element load is pending.
            </summary>
            <value>
            	<c>true</c> if [pending reference element load]; otherwise, <c>false</c>.
            </value>
            <remarks>
            If the Host has not been loaded, the name will not be resolved.
            In that case, delay the resolution and track that fact with this property.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TargetedTriggerAction`1">
            <summary>
            Represents an action that can be targeted to affect an object other than its AssociatedObject.
            </summary>
            <typeparam name="T">The type constraint on the target.</typeparam>
            <remarks>
            	TargetedTriggerAction extends TriggerAction to add knowledge of another element than the one it is attached to. 
            	This allows a user to invoke the Action on an element other than the one it is attached to in response to a 
            	Trigger firing. Override OnTargetChanged to hook or unhook handlers on the target element, and OnAttached/OnDetaching 
            	for the associated element. The type of the Target element can be constrained by the generic type parameter. If 
            	you need control over the type of the AssociatedObject, set a TypeConstraintAttribute on your derived type.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TargetedTriggerAction">
            <summary>
            Represents an action that can be targeted to affect an object other than its AssociatedObject.
            </summary>
            <remarks>This is an infrastructure class. Action authors should derive from TargetedTriggerAction&lt;T&gt; instead of this class.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnTargetChangedImpl(System.Object,System.Object)">
            <summary>
            Called when the target changes.
            </summary>
            <param name="oldTarget">The old target.</param>
            <param name="newTarget">The new target.</param>
            <remarks>This function should be overriden in derived classes to hook and unhook functionality from the changing source objects.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnAttached">
            <summary>
            Called after the action is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnDetaching">
            <summary>
            Called when the action is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.TargetObject">
            <summary>
            Gets or sets the target object. If TargetObject is unset, the target will look for the object specified by TargetName. If an element referred to by TargetName cannot be found, the target will default to the AssociatedObject. This is a dependency property.
            </summary>
            <value>The target object.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.TargetName">
            <summary>
            Gets or sets the name of the object this action targets. If Target is set, this property is ignored. If Target is not set and TargetName is unset or cannot be resolved, the target will default to the AssociatedObject. This is a dependency property.
            </summary>
            <value>The name of the target object.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.Target">
            <summary>
            Gets the target object. If TargetObject is set, returns TargetObject. Else, if TargetName is unset or cannot be resolved, defaults to the AssociatedObject.
            </summary>
            <value>The target object.</value>
            <remarks>In general, this property should be used in place of AssociatedObject in derived classes.</remarks>
            <exception cref="T:System.InvalidOperationException">The Target element does not satisfy the type constraint.</exception>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.AssociatedObjectTypeConstraint">
            <summary>
            Gets the associated object type constraint.
            </summary>
            <value>The associated object type constraint.</value>
            <remarks>Define a TypeConstraintAttribute on a derived type to constrain the types it may be attached to.</remarks>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.TargetTypeConstraint">
            <summary>
            Gets the target type constraint.
            </summary>
            <value>The target type constraint.</value>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.TargetedTriggerAction`1"/> class.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction`1.OnTargetChanged(`0,`0)">
            <summary>
            Called when the target property changes.
            </summary>
            <remarks>Override this to hook and unhook functionality on the specified Target, rather than the AssociatedObject.</remarks>
            <param name="oldTarget">The old target.</param>
            <param name="newTarget">The new target.</param>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction`1.Target">
            <summary>
            Gets the target object. If TargetName is unset or cannot be resolved, defaults to the AssociatedObject.
            </summary>
            <value>The target.</value>
            <remarks>In general, this property should be used in place of AssociatedObject in derived classes.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerActionCollection">
            <summary>
            Represents a collection of actions with a shared AssociatedObject and provides change notifications to its contents when that AssociatedObject changes.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.TriggerActionCollection"/> class.
            </summary>
            <remarks>Internal, because this should not be inherited outside this assembly.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.OnAttached">
            <summary>
            Called immediately after the collection is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.OnDetaching">
            <summary>
            Called when the collection is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.ItemAdded(System.Windows.Interactivity.TriggerAction)">
            <summary>
            Called when a new item is added to the collection.
            </summary>
            <param name="item">The new item.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.ItemRemoved(System.Windows.Interactivity.TriggerAction)">
            <summary>
            Called when an item is removed from the collection.
            </summary>
            <param name="item">The removed item.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.CreateInstanceCore">
            <summary>
            Creates a new instance of the TriggerActionCollection.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerBase`1">
            <summary>
            Represents an object that can invoke Actions conditionally.
            </summary>
            <typeparam name="T">The type to which this trigger can be attached.</typeparam>
            <remarks>
            	TriggerBase is the base class for controlling Actions. Override OnAttached() and 
            	OnDetaching() to hook and unhook handlers on the AssociatedObject. You may 
            	constrain the types that a derived TriggerBase may be attached to by specifying 
            	the generic parameter. Call InvokeActions() to fire all Actions associated with 
            	this TriggerBase.
            </remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.TriggerBase`1"/> class.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject">
            <summary>
            Gets the object to which the trigger is attached.
            </summary>
            <value>The associated object.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObjectTypeConstraint">
            <summary>
            Gets the type constraint of the associated object.
            </summary>
            <value>The associated object type constraint.</value>
        </member>
        <member name="T:System.Windows.Interactivity.PreviewInvokeEventArgs">
            <summary>
            Argument pass to PreviewInvoke event. Assigning Cancelling to true, will cancel the invoke from the trigger.  
            </summary>
            <remarks>This is an infrastructure class. Behavior attached to a trigger base object can add their behavior as a listener to TriggerBase.PreviewInvoke</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerCollection">
            <summary>
             Represents a collection of triggers with a shared AssociatedObject and provides change notifications to its contents when that AssociatedObject changes.
             </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.TriggerCollection"/> class.
            </summary>
            <remarks>Internal, because this should not be inherited outside this assembly.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.OnAttached">
            <summary>
            Called immediately after the collection is attached to an AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.OnDetaching">
            <summary>
            Called when the collection is being detached from its AssociatedObject, but before it has actually occurred.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.ItemAdded(System.Windows.Interactivity.TriggerBase)">
            <summary>
            Called when a new item is added to the collection.
            </summary>
            <param name="item">The new item.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.ItemRemoved(System.Windows.Interactivity.TriggerBase)">
            <summary>
            Called when an item is removed from the collection.
            </summary>
            <param name="item">The removed item.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.CreateInstanceCore">
            <summary>
            Creates a new instance of the <see cref="T:System.Windows.Interactivity.TriggerCollection"/>.
            </summary>
            <returns>The new instance.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.TypeConstraintAttribute">
            <summary>
            Specify type constraints on the AssociatedObject of TargetedTriggerAction and EventTriggerBase.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TypeConstraintAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Windows.Interactivity.TypeConstraintAttribute"/> class.
            </summary>
            <param name="constraint">The constraint type.</param>
        </member>
        <member name="P:System.Windows.Interactivity.TypeConstraintAttribute.Constraint">
            <summary>
            Gets the constraint type.
            </summary>
            <value>The constraint type.</value>
        </member>
        <member name="T:ExceptionStringTable">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostBehaviorCollectionMultipleTimesExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot set the same BehaviorCollection on multiple objects..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostBehaviorMultipleTimesExceptionMessage">
            <summary>
              Looks up a localized string similar to An instance of a Behavior cannot be attached to more than one object at a time..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerActionMultipleTimesExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot host an instance of a TriggerAction in multiple TriggerCollections simultaneously. Remove it from one TriggerCollection before adding it to another..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerCollectionMultipleTimesExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot set the same TriggerCollection on multiple objects..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerMultipleTimesExceptionMessage">
            <summary>
              Looks up a localized string similar to An instance of a trigger cannot be attached to more than one object at a time..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CommandDoesNotExistOnBehaviorWarningMessage">
            <summary>
              Looks up a localized string similar to The command &quot;{0}&quot; does not exist or is not publicly exposed on {1}..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.DefaultTriggerAttributeInvalidTriggerTypeSpecifiedExceptionMessage">
            <summary>
              Looks up a localized string similar to &quot;{0}&quot; is not a valid type for the TriggerType parameter. Make sure &quot;{0}&quot; derives from TriggerBase..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.DuplicateItemInCollectionExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot add the same instance of &quot;{0}&quot; to a &quot;{1}&quot; more than once..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.EventTriggerBaseInvalidEventExceptionMessage">
            <summary>
              Looks up a localized string similar to The event &quot;{0}&quot; on type &quot;{1}&quot; has an incompatible signature. Ensure the event is public and satisfies the EventHandler delegate..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.EventTriggerCannotFindEventNameExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot find an event named &quot;{0}&quot; on type &quot;{1}.&quot;.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.RetargetedTypeConstraintViolatedExceptionMessage">
            <summary>
              Looks up a localized string similar to An object of type &quot;{0}&quot; cannot have a {3} property of type &quot;{1}&quot;. Instances of type &quot;{0}&quot; can have only a {3} property of type &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.TypeConstraintViolatedExceptionMessage">
            <summary>
              Looks up a localized string similar to Cannot attach type &quot;{0}&quot; to type &quot;{1}&quot;. Instances of type &quot;{0}&quot; can only be attached to objects of type &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:ExceptionStringTable.UnableToResolveTargetNameWarningMessage">
            <summary>
              Looks up a localized string similar to Unable to resolve TargetName &quot;{0}.&quot;.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\es\Microsoft.Expression.Controls.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Controls</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.Initialize">
            <summary>
            Called before we loop over the polylines.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.ShouldBreak(System.Int32)">
            <summary>
            Checks whether or not we should continue looping over the polylines.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnPolylineBegin(Microsoft.Expression.Drawing.Core.PolylineData)">
            <summary>
            Called before we begin marching a new polyline.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnPolylineCompleted(System.Double)">
            <summary>
            Called when we walk off the end of a polyline.
            </summary>
            <param name="remaingLength">The remaining arclength in the polyline.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnStepCompleted(System.Double)">
            <summary>
            Called when we sucessfully complete a step.
            </summary>
            <param name="actualStepDistance">The actual step distance.
            This may be different than Step if we have wrapped to another polyline.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.Distribute(Microsoft.Expression.Controls.PathPanel,System.Int32,System.Int32)">
            <summary>
            Distributes the children of a path panel along a given layout path.
            </summary>
            <param name="pathPanel">The path panel.</param>
            <param name="pathIndex">The index of the path in pathPanel.LayoutPaths.</param>
            <param name="childIndex">The index of the first child to be laid out on this path.</param>
            <returns>The index of the next child to be distributed. If childIndex is returned, this function has done nothing.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.ChildIndex">
            <summary>
            The index of the next child to be arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Span">
            <summary>
            The distance in arclength that we want to use for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Step">
            <summary>
            The distance in arclength to walk along the current polyline.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Capacity">
            <summary>
            The total number of elements to be arranged on the LayoutPath.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.EvenDistributionStrategy">
            <summary>
            Distributes the children of a path panel along a layout path.
            Even distribution means that there is equal arclength between the centers of all
            the elements on the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.ChangedPathLayoutProperties">
            <summary>
            Specifies which path layout properties have changed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs.#ctor(Microsoft.Expression.Controls.ChangedPathLayoutProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs"/> class.
            </summary>
            <param name="changedProperties">The data for the event.</param>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs.ChangedProperties">
            <summary>
            Gets the properties changed in a <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathLayoutData">
            <summary>
            Encapsulates the data needed to update a <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LayoutPathIndex">
            <summary>
            Gets or sets the index of the path on which an element is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.GlobalIndex">
            <summary>
            Gets or sets the index of an element in a collection of elements.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LocalIndex">
            <summary>
            Gets or sets the index of an element on a path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.GlobalOffset">
            <summary>
            Gets or sets the offset of an element proportional to the total length of a collection of paths.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LocalOffset">
            <summary>
            Gets or sets the offset of an element proportional to the length of path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.NormalAngle">
            <summary>
            Gets or sets the angle perpendicular to the path at an element's location.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.OrientationAngle">
            <summary>
            Gets or sets the angle perpendicular to the path at an element's location if the element is oriented to the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.IPathLayoutItem">
            <summary>
            Represents an element that is arranged by a <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </summary>
            <remarks>
            Implementing this interface enables <see cref="T:Microsoft.Expression.Controls.PathPanel"/> to set these properties when the element is arranged.
            This interface is not intended for general implementation.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.IPathLayoutItem.Update(Microsoft.Expression.Controls.PathLayoutData)">
            <summary>
            Updates the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/> properties based on the given <see cref="T:Microsoft.Expression.Controls.PathLayoutData"/> and raises the <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
            <param name="data">The data needed to update the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/>.</param>
        </member>
        <member name="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated">
            <summary>
            Occurs when one or more of the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/> properties change.
            </summary>
            <remarks>
            This event is raised whenever the item’s position along the path is updated. This can occur due to changes in the properties on the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> or changes to <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LayoutPathIndex">
            <summary>
            Gets the index of the path on which the item is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalIndex">
            <summary>
            Gets the index of the item in a collection of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalIndex">
            <summary>
            Gets the index of the item on the path on which it is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalOffset">
            <summary>
            Gets the offset of the item proportional to the total length of a collection of paths.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalOffset">
            <summary>
            Gets the offset of the item proportional to the length of the path on which it is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.NormalAngle">
            <summary>
            Gets the angle perpendicular to the path at the item's location.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.OrientationAngle">
            <summary>
            Gets the angle perpendicular to the path at the items's location if the item is oriented to the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.Distribution">
            <summary>
            Specifies the distribution of a <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.Orientation">
            <summary>
            Specifies the orientation of elements on a <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.FillBehavior">
            <summary>
            Specifies the method for altering the <see cref="P:Microsoft.Expression.Controls.LayoutPath.Span"/> on an open path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.LayoutPath">
            <summary>
            Describes a path along which elements are arranged.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Controls.LayoutPath.transformedPolylines">
            <summary>
            Ideally, we want to cache the Bezier curves before flattening, because transform will affect flattening.
            That requires us to cache curves that we don't support very well yet.  Instead, we cache the flatten points
            in distribution strategy and transform them on demand.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.SourceElement">
            <summary>
            Gets or sets the element that defines the path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Distribution">
            <summary>
            Gets or sets whether items are laid out evenly or with a fixed padding.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Capacity">
            <summary>
            Gets or sets the maximum number of items displayed on the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Padding">
            <summary>
            Gets or sets the distance in pixels along the arc length of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> between two items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Orientation">
            <summary>
            Gets or sets the orientation of the items.
            </summary>
            <remarks>
            This property is supported on <see cref="T:Microsoft.Expression.Controls.PathListBox"/>, but not <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Start">
            <summary>
            Gets or sets the distance from the start of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> to place the first item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Span">
            <summary>
            Gets or sets the percentage of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> that participates in layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.FillBehavior">
            <summary>
            Gets or set the method to alter <see cref="P:Microsoft.Expression.Controls.LayoutPath.Span"/> on an open path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.ActualCapacity">
            <summary>
            Gets the computed Capacity.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.IsValid">
            <summary>
            Gets whether or not the <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/> is valid in the context.
            A <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/> is invalid if it is a descendant of the <see cref="T:Microsoft.Expression.Controls.PathPanel"/> in which it used.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PaddedDistributionStrategy">
            <summary>
            Distributes the children of a layout path based on the size of the children and a given padding between the children.
            The distance in arclength between children is determined by the padding plus the sum of the radii of the children's bounding boxes.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathListBox">
            <summary>
            Contains a list of items that are laid out along one or more paths.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathListBox"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.GetContainerForItemOverride">
            <summary>
            Creates the element used to display a specified item.
            </summary>
            <returns>A <see cref="T:Microsoft.Expression.Controls.PathListBoxItem"/> corresponding to a specified item.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own item container.
            </summary>
            <returns>true if the item is its own item container; otherwise, false.</returns>
            <param name="item">The specified item.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements.
            </summary>
            <param name="finalSize">The size that this object should use to arrange its child elements.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.LayoutPaths">
            <summary>
            Gets or sets a collection of objects that define the path(s) used for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.StartItemIndex">
            <summary>
            Gets or sets the index to use within the list of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.WrapItems">
            <summary>
            Gets or sets whether the item index wraps to the beginning of the collection when StartItemIndex is greater than 0.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathListBoxItem">
            <summary>
            Represents an item in a <see cref="T:Microsoft.Expression.Controls.PathListBox"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBoxItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathListBoxItem"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBoxItem.Update(Microsoft.Expression.Controls.PathLayoutData)">
            <summary>
            For a description of this member, see <see cref="M:Microsoft.Expression.Controls.IPathLayoutItem.Update(Microsoft.Expression.Controls.PathLayoutData)"/>.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.PathListBoxItem.PathLayoutUpdated">
            <summary>
            For a description of this member, see <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LayoutPathIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LayoutPathIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.GlobalIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LocalIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.GlobalOffset">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalOffset"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LocalOffset">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalOffset"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.NormalAngle">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.NormalAngle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.OrientationAngle">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.OrientationAngle"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathPanel">
            <summary>
            Arranges child elements along one or more path.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Expression.Controls.PathPanel"/> can be used as an alternative to <see cref="T:Microsoft.Expression.Controls.PathListBox"/> when selection is not necessary.
            The <see cref="P:Microsoft.Expression.Controls.LayoutPath.Orientation"/> property is not supported on <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathPanel"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the size required for child elements.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. </param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements.
            </summary>
            <param name="finalSize">The size that this object should use to arrange its child elements.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.ArrangeChild(System.Int32,System.Int32,Microsoft.Expression.Drawing.Core.PolylineData,Microsoft.Expression.Drawing.Core.MarchLocation,System.Int32)">
            <summary>
            Arranges the child at the given index at a particular location on a LayoutPath.
            </summary>
            <param name="indirectIndex">An index from the range 0 to PathPanel.Count.</param>
            <param name="pathIndex">The index of the layout path on which to arrange the child.</param>
            <param name="polyline">The polyline in the layout path.</param>
            <param name="location">The location on the polyline.</param>
            <param name="localIndex">The index of the child on the LayoutPath.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.GetChildRadius(System.Int32)">
            <summary>
            Calculates the radius of the bounding circle for the child at the given index.
            </summary>
            <param name="indirectIndex">An index from the range 0 to PathPanel.Count.</param>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.LayoutPaths">
            <summary>
            Gets or sets a collection of objects that define the path(s) used for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.StartItemIndex">
            <summary>
            Gets or sets the index to use within the list of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.WrapItems">
            <summary>
            Gets or sets whether the item index wraps to the beginning of the collection when StartItemIndex is greater than 0.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.ValidPaths">
            <summary>
            The subset of LayoutPaths that are attached and not Collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.Count">
            <summary>
            Count is the number of Children that the PathPanel will layout.
            If StartItemIndex > 0 and WrapItems is false, this can be less than PathPanel.Children.Count
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetItemsHost(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the Panel that contains the containers of an ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>
            The Panel that contains the containers of an ItemsControl, or null
            if the Panel could not be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.TraverseBreadthFirst``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Traverses a tree by accepting an initial value and a function that 
            retrieves the child nodes of a node.
            </summary>
            <typeparam name="T">The type of the stream.</typeparam>
            <param name="initialNode">The initial node.</param>
            <param name="getChildNodes">A function that retrieves the child
            nodes of a node.</param>
            <param name="traversePredicate">A predicate that evaluates a node
            and returns a value indicating whether that node and it's children
            should be traversed.</param>
            <returns>A stream of nodes.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetVisualChildrenAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree children of an element and the element itself.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetLogicalChildren(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical children of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetLogicalDescendents(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical descendents of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\es\Microsoft.Expression.Effects.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Effects</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Media.Effects.BlindOrientation">
            <summary>
            Determine the orientation of the blinds
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.BlindsTransitionEffect">
            <summary>
            Transition shader that simulates blinds opening when transitioning
            from one visual to another. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.OrientationProperty">
            <summary>
            Gets or sets the orientation of the blinds
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.CountProperty">
            <summary>
            Gets or sets the number of blinds
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.ShaderOrientationProperty">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the BlindsTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of BlindsTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.Orientation">
            <summary>
            Gets or sets orientatio of the blinds.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.Count">
            <summary>
            Gets or sets the number of blinds to display.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.ShaderOrientation">
            <summary>
            Gets or sets orientation of the blinds.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.BloomEffect">
            <summary>
            Effect that implements a bloom illumination of a visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
            
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BloomIntensityProperty">
            <summary>
            This property is mapped to the BloomIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseIntensityProperty">
            <summary>
            This property is mapped to the BaseIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BloomSaturationProperty">
            <summary>
            This property is mapped to the BloomSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseSaturationProperty">
            <summary>
            This property is mapped to the BaseSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomIntensityProperty">
            <summary>
            This property is mapped to the BloomIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomSaturationProperty">
            <summary>
            This property is mapped to the BloomSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.ThresholdProperty">
            <summary>
            This property is mapped to the BaseSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BloomEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.Threshold">
            <summary>
            Gets or sets the minimum intensity that will be used for the bloom
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseIntensity">
            <summary>
            Gets or sets the base intensity
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BloomIntensity">
            <summary>
            Gets or sets the bloom intensity
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseSaturation">
            <summary>
            Gets or sets the base saturation
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BloomSaturation">
            <summary>
            Gets or sets the bloom saturation
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomIntensity">
            <summary>
            Gets or sets the Base/BloomIntensity variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomSaturation">
            <summary>
            Gets or sets the BaseBloomSaturation variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect">
            <summary>
            Transition effect that reveals two visuals through a growing/shrinking circle. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.FeatherAmountProperty">
            <summary>
            Dependency property which modifies the Feather amount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseProperty">
            <summary>
            Dependency property which modifies the circle movement.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseShaderProperty">
            <summary>
            Dependency property which modifies the reverseShader variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the CircleRevealTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of CircleRevealTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.FeatherAmount">
            <summary>
            Gets or sets the FuzzyAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.Reverse">
            <summary>
            Gets or sets playing the circle reveal backward
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseShader">
            <summary>
            Gets or sets playing the circle reveal backward into the shader
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect">
            <summary>
            Transition effect that transitions two visuals using a cloud 
            texture as the sampler threshold.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CloudyTransitionEffect">
            <summary>
            Defines a transition shader effect that uses an image as a sampler threshold
            for interpolating pixel value between two visuals. 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect">
            <summary>
            Defines a transition shader effect that provides a random value
            allowing the effect to provide variance each time the effect is run.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.RandomSeedProperty">
            <summary>
            Dependency property which modifies the RandomSeed variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.#ctor">
            <summary>
            Updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.RandomSeed">
            <summary>
            Gets or sets the RandomSeed variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.CloudImageProperty">
            <summary>
            Dependency property which modifies the CloudImage variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.CloudImage">
            <summary>
            Gets or sets the CloudImage variable within the shader used for sampling. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the CloudRevealTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of CloudRevealTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.ColorToneEffect">
            <summary>
            Effects that modifies the color tone of a visual using
            two colors as the sampling.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.DesaturationProperty">
            <summary>
            This property is mapped to the Desaturation variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.ToneAmountProperty">
            <summary>
            This property is mapped to the Toned variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.LightColorProperty">
            <summary>
            This property is mapped to the LightColor variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.DarkColorProperty">
            <summary>
            This property is mapped to the DarkColor variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.ColorToneEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.Desaturation">
            <summary>
            Gets or sets the Desaturation variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.ToneAmount">
            <summary>
            Gets or sets the Toned variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.LightColor">
            <summary>
            Gets or sets the LightColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.DarkColor">
            <summary>
            Gets or sets the DarkColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.EmbossedEffect">
            <summary>
            Effect that simulates an embossed look to the visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.AmountProperty">
            <summary>
            This property is mapped to the Amount variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.HeightProperty">
            <summary>
            This property is mapped to the Height variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.ColorProperty">
            <summary>
            This property is mapped to the Color variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.EmbossedEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Amount">
            <summary>
            Gets or sets the Amount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Height">
            <summary>
            Gets or sets the Height variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Color">
            <summary>
            Gets or sets the Color variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.FadeTransitionEffect">
            <summary>
            Transition effect that gradually transitions from one visual to another.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.FadeTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.FadeTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the FadeTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of FadeTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MagnifyEffect">
            <summary>
            Effect that simulates a magnifying lens.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.InnerRadiusProperty">
            <summary>
            Gets or sets the InnerRadius variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.OuterRadiusProperty">
            <summary>
            Gets or sets the OuterRadius variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.CenterProperty">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.AmountProperty">
            <summary>
            Gets or sets the amount variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.InputProperty">
            <summary>
            Gets or sets the input used in the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.generalTransform">
            <summary>
            The transform used for this shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.InnerRadius">
            <summary>
            Gets or sets the inner radius variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.OuterRadius">
            <summary>
            Gets or sets the outer radius variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Center">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Amount">
            <summary>
            Gets or sets the ShrinkFactor: 
            The higher the shrink factor the "smaller" the content inside the ellipse will appear. 
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.EffectMapping">
            <summary>
            Gets the EffectMapping.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform">
            <summary>
            The GeneralTransform corrosponding to the Magnify effect.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.biasValue">
            <summary>
            Attempt to transform a point based on the effect.
            </summary>
            <param name="targetPoint">The point to transform.</param>
            <param name="result">The result if available.</param>
            <returns>Return true if successful.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.effect">
            <summary>
            The effect instance.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.IsInverse">
            <summary>
            If the transform is an inverse.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.inverseTransform">
            <summary>
            The transform specific to this Effect.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.#ctor(Microsoft.Expression.Media.Effects.MagnifyEffect)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fx">The source effect.</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.TransformBounds(System.Windows.Rect)">
            <summary>
            This particular effect keeps axis aligned lines axis aligned, so transformation of the rect is just
            transformation of its corner points.
            </summary>
            <param name="rect">The input rect.</param>
            <returns>The output rect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.OutToIn(System.Windows.Point,System.Double,System.Double,System.Windows.Point,System.Double)">
            <summary>
            For the inverse of the shader, we need to find Pin which is the Pixel Ouput, given Pout the texture input (is the reverse of the shader)
            However, the shader algorithm is dependant on the radius of the pixel output from the center, which is a variable that we don't
            have when computing the inverse. We need to perform bisection in order to converge using the equation below
            PHatout = PHat_in*Scalar where
            PHatout = Pout - Pcenter  
            pHatin = Pin -Pcenter
            
            Scalar is dependent on the radius of Pin (which we don't have). 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.InToOut(System.Windows.Point,System.Double,System.Double,System.Windows.Point,System.Double)">
            <summary>
            Given a pixel output (Pin) find the texture input (Pout)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.CreateInstanceCore">
            <summary>
            Creats a new instance.
            </summary>
            <returns>A new instance of this.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.PointIsInCircle(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Determines if a point is within an ellipse.
            </summary>
            <param name="pt">The test point.</param>
            <param name="center">The center point of the ellipse.</param>
            <param name="radius">The radius of the ellipse.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.Inverse">
            <summary>
            Gets the inverse transform.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MonochromeEffect">
             <summary>
            Effect that turns a visual into a monochrom color
             </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MonochromeEffect.ColorProperty">
            <summary>
            Gets or sets the FilterColor variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MonochromeEffect.InputProperty">
            <summary>
            Gets or sets the Input of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MonochromeEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MonochromeEffect.Color">
            <summary>
            Gets or sets the FilterColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MonochromeEffect.Input">
            <summary>
            Gets or sets the input used in the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.PixelateEffect">
            <summary>
            Effect that pixelates a visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.PixelateEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.PixelateEffect.PixelationProperty">
            <summary>
            This property is mapped to the pixelation amount variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.PixelateEffect.Pixelation">
            <summary>
            Gets or sets the amount of pixelation inside the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.PixelateEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.PixelateTransitionEffect">
            <summary>
            Transition effect that increase/decrease pixelation between two visuals.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the PixelateTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of PixelateTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect">
            <summary>
            Transition effects that performs a radial blur of the current visual  as the new visual is introduced.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the RadialBlurTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of RadialBlurTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RippleEffect">
            <summary>
            Effect that simulates water ripples on the visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.CenterProperty">
            <summary>
            Gets or sets the Center variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.MagnitudeProperty">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.FrequencyProperty">
            <summary>
            Gets or sets the Frequency variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.PhaseProperty">
            <summary>
            Gets or sets the Phase variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.InputProperty">
            <summary>
            Gets or sets the input brush used in the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Center">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Magnitude">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Frequency">
            <summary>
            Gets or sets the frequency variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Phase">
            <summary>
            Gets or sets the Phase variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RippleTransitionEffect">
            <summary>
            Transition effect that simulate water ripple during transition. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the RippleTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of RippleTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SharpenEffect">
            <summary>
            Effects that makes a visual more crisp and sharper. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.AmountProperty">
            <summary>
            This property is mapped to the Amount variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.HeightProperty">
            <summary>
            This property is mapped to the Width variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SharpenEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Amount">
            <summary>
            Gets or sets the Amount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Height">
            <summary>
            Gets or sets the Height variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SlideDirection">
            <summary>
            Define the slide orientation
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SlideInTransitionEffect">
            <summary>
            Transition effect that slide the current visual away, revealing the new visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideDirectionProperty">
            <summary>
            Dependency property which modifies the SlideAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideNormalProperty">
            <summary>
            Dependency property which modifies the SlideAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the SlideInTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of SlideInTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideDirection">
            <summary>
            Gets or sets the SlideAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideNormal">
            <summary>
            Gets or sets the SlideAmount variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect">
             <summary>
            Transition effect that swirl the current visual while introducing the new visual.
             </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.TwistAmountProperty">
            <summary>
            Dependency property which modifies the TwistAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.CellCountProperty">
            <summary>
            Dependency property which modifies the number of cell where pixels will be twisted.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.#ctor(System.Double)">
            <summary>
            Creates an instance and sets the shader's twist variable to the specified values.
            </summary>
            <param name="twist">level of swirl twist</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the SmoothSwirlGridTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of SmoothSwirlGridTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.TwistAmount">
            <summary>
            Gets or sets the TwistAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.CellCount">
            <summary>
            Gets or sets the CellCount variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SwirlEffect">
            <summary>
            Effect that swirls the current visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.CenterProperty">
            <summary>
            This property is mapped to the Center variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.TwistAmountProperty">
            <summary>
            This property is mapped to the SwirlStrength variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.AngleFrequencyProperty">
            <summary>
            This property is mapped to the AngleFrequency variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.generalTransform">
            <summary>
            The transform used when this Effect is applied.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.Center">
            <summary>
            Gets or sets the Center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.TwistAmount">
            <summary>
            Gets or sets the SwirlStrength variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.AngleFrequency">
            <summary>
            Gets or sets the AngleFrequency variable within the shader.
            We do not expose this property. 
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.EffectMapping">
            <summary>
            Gets the GeneralTransform for this effect.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform">
            <summary>
            For transforming input and tree transformations.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.theEffect">
            <summary>
            The instance of the Effect.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.thisIsInverse">
            <summary>
            The inverse of the transform.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.inverseTransform">
            <summary>
            The inverse of this GeneralTransform.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.#ctor(Microsoft.Expression.Media.Effects.SwirlEffect)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="eff">The effect itself.</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.TransformBounds(System.Windows.Rect)">
            <summary>
            For this operation, the bounds is the bounding box of the 4 transformed points. 
            Need to transform each of them, and then circumscribe.  This is true for both the 
            forward and the inverse.
            </summary>
            <param name="rect">The input rect.</param>
            <returns>The transformed rect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.TryTransform(System.Windows.Point,System.Windows.Point@)">
            <summary>
            Attempt to transform inPoint with the Swirl effect.
            </summary>
            <param name="targetPoint">The input point.</param>
            <param name="result">The output point after transformed using the Swirl effect.</param>
            <returns>True and throws if false.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.CreateInstanceCore">
            <summary>
            Returns a new instance of this.
            </summary>
            <returns>A new instance.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.Inverse">
            <summary>
            Gets a clone of the inverse of the current transform.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WaveTransitionEffect">
            <summary>
            Transition effect that waves the current visual while introducing the new visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.MagnitudeProperty">
            <summary>
            Dependency property which modifies the Magnitude variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.PhaseProperty">
            <summary>
            Dependency property which modifies the Phase variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.FrequencyProperty">
            <summary>
            Dependency property which modifies the Phase variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WaveTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WaveTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the WaveTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of WaveTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Magnitude">
            <summary>
            Gets or sets the magnitude of the wave
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Phase">
            <summary>
            Gets or sets the phase of the wave
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Frequency">
            <summary>
            Gets or sets the magnitude of the wave
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WipeDirection">
            <summary>
            Define the wipe direction.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WipeTransitionEffect">
            <summary>
            Transition effect that wipes the current visual introducing the new visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.WipeDirectionProperty">
            <summary>
            Dependency property which modifies the preset of the wipe
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.FeatherAmountProperty">
            <summary>
            Dependency property which modifies the FuzzyAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOriginProperty">
            <summary>
            Dependency property which modifies the LineOrigin variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineNormalProperty">
            <summary>
            Dependency property which modifies the LineNormal variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOffsetProperty">
            <summary>
            Dependency property which modifies the LineOffset variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WipeTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WipeTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the WipeTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of WipeTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.WipeDirection">
            <summary>
            Gets or sets the direction of the wipe.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.FeatherAmount">
            <summary>
            Gets or sets the FuzzyAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOrigin">
            <summary>
            Gets or sets the LineOrigin variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineNormal">
            <summary>
            Gets or sets the LineNormal variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOffset">
            <summary>
            Gets or sets the LineOffset variable within the shader.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\fr\Microsoft.Expression.Controls.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Controls</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.Initialize">
            <summary>
            Called before we loop over the polylines.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.ShouldBreak(System.Int32)">
            <summary>
            Checks whether or not we should continue looping over the polylines.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnPolylineBegin(Microsoft.Expression.Drawing.Core.PolylineData)">
            <summary>
            Called before we begin marching a new polyline.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnPolylineCompleted(System.Double)">
            <summary>
            Called when we walk off the end of a polyline.
            </summary>
            <param name="remaingLength">The remaining arclength in the polyline.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnStepCompleted(System.Double)">
            <summary>
            Called when we sucessfully complete a step.
            </summary>
            <param name="actualStepDistance">The actual step distance.
            This may be different than Step if we have wrapped to another polyline.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.Distribute(Microsoft.Expression.Controls.PathPanel,System.Int32,System.Int32)">
            <summary>
            Distributes the children of a path panel along a given layout path.
            </summary>
            <param name="pathPanel">The path panel.</param>
            <param name="pathIndex">The index of the path in pathPanel.LayoutPaths.</param>
            <param name="childIndex">The index of the first child to be laid out on this path.</param>
            <returns>The index of the next child to be distributed. If childIndex is returned, this function has done nothing.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.ChildIndex">
            <summary>
            The index of the next child to be arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Span">
            <summary>
            The distance in arclength that we want to use for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Step">
            <summary>
            The distance in arclength to walk along the current polyline.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Capacity">
            <summary>
            The total number of elements to be arranged on the LayoutPath.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.EvenDistributionStrategy">
            <summary>
            Distributes the children of a path panel along a layout path.
            Even distribution means that there is equal arclength between the centers of all
            the elements on the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.ChangedPathLayoutProperties">
            <summary>
            Specifies which path layout properties have changed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs.#ctor(Microsoft.Expression.Controls.ChangedPathLayoutProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs"/> class.
            </summary>
            <param name="changedProperties">The data for the event.</param>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs.ChangedProperties">
            <summary>
            Gets the properties changed in a <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathLayoutData">
            <summary>
            Encapsulates the data needed to update a <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LayoutPathIndex">
            <summary>
            Gets or sets the index of the path on which an element is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.GlobalIndex">
            <summary>
            Gets or sets the index of an element in a collection of elements.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LocalIndex">
            <summary>
            Gets or sets the index of an element on a path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.GlobalOffset">
            <summary>
            Gets or sets the offset of an element proportional to the total length of a collection of paths.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LocalOffset">
            <summary>
            Gets or sets the offset of an element proportional to the length of path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.NormalAngle">
            <summary>
            Gets or sets the angle perpendicular to the path at an element's location.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.OrientationAngle">
            <summary>
            Gets or sets the angle perpendicular to the path at an element's location if the element is oriented to the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.IPathLayoutItem">
            <summary>
            Represents an element that is arranged by a <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </summary>
            <remarks>
            Implementing this interface enables <see cref="T:Microsoft.Expression.Controls.PathPanel"/> to set these properties when the element is arranged.
            This interface is not intended for general implementation.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.IPathLayoutItem.Update(Microsoft.Expression.Controls.PathLayoutData)">
            <summary>
            Updates the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/> properties based on the given <see cref="T:Microsoft.Expression.Controls.PathLayoutData"/> and raises the <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
            <param name="data">The data needed to update the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/>.</param>
        </member>
        <member name="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated">
            <summary>
            Occurs when one or more of the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/> properties change.
            </summary>
            <remarks>
            This event is raised whenever the item’s position along the path is updated. This can occur due to changes in the properties on the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> or changes to <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LayoutPathIndex">
            <summary>
            Gets the index of the path on which the item is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalIndex">
            <summary>
            Gets the index of the item in a collection of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalIndex">
            <summary>
            Gets the index of the item on the path on which it is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalOffset">
            <summary>
            Gets the offset of the item proportional to the total length of a collection of paths.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalOffset">
            <summary>
            Gets the offset of the item proportional to the length of the path on which it is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.NormalAngle">
            <summary>
            Gets the angle perpendicular to the path at the item's location.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.OrientationAngle">
            <summary>
            Gets the angle perpendicular to the path at the items's location if the item is oriented to the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.Distribution">
            <summary>
            Specifies the distribution of a <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.Orientation">
            <summary>
            Specifies the orientation of elements on a <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.FillBehavior">
            <summary>
            Specifies the method for altering the <see cref="P:Microsoft.Expression.Controls.LayoutPath.Span"/> on an open path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.LayoutPath">
            <summary>
            Describes a path along which elements are arranged.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Controls.LayoutPath.transformedPolylines">
            <summary>
            Ideally, we want to cache the Bezier curves before flattening, because transform will affect flattening.
            That requires us to cache curves that we don't support very well yet.  Instead, we cache the flatten points
            in distribution strategy and transform them on demand.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.SourceElement">
            <summary>
            Gets or sets the element that defines the path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Distribution">
            <summary>
            Gets or sets whether items are laid out evenly or with a fixed padding.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Capacity">
            <summary>
            Gets or sets the maximum number of items displayed on the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Padding">
            <summary>
            Gets or sets the distance in pixels along the arc length of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> between two items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Orientation">
            <summary>
            Gets or sets the orientation of the items.
            </summary>
            <remarks>
            This property is supported on <see cref="T:Microsoft.Expression.Controls.PathListBox"/>, but not <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Start">
            <summary>
            Gets or sets the distance from the start of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> to place the first item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Span">
            <summary>
            Gets or sets the percentage of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> that participates in layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.FillBehavior">
            <summary>
            Gets or set the method to alter <see cref="P:Microsoft.Expression.Controls.LayoutPath.Span"/> on an open path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.ActualCapacity">
            <summary>
            Gets the computed Capacity.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.IsValid">
            <summary>
            Gets whether or not the <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/> is valid in the context.
            A <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/> is invalid if it is a descendant of the <see cref="T:Microsoft.Expression.Controls.PathPanel"/> in which it used.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PaddedDistributionStrategy">
            <summary>
            Distributes the children of a layout path based on the size of the children and a given padding between the children.
            The distance in arclength between children is determined by the padding plus the sum of the radii of the children's bounding boxes.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathListBox">
            <summary>
            Contains a list of items that are laid out along one or more paths.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathListBox"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.GetContainerForItemOverride">
            <summary>
            Creates the element used to display a specified item.
            </summary>
            <returns>A <see cref="T:Microsoft.Expression.Controls.PathListBoxItem"/> corresponding to a specified item.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own item container.
            </summary>
            <returns>true if the item is its own item container; otherwise, false.</returns>
            <param name="item">The specified item.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements.
            </summary>
            <param name="finalSize">The size that this object should use to arrange its child elements.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.LayoutPaths">
            <summary>
            Gets or sets a collection of objects that define the path(s) used for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.StartItemIndex">
            <summary>
            Gets or sets the index to use within the list of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.WrapItems">
            <summary>
            Gets or sets whether the item index wraps to the beginning of the collection when StartItemIndex is greater than 0.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathListBoxItem">
            <summary>
            Represents an item in a <see cref="T:Microsoft.Expression.Controls.PathListBox"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBoxItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathListBoxItem"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBoxItem.Update(Microsoft.Expression.Controls.PathLayoutData)">
            <summary>
            For a description of this member, see <see cref="M:Microsoft.Expression.Controls.IPathLayoutItem.Update(Microsoft.Expression.Controls.PathLayoutData)"/>.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.PathListBoxItem.PathLayoutUpdated">
            <summary>
            For a description of this member, see <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LayoutPathIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LayoutPathIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.GlobalIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LocalIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.GlobalOffset">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalOffset"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LocalOffset">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalOffset"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.NormalAngle">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.NormalAngle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.OrientationAngle">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.OrientationAngle"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathPanel">
            <summary>
            Arranges child elements along one or more path.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Expression.Controls.PathPanel"/> can be used as an alternative to <see cref="T:Microsoft.Expression.Controls.PathListBox"/> when selection is not necessary.
            The <see cref="P:Microsoft.Expression.Controls.LayoutPath.Orientation"/> property is not supported on <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathPanel"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the size required for child elements.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. </param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements.
            </summary>
            <param name="finalSize">The size that this object should use to arrange its child elements.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.ArrangeChild(System.Int32,System.Int32,Microsoft.Expression.Drawing.Core.PolylineData,Microsoft.Expression.Drawing.Core.MarchLocation,System.Int32)">
            <summary>
            Arranges the child at the given index at a particular location on a LayoutPath.
            </summary>
            <param name="indirectIndex">An index from the range 0 to PathPanel.Count.</param>
            <param name="pathIndex">The index of the layout path on which to arrange the child.</param>
            <param name="polyline">The polyline in the layout path.</param>
            <param name="location">The location on the polyline.</param>
            <param name="localIndex">The index of the child on the LayoutPath.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.GetChildRadius(System.Int32)">
            <summary>
            Calculates the radius of the bounding circle for the child at the given index.
            </summary>
            <param name="indirectIndex">An index from the range 0 to PathPanel.Count.</param>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.LayoutPaths">
            <summary>
            Gets or sets a collection of objects that define the path(s) used for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.StartItemIndex">
            <summary>
            Gets or sets the index to use within the list of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.WrapItems">
            <summary>
            Gets or sets whether the item index wraps to the beginning of the collection when StartItemIndex is greater than 0.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.ValidPaths">
            <summary>
            The subset of LayoutPaths that are attached and not Collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.Count">
            <summary>
            Count is the number of Children that the PathPanel will layout.
            If StartItemIndex > 0 and WrapItems is false, this can be less than PathPanel.Children.Count
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetItemsHost(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the Panel that contains the containers of an ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>
            The Panel that contains the containers of an ItemsControl, or null
            if the Panel could not be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.TraverseBreadthFirst``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Traverses a tree by accepting an initial value and a function that 
            retrieves the child nodes of a node.
            </summary>
            <typeparam name="T">The type of the stream.</typeparam>
            <param name="initialNode">The initial node.</param>
            <param name="getChildNodes">A function that retrieves the child
            nodes of a node.</param>
            <param name="traversePredicate">A predicate that evaluates a node
            and returns a value indicating whether that node and it's children
            should be traversed.</param>
            <returns>A stream of nodes.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetVisualChildrenAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree children of an element and the element itself.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetLogicalChildren(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical children of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetLogicalDescendents(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical descendents of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\es\Microsoft.Expression.Drawing.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Drawing</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Controls.Callout">
            <summary>
            Renders a callout shape supporting several shapes combined with a callout arrow.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.CompositeContentShape">
             <summary>
             Provides a base class of a composite shape that derives from <see cref="T:System.Windows.Controls.ContentControl"/> and implements <see cref="T:Microsoft.Expression.Media.IShape"/>.
             </summary>
             <remarks>
             <see cref="T:Microsoft.Expression.Controls.CompositeContentShape"/> implements <see cref="T:Microsoft.Expression.Media.IShape"/> interface,
             and supports rendering a geometry similar to <see cref="T:System.Windows.Shapes.Shape"/>, but the geometry can be rendered outside of layout boundary.
             
             A typical implementation will have a customized default template in generic.xaml which template-binds most shape properties to a <see cref="T:System.Windows.Shapes.Path"/>.
             It should also extend the <see cref="P:GeometrySource"/> property to customize the appearance of the <see cref="T:System.Windows.Shapes.Path"/>.
            
             This class also supports showing content together with the shape.
             </remarks>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySourceParameters">
            <summary>
            Provides an interface to discribe the parameters of a Shape.
            </summary>
            <remarks>
            This interface is the data for communication between Shape and GeometrySource.
            Typically a concrete implementation of IShape will implements this interface and pass it into
            GeometrySource.UpdateGeometry(), who will consume the shape as readonly data provider.
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Media.IShape">
            <summary>
            Provides the necessary interface to define a Shape.
            Both primitive and composite shapes need to match this interface, although they might derive from different type of FrameworkElement.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.IShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Fill">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how to paint the interior of the shape.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that describes how the shape's interior is painted. The default is null. See Remarks.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values. The default value at run time depends on the type of <see cref="T:System.Windows.Shapes.Shape" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.RenderedGeometry">
            <summary>
            Gets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.GeometryMargin">
            <summary>
            Gets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Media.IShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.CreateGeometrySource">
            <summary>
            Extends how the shape is drawn with creating geometry source.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Controls.CompositeContentShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.OnContentChanged(System.Object,System.Object)">
            <summary>
            Transforms a string content into <see cref="T:TextBlock"/> with center alignment and mulitple line support.
            </summary>
            <remarks>
            Use template binding to <see cref="P:Microsoft.Expression.Controls.CompositeContentShape.InternalContent"/> instead of <see cref="P:Content"/> to enable this method.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that specifies how to paint the interior of the shape.
            </summary>
            <returns>A <see cref="T:System.Windows.Media.Brush"/> that describes how the shape's interior is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeStartLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. </summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineCap" /> enumeration that specifies the shape at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeEndLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the end of a line. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeLineJoin">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:System.Windows.Shapes.Shape" />.</summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration that specifies the join appearance. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeMiterLimit">
            <summary>Gets or sets a limit on the ratio of the miter length to half the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. </summary>
            <returns>The limit on the ratio of the miter length to the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. This value is always a positive number that is greater than or equal to 1.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashArray">
            <summary>Gets or sets a collection of <see cref="T:System.Double" /> values that indicate the pattern of dashes and gaps that is used to outline shapes. </summary>
            <returns>A collection of <see cref="T:System.Double" /> values that specify the pattern of dashes and gaps. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that specifies how the ends of a dash are drawn. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashOffset">
            <summary>Gets or sets a <see cref="T:System.Double" /> that specifies the distance within the dash pattern where a dash begins.</summary>
            <returns>A <see cref="T:System.Double" /> that represents the distance within the dash pattern where a dash begins. The default value is 0.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.RenderedGeometry">
            <summary>
            Gets or sets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.GeometryMargin">
            <summary>
            Gets or sets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.InternalContent">
            <summary>
            Gets or sets the internal content that converts string into center aligned multiple line textblock.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.CompositeContentShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.Callout.AnchorPoint">
            <summary>
            Gets or sets the position of the callout relative to the top and left corner.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.Callout.CalloutStyle">
            <summary>
            Gets or sets the callout style.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.CompositeShape">
            <summary>
            Provides a base class of a composite shape that derives from <see cref="T:System.Windows.Controls.Control"/> and implements <see cref="T:Microsoft.Expression.Media.IShape"/>.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Expression.Controls.CompositeShape"/> implements <see cref="T:Microsoft.Expression.Media.IShape"/> interface,
            and supports rendering a geometry similar to <see cref="T:System.Windows.Shapes.Shape"/>, but the geometry can be rendered outside of layout boundary.
            
            A typical implementation will have a customized default template in generic.xaml which template-binds most shape properties to a <see cref="T:System.Windows.Shapes.Path"/>.
            It should also extend the <see cref="P:GeometrySource"/> property to customize the appearance of the <see cref="T:System.Windows.Shapes.Path"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.CreateGeometrySource">
            <summary>
            Extends how the shape is drawn with creating geometry source.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Controls.CompositeShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that specifies how to paint the interior of the shape.
            </summary>
            <returns>A <see cref="T:System.Windows.Media.Brush"/> that describes how the shape's interior is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeStartLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. </summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineCap" /> enumeration that specifies the shape at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeEndLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the end of a line. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeLineJoin">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:System.Windows.Shapes.Shape" />.</summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration that specifies the join appearance. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeMiterLimit">
            <summary>Gets or sets a limit on the ratio of the miter length to half the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. </summary>
            <returns>The limit on the ratio of the miter length to the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. This value is always a positive number that is greater than or equal to 1.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashArray">
            <summary>Gets or sets a collection of <see cref="T:System.Double" /> values that indicate the pattern of dashes and gaps that is used to outline shapes. </summary>
            <returns>A collection of <see cref="T:System.Double" /> values that specify the pattern of dashes and gaps. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that specifies how the ends of a dash are drawn. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashOffset">
            <summary>Gets or sets a <see cref="T:System.Double" /> that specifies the distance within the dash pattern where a dash begins.</summary>
            <returns>A <see cref="T:System.Double" /> that represents the distance within the dash pattern where a dash begins. The default value is 0.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.RenderedGeometry">
            <summary>
            Gets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.GeometryMargin">
            <summary>
            Gets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.CompositeShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.LineArrow">
            <summary>
            Renders a bended line segment with optional arrowhead on both end.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.LineArrow.MeasureOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
            <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes, or possibly on other considerations such as fixed container size.</returns>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <remarks>
            A default <see cref="T:LineArrow"/> can render at anysize.
            The <see cref="P:RenderedGeometry"/> will stretch to layout boundary and render to outside if necessary.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.BendAmount">
            <summary>
            Gets or sets the amount of bend for the arrow.
            </summary>
            <value>The bend amount between 0 to 1.</value>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.StartArrow">
            <summary>
            Gets or sets how the arrow head is rendered at the start of the line.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.EndArrow">
            <summary>
            Gets or sets how the arrow head is rendered at the end of the line.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.StartCorner">
            <summary>
            Gets or sets from which corner to start drawing the arrow.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.ArrowSize">
            <summary>
            Gets or sets the length of the arrow in pixels.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PanningItems">
            <summary>
            Provides an items control that displays one selected item, and allows panning between items using touch gestures.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PanningItems.#ctor">
            <summary>
            The constructor for PanningItems.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PanningItems.OnApplyTemplate">
            <summary>
            Called when the PanningItems template is applied.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.ScrollDirection">
            <summary>
            Gets or sets the orientation of items in the control.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.FlickTolerance">
            <summary>
            Gets or sets the flick tolerance.  This can be a value between 0 and 1.  
            It represents the percentage of the size of the PanningItems needed to be covered by the flick gesture to trigger an items change.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.PreviousItem">
            <summary>
            Gets or sets the item before the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.NextItem">
            <summary>
            Gets or sets the item after the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.LoopContents">
            <summary>
            Gets or sets whether the contents of the items control will loop, so that the first item will follow the last item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.SliderValue">
            <summary>
            Gets or sets the value of the slider controlling the panning motion.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathGeometryHelper">
            <summary>
            Helper class to work with PathGeometry
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.ConvertToPathGeometry(System.String)">
            <summary>
            Converts a string in the path mini-langauge into a PathGeometry.
            </summary>
            <param name="abbreviatedGeometry">A string in the path mini-langauge.</param>
            <remarks>
            Algorithm is modified from WPF: MS.Internal.Parsers.ParseStringToStreamGeometryContext.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.AsPathGeometry(System.Windows.Media.Geometry)">
            <summary>
            Convert the given geometry into a single PathGeometry.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.SyncPolylineGeometry(System.Windows.Media.Geometry@,System.Collections.Generic.IList{System.Windows.Point},System.Boolean)">
            <summary>
            Update the given geometry as PathGeometry with polyline matching given point list.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathGeometryHelper.AbbreviatedGeometryParser">
            <summary>
            Parses abbreviated geometry sytax.
            </summary>
            <remarks>
            The algorithm is modified from WPF: MS.Internal.AbbreviatedGeometryParser
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathSegmentHelper">
            <summary>
            Helper class to Convert ArcSegment to BezierSegment(s)
            </summary>
            <summary>
            Helper class to work with PathSegment and all variations.
            </summary>
            <summary>
            Strategy classes to handle different types of PathSegment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierSegments(System.Windows.Media.ArcSegment,System.Windows.Point)">
            <summary>
            Convert an Arc segment into Bezier format
            Return BezierSegment, PolyBezierSegment, LineSegment, or null
            When returning null, the Arc degenerated into start point.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SetIsStroked(System.Windows.Media.PathSegment,System.Boolean)">
            <summary>
            Avoid calling the three-parameter constructor, since it always sets a local value for IsStroked.
            </summary>
            <param name="segment"></param>
            <param name="isStroked"></param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SyncPolylineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Collections.Generic.IList{System.Windows.Point},System.Int32,System.Int32)">
            <summary>
            Update the SegmentCollection with given polyline matching given point list.
            Try to keep changes minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SyncPolyBezierSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Collections.Generic.IList{System.Windows.Point},System.Int32,System.Int32)">
            <summary>
            Update the collection[index] segment with poly bezier segment matching given point list.
            givne point list must contain 3*N points for N Bezier segments.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.IsEmpty(System.Windows.Media.PathSegment)">
            <summary>
            Test if given path segment is empty.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetPointCount(System.Windows.Media.PathSegment)">
            <summary>
            Get the point count in given path segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetLastPoint(System.Windows.Media.PathSegment)">
            <summary>
            Get the last point of given path segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetPoint(System.Windows.Media.PathSegment,System.Int32)">
            <summary>
            Get the point of given index in given segment.
            If input is (-1), return the last point.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.FlattenSegment(System.Windows.Media.PathSegment,System.Collections.Generic.IList{System.Windows.Point},System.Windows.Point,System.Double)">
            <summary>
            Flatten given segment and add result points into given point list.
            </summary>
            <param name="segment">The segment to be flatten</param>
            <param name="points">The result point list</param>
            <param name="start">The start point of the segment</param>
            <param name="tolerance">The error tolerance. Must be possitive. Can be 0, fallback to default tolerance.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.ArcToBezier(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Double,System.Double,System.Windows.Point[]@,System.Int32@)">
            <summary>
            ArcToBezier, Compute the Bezier approximation of an arc
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            </summary>
            <remarks>
            This utility computes the Bezier approximation for an elliptical arc as
            it is defined in the SVG arc spec. The ellipse from which the arc is
            carved is axis-aligned in its own coordinates, and defined there by its
            x and y radii. The rotation angle defines how the ellipse's axes are
            rotated relative to our x axis. The start and end points define one of 4
            possible arcs; the sweep and large-arc flags determine which one of
            these arcs will be chosen. See SVG spec for details.
            
            Returning cPieces = 0 indicates a line instead of an arc
                      cPieces = -1 indicates that the arc degenerates to a point 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.GetArcAngle(System.Windows.Point,System.Windows.Point,System.Boolean,System.Boolean,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Get the number of Bezier arcs, and sine/cosine of each.
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            </summary>
            <remarks>
            This is a private utility used by ArcToBezier.  We break the arc into
            pieces so that no piece will span more than 90 degrees.  The input
            points are on the unit circle.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.GetBezierDistance(System.Double,System.Double)">
             <summary>
             GetBezierDistance, return the distance as a fraction of the radius
             Adopted from MIL:Graphics\core\geometry\utils.cpp
             </summary>
            <remarks>
                  Get the distance from a circular arc's endpoints to the control points
                  of the Bezier arc that approximates it, as a fraction of the arc's
                  radius.
            
                  Since the result is relative to the arc's radius, it depends strictly on
                  the arc's angle. The arc is assumed to be of 90 degrees of less, so the
                  angle is determined by the cosine of that angle, which is derived from
                  rDot = the dot product of two radius vectors.  We need the Bezier curve
                  that agrees with the arc's points and tangents at the ends and midpoint. 
                  Here we compute the distance from the curve's endpoints to its control
                  points.
            
                  Since we are looking for the relative distance, we can work on the unit
                  circle. Place the center of the circle at the origin, and put the X axis
                  as the bisector between the 2 vectors.  Let a be the angle between the
                  vectors.  Then the X coordinates of the 1st and last points are cos(a/2). 
                  Let x be the X coordinate of the 2nd and 3rd points.  At t=1/2 we have a
                  point at (1,0). But the terms of the polynomial there are all equal:
            
                            (1-t)^3 = t*(1-t)^2 = t^2*(1-t) = t^3 = 1/8,
            
                  so from the Bezier formula there we have:
            
                            1 = (1/8) * (cos(a/2) + 3x + 3x + cos(a/2)), 
            
                  hence
            
                            x = (4 - cos(a/2)) / 3
            
                  The X difference between that and the 1st point is:
                  
                            DX = x - cos(a/2) = 4(1 - cos(a/2)) / 3.
            
                  But DX = distance / sin(a/2), hence the distance is
            
                            dist = (4/3)*(1 - cos(a/2)) / sin(a/2).
            
                  Rather than the angle a, we are given rDot = R^2 * cos(a), so we
                  multiply top and bottom by R:
             
                            dist = (4/3)*(R - Rcos(a/2)) / Rsin(a/2)
             
                  and use some trig:
                                           ________________
                            cos(a/2)   = \/(1 + cos(a)) / 2
                                           ______________________
                            R*cos(a/2) = \/(R^2 + R^2 cos(a)) / 2 
                                           ________________
                                       = \/(R^2 + rDot) / 2
            
                  Let A = (R^2 + rDot)/2.
                                           ____________________
                            R*sin(a/2) = \/R^2 - R^2 cos^2(a/2)
                                           _______
                                       = \/R^2 - A
            
                  so:
                                                      _
                                         4      R - \/A
                                  dist = - * ------------
                                         3      _______
                                              \/R^2 - A
            
              History:
                  5/29/2001 MichKa
                      Created it.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.AcceptRadius(System.Double,System.Double,System.Double@)">
            <summary>
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            Return false if the radius is too small compared to the chord length (returns true on NaNs)
            radius is modified to the value that's accepted.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.BezierCurveFlattener">
            <summary>
            A utility class to flatten Bezier curves.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.BezierCurveFlattener.FlattenCubic(System.Windows.Point[],System.Double,System.Collections.Generic.ICollection{System.Windows.Point},System.Boolean,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Flattens a Bezier cubic curve and adds the result polyline to the third parameter.
            </summary>
            <param name="controlPoints">The 4 Bezier cubic control points.</param>
            <param name="errorTolerance">The maximum distance between two corresponding points on the true curve 
            and on the flattened polyline. Must be strictly positive.</param>
            <param name="resultPolyline">Where to add the flattened polyline.</param>
            <param name="skipFirstPoint">True to skip the first control point when adding the flattened polyline.
            <param name="resultParameters">Where to add the value of the Bezier curve parameter associated to 
            each of the polyline vertices</param> 
            If <paramref name="resultPolyline"/> is empty, the first control point 
            and its associated parameter are always added.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.BezierCurveFlattener.FlattenQuadratic(System.Windows.Point[],System.Double,System.Collections.Generic.ICollection{System.Windows.Point},System.Boolean,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Flattens a Bezier quadratic curve and adds the result polyline to the third parameter.
            We use degree elevation for Bezier curves to reuse the code for the cubic case.
            </summary>
            <param name="controlPoints">The 3 Bezier quadratic control points.</param>
            <param name="errorTolerance">The maximum distance between two corresponding points on the true curve 
            and on the flattened polyline. Must be strictly positive.</param>
            <param name="resultPolyline">Where to add the flattened polyline.</param>
            <param name="skipFirstPoint">Whether to skip the first control point when adding the flattened polyline. 
            <param name="resultParameters">Where to add the value of the Bezier curve parameter associated to
            each of the polyline vertices</param>
            If <paramref name="resultPolyline"/> is empty, the first control point and 
            its associated parameter are always added.</param>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.CommonExtensions">
            <summary>
            Extension methods supporting non-geometry types
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence with the index of each item.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.EnsureListCount``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Ensure the count of list to given count.  Create default(T) or remove items when necessary.
            If Input IList is a List, AddRange or RemoveRange is used.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.EnsureListCount``1(System.Collections.Generic.IList{``0},System.Int32,System.Func{``0})">
            <summary>
            Ensure the count of list to given count.  Create with given fatory or remove items when necessary.
            If Input IList is a List, AddRange or RemoveRange is used when there's no factory.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a range of items to the end of a collection.
            If collection is list, List.AddRange is used.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.Last``1(System.Collections.Generic.IList{``0})">
            <summary>
            Get the last item of given list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.RemoveLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove the last item from the given list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.DeepCopy``1(``0)">
            <summary>
            Make a copy of obj and all it's public properties, including all collection properties.
            Possible perf optimization: this is used only for Transform and Geometry.
            We should develope a copier for them instead of using reflection.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.SetIfDifferent(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object)">
            <summary>
            Set the value if different.  Avoid setting local value if possible.
            return true when the value has been changed
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ClearIfSet(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Clears the dependency property when it is locally set on the given dependency object.
            Return false if the dependeny property is not locally set.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.FindVisualDesendent``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean})">
            <summary>
            Find all visual desendent of given type and condition using breath first search.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get all visual children in IEnumerable
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.DrawingPropertyMetadata">
            <summary>
            Unify the interface of PropertyMetadata in WPF and Silverlight.
            Providing the necessary notification about render, arrange or measure.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.#ctor(Microsoft.Expression.Media.DrawingPropertyMetadataOptions,System.Object)">
            <summary>
            This private Ctor should only be used by AttachCallback.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.AttachCallback(System.Object,Microsoft.Expression.Media.DrawingPropertyMetadataOptions,System.Windows.PropertyChangedCallback)">
            <summary>
            Chain InternalCallback() to attach the instance of DrawingPropertyMetadata on property callback.
            In Silverlight4-, the property metadata is thrown away after setting. Use callback to remember it.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.InternalCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Before chaining the original callback, trigger DrawingPropertyChangedEvent
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.GeometryHelper">
            <summary>
            Extension methods for Geometry related data structures (Point/Vector/Size/Rect)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Resize(System.Windows.Rect,System.Double)">
            <summary>
            Resize the rectangle to relative size while keeping center invariant.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Subtract(System.Windows.Point,System.Windows.Point)">
            <summary>
            Get the difference Vector between two Points
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Plus(System.Windows.Point,System.Windows.Point)">
            <summary>
            Memberwise plus for Point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Minus(System.Windows.Point,System.Windows.Point)">
            <summary>
            Memberwise minus for Point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.ConvertToPathGeometry(System.String)">
            <summary>
            Converts a string of mini-languages to a <see cref="T:PathGeometry"/>.
            </summary>
            <remarks>See: Path Markup Syntax(http://msdn.microsoft.com/en-us/library/cc189041(VS.95).aspx)</remarks>
            <param name="abbreviatedGeometry">The string of path mini-languages for describing geometric paths.</param>
            <returns>A <see cref="T:PathGeometry"/> converted from the the path mini-languages/></returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.FlattenFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Double)">
            <summary>
            Flattens a <see cref="T:PathFigure"/> and adds result points to given <paramref name="points"/>.
            </summary>
            <param name="figure">The input <see cref="T:PathFigure"/>.</param>
            <param name="points">The point list to which result points will append.</param>
            <param name="tolerance">A positive number specifying the maximum allowed error from result points to input path figure.  Value 0 allows algorithm to pick the tolerance automatically.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcPoint(System.Double)">
            <summary>
            Get the normalized arc in (0,0)(1,1) box.
            Zero degree is mapped to [0.5, 0] (up), and clockwise
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcPoint(System.Double,System.Windows.Rect)">
            <summary>
            Get the absolute arc point in given bound with given relative radius.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcAngle(System.Windows.Point)">
            <summary>
            Get the angle on arc relative to (0,0)(1,1) box.
            Zero degree is mapped to [0.5, 0] (up), and clockwise
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcAngle(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Get the angle on arc from given absolute point relative to bound
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeTransform(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Compute the transform that moves Rect from to Rect to.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeTransform(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Computes the transform from the coordinate space of one <c>UIElement</c> to another.
            </summary>
            <param name="from">The source element.</param>
            <param name="to">The destination element.</param>
            <returns>The transform between the <c>UIElement</c>s, or null if it cannot be computed.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeToAbsolutePoint(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Map relative point to absolute using the mapping from given bound to (0,0)(1,1) box.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.AbsoluteToRelativePoint(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Map absolute point to relative using the mapping from (0,0)(1,1) box to given bound.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetStretchBound(System.Windows.Rect,System.Windows.Media.Stretch,System.Windows.Size)">
            <summary>
            Compute the bound after stretch within given logical bound.
            If stretch to uniform, use given aspectRatio.
            If aspectRatio is empty, it's equivalent to Fill.
            If stretch is None, equivalent to Fill or Uniform.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Midpoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the mid point of given 2 points
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The mid point between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Dot(System.Windows.Vector,System.Windows.Vector)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="lhs">The first vector.</param>
            <param name="rhs">The second vector.</param>
            <returns>The dot product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Dot(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the dot product of two Points.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Distance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance between two points.
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The distance between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.SquaredDistance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the square of the distance between two points.
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The square of the distance between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Determinant(System.Windows.Point,System.Windows.Point)">
            <summary>
            Determinant of cross product.  Equivalent to directional area
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Normal(System.Windows.Point,System.Windows.Point)">
            <summary>
            Compute the normal direction vector of given line segments
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Perpendicular(System.Windows.Vector)">
            <summary>
            Compute perpendicular vector, 90 degrees counter-clockwise.
            Vector to right perpendicular result a vector to up.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GeometryEquals(System.Windows.Media.Geometry,System.Windows.Media.Geometry)">
            <summary>
            Returns whether the two geometries are identical.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureGeometryType``1(``0@,System.Windows.Media.Geometry@,System.Func{``0})">
            <summary>
            Ensure the value is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureGeometryType``1(``0@,System.Collections.Generic.IList{System.Windows.Media.Geometry},System.Int32,System.Func{``0})">
            <summary>
            Ensure the list[index] is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureSegmentType``1(``0@,System.Collections.Generic.IList{System.Windows.Media.PathSegment},System.Int32,System.Func{``0})">
            <summary>
            Ensure the list[index] is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.ComputeBSpline(System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Double)">
            <summary>
            de'Boor algorithm to subdevide BSpline into poly Bezier segments.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.MathHelper">
            <summary>
            Helper class providing static properties and methods related to floating point arithmetic.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.Epsilon">
            <summary>
            The minimum distance to consider two values are same.
            Note: internal floating point in MIL/SL is float, not double.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.TwoPI">
            <summary>
            The value of angle of a full circle.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.PentagramInnerRadius">
            <summary>
            The inner radius for pentagram polygon shape, at precision of 3 digits in percentage.
            (1 - Sin36 * Sin72 / Sin54) / (Cos36) ^ 2, which is 0.47210998990512996761913067272407
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.IsVerySmall(System.Double)">
            <summary>
            Determines whether a <c>System.Double</c> value is small enough to be considered
            equivalent to zero.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if value is smaller than <c>DoubleTolerance</c>;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.EnsureRange(System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Return the value that's within the given range
            Given min/max is null means no limit.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.Hypotenuse(System.Double,System.Double)">
            <summary>
            Computes the Euclidean norm of the vector (x, y).
            </summary>
            <param name="x">The first component.</param>
            <param name="y">The second component.</param>
            <returns>The Euclidean norm of the vector (x, y).</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.DoubleFromMantissaAndExponent(System.Double,System.Int32)">
            <summary>
            Computes a real number from the mantissa and exponent.
            </summary>
            <param name="x"></param>
            <param name="exp"></param>
            <returns>The value of x * 2^exp if successful.</returns>
            <remarks>See ::ldexp in any decent C language runtime library.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.IsFiniteDouble(System.Double)">
            <summary>
            Tests a double.
            </summary>
            <param name="x">The double to test.</param>
            <returns><c>true</c> if x is not a NaN and is not equal to plus or minus infinity;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathFigureHelper">
            <summary>
            Helper class to work with PathFigure
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.FlattenFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Double,System.Boolean)">
            <summary>
            Flatten the given figure and add to the point list.
            </summary>
            <param name="tolerance">The error tolerance. Must be possitive. Can be 0, fallback to default tolerance.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.AllSegments(System.Windows.Media.PathFigure)">
            <summary>
            Iterate all segments inside given figure, and returns correct start point for each segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncPolylineFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
            <summary>
            Synchronize the figure to the given list of points as a single polyline segment.
            Try to keep the change minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncPolyBezierFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
            <summary>
            Synchronize the figure to the given list of points as a single PolyBezierSegment.
            Try to keep the change minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncEllipseFigure(System.Windows.Media.PathFigure,System.Windows.Rect,System.Windows.Media.SweepDirection,System.Boolean)">
            <summary>
            Synchronize the given figure to be a closed ellipse with 2 arc segments.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathSegmentData">
            <summary>
            A Tuple data structure for PathSegment and corresponding StartPoint.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PolylineData">
            <summary>
            Represent a polyline consist with a list of connecting points.
            A closed polygon is represented by repeating the first point at the end.
            The differences, normals, angles, and lengths are computed on Demand.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.#ctor(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Construct a polyline with two or more points.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.Difference(System.Int32)">
            The forward difference vector of polyline.
            Points[i] + Differences[i] = Points[i+1]
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.SmoothNormal(System.Int32,System.Double,System.Double)">
            <summary>
            Compute the normal vector of given location (lerp(index, index+1, fraction).
            If the location is within range of cornerRadius, interpolate the normal direction.
            </summary>
            <param name="cornerRadius">The range of normal smoothless.  If zero, no smoothness and return the exact normal on index.</param>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.IsClosed">
            <summary>
            The polyline is closed when first and last point is repeated.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Count">
            <summary>
            The count of points in this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.TotalLength">
            <summary>
            The total arc length of this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Points">
            <summary>
            The point array of this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Lengths">
            <summary>
            The length between line segments, Points[i] to Points[i+1]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Normals">
            <summary>
            The list of normal vectors for each segment.
            Normals[i] is the normal of segment p[i] to p[i + 1].
            Normals[N-1] == Normals[N-2].
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Angles">
            <summary>
            The list of Cos(angle) between 2 line segments on point p[i]
            Note: The value is cos(angle) = Dot(u, v). It's not in degree.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.AccumulatedLength">
            <summary>
            The list of accumulated length from points[i] to points[0]
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.MarchLocation">
            <summary>
            The data structure to communicate with PathMarch algorithm.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetPoint(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Get the interpolated position of this this MarchLocation on given point list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetNormal(Microsoft.Expression.Drawing.Core.PolylineData,System.Double)">
            <summary>
            Get the interpolated normal direction of this this MarchLocation on given normal vector list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetArcLength(System.Collections.Generic.IList{System.Double})">
            <summary>
            Get the arc length of this MarchLocation to the start of the entire polyline.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Reason">
            <summary>
            The reason why this location is sampled.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Index">
            <summary>
            The index of the point on polyline point list.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Ratio">
            <summary>
            Ratio: [0, 1], which is always before / (before + after)
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Before">
            <summary>
            Arc length before stop point.  It's non-negative, and less than Length[index]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.After">
            <summary>
            Arc length after the stop point.  It's non-negative, and less than Length[index]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Remain">
            <summary>
            Remaining length within a step to hit next stop.  Positive to go forward. Negative to go backward.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PolylineHelper">
            <summary>
            Helper class to work with list of points
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineHelper.PathMarch(Microsoft.Expression.Drawing.Core.PolylineData,System.Double,System.Double,System.Func{Microsoft.Expression.Drawing.Core.MarchLocation,System.Double})">
            <summary>
            March the given polyline with given interval and output each stop through callback
            </summary>
            <param name="polyline">The polyline points to march on</param>
            <param name="startArcLength">The arc length to march before stopping at the first point.</param>
            <param name="cornerThreshold">The max angle between edges to be considered a corner vertex</param>
            <param name="stopCallback">Callback when marching algorithm stop at a point.  The callback returns the arc length for next stop.
            If the asked length is negative, march backwards. If callback returns NaN, finish marching.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineHelper.GetWrappedPolylines(System.Collections.Generic.IList{Microsoft.Expression.Drawing.Core.PolylineData},System.Double@)">
            <summary>
            Reorders the given list of polylines so that the polyline a given arclength into the list is the first.
            Polylines that preceded this line are concatenated to the end of the list, with the first polyline at the very end. 
            </summary>
            <param name="lines">A list of polylines.</param>
            <param name="startArcLength">The arclength into the entire list of polylines at which to find the start line.
            The arc length into that line is returned in this variable.</param>
            <returns>The reordered and wrapped list.</returns>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.RandomEngine">
            <summary>
            A random generator support uniform and gaussian distributions.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.RandomEngine.Gaussian">
            <summary>
            Generate a pair of independent standard normally distributed random numbers,
            zero expectation, unit variance, using polar form of the Box-Muller transformation.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.#ctor">
            <summary>
            Private constructor. Force to use factory methods.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a line segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a cubic bezier segment from quatratic curve (3 control points)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a cubic bezier segment with 4 control points.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.SimpleSegment.Points">
            <summary>
            Control points of path segment.  Length is variant.
            Line segment has 2 points, Cubic bezier has 4 points.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.TransformExtensions.TransformEquals(System.Windows.Media.Transform,System.Windows.Media.Transform)">
            <summary>
            Compares two transforms for an exact match.  Transforms with the same value but different structure(e.g. Translate(0,0) and Rotate(0) are not considered equivalent).
            </summary>
            <param name="firstTransform">The first transform.</param>
            <param name="secondTransform">The second transform.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Expression.Media.UnitType">
            <summary>
            Specifies the unit of thickness.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.UnitType.Pixel">
            <summary>
            Unit in pixels.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.UnitType.Percent">
            <summary>
            Unit in percentage relative to bounding box.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometrySource`1">
            <summary>
            Provides the base class of a source of geometry.
            It generate and cache the geometry based on input parameters and layout bounds.
            </summary>
            <remarks>
            A typical implementation will extend the UpdateCachedGeometry() to update this.cachedGeometry.
            This base class will then handle the invalidation, pipeline to geometry effects and caching realtive to layout bounds.
            An implementation should try to reuse the cached geometry as much as possible to avoid reconstruction in rendering thread.
            An implementation can extend the ComputeLogicalBounds to handle Stretch differently.
            </remarks>
            <typeparam name="TParameters">The type of geometry source parameter on which the base class is working on.</typeparam>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySource">
            <summary>
            Provides an interface to describe the source of a geometry.
            </summary>
            <remarks>
            This interface is designed to expose geometry source in a non-generic way.
            Typical implementation should subclass GeometrySource&lt;&gt; instead of implementing this interface directly.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.IGeometrySource.InvalidateGeometry">
            <summary>
            Notify the geometry is invalidated because of external changes.
            </summary>
            <remarks>
            Typically geometry is invalidated when parameters are changed.
            If any geometry has been invalidated externally, geometry will be recomputed regardless bounds' change.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.IGeometrySource.UpdateGeometry(Microsoft.Expression.Media.IGeometrySourceParameters,System.Windows.Rect)">
            <summary>
            Update the geometry using given parameter and layout bounds.
            Returns false if nothing has been updated.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.Geometry">
            <summary>
            Gets or sets the result geometry after the latest UpdateGeometry()
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.LogicalBounds">
            <summary>
            Gets the bounding box where geometry should stretch to.
            The actual geometry might be smaller or larger than this.
            <see cref="P:Microsoft.Expression.Media.IGeometrySource.LogicalBounds"/> should already take stroke thickness and stretch into consideration.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.LayoutBounds">
            <summary>
            Gets the actuall bound of FrameworkElement.
            <see cref="P:Microsoft.Expression.Media.IGeometrySource.LayoutBounds"/> includes logical bounds, stretch and stroke thickness.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometrySource`1.cachedGeometry">
            <summary>
            Specifics the geometry from the previous geometry effect process.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.InvalidateGeometry">
            <summary>
            Notify the geometry is invalidated because of external changes.
            </summary>
            <remarks>
            Typically geometry is invalidated when parameters are changed.
            If any geometry has been invalidated externally, geometry will be recomputed regardless bounds' change.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.UpdateGeometry(Microsoft.Expression.Media.IGeometrySourceParameters,System.Windows.Rect)">
            <summary>
            Update the geometry based on given parameters and layoutBounds.
            Returns false if geometry hasn't been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.UpdateCachedGeometry(`0)">
            <summary>
            Extend the way to provide geometry by implementing this function.
            Return true when any of the geometry is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Extend the way to handle stretch mode.
            Default is to always use Stretch.Fill and center stroke.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.ApplyGeometryEffect(Microsoft.Expression.Media.IGeometrySourceParameters,System.Boolean)">
            <summary>
            Apply geometry effect when dirty or forced, update this.Geometry.
            Otherwise, keep this.Geometry as this.cachedGeometry.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.Geometry">
            <summary>
            Gets or sets the result geometry after the latest UpdateGeometry()
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.LogicalBounds">
            <summary>
            Gets the bounding box where geometry should stretch to.
            The actual geometry might be smaller or larger than this.
            <see cref="P:Microsoft.Expression.Media.GeometrySource`1.LogicalBounds"/> should already take stroke thickness and stretch into consideration.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.LayoutBounds">
            <summary>
            Gets the actuall bound of FrameworkElement.
            <see cref="P:Microsoft.Expression.Media.GeometrySource`1.LayoutBounds"/> includes logical bounds, stretch and stroke thickness.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Expression.Media.ArcGeometrySource.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Arc think Stretch.None is same as Stretch.Fill, assuming aspect ratio = 1:1
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.ArcGeometrySource.NormalizeThickness(Microsoft.Expression.Media.IArcGeometrySourceParameters)">
            <summary>
            Normalize thickness, both relative to bounding box and absolute pixel.
            realtive thickness = 0 -> full circle radius or clamped.
            realtive thickness = 1 -> shrinked to a dot, or degenerated.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.ArrowOrientation">
            <summary>
            Specifies the direction the arrow points.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Left">
            <summary>
            The arrow points to left.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Right">
            <summary>
            The arrow points to right.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Up">
            <summary>
            The arrow points up.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Down">
            <summary>
            The arrow points down.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.BlockArrowGeometrySource.ArrowBuilder">
            <summary>
                 B
                /|
               / C--D
              A     |
               \ C--D
                \|
                 B
            Algorithm only use Width/Height assuming top-left at 0,0
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.CalloutStyle">
            <summary>
            Specifies the rendering style of a Callout shape
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Rectangle">
            <summary>
            A rectangle shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.RoundedRectangle">
            <summary>
            A rounded rectangle shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Oval">
            <summary>
            A oval shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Cloud">
            <summary>
            A cloud shaped callout.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateEdge(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double,System.Boolean)">
            <summary>
            Update the edge line, and connect to anchor point if necessary
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdatePolylineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Update polyline segment, connecting start, anchor and end point with Callout style
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateLineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point)">
            <summary>
            Update the line segment to given point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.ComputeCorners(System.Double)">
            <summary>
            Compute the corner points, clockwise, 8 points for 4 corners
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateCornerArc(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point)">
            <summary>
            Corner Arc is always smaller arc with 90 degree
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometryEffect">
            <summary>
            Provides the base class of GeometryEffect that transform a geometry into another geometry.
            </summary>
            <remarks>
            This class provides the basic implementation of processing the rendered geometry of a IShape before it's passed to rendering.
            A typical implementation will extend the virtual function <see cref="F:ProcessGeometry"/> to transform input geometry.
            <see cref="T:GeometryEffect"/> is typically attached to <see cref="T:IShape"/> as an attached property and activated when <see cref="T:IShape"/> geometry is updated.
            The <see cref="P:OutputGeometry"/> of a <see cref="T:GeometryEffect"/> will replace the rendered geometry in <see cref="T:IShape"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.GetGeometryEffect(System.Windows.DependencyObject)">
            <summary>
            Gets the geometry effect as attached property on given dependency object.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.SetGeometryEffect(System.Windows.DependencyObject,Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Sets the geometry effect as attached property on given dependency object.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.CloneCurrentValue">
            <summary>
            Creates a modifiable clone (deep copy) of the <see cref="T:GeometryEffect"/> using its current values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.DeepCopy">
            <summary>
            Makes a deep copy of the geometry effect. Implements CloneCurrentValue in Silverlight.
            </summary>
            <returns>A clone of current instance of geometry effect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Equals(Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Tests if given geometry effect is equivalent to the current instance.
            </summary>
            <param name="geometryEffect">a geometry effect compare with.</param>
            <returns>Returns true when two effects renders a same appearance.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometryEffect.cachedGeometry">
            <summary>
            Specifics the geometry from the previous geometry effect process.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.InvalidateGeometry">
            <summary>
            Invalidate the geometry effect without actually compute the geometry.
            It will notify all parent shapes or effects to invalidate accordingly.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.ProcessGeometry(System.Windows.Media.Geometry)">
            <summary>
            Process geometry effect on given input geometry.
            Result is stored in GeometryEffect.OutputGeometry.
            </summary>
            <returns>Return false if nothing has been changed.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.UpdateCachedGeometry(System.Windows.Media.Geometry)">
            <summary>
            Extend the way of updating cachedGeometry based on given input geometry.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Detach">
            <summary>
            Notified when detached from parent chain.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Attach(System.Windows.DependencyObject)">
            <summary>
            Notified when attached to a parent chain.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.InvalidateParent(System.Windows.DependencyObject)">
            <summary>
            Invalidate the geometry on given dependency object when
            the object is a valid parent type (IShape or GeometryEffect).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.CreateInstanceCore">
            <summary>
            Implement the Freezable in WPF.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.DefaultGeometryEffect">
            <summary>
            The default geometry effect that does nothing but passing through the input geometry.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.OutputGeometry">
            <summary>
            Gets the output geometry of this geometry effect.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.Parent">
            <summary>
            Parent can be either IShape or GeometryEffectGroup.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometryEffectConverter">
            <summary>
            Provides the conversion between string and geometry effect
            </summary>
            <remarks>
            This class enables the brief sytax in xaml like <code>GeometryEffect="Sketch"</code>
            It will create a clone of instance of geometry effect so it can be used as resources.
            </remarks>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometryEffectConverter.registeredEffects">
            <summary>
            Build a preset list of supported geometry effects.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A GeometryEffect can be converted from string type.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A GeometryEffect can be converted to string type.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts a string to a geometry effect.  Fallback value is null.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a geometry effect into a string.  Fallback value is null.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySourceExtensions">
            <summary>
            Provides helper extension methods to work with IGeometrySource and parameters.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.ArrowType">
            <summary>
            Specifies the Arrow head type.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.NoArrow">
            <summary>
            No arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.Arrow">
            <summary>
            A triagle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.StealthArrow">
            <summary>
            A stealth triangle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.OpenArrow">
            <summary>
            An open triangle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.OvalArrow">
            <summary>
            An oval head.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.CornerType">
            <summary>
            Specifies the corner location.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.TopLeft">
            <summary>
            On top left of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.TopRight">
            <summary>
            On top right of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.BottomRight">
            <summary>
            On bottom right of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.BottomLeft">
            <summary>
            On bottom left of bounding box.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.PolygonGeometrySource.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Polygon think Stretch.None is same as Stretch.Fill
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.SketchGeometryEffect">
            <summary>
            A geometry effect to transform any geometry into a Sketch style as in SketchFlow.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.DeepCopy">
            <summary>
            Makes a deep copy of the geometry effect
            </summary>
            <returns>A clone of current instance of geometry effect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.Equals(Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Tests if given geometry effect is equivalent to the current instance.
            </summary>
            <param name="geometryEffect">a geometry effect compare with.</param>
            <returns>Returns true when two effects renders a same appearance.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.UpdateCachedGeometry(System.Windows.Media.Geometry)">
            <summary>
            Updating cachedGeometry based on given input geometry.
            </summary>
            <param name="input">A input geometry</param>
            <returns>Returns true when anything on cachedGeometry has been updated.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.SketchGeometryEffect.randomSeed">
            <summary>
            Use the same random seed on creation to keep visual flickering minimum
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.GetEffectiveSegments(System.Windows.Media.PathFigure)">
            <summary>
            Iterates all simple segments in given path figure including the closing chord.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Shapes.Arc">
            <summary>
            Renderes an Arc shape supporting Arc, Ring and Pie mode controled by ArcThickness.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Shapes.PrimitiveShape">
            <summary>
            Platform neutral implementation of Shape deriving from WPF:Shape or SL:Path
            </summary>
            <summary>
            Provides WPF implementation of Shap who derives from platform Shape.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.CreateGeometrySource">
            <summary>
            Extend how the shape is drawn with creating geometry source
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.MeasureOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
            <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes, or possibly on other considerations such as fixed container size.</returns>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <remarks>
            In WPF, measure override works from Shape.DefiningGeometry which is not always as expected
            see bug 99497 for details where WPF is not having correct measure by default.
            
            In Silverlight, measure override on Path does not work the same as primitive shape works.
            
            We should return the smallest size this shape can correctly render without clipping.
            By default a shape can render as small as a dot, therefore returning the strokethickness.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Shapes.PrimitiveShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Shapes.PrimitiveShape.GeometryMargin">
            <summary>
            Gets or sets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Shapes.PrimitiveShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.PrimitiveShape.RenderedGeometry">
            <summary>
            Gets a value that represents the final rendered <see cref="T:System.Windows.Media.Geometry"/> of a <see cref="T:System.Windows.Shapes.Shape"/>.
            </summary>
            <returns>The final rendered <see cref="T:System.Windows.Media.Geometry"/> of a <see cref="T:System.Windows.Shapes.Shape"/>.</returns>
            <remarks>The WPF primitive shape hides base class RenderedGeometry to provide a local storage and matches Silverlight primitive shape interface.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
            <value>The start angle in degrees. 0 degree is pointing up.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.EndAngle">
            <summary>
            Gets or sets the end angle.
            </summary>
            <value>The end angle in degree. 0 degree is pointing up.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.ArcThickness">
            <summary>
            Gets or sets the arc thickness.
            </summary>
            <value>The arc thickness in pixels or percentage depending on "ArcThicnessUnit"/>.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.ArcThicknessUnit">
            <summary>
            Gets or sets the arc thickness unit.
            </summary>
            <value>The arc thickness unit, either pixel or percentage.</value>
        </member>
        <member name="T:Microsoft.Expression.Shapes.BlockArrow">
            <summary>
            Renders a block arrow shape supporting resizable arrow head and body.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation where the arrow is pointing to.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.ArrowheadAngle">
            <summary>
            Gets or sets the arrowhead angle.
            </summary>
            <value>The arrowhead angle in degrees.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.ArrowBodySize">
            <summary>
            Gets or sets the size of the arrow body.
            </summary>
            <value>The size of the arrow body in pixels.</value>
        </member>
        <member name="T:Microsoft.Expression.Shapes.RegularPolygon">
            <summary>
            Renders a regular polygon shape or corresponding star shape with variable number of points.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.RegularPolygon.PointCount">
            <summary>
            Gets or sets the number of points of the <see cref="T:Microsoft.Expression.Shapes.RegularPolygon"/>
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.RegularPolygon.InnerRadius">
            <summary>
            Gets or sets the the distance between the center and the innermost point.
            </summary>
            <value>The distance between the center and the innermost point.</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\fr\Microsoft.Expression.Effects.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Effects</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Media.Effects.BlindOrientation">
            <summary>
            Determine the orientation of the blinds
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.BlindsTransitionEffect">
            <summary>
            Transition shader that simulates blinds opening when transitioning
            from one visual to another. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.OrientationProperty">
            <summary>
            Gets or sets the orientation of the blinds
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.CountProperty">
            <summary>
            Gets or sets the number of blinds
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.ShaderOrientationProperty">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the BlindsTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of BlindsTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.Orientation">
            <summary>
            Gets or sets orientatio of the blinds.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.Count">
            <summary>
            Gets or sets the number of blinds to display.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.ShaderOrientation">
            <summary>
            Gets or sets orientation of the blinds.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.BloomEffect">
            <summary>
            Effect that implements a bloom illumination of a visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
            
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BloomIntensityProperty">
            <summary>
            This property is mapped to the BloomIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseIntensityProperty">
            <summary>
            This property is mapped to the BaseIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BloomSaturationProperty">
            <summary>
            This property is mapped to the BloomSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseSaturationProperty">
            <summary>
            This property is mapped to the BaseSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomIntensityProperty">
            <summary>
            This property is mapped to the BloomIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomSaturationProperty">
            <summary>
            This property is mapped to the BloomSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.ThresholdProperty">
            <summary>
            This property is mapped to the BaseSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BloomEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.Threshold">
            <summary>
            Gets or sets the minimum intensity that will be used for the bloom
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseIntensity">
            <summary>
            Gets or sets the base intensity
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BloomIntensity">
            <summary>
            Gets or sets the bloom intensity
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseSaturation">
            <summary>
            Gets or sets the base saturation
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BloomSaturation">
            <summary>
            Gets or sets the bloom saturation
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomIntensity">
            <summary>
            Gets or sets the Base/BloomIntensity variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomSaturation">
            <summary>
            Gets or sets the BaseBloomSaturation variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect">
            <summary>
            Transition effect that reveals two visuals through a growing/shrinking circle. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.FeatherAmountProperty">
            <summary>
            Dependency property which modifies the Feather amount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseProperty">
            <summary>
            Dependency property which modifies the circle movement.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseShaderProperty">
            <summary>
            Dependency property which modifies the reverseShader variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the CircleRevealTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of CircleRevealTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.FeatherAmount">
            <summary>
            Gets or sets the FuzzyAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.Reverse">
            <summary>
            Gets or sets playing the circle reveal backward
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseShader">
            <summary>
            Gets or sets playing the circle reveal backward into the shader
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect">
            <summary>
            Transition effect that transitions two visuals using a cloud 
            texture as the sampler threshold.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CloudyTransitionEffect">
            <summary>
            Defines a transition shader effect that uses an image as a sampler threshold
            for interpolating pixel value between two visuals. 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect">
            <summary>
            Defines a transition shader effect that provides a random value
            allowing the effect to provide variance each time the effect is run.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.RandomSeedProperty">
            <summary>
            Dependency property which modifies the RandomSeed variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.#ctor">
            <summary>
            Updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.RandomSeed">
            <summary>
            Gets or sets the RandomSeed variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.CloudImageProperty">
            <summary>
            Dependency property which modifies the CloudImage variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.CloudImage">
            <summary>
            Gets or sets the CloudImage variable within the shader used for sampling. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the CloudRevealTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of CloudRevealTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.ColorToneEffect">
            <summary>
            Effects that modifies the color tone of a visual using
            two colors as the sampling.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.DesaturationProperty">
            <summary>
            This property is mapped to the Desaturation variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.ToneAmountProperty">
            <summary>
            This property is mapped to the Toned variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.LightColorProperty">
            <summary>
            This property is mapped to the LightColor variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.DarkColorProperty">
            <summary>
            This property is mapped to the DarkColor variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.ColorToneEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.Desaturation">
            <summary>
            Gets or sets the Desaturation variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.ToneAmount">
            <summary>
            Gets or sets the Toned variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.LightColor">
            <summary>
            Gets or sets the LightColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.DarkColor">
            <summary>
            Gets or sets the DarkColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.EmbossedEffect">
            <summary>
            Effect that simulates an embossed look to the visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.AmountProperty">
            <summary>
            This property is mapped to the Amount variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.HeightProperty">
            <summary>
            This property is mapped to the Height variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.ColorProperty">
            <summary>
            This property is mapped to the Color variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.EmbossedEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Amount">
            <summary>
            Gets or sets the Amount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Height">
            <summary>
            Gets or sets the Height variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Color">
            <summary>
            Gets or sets the Color variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.FadeTransitionEffect">
            <summary>
            Transition effect that gradually transitions from one visual to another.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.FadeTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.FadeTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the FadeTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of FadeTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MagnifyEffect">
            <summary>
            Effect that simulates a magnifying lens.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.InnerRadiusProperty">
            <summary>
            Gets or sets the InnerRadius variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.OuterRadiusProperty">
            <summary>
            Gets or sets the OuterRadius variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.CenterProperty">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.AmountProperty">
            <summary>
            Gets or sets the amount variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.InputProperty">
            <summary>
            Gets or sets the input used in the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.generalTransform">
            <summary>
            The transform used for this shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.InnerRadius">
            <summary>
            Gets or sets the inner radius variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.OuterRadius">
            <summary>
            Gets or sets the outer radius variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Center">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Amount">
            <summary>
            Gets or sets the ShrinkFactor: 
            The higher the shrink factor the "smaller" the content inside the ellipse will appear. 
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.EffectMapping">
            <summary>
            Gets the EffectMapping.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform">
            <summary>
            The GeneralTransform corrosponding to the Magnify effect.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.biasValue">
            <summary>
            Attempt to transform a point based on the effect.
            </summary>
            <param name="targetPoint">The point to transform.</param>
            <param name="result">The result if available.</param>
            <returns>Return true if successful.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.effect">
            <summary>
            The effect instance.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.IsInverse">
            <summary>
            If the transform is an inverse.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.inverseTransform">
            <summary>
            The transform specific to this Effect.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.#ctor(Microsoft.Expression.Media.Effects.MagnifyEffect)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fx">The source effect.</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.TransformBounds(System.Windows.Rect)">
            <summary>
            This particular effect keeps axis aligned lines axis aligned, so transformation of the rect is just
            transformation of its corner points.
            </summary>
            <param name="rect">The input rect.</param>
            <returns>The output rect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.OutToIn(System.Windows.Point,System.Double,System.Double,System.Windows.Point,System.Double)">
            <summary>
            For the inverse of the shader, we need to find Pin which is the Pixel Ouput, given Pout the texture input (is the reverse of the shader)
            However, the shader algorithm is dependant on the radius of the pixel output from the center, which is a variable that we don't
            have when computing the inverse. We need to perform bisection in order to converge using the equation below
            PHatout = PHat_in*Scalar where
            PHatout = Pout - Pcenter  
            pHatin = Pin -Pcenter
            
            Scalar is dependent on the radius of Pin (which we don't have). 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.InToOut(System.Windows.Point,System.Double,System.Double,System.Windows.Point,System.Double)">
            <summary>
            Given a pixel output (Pin) find the texture input (Pout)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.CreateInstanceCore">
            <summary>
            Creats a new instance.
            </summary>
            <returns>A new instance of this.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.PointIsInCircle(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Determines if a point is within an ellipse.
            </summary>
            <param name="pt">The test point.</param>
            <param name="center">The center point of the ellipse.</param>
            <param name="radius">The radius of the ellipse.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.Inverse">
            <summary>
            Gets the inverse transform.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MonochromeEffect">
             <summary>
            Effect that turns a visual into a monochrom color
             </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MonochromeEffect.ColorProperty">
            <summary>
            Gets or sets the FilterColor variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MonochromeEffect.InputProperty">
            <summary>
            Gets or sets the Input of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MonochromeEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MonochromeEffect.Color">
            <summary>
            Gets or sets the FilterColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MonochromeEffect.Input">
            <summary>
            Gets or sets the input used in the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.PixelateEffect">
            <summary>
            Effect that pixelates a visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.PixelateEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.PixelateEffect.PixelationProperty">
            <summary>
            This property is mapped to the pixelation amount variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.PixelateEffect.Pixelation">
            <summary>
            Gets or sets the amount of pixelation inside the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.PixelateEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.PixelateTransitionEffect">
            <summary>
            Transition effect that increase/decrease pixelation between two visuals.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the PixelateTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of PixelateTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect">
            <summary>
            Transition effects that performs a radial blur of the current visual  as the new visual is introduced.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the RadialBlurTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of RadialBlurTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RippleEffect">
            <summary>
            Effect that simulates water ripples on the visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.CenterProperty">
            <summary>
            Gets or sets the Center variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.MagnitudeProperty">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.FrequencyProperty">
            <summary>
            Gets or sets the Frequency variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.PhaseProperty">
            <summary>
            Gets or sets the Phase variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.InputProperty">
            <summary>
            Gets or sets the input brush used in the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Center">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Magnitude">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Frequency">
            <summary>
            Gets or sets the frequency variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Phase">
            <summary>
            Gets or sets the Phase variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RippleTransitionEffect">
            <summary>
            Transition effect that simulate water ripple during transition. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the RippleTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of RippleTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SharpenEffect">
            <summary>
            Effects that makes a visual more crisp and sharper. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.AmountProperty">
            <summary>
            This property is mapped to the Amount variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.HeightProperty">
            <summary>
            This property is mapped to the Width variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SharpenEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Amount">
            <summary>
            Gets or sets the Amount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Height">
            <summary>
            Gets or sets the Height variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SlideDirection">
            <summary>
            Define the slide orientation
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SlideInTransitionEffect">
            <summary>
            Transition effect that slide the current visual away, revealing the new visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideDirectionProperty">
            <summary>
            Dependency property which modifies the SlideAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideNormalProperty">
            <summary>
            Dependency property which modifies the SlideAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the SlideInTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of SlideInTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideDirection">
            <summary>
            Gets or sets the SlideAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideNormal">
            <summary>
            Gets or sets the SlideAmount variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect">
             <summary>
            Transition effect that swirl the current visual while introducing the new visual.
             </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.TwistAmountProperty">
            <summary>
            Dependency property which modifies the TwistAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.CellCountProperty">
            <summary>
            Dependency property which modifies the number of cell where pixels will be twisted.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.#ctor(System.Double)">
            <summary>
            Creates an instance and sets the shader's twist variable to the specified values.
            </summary>
            <param name="twist">level of swirl twist</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the SmoothSwirlGridTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of SmoothSwirlGridTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.TwistAmount">
            <summary>
            Gets or sets the TwistAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.CellCount">
            <summary>
            Gets or sets the CellCount variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SwirlEffect">
            <summary>
            Effect that swirls the current visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.CenterProperty">
            <summary>
            This property is mapped to the Center variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.TwistAmountProperty">
            <summary>
            This property is mapped to the SwirlStrength variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.AngleFrequencyProperty">
            <summary>
            This property is mapped to the AngleFrequency variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.generalTransform">
            <summary>
            The transform used when this Effect is applied.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.Center">
            <summary>
            Gets or sets the Center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.TwistAmount">
            <summary>
            Gets or sets the SwirlStrength variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.AngleFrequency">
            <summary>
            Gets or sets the AngleFrequency variable within the shader.
            We do not expose this property. 
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.EffectMapping">
            <summary>
            Gets the GeneralTransform for this effect.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform">
            <summary>
            For transforming input and tree transformations.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.theEffect">
            <summary>
            The instance of the Effect.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.thisIsInverse">
            <summary>
            The inverse of the transform.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.inverseTransform">
            <summary>
            The inverse of this GeneralTransform.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.#ctor(Microsoft.Expression.Media.Effects.SwirlEffect)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="eff">The effect itself.</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.TransformBounds(System.Windows.Rect)">
            <summary>
            For this operation, the bounds is the bounding box of the 4 transformed points. 
            Need to transform each of them, and then circumscribe.  This is true for both the 
            forward and the inverse.
            </summary>
            <param name="rect">The input rect.</param>
            <returns>The transformed rect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.TryTransform(System.Windows.Point,System.Windows.Point@)">
            <summary>
            Attempt to transform inPoint with the Swirl effect.
            </summary>
            <param name="targetPoint">The input point.</param>
            <param name="result">The output point after transformed using the Swirl effect.</param>
            <returns>True and throws if false.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.CreateInstanceCore">
            <summary>
            Returns a new instance of this.
            </summary>
            <returns>A new instance.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.Inverse">
            <summary>
            Gets a clone of the inverse of the current transform.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WaveTransitionEffect">
            <summary>
            Transition effect that waves the current visual while introducing the new visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.MagnitudeProperty">
            <summary>
            Dependency property which modifies the Magnitude variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.PhaseProperty">
            <summary>
            Dependency property which modifies the Phase variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.FrequencyProperty">
            <summary>
            Dependency property which modifies the Phase variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WaveTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WaveTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the WaveTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of WaveTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Magnitude">
            <summary>
            Gets or sets the magnitude of the wave
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Phase">
            <summary>
            Gets or sets the phase of the wave
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Frequency">
            <summary>
            Gets or sets the magnitude of the wave
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WipeDirection">
            <summary>
            Define the wipe direction.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WipeTransitionEffect">
            <summary>
            Transition effect that wipes the current visual introducing the new visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.WipeDirectionProperty">
            <summary>
            Dependency property which modifies the preset of the wipe
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.FeatherAmountProperty">
            <summary>
            Dependency property which modifies the FuzzyAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOriginProperty">
            <summary>
            Dependency property which modifies the LineOrigin variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineNormalProperty">
            <summary>
            Dependency property which modifies the LineNormal variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOffsetProperty">
            <summary>
            Dependency property which modifies the LineOffset variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WipeTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WipeTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the WipeTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of WipeTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.WipeDirection">
            <summary>
            Gets or sets the direction of the wipe.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.FeatherAmount">
            <summary>
            Gets or sets the FuzzyAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOrigin">
            <summary>
            Gets or sets the LineOrigin variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineNormal">
            <summary>
            Gets or sets the LineNormal variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOffset">
            <summary>
            Gets or sets the LineOffset variable within the shader.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\es\Microsoft.Expression.Interactions.xml ===
﻿<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Interactions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Interactivity.Core.ActionCommand">
            <summary>
            Una implementación básica de ICommand que aplica un método que no usa parámetros o un método que usa un parámetro.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Microsoft.Expression.Interactivity.Core.ActionCommand"/>.
            </summary>
            <param name="action">Acción.</param>
            <remarks>Utilice este constructor para proporcionar una acción que omita el parámetro ICommand.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action{System.Object})">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Microsoft.Expression.Interactivity.Core.ActionCommand"/>.
            </summary>
            <param name="objectAction">Una acción que usa un parámetro de objeto.</param>
            <remarks>Utilice este constructor para proporcionar una acción que utiliza el objeto de parámetro transferido por el método de ejecución.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
            Define el método que determina si el comando puede ejecutarse en su estado actual.
            </summary>
            <param name="parameter">Datos usados por el comando.  Si el comando no requiere que se transfieran datos, este objeto se puede establecer como nulo.</param>
            <returns>
            Siempre devuelve True.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.Execute(System.Object)">
            <summary>
            Define el método al que se llamará cuando se invoque el comando.
            </summary>
            <param name="parameter">Datos usados por el comando.  Si el comando no requiere que se transfieran datos, este objeto se puede establecer como nulo.</param>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecuteChanged">
            <summary>
            Tiene lugar cuando se producen cambios que influyen en si el comando debe ejecutarse. No será activado por ActionCommand.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ChangePropertyAction">
            <summary>
            Una acción que cambiará una propiedad especificada a un valor especificado cuando se invoca.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Microsoft.Expression.Interactivity.Core.ChangePropertyAction"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Invoke(System.Object)">
            <summary>
            Invoca la acción.
            </summary>
            <param name="parameter">Parámetro para la acción. Si la acción no requiere un parámetro, éste se puede establecer en una referencia nula.</param>
            <exception cref="T:System.ArgumentException">No se pudo encontrar en el destino una propiedad con <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName"/>.</exception>
            <exception cref="T:System.ArgumentException">No se pudo establecer <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName"/> en el valor especificado por <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Value"/>.</exception>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName">
            <summary>
            Obtiene o establece el nombre de la propiedad que se va a cambiar. Ésta es una propiedad de dependencia.
            </summary>
            <value>Nombre de la propiedad que se va a cambiar.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Value">
            <summary>
            Obtiene o define el valor que se va a establecer. Ésta es una propiedad de dependencia.
            </summary>
            <value>Valor que se va a establecer.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Duration">
            <summary>
            Obtiene o establece la duración de la animación que se aplicará al invocar ChangePropertyAction.  Ésta es una propiedad de dependencia. Si no se establece la duración, la animación no se aplicará.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager">
            <summary>
            ExtendedVisualStateManager es una propiedad VisualStateManager personalizada que puede suavizar la animación de propiedades de diseño. Con la propiedad VisualStateManager personalizada, los estados pueden incluir cambios en propiedades como Grid.Column, cambiar el alto de los elementos a o desde Automático, etc. Estos cambios se suavizarán a lo largo del tiempo mediante las propiedades GeneratedDuration y GeneratedEasingFunction de la transición adecuada. Vea el área acerca de las invalidaciones de VisualStateManager más abajo para obtener una descripción general del algoritmo.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.UseFluidLayoutProperty">
            <summary>
            Un grupo de estado visual puede usar o no un diseño fluido.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValuesProperty">
            <summary>
            Un grupo de estado visual conserva una lista de estos valores originales en una propiedad adjunta.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutStoryboardProperty">
            <summary>
            Para cada estado, se extraen las propiedades específicas del diseño y, posteriormente, se adjuntan al estado. Estas propiedades se eliminan del propio estado.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CurrentStateProperty">
            <summary>
            Recuerde el estado actual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.MovingElements">
            <summary>
            Éste es el conjunto de elementos que están en movimiento.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutTransitionStoryboard">
            <summary>
            Éste es el guión gráfico que anima la transición.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutProperties">
            <summary>
            Esta lista contiene todas las propiedades conocidas del diseño.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.StopAnimations">
            <summary>
            Detenga la animación y sustituya los cambios de diseño que se realizaron para admitir esa animación.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.FindTransition(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState)">
            <summary>
            Localice la transición que VisualStateManager usará para animar el cambio, de manera que la animación de diseño coincida con la duración y las entradas o salidas lentas.
            </summary>
            <param name="group">Grupo en el que tiene lugar la transición</param>
            <param name="previousState">Estado del que proviene</param>
            <param name="state">Estado hacia el que se dirige</param>
            <returns>Transición</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.ExtractLayoutStoryboard(System.Windows.VisualState)">
            <summary>
            Quite todas las propiedades que afectan al diseño del guión gráfico para el estado y almacénelas en caché en la propiedad adjunta.
            </summary>
            <param name="state">Estado hacia el que se dirige</param>
            <returns>Guión gráfico que contiene las propiedades de diseño de ese estado</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.FindTargetElements(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            El conjunto de elementos de destino es el conjunto de todos los elementos que podrían haberse movido en una transición de diseño. Este conjunto es la conclusión de: - Elementos con propiedades de diseño animadas en el estado. - Elementos relacionados con los elementos del conjunto. - Elementos primarios de los elementos del conjunto.
             
            El código posterior comprobará estos rectángulos antes y después del cambio de diseño.
            </summary>
            <param name="control">Control cuyo diseño está cambiando de estado</param>
            <param name="layoutStoryboard">Guión gráfico que contiene los cambios de diseño</param>
            <param name="originalValueRecords">Cualquier valor anterior procedente de navegaciones de estados anteriores que pueda revertirse</param>
            <param name="movingElements">Conjunto de elementos que está en movimiento (si hay una transición de cambio de estado en curso)</param>
            <returns>Conjunto completo de elementos cuyo diseño podría haber cambiado</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetRectsOfTargets(System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Obtenga un conjunto de rectángulos para todos los elementos de la lista de destino.
            </summary>
            <param name="targets">Conjunto de elementos para tener en cuenta</param>
            <param name="movingElements">Conjunto de elementos en movimiento</param>
            <returns>Diccionario que asigna elementos a sus rectángulos</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetLayoutRect(System.Windows.FrameworkElement)">
            <summary>
            Obtenga el rectángulo de diseño de un elemento mediante la ranura de diseño y, posteriormente, calcule la parte de la ranura que está en uso.
            </summary>
            <param name="element">Elemento cuyo rectángulo deseamos obtener</param>
            <returns>Rectángulo de diseño de ese elemento</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetOldOpacities(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Obtenga las opacidades de elementos en el momento del cambio de estado, en lugar de las visibilidades, porque el cambio de estado podría estar en curso y el valor actual es el más importante.
            </summary>
            <param name="control">Control cuyo estado está cambiando</param>
            <param name="layoutStoryboard">Guión gráfico con las propiedades de diseño</param>
            <param name="originalValueRecords">Conjunto de valores originales</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.SetLayoutStoryboardProperties(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord})">
            <summary>
            Examine el guión gráfico de diseño y establezca todas las propiedades mediante SetValue con el fin de permitir que se llame a UpdateLayout sin aplicar una marca de graduación a la escala de tiempo, lo que daría lugar a una representación. Todos los valores que se sobrescriban se almacenarán en la colección de OriginalValueRecords para que se puedan sustituir más adelante.
            </summary>
            <param name="control">Control cuyo estado está cambiando</param>
            <param name="layoutStoryboard">Guión gráfico que contiene las propiedades de diseño</param>
            <param name="originalValueRecords">Almacén de valores originales</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.WrapMovingElementsInCanvases(System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Windows.Rect},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Windows.Rect})">
            <summary>
            Tome todos los elementos que se van a mover como resultado de la animación de diseño, y ajústelos en lienzos para que no afecten a los elementos relacionados con ellos.
            </summary>
            <param name="movingElements">Conjunto de elementos que se van a mover</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.UnwrapMovingElementsFromCanvases(System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Tome todos los elementos que se han movido como resultado de la animación de diseño y desajústelos de sus lienzos.
            </summary>
            <param name="movingElements">Conjunto de elementos que se han movido</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CopyLayoutProperties(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Copie las propiedades de diseño del elemento de origen al elemento de destino. Esto los eliminará del origen.
            </summary>
            <param name="source">Origen de las propiedades de diseño</param>
            <param name="target">Destino de las propiedades de diseño</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CreateLayoutTransitionStoryboard(System.Windows.VisualTransition,System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Double})">
            <summary>
            Cree el guión gráfico que se usará para animar la transición. Use todos los resultados calculados previamente.
            </summary>
            <param name="duration">Duración de la animación</param>
            <param name="ease">Función de entradas y salidas lentas que se usará en la animación</param>
            <param name="movingElements">Conjunto de elementos que se van a mover</param>
            <param name="oldOpacities">Opacidades antiguas de los elementos cuya visibilidad está cambiando</param>
            <returns>Guión gráfico</returns>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord">
            <summary>
            OriginalValueRecord recuerda el valor original de una propiedad que se cambió en un estado.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.FluidMoveScope">
            <summary>
            Este tipo enumerado indica si FluidMoveBehavior se aplica al elemento al que se ha adjuntado, o bien a los elementos secundarios de ese elemento. &quot;Self&quot; es útil cuando hay un elemento individual que debería comportarse de un modo determinado; &quot;Children&quot; resulta útil cuando el mismo comportamiento debería aplicarse a todos los elementos secundarios de WrapPanel o del panel ItemsHost de ItemsControl.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior">
            <summary>
            Comportamiento que supervisa si se han producido cambios de diseño en un elemento (o conjunto de elementos) y que, cuando es necesario, mueve el elemento sin dificultad a la nueva posición. Este comportamiento no anima el tamaño ni la visibilidad de un elemento; únicamente anima el desplazamiento de dicho elemento dentro de su contenedor primario.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.DurationProperty">
            <summary>
            DependencyProperty para la duración del movimiento.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.AppliesToProperty">
            <summary>
            DependencyProperty para el ámbito del comportamiento. Vea FluidMoveScope para obtener información más detallada.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.IsActiveProperty">
            <summary>
            DependencyProperty para el estado activo del comportamiento.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.Duration">
            <summary>
            Duración de la operación de movimiento.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.AppliesTo">
            <summary>
            Indica si el comportamiento solo se aplica a este elemento, o bien a todos los elementos secundarios del elemento (si el elemento es un panel).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.IsActive">
            <summary>
            Indica si el comportamiento está activo actualmente.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.GoToStateAction">
            <summary>
            Una acción que efectuará la transición de FrameworkElement a la propiedad VisualState especificada cuando se invoca.
            </summary>
            <remarks>
            Si se ha establecido la propiedad TargetName, esta acción intentará cambiar el estado del elemento de destino. En caso contrario, se desplazará por el árbol de elementos con el fin de localizar el destino alternativo que define estados. ControlTemplate y UserControl son dos posibilidades habituales.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.GoToStateAction.OnTargetChanged(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Se llama a este método cuando se producen cambios en el destino. Si la propiedad TargetName no se ha establecido, esta acción tendrá un comportamiento personalizado.
            </summary>
            <param name="oldTarget"></param>
            <param name="newTarget"></param>
            <exception cref="T:System.InvalidOperationException">No se pudo localizar una propiedad FrameworkElement con estados.</exception>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.GoToStateAction.Invoke(System.Object)">
            <summary>
            Se llama a este método cuando se cumplen algunos criterios y se invoca la acción.
            </summary>
            <param name="parameter"></param>
            <exception cref="T:System.InvalidOperationException">No se pudo cambiar el destino a la propiedad StateName especificada.</exception>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.GoToStateAction.UseTransitions">
            <summary>
            Si se debe usar o no VisualTransition para efectuar una transición entre estados.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.GoToStateAction.StateName">
            <summary>
            Nombre de VisualState.  
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Input.KeyTrigger">
            <summary>
            Desencadenador que es desencadenado por un evento de teclado.  Si se detectan los modificadores y la tecla de destino, se activa el desencadenador.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.Key">
            <summary>
            Tecla que se debe presionar para que el desencadenador se active.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.Modifiers">
            <summary>
            Modificadores que deben estar activos para que el desencadenador se active (el valor predeterminado es que no se presione ningún modificador).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.ActiveOnFocus">
            <summary>
            Si es True, el desencadenador solo escuchará a su objeto de origen de desencadenador, lo que significa que ese elemento debe estar enfocado para que el desencadenador se active. Si es False, el desencadenador escuchará en la raíz, por lo que cualquier mensaje KeyDown/Up que no se haya controlado será captado.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.FiredOn">
            <summary>
            Si se va a escuchar el evento KeyDown o el evento KeyUp.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction">
            <summary>
            Acción que iniciará un proceso para abrir un archivo o URI. En el caso de los archivos, esta acción iniciará el programa predeterminado para la extensión determinada de archivo. Se abrirá un URI en un explorador web.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction.Invoke(System.Object)">
            <summary>
            Se llama a este método cuando se cumplen algunos criterios y se invoca la acción.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction.Path">
            <summary>
            Archivo o URI que se abrirá. 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior">
            <summary>
            Cambia la posición del elemento adjunto como respuesta a movimientos para arrastrar el mouse sobre el elemento.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.XProperty">
            <summary>
            DependencyProperty para la posición X del elemento que se arrastra, tomando como referencia la parte izquierda del elemento raíz.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.YProperty">
            <summary>
            DependencyProperty para la posición Y del elemento que se arrastra, tomando como referencia la parte superior del elemento raíz.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ConstrainToParentBoundsProperty">
            <summary>
            DependencyProperty para la propiedad ConstrainToParentBounds. Si es True, el elemento que se arrastra se restringirá para permanecer dentro de los límites de su contenedor primario.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.UpdatePosition(System.Windows.Point)">
            <summary>
            Intenta actualizar la posición del elemento asociado a las coordenadas especificadas.
            </summary>
            <param name="point">Posición deseada del elemento en coordenadas raíz.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ApplyTranslation(System.Double,System.Double)">
            <summary>
            Aplica una traslación de posición relativa al elemento asociado.
            </summary>
            <param name="x">Componente X de la traslación deseada en las coordenadas raíz.</param>
            <param name="y">Componente Y de la traslación deseada en las coordenadas raíz.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ApplyTranslationTransform(System.Double,System.Double)">
            <summary>
            Aplica la traslación determinada a RenderTransform en el elemento asociado.
            </summary>
            <param name="x">Componente X de la traslación deseada en las coordenadas primarias.</param>
            <param name="y">Componente Y de la traslación deseada en las coordenadas primarias.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.UpdatePosition">
            <summary>
            Actualiza las propiedades X e Y en función de la posición representada actual para el elemento asociado.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.IsValidConstrainedMove(System.Windows.Point)">
            <summary>
            Establece si la posición determinada del cursor debe contar como parte de la operación de arrastre.
            </summary>
            <param name="currentPosition">Posición del cursor.</param>
            <returns>
            	Es <c>true</c> si la posición indicada debe contar como parte de la operación de arrastre; en caso contrario, será <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.RectContainsRect(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Compruebe si un rectángulo está contenido en otro.
            </summary>
            <param name="rect1">Rectángulo que contiene otro.</param>
            <param name="rect2">Rectángulo contenido en otro.</param>
            <returns><c>true</c> si rect1 contiene a rect2; de lo contrario, <c>false</c></returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.TransformAsVector(System.Windows.Media.GeneralTransform,System.Double,System.Double)">
            <summary>
            Se transforma como un vector.
            </summary>
            <param name="transform">Transformación.</param>
            <param name="x">Componente X del vector.</param>
            <param name="y">Componente Y del vector.</param>
            <returns>Punto que contiene los valores de X e Y transformados mediante transformar como vector.</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.GetTransformOffset(System.Windows.Media.GeneralTransform)">
            <summary>
            Obtiene el desplazamiento de la transformación.
            </summary>
            <param name="transform">Transformación.</param>
            <returns>Desplazamiento de la transformación.</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.OnAttached">
            <summary>
            Se llama a este método después de adjuntar el comportamiento a AssociatedObject.
            </summary>
            <remarks>Reemplace este método para enlazar funcionalidad a AssociatedObject.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.OnDetaching">
            <summary>
            Se llama a este método cuando el comportamiento se está desasociando de AssociatedObject, pero antes de que ocurra.
            </summary>
            <remarks>Reemplace este método para desenlazar funcionalidad de AssociatedObject.</remarks>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.DragBegun">
            <summary>
            Se produce al iniciar un movimiento de arrastre.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.Dragging">
            <summary>
            Se produce al procesar una actualización de movimiento de arrastre.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.DragFinished">
            <summary>
            Se produce al finalizar un movimiento de arrastre.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.X">
            <summary>
            Obtiene o establece la posición X del elemento que se arrastra, tomando como referencia la parte izquierda del elemento raíz. Ésta es una propiedad de dependencia.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.Y">
            <summary>
            Obtiene o establece la posición Y del elemento que se arrastra, tomando como referencia la parte superior del elemento raíz. Ésta es una propiedad de dependencia.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ConstrainToParentBounds">
            <summary>
            Obtiene o establece un valor que indica si el elemento que se arrastra está restringido para permanecer dentro de los límites de su contenedor primario. Ésta es una propiedad de dependencia.
            </summary>
            <value>
            	Es <c>true</c> si el elemento que se arrastra debe restringirse a los límites de su contenedor primario; en caso contrario, será <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ActualPosition">
            <summary>
            Obtiene la posición en pantalla del elemento asociado en las coordenadas raíz.
            </summary>
            <value>Posición en pantalla del elemento asociado en las coordenadas raíz.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ElementBounds">
            <summary>
            Obtiene los límites del elemento en las coordenadas de elemento.
            </summary>
            <value>Límites del elemento en las coordenadas de elemento.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ParentElement">
            <summary>
            Obtiene el elemento primario del objeto asociado.
            </summary>
            <value>Elemento primario del objeto asociado.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.RootElement">
            <summary>
            Obtiene el elemento raíz de la escena donde se encuentra el objeto asociado.
            </summary>
            <value>Elemento raíz de la escena donde se encuentra el objeto asociado.</value>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.PlaySoundAction">
            <summary>
            Acción que reproducirá un sonido hasta que finalice.
            </summary>
            <remarks>
            Esta acción está destinada a efectos de sonido breves que no necesitan ser detenidos ni controlados. Si intenta crear un reproductor de música o un juego, es posible que esta acción no satisfaga sus necesidades.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Microsoft.Expression.Interactivity.Media.PlaySoundAction"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.SetMediaElementProperties(System.Windows.Controls.MediaElement)">
            <summary>
            Cuando se invoca la acción, este método se usa para personalizar el objeto MediaElement creado dinámicamente.
            </summary>
            <remarks>
            Este método puede resultar útil para los autores de acciones que desean ampliar PlaySoundAction. Si deseaba controlar la propiedad MediaElement Balance, puede heredarla de PlaySoundAction y reemplazar este método.
            </remarks>
            <param name="mediaElement"></param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Invoke(System.Object)">
            <summary>
            Se llama a este método cuando se cumplen algunos criterios; y la acción se debe invocar. 
            </summary>
            <remarks>
            Cada vez que se invoca la acción, se reproduce un sonido nuevo.  Aunque la implementación esta sujeta a cambios, el autor de la llamada debe prever que esto creará una nueva propiedad MediaElement, que se limpiará cuando el sonido finalice o si el elemento multimedia no se reproduce.
            </remarks>
            <param name="parameter"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Source">
            <summary>
            URI que define la ubicación del archivo de sonido.  Esto se utiliza para establecer la propiedad del origen de MediaElement. Ésta es una propiedad de dependencia.
            </summary>
            <remarks>
            El sonido puede tener cualquier formato de archivo admitido por MediaElement.  En el caso de un vídeo, solo se reproducirá la sección de audio.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Volume">
            <summary>
            Controle el volumen del sonido.  Esto se utiliza para establecer la propiedad Volume de MediaElement.  Ésta es una propiedad de dependencia.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.RemoveElementAction">
            <summary>
            Acción que eliminará el elemento de destino del árbol cuando se invoca.
            </summary>
            <remarks>
            La acción puede dar error. La acción entiende cómo quitar elementos de los elementos primarios comunes, pero no de las colecciones personalizadas o mediante la manipulación directa del árbol visual.
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardAction">
            <summary>
            Clase abstracta que permite establecer un guión gráfico como destino.
            </summary>
            <remarks>
            Para los autores de acciones, esta clase proporciona un método estándar para establecer un guión gráfico como destino.  Las herramientas de diseño pueden ofrecer una experiencia de edición especial para las clases que se heredan de esta acción, y mejorar así la experiencia del diseñador. 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardAction.OnStoryboardChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Se llama a este método al cambiar la propiedad Storyboard.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.StoryboardAction.Storyboard">
            <summary>
            Guión gráfico de destino.  Ésta es una propiedad de dependencia.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.ControlStoryboardAction">
            <summary>
            Acción que cambiará el estado del guión gráfico de destino cuando se invoca.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.ControlStoryboardAction.Invoke(System.Object)">
            <summary>
            Se llama a este método cuando se cumplen algunos criterios; y la acción se debe invocar. Este método intentará cambiar el guión gráfico de destino del modo definido por ControlStoryboardOption.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardTrigger">
            <summary>
            Clase abstracta que permite establecer un guión gráfico como destino.
            </summary>
            <remarks>
            Para los autores de desencadenadores, esta clase ofrece un método estándar para establecer un guión gráfico como destino.  Las herramientas de diseño pueden ofrecer una experiencia de edición especial para las clases que se heredan de este desencadenador, y mejorar así la experiencia del diseñador. 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardTrigger.OnStoryboardChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Se llama a este método al cambiar la propiedad Storyboard.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.StoryboardTrigger.Storyboard">
            <summary>
            Guión gráfico de destino.  Ésta es una propiedad de dependencia.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger">
            <summary>
            Desencadenador que escucha un guión gráfico hasta que finaliza.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.TimerTrigger">
            <summary>
            Desencadenador que es activado por un evento especificado que se produce en su origen y se activa después de un período de tiempo cuando el evento se activa.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.TimerTrigger.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:Microsoft.Expression.Interactivity.Core.TimerTrigger"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.TimerTrigger.MillisecondsPerTick">
            <summary>
            Obtiene o establece el número de milisegundos de espera entre marcas de graduación. Ésta es una propiedad de dependencia.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.TimerTrigger.TotalTicks">
            <summary>
            Obtiene o establece el número total de marcas de graduación que se activarán antes de que el desencadenador finalice.  Ésta es una propiedad de dependencia.
            </summary>
        </member>
        <member name="T:ExceptionStringTable">
            <summary>
              Clase de recurso con establecimiento inflexible de tipos para buscar cadenas localizadas, etc.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ResourceManager">
            <summary>
              Devuelve la instancia de ResourceManager almacenada en caché y usada por esta clase.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.Culture">
            <summary>
              Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las búsquedas de recursos mediante el uso de esta clase de recurso con establecimiento inflexible de tipos.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotFindPropertyNameExceptionMessage">
            <summary>
              Busca una cadena localizada similar a No se puede encontrar una propiedad con el nombre &quot;{0}&quot; en el tipo &quot;{1}&quot;.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotSetValueExceptionMessage">
            <summary>
              Busca una cadena localizada similar a No se puede asignar un valor del tipo &quot;{0}&quot; a la propiedad &quot;{1}&quot; del tipo &quot;{2}&quot;. A la propiedad &quot;{1}&quot; solo se le pueden asignar valores del tipo &quot;{2}&quot;.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionPropertyIsReadOnlyExceptionMessage">
            <summary>
              Busca una cadena localizada similar a La propiedad &quot;{0}&quot; definida por el tipo &quot;{1}&quot; no expone un método establecido y, por lo tanto, no se puede modificar.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.GoToStateActionStateChangeFailed">
            <summary>
              Busca una cadena localizada similar a No se puede cambiar el estado del destino {0} a {1}.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.GoToStateActionTargetHasNoStateGroups">
            <summary>
              Busca una cadena localizada similar a El destino {0} no define VisualStateGroups. .
            </summary>
        </member>
        <member name="P:ExceptionStringTable.UnsupportedRemoveTargetExceptionMessage">
            <summary>
              Busca una cadena localizada similar a No se admite el destino de RemoveElementAction.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\fr\Microsoft.Expression.Drawing.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Drawing</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Controls.Callout">
            <summary>
            Renders a callout shape supporting several shapes combined with a callout arrow.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.CompositeContentShape">
             <summary>
             Provides a base class of a composite shape that derives from <see cref="T:System.Windows.Controls.ContentControl"/> and implements <see cref="T:Microsoft.Expression.Media.IShape"/>.
             </summary>
             <remarks>
             <see cref="T:Microsoft.Expression.Controls.CompositeContentShape"/> implements <see cref="T:Microsoft.Expression.Media.IShape"/> interface,
             and supports rendering a geometry similar to <see cref="T:System.Windows.Shapes.Shape"/>, but the geometry can be rendered outside of layout boundary.
             
             A typical implementation will have a customized default template in generic.xaml which template-binds most shape properties to a <see cref="T:System.Windows.Shapes.Path"/>.
             It should also extend the <see cref="P:GeometrySource"/> property to customize the appearance of the <see cref="T:System.Windows.Shapes.Path"/>.
            
             This class also supports showing content together with the shape.
             </remarks>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySourceParameters">
            <summary>
            Provides an interface to discribe the parameters of a Shape.
            </summary>
            <remarks>
            This interface is the data for communication between Shape and GeometrySource.
            Typically a concrete implementation of IShape will implements this interface and pass it into
            GeometrySource.UpdateGeometry(), who will consume the shape as readonly data provider.
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Media.IShape">
            <summary>
            Provides the necessary interface to define a Shape.
            Both primitive and composite shapes need to match this interface, although they might derive from different type of FrameworkElement.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.IShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Fill">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how to paint the interior of the shape.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that describes how the shape's interior is painted. The default is null. See Remarks.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values. The default value at run time depends on the type of <see cref="T:System.Windows.Shapes.Shape" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.RenderedGeometry">
            <summary>
            Gets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.GeometryMargin">
            <summary>
            Gets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Media.IShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.CreateGeometrySource">
            <summary>
            Extends how the shape is drawn with creating geometry source.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Controls.CompositeContentShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.OnContentChanged(System.Object,System.Object)">
            <summary>
            Transforms a string content into <see cref="T:TextBlock"/> with center alignment and mulitple line support.
            </summary>
            <remarks>
            Use template binding to <see cref="P:Microsoft.Expression.Controls.CompositeContentShape.InternalContent"/> instead of <see cref="P:Content"/> to enable this method.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that specifies how to paint the interior of the shape.
            </summary>
            <returns>A <see cref="T:System.Windows.Media.Brush"/> that describes how the shape's interior is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeStartLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. </summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineCap" /> enumeration that specifies the shape at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeEndLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the end of a line. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeLineJoin">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:System.Windows.Shapes.Shape" />.</summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration that specifies the join appearance. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeMiterLimit">
            <summary>Gets or sets a limit on the ratio of the miter length to half the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. </summary>
            <returns>The limit on the ratio of the miter length to the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. This value is always a positive number that is greater than or equal to 1.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashArray">
            <summary>Gets or sets a collection of <see cref="T:System.Double" /> values that indicate the pattern of dashes and gaps that is used to outline shapes. </summary>
            <returns>A collection of <see cref="T:System.Double" /> values that specify the pattern of dashes and gaps. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that specifies how the ends of a dash are drawn. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashOffset">
            <summary>Gets or sets a <see cref="T:System.Double" /> that specifies the distance within the dash pattern where a dash begins.</summary>
            <returns>A <see cref="T:System.Double" /> that represents the distance within the dash pattern where a dash begins. The default value is 0.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.RenderedGeometry">
            <summary>
            Gets or sets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.GeometryMargin">
            <summary>
            Gets or sets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.InternalContent">
            <summary>
            Gets or sets the internal content that converts string into center aligned multiple line textblock.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.CompositeContentShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.Callout.AnchorPoint">
            <summary>
            Gets or sets the position of the callout relative to the top and left corner.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.Callout.CalloutStyle">
            <summary>
            Gets or sets the callout style.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.CompositeShape">
            <summary>
            Provides a base class of a composite shape that derives from <see cref="T:System.Windows.Controls.Control"/> and implements <see cref="T:Microsoft.Expression.Media.IShape"/>.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Expression.Controls.CompositeShape"/> implements <see cref="T:Microsoft.Expression.Media.IShape"/> interface,
            and supports rendering a geometry similar to <see cref="T:System.Windows.Shapes.Shape"/>, but the geometry can be rendered outside of layout boundary.
            
            A typical implementation will have a customized default template in generic.xaml which template-binds most shape properties to a <see cref="T:System.Windows.Shapes.Path"/>.
            It should also extend the <see cref="P:GeometrySource"/> property to customize the appearance of the <see cref="T:System.Windows.Shapes.Path"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.CreateGeometrySource">
            <summary>
            Extends how the shape is drawn with creating geometry source.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Controls.CompositeShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that specifies how to paint the interior of the shape.
            </summary>
            <returns>A <see cref="T:System.Windows.Media.Brush"/> that describes how the shape's interior is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeStartLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. </summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineCap" /> enumeration that specifies the shape at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeEndLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the end of a line. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeLineJoin">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:System.Windows.Shapes.Shape" />.</summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration that specifies the join appearance. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeMiterLimit">
            <summary>Gets or sets a limit on the ratio of the miter length to half the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. </summary>
            <returns>The limit on the ratio of the miter length to the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. This value is always a positive number that is greater than or equal to 1.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashArray">
            <summary>Gets or sets a collection of <see cref="T:System.Double" /> values that indicate the pattern of dashes and gaps that is used to outline shapes. </summary>
            <returns>A collection of <see cref="T:System.Double" /> values that specify the pattern of dashes and gaps. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that specifies how the ends of a dash are drawn. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashOffset">
            <summary>Gets or sets a <see cref="T:System.Double" /> that specifies the distance within the dash pattern where a dash begins.</summary>
            <returns>A <see cref="T:System.Double" /> that represents the distance within the dash pattern where a dash begins. The default value is 0.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.RenderedGeometry">
            <summary>
            Gets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.GeometryMargin">
            <summary>
            Gets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.CompositeShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.LineArrow">
            <summary>
            Renders a bended line segment with optional arrowhead on both end.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.LineArrow.MeasureOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
            <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes, or possibly on other considerations such as fixed container size.</returns>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <remarks>
            A default <see cref="T:LineArrow"/> can render at anysize.
            The <see cref="P:RenderedGeometry"/> will stretch to layout boundary and render to outside if necessary.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.BendAmount">
            <summary>
            Gets or sets the amount of bend for the arrow.
            </summary>
            <value>The bend amount between 0 to 1.</value>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.StartArrow">
            <summary>
            Gets or sets how the arrow head is rendered at the start of the line.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.EndArrow">
            <summary>
            Gets or sets how the arrow head is rendered at the end of the line.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.StartCorner">
            <summary>
            Gets or sets from which corner to start drawing the arrow.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.ArrowSize">
            <summary>
            Gets or sets the length of the arrow in pixels.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PanningItems">
            <summary>
            Provides an items control that displays one selected item, and allows panning between items using touch gestures.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PanningItems.#ctor">
            <summary>
            The constructor for PanningItems.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PanningItems.OnApplyTemplate">
            <summary>
            Called when the PanningItems template is applied.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.ScrollDirection">
            <summary>
            Gets or sets the orientation of items in the control.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.FlickTolerance">
            <summary>
            Gets or sets the flick tolerance.  This can be a value between 0 and 1.  
            It represents the percentage of the size of the PanningItems needed to be covered by the flick gesture to trigger an items change.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.PreviousItem">
            <summary>
            Gets or sets the item before the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.NextItem">
            <summary>
            Gets or sets the item after the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.LoopContents">
            <summary>
            Gets or sets whether the contents of the items control will loop, so that the first item will follow the last item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.SliderValue">
            <summary>
            Gets or sets the value of the slider controlling the panning motion.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathGeometryHelper">
            <summary>
            Helper class to work with PathGeometry
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.ConvertToPathGeometry(System.String)">
            <summary>
            Converts a string in the path mini-langauge into a PathGeometry.
            </summary>
            <param name="abbreviatedGeometry">A string in the path mini-langauge.</param>
            <remarks>
            Algorithm is modified from WPF: MS.Internal.Parsers.ParseStringToStreamGeometryContext.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.AsPathGeometry(System.Windows.Media.Geometry)">
            <summary>
            Convert the given geometry into a single PathGeometry.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.SyncPolylineGeometry(System.Windows.Media.Geometry@,System.Collections.Generic.IList{System.Windows.Point},System.Boolean)">
            <summary>
            Update the given geometry as PathGeometry with polyline matching given point list.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathGeometryHelper.AbbreviatedGeometryParser">
            <summary>
            Parses abbreviated geometry sytax.
            </summary>
            <remarks>
            The algorithm is modified from WPF: MS.Internal.AbbreviatedGeometryParser
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathSegmentHelper">
            <summary>
            Helper class to Convert ArcSegment to BezierSegment(s)
            </summary>
            <summary>
            Helper class to work with PathSegment and all variations.
            </summary>
            <summary>
            Strategy classes to handle different types of PathSegment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierSegments(System.Windows.Media.ArcSegment,System.Windows.Point)">
            <summary>
            Convert an Arc segment into Bezier format
            Return BezierSegment, PolyBezierSegment, LineSegment, or null
            When returning null, the Arc degenerated into start point.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SetIsStroked(System.Windows.Media.PathSegment,System.Boolean)">
            <summary>
            Avoid calling the three-parameter constructor, since it always sets a local value for IsStroked.
            </summary>
            <param name="segment"></param>
            <param name="isStroked"></param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SyncPolylineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Collections.Generic.IList{System.Windows.Point},System.Int32,System.Int32)">
            <summary>
            Update the SegmentCollection with given polyline matching given point list.
            Try to keep changes minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SyncPolyBezierSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Collections.Generic.IList{System.Windows.Point},System.Int32,System.Int32)">
            <summary>
            Update the collection[index] segment with poly bezier segment matching given point list.
            givne point list must contain 3*N points for N Bezier segments.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.IsEmpty(System.Windows.Media.PathSegment)">
            <summary>
            Test if given path segment is empty.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetPointCount(System.Windows.Media.PathSegment)">
            <summary>
            Get the point count in given path segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetLastPoint(System.Windows.Media.PathSegment)">
            <summary>
            Get the last point of given path segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetPoint(System.Windows.Media.PathSegment,System.Int32)">
            <summary>
            Get the point of given index in given segment.
            If input is (-1), return the last point.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.FlattenSegment(System.Windows.Media.PathSegment,System.Collections.Generic.IList{System.Windows.Point},System.Windows.Point,System.Double)">
            <summary>
            Flatten given segment and add result points into given point list.
            </summary>
            <param name="segment">The segment to be flatten</param>
            <param name="points">The result point list</param>
            <param name="start">The start point of the segment</param>
            <param name="tolerance">The error tolerance. Must be possitive. Can be 0, fallback to default tolerance.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.ArcToBezier(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Double,System.Double,System.Windows.Point[]@,System.Int32@)">
            <summary>
            ArcToBezier, Compute the Bezier approximation of an arc
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            </summary>
            <remarks>
            This utility computes the Bezier approximation for an elliptical arc as
            it is defined in the SVG arc spec. The ellipse from which the arc is
            carved is axis-aligned in its own coordinates, and defined there by its
            x and y radii. The rotation angle defines how the ellipse's axes are
            rotated relative to our x axis. The start and end points define one of 4
            possible arcs; the sweep and large-arc flags determine which one of
            these arcs will be chosen. See SVG spec for details.
            
            Returning cPieces = 0 indicates a line instead of an arc
                      cPieces = -1 indicates that the arc degenerates to a point 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.GetArcAngle(System.Windows.Point,System.Windows.Point,System.Boolean,System.Boolean,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Get the number of Bezier arcs, and sine/cosine of each.
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            </summary>
            <remarks>
            This is a private utility used by ArcToBezier.  We break the arc into
            pieces so that no piece will span more than 90 degrees.  The input
            points are on the unit circle.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.GetBezierDistance(System.Double,System.Double)">
             <summary>
             GetBezierDistance, return the distance as a fraction of the radius
             Adopted from MIL:Graphics\core\geometry\utils.cpp
             </summary>
            <remarks>
                  Get the distance from a circular arc's endpoints to the control points
                  of the Bezier arc that approximates it, as a fraction of the arc's
                  radius.
            
                  Since the result is relative to the arc's radius, it depends strictly on
                  the arc's angle. The arc is assumed to be of 90 degrees of less, so the
                  angle is determined by the cosine of that angle, which is derived from
                  rDot = the dot product of two radius vectors.  We need the Bezier curve
                  that agrees with the arc's points and tangents at the ends and midpoint. 
                  Here we compute the distance from the curve's endpoints to its control
                  points.
            
                  Since we are looking for the relative distance, we can work on the unit
                  circle. Place the center of the circle at the origin, and put the X axis
                  as the bisector between the 2 vectors.  Let a be the angle between the
                  vectors.  Then the X coordinates of the 1st and last points are cos(a/2). 
                  Let x be the X coordinate of the 2nd and 3rd points.  At t=1/2 we have a
                  point at (1,0). But the terms of the polynomial there are all equal:
            
                            (1-t)^3 = t*(1-t)^2 = t^2*(1-t) = t^3 = 1/8,
            
                  so from the Bezier formula there we have:
            
                            1 = (1/8) * (cos(a/2) + 3x + 3x + cos(a/2)), 
            
                  hence
            
                            x = (4 - cos(a/2)) / 3
            
                  The X difference between that and the 1st point is:
                  
                            DX = x - cos(a/2) = 4(1 - cos(a/2)) / 3.
            
                  But DX = distance / sin(a/2), hence the distance is
            
                            dist = (4/3)*(1 - cos(a/2)) / sin(a/2).
            
                  Rather than the angle a, we are given rDot = R^2 * cos(a), so we
                  multiply top and bottom by R:
             
                            dist = (4/3)*(R - Rcos(a/2)) / Rsin(a/2)
             
                  and use some trig:
                                           ________________
                            cos(a/2)   = \/(1 + cos(a)) / 2
                                           ______________________
                            R*cos(a/2) = \/(R^2 + R^2 cos(a)) / 2 
                                           ________________
                                       = \/(R^2 + rDot) / 2
            
                  Let A = (R^2 + rDot)/2.
                                           ____________________
                            R*sin(a/2) = \/R^2 - R^2 cos^2(a/2)
                                           _______
                                       = \/R^2 - A
            
                  so:
                                                      _
                                         4      R - \/A
                                  dist = - * ------------
                                         3      _______
                                              \/R^2 - A
            
              History:
                  5/29/2001 MichKa
                      Created it.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.AcceptRadius(System.Double,System.Double,System.Double@)">
            <summary>
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            Return false if the radius is too small compared to the chord length (returns true on NaNs)
            radius is modified to the value that's accepted.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.BezierCurveFlattener">
            <summary>
            A utility class to flatten Bezier curves.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.BezierCurveFlattener.FlattenCubic(System.Windows.Point[],System.Double,System.Collections.Generic.ICollection{System.Windows.Point},System.Boolean,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Flattens a Bezier cubic curve and adds the result polyline to the third parameter.
            </summary>
            <param name="controlPoints">The 4 Bezier cubic control points.</param>
            <param name="errorTolerance">The maximum distance between two corresponding points on the true curve 
            and on the flattened polyline. Must be strictly positive.</param>
            <param name="resultPolyline">Where to add the flattened polyline.</param>
            <param name="skipFirstPoint">True to skip the first control point when adding the flattened polyline.
            <param name="resultParameters">Where to add the value of the Bezier curve parameter associated to 
            each of the polyline vertices</param> 
            If <paramref name="resultPolyline"/> is empty, the first control point 
            and its associated parameter are always added.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.BezierCurveFlattener.FlattenQuadratic(System.Windows.Point[],System.Double,System.Collections.Generic.ICollection{System.Windows.Point},System.Boolean,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Flattens a Bezier quadratic curve and adds the result polyline to the third parameter.
            We use degree elevation for Bezier curves to reuse the code for the cubic case.
            </summary>
            <param name="controlPoints">The 3 Bezier quadratic control points.</param>
            <param name="errorTolerance">The maximum distance between two corresponding points on the true curve 
            and on the flattened polyline. Must be strictly positive.</param>
            <param name="resultPolyline">Where to add the flattened polyline.</param>
            <param name="skipFirstPoint">Whether to skip the first control point when adding the flattened polyline. 
            <param name="resultParameters">Where to add the value of the Bezier curve parameter associated to
            each of the polyline vertices</param>
            If <paramref name="resultPolyline"/> is empty, the first control point and 
            its associated parameter are always added.</param>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.CommonExtensions">
            <summary>
            Extension methods supporting non-geometry types
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence with the index of each item.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.EnsureListCount``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Ensure the count of list to given count.  Create default(T) or remove items when necessary.
            If Input IList is a List, AddRange or RemoveRange is used.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.EnsureListCount``1(System.Collections.Generic.IList{``0},System.Int32,System.Func{``0})">
            <summary>
            Ensure the count of list to given count.  Create with given fatory or remove items when necessary.
            If Input IList is a List, AddRange or RemoveRange is used when there's no factory.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a range of items to the end of a collection.
            If collection is list, List.AddRange is used.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.Last``1(System.Collections.Generic.IList{``0})">
            <summary>
            Get the last item of given list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.RemoveLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove the last item from the given list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.DeepCopy``1(``0)">
            <summary>
            Make a copy of obj and all it's public properties, including all collection properties.
            Possible perf optimization: this is used only for Transform and Geometry.
            We should develope a copier for them instead of using reflection.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.SetIfDifferent(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object)">
            <summary>
            Set the value if different.  Avoid setting local value if possible.
            return true when the value has been changed
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ClearIfSet(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Clears the dependency property when it is locally set on the given dependency object.
            Return false if the dependeny property is not locally set.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.FindVisualDesendent``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean})">
            <summary>
            Find all visual desendent of given type and condition using breath first search.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get all visual children in IEnumerable
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.DrawingPropertyMetadata">
            <summary>
            Unify the interface of PropertyMetadata in WPF and Silverlight.
            Providing the necessary notification about render, arrange or measure.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.#ctor(Microsoft.Expression.Media.DrawingPropertyMetadataOptions,System.Object)">
            <summary>
            This private Ctor should only be used by AttachCallback.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.AttachCallback(System.Object,Microsoft.Expression.Media.DrawingPropertyMetadataOptions,System.Windows.PropertyChangedCallback)">
            <summary>
            Chain InternalCallback() to attach the instance of DrawingPropertyMetadata on property callback.
            In Silverlight4-, the property metadata is thrown away after setting. Use callback to remember it.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.InternalCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Before chaining the original callback, trigger DrawingPropertyChangedEvent
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.GeometryHelper">
            <summary>
            Extension methods for Geometry related data structures (Point/Vector/Size/Rect)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Resize(System.Windows.Rect,System.Double)">
            <summary>
            Resize the rectangle to relative size while keeping center invariant.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Subtract(System.Windows.Point,System.Windows.Point)">
            <summary>
            Get the difference Vector between two Points
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Plus(System.Windows.Point,System.Windows.Point)">
            <summary>
            Memberwise plus for Point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Minus(System.Windows.Point,System.Windows.Point)">
            <summary>
            Memberwise minus for Point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.ConvertToPathGeometry(System.String)">
            <summary>
            Converts a string of mini-languages to a <see cref="T:PathGeometry"/>.
            </summary>
            <remarks>See: Path Markup Syntax(http://msdn.microsoft.com/en-us/library/cc189041(VS.95).aspx)</remarks>
            <param name="abbreviatedGeometry">The string of path mini-languages for describing geometric paths.</param>
            <returns>A <see cref="T:PathGeometry"/> converted from the the path mini-languages/></returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.FlattenFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Double)">
            <summary>
            Flattens a <see cref="T:PathFigure"/> and adds result points to given <paramref name="points"/>.
            </summary>
            <param name="figure">The input <see cref="T:PathFigure"/>.</param>
            <param name="points">The point list to which result points will append.</param>
            <param name="tolerance">A positive number specifying the maximum allowed error from result points to input path figure.  Value 0 allows algorithm to pick the tolerance automatically.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcPoint(System.Double)">
            <summary>
            Get the normalized arc in (0,0)(1,1) box.
            Zero degree is mapped to [0.5, 0] (up), and clockwise
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcPoint(System.Double,System.Windows.Rect)">
            <summary>
            Get the absolute arc point in given bound with given relative radius.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcAngle(System.Windows.Point)">
            <summary>
            Get the angle on arc relative to (0,0)(1,1) box.
            Zero degree is mapped to [0.5, 0] (up), and clockwise
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcAngle(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Get the angle on arc from given absolute point relative to bound
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeTransform(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Compute the transform that moves Rect from to Rect to.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeTransform(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Computes the transform from the coordinate space of one <c>UIElement</c> to another.
            </summary>
            <param name="from">The source element.</param>
            <param name="to">The destination element.</param>
            <returns>The transform between the <c>UIElement</c>s, or null if it cannot be computed.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeToAbsolutePoint(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Map relative point to absolute using the mapping from given bound to (0,0)(1,1) box.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.AbsoluteToRelativePoint(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Map absolute point to relative using the mapping from (0,0)(1,1) box to given bound.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetStretchBound(System.Windows.Rect,System.Windows.Media.Stretch,System.Windows.Size)">
            <summary>
            Compute the bound after stretch within given logical bound.
            If stretch to uniform, use given aspectRatio.
            If aspectRatio is empty, it's equivalent to Fill.
            If stretch is None, equivalent to Fill or Uniform.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Midpoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the mid point of given 2 points
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The mid point between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Dot(System.Windows.Vector,System.Windows.Vector)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="lhs">The first vector.</param>
            <param name="rhs">The second vector.</param>
            <returns>The dot product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Dot(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the dot product of two Points.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Distance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance between two points.
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The distance between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.SquaredDistance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the square of the distance between two points.
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The square of the distance between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Determinant(System.Windows.Point,System.Windows.Point)">
            <summary>
            Determinant of cross product.  Equivalent to directional area
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Normal(System.Windows.Point,System.Windows.Point)">
            <summary>
            Compute the normal direction vector of given line segments
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Perpendicular(System.Windows.Vector)">
            <summary>
            Compute perpendicular vector, 90 degrees counter-clockwise.
            Vector to right perpendicular result a vector to up.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GeometryEquals(System.Windows.Media.Geometry,System.Windows.Media.Geometry)">
            <summary>
            Returns whether the two geometries are identical.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureGeometryType``1(``0@,System.Windows.Media.Geometry@,System.Func{``0})">
            <summary>
            Ensure the value is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureGeometryType``1(``0@,System.Collections.Generic.IList{System.Windows.Media.Geometry},System.Int32,System.Func{``0})">
            <summary>
            Ensure the list[index] is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureSegmentType``1(``0@,System.Collections.Generic.IList{System.Windows.Media.PathSegment},System.Int32,System.Func{``0})">
            <summary>
            Ensure the list[index] is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.ComputeBSpline(System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Double)">
            <summary>
            de'Boor algorithm to subdevide BSpline into poly Bezier segments.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.MathHelper">
            <summary>
            Helper class providing static properties and methods related to floating point arithmetic.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.Epsilon">
            <summary>
            The minimum distance to consider two values are same.
            Note: internal floating point in MIL/SL is float, not double.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.TwoPI">
            <summary>
            The value of angle of a full circle.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.PentagramInnerRadius">
            <summary>
            The inner radius for pentagram polygon shape, at precision of 3 digits in percentage.
            (1 - Sin36 * Sin72 / Sin54) / (Cos36) ^ 2, which is 0.47210998990512996761913067272407
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.IsVerySmall(System.Double)">
            <summary>
            Determines whether a <c>System.Double</c> value is small enough to be considered
            equivalent to zero.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if value is smaller than <c>DoubleTolerance</c>;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.EnsureRange(System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Return the value that's within the given range
            Given min/max is null means no limit.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.Hypotenuse(System.Double,System.Double)">
            <summary>
            Computes the Euclidean norm of the vector (x, y).
            </summary>
            <param name="x">The first component.</param>
            <param name="y">The second component.</param>
            <returns>The Euclidean norm of the vector (x, y).</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.DoubleFromMantissaAndExponent(System.Double,System.Int32)">
            <summary>
            Computes a real number from the mantissa and exponent.
            </summary>
            <param name="x"></param>
            <param name="exp"></param>
            <returns>The value of x * 2^exp if successful.</returns>
            <remarks>See ::ldexp in any decent C language runtime library.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.IsFiniteDouble(System.Double)">
            <summary>
            Tests a double.
            </summary>
            <param name="x">The double to test.</param>
            <returns><c>true</c> if x is not a NaN and is not equal to plus or minus infinity;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathFigureHelper">
            <summary>
            Helper class to work with PathFigure
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.FlattenFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Double,System.Boolean)">
            <summary>
            Flatten the given figure and add to the point list.
            </summary>
            <param name="tolerance">The error tolerance. Must be possitive. Can be 0, fallback to default tolerance.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.AllSegments(System.Windows.Media.PathFigure)">
            <summary>
            Iterate all segments inside given figure, and returns correct start point for each segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncPolylineFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
            <summary>
            Synchronize the figure to the given list of points as a single polyline segment.
            Try to keep the change minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncPolyBezierFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
            <summary>
            Synchronize the figure to the given list of points as a single PolyBezierSegment.
            Try to keep the change minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncEllipseFigure(System.Windows.Media.PathFigure,System.Windows.Rect,System.Windows.Media.SweepDirection,System.Boolean)">
            <summary>
            Synchronize the given figure to be a closed ellipse with 2 arc segments.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathSegmentData">
            <summary>
            A Tuple data structure for PathSegment and corresponding StartPoint.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PolylineData">
            <summary>
            Represent a polyline consist with a list of connecting points.
            A closed polygon is represented by repeating the first point at the end.
            The differences, normals, angles, and lengths are computed on Demand.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.#ctor(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Construct a polyline with two or more points.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.Difference(System.Int32)">
            The forward difference vector of polyline.
            Points[i] + Differences[i] = Points[i+1]
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.SmoothNormal(System.Int32,System.Double,System.Double)">
            <summary>
            Compute the normal vector of given location (lerp(index, index+1, fraction).
            If the location is within range of cornerRadius, interpolate the normal direction.
            </summary>
            <param name="cornerRadius">The range of normal smoothless.  If zero, no smoothness and return the exact normal on index.</param>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.IsClosed">
            <summary>
            The polyline is closed when first and last point is repeated.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Count">
            <summary>
            The count of points in this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.TotalLength">
            <summary>
            The total arc length of this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Points">
            <summary>
            The point array of this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Lengths">
            <summary>
            The length between line segments, Points[i] to Points[i+1]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Normals">
            <summary>
            The list of normal vectors for each segment.
            Normals[i] is the normal of segment p[i] to p[i + 1].
            Normals[N-1] == Normals[N-2].
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Angles">
            <summary>
            The list of Cos(angle) between 2 line segments on point p[i]
            Note: The value is cos(angle) = Dot(u, v). It's not in degree.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.AccumulatedLength">
            <summary>
            The list of accumulated length from points[i] to points[0]
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.MarchLocation">
            <summary>
            The data structure to communicate with PathMarch algorithm.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetPoint(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Get the interpolated position of this this MarchLocation on given point list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetNormal(Microsoft.Expression.Drawing.Core.PolylineData,System.Double)">
            <summary>
            Get the interpolated normal direction of this this MarchLocation on given normal vector list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetArcLength(System.Collections.Generic.IList{System.Double})">
            <summary>
            Get the arc length of this MarchLocation to the start of the entire polyline.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Reason">
            <summary>
            The reason why this location is sampled.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Index">
            <summary>
            The index of the point on polyline point list.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Ratio">
            <summary>
            Ratio: [0, 1], which is always before / (before + after)
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Before">
            <summary>
            Arc length before stop point.  It's non-negative, and less than Length[index]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.After">
            <summary>
            Arc length after the stop point.  It's non-negative, and less than Length[index]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Remain">
            <summary>
            Remaining length within a step to hit next stop.  Positive to go forward. Negative to go backward.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PolylineHelper">
            <summary>
            Helper class to work with list of points
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineHelper.PathMarch(Microsoft.Expression.Drawing.Core.PolylineData,System.Double,System.Double,System.Func{Microsoft.Expression.Drawing.Core.MarchLocation,System.Double})">
            <summary>
            March the given polyline with given interval and output each stop through callback
            </summary>
            <param name="polyline">The polyline points to march on</param>
            <param name="startArcLength">The arc length to march before stopping at the first point.</param>
            <param name="cornerThreshold">The max angle between edges to be considered a corner vertex</param>
            <param name="stopCallback">Callback when marching algorithm stop at a point.  The callback returns the arc length for next stop.
            If the asked length is negative, march backwards. If callback returns NaN, finish marching.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineHelper.GetWrappedPolylines(System.Collections.Generic.IList{Microsoft.Expression.Drawing.Core.PolylineData},System.Double@)">
            <summary>
            Reorders the given list of polylines so that the polyline a given arclength into the list is the first.
            Polylines that preceded this line are concatenated to the end of the list, with the first polyline at the very end. 
            </summary>
            <param name="lines">A list of polylines.</param>
            <param name="startArcLength">The arclength into the entire list of polylines at which to find the start line.
            The arc length into that line is returned in this variable.</param>
            <returns>The reordered and wrapped list.</returns>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.RandomEngine">
            <summary>
            A random generator support uniform and gaussian distributions.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.RandomEngine.Gaussian">
            <summary>
            Generate a pair of independent standard normally distributed random numbers,
            zero expectation, unit variance, using polar form of the Box-Muller transformation.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.#ctor">
            <summary>
            Private constructor. Force to use factory methods.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a line segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a cubic bezier segment from quatratic curve (3 control points)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a cubic bezier segment with 4 control points.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.SimpleSegment.Points">
            <summary>
            Control points of path segment.  Length is variant.
            Line segment has 2 points, Cubic bezier has 4 points.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.TransformExtensions.TransformEquals(System.Windows.Media.Transform,System.Windows.Media.Transform)">
            <summary>
            Compares two transforms for an exact match.  Transforms with the same value but different structure(e.g. Translate(0,0) and Rotate(0) are not considered equivalent).
            </summary>
            <param name="firstTransform">The first transform.</param>
            <param name="secondTransform">The second transform.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Expression.Media.UnitType">
            <summary>
            Specifies the unit of thickness.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.UnitType.Pixel">
            <summary>
            Unit in pixels.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.UnitType.Percent">
            <summary>
            Unit in percentage relative to bounding box.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometrySource`1">
            <summary>
            Provides the base class of a source of geometry.
            It generate and cache the geometry based on input parameters and layout bounds.
            </summary>
            <remarks>
            A typical implementation will extend the UpdateCachedGeometry() to update this.cachedGeometry.
            This base class will then handle the invalidation, pipeline to geometry effects and caching realtive to layout bounds.
            An implementation should try to reuse the cached geometry as much as possible to avoid reconstruction in rendering thread.
            An implementation can extend the ComputeLogicalBounds to handle Stretch differently.
            </remarks>
            <typeparam name="TParameters">The type of geometry source parameter on which the base class is working on.</typeparam>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySource">
            <summary>
            Provides an interface to describe the source of a geometry.
            </summary>
            <remarks>
            This interface is designed to expose geometry source in a non-generic way.
            Typical implementation should subclass GeometrySource&lt;&gt; instead of implementing this interface directly.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.IGeometrySource.InvalidateGeometry">
            <summary>
            Notify the geometry is invalidated because of external changes.
            </summary>
            <remarks>
            Typically geometry is invalidated when parameters are changed.
            If any geometry has been invalidated externally, geometry will be recomputed regardless bounds' change.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.IGeometrySource.UpdateGeometry(Microsoft.Expression.Media.IGeometrySourceParameters,System.Windows.Rect)">
            <summary>
            Update the geometry using given parameter and layout bounds.
            Returns false if nothing has been updated.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.Geometry">
            <summary>
            Gets or sets the result geometry after the latest UpdateGeometry()
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.LogicalBounds">
            <summary>
            Gets the bounding box where geometry should stretch to.
            The actual geometry might be smaller or larger than this.
            <see cref="P:Microsoft.Expression.Media.IGeometrySource.LogicalBounds"/> should already take stroke thickness and stretch into consideration.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.LayoutBounds">
            <summary>
            Gets the actuall bound of FrameworkElement.
            <see cref="P:Microsoft.Expression.Media.IGeometrySource.LayoutBounds"/> includes logical bounds, stretch and stroke thickness.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometrySource`1.cachedGeometry">
            <summary>
            Specifics the geometry from the previous geometry effect process.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.InvalidateGeometry">
            <summary>
            Notify the geometry is invalidated because of external changes.
            </summary>
            <remarks>
            Typically geometry is invalidated when parameters are changed.
            If any geometry has been invalidated externally, geometry will be recomputed regardless bounds' change.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.UpdateGeometry(Microsoft.Expression.Media.IGeometrySourceParameters,System.Windows.Rect)">
            <summary>
            Update the geometry based on given parameters and layoutBounds.
            Returns false if geometry hasn't been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.UpdateCachedGeometry(`0)">
            <summary>
            Extend the way to provide geometry by implementing this function.
            Return true when any of the geometry is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Extend the way to handle stretch mode.
            Default is to always use Stretch.Fill and center stroke.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.ApplyGeometryEffect(Microsoft.Expression.Media.IGeometrySourceParameters,System.Boolean)">
            <summary>
            Apply geometry effect when dirty or forced, update this.Geometry.
            Otherwise, keep this.Geometry as this.cachedGeometry.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.Geometry">
            <summary>
            Gets or sets the result geometry after the latest UpdateGeometry()
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.LogicalBounds">
            <summary>
            Gets the bounding box where geometry should stretch to.
            The actual geometry might be smaller or larger than this.
            <see cref="P:Microsoft.Expression.Media.GeometrySource`1.LogicalBounds"/> should already take stroke thickness and stretch into consideration.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.LayoutBounds">
            <summary>
            Gets the actuall bound of FrameworkElement.
            <see cref="P:Microsoft.Expression.Media.GeometrySource`1.LayoutBounds"/> includes logical bounds, stretch and stroke thickness.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Expression.Media.ArcGeometrySource.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Arc think Stretch.None is same as Stretch.Fill, assuming aspect ratio = 1:1
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.ArcGeometrySource.NormalizeThickness(Microsoft.Expression.Media.IArcGeometrySourceParameters)">
            <summary>
            Normalize thickness, both relative to bounding box and absolute pixel.
            realtive thickness = 0 -> full circle radius or clamped.
            realtive thickness = 1 -> shrinked to a dot, or degenerated.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.ArrowOrientation">
            <summary>
            Specifies the direction the arrow points.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Left">
            <summary>
            The arrow points to left.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Right">
            <summary>
            The arrow points to right.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Up">
            <summary>
            The arrow points up.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Down">
            <summary>
            The arrow points down.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.BlockArrowGeometrySource.ArrowBuilder">
            <summary>
                 B
                /|
               / C--D
              A     |
               \ C--D
                \|
                 B
            Algorithm only use Width/Height assuming top-left at 0,0
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.CalloutStyle">
            <summary>
            Specifies the rendering style of a Callout shape
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Rectangle">
            <summary>
            A rectangle shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.RoundedRectangle">
            <summary>
            A rounded rectangle shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Oval">
            <summary>
            A oval shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Cloud">
            <summary>
            A cloud shaped callout.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateEdge(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double,System.Boolean)">
            <summary>
            Update the edge line, and connect to anchor point if necessary
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdatePolylineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Update polyline segment, connecting start, anchor and end point with Callout style
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateLineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point)">
            <summary>
            Update the line segment to given point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.ComputeCorners(System.Double)">
            <summary>
            Compute the corner points, clockwise, 8 points for 4 corners
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateCornerArc(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point)">
            <summary>
            Corner Arc is always smaller arc with 90 degree
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometryEffect">
            <summary>
            Provides the base class of GeometryEffect that transform a geometry into another geometry.
            </summary>
            <remarks>
            This class provides the basic implementation of processing the rendered geometry of a IShape before it's passed to rendering.
            A typical implementation will extend the virtual function <see cref="F:ProcessGeometry"/> to transform input geometry.
            <see cref="T:GeometryEffect"/> is typically attached to <see cref="T:IShape"/> as an attached property and activated when <see cref="T:IShape"/> geometry is updated.
            The <see cref="P:OutputGeometry"/> of a <see cref="T:GeometryEffect"/> will replace the rendered geometry in <see cref="T:IShape"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.GetGeometryEffect(System.Windows.DependencyObject)">
            <summary>
            Gets the geometry effect as attached property on given dependency object.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.SetGeometryEffect(System.Windows.DependencyObject,Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Sets the geometry effect as attached property on given dependency object.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.CloneCurrentValue">
            <summary>
            Creates a modifiable clone (deep copy) of the <see cref="T:GeometryEffect"/> using its current values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.DeepCopy">
            <summary>
            Makes a deep copy of the geometry effect. Implements CloneCurrentValue in Silverlight.
            </summary>
            <returns>A clone of current instance of geometry effect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Equals(Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Tests if given geometry effect is equivalent to the current instance.
            </summary>
            <param name="geometryEffect">a geometry effect compare with.</param>
            <returns>Returns true when two effects renders a same appearance.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometryEffect.cachedGeometry">
            <summary>
            Specifics the geometry from the previous geometry effect process.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.InvalidateGeometry">
            <summary>
            Invalidate the geometry effect without actually compute the geometry.
            It will notify all parent shapes or effects to invalidate accordingly.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.ProcessGeometry(System.Windows.Media.Geometry)">
            <summary>
            Process geometry effect on given input geometry.
            Result is stored in GeometryEffect.OutputGeometry.
            </summary>
            <returns>Return false if nothing has been changed.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.UpdateCachedGeometry(System.Windows.Media.Geometry)">
            <summary>
            Extend the way of updating cachedGeometry based on given input geometry.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Detach">
            <summary>
            Notified when detached from parent chain.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Attach(System.Windows.DependencyObject)">
            <summary>
            Notified when attached to a parent chain.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.InvalidateParent(System.Windows.DependencyObject)">
            <summary>
            Invalidate the geometry on given dependency object when
            the object is a valid parent type (IShape or GeometryEffect).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.CreateInstanceCore">
            <summary>
            Implement the Freezable in WPF.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.DefaultGeometryEffect">
            <summary>
            The default geometry effect that does nothing but passing through the input geometry.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.OutputGeometry">
            <summary>
            Gets the output geometry of this geometry effect.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.Parent">
            <summary>
            Parent can be either IShape or GeometryEffectGroup.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometryEffectConverter">
            <summary>
            Provides the conversion between string and geometry effect
            </summary>
            <remarks>
            This class enables the brief sytax in xaml like <code>GeometryEffect="Sketch"</code>
            It will create a clone of instance of geometry effect so it can be used as resources.
            </remarks>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometryEffectConverter.registeredEffects">
            <summary>
            Build a preset list of supported geometry effects.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A GeometryEffect can be converted from string type.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A GeometryEffect can be converted to string type.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts a string to a geometry effect.  Fallback value is null.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a geometry effect into a string.  Fallback value is null.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySourceExtensions">
            <summary>
            Provides helper extension methods to work with IGeometrySource and parameters.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.ArrowType">
            <summary>
            Specifies the Arrow head type.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.NoArrow">
            <summary>
            No arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.Arrow">
            <summary>
            A triagle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.StealthArrow">
            <summary>
            A stealth triangle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.OpenArrow">
            <summary>
            An open triangle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.OvalArrow">
            <summary>
            An oval head.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.CornerType">
            <summary>
            Specifies the corner location.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.TopLeft">
            <summary>
            On top left of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.TopRight">
            <summary>
            On top right of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.BottomRight">
            <summary>
            On bottom right of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.BottomLeft">
            <summary>
            On bottom left of bounding box.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.PolygonGeometrySource.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Polygon think Stretch.None is same as Stretch.Fill
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.SketchGeometryEffect">
            <summary>
            A geometry effect to transform any geometry into a Sketch style as in SketchFlow.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.DeepCopy">
            <summary>
            Makes a deep copy of the geometry effect
            </summary>
            <returns>A clone of current instance of geometry effect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.Equals(Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Tests if given geometry effect is equivalent to the current instance.
            </summary>
            <param name="geometryEffect">a geometry effect compare with.</param>
            <returns>Returns true when two effects renders a same appearance.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.UpdateCachedGeometry(System.Windows.Media.Geometry)">
            <summary>
            Updating cachedGeometry based on given input geometry.
            </summary>
            <param name="input">A input geometry</param>
            <returns>Returns true when anything on cachedGeometry has been updated.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.SketchGeometryEffect.randomSeed">
            <summary>
            Use the same random seed on creation to keep visual flickering minimum
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.GetEffectiveSegments(System.Windows.Media.PathFigure)">
            <summary>
            Iterates all simple segments in given path figure including the closing chord.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Shapes.Arc">
            <summary>
            Renderes an Arc shape supporting Arc, Ring and Pie mode controled by ArcThickness.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Shapes.PrimitiveShape">
            <summary>
            Platform neutral implementation of Shape deriving from WPF:Shape or SL:Path
            </summary>
            <summary>
            Provides WPF implementation of Shap who derives from platform Shape.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.CreateGeometrySource">
            <summary>
            Extend how the shape is drawn with creating geometry source
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.MeasureOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
            <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes, or possibly on other considerations such as fixed container size.</returns>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <remarks>
            In WPF, measure override works from Shape.DefiningGeometry which is not always as expected
            see bug 99497 for details where WPF is not having correct measure by default.
            
            In Silverlight, measure override on Path does not work the same as primitive shape works.
            
            We should return the smallest size this shape can correctly render without clipping.
            By default a shape can render as small as a dot, therefore returning the strokethickness.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Shapes.PrimitiveShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Shapes.PrimitiveShape.GeometryMargin">
            <summary>
            Gets or sets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Shapes.PrimitiveShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.PrimitiveShape.RenderedGeometry">
            <summary>
            Gets a value that represents the final rendered <see cref="T:System.Windows.Media.Geometry"/> of a <see cref="T:System.Windows.Shapes.Shape"/>.
            </summary>
            <returns>The final rendered <see cref="T:System.Windows.Media.Geometry"/> of a <see cref="T:System.Windows.Shapes.Shape"/>.</returns>
            <remarks>The WPF primitive shape hides base class RenderedGeometry to provide a local storage and matches Silverlight primitive shape interface.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
            <value>The start angle in degrees. 0 degree is pointing up.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.EndAngle">
            <summary>
            Gets or sets the end angle.
            </summary>
            <value>The end angle in degree. 0 degree is pointing up.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.ArcThickness">
            <summary>
            Gets or sets the arc thickness.
            </summary>
            <value>The arc thickness in pixels or percentage depending on "ArcThicnessUnit"/>.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.ArcThicknessUnit">
            <summary>
            Gets or sets the arc thickness unit.
            </summary>
            <value>The arc thickness unit, either pixel or percentage.</value>
        </member>
        <member name="T:Microsoft.Expression.Shapes.BlockArrow">
            <summary>
            Renders a block arrow shape supporting resizable arrow head and body.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation where the arrow is pointing to.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.ArrowheadAngle">
            <summary>
            Gets or sets the arrowhead angle.
            </summary>
            <value>The arrowhead angle in degrees.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.ArrowBodySize">
            <summary>
            Gets or sets the size of the arrow body.
            </summary>
            <value>The size of the arrow body in pixels.</value>
        </member>
        <member name="T:Microsoft.Expression.Shapes.RegularPolygon">
            <summary>
            Renders a regular polygon shape or corresponding star shape with variable number of points.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.RegularPolygon.PointCount">
            <summary>
            Gets or sets the number of points of the <see cref="T:Microsoft.Expression.Shapes.RegularPolygon"/>
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.RegularPolygon.InnerRadius">
            <summary>
            Gets or sets the the distance between the center and the innermost point.
            </summary>
            <value>The distance between the center and the innermost point.</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\es\System.Windows.Interactivity.xml ===
﻿<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Interactivity</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Interactivity.AttachableCollection`1">
            <summary>
            Representa una colección de IAttachedObject con una propiedad AssociatedObject compartida y proporciona notificaciones de cambio de su contenido cuando se producen cambios en AssociatedObject.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.IAttachedObject">
            <summary>
            Interfaz para un objeto que se puede adjuntar a otro.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.IAttachedObject.Attach(System.Windows.DependencyObject)">
            <summary>
            Se adjunta al objeto especificado.
            </summary>
            <param name="dependencyObject">Objeto al que se adjunta otro.</param>
        </member>
        <member name="M:System.Windows.Interactivity.IAttachedObject.Detach">
            <summary>
            Desasocia esta instancia de su objeto asociado.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.IAttachedObject.AssociatedObject">
            <summary>
            Obtiene el objeto asociado.
            </summary>
            <value>Objeto asociado.</value>
            <remarks>Representa el objeto al que se adjunta la instancia.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Interactivity.AttachableCollection`1"/>.
            </summary>
            <remarks>Interna, porque no debe ser heredada fuera de este conjunto.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.OnAttached">
            <summary>
            Se llama a este método después de adjuntar la colección a AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.OnDetaching">
            <summary>
            Se llama a este método cuando la colección se está desasociando de AssociatedObject, pero antes de que esto ocurra.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.ItemAdded(`0)">
            <summary>
            Se llama a este método cuando se agrega un nuevo elemento a la colección.
            </summary>
            <param name="item">Nuevo elemento.</param>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.ItemRemoved(`0)">
            <summary>
            Se llama a este método cuando se elimina un elemento de la colección.
            </summary>
            <param name="item">Elemento eliminado.</param>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.VerifyAdd(`0)">
            <exception cref="T:System.InvalidOperationException">No se puede agregar una instancia a una colección más de una vez.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.Attach(System.Windows.DependencyObject)">
            <summary>
            Se adjunta al objeto especificado.
            </summary>
            <param name="dependencyObject">Objeto al que se adjunta otro.</param>
            <exception cref="T:System.InvalidOperationException">IAttachedObject ya se ha adjuntado a otro objeto.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.Detach">
            <summary>
            Desasocia esta instancia de su objeto asociado.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.AttachableCollection`1.AssociatedObject">
            <summary>
            Objeto donde se hospeda la colección.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.AttachableCollection`1.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Obtiene el objeto asociado.
            </summary>
            <value>Objeto asociado.</value>
        </member>
        <member name="T:System.Windows.Interactivity.Behavior`1">
            <summary>
            Encapsula información de estado y cero o más ICommands en un objeto que se puede adjuntar.
            </summary>
            <typeparam name="T">Tipo al que se puede adjuntar <see cref="T:System.Windows.Interactivity.Behavior`1"/>.</typeparam>
            <remarks>
            	El comportamiento es la clase base para proporcionar comandos y un estado que se puede adjuntar a un objeto. Los tipos a los que se puede adjuntar el comportamiento pueden controlarse por medio del parámetro genérico. Reemplace los métodos OnAttached() y OnDetaching() para enlazar y desenlazar cualquier controlador necesario de AssociatedObject.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.Behavior">
            <summary>
            Encapsula información de estado y cero o más ICommands en un objeto que se puede adjuntar.
            </summary>
            <remarks>Ésta es una clase de infraestructura. Los autores de comportamientos deben derivar de Behavior&lt;T&gt; en lugar de hacerlo de esta clase.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.OnAttached">
            <summary>
            Se llama a este método después de adjuntar el comportamiento a AssociatedObject.
            </summary>
            <remarks>Reemplace este método para enlazar funcionalidad a AssociatedObject.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.OnDetaching">
            <summary>
            Se llama a este método cuando el comportamiento se está desasociando de AssociatedObject, pero antes de que ocurra.
            </summary>
            <remarks>Reemplace este método para desenlazar funcionalidad de AssociatedObject.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.Attach(System.Windows.DependencyObject)">
            <summary>
            Se adjunta al objeto especificado.
            </summary>
            <param name="dependencyObject">Objeto al que se adjunta otro.</param>
            <exception cref="T:System.InvalidOperationException">El comportamiento ya está hospedado en otro elemento.</exception>
            <exception cref="T:System.InvalidOperationException">dependencyObject no satisface la restricción de tipo de comportamiento.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.Detach">
            <summary>
            Desasocia esta instancia de su objeto asociado.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.AssociatedType">
            <summary>
            Tipo al que se puede adjuntar este comportamiento.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.AssociatedObject">
            <summary>
            Obtiene el objeto al que se ha adjuntado este comportamiento.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Obtiene el objeto asociado.
            </summary>
            <value>Objeto asociado.</value>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior`1.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Interactivity.Behavior`1"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior`1.AssociatedObject">
            <summary>
            Obtiene el objeto al que se ha adjuntado <see cref="T:System.Windows.Interactivity.Behavior`1"/>.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.BehaviorCollection">
            <summary>
            Representa una colección de comportamientos con una propiedad AssociatedObject compartida y proporciona notificaciones de cambio de su contenido cuando se producen cambios en AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Interactivity.BehaviorCollection"/>.
            </summary>
            <remarks>Interna, porque no debe ser heredada fuera de este conjunto.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.OnAttached">
            <summary>
            Se llama a este método después de adjuntar la colección a AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.OnDetaching">
            <summary>
            Se llama a este método cuando la colección se está desasociando de AssociatedObject, pero antes de que esto ocurra.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.ItemAdded(System.Windows.Interactivity.Behavior)">
            <summary>
            Se llama a este método cuando se agrega un nuevo elemento a la colección.
            </summary>
            <param name="item">Nuevo elemento.</param>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.ItemRemoved(System.Windows.Interactivity.Behavior)">
            <summary>
            Se llama a este método cuando se elimina un elemento de la colección.
            </summary>
            <param name="item">Elemento eliminado.</param>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.CreateInstanceCore">
            <summary>
            Crea una nueva instancia de BehaviorCollection.
            </summary>
            <returns>Nueva instancia.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.CustomPropertyValueEditor">
            <summary>
            Enumera valores posibles para editores de valores de propiedad reutilizables.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.Element">
            <summary>
            Usa el selector de elementos, si está disponible, para editar esta propiedad en tiempo de diseño.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.Storyboard">
            <summary>
            Usa el selector de guiones gráficos, si está disponible, para editar esta propiedad en tiempo de diseño.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.StateName">
            <summary>
            Usa el selector de estados, si está disponible, para editar esta propiedad en tiempo de diseño.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.CustomPropertyValueEditorAttribute">
            <summary>
            Asocia el tipo de editor con la propiedad a la que se ha aplicado CustomPropertyValueEditor.
            </summary>
            <remarks>Use este atributo con el fin de mejorar la edición en tiempo de diseño para propiedades que denotan elementos (por nombre), guiones gráficos o estados (por nombre).</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.CustomPropertyValueEditorAttribute.#ctor(System.Windows.Interactivity.CustomPropertyValueEditor)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Interactivity.CustomPropertyValueEditorAttribute"/>.
            </summary>
            <param name="customPropertyValueEditor">Editor de valores de propiedad personalizado.</param>
        </member>
        <member name="P:System.Windows.Interactivity.CustomPropertyValueEditorAttribute.CustomPropertyValueEditor">
            <summary>
            Obtiene o establece el editor de valores de propiedad personalizado.
            </summary>
            <value>Editor de valores de propiedad personalizado.</value>
        </member>
        <member name="T:System.Windows.Interactivity.DefaultTriggerAttribute">
            <summary>
            Proporciona información de herramientas de diseño acerca de cómo <see cref="T:System.Windows.Interactivity.TriggerBase"/> puede crear instancias para una acción o un comando determinados.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.#ctor(System.Type,System.Type,System.Object)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Interactivity.DefaultTriggerAttribute"/>.
            </summary>
            <param name="targetType">Tipo al que se aplica este atributo.</param>
            <param name="triggerType">Tipo de <see cref="T:System.Windows.Interactivity.TriggerBase"/> para crear instancias.</param>
            <param name="parameters">Un único argumento para la clase <see cref="T:System.Windows.Interactivity.TriggerBase"/> especificada.</param>
            <exception cref="T:System.ArgumentException"><c cref="F:System.Windows.Interactivity.DefaultTriggerAttribute.triggerType"/> no se deriva de TriggerBase.</exception>
            <remarks>Este constructor es útil si la clase <see cref="T:System.Windows.Interactivity.TriggerBase"/> especificada tiene un único argumento. El código resultante será compatible con CLS.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.#ctor(System.Type,System.Type,System.Object[])">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Interactivity.DefaultTriggerAttribute"/>.
            </summary>
            <param name="targetType">Tipo al que se aplica este atributo.</param>
            <param name="triggerType">Tipo de <see cref="T:System.Windows.Interactivity.TriggerBase"/> para crear instancias.</param>
            <param name="parameters">Argumentos del constructor para la clase <see cref="T:System.Windows.Interactivity.TriggerBase"/> especificada.</param>
            <exception cref="T:System.ArgumentException"><c cref="F:System.Windows.Interactivity.DefaultTriggerAttribute.triggerType"/> no se deriva de TriggerBase.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.Instantiate">
            <summary>
            Crea esta instancia.
            </summary>
            <returns>Clase <see cref="T:System.Windows.Interactivity.TriggerBase"/> especificada por DefaultTriggerAttribute.</returns>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.TargetType">
            <summary>
            Obtiene el tipo al que se aplica DefaultTriggerAttribute.
            </summary>
            <value>Tipo al que se aplica DefaultTriggerAttribute.</value>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.TriggerType">
            <summary>
            Obtiene el tipo de <see cref="T:System.Windows.Interactivity.TriggerBase"/> para crear instancias.
            </summary>
            <value>Tipo de <see cref="T:System.Windows.Interactivity.TriggerBase"/> para crear instancias.</value>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.Parameters">
            <summary>
            Obtiene los parámetros para pasar al constructor <see cref="T:System.Windows.Interactivity.TriggerBase"/>.
            </summary>
            <value>Parámetros para pasar al constructor <see cref="T:System.Windows.Interactivity.TriggerBase"/>.</value>
        </member>
        <member name="T:System.Windows.Interactivity.EventTrigger">
            <summary>
            Un desencadenador que escucha un evento especificado en su origen y se activa cuando lo hace el evento.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.EventTriggerBase`1">
            <summary>
            Representa un desencadenador que puede escuchar un elemento distinto a AssociatedObject.
            </summary>
            <typeparam name="T">Tipo al que se puede asociar este desencadenador.</typeparam>
            <remarks>
            	EventTriggerBase amplía TriggerBase para agregar información acerca de un elemento distinto al elemento al que se ha adjuntado. Esto permite al usuario adjuntar un par desencadenador/acción a un elemento e invocar la acción como respuesta a un cambio producido en otro elemento de otro lugar. Reemplace OnSourceChanged para enlazar y desenlazar controladores en el elemento de origen, y OnAttached/OnDetaching para el elemento asociado. El tipo del elemento de origen puede estar restringido por el parámetro de tipo genérico. Si necesita tener control sobre el tipo de AssociatedObject, establezca TypeConstraintAttribute en el tipo derivado.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.EventTriggerBase">
            <summary>
            Representa un desencadenador que puede escuchar un elemento distinto a AssociatedObject.
            </summary>
            <remarks>Ésta es una clase de infraestructura. Los autores de desencadenadores deben derivar de EventTriggerBase&lt;T&gt;, en lugar de hacerlo de esta clase.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerBase">
            <summary>
            Representa un objeto que puede invocar acciones de forma condicional.
            </summary>
            <remarks>Ésta es una clase de infraestructura. Los autores de desencadenadores deben derivar de Trigger&lt;T&gt;, en lugar de hacerlo de esta clase.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.InvokeActions(System.Object)">
            <summary>
            Invoque todas las acciones asociadas a este desencadenador.
            </summary>
            <remarks>Las clases derivadas deben llamar a esta función para activar el desencadenador.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.OnAttached">
            <summary>
            Se llama a este método después de adjuntar el desencadenador a AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.OnDetaching">
            <summary>
            Se llama a este método cuando el desencadenador se está desasociando de AssociatedObject, pero antes de que esto ocurra.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.CreateInstanceCore">
            <summary>
            Crea una nueva instancia de la clase derivada TriggerBase.
            </summary>
            <returns>Nueva instancia.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.Attach(System.Windows.DependencyObject)">
            <summary>
            Se adjunta al objeto especificado.
            </summary>
            <param name="dependencyObject">Objeto al que se adjunta otro.</param>
            <exception cref="T:System.InvalidOperationException">El mismo desencadenador no se puede hospedar en más de un objeto simultáneamente.</exception>
            <exception cref="T:System.InvalidOperationException">dependencyObject no satisface la restricción de tipo de desencadenador.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.Detach">
            <summary>
            Desasocia esta instancia de su objeto asociado.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.AssociatedObject">
            <summary>
            Obtiene el objeto al que se ha adjuntado el desencadenador.
            </summary>
            <value>Objeto asociado.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.AssociatedObjectTypeConstraint">
            <summary>
            Obtiene la restricción de tipo para el objeto asociado.
            </summary>
            <value>Restricción de tipo de objeto asociado.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.Actions">
            <summary>
            Obtiene las acciones asociadas a este desencadenador.
            </summary>
            <value>Acciones asociadas a este desencadenador.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Obtiene el objeto asociado.
            </summary>
            <value>Objeto asociado.</value>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.GetEventName">
            <summary>
            Especifica el nombre del evento para el que EventTriggerBase está escuchando.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnEvent(System.EventArgs)">
            <summary>
            Se llama a este método cuando el evento asociado con EventTriggerBase se activa. De forma predeterminada, esto invocará todas las acciones del desencadenador.
            </summary>
            <param name="eventArgs">Instancia de <see cref="T:System.EventArgs"/> que contiene los datos del evento.</param>
            <remarks>Reemplace esta función para proporcionar un control más granular cuando se invoquen las acciones asociadas a este desencadenador.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnSourceChangedImpl(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Se llama a este método cuando se producen cambios en el origen.
            </summary>
            <param name="oldSource">Origen antiguo.</param>
            <param name="newSource">Origen nuevo.</param>
            <remarks>Esta función debe ser reemplazada en clases derivadas para enlazar y desenlazar funcionalidad de los objetos de origen que están cambiando.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnAttached">
            <summary>
            Se llama a este método después de adjuntar el desencadenador a AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnDetaching">
            <summary>
            Se llama a este método cuando el desencadenador se está desasociando de AssociatedObject, pero antes de que esto ocurra.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.RegisterEvent(System.Object,System.String)">
            <exception cref="T:System.ArgumentException">No se pudo encontrar eventName en el destino.</exception>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.AssociatedObjectTypeConstraint">
            <summary>
            Obtiene la restricción de tipo para el objeto asociado.
            </summary>
            <value>Restricción de tipo de objeto asociado.</value>
            <remarks>Defina TypeConstraintAttribute en un tipo derivado para restringir los tipos a los que se puede adjuntar.</remarks>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.SourceTypeConstraint">
            <summary>
            Obtiene la restricción de tipo de origen.
            </summary>
            <value>Restricción de tipo de origen.</value>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.SourceName">
            <summary>
            Obtiene o establece el nombre del elemento para el que EventTriggerBase escucha como un origen. Si el nombre no se ha establecido o no se puede resolver, se usará AssociatedObject.  Ésta es una propiedad de dependencia.
            </summary>
            <value>Nombre del elemento de origen.</value>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.Source">
            <summary>
            Obtiene el origen resuelto. Si <c ref="SourceName"/> no se ha establecido o no se puede resolver, AssociatedObject se establecerá de forma predeterminada.
            </summary>
            <value>Objeto de origen resuelto.</value>
            <remarks>Por lo general, esta propiedad debería usarse en lugar de AssociatedObject en clases derivadas.</remarks>
            <exception cref="T:System.InvalidOperationException">El elemento al que apunta <c cref="P:System.Windows.Interactivity.EventTriggerBase.Source"/> no satisface la restricción de tipo.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase`1.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Interactivity.EventTriggerBase`1"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase`1.OnSourceChanged(`0,`0)">
            <summary>
            Se llama a este método cuando se producen cambios en la propiedad de origen.
            </summary>
            <remarks>Reemplace este método para enlazar y desenlazar funcionalidad del origen especificado, en lugar de hacerlo de AssociatedObject.</remarks>
            <param name="oldSource">Origen antiguo.</param>
            <param name="newSource">Origen nuevo.</param>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase`1.Source">
            <summary>
            Obtiene el origen resuelto. Si <c ref="SourceName"/> no se ha establecido o no se puede resolver, AssociatedObject se establecerá de forma predeterminada.
            </summary>
            <value>Objeto de origen resuelto.</value>
            <remarks>Por lo general, esta propiedad debería usarse en lugar de AssociatedObject en clases derivadas.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTrigger.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Interactivity.EventTrigger"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTrigger.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Interactivity.EventTrigger"/>.
            </summary>
            <param name="eventName">Nombre del evento.</param>
        </member>
        <member name="P:System.Windows.Interactivity.EventTrigger.EventName">
            <summary>
            Obtiene o establece el nombre del evento para escuchar. Ésta es una propiedad de dependencia.
            </summary>
            <value>Nombre del evento.</value>
        </member>
        <member name="T:System.Windows.Interactivity.Interaction">
            <summary>
            Clase estática que posee las propiedades adjuntas a desencadenadores y comportamientos. La propagación de manipuladores de AssociatedObject cambia las notificaciones.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.Interaction.TriggersProperty">
            <summary>
            Esta propiedad se usa como el dispositivo de copia de seguridad interno para la propiedad adjunta a desencadenadores públicos.
            </summary>
            <remarks>
            Esta propiedad no está expuesta públicamente. Esto obliga a los clientes a usar los métodos GetTriggers y SetTriggers para obtener acceso a la colección, y garantizar que la colección exista y se haya establecido antes de su uso.
            </remarks>
        </member>
        <member name="F:System.Windows.Interactivity.Interaction.BehaviorsProperty">
            <summary>
            Esta propiedad se usa como el dispositivo de copia de seguridad interno para la propiedad adjunta a comportamientos públicos.
            </summary>
            <remarks>
            Esta propiedad no está expuesta públicamente. Esto obliga a los clientes a usar los métodos GetBehaviors y SetBehaviors para obtener acceso a la colección, y garantizar que la colección exista y se haya establecido antes de su uso.
            </remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.GetTriggers(System.Windows.DependencyObject)">
            <summary>
            Obtiene el TriggerCollection que contiene los desencadenadores asociados al objeto especificado.
            </summary>
            <param name="obj">Objeto del que se recuperarán los desencadenadores.</param>
            <returns>Un TriggerCollection que contiene los desencadenadores asociados al objeto especificado.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.GetBehaviors(System.Windows.DependencyObject)">
            <summary>
            Obtiene el <see cref="T:System.Windows.Interactivity.BehaviorCollection"/> asociado al objeto especificado.
            </summary>
            <param name="obj">Objeto del que se recuperará <see cref="T:System.Windows.Interactivity.BehaviorCollection"/>.</param>
            <returns>Un <see cref="T:System.Windows.Interactivity.BehaviorCollection"/> que contiene los comportamientos asociados al objeto especificado.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.OnBehaviorsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <exception cref="T:System.InvalidOperationException">El mismo BehaviorCollection no se puede hospedar en más de un objeto simultáneamente.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.OnTriggersChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <exception cref="T:System.InvalidOperationException">El mismo TriggerCollection no se puede hospedar en más de un objeto simultáneamente.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.IsElementLoaded(System.Windows.FrameworkElement)">
            <summary>
            Una función auxiliar que sustituye a FrameworkElement.IsLoaded, dado que Silverlight no tiene una propiedad similar a esa.
            </summary>
            <param name="element">Elemento relevante.</param>
            <returns>Es True si el elemento se ha cargado; de lo contrario, es False.</returns>
        </member>
        <member name="P:System.Windows.Interactivity.Interaction.ShouldRunInDesignMode">
            <summary>
            Obtiene o establece un valor que indica si la ejecución se producirá como en el modo de diseño.
            </summary>
            <value>
            	Es <c>true</c> si [la ejecución se hará en el modo de diseño]; de lo contrario, será <c>false</c>.
            </value>
            <remarks>No se usará fuera de las pruebas de unidad.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.InvokeCommandAction">
            <summary>
            Ejecuta una acción especificada en el comportamiento del host cuando se invoca.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerAction`1">
            <summary>
            Representa un objeto que se puede adjuntar y que encapsula una unidad de funcionalidad.
            </summary>
            <typeparam name="T">Tipo al que se puede adjuntar esta acción.</typeparam>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerAction">
            <summary>
            Representa un objeto que se puede adjuntar y que encapsula una unidad de funcionalidad.
            </summary>
            <remarks>Ésta es una clase de infraestructura. Los autores de acciones deben derivar de TriggerAction&lt;T&gt;, en lugar de hacerlo de esta clase.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.CallInvoke(System.Object)">
            <summary>
            Intenta invocar una acción.
            </summary>
            <param name="parameter">Parámetro para la acción. Si la acción no requiere un parámetro, éste se puede establecer en una referencia nula.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Invoke(System.Object)">
            <summary>
            Invoca la acción.
            </summary>
            <param name="parameter">Parámetro para la acción. Si la acción no requiere un parámetro, éste se puede establecer en una referencia nula.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.OnAttached">
            <summary>
            Se llama a este método después de adjuntar la acción a AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.OnDetaching">
            <summary>
            Se llama a este método cuando la acción se está desasociando de AssociatedObject, pero antes de que esto ocurra.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.CreateInstanceCore">
            <summary>
            Cuando se implementa en una clase derivada, crea una nueva instancia de la clase derivada <see cref="T:System.Windows.Freezable"/>.
            </summary>
            <returns>Nueva instancia.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Attach(System.Windows.DependencyObject)">
            <summary>
            Se adjunta al objeto especificado.
            </summary>
            <param name="dependencyObject">Objeto al que se adjunta otro.</param>
            <exception cref="T:System.InvalidOperationException">El mismo TriggerAction no se puede hospedar en más de un objeto simultáneamente.</exception>
            <exception cref="T:System.InvalidOperationException">dependencyObject no satisface la restricción de tipo TriggerAction.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Detach">
            <summary>
            Desasocia esta instancia de su objeto asociado.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.IsEnabled">
            <summary>
            Obtiene o establece un valor que indica si esta acción se ejecutará cuando se invoque. Ésta es una propiedad de dependencia.
            </summary>
            <value>
            	Es <c>true</c> si la acción se ejecutará al invocarse; de lo contrario, será <c>false</c>.
            </value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.AssociatedObject">
            <summary>
            Obtiene el objeto al que se ha adjuntado esta acción.
            </summary>
            <value>Objeto asociado.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.AssociatedObjectTypeConstraint">
            <summary>
            Obtiene la restricción de tipo de objeto asociado.
            </summary>
            <value>Restricción de tipo de objeto asociado.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.IsHosted">
            <summary>
            Obtiene o establece un valor que indica si la instancia está adjunta.
            </summary>
            <value>Es <c>true</c> si la instancia está adjunta; de lo contrario, será <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Obtiene el objeto asociado.
            </summary>
            <value>Objeto asociado.</value>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction`1.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Interactivity.TriggerAction`1"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject">
            <summary>
            Obtiene el objeto al que se ha adjuntado <see cref="T:System.Windows.Interactivity.TriggerAction`1"/>.
            </summary>
            <value>Objeto asociado.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObjectTypeConstraint">
            <summary>
            Obtiene la restricción de tipo de objeto asociado.
            </summary>
            <value>Restricción de tipo de objeto asociado.</value>
        </member>
        <member name="M:System.Windows.Interactivity.InvokeCommandAction.Invoke(System.Object)">
            <summary>
            Invoca la acción.
            </summary>
            <param name="parameter">Parámetro para la acción. Si la acción no requiere un parámetro, éste se puede establecer en una referencia nula.</param>
        </member>
        <member name="M:System.Windows.Interactivity.InvokeCommandAction.OnAttached">
            <summary>
            Se llama a este método después de adjuntar la colección a AssociatedObject.
            </summary>
            <exception cref="T:System.InvalidOperationException">InvokeActionCommand debe estar hospedado en un comportamiento.</exception>
        </member>
        <member name="P:System.Windows.Interactivity.InvokeCommandAction.CommandName">
            <summary>
            Obtiene o establece el nombre del comando al que debe invocar esta acción.
            </summary>
            <value>Nombre del comando al que debe invocar esta acción.</value>
        </member>
        <member name="P:System.Windows.Interactivity.InvokeCommandAction.CommandParameter">
            <summary>
            Obtiene o establece el parámetro del comando.
            </summary>
            <value>Parámetro del comando.</value>
            <remarks>Éste es el valor que se pasa a ICommand.CanExecute e ICommand.Execute.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.NameResolvedEventArgs">
            <summary>
            Proporciona datos acerca de los objetos que se han visto afectados al resolver un cambio de nombre.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.NameResolver">
            <summary>
            Clase auxiliar que maneja la lógica para resolver un TargetName en un elemento de destino en función del contexto proporcionado por un elemento host.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.NameResolver.UpdateObjectFromName(System.Windows.DependencyObject)">
            <summary>
            Intenta actualizar el objeto resuelto del nombre dentro del contexto del elemento de referencia del ámbito de nombres.
            </summary>
            <param name="oldObject">Objeto resuelto antiguo.</param>
            <remarks>
            Establece el destino existente e intenta resolver el TargetName actual desde el contexto del host actual. Si no lo puede resolver desde el contexto del host, continuará ascendiendo por el árbol visual hasta que lo resuelva. Si no lo ha resuelto cuando llegue a la raíz, establecerá el destino en nulo y escribirá un mensaje de advertencia en la salida de depuración.
            </remarks>
        </member>
        <member name="E:System.Windows.Interactivity.NameResolver.ResolvedElementChanged">
            <summary>
            Se produce cuando el elemento resuelto ha cambiado.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.Name">
            <summary>
            Obtiene o establece el nombre del elemento que se intenta resolver.
            </summary>
            <value>Nombre que se intenta resolver.</value>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.Object">
            <summary>
            Objeto resuelto. Devolverá el elemento de referencia si el valor de TargetName es nulo o está vacío, o si no se ha intentado una resolución.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.NameScopeReferenceElement">
            <summary>
            Obtiene o establece el elemento de referencia desde el que se realizará la resolución de nombres.
            </summary>
            <value>Elemento de referencia.</value>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.PendingReferenceElementLoad">
            <summary>
            Obtiene o establece un valor que indica si la carga del elemento de referencia está pendiente.
            </summary>
            <value>
            	Es <c>true</c> si [la carga del elemento de referencia está pendiente]; de lo contrario, será <c>false</c>.
            </value>
            <remarks>
            Si el host no se ha cargado, el nombre no se resolverá. En este caso, aplace la resolución y haga un seguimiento con esta propiedad.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TargetedTriggerAction`1">
            <summary>
            Representa una acción que se puede establecer como destino para que influya en un objeto distinto a AssociatedObject.
            </summary>
            <typeparam name="T">Restricción de tipo en el destino.</typeparam>
            <remarks>
            	TargetedTriggerAction amplía TriggerAction para agregar información acerca de un elemento distinto al elemento al que se ha adjuntado. Esto permite al usuario invocar la acción en un elemento distinto al elemento al que está adjunta como respuesta a la activación de un desencadenador. Reemplace OnTargetChanged para enlazar y desenlazar controladores en el elemento de destino, y OnAttached/OnDetaching para el elemento asociado. El tipo del elemento de destino puede estar restringido por el parámetro de tipo genérico. Si necesita tener control sobre el tipo de AssociatedObject, establezca TypeConstraintAttribute en el tipo derivado.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TargetedTriggerAction">
            <summary>
            Representa una acción que se puede establecer como destino para que influya en un objeto distinto a AssociatedObject.
            </summary>
            <remarks>Ésta es una clase de infraestructura. Los autores de acciones deben derivar de TargetedTriggerAction&lt;T&gt;, en lugar de hacerlo de esta clase.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnTargetChangedImpl(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Se llama a este método cuando se producen cambios en el destino.
            </summary>
            <param name="oldTarget">Destino antiguo.</param>
            <param name="newTarget">Destino nuevo.</param>
            <remarks>Esta función debe ser reemplazada en clases derivadas para enlazar y desenlazar funcionalidad de los objetos de origen que están cambiando.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnAttached">
            <summary>
            Se llama a este método después de adjuntar la acción a AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnDetaching">
            <summary>
            Se llama a este método cuando la acción se está desasociando de AssociatedObject, pero antes de que esto ocurra.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.TargetName">
            <summary>
            Obtiene o establece el nombre del destino. Si TargetName no se ha establecido o no se puede resolver, el destino se establecerá en AssociatedObject de forma predeterminada. Ésta es una propiedad de dependencia.
            </summary>
            <value>Nombre del destino.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.Target">
            <summary>
            Obtiene el objeto de destino. Si TargetName no se ha establecido o no se puede resolver, AssociatedObject se establecerá de forma predeterminada.
            </summary>
            <value>Destino.</value>
            <remarks>Por lo general, esta propiedad debería usarse en lugar de AssociatedObject en clases derivadas.</remarks>
            <exception cref="T:System.InvalidOperationException">El elemento de destino no satisface la restricción de tipo.</exception>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.AssociatedObjectTypeConstraint">
            <summary>
            Obtiene la restricción de tipo de objeto asociado.
            </summary>
            <value>Restricción de tipo de objeto asociado.</value>
            <remarks>Defina TypeConstraintAttribute en un tipo derivado para restringir los tipos a los que se puede adjuntar.</remarks>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.TargetTypeConstraint">
            <summary>
            Obtiene la restricción de tipo de destino.
            </summary>
            <value>Restricción de tipo de destino.</value>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction`1.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Interactivity.TargetedTriggerAction`1"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction`1.OnTargetChanged(`0,`0)">
            <summary>
            Se llama a este método cuando se producen cambios en la propiedad de destino.
            </summary>
            <remarks>Reemplace este método para enlazar y desenlazar funcionalidad en el destino especificado, en lugar de hacerlo en AssociatedObject.</remarks>
            <param name="oldTarget">Destino antiguo.</param>
            <param name="newTarget">Destino nuevo.</param>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction`1.Target">
            <summary>
            Obtiene el objeto de destino. Si TargetName no se ha establecido o no se puede resolver, AssociatedObject se establecerá de forma predeterminada.
            </summary>
            <value>Destino.</value>
            <remarks>Por lo general, esta propiedad debería usarse en lugar de AssociatedObject en clases derivadas.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerActionCollection">
            <summary>
            Representa una colección de acciones con una propiedad AssociatedObject compartida y proporciona notificaciones de cambio de su contenido cuando se producen cambios en AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Interactivity.TriggerActionCollection"/>.
            </summary>
            <remarks>Interna, porque no debe ser heredada fuera de este conjunto.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.OnAttached">
            <summary>
            Se llama a este método después de adjuntar la colección a AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.OnDetaching">
            <summary>
            Se llama a este método cuando la colección se está desasociando de AssociatedObject, pero antes de que esto ocurra.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.ItemAdded(System.Windows.Interactivity.TriggerAction)">
            <summary>
            Se llama a este método cuando se agrega un nuevo elemento a la colección.
            </summary>
            <param name="item">Nuevo elemento.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.ItemRemoved(System.Windows.Interactivity.TriggerAction)">
            <summary>
            Se llama a este método cuando se elimina un elemento de la colección.
            </summary>
            <param name="item">Elemento eliminado.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.CreateInstanceCore">
            <summary>
            Crea una nueva instancia de TriggerActionCollection.
            </summary>
            <returns>Nueva instancia.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerBase`1">
            <summary>
            Representa un objeto que puede invocar acciones de forma condicional.
            </summary>
            <typeparam name="T">Tipo al que se puede adjuntar este desencadenador.</typeparam>
            <remarks>
            	TriggerBase es la clase base para controlar acciones. Reemplace los métodos OnAttached() y OnDetaching() para enlazar y desenlazar controladores de AssociatedObject. Para restringir los tipos a los que se puede adjuntar un TriggerBase derivado, indique el parámetro genérico. Llame a InvokeActions() para activar todas las acciones asociadas a TriggerBase.
            </remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase`1.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Interactivity.TriggerBase`1"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject">
            <summary>
            Obtiene el objeto al que se ha adjuntado el desencadenador.
            </summary>
            <value>Objeto asociado.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObjectTypeConstraint">
            <summary>
            Obtiene la restricción de tipo para el objeto asociado.
            </summary>
            <value>Restricción de tipo de objeto asociado.</value>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerCollection">
            <summary>
             Representa una colección de desencadenadores con una propiedad AssociatedObject compartida y proporciona notificaciones de cambio de su contenido cuando se producen cambios en AssociatedObject.
             </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.#ctor">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Interactivity.TriggerCollection"/>.
            </summary>
            <remarks>Interna, porque no debe ser heredada fuera de este conjunto.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.OnAttached">
            <summary>
            Se llama a este método después de adjuntar la colección a AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.OnDetaching">
            <summary>
            Se llama a este método cuando la colección se está desasociando de AssociatedObject, pero antes de que esto ocurra.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.ItemAdded(System.Windows.Interactivity.TriggerBase)">
            <summary>
            Se llama a este método cuando se agrega un nuevo elemento a la colección.
            </summary>
            <param name="item">Nuevo elemento.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.ItemRemoved(System.Windows.Interactivity.TriggerBase)">
            <summary>
            Se llama a este método cuando se elimina un elemento de la colección.
            </summary>
            <param name="item">Elemento eliminado.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.CreateInstanceCore">
            <summary>
            Inicializa una nueva instancia de <see cref="T:System.Windows.Interactivity.TriggerCollection"/>.
            </summary>
            <returns>Nueva instancia.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.TypeConstraintAttribute">
            <summary>
            Especifique restricciones de tipo en la propiedad AssociatedObject de TargetedTriggerAction y EventTriggerBase.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TypeConstraintAttribute.#ctor(System.Type)">
            <summary>
            Inicializa una nueva instancia de la clase <see cref="T:System.Windows.Interactivity.TypeConstraintAttribute"/>.
            </summary>
            <param name="constraint">Tipo de restricción.</param>
        </member>
        <member name="P:System.Windows.Interactivity.TypeConstraintAttribute.Constraint">
            <summary>
            Obtiene el tipo de restricción.
            </summary>
            <value>Tipo de restricción.</value>
        </member>
        <member name="T:ExceptionStringTable">
            <summary>
              Clase de recurso con establecimiento inflexible de tipos para buscar cadenas localizadas, etc.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ResourceManager">
            <summary>
              Devuelve la instancia de ResourceManager almacenada en caché y usada por esta clase.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.Culture">
            <summary>
              Reemplaza la propiedad CurrentUICulture del subproceso actual para todas las búsquedas de recursos mediante el uso de esta clase de recurso con establecimiento inflexible de tipos.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostBehaviorCollectionMultipleTimesExceptionMessage">
            <summary>
              Busca una cadena localizada similar a No se puede establecer el mismo BehaviorCollection en varios objetos.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostBehaviorMultipleTimesExceptionMessage">
            <summary>
              Busca una cadena localizada similar a No se puede adjuntar una instancia de Comportamiento a más de un objeto simultáneamente.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerActionMultipleTimesExceptionMessage">
            <summary>
              Busca una cadena localizada similar a No se puede hospedar una instancia de TriggerAction en varios TriggerCollections simultáneamente. Quítela de un TriggerCollection antes de agregarla a otro.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerCollectionMultipleTimesExceptionMessage">
            <summary>
              Busca una cadena localizada similar a No se puede establecer el mismo TriggerCollection en varios objetos.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerMultipleTimesExceptionMessage">
            <summary>
              Busca una cadena localizada similar a No se puede adjuntar una instancia de un desencadenador a más de un objeto simultáneamente.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CommandDoesNotExistOnBehaviorWarningMessage">
            <summary>
              Busca una cadena localizada similar a El comando &quot;{0}&quot; no existe o no se expone públicamente en {1}.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.DefaultTriggerAttributeInvalidTriggerTypeSpecifiedExceptionMessage">
            <summary>
              Busca una cadena localizada similar a &quot;{0}&quot; no es un tipo válido para el parámetro TriggerType. Asegúrese de que &quot;{0}&quot; derive de TriggerBase.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.DuplicateItemInCollectionExceptionMessage">
            <summary>
              Busca una cadena localizada similar a No se puede agregar la misma instancia de &quot;{0}&quot; a un &quot;{1}&quot; más de una vez.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.EventTriggerCannotFindEventNameExceptionMessage">
            <summary>
              Busca una cadena localizada similar a No se puede encontrar un evento con el nombre &quot;{0}&quot; en el tipo &quot;{1}&quot;.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.InvokeActionCommandMustBeHostedOnBehaviorExceptionMessage">
            <summary>
              Busca una cadena localizada similar a InvokeCommandAction debe adjuntarse a un Behavior. Para ello, agréguelo a la colección Actions de un desencadenador en la colección Triggers de un objeto Behavior.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.RetargetedTypeConstraintViolatedExceptionMessage">
            <summary>
              Busca una cadena localizada similar a Un objeto del tipo &quot;{0}&quot; no puede tener una propiedad {3} del tipo &quot;{1}&quot;. Las instancias del tipo &quot;{0}&quot; solo pueden tener una propiedad {3} del tipo &quot;{2}&quot;.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.TypeConstraintViolatedExceptionMessage">
            <summary>
              Busca una cadena localizada similar a No se puede adjuntar el tipo &quot;{0}&quot; al tipo &quot;{1}&quot;. Las instancias del tipo &quot;{0}&quot; solo se pueden adjuntar a objetos del tipo &quot;{2}&quot;.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.UnableToResolveTargetNameWarningMessage">
            <summary>
              Busca una cadena localizada similar a No se puede resolver TargetName &quot;{0}&quot;.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\it\Microsoft.Expression.Effects.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Effects</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Media.Effects.BlindOrientation">
            <summary>
            Determine the orientation of the blinds
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.BlindsTransitionEffect">
            <summary>
            Transition shader that simulates blinds opening when transitioning
            from one visual to another. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.OrientationProperty">
            <summary>
            Gets or sets the orientation of the blinds
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.CountProperty">
            <summary>
            Gets or sets the number of blinds
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.ShaderOrientationProperty">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the BlindsTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of BlindsTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.Orientation">
            <summary>
            Gets or sets orientatio of the blinds.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.Count">
            <summary>
            Gets or sets the number of blinds to display.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.ShaderOrientation">
            <summary>
            Gets or sets orientation of the blinds.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.BloomEffect">
            <summary>
            Effect that implements a bloom illumination of a visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
            
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BloomIntensityProperty">
            <summary>
            This property is mapped to the BloomIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseIntensityProperty">
            <summary>
            This property is mapped to the BaseIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BloomSaturationProperty">
            <summary>
            This property is mapped to the BloomSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseSaturationProperty">
            <summary>
            This property is mapped to the BaseSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomIntensityProperty">
            <summary>
            This property is mapped to the BloomIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomSaturationProperty">
            <summary>
            This property is mapped to the BloomSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.ThresholdProperty">
            <summary>
            This property is mapped to the BaseSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BloomEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.Threshold">
            <summary>
            Gets or sets the minimum intensity that will be used for the bloom
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseIntensity">
            <summary>
            Gets or sets the base intensity
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BloomIntensity">
            <summary>
            Gets or sets the bloom intensity
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseSaturation">
            <summary>
            Gets or sets the base saturation
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BloomSaturation">
            <summary>
            Gets or sets the bloom saturation
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomIntensity">
            <summary>
            Gets or sets the Base/BloomIntensity variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomSaturation">
            <summary>
            Gets or sets the BaseBloomSaturation variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect">
            <summary>
            Transition effect that reveals two visuals through a growing/shrinking circle. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.FeatherAmountProperty">
            <summary>
            Dependency property which modifies the Feather amount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseProperty">
            <summary>
            Dependency property which modifies the circle movement.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseShaderProperty">
            <summary>
            Dependency property which modifies the reverseShader variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the CircleRevealTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of CircleRevealTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.FeatherAmount">
            <summary>
            Gets or sets the FuzzyAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.Reverse">
            <summary>
            Gets or sets playing the circle reveal backward
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseShader">
            <summary>
            Gets or sets playing the circle reveal backward into the shader
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect">
            <summary>
            Transition effect that transitions two visuals using a cloud 
            texture as the sampler threshold.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CloudyTransitionEffect">
            <summary>
            Defines a transition shader effect that uses an image as a sampler threshold
            for interpolating pixel value between two visuals. 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect">
            <summary>
            Defines a transition shader effect that provides a random value
            allowing the effect to provide variance each time the effect is run.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.RandomSeedProperty">
            <summary>
            Dependency property which modifies the RandomSeed variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.#ctor">
            <summary>
            Updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.RandomSeed">
            <summary>
            Gets or sets the RandomSeed variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.CloudImageProperty">
            <summary>
            Dependency property which modifies the CloudImage variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.CloudImage">
            <summary>
            Gets or sets the CloudImage variable within the shader used for sampling. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the CloudRevealTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of CloudRevealTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.ColorToneEffect">
            <summary>
            Effects that modifies the color tone of a visual using
            two colors as the sampling.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.DesaturationProperty">
            <summary>
            This property is mapped to the Desaturation variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.ToneAmountProperty">
            <summary>
            This property is mapped to the Toned variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.LightColorProperty">
            <summary>
            This property is mapped to the LightColor variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.DarkColorProperty">
            <summary>
            This property is mapped to the DarkColor variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.ColorToneEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.Desaturation">
            <summary>
            Gets or sets the Desaturation variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.ToneAmount">
            <summary>
            Gets or sets the Toned variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.LightColor">
            <summary>
            Gets or sets the LightColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.DarkColor">
            <summary>
            Gets or sets the DarkColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.EmbossedEffect">
            <summary>
            Effect that simulates an embossed look to the visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.AmountProperty">
            <summary>
            This property is mapped to the Amount variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.HeightProperty">
            <summary>
            This property is mapped to the Height variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.ColorProperty">
            <summary>
            This property is mapped to the Color variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.EmbossedEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Amount">
            <summary>
            Gets or sets the Amount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Height">
            <summary>
            Gets or sets the Height variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Color">
            <summary>
            Gets or sets the Color variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.FadeTransitionEffect">
            <summary>
            Transition effect that gradually transitions from one visual to another.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.FadeTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.FadeTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the FadeTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of FadeTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MagnifyEffect">
            <summary>
            Effect that simulates a magnifying lens.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.InnerRadiusProperty">
            <summary>
            Gets or sets the InnerRadius variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.OuterRadiusProperty">
            <summary>
            Gets or sets the OuterRadius variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.CenterProperty">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.AmountProperty">
            <summary>
            Gets or sets the amount variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.InputProperty">
            <summary>
            Gets or sets the input used in the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.generalTransform">
            <summary>
            The transform used for this shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.InnerRadius">
            <summary>
            Gets or sets the inner radius variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.OuterRadius">
            <summary>
            Gets or sets the outer radius variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Center">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Amount">
            <summary>
            Gets or sets the ShrinkFactor: 
            The higher the shrink factor the "smaller" the content inside the ellipse will appear. 
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.EffectMapping">
            <summary>
            Gets the EffectMapping.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform">
            <summary>
            The GeneralTransform corrosponding to the Magnify effect.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.biasValue">
            <summary>
            Attempt to transform a point based on the effect.
            </summary>
            <param name="targetPoint">The point to transform.</param>
            <param name="result">The result if available.</param>
            <returns>Return true if successful.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.effect">
            <summary>
            The effect instance.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.IsInverse">
            <summary>
            If the transform is an inverse.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.inverseTransform">
            <summary>
            The transform specific to this Effect.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.#ctor(Microsoft.Expression.Media.Effects.MagnifyEffect)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fx">The source effect.</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.TransformBounds(System.Windows.Rect)">
            <summary>
            This particular effect keeps axis aligned lines axis aligned, so transformation of the rect is just
            transformation of its corner points.
            </summary>
            <param name="rect">The input rect.</param>
            <returns>The output rect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.OutToIn(System.Windows.Point,System.Double,System.Double,System.Windows.Point,System.Double)">
            <summary>
            For the inverse of the shader, we need to find Pin which is the Pixel Ouput, given Pout the texture input (is the reverse of the shader)
            However, the shader algorithm is dependant on the radius of the pixel output from the center, which is a variable that we don't
            have when computing the inverse. We need to perform bisection in order to converge using the equation below
            PHatout = PHat_in*Scalar where
            PHatout = Pout - Pcenter  
            pHatin = Pin -Pcenter
            
            Scalar is dependent on the radius of Pin (which we don't have). 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.InToOut(System.Windows.Point,System.Double,System.Double,System.Windows.Point,System.Double)">
            <summary>
            Given a pixel output (Pin) find the texture input (Pout)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.CreateInstanceCore">
            <summary>
            Creats a new instance.
            </summary>
            <returns>A new instance of this.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.PointIsInCircle(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Determines if a point is within an ellipse.
            </summary>
            <param name="pt">The test point.</param>
            <param name="center">The center point of the ellipse.</param>
            <param name="radius">The radius of the ellipse.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.Inverse">
            <summary>
            Gets the inverse transform.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MonochromeEffect">
             <summary>
            Effect that turns a visual into a monochrom color
             </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MonochromeEffect.ColorProperty">
            <summary>
            Gets or sets the FilterColor variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MonochromeEffect.InputProperty">
            <summary>
            Gets or sets the Input of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MonochromeEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MonochromeEffect.Color">
            <summary>
            Gets or sets the FilterColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MonochromeEffect.Input">
            <summary>
            Gets or sets the input used in the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.PixelateEffect">
            <summary>
            Effect that pixelates a visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.PixelateEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.PixelateEffect.PixelationProperty">
            <summary>
            This property is mapped to the pixelation amount variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.PixelateEffect.Pixelation">
            <summary>
            Gets or sets the amount of pixelation inside the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.PixelateEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.PixelateTransitionEffect">
            <summary>
            Transition effect that increase/decrease pixelation between two visuals.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the PixelateTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of PixelateTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect">
            <summary>
            Transition effects that performs a radial blur of the current visual  as the new visual is introduced.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the RadialBlurTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of RadialBlurTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RippleEffect">
            <summary>
            Effect that simulates water ripples on the visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.CenterProperty">
            <summary>
            Gets or sets the Center variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.MagnitudeProperty">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.FrequencyProperty">
            <summary>
            Gets or sets the Frequency variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.PhaseProperty">
            <summary>
            Gets or sets the Phase variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.InputProperty">
            <summary>
            Gets or sets the input brush used in the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Center">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Magnitude">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Frequency">
            <summary>
            Gets or sets the frequency variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Phase">
            <summary>
            Gets or sets the Phase variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RippleTransitionEffect">
            <summary>
            Transition effect that simulate water ripple during transition. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the RippleTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of RippleTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SharpenEffect">
            <summary>
            Effects that makes a visual more crisp and sharper. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.AmountProperty">
            <summary>
            This property is mapped to the Amount variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.HeightProperty">
            <summary>
            This property is mapped to the Width variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SharpenEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Amount">
            <summary>
            Gets or sets the Amount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Height">
            <summary>
            Gets or sets the Height variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SlideDirection">
            <summary>
            Define the slide orientation
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SlideInTransitionEffect">
            <summary>
            Transition effect that slide the current visual away, revealing the new visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideDirectionProperty">
            <summary>
            Dependency property which modifies the SlideAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideNormalProperty">
            <summary>
            Dependency property which modifies the SlideAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the SlideInTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of SlideInTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideDirection">
            <summary>
            Gets or sets the SlideAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideNormal">
            <summary>
            Gets or sets the SlideAmount variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect">
             <summary>
            Transition effect that swirl the current visual while introducing the new visual.
             </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.TwistAmountProperty">
            <summary>
            Dependency property which modifies the TwistAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.CellCountProperty">
            <summary>
            Dependency property which modifies the number of cell where pixels will be twisted.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.#ctor(System.Double)">
            <summary>
            Creates an instance and sets the shader's twist variable to the specified values.
            </summary>
            <param name="twist">level of swirl twist</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the SmoothSwirlGridTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of SmoothSwirlGridTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.TwistAmount">
            <summary>
            Gets or sets the TwistAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.CellCount">
            <summary>
            Gets or sets the CellCount variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SwirlEffect">
            <summary>
            Effect that swirls the current visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.CenterProperty">
            <summary>
            This property is mapped to the Center variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.TwistAmountProperty">
            <summary>
            This property is mapped to the SwirlStrength variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.AngleFrequencyProperty">
            <summary>
            This property is mapped to the AngleFrequency variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.generalTransform">
            <summary>
            The transform used when this Effect is applied.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.Center">
            <summary>
            Gets or sets the Center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.TwistAmount">
            <summary>
            Gets or sets the SwirlStrength variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.AngleFrequency">
            <summary>
            Gets or sets the AngleFrequency variable within the shader.
            We do not expose this property. 
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.EffectMapping">
            <summary>
            Gets the GeneralTransform for this effect.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform">
            <summary>
            For transforming input and tree transformations.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.theEffect">
            <summary>
            The instance of the Effect.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.thisIsInverse">
            <summary>
            The inverse of the transform.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.inverseTransform">
            <summary>
            The inverse of this GeneralTransform.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.#ctor(Microsoft.Expression.Media.Effects.SwirlEffect)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="eff">The effect itself.</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.TransformBounds(System.Windows.Rect)">
            <summary>
            For this operation, the bounds is the bounding box of the 4 transformed points. 
            Need to transform each of them, and then circumscribe.  This is true for both the 
            forward and the inverse.
            </summary>
            <param name="rect">The input rect.</param>
            <returns>The transformed rect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.TryTransform(System.Windows.Point,System.Windows.Point@)">
            <summary>
            Attempt to transform inPoint with the Swirl effect.
            </summary>
            <param name="targetPoint">The input point.</param>
            <param name="result">The output point after transformed using the Swirl effect.</param>
            <returns>True and throws if false.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.CreateInstanceCore">
            <summary>
            Returns a new instance of this.
            </summary>
            <returns>A new instance.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.Inverse">
            <summary>
            Gets a clone of the inverse of the current transform.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WaveTransitionEffect">
            <summary>
            Transition effect that waves the current visual while introducing the new visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.MagnitudeProperty">
            <summary>
            Dependency property which modifies the Magnitude variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.PhaseProperty">
            <summary>
            Dependency property which modifies the Phase variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.FrequencyProperty">
            <summary>
            Dependency property which modifies the Phase variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WaveTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WaveTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the WaveTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of WaveTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Magnitude">
            <summary>
            Gets or sets the magnitude of the wave
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Phase">
            <summary>
            Gets or sets the phase of the wave
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Frequency">
            <summary>
            Gets or sets the magnitude of the wave
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WipeDirection">
            <summary>
            Define the wipe direction.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WipeTransitionEffect">
            <summary>
            Transition effect that wipes the current visual introducing the new visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.WipeDirectionProperty">
            <summary>
            Dependency property which modifies the preset of the wipe
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.FeatherAmountProperty">
            <summary>
            Dependency property which modifies the FuzzyAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOriginProperty">
            <summary>
            Dependency property which modifies the LineOrigin variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineNormalProperty">
            <summary>
            Dependency property which modifies the LineNormal variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOffsetProperty">
            <summary>
            Dependency property which modifies the LineOffset variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WipeTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WipeTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the WipeTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of WipeTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.WipeDirection">
            <summary>
            Gets or sets the direction of the wipe.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.FeatherAmount">
            <summary>
            Gets or sets the FuzzyAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOrigin">
            <summary>
            Gets or sets the LineOrigin variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineNormal">
            <summary>
            Gets or sets the LineNormal variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOffset">
            <summary>
            Gets or sets the LineOffset variable within the shader.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\it\Microsoft.Expression.Controls.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Controls</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.Initialize">
            <summary>
            Called before we loop over the polylines.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.ShouldBreak(System.Int32)">
            <summary>
            Checks whether or not we should continue looping over the polylines.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnPolylineBegin(Microsoft.Expression.Drawing.Core.PolylineData)">
            <summary>
            Called before we begin marching a new polyline.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnPolylineCompleted(System.Double)">
            <summary>
            Called when we walk off the end of a polyline.
            </summary>
            <param name="remaingLength">The remaining arclength in the polyline.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnStepCompleted(System.Double)">
            <summary>
            Called when we sucessfully complete a step.
            </summary>
            <param name="actualStepDistance">The actual step distance.
            This may be different than Step if we have wrapped to another polyline.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.Distribute(Microsoft.Expression.Controls.PathPanel,System.Int32,System.Int32)">
            <summary>
            Distributes the children of a path panel along a given layout path.
            </summary>
            <param name="pathPanel">The path panel.</param>
            <param name="pathIndex">The index of the path in pathPanel.LayoutPaths.</param>
            <param name="childIndex">The index of the first child to be laid out on this path.</param>
            <returns>The index of the next child to be distributed. If childIndex is returned, this function has done nothing.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.ChildIndex">
            <summary>
            The index of the next child to be arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Span">
            <summary>
            The distance in arclength that we want to use for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Step">
            <summary>
            The distance in arclength to walk along the current polyline.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Capacity">
            <summary>
            The total number of elements to be arranged on the LayoutPath.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.EvenDistributionStrategy">
            <summary>
            Distributes the children of a path panel along a layout path.
            Even distribution means that there is equal arclength between the centers of all
            the elements on the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.ChangedPathLayoutProperties">
            <summary>
            Specifies which path layout properties have changed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs.#ctor(Microsoft.Expression.Controls.ChangedPathLayoutProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs"/> class.
            </summary>
            <param name="changedProperties">The data for the event.</param>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs.ChangedProperties">
            <summary>
            Gets the properties changed in a <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathLayoutData">
            <summary>
            Encapsulates the data needed to update a <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LayoutPathIndex">
            <summary>
            Gets or sets the index of the path on which an element is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.GlobalIndex">
            <summary>
            Gets or sets the index of an element in a collection of elements.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LocalIndex">
            <summary>
            Gets or sets the index of an element on a path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.GlobalOffset">
            <summary>
            Gets or sets the offset of an element proportional to the total length of a collection of paths.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LocalOffset">
            <summary>
            Gets or sets the offset of an element proportional to the length of path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.NormalAngle">
            <summary>
            Gets or sets the angle perpendicular to the path at an element's location.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.OrientationAngle">
            <summary>
            Gets or sets the angle perpendicular to the path at an element's location if the element is oriented to the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.IPathLayoutItem">
            <summary>
            Represents an element that is arranged by a <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </summary>
            <remarks>
            Implementing this interface enables <see cref="T:Microsoft.Expression.Controls.PathPanel"/> to set these properties when the element is arranged.
            This interface is not intended for general implementation.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.IPathLayoutItem.Update(Microsoft.Expression.Controls.PathLayoutData)">
            <summary>
            Updates the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/> properties based on the given <see cref="T:Microsoft.Expression.Controls.PathLayoutData"/> and raises the <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
            <param name="data">The data needed to update the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/>.</param>
        </member>
        <member name="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated">
            <summary>
            Occurs when one or more of the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/> properties change.
            </summary>
            <remarks>
            This event is raised whenever the item’s position along the path is updated. This can occur due to changes in the properties on the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> or changes to <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LayoutPathIndex">
            <summary>
            Gets the index of the path on which the item is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalIndex">
            <summary>
            Gets the index of the item in a collection of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalIndex">
            <summary>
            Gets the index of the item on the path on which it is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalOffset">
            <summary>
            Gets the offset of the item proportional to the total length of a collection of paths.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalOffset">
            <summary>
            Gets the offset of the item proportional to the length of the path on which it is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.NormalAngle">
            <summary>
            Gets the angle perpendicular to the path at the item's location.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.OrientationAngle">
            <summary>
            Gets the angle perpendicular to the path at the items's location if the item is oriented to the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.Distribution">
            <summary>
            Specifies the distribution of a <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.Orientation">
            <summary>
            Specifies the orientation of elements on a <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.FillBehavior">
            <summary>
            Specifies the method for altering the <see cref="P:Microsoft.Expression.Controls.LayoutPath.Span"/> on an open path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.LayoutPath">
            <summary>
            Describes a path along which elements are arranged.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Controls.LayoutPath.transformedPolylines">
            <summary>
            Ideally, we want to cache the Bezier curves before flattening, because transform will affect flattening.
            That requires us to cache curves that we don't support very well yet.  Instead, we cache the flatten points
            in distribution strategy and transform them on demand.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.SourceElement">
            <summary>
            Gets or sets the element that defines the path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Distribution">
            <summary>
            Gets or sets whether items are laid out evenly or with a fixed padding.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Capacity">
            <summary>
            Gets or sets the maximum number of items displayed on the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Padding">
            <summary>
            Gets or sets the distance in pixels along the arc length of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> between two items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Orientation">
            <summary>
            Gets or sets the orientation of the items.
            </summary>
            <remarks>
            This property is supported on <see cref="T:Microsoft.Expression.Controls.PathListBox"/>, but not <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Start">
            <summary>
            Gets or sets the distance from the start of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> to place the first item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Span">
            <summary>
            Gets or sets the percentage of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> that participates in layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.FillBehavior">
            <summary>
            Gets or set the method to alter <see cref="P:Microsoft.Expression.Controls.LayoutPath.Span"/> on an open path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.ActualCapacity">
            <summary>
            Gets the computed Capacity.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.IsValid">
            <summary>
            Gets whether or not the <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/> is valid in the context.
            A <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/> is invalid if it is a descendant of the <see cref="T:Microsoft.Expression.Controls.PathPanel"/> in which it used.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PaddedDistributionStrategy">
            <summary>
            Distributes the children of a layout path based on the size of the children and a given padding between the children.
            The distance in arclength between children is determined by the padding plus the sum of the radii of the children's bounding boxes.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathListBox">
            <summary>
            Contains a list of items that are laid out along one or more paths.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathListBox"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.GetContainerForItemOverride">
            <summary>
            Creates the element used to display a specified item.
            </summary>
            <returns>A <see cref="T:Microsoft.Expression.Controls.PathListBoxItem"/> corresponding to a specified item.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own item container.
            </summary>
            <returns>true if the item is its own item container; otherwise, false.</returns>
            <param name="item">The specified item.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements.
            </summary>
            <param name="finalSize">The size that this object should use to arrange its child elements.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.LayoutPaths">
            <summary>
            Gets or sets a collection of objects that define the path(s) used for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.StartItemIndex">
            <summary>
            Gets or sets the index to use within the list of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.WrapItems">
            <summary>
            Gets or sets whether the item index wraps to the beginning of the collection when StartItemIndex is greater than 0.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathListBoxItem">
            <summary>
            Represents an item in a <see cref="T:Microsoft.Expression.Controls.PathListBox"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBoxItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathListBoxItem"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBoxItem.Update(Microsoft.Expression.Controls.PathLayoutData)">
            <summary>
            For a description of this member, see <see cref="M:Microsoft.Expression.Controls.IPathLayoutItem.Update(Microsoft.Expression.Controls.PathLayoutData)"/>.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.PathListBoxItem.PathLayoutUpdated">
            <summary>
            For a description of this member, see <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LayoutPathIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LayoutPathIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.GlobalIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LocalIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.GlobalOffset">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalOffset"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LocalOffset">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalOffset"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.NormalAngle">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.NormalAngle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.OrientationAngle">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.OrientationAngle"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathPanel">
            <summary>
            Arranges child elements along one or more path.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Expression.Controls.PathPanel"/> can be used as an alternative to <see cref="T:Microsoft.Expression.Controls.PathListBox"/> when selection is not necessary.
            The <see cref="P:Microsoft.Expression.Controls.LayoutPath.Orientation"/> property is not supported on <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathPanel"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the size required for child elements.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. </param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements.
            </summary>
            <param name="finalSize">The size that this object should use to arrange its child elements.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.ArrangeChild(System.Int32,System.Int32,Microsoft.Expression.Drawing.Core.PolylineData,Microsoft.Expression.Drawing.Core.MarchLocation,System.Int32)">
            <summary>
            Arranges the child at the given index at a particular location on a LayoutPath.
            </summary>
            <param name="indirectIndex">An index from the range 0 to PathPanel.Count.</param>
            <param name="pathIndex">The index of the layout path on which to arrange the child.</param>
            <param name="polyline">The polyline in the layout path.</param>
            <param name="location">The location on the polyline.</param>
            <param name="localIndex">The index of the child on the LayoutPath.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.GetChildRadius(System.Int32)">
            <summary>
            Calculates the radius of the bounding circle for the child at the given index.
            </summary>
            <param name="indirectIndex">An index from the range 0 to PathPanel.Count.</param>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.LayoutPaths">
            <summary>
            Gets or sets a collection of objects that define the path(s) used for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.StartItemIndex">
            <summary>
            Gets or sets the index to use within the list of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.WrapItems">
            <summary>
            Gets or sets whether the item index wraps to the beginning of the collection when StartItemIndex is greater than 0.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.ValidPaths">
            <summary>
            The subset of LayoutPaths that are attached and not Collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.Count">
            <summary>
            Count is the number of Children that the PathPanel will layout.
            If StartItemIndex > 0 and WrapItems is false, this can be less than PathPanel.Children.Count
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetItemsHost(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the Panel that contains the containers of an ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>
            The Panel that contains the containers of an ItemsControl, or null
            if the Panel could not be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.TraverseBreadthFirst``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Traverses a tree by accepting an initial value and a function that 
            retrieves the child nodes of a node.
            </summary>
            <typeparam name="T">The type of the stream.</typeparam>
            <param name="initialNode">The initial node.</param>
            <param name="getChildNodes">A function that retrieves the child
            nodes of a node.</param>
            <param name="traversePredicate">A predicate that evaluates a node
            and returns a value indicating whether that node and it's children
            should be traversed.</param>
            <returns>A stream of nodes.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetVisualChildrenAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree children of an element and the element itself.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetLogicalChildren(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical children of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetLogicalDescendents(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical descendents of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\ja\Microsoft.Expression.Controls.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Controls</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.Initialize">
            <summary>
            Called before we loop over the polylines.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.ShouldBreak(System.Int32)">
            <summary>
            Checks whether or not we should continue looping over the polylines.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnPolylineBegin(Microsoft.Expression.Drawing.Core.PolylineData)">
            <summary>
            Called before we begin marching a new polyline.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnPolylineCompleted(System.Double)">
            <summary>
            Called when we walk off the end of a polyline.
            </summary>
            <param name="remaingLength">The remaining arclength in the polyline.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnStepCompleted(System.Double)">
            <summary>
            Called when we sucessfully complete a step.
            </summary>
            <param name="actualStepDistance">The actual step distance.
            This may be different than Step if we have wrapped to another polyline.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.Distribute(Microsoft.Expression.Controls.PathPanel,System.Int32,System.Int32)">
            <summary>
            Distributes the children of a path panel along a given layout path.
            </summary>
            <param name="pathPanel">The path panel.</param>
            <param name="pathIndex">The index of the path in pathPanel.LayoutPaths.</param>
            <param name="childIndex">The index of the first child to be laid out on this path.</param>
            <returns>The index of the next child to be distributed. If childIndex is returned, this function has done nothing.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.ChildIndex">
            <summary>
            The index of the next child to be arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Span">
            <summary>
            The distance in arclength that we want to use for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Step">
            <summary>
            The distance in arclength to walk along the current polyline.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Capacity">
            <summary>
            The total number of elements to be arranged on the LayoutPath.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.EvenDistributionStrategy">
            <summary>
            Distributes the children of a path panel along a layout path.
            Even distribution means that there is equal arclength between the centers of all
            the elements on the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.ChangedPathLayoutProperties">
            <summary>
            Specifies which path layout properties have changed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs.#ctor(Microsoft.Expression.Controls.ChangedPathLayoutProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs"/> class.
            </summary>
            <param name="changedProperties">The data for the event.</param>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs.ChangedProperties">
            <summary>
            Gets the properties changed in a <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathLayoutData">
            <summary>
            Encapsulates the data needed to update a <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LayoutPathIndex">
            <summary>
            Gets or sets the index of the path on which an element is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.GlobalIndex">
            <summary>
            Gets or sets the index of an element in a collection of elements.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LocalIndex">
            <summary>
            Gets or sets the index of an element on a path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.GlobalOffset">
            <summary>
            Gets or sets the offset of an element proportional to the total length of a collection of paths.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LocalOffset">
            <summary>
            Gets or sets the offset of an element proportional to the length of path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.NormalAngle">
            <summary>
            Gets or sets the angle perpendicular to the path at an element's location.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.OrientationAngle">
            <summary>
            Gets or sets the angle perpendicular to the path at an element's location if the element is oriented to the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.IPathLayoutItem">
            <summary>
            Represents an element that is arranged by a <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </summary>
            <remarks>
            Implementing this interface enables <see cref="T:Microsoft.Expression.Controls.PathPanel"/> to set these properties when the element is arranged.
            This interface is not intended for general implementation.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.IPathLayoutItem.Update(Microsoft.Expression.Controls.PathLayoutData)">
            <summary>
            Updates the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/> properties based on the given <see cref="T:Microsoft.Expression.Controls.PathLayoutData"/> and raises the <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
            <param name="data">The data needed to update the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/>.</param>
        </member>
        <member name="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated">
            <summary>
            Occurs when one or more of the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/> properties change.
            </summary>
            <remarks>
            This event is raised whenever the item’s position along the path is updated. This can occur due to changes in the properties on the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> or changes to <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LayoutPathIndex">
            <summary>
            Gets the index of the path on which the item is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalIndex">
            <summary>
            Gets the index of the item in a collection of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalIndex">
            <summary>
            Gets the index of the item on the path on which it is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalOffset">
            <summary>
            Gets the offset of the item proportional to the total length of a collection of paths.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalOffset">
            <summary>
            Gets the offset of the item proportional to the length of the path on which it is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.NormalAngle">
            <summary>
            Gets the angle perpendicular to the path at the item's location.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.OrientationAngle">
            <summary>
            Gets the angle perpendicular to the path at the items's location if the item is oriented to the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.Distribution">
            <summary>
            Specifies the distribution of a <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.Orientation">
            <summary>
            Specifies the orientation of elements on a <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.FillBehavior">
            <summary>
            Specifies the method for altering the <see cref="P:Microsoft.Expression.Controls.LayoutPath.Span"/> on an open path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.LayoutPath">
            <summary>
            Describes a path along which elements are arranged.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Controls.LayoutPath.transformedPolylines">
            <summary>
            Ideally, we want to cache the Bezier curves before flattening, because transform will affect flattening.
            That requires us to cache curves that we don't support very well yet.  Instead, we cache the flatten points
            in distribution strategy and transform them on demand.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.SourceElement">
            <summary>
            Gets or sets the element that defines the path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Distribution">
            <summary>
            Gets or sets whether items are laid out evenly or with a fixed padding.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Capacity">
            <summary>
            Gets or sets the maximum number of items displayed on the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Padding">
            <summary>
            Gets or sets the distance in pixels along the arc length of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> between two items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Orientation">
            <summary>
            Gets or sets the orientation of the items.
            </summary>
            <remarks>
            This property is supported on <see cref="T:Microsoft.Expression.Controls.PathListBox"/>, but not <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Start">
            <summary>
            Gets or sets the distance from the start of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> to place the first item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Span">
            <summary>
            Gets or sets the percentage of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> that participates in layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.FillBehavior">
            <summary>
            Gets or set the method to alter <see cref="P:Microsoft.Expression.Controls.LayoutPath.Span"/> on an open path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.ActualCapacity">
            <summary>
            Gets the computed Capacity.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.IsValid">
            <summary>
            Gets whether or not the <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/> is valid in the context.
            A <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/> is invalid if it is a descendant of the <see cref="T:Microsoft.Expression.Controls.PathPanel"/> in which it used.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PaddedDistributionStrategy">
            <summary>
            Distributes the children of a layout path based on the size of the children and a given padding between the children.
            The distance in arclength between children is determined by the padding plus the sum of the radii of the children's bounding boxes.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathListBox">
            <summary>
            Contains a list of items that are laid out along one or more paths.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathListBox"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.GetContainerForItemOverride">
            <summary>
            Creates the element used to display a specified item.
            </summary>
            <returns>A <see cref="T:Microsoft.Expression.Controls.PathListBoxItem"/> corresponding to a specified item.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own item container.
            </summary>
            <returns>true if the item is its own item container; otherwise, false.</returns>
            <param name="item">The specified item.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements.
            </summary>
            <param name="finalSize">The size that this object should use to arrange its child elements.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.LayoutPaths">
            <summary>
            Gets or sets a collection of objects that define the path(s) used for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.StartItemIndex">
            <summary>
            Gets or sets the index to use within the list of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.WrapItems">
            <summary>
            Gets or sets whether the item index wraps to the beginning of the collection when StartItemIndex is greater than 0.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathListBoxItem">
            <summary>
            Represents an item in a <see cref="T:Microsoft.Expression.Controls.PathListBox"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBoxItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathListBoxItem"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBoxItem.Update(Microsoft.Expression.Controls.PathLayoutData)">
            <summary>
            For a description of this member, see <see cref="M:Microsoft.Expression.Controls.IPathLayoutItem.Update(Microsoft.Expression.Controls.PathLayoutData)"/>.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.PathListBoxItem.PathLayoutUpdated">
            <summary>
            For a description of this member, see <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LayoutPathIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LayoutPathIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.GlobalIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LocalIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.GlobalOffset">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalOffset"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LocalOffset">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalOffset"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.NormalAngle">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.NormalAngle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.OrientationAngle">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.OrientationAngle"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathPanel">
            <summary>
            Arranges child elements along one or more path.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Expression.Controls.PathPanel"/> can be used as an alternative to <see cref="T:Microsoft.Expression.Controls.PathListBox"/> when selection is not necessary.
            The <see cref="P:Microsoft.Expression.Controls.LayoutPath.Orientation"/> property is not supported on <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathPanel"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the size required for child elements.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. </param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements.
            </summary>
            <param name="finalSize">The size that this object should use to arrange its child elements.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.ArrangeChild(System.Int32,System.Int32,Microsoft.Expression.Drawing.Core.PolylineData,Microsoft.Expression.Drawing.Core.MarchLocation,System.Int32)">
            <summary>
            Arranges the child at the given index at a particular location on a LayoutPath.
            </summary>
            <param name="indirectIndex">An index from the range 0 to PathPanel.Count.</param>
            <param name="pathIndex">The index of the layout path on which to arrange the child.</param>
            <param name="polyline">The polyline in the layout path.</param>
            <param name="location">The location on the polyline.</param>
            <param name="localIndex">The index of the child on the LayoutPath.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.GetChildRadius(System.Int32)">
            <summary>
            Calculates the radius of the bounding circle for the child at the given index.
            </summary>
            <param name="indirectIndex">An index from the range 0 to PathPanel.Count.</param>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.LayoutPaths">
            <summary>
            Gets or sets a collection of objects that define the path(s) used for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.StartItemIndex">
            <summary>
            Gets or sets the index to use within the list of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.WrapItems">
            <summary>
            Gets or sets whether the item index wraps to the beginning of the collection when StartItemIndex is greater than 0.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.ValidPaths">
            <summary>
            The subset of LayoutPaths that are attached and not Collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.Count">
            <summary>
            Count is the number of Children that the PathPanel will layout.
            If StartItemIndex > 0 and WrapItems is false, this can be less than PathPanel.Children.Count
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetItemsHost(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the Panel that contains the containers of an ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>
            The Panel that contains the containers of an ItemsControl, or null
            if the Panel could not be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.TraverseBreadthFirst``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Traverses a tree by accepting an initial value and a function that 
            retrieves the child nodes of a node.
            </summary>
            <typeparam name="T">The type of the stream.</typeparam>
            <param name="initialNode">The initial node.</param>
            <param name="getChildNodes">A function that retrieves the child
            nodes of a node.</param>
            <param name="traversePredicate">A predicate that evaluates a node
            and returns a value indicating whether that node and it's children
            should be traversed.</param>
            <returns>A stream of nodes.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetVisualChildrenAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree children of an element and the element itself.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetLogicalChildren(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical children of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetLogicalDescendents(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical descendents of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\it\Microsoft.Expression.Drawing.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Drawing</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Controls.Callout">
            <summary>
            Renders a callout shape supporting several shapes combined with a callout arrow.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.CompositeContentShape">
             <summary>
             Provides a base class of a composite shape that derives from <see cref="T:System.Windows.Controls.ContentControl"/> and implements <see cref="T:Microsoft.Expression.Media.IShape"/>.
             </summary>
             <remarks>
             <see cref="T:Microsoft.Expression.Controls.CompositeContentShape"/> implements <see cref="T:Microsoft.Expression.Media.IShape"/> interface,
             and supports rendering a geometry similar to <see cref="T:System.Windows.Shapes.Shape"/>, but the geometry can be rendered outside of layout boundary.
             
             A typical implementation will have a customized default template in generic.xaml which template-binds most shape properties to a <see cref="T:System.Windows.Shapes.Path"/>.
             It should also extend the <see cref="P:GeometrySource"/> property to customize the appearance of the <see cref="T:System.Windows.Shapes.Path"/>.
            
             This class also supports showing content together with the shape.
             </remarks>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySourceParameters">
            <summary>
            Provides an interface to discribe the parameters of a Shape.
            </summary>
            <remarks>
            This interface is the data for communication between Shape and GeometrySource.
            Typically a concrete implementation of IShape will implements this interface and pass it into
            GeometrySource.UpdateGeometry(), who will consume the shape as readonly data provider.
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Media.IShape">
            <summary>
            Provides the necessary interface to define a Shape.
            Both primitive and composite shapes need to match this interface, although they might derive from different type of FrameworkElement.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.IShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Fill">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how to paint the interior of the shape.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that describes how the shape's interior is painted. The default is null. See Remarks.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values. The default value at run time depends on the type of <see cref="T:System.Windows.Shapes.Shape" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.RenderedGeometry">
            <summary>
            Gets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.GeometryMargin">
            <summary>
            Gets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Media.IShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.CreateGeometrySource">
            <summary>
            Extends how the shape is drawn with creating geometry source.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Controls.CompositeContentShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.OnContentChanged(System.Object,System.Object)">
            <summary>
            Transforms a string content into <see cref="T:TextBlock"/> with center alignment and mulitple line support.
            </summary>
            <remarks>
            Use template binding to <see cref="P:Microsoft.Expression.Controls.CompositeContentShape.InternalContent"/> instead of <see cref="P:Content"/> to enable this method.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that specifies how to paint the interior of the shape.
            </summary>
            <returns>A <see cref="T:System.Windows.Media.Brush"/> that describes how the shape's interior is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeStartLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. </summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineCap" /> enumeration that specifies the shape at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeEndLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the end of a line. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeLineJoin">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:System.Windows.Shapes.Shape" />.</summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration that specifies the join appearance. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeMiterLimit">
            <summary>Gets or sets a limit on the ratio of the miter length to half the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. </summary>
            <returns>The limit on the ratio of the miter length to the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. This value is always a positive number that is greater than or equal to 1.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashArray">
            <summary>Gets or sets a collection of <see cref="T:System.Double" /> values that indicate the pattern of dashes and gaps that is used to outline shapes. </summary>
            <returns>A collection of <see cref="T:System.Double" /> values that specify the pattern of dashes and gaps. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that specifies how the ends of a dash are drawn. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashOffset">
            <summary>Gets or sets a <see cref="T:System.Double" /> that specifies the distance within the dash pattern where a dash begins.</summary>
            <returns>A <see cref="T:System.Double" /> that represents the distance within the dash pattern where a dash begins. The default value is 0.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.RenderedGeometry">
            <summary>
            Gets or sets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.GeometryMargin">
            <summary>
            Gets or sets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.InternalContent">
            <summary>
            Gets or sets the internal content that converts string into center aligned multiple line textblock.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.CompositeContentShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.Callout.AnchorPoint">
            <summary>
            Gets or sets the position of the callout relative to the top and left corner.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.Callout.CalloutStyle">
            <summary>
            Gets or sets the callout style.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.CompositeShape">
            <summary>
            Provides a base class of a composite shape that derives from <see cref="T:System.Windows.Controls.Control"/> and implements <see cref="T:Microsoft.Expression.Media.IShape"/>.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Expression.Controls.CompositeShape"/> implements <see cref="T:Microsoft.Expression.Media.IShape"/> interface,
            and supports rendering a geometry similar to <see cref="T:System.Windows.Shapes.Shape"/>, but the geometry can be rendered outside of layout boundary.
            
            A typical implementation will have a customized default template in generic.xaml which template-binds most shape properties to a <see cref="T:System.Windows.Shapes.Path"/>.
            It should also extend the <see cref="P:GeometrySource"/> property to customize the appearance of the <see cref="T:System.Windows.Shapes.Path"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.CreateGeometrySource">
            <summary>
            Extends how the shape is drawn with creating geometry source.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Controls.CompositeShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that specifies how to paint the interior of the shape.
            </summary>
            <returns>A <see cref="T:System.Windows.Media.Brush"/> that describes how the shape's interior is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeStartLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. </summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineCap" /> enumeration that specifies the shape at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeEndLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the end of a line. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeLineJoin">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:System.Windows.Shapes.Shape" />.</summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration that specifies the join appearance. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeMiterLimit">
            <summary>Gets or sets a limit on the ratio of the miter length to half the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. </summary>
            <returns>The limit on the ratio of the miter length to the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. This value is always a positive number that is greater than or equal to 1.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashArray">
            <summary>Gets or sets a collection of <see cref="T:System.Double" /> values that indicate the pattern of dashes and gaps that is used to outline shapes. </summary>
            <returns>A collection of <see cref="T:System.Double" /> values that specify the pattern of dashes and gaps. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that specifies how the ends of a dash are drawn. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashOffset">
            <summary>Gets or sets a <see cref="T:System.Double" /> that specifies the distance within the dash pattern where a dash begins.</summary>
            <returns>A <see cref="T:System.Double" /> that represents the distance within the dash pattern where a dash begins. The default value is 0.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.RenderedGeometry">
            <summary>
            Gets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.GeometryMargin">
            <summary>
            Gets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.CompositeShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.LineArrow">
            <summary>
            Renders a bended line segment with optional arrowhead on both end.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.LineArrow.MeasureOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
            <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes, or possibly on other considerations such as fixed container size.</returns>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <remarks>
            A default <see cref="T:LineArrow"/> can render at anysize.
            The <see cref="P:RenderedGeometry"/> will stretch to layout boundary and render to outside if necessary.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.BendAmount">
            <summary>
            Gets or sets the amount of bend for the arrow.
            </summary>
            <value>The bend amount between 0 to 1.</value>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.StartArrow">
            <summary>
            Gets or sets how the arrow head is rendered at the start of the line.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.EndArrow">
            <summary>
            Gets or sets how the arrow head is rendered at the end of the line.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.StartCorner">
            <summary>
            Gets or sets from which corner to start drawing the arrow.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.ArrowSize">
            <summary>
            Gets or sets the length of the arrow in pixels.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PanningItems">
            <summary>
            Provides an items control that displays one selected item, and allows panning between items using touch gestures.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PanningItems.#ctor">
            <summary>
            The constructor for PanningItems.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PanningItems.OnApplyTemplate">
            <summary>
            Called when the PanningItems template is applied.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.ScrollDirection">
            <summary>
            Gets or sets the orientation of items in the control.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.FlickTolerance">
            <summary>
            Gets or sets the flick tolerance.  This can be a value between 0 and 1.  
            It represents the percentage of the size of the PanningItems needed to be covered by the flick gesture to trigger an items change.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.PreviousItem">
            <summary>
            Gets or sets the item before the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.NextItem">
            <summary>
            Gets or sets the item after the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.LoopContents">
            <summary>
            Gets or sets whether the contents of the items control will loop, so that the first item will follow the last item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.SliderValue">
            <summary>
            Gets or sets the value of the slider controlling the panning motion.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathGeometryHelper">
            <summary>
            Helper class to work with PathGeometry
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.ConvertToPathGeometry(System.String)">
            <summary>
            Converts a string in the path mini-langauge into a PathGeometry.
            </summary>
            <param name="abbreviatedGeometry">A string in the path mini-langauge.</param>
            <remarks>
            Algorithm is modified from WPF: MS.Internal.Parsers.ParseStringToStreamGeometryContext.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.AsPathGeometry(System.Windows.Media.Geometry)">
            <summary>
            Convert the given geometry into a single PathGeometry.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.SyncPolylineGeometry(System.Windows.Media.Geometry@,System.Collections.Generic.IList{System.Windows.Point},System.Boolean)">
            <summary>
            Update the given geometry as PathGeometry with polyline matching given point list.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathGeometryHelper.AbbreviatedGeometryParser">
            <summary>
            Parses abbreviated geometry sytax.
            </summary>
            <remarks>
            The algorithm is modified from WPF: MS.Internal.AbbreviatedGeometryParser
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathSegmentHelper">
            <summary>
            Helper class to Convert ArcSegment to BezierSegment(s)
            </summary>
            <summary>
            Helper class to work with PathSegment and all variations.
            </summary>
            <summary>
            Strategy classes to handle different types of PathSegment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierSegments(System.Windows.Media.ArcSegment,System.Windows.Point)">
            <summary>
            Convert an Arc segment into Bezier format
            Return BezierSegment, PolyBezierSegment, LineSegment, or null
            When returning null, the Arc degenerated into start point.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SetIsStroked(System.Windows.Media.PathSegment,System.Boolean)">
            <summary>
            Avoid calling the three-parameter constructor, since it always sets a local value for IsStroked.
            </summary>
            <param name="segment"></param>
            <param name="isStroked"></param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SyncPolylineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Collections.Generic.IList{System.Windows.Point},System.Int32,System.Int32)">
            <summary>
            Update the SegmentCollection with given polyline matching given point list.
            Try to keep changes minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SyncPolyBezierSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Collections.Generic.IList{System.Windows.Point},System.Int32,System.Int32)">
            <summary>
            Update the collection[index] segment with poly bezier segment matching given point list.
            givne point list must contain 3*N points for N Bezier segments.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.IsEmpty(System.Windows.Media.PathSegment)">
            <summary>
            Test if given path segment is empty.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetPointCount(System.Windows.Media.PathSegment)">
            <summary>
            Get the point count in given path segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetLastPoint(System.Windows.Media.PathSegment)">
            <summary>
            Get the last point of given path segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetPoint(System.Windows.Media.PathSegment,System.Int32)">
            <summary>
            Get the point of given index in given segment.
            If input is (-1), return the last point.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.FlattenSegment(System.Windows.Media.PathSegment,System.Collections.Generic.IList{System.Windows.Point},System.Windows.Point,System.Double)">
            <summary>
            Flatten given segment and add result points into given point list.
            </summary>
            <param name="segment">The segment to be flatten</param>
            <param name="points">The result point list</param>
            <param name="start">The start point of the segment</param>
            <param name="tolerance">The error tolerance. Must be possitive. Can be 0, fallback to default tolerance.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.ArcToBezier(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Double,System.Double,System.Windows.Point[]@,System.Int32@)">
            <summary>
            ArcToBezier, Compute the Bezier approximation of an arc
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            </summary>
            <remarks>
            This utility computes the Bezier approximation for an elliptical arc as
            it is defined in the SVG arc spec. The ellipse from which the arc is
            carved is axis-aligned in its own coordinates, and defined there by its
            x and y radii. The rotation angle defines how the ellipse's axes are
            rotated relative to our x axis. The start and end points define one of 4
            possible arcs; the sweep and large-arc flags determine which one of
            these arcs will be chosen. See SVG spec for details.
            
            Returning cPieces = 0 indicates a line instead of an arc
                      cPieces = -1 indicates that the arc degenerates to a point 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.GetArcAngle(System.Windows.Point,System.Windows.Point,System.Boolean,System.Boolean,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Get the number of Bezier arcs, and sine/cosine of each.
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            </summary>
            <remarks>
            This is a private utility used by ArcToBezier.  We break the arc into
            pieces so that no piece will span more than 90 degrees.  The input
            points are on the unit circle.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.GetBezierDistance(System.Double,System.Double)">
             <summary>
             GetBezierDistance, return the distance as a fraction of the radius
             Adopted from MIL:Graphics\core\geometry\utils.cpp
             </summary>
            <remarks>
                  Get the distance from a circular arc's endpoints to the control points
                  of the Bezier arc that approximates it, as a fraction of the arc's
                  radius.
            
                  Since the result is relative to the arc's radius, it depends strictly on
                  the arc's angle. The arc is assumed to be of 90 degrees of less, so the
                  angle is determined by the cosine of that angle, which is derived from
                  rDot = the dot product of two radius vectors.  We need the Bezier curve
                  that agrees with the arc's points and tangents at the ends and midpoint. 
                  Here we compute the distance from the curve's endpoints to its control
                  points.
            
                  Since we are looking for the relative distance, we can work on the unit
                  circle. Place the center of the circle at the origin, and put the X axis
                  as the bisector between the 2 vectors.  Let a be the angle between the
                  vectors.  Then the X coordinates of the 1st and last points are cos(a/2). 
                  Let x be the X coordinate of the 2nd and 3rd points.  At t=1/2 we have a
                  point at (1,0). But the terms of the polynomial there are all equal:
            
                            (1-t)^3 = t*(1-t)^2 = t^2*(1-t) = t^3 = 1/8,
            
                  so from the Bezier formula there we have:
            
                            1 = (1/8) * (cos(a/2) + 3x + 3x + cos(a/2)), 
            
                  hence
            
                            x = (4 - cos(a/2)) / 3
            
                  The X difference between that and the 1st point is:
                  
                            DX = x - cos(a/2) = 4(1 - cos(a/2)) / 3.
            
                  But DX = distance / sin(a/2), hence the distance is
            
                            dist = (4/3)*(1 - cos(a/2)) / sin(a/2).
            
                  Rather than the angle a, we are given rDot = R^2 * cos(a), so we
                  multiply top and bottom by R:
             
                            dist = (4/3)*(R - Rcos(a/2)) / Rsin(a/2)
             
                  and use some trig:
                                           ________________
                            cos(a/2)   = \/(1 + cos(a)) / 2
                                           ______________________
                            R*cos(a/2) = \/(R^2 + R^2 cos(a)) / 2 
                                           ________________
                                       = \/(R^2 + rDot) / 2
            
                  Let A = (R^2 + rDot)/2.
                                           ____________________
                            R*sin(a/2) = \/R^2 - R^2 cos^2(a/2)
                                           _______
                                       = \/R^2 - A
            
                  so:
                                                      _
                                         4      R - \/A
                                  dist = - * ------------
                                         3      _______
                                              \/R^2 - A
            
              History:
                  5/29/2001 MichKa
                      Created it.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.AcceptRadius(System.Double,System.Double,System.Double@)">
            <summary>
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            Return false if the radius is too small compared to the chord length (returns true on NaNs)
            radius is modified to the value that's accepted.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.BezierCurveFlattener">
            <summary>
            A utility class to flatten Bezier curves.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.BezierCurveFlattener.FlattenCubic(System.Windows.Point[],System.Double,System.Collections.Generic.ICollection{System.Windows.Point},System.Boolean,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Flattens a Bezier cubic curve and adds the result polyline to the third parameter.
            </summary>
            <param name="controlPoints">The 4 Bezier cubic control points.</param>
            <param name="errorTolerance">The maximum distance between two corresponding points on the true curve 
            and on the flattened polyline. Must be strictly positive.</param>
            <param name="resultPolyline">Where to add the flattened polyline.</param>
            <param name="skipFirstPoint">True to skip the first control point when adding the flattened polyline.
            <param name="resultParameters">Where to add the value of the Bezier curve parameter associated to 
            each of the polyline vertices</param> 
            If <paramref name="resultPolyline"/> is empty, the first control point 
            and its associated parameter are always added.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.BezierCurveFlattener.FlattenQuadratic(System.Windows.Point[],System.Double,System.Collections.Generic.ICollection{System.Windows.Point},System.Boolean,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Flattens a Bezier quadratic curve and adds the result polyline to the third parameter.
            We use degree elevation for Bezier curves to reuse the code for the cubic case.
            </summary>
            <param name="controlPoints">The 3 Bezier quadratic control points.</param>
            <param name="errorTolerance">The maximum distance between two corresponding points on the true curve 
            and on the flattened polyline. Must be strictly positive.</param>
            <param name="resultPolyline">Where to add the flattened polyline.</param>
            <param name="skipFirstPoint">Whether to skip the first control point when adding the flattened polyline. 
            <param name="resultParameters">Where to add the value of the Bezier curve parameter associated to
            each of the polyline vertices</param>
            If <paramref name="resultPolyline"/> is empty, the first control point and 
            its associated parameter are always added.</param>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.CommonExtensions">
            <summary>
            Extension methods supporting non-geometry types
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence with the index of each item.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.EnsureListCount``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Ensure the count of list to given count.  Create default(T) or remove items when necessary.
            If Input IList is a List, AddRange or RemoveRange is used.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.EnsureListCount``1(System.Collections.Generic.IList{``0},System.Int32,System.Func{``0})">
            <summary>
            Ensure the count of list to given count.  Create with given fatory or remove items when necessary.
            If Input IList is a List, AddRange or RemoveRange is used when there's no factory.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a range of items to the end of a collection.
            If collection is list, List.AddRange is used.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.Last``1(System.Collections.Generic.IList{``0})">
            <summary>
            Get the last item of given list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.RemoveLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove the last item from the given list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.DeepCopy``1(``0)">
            <summary>
            Make a copy of obj and all it's public properties, including all collection properties.
            Possible perf optimization: this is used only for Transform and Geometry.
            We should develope a copier for them instead of using reflection.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.SetIfDifferent(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object)">
            <summary>
            Set the value if different.  Avoid setting local value if possible.
            return true when the value has been changed
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ClearIfSet(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Clears the dependency property when it is locally set on the given dependency object.
            Return false if the dependeny property is not locally set.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.FindVisualDesendent``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean})">
            <summary>
            Find all visual desendent of given type and condition using breath first search.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get all visual children in IEnumerable
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.DrawingPropertyMetadata">
            <summary>
            Unify the interface of PropertyMetadata in WPF and Silverlight.
            Providing the necessary notification about render, arrange or measure.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.#ctor(Microsoft.Expression.Media.DrawingPropertyMetadataOptions,System.Object)">
            <summary>
            This private Ctor should only be used by AttachCallback.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.AttachCallback(System.Object,Microsoft.Expression.Media.DrawingPropertyMetadataOptions,System.Windows.PropertyChangedCallback)">
            <summary>
            Chain InternalCallback() to attach the instance of DrawingPropertyMetadata on property callback.
            In Silverlight4-, the property metadata is thrown away after setting. Use callback to remember it.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.InternalCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Before chaining the original callback, trigger DrawingPropertyChangedEvent
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.GeometryHelper">
            <summary>
            Extension methods for Geometry related data structures (Point/Vector/Size/Rect)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Resize(System.Windows.Rect,System.Double)">
            <summary>
            Resize the rectangle to relative size while keeping center invariant.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Subtract(System.Windows.Point,System.Windows.Point)">
            <summary>
            Get the difference Vector between two Points
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Plus(System.Windows.Point,System.Windows.Point)">
            <summary>
            Memberwise plus for Point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Minus(System.Windows.Point,System.Windows.Point)">
            <summary>
            Memberwise minus for Point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.ConvertToPathGeometry(System.String)">
            <summary>
            Converts a string of mini-languages to a <see cref="T:PathGeometry"/>.
            </summary>
            <remarks>See: Path Markup Syntax(http://msdn.microsoft.com/en-us/library/cc189041(VS.95).aspx)</remarks>
            <param name="abbreviatedGeometry">The string of path mini-languages for describing geometric paths.</param>
            <returns>A <see cref="T:PathGeometry"/> converted from the the path mini-languages/></returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.FlattenFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Double)">
            <summary>
            Flattens a <see cref="T:PathFigure"/> and adds result points to given <paramref name="points"/>.
            </summary>
            <param name="figure">The input <see cref="T:PathFigure"/>.</param>
            <param name="points">The point list to which result points will append.</param>
            <param name="tolerance">A positive number specifying the maximum allowed error from result points to input path figure.  Value 0 allows algorithm to pick the tolerance automatically.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcPoint(System.Double)">
            <summary>
            Get the normalized arc in (0,0)(1,1) box.
            Zero degree is mapped to [0.5, 0] (up), and clockwise
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcPoint(System.Double,System.Windows.Rect)">
            <summary>
            Get the absolute arc point in given bound with given relative radius.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcAngle(System.Windows.Point)">
            <summary>
            Get the angle on arc relative to (0,0)(1,1) box.
            Zero degree is mapped to [0.5, 0] (up), and clockwise
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcAngle(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Get the angle on arc from given absolute point relative to bound
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeTransform(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Compute the transform that moves Rect from to Rect to.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeTransform(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Computes the transform from the coordinate space of one <c>UIElement</c> to another.
            </summary>
            <param name="from">The source element.</param>
            <param name="to">The destination element.</param>
            <returns>The transform between the <c>UIElement</c>s, or null if it cannot be computed.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeToAbsolutePoint(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Map relative point to absolute using the mapping from given bound to (0,0)(1,1) box.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.AbsoluteToRelativePoint(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Map absolute point to relative using the mapping from (0,0)(1,1) box to given bound.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetStretchBound(System.Windows.Rect,System.Windows.Media.Stretch,System.Windows.Size)">
            <summary>
            Compute the bound after stretch within given logical bound.
            If stretch to uniform, use given aspectRatio.
            If aspectRatio is empty, it's equivalent to Fill.
            If stretch is None, equivalent to Fill or Uniform.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Midpoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the mid point of given 2 points
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The mid point between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Dot(System.Windows.Vector,System.Windows.Vector)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="lhs">The first vector.</param>
            <param name="rhs">The second vector.</param>
            <returns>The dot product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Dot(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the dot product of two Points.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Distance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance between two points.
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The distance between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.SquaredDistance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the square of the distance between two points.
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The square of the distance between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Determinant(System.Windows.Point,System.Windows.Point)">
            <summary>
            Determinant of cross product.  Equivalent to directional area
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Normal(System.Windows.Point,System.Windows.Point)">
            <summary>
            Compute the normal direction vector of given line segments
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Perpendicular(System.Windows.Vector)">
            <summary>
            Compute perpendicular vector, 90 degrees counter-clockwise.
            Vector to right perpendicular result a vector to up.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GeometryEquals(System.Windows.Media.Geometry,System.Windows.Media.Geometry)">
            <summary>
            Returns whether the two geometries are identical.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureGeometryType``1(``0@,System.Windows.Media.Geometry@,System.Func{``0})">
            <summary>
            Ensure the value is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureGeometryType``1(``0@,System.Collections.Generic.IList{System.Windows.Media.Geometry},System.Int32,System.Func{``0})">
            <summary>
            Ensure the list[index] is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureSegmentType``1(``0@,System.Collections.Generic.IList{System.Windows.Media.PathSegment},System.Int32,System.Func{``0})">
            <summary>
            Ensure the list[index] is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.ComputeBSpline(System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Double)">
            <summary>
            de'Boor algorithm to subdevide BSpline into poly Bezier segments.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.MathHelper">
            <summary>
            Helper class providing static properties and methods related to floating point arithmetic.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.Epsilon">
            <summary>
            The minimum distance to consider two values are same.
            Note: internal floating point in MIL/SL is float, not double.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.TwoPI">
            <summary>
            The value of angle of a full circle.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.PentagramInnerRadius">
            <summary>
            The inner radius for pentagram polygon shape, at precision of 3 digits in percentage.
            (1 - Sin36 * Sin72 / Sin54) / (Cos36) ^ 2, which is 0.47210998990512996761913067272407
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.IsVerySmall(System.Double)">
            <summary>
            Determines whether a <c>System.Double</c> value is small enough to be considered
            equivalent to zero.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if value is smaller than <c>DoubleTolerance</c>;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.EnsureRange(System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Return the value that's within the given range
            Given min/max is null means no limit.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.Hypotenuse(System.Double,System.Double)">
            <summary>
            Computes the Euclidean norm of the vector (x, y).
            </summary>
            <param name="x">The first component.</param>
            <param name="y">The second component.</param>
            <returns>The Euclidean norm of the vector (x, y).</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.DoubleFromMantissaAndExponent(System.Double,System.Int32)">
            <summary>
            Computes a real number from the mantissa and exponent.
            </summary>
            <param name="x"></param>
            <param name="exp"></param>
            <returns>The value of x * 2^exp if successful.</returns>
            <remarks>See ::ldexp in any decent C language runtime library.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.IsFiniteDouble(System.Double)">
            <summary>
            Tests a double.
            </summary>
            <param name="x">The double to test.</param>
            <returns><c>true</c> if x is not a NaN and is not equal to plus or minus infinity;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathFigureHelper">
            <summary>
            Helper class to work with PathFigure
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.FlattenFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Double,System.Boolean)">
            <summary>
            Flatten the given figure and add to the point list.
            </summary>
            <param name="tolerance">The error tolerance. Must be possitive. Can be 0, fallback to default tolerance.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.AllSegments(System.Windows.Media.PathFigure)">
            <summary>
            Iterate all segments inside given figure, and returns correct start point for each segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncPolylineFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
            <summary>
            Synchronize the figure to the given list of points as a single polyline segment.
            Try to keep the change minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncPolyBezierFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
            <summary>
            Synchronize the figure to the given list of points as a single PolyBezierSegment.
            Try to keep the change minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncEllipseFigure(System.Windows.Media.PathFigure,System.Windows.Rect,System.Windows.Media.SweepDirection,System.Boolean)">
            <summary>
            Synchronize the given figure to be a closed ellipse with 2 arc segments.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathSegmentData">
            <summary>
            A Tuple data structure for PathSegment and corresponding StartPoint.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PolylineData">
            <summary>
            Represent a polyline consist with a list of connecting points.
            A closed polygon is represented by repeating the first point at the end.
            The differences, normals, angles, and lengths are computed on Demand.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.#ctor(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Construct a polyline with two or more points.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.Difference(System.Int32)">
            The forward difference vector of polyline.
            Points[i] + Differences[i] = Points[i+1]
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.SmoothNormal(System.Int32,System.Double,System.Double)">
            <summary>
            Compute the normal vector of given location (lerp(index, index+1, fraction).
            If the location is within range of cornerRadius, interpolate the normal direction.
            </summary>
            <param name="cornerRadius">The range of normal smoothless.  If zero, no smoothness and return the exact normal on index.</param>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.IsClosed">
            <summary>
            The polyline is closed when first and last point is repeated.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Count">
            <summary>
            The count of points in this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.TotalLength">
            <summary>
            The total arc length of this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Points">
            <summary>
            The point array of this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Lengths">
            <summary>
            The length between line segments, Points[i] to Points[i+1]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Normals">
            <summary>
            The list of normal vectors for each segment.
            Normals[i] is the normal of segment p[i] to p[i + 1].
            Normals[N-1] == Normals[N-2].
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Angles">
            <summary>
            The list of Cos(angle) between 2 line segments on point p[i]
            Note: The value is cos(angle) = Dot(u, v). It's not in degree.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.AccumulatedLength">
            <summary>
            The list of accumulated length from points[i] to points[0]
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.MarchLocation">
            <summary>
            The data structure to communicate with PathMarch algorithm.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetPoint(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Get the interpolated position of this this MarchLocation on given point list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetNormal(Microsoft.Expression.Drawing.Core.PolylineData,System.Double)">
            <summary>
            Get the interpolated normal direction of this this MarchLocation on given normal vector list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetArcLength(System.Collections.Generic.IList{System.Double})">
            <summary>
            Get the arc length of this MarchLocation to the start of the entire polyline.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Reason">
            <summary>
            The reason why this location is sampled.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Index">
            <summary>
            The index of the point on polyline point list.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Ratio">
            <summary>
            Ratio: [0, 1], which is always before / (before + after)
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Before">
            <summary>
            Arc length before stop point.  It's non-negative, and less than Length[index]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.After">
            <summary>
            Arc length after the stop point.  It's non-negative, and less than Length[index]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Remain">
            <summary>
            Remaining length within a step to hit next stop.  Positive to go forward. Negative to go backward.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PolylineHelper">
            <summary>
            Helper class to work with list of points
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineHelper.PathMarch(Microsoft.Expression.Drawing.Core.PolylineData,System.Double,System.Double,System.Func{Microsoft.Expression.Drawing.Core.MarchLocation,System.Double})">
            <summary>
            March the given polyline with given interval and output each stop through callback
            </summary>
            <param name="polyline">The polyline points to march on</param>
            <param name="startArcLength">The arc length to march before stopping at the first point.</param>
            <param name="cornerThreshold">The max angle between edges to be considered a corner vertex</param>
            <param name="stopCallback">Callback when marching algorithm stop at a point.  The callback returns the arc length for next stop.
            If the asked length is negative, march backwards. If callback returns NaN, finish marching.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineHelper.GetWrappedPolylines(System.Collections.Generic.IList{Microsoft.Expression.Drawing.Core.PolylineData},System.Double@)">
            <summary>
            Reorders the given list of polylines so that the polyline a given arclength into the list is the first.
            Polylines that preceded this line are concatenated to the end of the list, with the first polyline at the very end. 
            </summary>
            <param name="lines">A list of polylines.</param>
            <param name="startArcLength">The arclength into the entire list of polylines at which to find the start line.
            The arc length into that line is returned in this variable.</param>
            <returns>The reordered and wrapped list.</returns>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.RandomEngine">
            <summary>
            A random generator support uniform and gaussian distributions.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.RandomEngine.Gaussian">
            <summary>
            Generate a pair of independent standard normally distributed random numbers,
            zero expectation, unit variance, using polar form of the Box-Muller transformation.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.#ctor">
            <summary>
            Private constructor. Force to use factory methods.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a line segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a cubic bezier segment from quatratic curve (3 control points)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a cubic bezier segment with 4 control points.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.SimpleSegment.Points">
            <summary>
            Control points of path segment.  Length is variant.
            Line segment has 2 points, Cubic bezier has 4 points.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.TransformExtensions.TransformEquals(System.Windows.Media.Transform,System.Windows.Media.Transform)">
            <summary>
            Compares two transforms for an exact match.  Transforms with the same value but different structure(e.g. Translate(0,0) and Rotate(0) are not considered equivalent).
            </summary>
            <param name="firstTransform">The first transform.</param>
            <param name="secondTransform">The second transform.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Expression.Media.UnitType">
            <summary>
            Specifies the unit of thickness.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.UnitType.Pixel">
            <summary>
            Unit in pixels.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.UnitType.Percent">
            <summary>
            Unit in percentage relative to bounding box.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometrySource`1">
            <summary>
            Provides the base class of a source of geometry.
            It generate and cache the geometry based on input parameters and layout bounds.
            </summary>
            <remarks>
            A typical implementation will extend the UpdateCachedGeometry() to update this.cachedGeometry.
            This base class will then handle the invalidation, pipeline to geometry effects and caching realtive to layout bounds.
            An implementation should try to reuse the cached geometry as much as possible to avoid reconstruction in rendering thread.
            An implementation can extend the ComputeLogicalBounds to handle Stretch differently.
            </remarks>
            <typeparam name="TParameters">The type of geometry source parameter on which the base class is working on.</typeparam>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySource">
            <summary>
            Provides an interface to describe the source of a geometry.
            </summary>
            <remarks>
            This interface is designed to expose geometry source in a non-generic way.
            Typical implementation should subclass GeometrySource&lt;&gt; instead of implementing this interface directly.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.IGeometrySource.InvalidateGeometry">
            <summary>
            Notify the geometry is invalidated because of external changes.
            </summary>
            <remarks>
            Typically geometry is invalidated when parameters are changed.
            If any geometry has been invalidated externally, geometry will be recomputed regardless bounds' change.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.IGeometrySource.UpdateGeometry(Microsoft.Expression.Media.IGeometrySourceParameters,System.Windows.Rect)">
            <summary>
            Update the geometry using given parameter and layout bounds.
            Returns false if nothing has been updated.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.Geometry">
            <summary>
            Gets or sets the result geometry after the latest UpdateGeometry()
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.LogicalBounds">
            <summary>
            Gets the bounding box where geometry should stretch to.
            The actual geometry might be smaller or larger than this.
            <see cref="P:Microsoft.Expression.Media.IGeometrySource.LogicalBounds"/> should already take stroke thickness and stretch into consideration.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.LayoutBounds">
            <summary>
            Gets the actuall bound of FrameworkElement.
            <see cref="P:Microsoft.Expression.Media.IGeometrySource.LayoutBounds"/> includes logical bounds, stretch and stroke thickness.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometrySource`1.cachedGeometry">
            <summary>
            Specifics the geometry from the previous geometry effect process.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.InvalidateGeometry">
            <summary>
            Notify the geometry is invalidated because of external changes.
            </summary>
            <remarks>
            Typically geometry is invalidated when parameters are changed.
            If any geometry has been invalidated externally, geometry will be recomputed regardless bounds' change.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.UpdateGeometry(Microsoft.Expression.Media.IGeometrySourceParameters,System.Windows.Rect)">
            <summary>
            Update the geometry based on given parameters and layoutBounds.
            Returns false if geometry hasn't been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.UpdateCachedGeometry(`0)">
            <summary>
            Extend the way to provide geometry by implementing this function.
            Return true when any of the geometry is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Extend the way to handle stretch mode.
            Default is to always use Stretch.Fill and center stroke.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.ApplyGeometryEffect(Microsoft.Expression.Media.IGeometrySourceParameters,System.Boolean)">
            <summary>
            Apply geometry effect when dirty or forced, update this.Geometry.
            Otherwise, keep this.Geometry as this.cachedGeometry.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.Geometry">
            <summary>
            Gets or sets the result geometry after the latest UpdateGeometry()
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.LogicalBounds">
            <summary>
            Gets the bounding box where geometry should stretch to.
            The actual geometry might be smaller or larger than this.
            <see cref="P:Microsoft.Expression.Media.GeometrySource`1.LogicalBounds"/> should already take stroke thickness and stretch into consideration.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.LayoutBounds">
            <summary>
            Gets the actuall bound of FrameworkElement.
            <see cref="P:Microsoft.Expression.Media.GeometrySource`1.LayoutBounds"/> includes logical bounds, stretch and stroke thickness.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Expression.Media.ArcGeometrySource.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Arc think Stretch.None is same as Stretch.Fill, assuming aspect ratio = 1:1
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.ArcGeometrySource.NormalizeThickness(Microsoft.Expression.Media.IArcGeometrySourceParameters)">
            <summary>
            Normalize thickness, both relative to bounding box and absolute pixel.
            realtive thickness = 0 -> full circle radius or clamped.
            realtive thickness = 1 -> shrinked to a dot, or degenerated.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.ArrowOrientation">
            <summary>
            Specifies the direction the arrow points.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Left">
            <summary>
            The arrow points to left.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Right">
            <summary>
            The arrow points to right.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Up">
            <summary>
            The arrow points up.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Down">
            <summary>
            The arrow points down.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.BlockArrowGeometrySource.ArrowBuilder">
            <summary>
                 B
                /|
               / C--D
              A     |
               \ C--D
                \|
                 B
            Algorithm only use Width/Height assuming top-left at 0,0
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.CalloutStyle">
            <summary>
            Specifies the rendering style of a Callout shape
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Rectangle">
            <summary>
            A rectangle shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.RoundedRectangle">
            <summary>
            A rounded rectangle shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Oval">
            <summary>
            A oval shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Cloud">
            <summary>
            A cloud shaped callout.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateEdge(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double,System.Boolean)">
            <summary>
            Update the edge line, and connect to anchor point if necessary
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdatePolylineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Update polyline segment, connecting start, anchor and end point with Callout style
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateLineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point)">
            <summary>
            Update the line segment to given point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.ComputeCorners(System.Double)">
            <summary>
            Compute the corner points, clockwise, 8 points for 4 corners
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateCornerArc(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point)">
            <summary>
            Corner Arc is always smaller arc with 90 degree
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometryEffect">
            <summary>
            Provides the base class of GeometryEffect that transform a geometry into another geometry.
            </summary>
            <remarks>
            This class provides the basic implementation of processing the rendered geometry of a IShape before it's passed to rendering.
            A typical implementation will extend the virtual function <see cref="F:ProcessGeometry"/> to transform input geometry.
            <see cref="T:GeometryEffect"/> is typically attached to <see cref="T:IShape"/> as an attached property and activated when <see cref="T:IShape"/> geometry is updated.
            The <see cref="P:OutputGeometry"/> of a <see cref="T:GeometryEffect"/> will replace the rendered geometry in <see cref="T:IShape"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.GetGeometryEffect(System.Windows.DependencyObject)">
            <summary>
            Gets the geometry effect as attached property on given dependency object.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.SetGeometryEffect(System.Windows.DependencyObject,Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Sets the geometry effect as attached property on given dependency object.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.CloneCurrentValue">
            <summary>
            Creates a modifiable clone (deep copy) of the <see cref="T:GeometryEffect"/> using its current values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.DeepCopy">
            <summary>
            Makes a deep copy of the geometry effect. Implements CloneCurrentValue in Silverlight.
            </summary>
            <returns>A clone of current instance of geometry effect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Equals(Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Tests if given geometry effect is equivalent to the current instance.
            </summary>
            <param name="geometryEffect">a geometry effect compare with.</param>
            <returns>Returns true when two effects renders a same appearance.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometryEffect.cachedGeometry">
            <summary>
            Specifics the geometry from the previous geometry effect process.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.InvalidateGeometry">
            <summary>
            Invalidate the geometry effect without actually compute the geometry.
            It will notify all parent shapes or effects to invalidate accordingly.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.ProcessGeometry(System.Windows.Media.Geometry)">
            <summary>
            Process geometry effect on given input geometry.
            Result is stored in GeometryEffect.OutputGeometry.
            </summary>
            <returns>Return false if nothing has been changed.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.UpdateCachedGeometry(System.Windows.Media.Geometry)">
            <summary>
            Extend the way of updating cachedGeometry based on given input geometry.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Detach">
            <summary>
            Notified when detached from parent chain.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Attach(System.Windows.DependencyObject)">
            <summary>
            Notified when attached to a parent chain.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.InvalidateParent(System.Windows.DependencyObject)">
            <summary>
            Invalidate the geometry on given dependency object when
            the object is a valid parent type (IShape or GeometryEffect).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.CreateInstanceCore">
            <summary>
            Implement the Freezable in WPF.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.DefaultGeometryEffect">
            <summary>
            The default geometry effect that does nothing but passing through the input geometry.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.OutputGeometry">
            <summary>
            Gets the output geometry of this geometry effect.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.Parent">
            <summary>
            Parent can be either IShape or GeometryEffectGroup.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometryEffectConverter">
            <summary>
            Provides the conversion between string and geometry effect
            </summary>
            <remarks>
            This class enables the brief sytax in xaml like <code>GeometryEffect="Sketch"</code>
            It will create a clone of instance of geometry effect so it can be used as resources.
            </remarks>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometryEffectConverter.registeredEffects">
            <summary>
            Build a preset list of supported geometry effects.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A GeometryEffect can be converted from string type.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A GeometryEffect can be converted to string type.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts a string to a geometry effect.  Fallback value is null.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a geometry effect into a string.  Fallback value is null.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySourceExtensions">
            <summary>
            Provides helper extension methods to work with IGeometrySource and parameters.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.ArrowType">
            <summary>
            Specifies the Arrow head type.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.NoArrow">
            <summary>
            No arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.Arrow">
            <summary>
            A triagle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.StealthArrow">
            <summary>
            A stealth triangle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.OpenArrow">
            <summary>
            An open triangle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.OvalArrow">
            <summary>
            An oval head.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.CornerType">
            <summary>
            Specifies the corner location.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.TopLeft">
            <summary>
            On top left of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.TopRight">
            <summary>
            On top right of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.BottomRight">
            <summary>
            On bottom right of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.BottomLeft">
            <summary>
            On bottom left of bounding box.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.PolygonGeometrySource.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Polygon think Stretch.None is same as Stretch.Fill
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.SketchGeometryEffect">
            <summary>
            A geometry effect to transform any geometry into a Sketch style as in SketchFlow.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.DeepCopy">
            <summary>
            Makes a deep copy of the geometry effect
            </summary>
            <returns>A clone of current instance of geometry effect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.Equals(Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Tests if given geometry effect is equivalent to the current instance.
            </summary>
            <param name="geometryEffect">a geometry effect compare with.</param>
            <returns>Returns true when two effects renders a same appearance.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.UpdateCachedGeometry(System.Windows.Media.Geometry)">
            <summary>
            Updating cachedGeometry based on given input geometry.
            </summary>
            <param name="input">A input geometry</param>
            <returns>Returns true when anything on cachedGeometry has been updated.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.SketchGeometryEffect.randomSeed">
            <summary>
            Use the same random seed on creation to keep visual flickering minimum
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.GetEffectiveSegments(System.Windows.Media.PathFigure)">
            <summary>
            Iterates all simple segments in given path figure including the closing chord.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Shapes.Arc">
            <summary>
            Renderes an Arc shape supporting Arc, Ring and Pie mode controled by ArcThickness.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Shapes.PrimitiveShape">
            <summary>
            Platform neutral implementation of Shape deriving from WPF:Shape or SL:Path
            </summary>
            <summary>
            Provides WPF implementation of Shap who derives from platform Shape.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.CreateGeometrySource">
            <summary>
            Extend how the shape is drawn with creating geometry source
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.MeasureOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
            <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes, or possibly on other considerations such as fixed container size.</returns>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <remarks>
            In WPF, measure override works from Shape.DefiningGeometry which is not always as expected
            see bug 99497 for details where WPF is not having correct measure by default.
            
            In Silverlight, measure override on Path does not work the same as primitive shape works.
            
            We should return the smallest size this shape can correctly render without clipping.
            By default a shape can render as small as a dot, therefore returning the strokethickness.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Shapes.PrimitiveShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Shapes.PrimitiveShape.GeometryMargin">
            <summary>
            Gets or sets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Shapes.PrimitiveShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.PrimitiveShape.RenderedGeometry">
            <summary>
            Gets a value that represents the final rendered <see cref="T:System.Windows.Media.Geometry"/> of a <see cref="T:System.Windows.Shapes.Shape"/>.
            </summary>
            <returns>The final rendered <see cref="T:System.Windows.Media.Geometry"/> of a <see cref="T:System.Windows.Shapes.Shape"/>.</returns>
            <remarks>The WPF primitive shape hides base class RenderedGeometry to provide a local storage and matches Silverlight primitive shape interface.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
            <value>The start angle in degrees. 0 degree is pointing up.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.EndAngle">
            <summary>
            Gets or sets the end angle.
            </summary>
            <value>The end angle in degree. 0 degree is pointing up.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.ArcThickness">
            <summary>
            Gets or sets the arc thickness.
            </summary>
            <value>The arc thickness in pixels or percentage depending on "ArcThicnessUnit"/>.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.ArcThicknessUnit">
            <summary>
            Gets or sets the arc thickness unit.
            </summary>
            <value>The arc thickness unit, either pixel or percentage.</value>
        </member>
        <member name="T:Microsoft.Expression.Shapes.BlockArrow">
            <summary>
            Renders a block arrow shape supporting resizable arrow head and body.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation where the arrow is pointing to.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.ArrowheadAngle">
            <summary>
            Gets or sets the arrowhead angle.
            </summary>
            <value>The arrowhead angle in degrees.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.ArrowBodySize">
            <summary>
            Gets or sets the size of the arrow body.
            </summary>
            <value>The size of the arrow body in pixels.</value>
        </member>
        <member name="T:Microsoft.Expression.Shapes.RegularPolygon">
            <summary>
            Renders a regular polygon shape or corresponding star shape with variable number of points.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.RegularPolygon.PointCount">
            <summary>
            Gets or sets the number of points of the <see cref="T:Microsoft.Expression.Shapes.RegularPolygon"/>
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.RegularPolygon.InnerRadius">
            <summary>
            Gets or sets the the distance between the center and the innermost point.
            </summary>
            <value>The distance between the center and the innermost point.</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\it\Microsoft.Expression.Interactions.xml ===
﻿<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Interactions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Interactivity.Core.ActionCommand">
            <summary>
            Un&apos;implementazione base di ICommand che esegue il wrapping di un metodo che non accetta parametri o di un metodo che accetta un solo parametro.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action)">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:Microsoft.Expression.Interactivity.Core.ActionCommand"/>.
            </summary>
            <param name="action">L&apos;azione.</param>
            <remarks>Utilizzare questo costruttore per implementare un&apos;azione che ignora il parametro ICommand.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action{System.Object})">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:Microsoft.Expression.Interactivity.Core.ActionCommand"/>.
            </summary>
            <param name="objectAction">Un&apos;azione che accetta un parametro oggetto.</param>
            <remarks>Utilizzare questo costruttore per implementare un&apos;azione che utilizza il parametro oggetto passato dal metodo Execute.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
            Definisce il metodo che determina se il comando può essere eseguito nel suo stato corrente.
            </summary>
            <param name="parameter">Dati utilizzati dal comando.  Se il comando non richiede il passaggio di dati, è possibile impostare questo oggetto su null.</param>
            <returns>
            Restituisce sempre true.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.Execute(System.Object)">
            <summary>
            Definisce il metodo da chiamare quando il comando viene richiamato.
            </summary>
            <param name="parameter">Dati utilizzati dal comando.  Se il comando non richiede il passaggio di dati, è possibile impostare questo oggetto su null.</param>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecuteChanged">
            <summary>
            Si verifica in caso di modifiche che influenzano l&apos;esecuzione del comando. Non è attivato da ActionCommand.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ChangePropertyAction">
            <summary>
            Un&apos;azione che modifica una proprietà specificata in un valore specificato quando viene richiamata.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.#ctor">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:Microsoft.Expression.Interactivity.Core.ChangePropertyAction"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Invoke(System.Object)">
            <summary>
            Richiama l&apos;azione.
            </summary>
            <param name="parameter">Il parametro dell&apos;azione. Se l&apos;azione non richiede un parametro, è possibile impostare il parametro su un riferimento con valore null.</param>
            <exception cref="T:System.ArgumentException">Impossibile trovare una proprietà con <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName"/> sulla destinazione.</exception>
            <exception cref="T:System.ArgumentException">Impossibile impostare <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName"/> sul valore specificato da <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Value"/>.</exception>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName">
            <summary>
            Recupera o imposta il nome della proprietà da modificare. Si tratta di una proprietà di dipendenza.
            </summary>
            <value>Il nome della proprietà da modificare.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Value">
            <summary>
            Recupera o imposta il valore da impostare. Si tratta di una proprietà di dipendenza.
            </summary>
            <value>Il valore da impostare.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Duration">
            <summary>
            Recupera o imposta la durata dell&apos;animazione che si verifica quando si richiama l&apos;azione ChangePropertyAction.  Si tratta di una proprietà di dipendenza. Se l&apos;impostazione della durata è stata annullata, non viene applicata nessuna animazione.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager">
            <summary>
            ExtendedVisualStateManager è un elemento VisualStateManager personalizzato che consente di semplificare l&apos;animazione di proprietà di layout. Grazie a questo elemento VisualStateManager personalizzato, gli stati possono includere modifiche a proprietà come Grid.Column, possono modificare le altezze elementi in o da Auto e così via. Queste modifiche verranno distribuite nel tempo utilizzando le funzioni GeneratedDuration e GeneratedEasingFunction della transizione appropriata. Per una descrizione generale dell&apos;algoritmo, vedere la regione &quot;Override di VisualStateManager&quot; sottostante.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.UseFluidLayoutProperty">
            <summary>
            Un elemento VisualStateGroup può utilizzare o meno layout fluidi.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValuesProperty">
            <summary>
            VisualStateGroup mantiene un elenco di questi valori originali in una proprietà associata.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutStoryboardProperty">
            <summary>
            Per ogni stato, le proprietà specifiche del layout vengono estratte e quindi associate allo stato. Queste proprietà vengono rimosse dallo stato stesso.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CurrentStateProperty">
            <summary>
            Ricorda lo stato corrente.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.MovingElements">
            <summary>
            Insieme di elementi attualmente in movimento.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutTransitionStoryboard">
            <summary>
            Storyboard che anima la transizione.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutProperties">
            <summary>
            Questo elenco contiene tutte le proprietà di layout conosciute.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.StopAnimations">
            <summary>
            Interrompere l&apos;animazione e sostituire le modifiche layout apportate per supportare l&apos;animazione.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.FindTransition(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState)">
            <summary>
            Individuare la transizione utilizzata da VisualStateManager per animare la modifica, in modo che l&apos;animazione del layout corrisponda a durata e variazione.
            </summary>
            <param name="group">Il gruppo in cui viene eseguita la transazione</param>
            <param name="previousState">Lo stato di provenienza</param>
            <param name="state">Lo stato di destinazione</param>
            <returns>La transizione</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.ExtractLayoutStoryboard(System.Windows.VisualState)">
            <summary>
            Rimuovere tutte le proprietà che influenzano il layout dallo storyboard per lo stato e memorizzarle nella cache in una proprietà associata.
            </summary>
            <param name="state">Lo stato in cui ci si sposta</param>
            <returns>Uno storyboard contenente le proprietà di layout in quello stato</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.FindTargetElements(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            L&apos;insieme di elementi di destinazione è l&apos;insieme di tutti gli elementi che possono essersi spostati in una transizione di layout. Questo insieme è la chiusura di: - Elementi con proprietà di layout animate nello stato. - Pari livello di elementi nell&apos;insieme. - Padri di elementi nell&apos;insieme.
             
            Il codice seguente esegue il controllo dei rettangoli prima e dopo la modifica del layout.
            </summary>
            <param name="control">Il controllo il cui layout cambia stato</param>
            <param name="layoutStoryboard">Lo storyboard contenente le modifiche di layout</param>
            <param name="originalValueRecords">Eventuali valori precedenti da spostamenti di stato precedenti che possono essere ripristinati</param>
            <param name="movingElements">L&apos;insieme di elementi attualmente in movimento, se è in corso una transizione di cambiamento di stato</param>
            <returns>L&apos;insieme completo di elementi il cui layout potrebbe essere cambiato</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetRectsOfTargets(System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Recuperare o impostare rettangoli per tutti gli elementi nell&apos;elenco di destinazione.
            </summary>
            <param name="targets">L&apos;insieme di elementi da considerare</param>
            <param name="movingElements">L&apos;insieme di elementi attualmente in movimento</param>
            <returns>Un dizionario che mappa gli elementi ai rispettivi rettangoli</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetLayoutRect(System.Windows.FrameworkElement)">
            <summary>
            Recuperare il rettangolo di layout di un elemento, recuperando lo slot di layout e quindi calcolando la porzione dello slot in uso.
            </summary>
            <param name="element">L&apos;elemento di cui si desidera recuperare il rettangolo</param>
            <returns>Il rettangolo di layout dell&apos;elemento</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetOldOpacities(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Recuperare le opacità degli elementi al momento del cambiamento di stato, anziché le visibilità, poiché il cambiamento di stato può essere in corso e il valore corrente è il più importante.
            </summary>
            <param name="control">Il controllo il cui stato sta cambiando</param>
            <param name="layoutStoryboard">Lo storyboard con le proprietà di layout</param>
            <param name="originalValueRecords">L&apos;insieme di valori originali</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.SetLayoutStoryboardProperties(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord})">
            <summary>
            Esaminare lo storyboard del layout e impostare tutte le proprietà utilizzando SetValue per abilitare la chiamata UpdateLayout senza contrassegnare la sequenza temporale, che causerebbe un rendering. Tutti i valori sovrascritti verranno archiviati nella raccolta di OriginalValueRecords in modo da poter essere sostituiti in seguito.
            </summary>
            <param name="control">Il controllo il cui stato sta cambiando</param>
            <param name="layoutStoryboard">Lo storyboard contenente le proprietà del layout</param>
            <param name="originalValueRecords">L&apos;archivio di valori originali</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.WrapMovingElementsInCanvases(System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Windows.Rect},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Windows.Rect})">
            <summary>
            Prendere tutti gli elementi che verranno spostati come risultato dell&apos;animazione layout ed eseguire il wrapping degli stessi in canvas in modo che non influenzino i loro elementi di pari livello.
            </summary>
            <param name="movingElements">L&apos;insieme di elementi che verranno spostati</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.UnwrapMovingElementsFromCanvases(System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Prendere tutti gli elementi che sono stati spostati come risultato dell&apos;animazione layout e rimuovere il wrapping degli stessi dai loro canvas.
            </summary>
            <param name="movingElements">L&apos;insieme di elementi che sono stati spostati</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CopyLayoutProperties(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Copiare le proprietà del layout dall&apos;elemento di origine nell&apos;elemento di destinazione, cancellandole dall&apos;origine.
            </summary>
            <param name="source">L&apos;origine delle proprietà del layout</param>
            <param name="target">La destinazione delle proprietà del layout</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CreateLayoutTransitionStoryboard(System.Windows.VisualTransition,System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Double})">
            <summary>
            Creare la storyboard effettiva che verrà utilizzata per animare la transizione. Utilizzare tutti i risultati calcolati in precedenza.
            </summary>
            <param name="duration">La durata dell&apos;animazione</param>
            <param name="ease">La funzione di interpolazione da utilizzare nell&apos;animazione</param>
            <param name="movingElements">L&apos;insieme di elementi che verranno spostati</param>
            <param name="oldOpacities">Le vecchie opacità degli elementi la cui visibilità è cambiata</param>
            <returns>Lo storyboard</returns>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord">
            <summary>
            OriginalValueRecord ricorda il valore originale di una proprietà cambiata in uno stato.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.FluidMoveScope">
            <summary>
            Questo tipo enumerato indica se un FluidMoveBehavior si applica all&apos;elemento a cui è associato o al figlio dell&apos;elemento. &quot;Self&quot; è utile quando esiste un singolo elemento che deve comportarsi in maniera speciale; &quot;Children&quot; è utile quando lo stesso comportamento si applica a tutti i figli di un WrapPanel o al pannello ItemsHost di un ItemsControl.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior">
            <summary>
            Comportamento che controlla un elemento (o un insieme di elementi) per modifiche di layout e sposta l&apos;elemento in modo graduale nella nuova posizione quando richiesto. Questo comportamento non anima la dimensione o visibilità di un elemento ma solo il suo scostamento all&apos;interno del contenitore padre.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.DurationProperty">
            <summary>
            DependencyProperty per la durata dello spostamento.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.AppliesToProperty">
            <summary>
            DependencyProperty per l&apos;ambito del comportamento. Per ulteriori dettagli, vedere FluidMoveScope.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.IsActiveProperty">
            <summary>
            DependencyProperty per lo stato attivo del comportamento.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.Duration">
            <summary>
            La durata dello spostamento.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.AppliesTo">
            <summary>
            Indica se il comportamento si applica solo a questo elemento o a tutti i figli dell&apos;elemento (se l&apos;elemento è un pannello).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.IsActive">
            <summary>
            Indica se il comportamento è attualmente attivo.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.GoToStateAction">
            <summary>
            Un&apos;azione che comporta la transizione di un FrameworkElement a un VisualState specificato quando viene richiamata.
            </summary>
            <remarks>
            Se la proprietà TargetName è impostata, questa azione tenta di modificare lo stato dell&apos;elemento di destinazione. In caso contrario, percorre la struttura di elementi nel tentativo di individuare una destinazione alternativa che definisce gli stati. ControlTemplate e UserControl sono due possibilità comuni.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.GoToStateAction.OnTargetChanged(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Chiamato quando la destinazione cambia. Se la proprietà TargetName non è impostata, questa azione ha un comportamento personalizzato.
            </summary>
            <param name="oldTarget"></param>
            <param name="newTarget"></param>
            <exception cref="T:System.InvalidOperationException">Impossibile individuare un FrameworkElement appropriato con stati.</exception>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.GoToStateAction.Invoke(System.Object)">
            <summary>
            Questo metodo è chiamato quando sono soddisfatti alcuni criteri e richiamata l&apos;azione.
            </summary>
            <param name="parameter"></param>
            <exception cref="T:System.InvalidOperationException">Impossibile modificare la destinazione nell&apos;elemento StateName specificato.</exception>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.GoToStateAction.UseTransitions">
            <summary>
            Se utilizzare VisualTransition per la transizione tra stati.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.GoToStateAction.StateName">
            <summary>
            Il nome di VisualState.  
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Input.KeyTrigger">
            <summary>
            Un trigger che è attivato da un evento di tastiera.  Viene attivato se vengono rilevati il tasto e i modificatori di destinazione.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.Key">
            <summary>
            Il tasto da premere per attivare il trigger.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.Modifiers">
            <summary>
            I modificatori che devono essere attivi per attivare il trigger (l&apos;impostazione predefinita è nessun modificatore premuto).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.ActiveOnFocus">
            <summary>
            Se true, il trigger ascolta solo il suo oggetto origine trigger, il che significa che l&apos;elemento deve essere attivo per attivare il trigger. Se false, il trigger ascolta alla radice, per cui qualsiasi messaggio KeyDown/Up non gestito verrà individuato.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.FiredOn">
            <summary>
            Se ascoltare l&apos;evento KeyDown o KeyUp.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction">
            <summary>
            Un&apos;azione che avvia un processo per aprire un file o Uri. Per i file, questa azione avvia il programma predefinito per l&apos;estensione file specificata. Un Uri viene aperto in un browser web.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction.Invoke(System.Object)">
            <summary>
            Questo metodo è chiamato quando sono soddisfatti alcuni criteri e richiamata l&apos;azione.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction.Path">
            <summary>
            Il file o l&apos;Uri da aprire. 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior">
            <summary>
            Riposiziona l&apos;elemento associato in risposta a movimenti di trascinamento con il mouse sull&apos;elemento.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.XProperty">
            <summary>
            DependencyProperty per la posizione X dell&apos;elemento trascinato, relativa al bordo sinistro dell&apos;elemento radice.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.YProperty">
            <summary>
            DependencyProperty per la posizione Y dell&apos;elemento trascinato, relativa al bordo superiore dell&apos;elemento radice.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ConstrainToParentBoundsProperty">
            <summary>
            DependencyProperty per la proprietà ConstrainToParentBounds. Se true, l&apos;elemento trascinato verrà vincolato a rimanere entro i limiti del suo contenitore padre.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.UpdatePosition(System.Windows.Point)">
            <summary>
            Tentativi di aggiornare la posizione dell&apos;elemento associato alle coordinate specificate.
            </summary>
            <param name="point">La posizione desiderata dell&apos;elemento in coordinate radice.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ApplyTranslation(System.Double,System.Double)">
            <summary>
            Applica una traslazione di posizione relativa all&apos;elemento associato.
            </summary>
            <param name="x">Il componente X della traslazione desiderata in coordinate radice.</param>
            <param name="y">Il componente Y della traslazione desiderata in coordinate radice.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ApplyTranslationTransform(System.Double,System.Double)">
            <summary>
            Applica la traslazione specificata a RenderTransform dell&apos;elemento associato.
            </summary>
            <param name="x">Il componente X della traslazione in coordinate padre.</param>
            <param name="y">Il componente Y della traslazione in coordinate padre.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.UpdatePosition">
            <summary>
            Aggiorna le proprietà X e Y in base alla posizione di rendering corrente dell&apos;elemento associato.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.IsValidConstrainedMove(System.Windows.Point)">
            <summary>
            Determina se la posizione del cursore specificata deve essere considerata come parte dell&apos;operazione di trascinamento.
            </summary>
            <param name="currentPosition">La posizione del cursore.</param>
            <returns>
            	<c>true</c> se la posizione fornita deve essere considerata come parte dell&apos;operazione di trascinamento; <c>false</c> in caso contrario.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.RectContainsRect(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Controlla se un rettangolo è contenuto da un altro.
            </summary>
            <param name="rect1">Il rettangolo contenente.</param>
            <param name="rect2">Il rettangolo contenuto.</param>
            <returns><c>true</c> se rect1 contiene rect2; in caso contrario, <c>false</c></returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.TransformAsVector(System.Windows.Media.GeneralTransform,System.Double,System.Double)">
            <summary>
            Trasforma come vettore.
            </summary>
            <param name="transform">La trasformazione.</param>
            <param name="x">Il componente X del vettore.</param>
            <param name="y">Il componente Y del vettore.</param>
            <returns>Un punto contenente i valori di X e Y trasformati da una trasformazione come un vettore.</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.GetTransformOffset(System.Windows.Media.GeneralTransform)">
            <summary>
            Recupera lo scostamento di trasformazione.
            </summary>
            <param name="transform">La trasformazione.</param>
            <returns>Lo scostamento della trasformazione.</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.OnAttached">
            <summary>
            Chiamato dopo che il comportamento è associato a un AssociatedObject.
            </summary>
            <remarks>Sottoporre a override per eseguire l&apos;hook della funzionalità all&apos;elemento AssociatedObject.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.OnDetaching">
            <summary>
            Chiamato quando il comportamento si sta scollegando dal suo AssociatedObject, ma prima che questo si verifichi.
            </summary>
            <remarks>Sottoporre a override per eseguire l&apos;unhook della funzionalità dall&apos;elemento AssociatedObject.</remarks>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.DragBegun">
            <summary>
            Si verifica quando viene iniziato un movimento di trascinamento.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.Dragging">
            <summary>
            Si verifica quando viene elaborato un aggiornamento del movimento di trascinamento.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.DragFinished">
            <summary>
            Si verifica quando un movimento di trascinamento è terminato.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.X">
            <summary>
            Recupera o imposta la posizione X dell&apos;elemento trascinato, relativa al bordo sinistro dell&apos;elemento radice. Si tratta di una proprietà di dipendenza.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.Y">
            <summary>
            Recupera o imposta la posizione Y dell&apos;elemento trascinato, relativa al bordo sinistro dell&apos;elemento radice. Si tratta di una proprietà di dipendenza.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ConstrainToParentBounds">
            <summary>
            Recupera o imposta un valore che indica se l&apos;elemento trascinato è vincolato a rimanere entro i limiti del suo contenitore padre. Si tratta di una proprietà di dipendenza.
            </summary>
            <value>
            	<c>true</c> se l&apos;elemento trascinato deve essere vincolato ai suoi limiti padre; <c>false</c> in caso contrario.
            </value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ActualPosition">
            <summary>
            Recupera la posizione su schermo dell&apos;elemento associato in coordinate radice.
            </summary>
            <value>La posizione su schermo dell&apos;elemento associato in coordinate radice.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ElementBounds">
            <summary>
            Recupera i limiti elemento in coordinate elemento.
            </summary>
            <value>I limiti elemento in coordinate elemento.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ParentElement">
            <summary>
            Recupera l&apos;elemento padre dell&apos;oggetto associato.
            </summary>
            <value>L&apos;elemento padre dell&apos;oggetto associato.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.RootElement">
            <summary>
            Recupera l&apos;elemento radice della scena in cui si trova l&apos;oggetto associato.
            </summary>
            <value>L&apos;elemento radice della scena in cui si trova l&apos;oggetto associato.</value>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.PlaySoundAction">
            <summary>
            Un azione che riproduce un suono al completamento.
            </summary>
            <remarks>
            Questa azione è destinata all&apos;utilizzo con effetti sonori brevi che non devono essere interrotti o controllati. Se si cerca di creare un lettore musicale o un gioco, potrebbe non soddisfare le esigenze dell&apos;utente.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.#ctor">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:Microsoft.Expression.Interactivity.Media.PlaySoundAction"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.SetMediaElementProperties(System.Windows.Controls.MediaElement)">
            <summary>
            Quando viene richiamata l&apos;azione, questo metodo è utilizzato per personalizzare l&apos;elemento MediaElement creato dinamicamente.
            </summary>
            <remarks>
            Questo metodo può essere utile per gli autori di azioni che desiderano estendere PlaySoundAction. Se si desidera controllare la proprietà MediaElement Balance, è possibile ereditare da PlaySoundAction ed eseguire l&apos;override del metodo.
            </remarks>
            <param name="mediaElement"></param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Invoke(System.Object)">
            <summary>
            Questo metodo è chiamato quando sono soddisfatti alcuni criteri e deve essere richiamata l&apos;azione. 
            </summary>
            <remarks>
            Ogni chiamata dell&apos;azione genera un nuovo suono.  Sebbene l&apos;implementazione sia soggetta a modifiche, il chiamante deve prevedere che questa azione crea un nuovo MediaElement, che verrà eliminato alla fine del suono o se non è possibile riprodurre dal supporto.
            </remarks>
            <param name="parameter"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Source">
            <summary>
            Un Uri che definisce il percorso del file audio.  È utilizzato per impostare la proprietà origine del MediaElement. Si tratta di una proprietà di dipendenza.
            </summary>
            <remarks>
            Il formato file del suono può essere uno di quelli supportati da MediaElement.  Nel caso di un video, verrà riprodotta solo la porzione audio.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Volume">
            <summary>
            Controlla il volume del suono.  È utilizzato per impostare la proprietà Volume di MediaElement.  Si tratta di una proprietà di dipendenza.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.RemoveElementAction">
            <summary>
            Un&apos;azione che rimuove l&apos;elemento di destinazione dalla struttura quando richiamata.
            </summary>
            <remarks>
            Questa azione potrebbe non riuscire. L&apos;azione consente di rimuovere elementi da padri comuni ma non da raccolte personalizzate o manipolazione diretta della struttura ad albero visuale.
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardAction">
            <summary>
            Una classe astratta che offre la possibilità di utilizzare come destinazione uno storyboard.
            </summary>
            <remarks>
            Per gli autori di azioni, questa classe offre un modo standard per utilizzare come destinazione uno storyboard.  È possibile scegliere strumenti di progettazione per offrire un&apos;esperienza di modifica speciale per classi che ereditano da questa azione, migliorando pertanto l&apos;esperienza del progettista. 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardAction.OnStoryboardChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Questo metodo viene chiamato quando la proprietà Storyboard viene modificata.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.StoryboardAction.Storyboard">
            <summary>
            Lo storyboard di destinazione.  Si tratta di una proprietà di dipendenza.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.ControlStoryboardAction">
            <summary>
            Un&apos;azione che cambia lo stato di uno storyboard di destinazione quando richiamata.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.ControlStoryboardAction.Invoke(System.Object)">
            <summary>
            Questo metodo viene chiamato quando sono soddisfatti alcuni criteri e deve essere richiamata l&apos;azione. Questo metodo tenta di modificare lo storyboard di destinazione in un modo definito da ControlStoryboardOption.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardTrigger">
            <summary>
            Una classe astratta che offre la possibilità di utilizzare come destinazione uno storyboard.
            </summary>
            <remarks>
            Per gli autori di trigger, questa classe offre un modo standard per utilizzare come destinazione uno storyboard.  È possibile scegliere strumenti di progettazione per offrire un&apos;esperienza di modifica speciale per classi che ereditano da questo trigger, migliorando pertanto l&apos;esperienza del progettista. 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardTrigger.OnStoryboardChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Questo metodo viene chiamato quando la proprietà Storyboard viene modificata.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.StoryboardTrigger.Storyboard">
            <summary>
            Lo storyboard di destinazione.  Si tratta di una proprietà di dipendenza.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger">
            <summary>
            Un trigger che rimane in ascolto del completamento di uno storyboard.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger.#ctor">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.TimerTrigger">
            <summary>
            Un trigger che viene attivato quando si verifica un evento specificato nella sua origine e che si attiva dopo un ritardo quando l&apos;evento viene attivato.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.TimerTrigger.#ctor">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:Microsoft.Expression.Interactivity.Core.TimerTrigger"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.TimerTrigger.MillisecondsPerTick">
            <summary>
            Recupera o imposta il numero di millisecondi di attesa tra i cicli macchina. Si tratta di una proprietà di dipendenza.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.TimerTrigger.TotalTicks">
            <summary>
            Recupera o imposta il numero totale di cicli macchina da attivare prima che il trigger sia terminato.  Si tratta di una proprietà di dipendenza.
            </summary>
        </member>
        <member name="T:ExceptionStringTable">
            <summary>
              Una classe di risorse fortemente tipizzata per la ricerca di stringhe localizzate e così via.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ResourceManager">
            <summary>
              Restituisce l&apos;istanza ResourceManager memorizzata nella cache utilizzata da questa classe.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.Culture">
            <summary>
              Esegue l&apos;override della proprietà CurrentUICulture del thread corrente per tutte le ricerche di risorse eseguite utilizzando questa classe di risorse fortemente tipizzata.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotFindPropertyNameExceptionMessage">
            <summary>
              Ricerca una stringa localizzata simile a Impossibile trovare una proprietà denominata &quot;{0}&quot; nel tipo &quot;{1}&quot;.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotSetValueExceptionMessage">
            <summary>
              Ricerca una stringa localizzata simile a Impossibile assegnare un valore di tipo &quot;{0}&quot; alla proprietà &quot;{1}&quot; di tipo &quot;{2}&quot;. È possibile assegnare alla proprietà &quot;{1}&quot; solo valori di tipo &quot;{2}&quot;.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionPropertyIsReadOnlyExceptionMessage">
            <summary>
              Ricerca una stringa localizzata simile a La proprietà &quot;{0}&quot; definita dal tipo &quot;{1}&quot; non espone un metodo set, pertanto non può essere modificata.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.GoToStateActionStateChangeFailed">
            <summary>
              Ricerca una stringa localizzata simile a Impossibile modificare lo stato della destinazione da {0} a {1}.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.GoToStateActionTargetHasNoStateGroups">
            <summary>
              Ricerca una stringa localizzata simile a La destinazione {0} non definisce alcun elemento VisualStateGroups. .
            </summary>
        </member>
        <member name="P:ExceptionStringTable.UnsupportedRemoveTargetExceptionMessage">
            <summary>
              Ricerca una stringa localizzata simile a La destinazione di RemoveElementAction non è supportata.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\it\System.Windows.Interactivity.xml ===
﻿<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Interactivity</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Interactivity.AttachableCollection`1">
            <summary>
            Rappresenta una raccolta di IAttachedObject con un AssociatedObject condiviso e offre notifiche di modifica del suo contenuto quando AssociatedObject cambia.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.IAttachedObject">
            <summary>
            Un&apos;interfaccia per un oggetto che può essere associata a un altro oggetto.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.IAttachedObject.Attach(System.Windows.DependencyObject)">
            <summary>
            Associa all&apos;oggetto specificato.
            </summary>
            <param name="dependencyObject">L&apos;oggetto a cui associarsi.</param>
        </member>
        <member name="M:System.Windows.Interactivity.IAttachedObject.Detach">
            <summary>
            Scollega questa istanza dall&apos;oggetto associato.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.IAttachedObject.AssociatedObject">
            <summary>
            Recupera l&apos;oggetto associato.
            </summary>
            <value>L&apos;oggetto associato.</value>
            <remarks>Rappresenta l&apos;oggetto a cui l&apos;istanza è associata.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.#ctor">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:System.Windows.Interactivity.AttachableCollection`1"/>.
            </summary>
            <remarks>Interna, perché non deve essere ereditata al di fuori di questo assembly.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.OnAttached">
            <summary>
            Chiamato immediatamente dopo che la raccolta è associata a un AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.OnDetaching">
            <summary>
            Chiamato quando la raccolta viene scollegata dal suo AssociatedObject, ma prima che questo si verifichi.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.ItemAdded(`0)">
            <summary>
            Chiamato quando un nuovo elemento viene aggiunto alla raccolta.
            </summary>
            <param name="item">Il nuovo elemento.</param>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.ItemRemoved(`0)">
            <summary>
            Chiamato quando un elemento viene rimosso dalla raccolta.
            </summary>
            <param name="item">L&apos;elemento rimosso.</param>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.VerifyAdd(`0)">
            <exception cref="T:System.InvalidOperationException">Impossibile aggiungere l&apos;istanza a una raccolta più di una volta.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.Attach(System.Windows.DependencyObject)">
            <summary>
            Associa all&apos;oggetto specificato.
            </summary>
            <param name="dependencyObject">L&apos;oggetto a cui associarsi.</param>
            <exception cref="T:System.InvalidOperationException">IAttachedObject è già collegato a un oggetto diverso.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.Detach">
            <summary>
            Scollega questa istanza dall&apos;oggetto associato.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.AttachableCollection`1.AssociatedObject">
            <summary>
            L&apos;oggetto su cui la raccolta è ospitata.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.AttachableCollection`1.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Recupera l&apos;oggetto associato.
            </summary>
            <value>L&apos;oggetto associato.</value>
        </member>
        <member name="T:System.Windows.Interactivity.Behavior`1">
            <summary>
            Incapsula informazioni di stato e zero o più ICommands in un oggetto associabile.
            </summary>
            <typeparam name="T">Il tipo a cui <see cref="T:System.Windows.Interactivity.Behavior`1"/> è associabile.</typeparam>
            <remarks>
            	Behavior è la classe base per fornire stato e comandi associabili a un oggetto. I tipi a cui Behavior può essere associato possono essere controllati dal parametro generic. Eseguire l&apos;override dei metodi OnAttached() e OnDetaching() per eseguire l&apos;hook e l&apos;unhook degli eventuali gestori necessari dall&apos;elemento AssociatedObject.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.Behavior">
            <summary>
            Incapsula informazioni di stato e zero o più ICommands in un oggetto associabile.
            </summary>
            <remarks>Questa è una classe infrastruttura. Gli autori di comportamenti devono derivare da Behavior&lt;T&gt; invece che da questa classe.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.OnAttached">
            <summary>
            Chiamato dopo che il comportamento è associato a un AssociatedObject.
            </summary>
            <remarks>Sottoporre a override per eseguire l&apos;hook della funzionalità all&apos;elemento AssociatedObject.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.OnDetaching">
            <summary>
            Chiamato quando il comportamento viene scollegato dal suo AssociatedObject, ma prima che questo si verifichi.
            </summary>
            <remarks>Sottoporre a override per eseguire l&apos;unhook della funzionalità dall&apos;elemento AssociatedObject.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.Attach(System.Windows.DependencyObject)">
            <summary>
            Associa all&apos;oggetto specificato.
            </summary>
            <param name="dependencyObject">L&apos;oggetto a cui associarsi.</param>
            <exception cref="T:System.InvalidOperationException">Il Behavior è già ospitato su un elemento diverso.</exception>
            <exception cref="T:System.InvalidOperationException">dependencyObject non soddisfa il vincolo di tipo Behavior.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.Detach">
            <summary>
            Scollega questa istanza dall&apos;oggetto associato.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.AssociatedType">
            <summary>
            Il tipo a cui è possibile associare questo comportamento.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.AssociatedObject">
            <summary>
            Recupera l&apos;oggetto a cui questo comportamento è associato.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Recupera l&apos;oggetto associato.
            </summary>
            <value>L&apos;oggetto associato.</value>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior`1.#ctor">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:System.Windows.Interactivity.Behavior`1"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior`1.AssociatedObject">
            <summary>
            Recupera l&apos;oggetto a cui questa <see cref="T:System.Windows.Interactivity.Behavior`1"/> è associata.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.BehaviorCollection">
            <summary>
            Rappresenta una raccolta di comportamenti con un AssociatedObject condiviso e offre notifiche di modifica del suo contenuto quando AssociatedObject cambia.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.#ctor">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:System.Windows.Interactivity.BehaviorCollection"/>.
            </summary>
            <remarks>Interna, perché non deve essere ereditata al di fuori di questo assembly.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.OnAttached">
            <summary>
            Chiamato immediatamente dopo che la raccolta è associata a un AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.OnDetaching">
            <summary>
            Chiamato quando la raccolta viene scollegata dal suo AssociatedObject, ma prima che questo si verifichi.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.ItemAdded(System.Windows.Interactivity.Behavior)">
            <summary>
            Chiamato quando un nuovo elemento viene aggiunto alla raccolta.
            </summary>
            <param name="item">Il nuovo elemento.</param>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.ItemRemoved(System.Windows.Interactivity.Behavior)">
            <summary>
            Chiamato quando un elemento viene rimosso dalla raccolta.
            </summary>
            <param name="item">L&apos;elemento rimosso.</param>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.CreateInstanceCore">
            <summary>
            Crea una nuova istanza di BehaviorCollection.
            </summary>
            <returns>La nuova istanza.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.CustomPropertyValueEditor">
            <summary>
            Enumera possibili valori per editor del valore di proprietà riutilizzabili.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.Element">
            <summary>
            Utilizza la selezione elemento, se supportata, per modificare questa proprietà in fase di progettazione.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.Storyboard">
            <summary>
            Utilizza la selezione storyboard, se supportata, per modificare questa proprietà in fase di progettazione.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.StateName">
            <summary>
            Utilizza la selezione stato, se supportata, per modificare questa proprietà in fase di progettazione.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.CustomPropertyValueEditorAttribute">
            <summary>
            Associa il tipo di editor specificato con la proprietà in cui CustomPropertyValueEditor è applicato.
            </summary>
            <remarks>Utilizzare questo attributo per ottenere una modifica in fase di progettazione migliorata per proprietà che denotano elementi (per nome), storyboard o stati (per nome).</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.CustomPropertyValueEditorAttribute.#ctor(System.Windows.Interactivity.CustomPropertyValueEditor)">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:System.Windows.Interactivity.CustomPropertyValueEditorAttribute"/>.
            </summary>
            <param name="customPropertyValueEditor">L&apos;editor del valore di proprietà personalizzato.</param>
        </member>
        <member name="P:System.Windows.Interactivity.CustomPropertyValueEditorAttribute.CustomPropertyValueEditor">
            <summary>
            Recupera o imposta l&apos;editor del valore di proprietà personalizzato.
            </summary>
            <value>L&apos;editor del valore di proprietà personalizzato.</value>
        </member>
        <member name="T:System.Windows.Interactivity.DefaultTriggerAttribute">
            <summary>
            Fornisce informazioni strumenti di progettazione su cosa <see cref="T:System.Windows.Interactivity.TriggerBase"/> creare un&apos;istanza per un&apos;azione o comando specificato.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.#ctor(System.Type,System.Type,System.Object)">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:System.Windows.Interactivity.DefaultTriggerAttribute"/>.
            </summary>
            <param name="targetType">Il tipo a cui si applica l&apos;attributo.</param>
            <param name="triggerType">Il tipo di <see cref="T:System.Windows.Interactivity.TriggerBase"/> di cui creare un&apos;istanza.</param>
            <param name="parameters">Un argomento singolo per il <see cref="T:System.Windows.Interactivity.TriggerBase"/> specificato.</param>
            <exception cref="T:System.ArgumentException"><c cref="F:System.Windows.Interactivity.DefaultTriggerAttribute.triggerType"/> non è derivato da TriggerBase.</exception>
            <remarks>Questo costruttore è utile se il <see cref="T:System.Windows.Interactivity.TriggerBase"/> specificato dispone di un singolo argomento. Il codice risultante sarà conforme a CLS.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.#ctor(System.Type,System.Type,System.Object[])">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:System.Windows.Interactivity.DefaultTriggerAttribute"/>.
            </summary>
            <param name="targetType">Il tipo a cui si applica l&apos;attributo.</param>
            <param name="triggerType">Il tipo di <see cref="T:System.Windows.Interactivity.TriggerBase"/> di cui creare un&apos;istanza.</param>
            <param name="parameters">Gli argomenti del costruttore per il <see cref="T:System.Windows.Interactivity.TriggerBase"/> specificato.</param>
            <exception cref="T:System.ArgumentException"><c cref="F:System.Windows.Interactivity.DefaultTriggerAttribute.triggerType"/> non è derivato da TriggerBase.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.Instantiate">
            <summary>
            Crea un&apos;istanza di questa istanza.
            </summary>
            <returns>Il <see cref="T:System.Windows.Interactivity.TriggerBase"/> specificato da DefaultTriggerAttribute.</returns>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.TargetType">
            <summary>
            Recupera il tipo a cui si applica questo DefaultTriggerAttribute.
            </summary>
            <value>Il tipo a cui si applica questo DefaultTriggerAttribute.</value>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.TriggerType">
            <summary>
            Recupera il tipo di <see cref="T:System.Windows.Interactivity.TriggerBase"/> di cui creare un&apos;istanza.
            </summary>
            <value>Il tipo di <see cref="T:System.Windows.Interactivity.TriggerBase"/> di cui creare un&apos;istanza.</value>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.Parameters">
            <summary>
            Recupera i parametri da passare al costruttore <see cref="T:System.Windows.Interactivity.TriggerBase"/>.
            </summary>
            <value>I parametri da passare al costruttore <see cref="T:System.Windows.Interactivity.TriggerBase"/>.</value>
        </member>
        <member name="T:System.Windows.Interactivity.EventTrigger">
            <summary>
            Un trigger che ascolta un evento specificato sulla sua origine e si attiva quando l&apos;evento viene attivato.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.EventTriggerBase`1">
            <summary>
            Rappresenta un trigger che può ascoltare un elemento diverso da AssociatedObject.
            </summary>
            <typeparam name="T">Il tipo a cui è possibile associare il trigger.</typeparam>
            <remarks>
            	EventTriggerBase estende TriggerBase per aggiungere informazioni di un altro elemento rispetto a quello a cui è associato. Questo consente a un utente di associare una coppia trigger/azione a un solo elemento e richiamare l&apos;azione in risposta a una modifica in un altro elemento da qualche altra parte. Sottoporre a override OnSourceChanged per eseguire l&apos;hook e l&apos;unhook del gestori sull&apos;elemento di origine e OnAttached/OnDetaching per l&apos;elemento associato. Il tipo dell&apos;elemento di origine può essere vincolato dal parametro di tipo generic. Se è necessario il controllo sul tipo di AssociatedObject, impostare un TypeConstraintAttribute sul tipo derivato.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.EventTriggerBase">
            <summary>
            Rappresenta un trigger che può ascoltare un elemento diverso da AssociatedObject.
            </summary>
            <remarks>Questa è una classe infrastruttura. Gli autori di trigger devono derivare da EventTriggerBase&lt;T&gt; invece che da questa classe.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerBase">
            <summary>
            Rappresenta un oggetto che può richiamare azioni in maniera condizionale.
            </summary>
            <remarks>Questa è una classe infrastruttura. Gli autori di trigger devono derivare da Trigger&lt;T&gt; invece che da questa classe.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.InvokeActions(System.Object)">
            <summary>
            Richiama tutte le azioni associate a questo trigger.
            </summary>
            <remarks>Deve essere chiamato dalle classi derivate per attivare il trigger.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.OnAttached">
            <summary>
            Chiamato dopo che il trigger è associato a un AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.OnDetaching">
            <summary>
            Chiamato quando il trigger viene scollegato dal suo AssociatedObject, ma prima che questo si verifichi.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.CreateInstanceCore">
            <summary>
            Crea una nuova istanza della classe derivata TriggerBase.
            </summary>
            <returns>La nuova istanza.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.Attach(System.Windows.DependencyObject)">
            <summary>
            Associa all&apos;oggetto specificato.
            </summary>
            <param name="dependencyObject">L&apos;oggetto a cui associarsi.</param>
            <exception cref="T:System.InvalidOperationException">Impossibile ospitare lo stesso Trigger su più di un oggetto per volta.</exception>
            <exception cref="T:System.InvalidOperationException">dependencyObject non soddisfa il vincolo di tipo Trigger.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.Detach">
            <summary>
            Scollega questa istanza dall&apos;oggetto associato.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.AssociatedObject">
            <summary>
            Recupera l&apos;oggetto a cui il trigger è associato.
            </summary>
            <value>L&apos;oggetto associato.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.AssociatedObjectTypeConstraint">
            <summary>
            Recupera il vincolo di tipo dell&apos;oggetto associato.
            </summary>
            <value>Il vincolo di tipo dell&apos;oggetto associato.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.Actions">
            <summary>
            Recupera le azioni associate a questo trigger.
            </summary>
            <value>Le azioni associate a questo trigger.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Recupera l&apos;oggetto associato.
            </summary>
            <value>L&apos;oggetto associato.</value>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.GetEventName">
            <summary>
            Specifica il nome dell&apos;evento ascoltato da EventTriggerBase.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnEvent(System.EventArgs)">
            <summary>
            Chiamato quando viene attivato l&apos;evento associato con questo EventTriggerBase. Per impostazione predefinita, questa operazione richiama tutte le azioni sul trigger.
            </summary>
            <param name="eventArgs">L&apos;istanza <see cref="T:System.EventArgs"/> contenente i dati evento.</param>
            <remarks>Eseguire l&apos;override per offrire un controllo più granulare quando le azioni associate a questo trigger vengono richiamate.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnSourceChangedImpl(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Chiamato quando l&apos;origine cambia.
            </summary>
            <param name="oldSource">La vecchia origine.</param>
            <param name="newSource">La nuova origine.</param>
            <remarks>Eseguire l&apos;override di questa funzione in classi derivate per eseguire l&apos;hook e l&apos;unhook della funzionalità dagli oggetti origine modificati.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnAttached">
            <summary>
            Chiamato dopo che il trigger è associato a un AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnDetaching">
            <summary>
            Chiamato quando il trigger viene scollegato dal suo AssociatedObject, ma prima che questo si verifichi.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.RegisterEvent(System.Object,System.String)">
            <exception cref="T:System.ArgumentException">Impossibile trovare eventName sulla destinazione.</exception>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.AssociatedObjectTypeConstraint">
            <summary>
            Recupera il vincolo di tipo dell&apos;oggetto associato.
            </summary>
            <value>Il vincolo di tipo dell&apos;oggetto associato.</value>
            <remarks>Definire un TypeConstraintAttribute su un tipo derivato per vincolare i tipi a cui può essere associato.</remarks>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.SourceTypeConstraint">
            <summary>
            Recupera il vincolo di tipo origine.
            </summary>
            <value>Il vincolo di tipo origine.</value>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.SourceName">
            <summary>
            Recupera o imposta il nome dell&apos;elemento ascoltato da EventTriggerBase come un&apos;origine. Se l&apos;impostazione del nome è stata annullata o non può essere risolto, verrà utilizzato AssociatedObject.  Si tratta di una proprietà di dipendenza.
            </summary>
            <value>Il nome dell&apos;elemento di origine.</value>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.Source">
            <summary>
            Recupera l&apos;origine risolta. Se l&apos;impostazione di <c ref="SourceName"/> è stata annullata o non può essere risolto, si assume come valore AssociatedObject.
            </summary>
            <value>L&apos;oggetto di origine risolto.</value>
            <remarks>In generale, questa proprietà deve essere utilizzata al posto di AssociatedObject nelle classi derivate.</remarks>
            <exception cref="T:System.InvalidOperationException">L&apos;elemento a cui <c cref="P:System.Windows.Interactivity.EventTriggerBase.Source"/> fa riferimento non soddisfa il vincolo di tipo.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase`1.#ctor">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:System.Windows.Interactivity.EventTriggerBase`1"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase`1.OnSourceChanged(`0,`0)">
            <summary>
            Chiamato quando la proprietà origine cambia.
            </summary>
            <remarks>Sottoporre a override per eseguire l&apos;hook e l&apos;unhook della funzionalità dall&apos;origine specificata, anziché da AssociatedObject.</remarks>
            <param name="oldSource">La vecchia origine.</param>
            <param name="newSource">La nuova origine.</param>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase`1.Source">
            <summary>
            Recupera l&apos;origine risolta. Se l&apos;impostazione di <c ref="SourceName"/> è annullata o non può essere risolto, si assume come valore AssociatedObject.
            </summary>
            <value>L&apos;oggetto di origine risolto.</value>
            <remarks>In generale, questa proprietà deve essere utilizzata al posto di AssociatedObject nelle classi derivate.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTrigger.#ctor">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:System.Windows.Interactivity.EventTrigger"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTrigger.#ctor(System.String)">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:System.Windows.Interactivity.EventTrigger"/>.
            </summary>
            <param name="eventName">Nome dell&apos;evento.</param>
        </member>
        <member name="P:System.Windows.Interactivity.EventTrigger.EventName">
            <summary>
            Recupera o imposta il nome dell&apos;evento da ascoltare. Si tratta di una proprietà di dipendenza.
            </summary>
            <value>Il nome dell&apos;evento.</value>
        </member>
        <member name="T:System.Windows.Interactivity.Interaction">
            <summary>
            Classe statica a cui appartengono le proprietà associate Triggers e Behaviors. Gestisce la propagazione delle notifiche di modifica AssociatedObject.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.Interaction.TriggersProperty">
            <summary>
            Questa proprietà è utilizzata come archivio di backup interno per la proprietà associata Triggers pubblica.
            </summary>
            <remarks>
            Questa proprietà non è esposta pubblicamente. Questo forza i client a utilizzare i metodi GetTriggers e SetTriggers per accedere alla raccolta, verificando che la raccolta esiste e che è impostata prima che sia utilizzata.
            </remarks>
        </member>
        <member name="F:System.Windows.Interactivity.Interaction.BehaviorsProperty">
            <summary>
            Questa proprietà è utilizzata come archivio di backup interno per la proprietà associata Behaviors pubblica.
            </summary>
            <remarks>
            Questa proprietà non è esposta pubblicamente. Questo forza i client a utilizzare i metodi GetBehaviors e SetBehaviors per accedere alla raccolta, verificando che la raccolta esiste e che è impostata prima che sia utilizzata.
            </remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.GetTriggers(System.Windows.DependencyObject)">
            <summary>
            Recupera la TriggerCollection contenente i trigger associati con l&apos;oggetto specificato.
            </summary>
            <param name="obj">L&apos;oggetto da cui recuperare i trigger.</param>
            <returns>Una TriggerCollection contenente i trigger associati con l&apos;oggetto specificato.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.GetBehaviors(System.Windows.DependencyObject)">
            <summary>
            Recupera la <see cref="T:System.Windows.Interactivity.BehaviorCollection"/> associata con un oggetto specificato.
            </summary>
            <param name="obj">L&apos;oggetto da cui recuperare la <see cref="T:System.Windows.Interactivity.BehaviorCollection"/>.</param>
            <returns>Una <see cref="T:System.Windows.Interactivity.BehaviorCollection"/> contenente i comportamenti associati con l&apos;oggetto specificato.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.OnBehaviorsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <exception cref="T:System.InvalidOperationException">Impossibile ospitare la stessa BehaviorCollection su più di un oggetto alla volta.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.OnTriggersChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <exception cref="T:System.InvalidOperationException">Impossibile ospitare la stessa TriggerCollection su più di un oggetto alla volta.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.IsElementLoaded(System.Windows.FrameworkElement)">
            <summary>
            Un funzione helper per prendere il posto di FrameworkElement.IsLoaded, poiché Silverlight non dispone di una proprietà simile.
            </summary>
            <param name="element">L&apos;elemento di interesse.</param>
            <returns>True se l&apos;elemento è stato caricato; false in caso contrario</returns>
        </member>
        <member name="P:System.Windows.Interactivity.Interaction.ShouldRunInDesignMode">
            <summary>
            Recupera o imposta un valore che indica se eseguire come in modalità progettazione.
            </summary>
            <value>
            	<c>true</c> se [eseguire in modalità progettazione]; <c>false</c> in caso contrario.
            </value>
            <remarks>Da non utilizzare al di fuori delle unit test.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.InvokeCommandAction">
            <summary>
            Esegue un&apos;azione specificata sul comportamento host quando richiamata.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerAction`1">
            <summary>
            Rappresenta un oggetto associabile che incapsula un&apos;unità di funzionalità.
            </summary>
            <typeparam name="T">Il tipo a cui è possibile associare questa azione.</typeparam>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerAction">
            <summary>
            Rappresenta un oggetto associabile che incapsula un&apos;unità di funzionalità.
            </summary>
            <remarks>Questa è una classe infrastruttura. Gli autori di azioni devono derivare da TriggerAction&lt;T&gt; invece che da questa classe.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.CallInvoke(System.Object)">
            <summary>
            Tenta di richiamare l&apos;azione.
            </summary>
            <param name="parameter">Il parametro dell&apos;azione. Se l&apos;azione non richiede un parametro, è possibile impostare il parametro su un riferimento con valore null.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Invoke(System.Object)">
            <summary>
            Richiama l&apos;azione.
            </summary>
            <param name="parameter">Il parametro dell&apos;azione. Se l&apos;azione non richiede un parametro, è possibile impostare il parametro su un riferimento con valore null.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.OnAttached">
            <summary>
            Chiamato dopo che l&apos;azione è associata a un AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.OnDetaching">
            <summary>
            Chiamato quando l&apos;azione viene scollegata dal suo AssociatedObject, ma prima che questo si verifichi.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.CreateInstanceCore">
            <summary>
            Se implementata in una classe derivata, crea una nuova istanza della classe derivata <see cref="T:System.Windows.Freezable"/>.
            </summary>
            <returns>La nuova istanza.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Attach(System.Windows.DependencyObject)">
            <summary>
            Associa all&apos;oggetto specificato.
            </summary>
            <param name="dependencyObject">L&apos;oggetto a cui associarsi.</param>
            <exception cref="T:System.InvalidOperationException">Impossibile ospitare la stessa TriggerAction su più di un oggetto per volta.</exception>
            <exception cref="T:System.InvalidOperationException">dependencyObject non soddisfa il vincolo di tipo TriggerAction.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Detach">
            <summary>
            Scollega questa istanza dall&apos;oggetto associato.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.IsEnabled">
            <summary>
            Recupera o imposta un valore che indica se l&apos;azione viene eseguita quando richiamata. Si tratta di una proprietà di dipendenza.
            </summary>
            <value>
            	<c>true</c> se l&apos;azione viene eseguita quando richiamata; <c>false</c> in caso contrario.
            </value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.AssociatedObject">
            <summary>
            Recupera l&apos;oggetto a cui questa azione è associata.
            </summary>
            <value>L&apos;oggetto associato.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.AssociatedObjectTypeConstraint">
            <summary>
            Recupera il vincolo di tipo dell&apos;oggetto associato.
            </summary>
            <value>Il vincolo di tipo dell&apos;oggetto associato.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.IsHosted">
            <summary>
            Recupera o imposta un valore che indica se questa istanza è associata.
            </summary>
            <value><c>true</c> se questa istanza è associata; <c>false</c> in caso contrario.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Recupera l&apos;oggetto associato.
            </summary>
            <value>L&apos;oggetto associato.</value>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction`1.#ctor">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:System.Windows.Interactivity.TriggerAction`1"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject">
            <summary>
            Recupera l&apos;oggetto a cui questa <see cref="T:System.Windows.Interactivity.TriggerAction`1"/> è associata.
            </summary>
            <value>L&apos;oggetto associato.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObjectTypeConstraint">
            <summary>
            Recupera il vincolo di tipo dell&apos;oggetto associato.
            </summary>
            <value>Il vincolo di tipo dell&apos;oggetto associato.</value>
        </member>
        <member name="M:System.Windows.Interactivity.InvokeCommandAction.Invoke(System.Object)">
            <summary>
            Richiama l&apos;azione.
            </summary>
            <param name="parameter">Il parametro dell&apos;azione. Se l&apos;azione non richiede un parametro, è possibile impostare il parametro su un riferimento con valore null.</param>
        </member>
        <member name="M:System.Windows.Interactivity.InvokeCommandAction.OnAttached">
            <summary>
            Chiamato dopo che la raccolta è associata a un AssociatedObject.
            </summary>
            <exception cref="T:System.InvalidOperationException">InvokeActionCommand deve essere ospitato su un Behavior.</exception>
        </member>
        <member name="P:System.Windows.Interactivity.InvokeCommandAction.CommandName">
            <summary>
            Recupera o imposta il nome del comando che questa azione deve richiamare.
            </summary>
            <value>Il nome del comando che questa azione deve richiamare.</value>
        </member>
        <member name="P:System.Windows.Interactivity.InvokeCommandAction.CommandParameter">
            <summary>
            Recupera o imposta il parametro comando.
            </summary>
            <value>Il parametro comando.</value>
            <remarks>Questo è il valore passato a ICommand.CanExecute e ICommand.Execute.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.NameResolvedEventArgs">
            <summary>
            Offre dati riguardo gli oggetti interessati durante la risoluzione di una modifica nome.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.NameResolver">
            <summary>
            Classe helper per gestire la logica di risoluzione di TargetName in un elemento di destinazione in base al contesto fornito da un elemento host.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.NameResolver.UpdateObjectFromName(System.Windows.DependencyObject)">
            <summary>
            Tenta di aggiornare l&apos;oggetto risolto dal nome all&apos;interno del contesto dell&apos;elemento di riferimento NameScope.
            </summary>
            <param name="oldObject">Il vecchio oggetto risolto.</param>
            <remarks>
            Ripristina la destinazione esistente e tenta di risolvere il TargetName corrente dal contesto dell&apos;host corrente. Se non può essere risolto dal contesto dell&apos;host, continua a risalire la struttura ad albero visuale fino a quando non viene risolto. Se non è stato risolto quando raggiunge la radice, imposta la destinazione su null e scrive un messaggio di avviso nell&apos;output di debug.
            </remarks>
        </member>
        <member name="E:System.Windows.Interactivity.NameResolver.ResolvedElementChanged">
            <summary>
            Si verifica quando l&apos;elemento risolto è cambiato.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.Name">
            <summary>
            Recupera o imposta il nome dell&apos;elemento per cercare di risolverlo.
            </summary>
            <value>Il nome che si tenta di risolvere.</value>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.Object">
            <summary>
            L&apos;oggetto risolto. Restituisce l&apos;elemento di riferimento se TargetName è nullo o vuoto, oppure se non è stata tentata una risoluzione.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.NameScopeReferenceElement">
            <summary>
            Recupera o imposta l&apos;elemento di riferimento da cui eseguire la risoluzione del nome.
            </summary>
            <value>L&apos;elemento di riferimento.</value>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.PendingReferenceElementLoad">
            <summary>
            Recupera o imposta un valore che indica se il caricamento dell&apos;elemento di riferimento è sospeso.
            </summary>
            <value>
            	<c>true</c> se [caricamento elemento di riferimento sospeso]; <c>false</c> in caso contrario.
            </value>
            <remarks>
            Se l&apos;host non è stato caricato, il nome non verrà risolto. In questo caso, ritardare la risoluzione e tracciare il fatto con questa proprietà.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TargetedTriggerAction`1">
            <summary>
            Rappresenta un&apos;azione che può essere utilizzata come destinazione per influenzare un oggetto diverso dal suo AssociatedObject.
            </summary>
            <typeparam name="T">Il vincolo di tipo sulla destinazione.</typeparam>
            <remarks>
            	TargetedTriggerAction estende TriggerAction per aggiungere informazioni di un altro elemento rispetto a quello a cui è associato. Questo consente a un utente di invocare l&apos;azione su un elemento diverso da quello a cui è associato in risposta a un&apos;attivazione di trigger. Eseguire l&apos;override di OnTargetChanged per eseguire l&apos;hook e l&apos;unhook dei gestori sull&apos;elemento di destinazione e l&apos;override di OnAttached/OnDetaching per l&apos;elemento associato. Il tipo di elemento di destinazione può essere vincolato dal parametro di tipo generic. Se è necessario il controllo sul tipo di AssociatedObject, impostare un TypeConstraintAttribute sul tipo derivato.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TargetedTriggerAction">
            <summary>
            Rappresenta un&apos;azione che può essere utilizzata come destinazione per influenzare un oggetto diverso dal suo AssociatedObject.
            </summary>
            <remarks>Questa è una classe infrastruttura. Gli autori di azioni devono derivare da TargetedTriggerAction&lt;T&gt; invece che da questa classe.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnTargetChangedImpl(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Chiamato quando la destinazione cambia.
            </summary>
            <param name="oldTarget">La vecchia destinazione.</param>
            <param name="newTarget">La nuova destinazione.</param>
            <remarks>Eseguire l&apos;override di questa funzione in classi derivate per eseguire l&apos;hook e l&apos;unhook della funzionalità dagli oggetti origine modificati.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnAttached">
            <summary>
            Chiamato dopo che l&apos;azione è associata a un AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnDetaching">
            <summary>
            Chiamato quando l&apos;azione viene scollegata dal suo AssociatedObject, ma prima che questo si verifichi.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.TargetName">
            <summary>
            Recupera o imposta il nome della destinazione. Se l&apos;impostazione di TargetName è stata annullata o non può essere risolto, la destinazione verrà impostata su AssociatedObject. Si tratta di una proprietà di dipendenza.
            </summary>
            <value>Il nome della destinazione.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.Target">
            <summary>
            Recupera l&apos;oggetto di destinazione. Se l&apos;impostazione di TargetName è stata annullata o non può essere risolto, si assume come valore AssociatedObject.
            </summary>
            <value>La destinazione.</value>
            <remarks>In generale, questa proprietà deve essere utilizzata al posto di AssociatedObject nelle classi derivate.</remarks>
            <exception cref="T:System.InvalidOperationException">L&apos;elemento di destinazione non soddisfa il vincolo di tipo.</exception>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.AssociatedObjectTypeConstraint">
            <summary>
            Recupera il vincolo di tipo dell&apos;oggetto associato.
            </summary>
            <value>Il vincolo di tipo dell&apos;oggetto associato.</value>
            <remarks>Definire un TypeConstraintAttribute su un tipo derivato per vincolare i tipi a cui può essere associato.</remarks>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.TargetTypeConstraint">
            <summary>
            Recupera il vincolo di tipo destinazione.
            </summary>
            <value>Il vincolo di tipo destinazione.</value>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction`1.#ctor">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:System.Windows.Interactivity.TargetedTriggerAction`1"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction`1.OnTargetChanged(`0,`0)">
            <summary>
            Chiamato quando la proprietà di destinazione cambia.
            </summary>
            <remarks>Sottoporre a override per eseguire l&apos;hook e l&apos;unhook della funzionalità sulla destinazione specificata, anziché su AssociatedObject.</remarks>
            <param name="oldTarget">La vecchia destinazione.</param>
            <param name="newTarget">La nuova destinazione.</param>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction`1.Target">
            <summary>
            Recupera l&apos;oggetto di destinazione. Se l&apos;impostazione di TargetName è stata annullata o non può essere risolto, si assume come valore AssociatedObject.
            </summary>
            <value>La destinazione.</value>
            <remarks>In generale, questa proprietà deve essere utilizzata al posto di AssociatedObject nelle classi derivate.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerActionCollection">
            <summary>
            Rappresenta una raccolta di azioni con un AssociatedObject condiviso e offre notifiche di modifica al suo contenuto quando AssociatedObject cambia.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.#ctor">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:System.Windows.Interactivity.TriggerActionCollection"/>.
            </summary>
            <remarks>Interna, perché non deve essere ereditata al di fuori di questo assembly.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.OnAttached">
            <summary>
            Chiamato immediatamente dopo che la raccolta è associata a un AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.OnDetaching">
            <summary>
            Chiamato quando la raccolta viene scollegata dal suo AssociatedObject, ma prima che questo si verifichi.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.ItemAdded(System.Windows.Interactivity.TriggerAction)">
            <summary>
            Chiamato quando un nuovo elemento viene aggiunto alla raccolta.
            </summary>
            <param name="item">Il nuovo elemento.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.ItemRemoved(System.Windows.Interactivity.TriggerAction)">
            <summary>
            Chiamato quando un elemento viene rimosso dalla raccolta.
            </summary>
            <param name="item">L&apos;elemento rimosso.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.CreateInstanceCore">
            <summary>
            Crea una nuova istanza della TriggerActionCollection.
            </summary>
            <returns>La nuova istanza.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerBase`1">
            <summary>
            Rappresenta un oggetto che può richiamare azioni in maniera condizionale.
            </summary>
            <typeparam name="T">Il tipo a cui è possibile associare questo trigger.</typeparam>
            <remarks>
            	TriggerBase è la classe base per il controllo delle azioni. Eseguire l&apos;override dei metodi OnAttached() e OnDetaching() per eseguire l&apos;hook e l&apos;unhook dei gestori sull&apos;elemento AssociatedObject. È possibile vincolare i tipi a cui associare un TriggerBase derivato specificando il parametro generic. Richiamare InvokeActions() per attivare tutte le azioni associate con questo TriggerBase.
            </remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase`1.#ctor">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:System.Windows.Interactivity.TriggerBase`1"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject">
            <summary>
            Recupera l&apos;oggetto a cui il trigger è associato.
            </summary>
            <value>L&apos;oggetto associato.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObjectTypeConstraint">
            <summary>
            Recupera il vincolo di tipo dell&apos;oggetto associato.
            </summary>
            <value>Il vincolo di tipo dell&apos;oggetto associato.</value>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerCollection">
            <summary>
             Rappresenta una raccolta di trigger con un AssociatedObject condiviso e offre notifiche di modifica del suo contenuto quando AssociatedObject cambia.
             </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.#ctor">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:System.Windows.Interactivity.TriggerCollection"/>.
            </summary>
            <remarks>Interna, perché non deve essere ereditata al di fuori di questo assembly.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.OnAttached">
            <summary>
            Chiamato immediatamente dopo che la raccolta è associata a un AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.OnDetaching">
            <summary>
            Chiamato quando la raccolta viene scollegata dal suo AssociatedObject, ma prima che questo si verifichi.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.ItemAdded(System.Windows.Interactivity.TriggerBase)">
            <summary>
            Chiamato quando un nuovo elemento viene aggiunto alla raccolta.
            </summary>
            <param name="item">Il nuovo elemento.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.ItemRemoved(System.Windows.Interactivity.TriggerBase)">
            <summary>
            Chiamato quando un elemento viene rimosso dalla raccolta.
            </summary>
            <param name="item">L&apos;elemento rimosso.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.CreateInstanceCore">
            <summary>
            Crea una nuova istanza della <see cref="T:System.Windows.Interactivity.TriggerCollection"/>.
            </summary>
            <returns>La nuova istanza.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.TypeConstraintAttribute">
            <summary>
            Specificare i vincoli di tipo su AssociatedObject di TargetedTriggerAction e EventTriggerBase.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TypeConstraintAttribute.#ctor(System.Type)">
            <summary>
            Inizializza una nuova istanza della classe <see cref="T:System.Windows.Interactivity.TypeConstraintAttribute"/>.
            </summary>
            <param name="constraint">Il tipo di vincolo.</param>
        </member>
        <member name="P:System.Windows.Interactivity.TypeConstraintAttribute.Constraint">
            <summary>
            Recupera il tipo di vincolo.
            </summary>
            <value>Il tipo di vincolo.</value>
        </member>
        <member name="T:ExceptionStringTable">
            <summary>
              Una classe di risorse fortemente tipizzata per la ricerca di stringhe localizzate e così via.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ResourceManager">
            <summary>
              Restituisce l&apos;istanza ResourceManager memorizzata nella cache utilizzata da questa classe.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.Culture">
            <summary>
              Esegue l&apos;override della proprietà CurrentUICulture del thread corrente per tutte le ricerche di risorse eseguite utilizzando questa classe di risorse fortemente tipizzata.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostBehaviorCollectionMultipleTimesExceptionMessage">
            <summary>
              Ricerca una stringa localizzata simile a Impossibile impostare oggetti multipli per la stessa BehaviorCollection.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostBehaviorMultipleTimesExceptionMessage">
            <summary>
              Ricerca una stringa localizzata simile a Impossibile associare un&apos;istanza di un Behavior a più di un oggetto alla volta.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerActionMultipleTimesExceptionMessage">
            <summary>
              Ricerca una stringa localizzata simile a Impossibile ospitare un&apos;istanza di TriggerAction in più TriggerCollections simultaneamente. Rimuoverla da una TriggerCollection prima di aggiungerla a un&apos;altra.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerCollectionMultipleTimesExceptionMessage">
            <summary>
              Ricerca una stringa localizzata simile a Impossibile impostare oggetti multipli per la stessa TriggerCollection.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerMultipleTimesExceptionMessage">
            <summary>
              Ricerca una stringa localizzata simile a Impossibile associare un&apos;istanza di un trigger a più di un oggetto alla volta.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CommandDoesNotExistOnBehaviorWarningMessage">
            <summary>
              Ricerca una stringa localizzata simile a Il comando &quot;{0}&quot; non esiste o non è esposto pubblicamente in {1}.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.DefaultTriggerAttributeInvalidTriggerTypeSpecifiedExceptionMessage">
            <summary>
              Ricerca una stringa localizzata simile a &quot;{0}&quot; non è un tipo valido per il parametro TriggerType. Assicurarsi che &quot;{0}&quot; derivi da TriggerBase.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.DuplicateItemInCollectionExceptionMessage">
            <summary>
              Ricerca una stringa localizzata simile a Impossibile aggiungere la stessa istanza di &quot;{0}&quot; a &quot;{1}&quot; più di una volta.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.EventTriggerCannotFindEventNameExceptionMessage">
            <summary>
              Ricerca una stringa localizzata simile a Impossibile trovare un evento denominato &quot;{0}&quot; nel tipo &quot;{1}&quot;.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.InvokeActionCommandMustBeHostedOnBehaviorExceptionMessage">
            <summary>
              Ricerca una stringa localizzata simile a InvokeCommandAction deve essere associato a un Behavior. Per eseguire questa operazione, aggiungerlo alla raccolta Actions di un Trigger nella raccolta Triggers di un oggetto Behavior.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.RetargetedTypeConstraintViolatedExceptionMessage">
            <summary>
              Ricerca una stringa localizzata simile a Impossibile per un oggetto di tipo &quot;{0}&quot; avere una proprietà {3} di tipo &quot;{1}&quot;. Le istanze di tipo &quot;{0}&quot; possono solo avere una proprietà {3} di tipo &quot;{2}&quot;.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.TypeConstraintViolatedExceptionMessage">
            <summary>
              Ricerca una stringa localizzata simile a Impossibile associare il tipo &quot;{0}&quot; al tipo &quot;{1}&quot;. È possibile associare istanze di tipo &quot;{0}&quot; solo a oggetti di tipo &quot;{2}&quot;.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.UnableToResolveTargetNameWarningMessage">
            <summary>
              Ricerca una stringa localizzata simile a Impossibile risolvere TargetName &quot;{0}&quot;.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\fr\System.Windows.Interactivity.xml ===
﻿<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Interactivity</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Interactivity.AttachableCollection`1">
            <summary>
            Représente une collection de IAttachedObject avec un AssociatedObject partagé et fournit des notifications de modification à son contenu lorsque cet AssociatedObject change.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.IAttachedObject">
            <summary>
            Interface pour un objet pouvant être attaché à un autre objet.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.IAttachedObject.Attach(System.Windows.DependencyObject)">
            <summary>
            S&apos;attache à l&apos;objet spécifié.
            </summary>
            <param name="dependencyObject">Objet auquel attacher.</param>
        </member>
        <member name="M:System.Windows.Interactivity.IAttachedObject.Detach">
            <summary>
            Détache cette instance de son objet associé.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.IAttachedObject.AssociatedObject">
            <summary>
            Obtient l&apos;objet associé.
            </summary>
            <value>Objet associé.</value>
            <remarks>Représente l&apos;objet auquel l&apos;instance est attachée.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Interactivity.AttachableCollection`1"/>.
            </summary>
            <remarks>Interne, car elle ne doit pas être héritée en dehors de cet assembly.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.OnAttached">
            <summary>
            Appelé immédiatement une fois que la collection est attachée à un AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.OnDetaching">
            <summary>
            Appelé lorsque la collection est détachée de son AssociatedObject, mais avant qu&apos;il ne se soit produit réellement.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.ItemAdded(`0)">
            <summary>
            Appelé lorsqu&apos;un nouvel élément est ajouté à la collection.
            </summary>
            <param name="item">Nouvel élément.</param>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.ItemRemoved(`0)">
            <summary>
            Appelé lorsqu&apos;un élément est supprimé de la collection.
            </summary>
            <param name="item">Élément supprimé.</param>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.VerifyAdd(`0)">
            <exception cref="T:System.InvalidOperationException">Impossible d&apos;ajouter plusieurs fois l&apos;instance à une collection.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.Attach(System.Windows.DependencyObject)">
            <summary>
            S&apos;attache à l&apos;objet spécifié.
            </summary>
            <param name="dependencyObject">Objet auquel attacher.</param>
            <exception cref="T:System.InvalidOperationException">Le IAttachedObject est déjà attaché à un autre objet.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.Detach">
            <summary>
            Détache cette instance de son objet associé.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.AttachableCollection`1.AssociatedObject">
            <summary>
            Objet sur lequel la collection est hébergée.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.AttachableCollection`1.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Obtient l&apos;objet associé.
            </summary>
            <value>Objet associé.</value>
        </member>
        <member name="T:System.Windows.Interactivity.Behavior`1">
            <summary>
            Encapsule des informations d&apos;état et zéro ou plusieurs ICommands dans un objet attachable.
            </summary>
            <typeparam name="T">Type auquel le <see cref="T:System.Windows.Interactivity.Behavior`1"/> peut être attaché.</typeparam>
            <remarks>
            	Le comportement est la classe de base permettant de fournir un état attachable et des commandes à un objet. Le paramètre générique peut contrôler les types auxquels le comportement peut être attaché. Remplacez les méthodes OnAttached() et OnDetaching() pour connecter et déconnecter tous les gestionnaires nécessaires à partir de l&apos;AssociatedObject.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.Behavior">
            <summary>
            Encapsule des informations d&apos;état et zéro ou plusieurs ICommands dans un objet attachable.
            </summary>
            <remarks>Il s&apos;agit d&apos;une classe d&apos;infrastructure. Les auteurs de comportements doivent dériver de Behavior&lt;T&gt; plutôt que de cette classe.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.OnAttached">
            <summary>
            Appelé une fois que le comportement est attaché à un AssociatedObject.
            </summary>
            <remarks>Substituez-le pour connecter la fonctionnalité à l&apos;AssociatedObject.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.OnDetaching">
            <summary>
            Appelé lorsque le comportement est détaché de son AssociatedObject, mais avant qu&apos;il ne se soit produit réellement.
            </summary>
            <remarks>Substituez-le pour déconnecter la fonctionnalité de l&apos;AssociatedObject.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.Attach(System.Windows.DependencyObject)">
            <summary>
            S&apos;attache à l&apos;objet spécifié.
            </summary>
            <param name="dependencyObject">Objet auquel attacher.</param>
            <exception cref="T:System.InvalidOperationException">Le comportement est déjà hébergé sur un autre élément.</exception>
            <exception cref="T:System.InvalidOperationException">dependencyObject ne satisfait pas la contrainte de type de comportement.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.Detach">
            <summary>
            Détache cette instance de son objet associé.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.AssociatedType">
            <summary>
            Type auquel ce comportement peut être attaché.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.AssociatedObject">
            <summary>
            Obtient l&apos;objet auquel ce comportement est attaché.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Obtient l&apos;objet associé.
            </summary>
            <value>Objet associé.</value>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior`1.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Interactivity.Behavior`1"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior`1.AssociatedObject">
            <summary>
            Obtient l&apos;objet auquel ce <see cref="T:System.Windows.Interactivity.Behavior`1"/> est attaché.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.BehaviorCollection">
            <summary>
            Représente une collection de comportements avec un AssociatedObject partagé et fournit des notifications de modification à son contenu lorsque cet AssociatedObject change.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Interactivity.BehaviorCollection"/>.
            </summary>
            <remarks>Interne, car elle ne doit pas être héritée en dehors de cet assembly.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.OnAttached">
            <summary>
            Appelé immédiatement une fois que la collection est attachée à un AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.OnDetaching">
            <summary>
            Appelé lorsque la collection est détachée de son AssociatedObject, mais avant qu&apos;il ne se soit produit réellement.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.ItemAdded(System.Windows.Interactivity.Behavior)">
            <summary>
            Appelé lorsqu&apos;un nouvel élément est ajouté à la collection.
            </summary>
            <param name="item">Nouvel élément.</param>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.ItemRemoved(System.Windows.Interactivity.Behavior)">
            <summary>
            Appelé lorsqu&apos;un élément est supprimé de la collection.
            </summary>
            <param name="item">Élément supprimé.</param>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.CreateInstanceCore">
            <summary>
            Crée une nouvelle instance de la BehaviorCollection.
            </summary>
            <returns>Nouvelle instance.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.CustomPropertyValueEditor">
            <summary>
            Énumère les valeurs possibles pour les éditeurs de valeurs de propriétés réutilisables.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.Element">
            <summary>
            Utilise le sélecteur d&apos;éléments, s&apos;il est pris en charge, pour modifier cette propriété au moment du design.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.Storyboard">
            <summary>
            Utilise le sélecteur de tables de montage séquentiel, s&apos;il est pris en charge, pour modifier cette propriété au moment du design.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.StateName">
            <summary>
            Utilise le sélecteur d&apos;états, s&apos;il est pris en charge, pour modifier cette propriété au moment du design.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.CustomPropertyValueEditorAttribute">
            <summary>
            Associe le type d&apos;éditeur donné à la propriété à laquelle le CustomPropertyValueEditor est appliqué.
            </summary>
            <remarks>Utilisez cet attribut pour améliorer l&apos;édition au moment du design pour les propriétés qui indiquent des éléments (par nom), des tables de montage séquentiel ou des états (par nom).</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.CustomPropertyValueEditorAttribute.#ctor(System.Windows.Interactivity.CustomPropertyValueEditor)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Interactivity.CustomPropertyValueEditorAttribute"/>.
            </summary>
            <param name="customPropertyValueEditor">Éditeur de valeur de propriété personnalisé.</param>
        </member>
        <member name="P:System.Windows.Interactivity.CustomPropertyValueEditorAttribute.CustomPropertyValueEditor">
            <summary>
            Obtient ou définit l&apos;éditeur de valeur de propriété personnalisé.
            </summary>
            <value>Éditeur de valeur de propriété personnalisé.</value>
        </member>
        <member name="T:System.Windows.Interactivity.DefaultTriggerAttribute">
            <summary>
            Fournit des informations d&apos;outils de conception sur le <see cref="T:System.Windows.Interactivity.TriggerBase"/> à instancier pour une action ou commande donnée.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.#ctor(System.Type,System.Type,System.Object)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Interactivity.DefaultTriggerAttribute"/>.
            </summary>
            <param name="targetType">Type auquel cet attribut s&apos;applique.</param>
            <param name="triggerType">Type de <see cref="T:System.Windows.Interactivity.TriggerBase"/> à instancier.</param>
            <param name="parameters">Argument unique pour le <see cref="T:System.Windows.Interactivity.TriggerBase"/> spécifié.</param>
            <exception cref="T:System.ArgumentException"><c cref="F:System.Windows.Interactivity.DefaultTriggerAttribute.triggerType"/> n&apos;est pas dérivé de TriggerBase.</exception>
            <remarks>Ce constructeur s&apos;avère utile si le <see cref="T:System.Windows.Interactivity.TriggerBase"/> spécifié possède un seul argument. Le code obtenu sera conforme CLS.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.#ctor(System.Type,System.Type,System.Object[])">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Interactivity.DefaultTriggerAttribute"/>.
            </summary>
            <param name="targetType">Type auquel cet attribut s&apos;applique.</param>
            <param name="triggerType">Type de <see cref="T:System.Windows.Interactivity.TriggerBase"/> à instancier.</param>
            <param name="parameters">Argument du constructeur pour le <see cref="T:System.Windows.Interactivity.TriggerBase"/> spécifié.</param>
            <exception cref="T:System.ArgumentException"><c cref="F:System.Windows.Interactivity.DefaultTriggerAttribute.triggerType"/> n&apos;est pas dérivé de TriggerBase.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.Instantiate">
            <summary>
            Instancie cette instance.
            </summary>
            <returns><see cref="T:System.Windows.Interactivity.TriggerBase"/> spécifié par le DefaultTriggerAttribute.</returns>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.TargetType">
            <summary>
            Obtient le type auquel ce DefaultTriggerAttribute s&apos;applique.
            </summary>
            <value>Type auquel ce DefaultTriggerAttribute s&apos;applique.</value>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.TriggerType">
            <summary>
            Obtient le type de <see cref="T:System.Windows.Interactivity.TriggerBase"/> à instancier.
            </summary>
            <value>Type de <see cref="T:System.Windows.Interactivity.TriggerBase"/> à instancier.</value>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.Parameters">
            <summary>
            Obtient les paramètres à passer au constructeur <see cref="T:System.Windows.Interactivity.TriggerBase"/>.
            </summary>
            <value>Paramètres à passer au constructeur <see cref="T:System.Windows.Interactivity.TriggerBase"/>.</value>
        </member>
        <member name="T:System.Windows.Interactivity.EventTrigger">
            <summary>
            Déclencheur qui écoute un événement spécifié sur sa source et qui se déclenche lorsque cet événement est déclenché.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.EventTriggerBase`1">
            <summary>
            Représente un déclencheur capable d&apos;écouter un élément autre que son AssociatedObject.
            </summary>
            <typeparam name="T">Type auquel ce déclencheur peut être associé.</typeparam>
            <remarks>
            	EventTriggerBase étend TriggerBase pour ajouter les connaissances d&apos;un autre élément que celui auquel il est attaché. Cela permet à l&apos;utilisateur d&apos;attacher une paire Déclencheur/Action à un seul élément et d&apos;invoquer l&apos;action en réponse à une modification dans un autre élément ailleurs. Remplacez OnSourceChanged pour connecter ou déconnecter des gestionnaires sur l&apos;élément source, et OnAttached/OnDetaching pour l&apos;élément associé. Le paramètre de type générique peut contraindre le type de l&apos;élément Source. Si vous avez besoin de contrôler le type de l&apos;AssociatedObject, définissez un TypeConstraintAttribute sur votre type dérivé.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.EventTriggerBase">
            <summary>
            Représente un déclencheur capable d&apos;écouter un élément autre que son AssociatedObject.
            </summary>
            <remarks>Il s&apos;agit d&apos;une classe d&apos;infrastructure. Les auteurs de déclencheurs doivent dériver d&apos;EventTriggerBase&lt;T&gt; plutôt que de cette classe.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerBase">
            <summary>
            Représente un objet capable d&apos;invoquer des actions de manière conditionnelle.
            </summary>
            <remarks>Il s&apos;agit d&apos;une classe d&apos;infrastructure. Les auteurs de déclencheurs doivent dériver de Trigger&lt;T&gt; plutôt que de cette classe.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.InvokeActions(System.Object)">
            <summary>
            Invoque toutes les actions associées à ce déclencheur.
            </summary>
            <remarks>Des classes dérivées doivent l&apos;appeler pour déclencher le déclencheur.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.OnAttached">
            <summary>
            Appelé une fois que le déclencheur est attaché à un AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.OnDetaching">
            <summary>
            Appelé lorsque le déclencheur est détaché de son AssociatedObject, mais avant qu&apos;il ne se soit produit réellement.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.CreateInstanceCore">
            <summary>
            Crée une nouvelle instance de la classe dérivée TriggerBase.
            </summary>
            <returns>Nouvelle instance.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.Attach(System.Windows.DependencyObject)">
            <summary>
            S&apos;attache à l&apos;objet spécifié.
            </summary>
            <param name="dependencyObject">Objet auquel attacher.</param>
            <exception cref="T:System.InvalidOperationException">Impossible d&apos;héberger le même déclencheur sur plusieurs objets en même temps.</exception>
            <exception cref="T:System.InvalidOperationException">dependencyObject ne satisfait pas la contrainte de type de déclencheur.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.Detach">
            <summary>
            Détache cette instance de son objet associé.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.AssociatedObject">
            <summary>
            Obtient l&apos;objet auquel le déclencheur est attaché.
            </summary>
            <value>Objet associé.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.AssociatedObjectTypeConstraint">
            <summary>
            Obtient la contrainte de type de l&apos;objet associé.
            </summary>
            <value>Contrainte de type d&apos;objet associé.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.Actions">
            <summary>
            Obtient les actions associées à ce déclencheur.
            </summary>
            <value>Actions associées à ce déclencheur.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Obtient l&apos;objet associé.
            </summary>
            <value>Objet associé.</value>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.GetEventName">
            <summary>
            Spécifie le nom de l&apos;événement que cet EventTriggerBase écoute.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnEvent(System.EventArgs)">
            <summary>
            Appelé lorsque l&apos;événement associé à cet EventTriggerBase se déclenche. Par défaut, il invoque toutes les actions sur le déclencheur.
            </summary>
            <param name="eventArgs">Instance <see cref="T:System.EventArgs"/> contenant les données d&apos;événement.</param>
            <remarks>Remplacez-la pour fournir un contrôle plus précis sur le moment auquel les actions associées à ce déclencheur sont invoquées.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnSourceChangedImpl(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Appelé lorsque la source change.
            </summary>
            <param name="oldSource">Ancienne source.</param>
            <param name="newSource">Nouvelle source.</param>
            <remarks>Cette fonction doit être remplacée dans des classes dérivées pour connecter la fonctionnalité et la déconnecter des objets source modifiés.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnAttached">
            <summary>
            Appelé une fois que le déclencheur est attaché à un AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnDetaching">
            <summary>
            Appelé lorsque le déclencheur est détaché de son AssociatedObject, mais avant qu&apos;il ne se soit produit réellement.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.RegisterEvent(System.Object,System.String)">
            <exception cref="T:System.ArgumentException">Impossible de trouver eventName sur la cible.</exception>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.AssociatedObjectTypeConstraint">
            <summary>
            Obtient la contrainte de type de l&apos;objet associé.
            </summary>
            <value>Contrainte de type d&apos;objet associé.</value>
            <remarks>Définissez un TypeConstraintAttribute sur un type dérivé pour contraindre les types auxquels il peut être attaché.</remarks>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.SourceTypeConstraint">
            <summary>
            Obtient la contrainte de type de source.
            </summary>
            <value>Contrainte de type de source.</value>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.SourceName">
            <summary>
            Obtient ou définit le nom de l&apos;élément que cet EventTriggerBase écoute en tant que source. Si le nom n&apos;est pas défini ou ne peut pas être résolu, l&apos;AssociatedObject est utilisé.  Il s&apos;agit d&apos;une propriété de dépendance.
            </summary>
            <value>Nom de l&apos;élément source.</value>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.Source">
            <summary>
            Obtient la source résolue. Si <c ref="SourceName"/> n&apos;est pas défini ou ne peut pas être résolu, AssociatedObject est utilisé par défaut.
            </summary>
            <value>Objet source résolue.</value>
            <remarks>En général, cette propriété doit être utilisée à la place de l&apos;AssociatedObject dans des classes dérivées.</remarks>
            <exception cref="T:System.InvalidOperationException">L&apos;élément vers lequel pointe <c cref="P:System.Windows.Interactivity.EventTriggerBase.Source"/> ne satisfait pas la contrainte de type.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase`1.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Interactivity.EventTriggerBase`1"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase`1.OnSourceChanged(`0,`0)">
            <summary>
            Appelé lorsque la propriété de la source change.
            </summary>
            <remarks>Remplacez-le pour connecter la fonctionnalité et la déconnecter de la source spécifiée, plutôt que de l&apos;AssociatedObject.</remarks>
            <param name="oldSource">Ancienne source.</param>
            <param name="newSource">Nouvelle source.</param>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase`1.Source">
            <summary>
            Obtient la source résolue. Si <c ref="SourceName"/> n&apos;est pas défini ou ne peut pas être résolu, AssociatedObject est utilisé par défaut.
            </summary>
            <value>Objet source résolue.</value>
            <remarks>En général, cette propriété doit être utilisée à la place de l&apos;AssociatedObject dans des classes dérivées.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTrigger.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Interactivity.EventTrigger"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTrigger.#ctor(System.String)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Interactivity.EventTrigger"/>.
            </summary>
            <param name="eventName">Nom de l&apos;événement.</param>
        </member>
        <member name="P:System.Windows.Interactivity.EventTrigger.EventName">
            <summary>
            Obtient ou définit le nom de l&apos;événement à écouter. Il s&apos;agit d&apos;une propriété de dépendance.
            </summary>
            <value>Nom de l&apos;événement.</value>
        </member>
        <member name="T:System.Windows.Interactivity.Interaction">
            <summary>
            Classe statique qui possède les propriétés jointes des déclencheurs et comportements. Gère la propagation des notifications de modification de l&apos;AssociatedObject.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.Interaction.TriggersProperty">
            <summary>
            Cette propriété est utilisée en tant que magasin de stockage interne pour la propriété jointe des déclencheurs publics.
            </summary>
            <remarks>
            Cette propriété n&apos;est pas exposée publiquement. Cela force les clients à utiliser les méthodes GetTriggers et SetTriggers pour accéder à la collection, afin de veiller à ce qu&apos;elle existe et qu&apos;elle soit définie avant d&apos;être utilisée.
            </remarks>
        </member>
        <member name="F:System.Windows.Interactivity.Interaction.BehaviorsProperty">
            <summary>
            Cette propriété est utilisée en tant que magasin de stockage interne pour la propriété jointe des comportements publics.
            </summary>
            <remarks>
            Cette propriété n&apos;est pas exposée publiquement. Cela force les clients à utiliser les méthodes GetBehaviors et SetBehaviors pour accéder à la collection, afin de veiller à ce qu&apos;elle existe et qu&apos;elle soit définie avant d&apos;être utilisée.
            </remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.GetTriggers(System.Windows.DependencyObject)">
            <summary>
            Obtient la TriggerCollection contenant les déclencheurs associés à l&apos;objet spécifié.
            </summary>
            <param name="obj">Objet à partir duquel récupérer les déclencheurs.</param>
            <returns>TriggerCollection contenant les déclencheurs associés à l&apos;objet spécifié.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.GetBehaviors(System.Windows.DependencyObject)">
            <summary>
            Obtient la <see cref="T:System.Windows.Interactivity.BehaviorCollection"/> associée à l&apos;objet spécifié.
            </summary>
            <param name="obj">Objet à partir duquel récupérer la <see cref="T:System.Windows.Interactivity.BehaviorCollection"/>.</param>
            <returns><see cref="T:System.Windows.Interactivity.BehaviorCollection"/> contenant les comportements associés à l&apos;objet spécifié.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.OnBehaviorsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <exception cref="T:System.InvalidOperationException">Impossible d&apos;héberger la même BehaviorCollection sur plusieurs objets en même temps.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.OnTriggersChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <exception cref="T:System.InvalidOperationException">Impossible d&apos;héberger la même TriggerCollection sur plusieurs objets en même temps.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.IsElementLoaded(System.Windows.FrameworkElement)">
            <summary>
            Fonction d&apos;application auxiliaire qui remplace FrameworkElement.IsLoaded, étant donné que Silverlight ne comporte pas de telle propriété.
            </summary>
            <param name="element">Élément d&apos;intérêt.</param>
            <returns>True si l&apos;élément a été chargé ; sinon, false.</returns>
        </member>
        <member name="P:System.Windows.Interactivity.Interaction.ShouldRunInDesignMode">
            <summary>
            Obtient ou définit une valeur qui indique s&apos;il convient de procéder à l&apos;exécution comme en mode design.
            </summary>
            <value>
            	<c>true</c> si [l&apos;exécution doit être en mode design] ; sinon, <c>false</c>.
            </value>
            <remarks>À ne pas utiliser en dehors des tests unitaires.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.InvokeCommandAction">
            <summary>
            Exécute une action spécifiée sur le comportement hôte lorsqu&apos;elle est appelée.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerAction`1">
            <summary>
            Représente un objet attachable qui encapsule une unité de fonctionnalité.
            </summary>
            <typeparam name="T">Type auquel cette action peut être attachée.</typeparam>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerAction">
            <summary>
            Représente un objet attachable qui encapsule une unité de fonctionnalité.
            </summary>
            <remarks>Il s&apos;agit d&apos;une classe d&apos;infrastructure. Les auteurs d&apos;actions doivent dériver de TriggerAction&lt;T&gt; plutôt que de cette classe.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.CallInvoke(System.Object)">
            <summary>
            Tentatives d&apos;appel de l&apos;action.
            </summary>
            <param name="parameter">Paramètre de l&apos;action. Si l&apos;action ne nécessite pas de paramètre, le paramètre peut être défini sur une référence null.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Invoke(System.Object)">
            <summary>
            Invoque l&apos;action.
            </summary>
            <param name="parameter">Paramètre de l&apos;action. Si l&apos;action ne nécessite pas de paramètre, le paramètre peut être défini sur une référence null.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.OnAttached">
            <summary>
            Appelé une fois que l&apos;action est attachée à un AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.OnDetaching">
            <summary>
            Appelé lorsque l&apos;action est détachée de son AssociatedObject, mais avant qu&apos;il ne se soit produit réellement.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.CreateInstanceCore">
            <summary>
            Dans le cadre d&apos;une implémentation dans une classe dérivée, crée une nouvelle instance de la classe dérivée <see cref="T:System.Windows.Freezable"/>.
            </summary>
            <returns>Nouvelle instance.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Attach(System.Windows.DependencyObject)">
            <summary>
            S&apos;attache à l&apos;objet spécifié.
            </summary>
            <param name="dependencyObject">Objet auquel attacher.</param>
            <exception cref="T:System.InvalidOperationException">Impossible d&apos;héberger la même TriggerAction sur plusieurs objets en même temps.</exception>
            <exception cref="T:System.InvalidOperationException">dependencyObject ne satisfait pas la contrainte de type de TriggerAction.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Detach">
            <summary>
            Détache cette instance de son objet associé.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.IsEnabled">
            <summary>
            Obtient ou définit une valeur qui indique si cette action s&apos;exécute lorsqu&apos;elle est invoquée. Il s&apos;agit d&apos;une propriété de dépendance.
            </summary>
            <value>
            	<c>true</c> si cette action est exécutée lorsqu&apos;elle est invoquée ; sinon, <c>false</c>.
            </value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.AssociatedObject">
            <summary>
            Obtient l&apos;objet auquel cette action est attachée.
            </summary>
            <value>Objet associé.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.AssociatedObjectTypeConstraint">
            <summary>
            Obtient la contrainte de type d&apos;objet associé.
            </summary>
            <value>Contrainte de type d&apos;objet associé.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.IsHosted">
            <summary>
            Obtient ou définit une valeur qui indique si cette instance est attachée.
            </summary>
            <value><c>true</c> si cette instance est attachée ; sinon, <c>false</c>.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            Obtient l&apos;objet associé.
            </summary>
            <value>Objet associé.</value>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction`1.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Interactivity.TriggerAction`1"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject">
            <summary>
            Obtient l&apos;objet auquel ce <see cref="T:System.Windows.Interactivity.TriggerAction`1"/> est attaché.
            </summary>
            <value>Objet associé.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObjectTypeConstraint">
            <summary>
            Obtient la contrainte de type d&apos;objet associé.
            </summary>
            <value>Contrainte de type d&apos;objet associé.</value>
        </member>
        <member name="M:System.Windows.Interactivity.InvokeCommandAction.Invoke(System.Object)">
            <summary>
            Invoque l&apos;action.
            </summary>
            <param name="parameter">Paramètre de l&apos;action. Si l&apos;action ne nécessite pas de paramètre, le paramètre peut être défini sur une référence null.</param>
        </member>
        <member name="M:System.Windows.Interactivity.InvokeCommandAction.OnAttached">
            <summary>
            Appelé une fois que la collection est attachée à un AssociatedObject.
            </summary>
            <exception cref="T:System.InvalidOperationException">InvokeActionCommand doit être hébergée sur un comportement.</exception>
        </member>
        <member name="P:System.Windows.Interactivity.InvokeCommandAction.CommandName">
            <summary>
            Obtient ou définit le nom de la commande que cette action doit invoquer.
            </summary>
            <value>Nom de la commande que cette action doit invoquer.</value>
        </member>
        <member name="P:System.Windows.Interactivity.InvokeCommandAction.CommandParameter">
            <summary>
            Obtient ou définit le paramètre de la commande.
            </summary>
            <value>Paramètre de la commande.</value>
            <remarks>Il s&apos;agit de la valeur passée à ICommand.CanExecute et ICommand.Execute.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.NameResolvedEventArgs">
            <summary>
            Fournit des données sur les objets qui ont été affectés lors de la résolution d&apos;un changement de nom.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.NameResolver">
            <summary>
            Classe d&apos;application auxiliaire permettant de gérer la logique de résolution d&apos;un TargetName en élément Target en fonction du contexte fourni par un élément hôte.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.NameResolver.UpdateObjectFromName(System.Windows.DependencyObject)">
            <summary>
            Tentatives de mise à jour de l&apos;objet résolu à partir du nom dans le contexte de l&apos;élément de référence NameScope.
            </summary>
            <param name="oldObject">Ancien objet résolu.</param>
            <remarks>
            Réinitialise la cible existante et tente de résoudre le TargetName actuel à partir du contexte de l&apos;hôte actuel. S&apos;il ne parvient pas à effectuer la résolution à partir du contexte de l&apos;hôte, il continue à remonter l&apos;arborescence d&apos;éléments visuels jusqu&apos;à ce qu&apos;il y parvienne. Si la résolution n&apos;est pas effectuée lorsqu&apos;il atteint la racine, il définit la cible sur null et écrit un message d&apos;avertissement dans la sortie de débogage.
            </remarks>
        </member>
        <member name="E:System.Windows.Interactivity.NameResolver.ResolvedElementChanged">
            <summary>
            Se produit lorsque l&apos;élément résolu a changé.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.Name">
            <summary>
            Obtient ou définit le nom de l&apos;élément à essayer de résoudre.
            </summary>
            <value>Nom à essayer de résoudre.</value>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.Object">
            <summary>
            Objet résolu. Renvoie l&apos;élément de référence si TargetName est nul ou vide, ou si aucune résolution n&apos;a été tentée.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.NameScopeReferenceElement">
            <summary>
            Obtient ou définit l&apos;élément de référence à partir duquel effectuer la résolution de nom.
            </summary>
            <value>Élément de référence.</value>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.PendingReferenceElementLoad">
            <summary>
            Obtient ou définit une valeur qui indique si le chargement de l&apos;élément de référence est en attente.
            </summary>
            <value>
            	<c>true</c> si [chargement de l&apos;élément de référence en attente] ; sinon, <c>false</c>.
            </value>
            <remarks>
            Si l&apos;hôte n&apos;a pas été chargé, le nom n&apos;est pas résolu. Le cas échéant, reportez la résolution et suivez ce fait à l&apos;aide de cette propriété.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TargetedTriggerAction`1">
            <summary>
            Représente une action pouvant être ciblée pour affecter un objet autre que son AssociatedObject.
            </summary>
            <typeparam name="T">Contrainte de type sur la cible.</typeparam>
            <remarks>
            	TargetedTriggerAction étend TriggerAction pour ajouter les connaissances d&apos;un autre élément que celui auquel il est attaché. Cela permet à l&apos;utilisateur d&apos;invoquer l&apos;action sur un élément autre que celui auquel elle est attachée en réponse à un déclenchement de déclencheur. Remplacez OnTargetChanged pour connecter ou déconnecter des gestionnaires sur l&apos;élément cible, et OnAttached/OnDetaching pour l&apos;élément associé. Le paramètre de type générique peut contraindre le type de l&apos;élément cible. Si vous avez besoin de contrôler le type de l&apos;AssociatedObject, définissez un TypeConstraintAttribute sur votre type dérivé.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TargetedTriggerAction">
            <summary>
            Représente une action pouvant être ciblée pour affecter un objet autre que son AssociatedObject.
            </summary>
            <remarks>Il s&apos;agit d&apos;une classe d&apos;infrastructure. Les auteurs d&apos;actions doivent dériver de TargetedTriggerAction&lt;T&gt; plutôt que de cette classe.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnTargetChangedImpl(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            Appelé lorsque la cible change.
            </summary>
            <param name="oldTarget">Ancienne cible.</param>
            <param name="newTarget">Nouvelle cible.</param>
            <remarks>Cette fonction doit être remplacée dans des classes dérivées pour connecter la fonctionnalité et la déconnecter des objets source modifiés.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnAttached">
            <summary>
            Appelé une fois que l&apos;action est attachée à un AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnDetaching">
            <summary>
            Appelé lorsque l&apos;action est détachée de son AssociatedObject, mais avant qu&apos;il ne se soit produit réellement.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.TargetName">
            <summary>
            Obtient ou définit le nom de la cible. Si TargetName n&apos;est pas défini ou ne peut pas être résolu, la cible par défaut est AssociatedObject. Il s&apos;agit d&apos;une propriété de dépendance.
            </summary>
            <value>Nom de la cible.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.Target">
            <summary>
            Obtient l&apos;objet cible. Si TargetName n&apos;est pas défini ou ne peut pas être résolu, AssociatedObject est utilisé par défaut.
            </summary>
            <value>Cible.</value>
            <remarks>En général, cette propriété doit être utilisée à la place de l&apos;AssociatedObject dans des classes dérivées.</remarks>
            <exception cref="T:System.InvalidOperationException">L&apos;élément cible ne satisfait pas la contrainte de type.</exception>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.AssociatedObjectTypeConstraint">
            <summary>
            Obtient la contrainte de type d&apos;objet associé.
            </summary>
            <value>Contrainte de type d&apos;objet associé.</value>
            <remarks>Définissez un TypeConstraintAttribute sur un type dérivé pour contraindre les types auxquels il peut être attaché.</remarks>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.TargetTypeConstraint">
            <summary>
            Obtient la contrainte de type de cible.
            </summary>
            <value>Contrainte de type de cible.</value>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction`1.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Interactivity.TargetedTriggerAction`1"/>.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction`1.OnTargetChanged(`0,`0)">
            <summary>
            Appelé lorsque la propriété de la cible change.
            </summary>
            <remarks>Remplacez-le pour connecter la fonctionnalité et la déconnecter de la cible spécifiée, plutôt que l&apos;AssociatedObject.</remarks>
            <param name="oldTarget">Ancienne cible.</param>
            <param name="newTarget">Nouvelle cible.</param>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction`1.Target">
            <summary>
            Obtient l&apos;objet cible. Si TargetName n&apos;est pas défini ou ne peut pas être résolu, AssociatedObject est utilisé par défaut.
            </summary>
            <value>Cible.</value>
            <remarks>En général, cette propriété doit être utilisée à la place de l&apos;AssociatedObject dans des classes dérivées.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerActionCollection">
            <summary>
            Représente une collection d&apos;actions avec un AssociatedObject partagé et fournit des notifications de modification à son contenu lorsque cet AssociatedObject change.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Interactivity.TriggerActionCollection"/>.
            </summary>
            <remarks>Interne, car elle ne doit pas être héritée en dehors de cet assembly.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.OnAttached">
            <summary>
            Appelé immédiatement une fois que la collection est attachée à un AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.OnDetaching">
            <summary>
            Appelé lorsque la collection est détachée de son AssociatedObject, mais avant qu&apos;il ne se soit produit réellement.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.ItemAdded(System.Windows.Interactivity.TriggerAction)">
            <summary>
            Appelé lorsqu&apos;un nouvel élément est ajouté à la collection.
            </summary>
            <param name="item">Nouvel élément.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.ItemRemoved(System.Windows.Interactivity.TriggerAction)">
            <summary>
            Appelé lorsqu&apos;un élément est supprimé de la collection.
            </summary>
            <param name="item">Élément supprimé.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.CreateInstanceCore">
            <summary>
            Crée une nouvelle instance de la TriggerActionCollection.
            </summary>
            <returns>Nouvelle instance.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerBase`1">
            <summary>
            Représente un objet capable d&apos;invoquer des actions de manière conditionnelle.
            </summary>
            <typeparam name="T">Type auquel ce déclencheur peut être attaché.</typeparam>
            <remarks>
            	TriggerBase est la classe de base pour contrôler les actions. Remplacez OnAttached() et OnDetaching() pour connecter et déconnecter les gestionnaires sur l&apos;AssociatedObject. Vous pouvez contraindre les types auxquels un TriggerBase dérivé peut être attaché en spécifiant le paramètre générique. Invoque InvokeActions() pour déclencher toutes les actions associées à ce TriggerBase.
            </remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase`1.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Interactivity.TriggerBase`1"/>.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject">
            <summary>
            Obtient l&apos;objet auquel le déclencheur est attaché.
            </summary>
            <value>Objet associé.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObjectTypeConstraint">
            <summary>
            Obtient la contrainte de type de l&apos;objet associé.
            </summary>
            <value>Contrainte de type d&apos;objet associé.</value>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerCollection">
            <summary>
             Représente une collection de déclencheurs avec un AssociatedObject partagé et fournit des notifications de modification à son contenu lorsque cet AssociatedObject change.
             </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Interactivity.TriggerCollection"/>.
            </summary>
            <remarks>Interne, car elle ne doit pas être héritée en dehors de cet assembly.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.OnAttached">
            <summary>
            Appelé immédiatement une fois que la collection est attachée à un AssociatedObject.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.OnDetaching">
            <summary>
            Appelé lorsque la collection est détachée de son AssociatedObject, mais avant qu&apos;il ne se soit produit réellement.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.ItemAdded(System.Windows.Interactivity.TriggerBase)">
            <summary>
            Appelé lorsqu&apos;un nouvel élément est ajouté à la collection.
            </summary>
            <param name="item">Nouvel élément.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.ItemRemoved(System.Windows.Interactivity.TriggerBase)">
            <summary>
            Appelé lorsqu&apos;un élément est supprimé de la collection.
            </summary>
            <param name="item">Élément supprimé.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.CreateInstanceCore">
            <summary>
            Crée une nouvelle instance de la <see cref="T:System.Windows.Interactivity.TriggerCollection"/>.
            </summary>
            <returns>Nouvelle instance.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.TypeConstraintAttribute">
            <summary>
            Spécifiez des contraintes de type sur l&apos;AssociatedObject de TargetedTriggerAction et EventTriggerBase.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TypeConstraintAttribute.#ctor(System.Type)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:System.Windows.Interactivity.TypeConstraintAttribute"/>.
            </summary>
            <param name="constraint">Type de contrainte.</param>
        </member>
        <member name="P:System.Windows.Interactivity.TypeConstraintAttribute.Constraint">
            <summary>
            Obtient le type de contrainte.
            </summary>
            <value>Type de contrainte.</value>
        </member>
        <member name="T:ExceptionStringTable">
            <summary>
              Classe de ressource fortement typée pour rechercher des chaînes localisées, etc.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ResourceManager">
            <summary>
              Renvoie l&apos;instance ResourceManager mise en cache utilisée par cette classe.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.Culture">
            <summary>
              Remplace la propriété CurrentUICulture du thread actuel pour toutes les recherches de ressources à l&apos;aide de cette classe de ressource fortement typée.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostBehaviorCollectionMultipleTimesExceptionMessage">
            <summary>
              Recherche une chaîne localisée semblable à Impossible de définir la même BehaviorCollection sur plusieurs objets.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostBehaviorMultipleTimesExceptionMessage">
            <summary>
              Recherche une chaîne localisée semblable à Une instance d&apos;un comportement ne peut pas être attachée à plus d&apos;un objet à la fois.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerActionMultipleTimesExceptionMessage">
            <summary>
              Recherche une chaîne localisée semblable à Impossible d&apos;héberger simultanément une instance d&apos;une TriggerAction dans plusieurs TriggerCollections. Supprimez-la d&apos;une TriggerCollection avant de l&apos;ajouter à une autre.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerCollectionMultipleTimesExceptionMessage">
            <summary>
              Recherche une chaîne localisée semblable à Impossible de définir la même TriggerCollection sur plusieurs objets.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerMultipleTimesExceptionMessage">
            <summary>
              Recherche une chaîne localisée semblable à Une instance d&apos;un déclencheur ne peut pas être attachée à plus d&apos;un objet à la fois.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CommandDoesNotExistOnBehaviorWarningMessage">
            <summary>
              Recherche une chaîne localisée semblable à La commande « {0} » n&apos;existe pas ou n&apos;est pas exposée publiquement sur {1}.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.DefaultTriggerAttributeInvalidTriggerTypeSpecifiedExceptionMessage">
            <summary>
              Recherche une chaîne localisée semblable à « {0} » n&apos;est pas un type valide pour le paramètre TriggerType. Vérifiez que « {0} » provient de TriggerBase.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.DuplicateItemInCollectionExceptionMessage">
            <summary>
              Recherche une chaîne localisée semblable à Impossible d&apos;ajouter la même instance de « {0} » à « {1} » plus d&apos;une fois.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.EventTriggerCannotFindEventNameExceptionMessage">
            <summary>
              Recherche une chaîne localisée semblable à Impossible de trouver un événement nommé « {0} » sur le type « {1} ».
            </summary>
        </member>
        <member name="P:ExceptionStringTable.InvokeActionCommandMustBeHostedOnBehaviorExceptionMessage">
            <summary>
              Recherche une chaîne localisée semblable à InvokeCommandAction doit être attaché à un Behavior. Ceci peut être effectué en l&apos;ajoutant à la collection Actions d&apos;un Trigger dans la collection Triggers d&apos;un objet Behavior.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.RetargetedTypeConstraintViolatedExceptionMessage">
            <summary>
              Recherche une chaîne localisée semblable à Un type d&apos;objet « {0} » ne peut pas avoir une propriété {3} de type « {1} ». Des instances du type « {0} » ne peuvent avoir qu&apos;une propriété {3} du type « {2} ».
            </summary>
        </member>
        <member name="P:ExceptionStringTable.TypeConstraintViolatedExceptionMessage">
            <summary>
              Recherche une chaîne localisée semblable à Impossible d&apos;attacher le type « {0} » au type « {1} ». Des instances du type « {0} » ne peuvent être attachées qu&apos;à des objets de type « {2} ».
            </summary>
        </member>
        <member name="P:ExceptionStringTable.UnableToResolveTargetNameWarningMessage">
            <summary>
              Recherche une chaîne localisée semblable à Impossible de résoudre TargetName « {0} ».
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\fr\Microsoft.Expression.Interactions.xml ===
﻿<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Interactions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Interactivity.Core.ActionCommand">
            <summary>
            Implémentation de base de ICommand qui inclut dans un wrapper une méthode qui accepte l&apos;absence de paramètres ou une méthode qui en accepte un seul.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action)">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Microsoft.Expression.Interactivity.Core.ActionCommand"/>.
            </summary>
            <param name="action">Action.</param>
            <remarks>Utilisez ce constructeur pour fournir une action qui ignore le paramètre ICommand.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action{System.Object})">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Microsoft.Expression.Interactivity.Core.ActionCommand"/>.
            </summary>
            <param name="objectAction">Action qui accepte un paramètre d&apos;objet.</param>
            <remarks>Utilisez ce constructeur pour fournir une action qui utilise le paramètre d&apos;objet passé par la méthode Execute.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
            Définit la méthode qui détermine si la commande peut s&apos;exécuter dans son état actuel.
            </summary>
            <param name="parameter">Données utilisées par la commande.  Si la commande ne nécessite pas que des données soient passées, cet objet peut être défini sur null.</param>
            <returns>
            Renvoie toujours la valeur True.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.Execute(System.Object)">
            <summary>
            Définit la méthode à appeler lorsque la commande est invoquée.
            </summary>
            <param name="parameter">Données utilisées par la commande.  Si la commande ne nécessite pas que des données soient passées, cet objet peut être défini sur null.</param>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecuteChanged">
            <summary>
            Se produit lorsque des modifications qui affectent la détermination de l&apos;exécution de la commande se produisent. Ne sera pas déclenché par ActionCommand.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ChangePropertyAction">
            <summary>
            Action qui modifie une propriété spécifiée en valeur spécifiée lorsqu&apos;elle est invoquée.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Microsoft.Expression.Interactivity.Core.ChangePropertyAction"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Invoke(System.Object)">
            <summary>
            Invoque l&apos;action.
            </summary>
            <param name="parameter">Paramètre de l&apos;action. Si l&apos;action ne nécessite pas de paramètre, le paramètre peut être défini sur une référence null.</param>
            <exception cref="T:System.ArgumentException">Propriété avec <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName"/> introuvable sur la cible.</exception>
            <exception cref="T:System.ArgumentException">Impossible de définir <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName"/> sur la valeur spécifiée par <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Value"/>.</exception>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName">
            <summary>
            Obtient ou définit le nom de la propriété à modifier. Il s&apos;agit d&apos;une propriété de dépendance.
            </summary>
            <value>Nom de la propriété à modifier.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Value">
            <summary>
            Obtient ou définit la valeur à définir. Il s&apos;agit d&apos;une propriété de dépendance.
            </summary>
            <value>Valeur à définir.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Duration">
            <summary>
            Obtient ou définit la durée de l&apos;animation qui se produit lors de l&apos;appel de ChangePropertyAction.  Il s&apos;agit d&apos;une propriété de dépendance. Si la durée n&apos;est pas définie, aucune animation n&apos;est appliquée.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager">
            <summary>
            ExtendedVisualStateManager est un VisualStateManager personnalisé capable de lisser l&apos;animation des propriétés de disposition. Avec de VisualStateManager personnalisé, les états peuvent inclure des modifications apportées aux propriétés telles que Grid.Column, modifier des hauteurs d&apos;éléments par ou depuis Auto, et ainsi de suite. Ces modifications sont lissées au fil du temps à l&apos;aide des GeneratedDuration et GeneratedEasingFunction de la transition appropriée. Voir la région « Remplacements de VisualStateManager » ci-dessous pour obtenir une description générale de l&apos;algorithme.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.UseFluidLayoutProperty">
            <summary>
            Un VisualStateGroup peut utiliser une disposition fluide ou non.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValuesProperty">
            <summary>
            Un VisualStateGroup conserve la liste de ces valeurs d&apos;origine dans une propriété jointe.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutStoryboardProperty">
            <summary>
            Pour chaque état, les propriétés propres à la disposition sont extraites, puis jointes à l&apos;état. Ces propriétés sont supprimées de l&apos;état lui-même.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CurrentStateProperty">
            <summary>
            Mémorisez l&apos;état actuel.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.MovingElements">
            <summary>
            Il s&apos;agit du jeu d&apos;éléments actuellement en mouvement.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutTransitionStoryboard">
            <summary>
            Il s&apos;agit de la table de montage séquentiel qui anime la transition.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutProperties">
            <summary>
            Cette liste contient toutes les propriétés de disposition connues.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.StopAnimations">
            <summary>
            Arrêtez l&apos;animation et remplacez les modifications de disposition qui ont été apportées pour prendre en charge cette animation.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.FindTransition(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState)">
            <summary>
            Localisez la transition que VisualStateManager va utiliser pour animer la modification, afin que l&apos;animation de la disposition puisse correspondre à la durée et à l&apos;accélération.
            </summary>
            <param name="group">Groupe dans lequel la transition se produit</param>
            <param name="previousState">État d&apos;origine</param>
            <param name="state">État de destination</param>
            <returns>Transition</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.ExtractLayoutStoryboard(System.Windows.VisualState)">
            <summary>
            Supprimez toutes les propriétés qui affectent la disposition depuis la table de montage séquentiel pour l&apos;état, puis mettez-les en cache dans une propriété jointe.
            </summary>
            <param name="state">État de destination</param>
            <returns>Table de montage séquentiel contenant les propriétés de disposition dans cet état</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.FindTargetElements(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Le jeu d&apos;éléments cibles correspond au jeu complet des éléments pouvant s&apos;être déplacés dans une transition de disposition. Ce jeu est la fermeture de : - Éléments avec des propriétés de disposition animées dans l&apos;état. - Frères des éléments dans le jeu. - Parents des éléments dans le jeu.
             
            Le code suivant vérifie ces rectangles avant et après la modification de la disposition.
            </summary>
            <param name="control">Contrôle dont la disposition change d&apos;état</param>
            <param name="layoutStoryboard">Table de montage séquentiel contenant les modifications de disposition</param>
            <param name="originalValueRecords">Valeurs précédentes des navigations d&apos;états précédents pouvant être rétablies</param>
            <param name="movingElements">Jeu d&apos;éléments actuellement en mouvement, en cas de transition de modification d&apos;état en cours</param>
            <returns>Jeu complet d&apos;éléments dont la disposition peut avoir changé</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetRectsOfTargets(System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Obtenez un jeu de rectangles pour tous les éléments dans la liste cible.
            </summary>
            <param name="targets">Jeu d&apos;éléments à considérer</param>
            <param name="movingElements">Jeu d&apos;éléments actuellement en mouvement</param>
            <returns>Dictionnaire qui associe les éléments à leurs rectangles</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetLayoutRect(System.Windows.FrameworkElement)">
            <summary>
            Obtenez le rectangle de disposition d&apos;un élément, en obtenant l&apos;emplacement de la disposition, puis en calculant quelle partie de l&apos;emplacement est utilisée.
            </summary>
            <param name="element">Élément dont nous souhaitons obtenir le rectangle</param>
            <returns>Rectangle de disposition de cet élément</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetOldOpacities(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Obtenez les opacités des éléments au moment de la modification de l&apos;état, plutôt que les visibilités, car la modification de l&apos;état est peut-être en cours et la valeur actuelle est la plus importante.
            </summary>
            <param name="control">Contrôle dont l&apos;état change</param>
            <param name="layoutStoryboard">Table de montage séquentiel avec les propriétés de disposition</param>
            <param name="originalValueRecords">Jeu de valeurs d&apos;origine</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.SetLayoutStoryboardProperties(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord})">
            <summary>
            Parcourez la table de montage séquentiel de la disposition et définissez toutes les propriétés à l&apos;aide de SetValue pour permettre l&apos;appel de UpdateLayout sans cocher la chronologie, ce qui engendrerait un rendu. Toutes les valeurs écrasées sont stockées dans la collection de OriginalValueRecords afin de pouvoir être remplacées ultérieurement.
            </summary>
            <param name="control">Contrôle dont l&apos;état change</param>
            <param name="layoutStoryboard">Table de montage séquentiel conservant les propriétés de disposition</param>
            <param name="originalValueRecords">Magasin de valeurs d&apos;origine</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.WrapMovingElementsInCanvases(System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Windows.Rect},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Windows.Rect})">
            <summary>
            Prend tous les éléments qui se déplaceront à la suite de l&apos;animation de la disposition, puis les enveloppe dans des canevas afin qu&apos;ils n&apos;affectent pas leurs éléments frères.
            </summary>
            <param name="movingElements">Jeu d&apos;éléments qui vont se déplacer</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.UnwrapMovingElementsFromCanvases(System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            Prend tous les éléments qui se sont déplacés à la suite de l&apos;animation de la disposition, puis les enlève de leurs canevas.
            </summary>
            <param name="movingElements">Jeu d&apos;éléments qui se sont déplacés</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CopyLayoutProperties(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Copiez les propriétés de disposition depuis l&apos;élément source vers l&apos;élément cible, en les supprimant de la source.
            </summary>
            <param name="source">Source des propriétés de disposition</param>
            <param name="target">Destination des propriétés de disposition</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CreateLayoutTransitionStoryboard(System.Windows.VisualTransition,System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Double})">
            <summary>
            Créez la table de montage séquentiel réelle qui sera utilisée pour animer la transition. Utilisez tous les résultats précédemment calculés.
            </summary>
            <param name="duration">Durée de l&apos;animation</param>
            <param name="ease">Fonction d&apos;accélération à utiliser dans l&apos;animation</param>
            <param name="movingElements">Jeu d&apos;éléments qui vont se déplacer</param>
            <param name="oldOpacities">Anciennes opacités des éléments dont la visibilité change</param>
            <returns>Table de montage séquentiel</returns>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord">
            <summary>
            OriginalValueRecord mémorise la valeur d&apos;origine d&apos;une propriété qui a été modifiée dans un état.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.FluidMoveScope">
            <summary>
            Ce type énuméré indique si un FluidMoveBehavior s&apos;applique à l&apos;élément auquel il est joint ou à l&apos;enfant de cet élément. « Self » s&apos;avère utile lorsqu&apos;il existe un seul élément qui doit se comporter d&apos;une certaine manière ; « Children » s&apos;avère utile lorsque le même comportement doit s&apos;appliquer à tous les enfants d&apos;un WrapPanel ou au panneau ItemsHost d&apos;un ItemsControl.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior">
            <summary>
            Comportement qui surveille les modifications de disposition d&apos;un élément (ou d&apos;un jeu d&apos;éléments), puis qui déplace l&apos;élément progressivement vers la nouvelle position au moment requis. Ce comportement n&apos;anime pas la taille ni la visibilité d&apos;un élément ; il anime uniquement le décalage de cet élément au sein de son conteneur parent.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.DurationProperty">
            <summary>
            DependencyProperty pour la durée du déplacement.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.AppliesToProperty">
            <summary>
            DependencyProperty pour l&apos;étendue du comportement. Voir FluidMoveScope pour plus d&apos;informations.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.IsActiveProperty">
            <summary>
            DependencyProperty pour l&apos;état actif du comportement.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.Duration">
            <summary>
            Durée du déplacement.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.AppliesTo">
            <summary>
            Indique si le comportement s&apos;applique simplement à cet élément ou à tous ses enfants (si l&apos;élément est un panneau).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.IsActive">
            <summary>
            Indique si le comportement est actuellement actif.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.GoToStateAction">
            <summary>
            Action qui permet la transition d&apos;un FrameworkElement vers un VisualState spécifié lorsqu&apos;elle est appelée.
            </summary>
            <remarks>
            Si la propriété TargetName est définie, cette action essaie de modifier l&apos;état de l&apos;élément ciblé. Dans le cas contraire, elle parcourt l&apos;arborescence d&apos;éléments afin d&apos;essayer de localiser une cible alternative qui définit des états. ControlTemplate et UserControl sont deux éventualités courantes.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.GoToStateAction.OnTargetChanged(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Appelé lorsque la cible change. Si la propriété TargetName n&apos;est pas définie, cette action possède un comportement personnalisé.
            </summary>
            <param name="oldTarget"></param>
            <param name="newTarget"></param>
            <exception cref="T:System.InvalidOperationException">Impossible de localiser un FrameworkElement approprié avec des états.</exception>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.GoToStateAction.Invoke(System.Object)">
            <summary>
            Cette méthode est appelée lorsque certains critères sont remplis et que l&apos;action est invoquée.
            </summary>
            <param name="parameter"></param>
            <exception cref="T:System.InvalidOperationException">Impossible de modifier la cible par le StateName spécifié.</exception>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.GoToStateAction.UseTransitions">
            <summary>
            Indique s&apos;il convient ou non d&apos;utiliser un VisualTransition pour passer d&apos;un état à un autre.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.GoToStateAction.StateName">
            <summary>
            Nom du VisualState.  
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Input.KeyTrigger">
            <summary>
            Déclencheur déclenché par un événement de clavier.  Si la touche et les modificateurs cibles sont détectés, il se déclenche.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.Key">
            <summary>
            Touche sur laquelle il convient d&apos;appuyer pour déclencher le déclencheur.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.Modifiers">
            <summary>
            Modificateurs qui doivent être actifs pour que le déclencheur se déclenche (par défaut, il ne faut appuyer sur aucun modificateur).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.ActiveOnFocus">
            <summary>
            Avec la valeur true, le Trigger écoute uniquement son objet Source de déclencheur, ce qui signifie que l&apos;élément doit avoir le focus pour que le déclencheur se déclenche. Avec la valeur false, le Trigger écoute à la racine, donc tous les messages KeyDown/Up non gérés sont détectés.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.FiredOn">
            <summary>
            Indique s&apos;il convient ou non d&apos;écouter l&apos;événement KeyDown ou KeyUp.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction">
            <summary>
            Action qui lance un processus afin d&apos;ouvrir un fichier ou URI. Pour les fichiers, cette action lance le programme par défaut pour l&apos;extension de fichier donnée. Un URI s&apos;ouvre dans un navigateur Web.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction.Invoke(System.Object)">
            <summary>
            Cette méthode est appelée lorsque certains critères sont remplis et que l&apos;action est invoquée.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction.Path">
            <summary>
            Fichier ou URI à ouvrir. 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior">
            <summary>
            Repositionne l&apos;élément joint en réponse aux mouvements de glissement de la souris sur l&apos;élément.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.XProperty">
            <summary>
            DependencyProperty pour la position X de l&apos;élément glissé, par rapport à la gauche de l&apos;élément racine.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.YProperty">
            <summary>
            DependencyProperty pour la position Y de l&apos;élément glissé, par rapport au haut de l&apos;élément racine.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ConstrainToParentBoundsProperty">
            <summary>
            DependencyProperty pour la propriété ConstrainToParentBounds. S&apos;il a la valeur True, l&apos;élément glissé est contraint de rester dans les limites de son conteneur parent.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.UpdatePosition(System.Windows.Point)">
            <summary>
            Essaie de mettre à jour la position de l&apos;élément associé en fonction des coordonnées spécifiées.
            </summary>
            <param name="point">Position souhaitée de l&apos;élément en coordonnées racine.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ApplyTranslation(System.Double,System.Double)">
            <summary>
            Applique une translation de position relative à l&apos;élément associé.
            </summary>
            <param name="x">Composent X de la translation souhaitée en coordonnées racine.</param>
            <param name="y">Composent Y de la translation souhaitée en coordonnées racine.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ApplyTranslationTransform(System.Double,System.Double)">
            <summary>
            Applique la translation donnée au RenderTransform de l&apos;élément associé.
            </summary>
            <param name="x">Composent X de la translation en coordonnées parent.</param>
            <param name="y">Composent Y de la translation en coordonnées parent.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.UpdatePosition">
            <summary>
            Met à jour les propriétés X et Y en fonction de la position rendue actuelle de l&apos;élément associé.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.IsValidConstrainedMove(System.Windows.Point)">
            <summary>
            Détermine si la position du curseur donnée doit compter dans le cadre de l&apos;opération de glissement.
            </summary>
            <param name="currentPosition">Position du curseur.</param>
            <returns>
            	<c>true</c> si la position fournie doit compter dans le cadre de l&apos;opération de glissement ; sinon, <c>false</c>.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.RectContainsRect(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Vérifiez si un rectangle est contenu par un autre.
            </summary>
            <param name="rect1">Rectangle conteneur.</param>
            <param name="rect2">Rectangle contenu.</param>
            <returns><c>true</c> si rect1 contient rect2 ; sinon, <c>false</c></returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.TransformAsVector(System.Windows.Media.GeneralTransform,System.Double,System.Double)">
            <summary>
            Transforme en vecteur.
            </summary>
            <param name="transform">Transformation.</param>
            <param name="x">Composant X du vecteur.</param>
            <param name="y">Composant Y du vecteur.</param>
            <returns>Point contenant les valeurs de X et Y transformées par la transformation en vecteur.</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.GetTransformOffset(System.Windows.Media.GeneralTransform)">
            <summary>
            Obtient le décalage de la transformation.
            </summary>
            <param name="transform">Transformation.</param>
            <returns>Décalage de la transformation.</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.OnAttached">
            <summary>
            Appelé une fois que le comportement est attaché à un AssociatedObject.
            </summary>
            <remarks>Substituez-le pour connecter la fonctionnalité à l&apos;AssociatedObject.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.OnDetaching">
            <summary>
            Appelé lorsque le comportement est détaché de son AssociatedObject, mais avant qu&apos;il ne se soit produit réellement.
            </summary>
            <remarks>Substituez-le pour déconnecter la fonctionnalité de l&apos;AssociatedObject.</remarks>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.DragBegun">
            <summary>
            Se produit lorsqu&apos;un mouvement de glissement est initialisé.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.Dragging">
            <summary>
            Se produit lorsqu&apos;une mise à jour de mouvement de glissement est traitée.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.DragFinished">
            <summary>
            Se produit lorsqu&apos;un mouvement de glissement est terminé.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.X">
            <summary>
            Obtient ou définit la position X de l&apos;élément glissé, par rapport à la gauche de l&apos;élément racine. Il s&apos;agit d&apos;une propriété de dépendance.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.Y">
            <summary>
            Obtient ou définit la position Y de l&apos;élément glissé, par rapport au haut de l&apos;élément racine. Il s&apos;agit d&apos;une propriété de dépendance.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ConstrainToParentBounds">
            <summary>
            Obtient ou définit une valeur qui indique si l&apos;élément glissé est contraint de rester dans les limites de son conteneur parent. Il s&apos;agit d&apos;une propriété de dépendance.
            </summary>
            <value>
            	<c>true</c> si l&apos;élément glissé doit être contraint aux limites de son parent ; sinon, <c>false</c>.
            </value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ActualPosition">
            <summary>
            Obtient la position à l&apos;écran de l&apos;élément associé en coordonnées racine.
            </summary>
            <value>Position à l&apos;écran de l&apos;élément associé en coordonnées racine.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ElementBounds">
            <summary>
            Obtient les limites de l&apos;élément en coordonnées d&apos;élément.
            </summary>
            <value>Limites de l&apos;élément en coordonnées d&apos;élément.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ParentElement">
            <summary>
            Obtient l&apos;élément parent de l&apos;objet associé.
            </summary>
            <value>Élément parent de l&apos;objet associé.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.RootElement">
            <summary>
            Obtient l&apos;élément racine de la scène dans laquelle se trouve l&apos;objet associé.
            </summary>
            <value>Élément racine de la scène dans laquelle se trouve l&apos;objet associé.</value>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.PlaySoundAction">
            <summary>
            Action qui permet de lire un son jusqu&apos;à sa fin.
            </summary>
            <remarks>
            Cette action est destinée à être utilisée avec de courts effets sonores qui n&apos;ont pas besoin d&apos;être arrêtés ou contrôlés. Si vous essayez de créer un lecteur de musique ou un jeu, elle risque de ne pas répondre à vos besoins.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Microsoft.Expression.Interactivity.Media.PlaySoundAction"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.SetMediaElementProperties(System.Windows.Controls.MediaElement)">
            <summary>
            Lorsque l&apos;action est invoquée, cette méthode est utilisée pour personnaliser le MediaElement créé dynamiquement.
            </summary>
            <remarks>
            Cette méthode peut s&apos;avérer utile pour les auteurs d&apos;actions qui souhaitent étendre PlaySoundAction. Si vous souhaitez contrôler la propriété Balance du MediaElement, vous pouvez hériter de PlaySoundAction et remplacer cette méthode.
            </remarks>
            <param name="mediaElement"></param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Invoke(System.Object)">
            <summary>
            Cette méthode est appelée lorsque certains critères sont remplis et que l&apos;action doit être invoquée. 
            </summary>
            <remarks>
            Chaque invocation de l&apos;action lit un nouveau son.  Bien que l&apos;implémentation soit susceptible de changer, l&apos;appelant doit s&apos;attendre à ce que cela crée un nouveau MediaElement, qui sera nettoyé à la fin du son ou en cas d&apos;échec de lecture par le média.
            </remarks>
            <param name="parameter"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Source">
            <summary>
            URI qui définit l&apos;emplacement du fichier audio.  Cet URI est utilisé pour définir la propriété source du MediaElement. Il s&apos;agit d&apos;une propriété de dépendance.
            </summary>
            <remarks>
            Le format du fichier audio peut être tout format pris en charge par MediaElement.  Dans le cas d&apos;une vidéo, seule la partie audio est lue.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Volume">
            <summary>
            Contrôle le volume du son.  Ce contrôle est utilisé pour définir la propriété Volume du MediaElement.  Il s&apos;agit d&apos;une propriété de dépendance.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.RemoveElementAction">
            <summary>
            Action qui supprime l&apos;élément cible de l&apos;arborescence lorsqu&apos;elle est invoquée.
            </summary>
            <remarks>
            Cette action peut échouer. Elle comprend comment supprimer des éléments à partir de parents courants mais pas de collections personnalisées ni de la manipulation directe de l&apos;arborescence d&apos;éléments visuels.
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardAction">
            <summary>
            Classe abstraite qui fournit la capacité de cibler une table de montage séquentiel.
            </summary>
            <remarks>
            Pour les auteurs d&apos;actions, cette classe fournit un moyen standard de cibler une table de montage séquentiel.  Les outils de conception peuvent choisir de fournir des fonctionnalités d&apos;édition spéciales pour les classes qui héritent de cette action, afin d&apos;améliorer l&apos;expérience du concepteur. 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardAction.OnStoryboardChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Cette méthode est appelée lorsque la propriété Storyboard est modifiée.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.StoryboardAction.Storyboard">
            <summary>
            Table de montage séquentiel ciblé.  Il s&apos;agit d&apos;une propriété de dépendance.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.ControlStoryboardAction">
            <summary>
            Action qui modifie l&apos;état d&apos;une table de montage séquentiel ciblé lorsqu&apos;elle est invoquée.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.ControlStoryboardAction.Invoke(System.Object)">
            <summary>
            Cette méthode est appelée lorsque certains critères sont remplis et que l&apos;action doit être invoquée. Cette méthode essaie de modifier la table de montage séquentiel ciblée d&apos;une manière définie par la ControlStoryboardOption.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardTrigger">
            <summary>
            Classe abstraite qui fournit la capacité de cibler une table de montage séquentiel.
            </summary>
            <remarks>
            Pour les auteurs de déclencheurs, cette classe fournit un moyen standard de cibler une table de montage séquentiel.  Les outils de conception peuvent choisir de fournir des fonctionnalités d&apos;édition spéciales pour les classes qui héritent de ce déclencheur, afin d&apos;améliorer l&apos;expérience du concepteur. 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardTrigger.OnStoryboardChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Cette méthode est appelée lorsque la propriété Storyboard est modifiée.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.StoryboardTrigger.Storyboard">
            <summary>
            Table de montage séquentiel ciblé.  Il s&apos;agit d&apos;une propriété de dépendance.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger">
            <summary>
            Déclencheur qui écoute le déroulement d&apos;une table de montage séquentiel.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.TimerTrigger">
            <summary>
            Déclencheur qui est déclenché par un événement spécifié se produisant sur sa source à l&apos;issue d&apos;un délai à compter du déclenchement de cet événement.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.TimerTrigger.#ctor">
            <summary>
            Initialise une nouvelle instance de la classe <see cref="T:Microsoft.Expression.Interactivity.Core.TimerTrigger"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.TimerTrigger.MillisecondsPerTick">
            <summary>
            Obtient ou définit le nombre de millisecondes d&apos;attente entre les taquets. Il s&apos;agit d&apos;une propriété de dépendance.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.TimerTrigger.TotalTicks">
            <summary>
            Obtient ou définit le nombre total de taquets à déclencher avant la fin du déclencheur.  Il s&apos;agit d&apos;une propriété de dépendance.
            </summary>
        </member>
        <member name="T:ExceptionStringTable">
            <summary>
              Classe de ressource fortement typée pour rechercher des chaînes localisées, etc.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ResourceManager">
            <summary>
              Renvoie l&apos;instance ResourceManager mise en cache utilisée par cette classe.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.Culture">
            <summary>
              Remplace la propriété CurrentUICulture du thread actuel pour toutes les recherches de ressources à l&apos;aide de cette classe de ressource fortement typée.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotFindPropertyNameExceptionMessage">
            <summary>
              Recherche une chaîne localisée semblable à Impossible de trouver une propriété nommée « {0} » sur le type « {1} ».
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotSetValueExceptionMessage">
            <summary>
              Recherche une chaîne localisée semblable à Impossible d&apos;attribuer une valeur de type « {0} » à la propriété « {1} » de type « {2} ». Seules des valeurs de type « {2} » peuvent être attribuées à la propriété « {1} ».
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionPropertyIsReadOnlyExceptionMessage">
            <summary>
              Recherche une chaîne localisée semblable à La propriété « {0} » définie par le type « {1} » n&apos;expose pas une méthode définie et ne peut, par conséquent, pas être modifiée.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.GoToStateActionStateChangeFailed">
            <summary>
              Recherche une chaîne localisée semblable à Impossible de changer l&apos;état de la cible {0} à {1}.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.GoToStateActionTargetHasNoStateGroups">
            <summary>
              Recherche une chaîne localisée semblable à La cible {0} ne définit pas de VisualStateGroups. .
            </summary>
        </member>
        <member name="P:ExceptionStringTable.UnsupportedRemoveTargetExceptionMessage">
            <summary>
              Recherche une chaîne localisée semblable à La cible de RemoveElementAction n&apos;est pas prise en charge.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\ja\Microsoft.Expression.Drawing.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Drawing</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Controls.Callout">
            <summary>
            Renders a callout shape supporting several shapes combined with a callout arrow.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.CompositeContentShape">
             <summary>
             Provides a base class of a composite shape that derives from <see cref="T:System.Windows.Controls.ContentControl"/> and implements <see cref="T:Microsoft.Expression.Media.IShape"/>.
             </summary>
             <remarks>
             <see cref="T:Microsoft.Expression.Controls.CompositeContentShape"/> implements <see cref="T:Microsoft.Expression.Media.IShape"/> interface,
             and supports rendering a geometry similar to <see cref="T:System.Windows.Shapes.Shape"/>, but the geometry can be rendered outside of layout boundary.
             
             A typical implementation will have a customized default template in generic.xaml which template-binds most shape properties to a <see cref="T:System.Windows.Shapes.Path"/>.
             It should also extend the <see cref="P:GeometrySource"/> property to customize the appearance of the <see cref="T:System.Windows.Shapes.Path"/>.
            
             This class also supports showing content together with the shape.
             </remarks>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySourceParameters">
            <summary>
            Provides an interface to discribe the parameters of a Shape.
            </summary>
            <remarks>
            This interface is the data for communication between Shape and GeometrySource.
            Typically a concrete implementation of IShape will implements this interface and pass it into
            GeometrySource.UpdateGeometry(), who will consume the shape as readonly data provider.
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Media.IShape">
            <summary>
            Provides the necessary interface to define a Shape.
            Both primitive and composite shapes need to match this interface, although they might derive from different type of FrameworkElement.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.IShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Fill">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how to paint the interior of the shape.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that describes how the shape's interior is painted. The default is null. See Remarks.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values. The default value at run time depends on the type of <see cref="T:System.Windows.Shapes.Shape" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.RenderedGeometry">
            <summary>
            Gets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.GeometryMargin">
            <summary>
            Gets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Media.IShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.CreateGeometrySource">
            <summary>
            Extends how the shape is drawn with creating geometry source.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Controls.CompositeContentShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.OnContentChanged(System.Object,System.Object)">
            <summary>
            Transforms a string content into <see cref="T:TextBlock"/> with center alignment and mulitple line support.
            </summary>
            <remarks>
            Use template binding to <see cref="P:Microsoft.Expression.Controls.CompositeContentShape.InternalContent"/> instead of <see cref="P:Content"/> to enable this method.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that specifies how to paint the interior of the shape.
            </summary>
            <returns>A <see cref="T:System.Windows.Media.Brush"/> that describes how the shape's interior is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeStartLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. </summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineCap" /> enumeration that specifies the shape at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeEndLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the end of a line. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeLineJoin">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:System.Windows.Shapes.Shape" />.</summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration that specifies the join appearance. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeMiterLimit">
            <summary>Gets or sets a limit on the ratio of the miter length to half the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. </summary>
            <returns>The limit on the ratio of the miter length to the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. This value is always a positive number that is greater than or equal to 1.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashArray">
            <summary>Gets or sets a collection of <see cref="T:System.Double" /> values that indicate the pattern of dashes and gaps that is used to outline shapes. </summary>
            <returns>A collection of <see cref="T:System.Double" /> values that specify the pattern of dashes and gaps. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that specifies how the ends of a dash are drawn. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashOffset">
            <summary>Gets or sets a <see cref="T:System.Double" /> that specifies the distance within the dash pattern where a dash begins.</summary>
            <returns>A <see cref="T:System.Double" /> that represents the distance within the dash pattern where a dash begins. The default value is 0.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.RenderedGeometry">
            <summary>
            Gets or sets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.GeometryMargin">
            <summary>
            Gets or sets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.InternalContent">
            <summary>
            Gets or sets the internal content that converts string into center aligned multiple line textblock.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.CompositeContentShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.Callout.AnchorPoint">
            <summary>
            Gets or sets the position of the callout relative to the top and left corner.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.Callout.CalloutStyle">
            <summary>
            Gets or sets the callout style.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.CompositeShape">
            <summary>
            Provides a base class of a composite shape that derives from <see cref="T:System.Windows.Controls.Control"/> and implements <see cref="T:Microsoft.Expression.Media.IShape"/>.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Expression.Controls.CompositeShape"/> implements <see cref="T:Microsoft.Expression.Media.IShape"/> interface,
            and supports rendering a geometry similar to <see cref="T:System.Windows.Shapes.Shape"/>, but the geometry can be rendered outside of layout boundary.
            
            A typical implementation will have a customized default template in generic.xaml which template-binds most shape properties to a <see cref="T:System.Windows.Shapes.Path"/>.
            It should also extend the <see cref="P:GeometrySource"/> property to customize the appearance of the <see cref="T:System.Windows.Shapes.Path"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.CreateGeometrySource">
            <summary>
            Extends how the shape is drawn with creating geometry source.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Controls.CompositeShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that specifies how to paint the interior of the shape.
            </summary>
            <returns>A <see cref="T:System.Windows.Media.Brush"/> that describes how the shape's interior is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeStartLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. </summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineCap" /> enumeration that specifies the shape at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeEndLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the end of a line. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeLineJoin">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:System.Windows.Shapes.Shape" />.</summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration that specifies the join appearance. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeMiterLimit">
            <summary>Gets or sets a limit on the ratio of the miter length to half the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. </summary>
            <returns>The limit on the ratio of the miter length to the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. This value is always a positive number that is greater than or equal to 1.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashArray">
            <summary>Gets or sets a collection of <see cref="T:System.Double" /> values that indicate the pattern of dashes and gaps that is used to outline shapes. </summary>
            <returns>A collection of <see cref="T:System.Double" /> values that specify the pattern of dashes and gaps. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that specifies how the ends of a dash are drawn. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashOffset">
            <summary>Gets or sets a <see cref="T:System.Double" /> that specifies the distance within the dash pattern where a dash begins.</summary>
            <returns>A <see cref="T:System.Double" /> that represents the distance within the dash pattern where a dash begins. The default value is 0.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.RenderedGeometry">
            <summary>
            Gets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.GeometryMargin">
            <summary>
            Gets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.CompositeShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.LineArrow">
            <summary>
            Renders a bended line segment with optional arrowhead on both end.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.LineArrow.MeasureOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
            <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes, or possibly on other considerations such as fixed container size.</returns>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <remarks>
            A default <see cref="T:LineArrow"/> can render at anysize.
            The <see cref="P:RenderedGeometry"/> will stretch to layout boundary and render to outside if necessary.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.BendAmount">
            <summary>
            Gets or sets the amount of bend for the arrow.
            </summary>
            <value>The bend amount between 0 to 1.</value>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.StartArrow">
            <summary>
            Gets or sets how the arrow head is rendered at the start of the line.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.EndArrow">
            <summary>
            Gets or sets how the arrow head is rendered at the end of the line.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.StartCorner">
            <summary>
            Gets or sets from which corner to start drawing the arrow.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.ArrowSize">
            <summary>
            Gets or sets the length of the arrow in pixels.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PanningItems">
            <summary>
            Provides an items control that displays one selected item, and allows panning between items using touch gestures.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PanningItems.#ctor">
            <summary>
            The constructor for PanningItems.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PanningItems.OnApplyTemplate">
            <summary>
            Called when the PanningItems template is applied.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.ScrollDirection">
            <summary>
            Gets or sets the orientation of items in the control.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.FlickTolerance">
            <summary>
            Gets or sets the flick tolerance.  This can be a value between 0 and 1.  
            It represents the percentage of the size of the PanningItems needed to be covered by the flick gesture to trigger an items change.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.PreviousItem">
            <summary>
            Gets or sets the item before the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.NextItem">
            <summary>
            Gets or sets the item after the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.LoopContents">
            <summary>
            Gets or sets whether the contents of the items control will loop, so that the first item will follow the last item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.SliderValue">
            <summary>
            Gets or sets the value of the slider controlling the panning motion.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathGeometryHelper">
            <summary>
            Helper class to work with PathGeometry
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.ConvertToPathGeometry(System.String)">
            <summary>
            Converts a string in the path mini-langauge into a PathGeometry.
            </summary>
            <param name="abbreviatedGeometry">A string in the path mini-langauge.</param>
            <remarks>
            Algorithm is modified from WPF: MS.Internal.Parsers.ParseStringToStreamGeometryContext.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.AsPathGeometry(System.Windows.Media.Geometry)">
            <summary>
            Convert the given geometry into a single PathGeometry.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.SyncPolylineGeometry(System.Windows.Media.Geometry@,System.Collections.Generic.IList{System.Windows.Point},System.Boolean)">
            <summary>
            Update the given geometry as PathGeometry with polyline matching given point list.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathGeometryHelper.AbbreviatedGeometryParser">
            <summary>
            Parses abbreviated geometry sytax.
            </summary>
            <remarks>
            The algorithm is modified from WPF: MS.Internal.AbbreviatedGeometryParser
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathSegmentHelper">
            <summary>
            Helper class to Convert ArcSegment to BezierSegment(s)
            </summary>
            <summary>
            Helper class to work with PathSegment and all variations.
            </summary>
            <summary>
            Strategy classes to handle different types of PathSegment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierSegments(System.Windows.Media.ArcSegment,System.Windows.Point)">
            <summary>
            Convert an Arc segment into Bezier format
            Return BezierSegment, PolyBezierSegment, LineSegment, or null
            When returning null, the Arc degenerated into start point.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SetIsStroked(System.Windows.Media.PathSegment,System.Boolean)">
            <summary>
            Avoid calling the three-parameter constructor, since it always sets a local value for IsStroked.
            </summary>
            <param name="segment"></param>
            <param name="isStroked"></param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SyncPolylineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Collections.Generic.IList{System.Windows.Point},System.Int32,System.Int32)">
            <summary>
            Update the SegmentCollection with given polyline matching given point list.
            Try to keep changes minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SyncPolyBezierSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Collections.Generic.IList{System.Windows.Point},System.Int32,System.Int32)">
            <summary>
            Update the collection[index] segment with poly bezier segment matching given point list.
            givne point list must contain 3*N points for N Bezier segments.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.IsEmpty(System.Windows.Media.PathSegment)">
            <summary>
            Test if given path segment is empty.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetPointCount(System.Windows.Media.PathSegment)">
            <summary>
            Get the point count in given path segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetLastPoint(System.Windows.Media.PathSegment)">
            <summary>
            Get the last point of given path segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetPoint(System.Windows.Media.PathSegment,System.Int32)">
            <summary>
            Get the point of given index in given segment.
            If input is (-1), return the last point.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.FlattenSegment(System.Windows.Media.PathSegment,System.Collections.Generic.IList{System.Windows.Point},System.Windows.Point,System.Double)">
            <summary>
            Flatten given segment and add result points into given point list.
            </summary>
            <param name="segment">The segment to be flatten</param>
            <param name="points">The result point list</param>
            <param name="start">The start point of the segment</param>
            <param name="tolerance">The error tolerance. Must be possitive. Can be 0, fallback to default tolerance.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.ArcToBezier(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Double,System.Double,System.Windows.Point[]@,System.Int32@)">
            <summary>
            ArcToBezier, Compute the Bezier approximation of an arc
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            </summary>
            <remarks>
            This utility computes the Bezier approximation for an elliptical arc as
            it is defined in the SVG arc spec. The ellipse from which the arc is
            carved is axis-aligned in its own coordinates, and defined there by its
            x and y radii. The rotation angle defines how the ellipse's axes are
            rotated relative to our x axis. The start and end points define one of 4
            possible arcs; the sweep and large-arc flags determine which one of
            these arcs will be chosen. See SVG spec for details.
            
            Returning cPieces = 0 indicates a line instead of an arc
                      cPieces = -1 indicates that the arc degenerates to a point 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.GetArcAngle(System.Windows.Point,System.Windows.Point,System.Boolean,System.Boolean,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Get the number of Bezier arcs, and sine/cosine of each.
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            </summary>
            <remarks>
            This is a private utility used by ArcToBezier.  We break the arc into
            pieces so that no piece will span more than 90 degrees.  The input
            points are on the unit circle.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.GetBezierDistance(System.Double,System.Double)">
             <summary>
             GetBezierDistance, return the distance as a fraction of the radius
             Adopted from MIL:Graphics\core\geometry\utils.cpp
             </summary>
            <remarks>
                  Get the distance from a circular arc's endpoints to the control points
                  of the Bezier arc that approximates it, as a fraction of the arc's
                  radius.
            
                  Since the result is relative to the arc's radius, it depends strictly on
                  the arc's angle. The arc is assumed to be of 90 degrees of less, so the
                  angle is determined by the cosine of that angle, which is derived from
                  rDot = the dot product of two radius vectors.  We need the Bezier curve
                  that agrees with the arc's points and tangents at the ends and midpoint. 
                  Here we compute the distance from the curve's endpoints to its control
                  points.
            
                  Since we are looking for the relative distance, we can work on the unit
                  circle. Place the center of the circle at the origin, and put the X axis
                  as the bisector between the 2 vectors.  Let a be the angle between the
                  vectors.  Then the X coordinates of the 1st and last points are cos(a/2). 
                  Let x be the X coordinate of the 2nd and 3rd points.  At t=1/2 we have a
                  point at (1,0). But the terms of the polynomial there are all equal:
            
                            (1-t)^3 = t*(1-t)^2 = t^2*(1-t) = t^3 = 1/8,
            
                  so from the Bezier formula there we have:
            
                            1 = (1/8) * (cos(a/2) + 3x + 3x + cos(a/2)), 
            
                  hence
            
                            x = (4 - cos(a/2)) / 3
            
                  The X difference between that and the 1st point is:
                  
                            DX = x - cos(a/2) = 4(1 - cos(a/2)) / 3.
            
                  But DX = distance / sin(a/2), hence the distance is
            
                            dist = (4/3)*(1 - cos(a/2)) / sin(a/2).
            
                  Rather than the angle a, we are given rDot = R^2 * cos(a), so we
                  multiply top and bottom by R:
             
                            dist = (4/3)*(R - Rcos(a/2)) / Rsin(a/2)
             
                  and use some trig:
                                           ________________
                            cos(a/2)   = \/(1 + cos(a)) / 2
                                           ______________________
                            R*cos(a/2) = \/(R^2 + R^2 cos(a)) / 2 
                                           ________________
                                       = \/(R^2 + rDot) / 2
            
                  Let A = (R^2 + rDot)/2.
                                           ____________________
                            R*sin(a/2) = \/R^2 - R^2 cos^2(a/2)
                                           _______
                                       = \/R^2 - A
            
                  so:
                                                      _
                                         4      R - \/A
                                  dist = - * ------------
                                         3      _______
                                              \/R^2 - A
            
              History:
                  5/29/2001 MichKa
                      Created it.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.AcceptRadius(System.Double,System.Double,System.Double@)">
            <summary>
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            Return false if the radius is too small compared to the chord length (returns true on NaNs)
            radius is modified to the value that's accepted.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.BezierCurveFlattener">
            <summary>
            A utility class to flatten Bezier curves.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.BezierCurveFlattener.FlattenCubic(System.Windows.Point[],System.Double,System.Collections.Generic.ICollection{System.Windows.Point},System.Boolean,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Flattens a Bezier cubic curve and adds the result polyline to the third parameter.
            </summary>
            <param name="controlPoints">The 4 Bezier cubic control points.</param>
            <param name="errorTolerance">The maximum distance between two corresponding points on the true curve 
            and on the flattened polyline. Must be strictly positive.</param>
            <param name="resultPolyline">Where to add the flattened polyline.</param>
            <param name="skipFirstPoint">True to skip the first control point when adding the flattened polyline.
            <param name="resultParameters">Where to add the value of the Bezier curve parameter associated to 
            each of the polyline vertices</param> 
            If <paramref name="resultPolyline"/> is empty, the first control point 
            and its associated parameter are always added.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.BezierCurveFlattener.FlattenQuadratic(System.Windows.Point[],System.Double,System.Collections.Generic.ICollection{System.Windows.Point},System.Boolean,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Flattens a Bezier quadratic curve and adds the result polyline to the third parameter.
            We use degree elevation for Bezier curves to reuse the code for the cubic case.
            </summary>
            <param name="controlPoints">The 3 Bezier quadratic control points.</param>
            <param name="errorTolerance">The maximum distance between two corresponding points on the true curve 
            and on the flattened polyline. Must be strictly positive.</param>
            <param name="resultPolyline">Where to add the flattened polyline.</param>
            <param name="skipFirstPoint">Whether to skip the first control point when adding the flattened polyline. 
            <param name="resultParameters">Where to add the value of the Bezier curve parameter associated to
            each of the polyline vertices</param>
            If <paramref name="resultPolyline"/> is empty, the first control point and 
            its associated parameter are always added.</param>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.CommonExtensions">
            <summary>
            Extension methods supporting non-geometry types
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence with the index of each item.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.EnsureListCount``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Ensure the count of list to given count.  Create default(T) or remove items when necessary.
            If Input IList is a List, AddRange or RemoveRange is used.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.EnsureListCount``1(System.Collections.Generic.IList{``0},System.Int32,System.Func{``0})">
            <summary>
            Ensure the count of list to given count.  Create with given fatory or remove items when necessary.
            If Input IList is a List, AddRange or RemoveRange is used when there's no factory.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a range of items to the end of a collection.
            If collection is list, List.AddRange is used.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.Last``1(System.Collections.Generic.IList{``0})">
            <summary>
            Get the last item of given list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.RemoveLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove the last item from the given list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.DeepCopy``1(``0)">
            <summary>
            Make a copy of obj and all it's public properties, including all collection properties.
            Possible perf optimization: this is used only for Transform and Geometry.
            We should develope a copier for them instead of using reflection.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.SetIfDifferent(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object)">
            <summary>
            Set the value if different.  Avoid setting local value if possible.
            return true when the value has been changed
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ClearIfSet(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Clears the dependency property when it is locally set on the given dependency object.
            Return false if the dependeny property is not locally set.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.FindVisualDesendent``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean})">
            <summary>
            Find all visual desendent of given type and condition using breath first search.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get all visual children in IEnumerable
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.DrawingPropertyMetadata">
            <summary>
            Unify the interface of PropertyMetadata in WPF and Silverlight.
            Providing the necessary notification about render, arrange or measure.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.#ctor(Microsoft.Expression.Media.DrawingPropertyMetadataOptions,System.Object)">
            <summary>
            This private Ctor should only be used by AttachCallback.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.AttachCallback(System.Object,Microsoft.Expression.Media.DrawingPropertyMetadataOptions,System.Windows.PropertyChangedCallback)">
            <summary>
            Chain InternalCallback() to attach the instance of DrawingPropertyMetadata on property callback.
            In Silverlight4-, the property metadata is thrown away after setting. Use callback to remember it.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.InternalCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Before chaining the original callback, trigger DrawingPropertyChangedEvent
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.GeometryHelper">
            <summary>
            Extension methods for Geometry related data structures (Point/Vector/Size/Rect)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Resize(System.Windows.Rect,System.Double)">
            <summary>
            Resize the rectangle to relative size while keeping center invariant.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Subtract(System.Windows.Point,System.Windows.Point)">
            <summary>
            Get the difference Vector between two Points
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Plus(System.Windows.Point,System.Windows.Point)">
            <summary>
            Memberwise plus for Point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Minus(System.Windows.Point,System.Windows.Point)">
            <summary>
            Memberwise minus for Point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.ConvertToPathGeometry(System.String)">
            <summary>
            Converts a string of mini-languages to a <see cref="T:PathGeometry"/>.
            </summary>
            <remarks>See: Path Markup Syntax(http://msdn.microsoft.com/en-us/library/cc189041(VS.95).aspx)</remarks>
            <param name="abbreviatedGeometry">The string of path mini-languages for describing geometric paths.</param>
            <returns>A <see cref="T:PathGeometry"/> converted from the the path mini-languages/></returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.FlattenFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Double)">
            <summary>
            Flattens a <see cref="T:PathFigure"/> and adds result points to given <paramref name="points"/>.
            </summary>
            <param name="figure">The input <see cref="T:PathFigure"/>.</param>
            <param name="points">The point list to which result points will append.</param>
            <param name="tolerance">A positive number specifying the maximum allowed error from result points to input path figure.  Value 0 allows algorithm to pick the tolerance automatically.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcPoint(System.Double)">
            <summary>
            Get the normalized arc in (0,0)(1,1) box.
            Zero degree is mapped to [0.5, 0] (up), and clockwise
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcPoint(System.Double,System.Windows.Rect)">
            <summary>
            Get the absolute arc point in given bound with given relative radius.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcAngle(System.Windows.Point)">
            <summary>
            Get the angle on arc relative to (0,0)(1,1) box.
            Zero degree is mapped to [0.5, 0] (up), and clockwise
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcAngle(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Get the angle on arc from given absolute point relative to bound
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeTransform(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Compute the transform that moves Rect from to Rect to.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeTransform(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Computes the transform from the coordinate space of one <c>UIElement</c> to another.
            </summary>
            <param name="from">The source element.</param>
            <param name="to">The destination element.</param>
            <returns>The transform between the <c>UIElement</c>s, or null if it cannot be computed.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeToAbsolutePoint(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Map relative point to absolute using the mapping from given bound to (0,0)(1,1) box.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.AbsoluteToRelativePoint(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Map absolute point to relative using the mapping from (0,0)(1,1) box to given bound.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetStretchBound(System.Windows.Rect,System.Windows.Media.Stretch,System.Windows.Size)">
            <summary>
            Compute the bound after stretch within given logical bound.
            If stretch to uniform, use given aspectRatio.
            If aspectRatio is empty, it's equivalent to Fill.
            If stretch is None, equivalent to Fill or Uniform.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Midpoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the mid point of given 2 points
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The mid point between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Dot(System.Windows.Vector,System.Windows.Vector)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="lhs">The first vector.</param>
            <param name="rhs">The second vector.</param>
            <returns>The dot product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Dot(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the dot product of two Points.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Distance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance between two points.
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The distance between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.SquaredDistance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the square of the distance between two points.
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The square of the distance between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Determinant(System.Windows.Point,System.Windows.Point)">
            <summary>
            Determinant of cross product.  Equivalent to directional area
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Normal(System.Windows.Point,System.Windows.Point)">
            <summary>
            Compute the normal direction vector of given line segments
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Perpendicular(System.Windows.Vector)">
            <summary>
            Compute perpendicular vector, 90 degrees counter-clockwise.
            Vector to right perpendicular result a vector to up.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GeometryEquals(System.Windows.Media.Geometry,System.Windows.Media.Geometry)">
            <summary>
            Returns whether the two geometries are identical.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureGeometryType``1(``0@,System.Windows.Media.Geometry@,System.Func{``0})">
            <summary>
            Ensure the value is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureGeometryType``1(``0@,System.Collections.Generic.IList{System.Windows.Media.Geometry},System.Int32,System.Func{``0})">
            <summary>
            Ensure the list[index] is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureSegmentType``1(``0@,System.Collections.Generic.IList{System.Windows.Media.PathSegment},System.Int32,System.Func{``0})">
            <summary>
            Ensure the list[index] is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.ComputeBSpline(System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Double)">
            <summary>
            de'Boor algorithm to subdevide BSpline into poly Bezier segments.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.MathHelper">
            <summary>
            Helper class providing static properties and methods related to floating point arithmetic.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.Epsilon">
            <summary>
            The minimum distance to consider two values are same.
            Note: internal floating point in MIL/SL is float, not double.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.TwoPI">
            <summary>
            The value of angle of a full circle.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.PentagramInnerRadius">
            <summary>
            The inner radius for pentagram polygon shape, at precision of 3 digits in percentage.
            (1 - Sin36 * Sin72 / Sin54) / (Cos36) ^ 2, which is 0.47210998990512996761913067272407
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.IsVerySmall(System.Double)">
            <summary>
            Determines whether a <c>System.Double</c> value is small enough to be considered
            equivalent to zero.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if value is smaller than <c>DoubleTolerance</c>;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.EnsureRange(System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Return the value that's within the given range
            Given min/max is null means no limit.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.Hypotenuse(System.Double,System.Double)">
            <summary>
            Computes the Euclidean norm of the vector (x, y).
            </summary>
            <param name="x">The first component.</param>
            <param name="y">The second component.</param>
            <returns>The Euclidean norm of the vector (x, y).</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.DoubleFromMantissaAndExponent(System.Double,System.Int32)">
            <summary>
            Computes a real number from the mantissa and exponent.
            </summary>
            <param name="x"></param>
            <param name="exp"></param>
            <returns>The value of x * 2^exp if successful.</returns>
            <remarks>See ::ldexp in any decent C language runtime library.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.IsFiniteDouble(System.Double)">
            <summary>
            Tests a double.
            </summary>
            <param name="x">The double to test.</param>
            <returns><c>true</c> if x is not a NaN and is not equal to plus or minus infinity;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathFigureHelper">
            <summary>
            Helper class to work with PathFigure
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.FlattenFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Double,System.Boolean)">
            <summary>
            Flatten the given figure and add to the point list.
            </summary>
            <param name="tolerance">The error tolerance. Must be possitive. Can be 0, fallback to default tolerance.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.AllSegments(System.Windows.Media.PathFigure)">
            <summary>
            Iterate all segments inside given figure, and returns correct start point for each segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncPolylineFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
            <summary>
            Synchronize the figure to the given list of points as a single polyline segment.
            Try to keep the change minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncPolyBezierFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
            <summary>
            Synchronize the figure to the given list of points as a single PolyBezierSegment.
            Try to keep the change minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncEllipseFigure(System.Windows.Media.PathFigure,System.Windows.Rect,System.Windows.Media.SweepDirection,System.Boolean)">
            <summary>
            Synchronize the given figure to be a closed ellipse with 2 arc segments.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathSegmentData">
            <summary>
            A Tuple data structure for PathSegment and corresponding StartPoint.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PolylineData">
            <summary>
            Represent a polyline consist with a list of connecting points.
            A closed polygon is represented by repeating the first point at the end.
            The differences, normals, angles, and lengths are computed on Demand.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.#ctor(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Construct a polyline with two or more points.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.Difference(System.Int32)">
            The forward difference vector of polyline.
            Points[i] + Differences[i] = Points[i+1]
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.SmoothNormal(System.Int32,System.Double,System.Double)">
            <summary>
            Compute the normal vector of given location (lerp(index, index+1, fraction).
            If the location is within range of cornerRadius, interpolate the normal direction.
            </summary>
            <param name="cornerRadius">The range of normal smoothless.  If zero, no smoothness and return the exact normal on index.</param>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.IsClosed">
            <summary>
            The polyline is closed when first and last point is repeated.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Count">
            <summary>
            The count of points in this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.TotalLength">
            <summary>
            The total arc length of this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Points">
            <summary>
            The point array of this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Lengths">
            <summary>
            The length between line segments, Points[i] to Points[i+1]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Normals">
            <summary>
            The list of normal vectors for each segment.
            Normals[i] is the normal of segment p[i] to p[i + 1].
            Normals[N-1] == Normals[N-2].
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Angles">
            <summary>
            The list of Cos(angle) between 2 line segments on point p[i]
            Note: The value is cos(angle) = Dot(u, v). It's not in degree.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.AccumulatedLength">
            <summary>
            The list of accumulated length from points[i] to points[0]
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.MarchLocation">
            <summary>
            The data structure to communicate with PathMarch algorithm.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetPoint(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Get the interpolated position of this this MarchLocation on given point list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetNormal(Microsoft.Expression.Drawing.Core.PolylineData,System.Double)">
            <summary>
            Get the interpolated normal direction of this this MarchLocation on given normal vector list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetArcLength(System.Collections.Generic.IList{System.Double})">
            <summary>
            Get the arc length of this MarchLocation to the start of the entire polyline.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Reason">
            <summary>
            The reason why this location is sampled.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Index">
            <summary>
            The index of the point on polyline point list.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Ratio">
            <summary>
            Ratio: [0, 1], which is always before / (before + after)
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Before">
            <summary>
            Arc length before stop point.  It's non-negative, and less than Length[index]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.After">
            <summary>
            Arc length after the stop point.  It's non-negative, and less than Length[index]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Remain">
            <summary>
            Remaining length within a step to hit next stop.  Positive to go forward. Negative to go backward.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PolylineHelper">
            <summary>
            Helper class to work with list of points
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineHelper.PathMarch(Microsoft.Expression.Drawing.Core.PolylineData,System.Double,System.Double,System.Func{Microsoft.Expression.Drawing.Core.MarchLocation,System.Double})">
            <summary>
            March the given polyline with given interval and output each stop through callback
            </summary>
            <param name="polyline">The polyline points to march on</param>
            <param name="startArcLength">The arc length to march before stopping at the first point.</param>
            <param name="cornerThreshold">The max angle between edges to be considered a corner vertex</param>
            <param name="stopCallback">Callback when marching algorithm stop at a point.  The callback returns the arc length for next stop.
            If the asked length is negative, march backwards. If callback returns NaN, finish marching.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineHelper.GetWrappedPolylines(System.Collections.Generic.IList{Microsoft.Expression.Drawing.Core.PolylineData},System.Double@)">
            <summary>
            Reorders the given list of polylines so that the polyline a given arclength into the list is the first.
            Polylines that preceded this line are concatenated to the end of the list, with the first polyline at the very end. 
            </summary>
            <param name="lines">A list of polylines.</param>
            <param name="startArcLength">The arclength into the entire list of polylines at which to find the start line.
            The arc length into that line is returned in this variable.</param>
            <returns>The reordered and wrapped list.</returns>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.RandomEngine">
            <summary>
            A random generator support uniform and gaussian distributions.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.RandomEngine.Gaussian">
            <summary>
            Generate a pair of independent standard normally distributed random numbers,
            zero expectation, unit variance, using polar form of the Box-Muller transformation.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.#ctor">
            <summary>
            Private constructor. Force to use factory methods.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a line segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a cubic bezier segment from quatratic curve (3 control points)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a cubic bezier segment with 4 control points.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.SimpleSegment.Points">
            <summary>
            Control points of path segment.  Length is variant.
            Line segment has 2 points, Cubic bezier has 4 points.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.TransformExtensions.TransformEquals(System.Windows.Media.Transform,System.Windows.Media.Transform)">
            <summary>
            Compares two transforms for an exact match.  Transforms with the same value but different structure(e.g. Translate(0,0) and Rotate(0) are not considered equivalent).
            </summary>
            <param name="firstTransform">The first transform.</param>
            <param name="secondTransform">The second transform.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Expression.Media.UnitType">
            <summary>
            Specifies the unit of thickness.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.UnitType.Pixel">
            <summary>
            Unit in pixels.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.UnitType.Percent">
            <summary>
            Unit in percentage relative to bounding box.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometrySource`1">
            <summary>
            Provides the base class of a source of geometry.
            It generate and cache the geometry based on input parameters and layout bounds.
            </summary>
            <remarks>
            A typical implementation will extend the UpdateCachedGeometry() to update this.cachedGeometry.
            This base class will then handle the invalidation, pipeline to geometry effects and caching realtive to layout bounds.
            An implementation should try to reuse the cached geometry as much as possible to avoid reconstruction in rendering thread.
            An implementation can extend the ComputeLogicalBounds to handle Stretch differently.
            </remarks>
            <typeparam name="TParameters">The type of geometry source parameter on which the base class is working on.</typeparam>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySource">
            <summary>
            Provides an interface to describe the source of a geometry.
            </summary>
            <remarks>
            This interface is designed to expose geometry source in a non-generic way.
            Typical implementation should subclass GeometrySource&lt;&gt; instead of implementing this interface directly.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.IGeometrySource.InvalidateGeometry">
            <summary>
            Notify the geometry is invalidated because of external changes.
            </summary>
            <remarks>
            Typically geometry is invalidated when parameters are changed.
            If any geometry has been invalidated externally, geometry will be recomputed regardless bounds' change.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.IGeometrySource.UpdateGeometry(Microsoft.Expression.Media.IGeometrySourceParameters,System.Windows.Rect)">
            <summary>
            Update the geometry using given parameter and layout bounds.
            Returns false if nothing has been updated.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.Geometry">
            <summary>
            Gets or sets the result geometry after the latest UpdateGeometry()
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.LogicalBounds">
            <summary>
            Gets the bounding box where geometry should stretch to.
            The actual geometry might be smaller or larger than this.
            <see cref="P:Microsoft.Expression.Media.IGeometrySource.LogicalBounds"/> should already take stroke thickness and stretch into consideration.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.LayoutBounds">
            <summary>
            Gets the actuall bound of FrameworkElement.
            <see cref="P:Microsoft.Expression.Media.IGeometrySource.LayoutBounds"/> includes logical bounds, stretch and stroke thickness.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometrySource`1.cachedGeometry">
            <summary>
            Specifics the geometry from the previous geometry effect process.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.InvalidateGeometry">
            <summary>
            Notify the geometry is invalidated because of external changes.
            </summary>
            <remarks>
            Typically geometry is invalidated when parameters are changed.
            If any geometry has been invalidated externally, geometry will be recomputed regardless bounds' change.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.UpdateGeometry(Microsoft.Expression.Media.IGeometrySourceParameters,System.Windows.Rect)">
            <summary>
            Update the geometry based on given parameters and layoutBounds.
            Returns false if geometry hasn't been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.UpdateCachedGeometry(`0)">
            <summary>
            Extend the way to provide geometry by implementing this function.
            Return true when any of the geometry is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Extend the way to handle stretch mode.
            Default is to always use Stretch.Fill and center stroke.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.ApplyGeometryEffect(Microsoft.Expression.Media.IGeometrySourceParameters,System.Boolean)">
            <summary>
            Apply geometry effect when dirty or forced, update this.Geometry.
            Otherwise, keep this.Geometry as this.cachedGeometry.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.Geometry">
            <summary>
            Gets or sets the result geometry after the latest UpdateGeometry()
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.LogicalBounds">
            <summary>
            Gets the bounding box where geometry should stretch to.
            The actual geometry might be smaller or larger than this.
            <see cref="P:Microsoft.Expression.Media.GeometrySource`1.LogicalBounds"/> should already take stroke thickness and stretch into consideration.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.LayoutBounds">
            <summary>
            Gets the actuall bound of FrameworkElement.
            <see cref="P:Microsoft.Expression.Media.GeometrySource`1.LayoutBounds"/> includes logical bounds, stretch and stroke thickness.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Expression.Media.ArcGeometrySource.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Arc think Stretch.None is same as Stretch.Fill, assuming aspect ratio = 1:1
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.ArcGeometrySource.NormalizeThickness(Microsoft.Expression.Media.IArcGeometrySourceParameters)">
            <summary>
            Normalize thickness, both relative to bounding box and absolute pixel.
            realtive thickness = 0 -> full circle radius or clamped.
            realtive thickness = 1 -> shrinked to a dot, or degenerated.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.ArrowOrientation">
            <summary>
            Specifies the direction the arrow points.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Left">
            <summary>
            The arrow points to left.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Right">
            <summary>
            The arrow points to right.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Up">
            <summary>
            The arrow points up.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Down">
            <summary>
            The arrow points down.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.BlockArrowGeometrySource.ArrowBuilder">
            <summary>
                 B
                /|
               / C--D
              A     |
               \ C--D
                \|
                 B
            Algorithm only use Width/Height assuming top-left at 0,0
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.CalloutStyle">
            <summary>
            Specifies the rendering style of a Callout shape
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Rectangle">
            <summary>
            A rectangle shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.RoundedRectangle">
            <summary>
            A rounded rectangle shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Oval">
            <summary>
            A oval shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Cloud">
            <summary>
            A cloud shaped callout.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateEdge(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double,System.Boolean)">
            <summary>
            Update the edge line, and connect to anchor point if necessary
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdatePolylineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Update polyline segment, connecting start, anchor and end point with Callout style
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateLineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point)">
            <summary>
            Update the line segment to given point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.ComputeCorners(System.Double)">
            <summary>
            Compute the corner points, clockwise, 8 points for 4 corners
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateCornerArc(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point)">
            <summary>
            Corner Arc is always smaller arc with 90 degree
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometryEffect">
            <summary>
            Provides the base class of GeometryEffect that transform a geometry into another geometry.
            </summary>
            <remarks>
            This class provides the basic implementation of processing the rendered geometry of a IShape before it's passed to rendering.
            A typical implementation will extend the virtual function <see cref="F:ProcessGeometry"/> to transform input geometry.
            <see cref="T:GeometryEffect"/> is typically attached to <see cref="T:IShape"/> as an attached property and activated when <see cref="T:IShape"/> geometry is updated.
            The <see cref="P:OutputGeometry"/> of a <see cref="T:GeometryEffect"/> will replace the rendered geometry in <see cref="T:IShape"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.GetGeometryEffect(System.Windows.DependencyObject)">
            <summary>
            Gets the geometry effect as attached property on given dependency object.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.SetGeometryEffect(System.Windows.DependencyObject,Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Sets the geometry effect as attached property on given dependency object.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.CloneCurrentValue">
            <summary>
            Creates a modifiable clone (deep copy) of the <see cref="T:GeometryEffect"/> using its current values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.DeepCopy">
            <summary>
            Makes a deep copy of the geometry effect. Implements CloneCurrentValue in Silverlight.
            </summary>
            <returns>A clone of current instance of geometry effect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Equals(Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Tests if given geometry effect is equivalent to the current instance.
            </summary>
            <param name="geometryEffect">a geometry effect compare with.</param>
            <returns>Returns true when two effects renders a same appearance.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometryEffect.cachedGeometry">
            <summary>
            Specifics the geometry from the previous geometry effect process.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.InvalidateGeometry">
            <summary>
            Invalidate the geometry effect without actually compute the geometry.
            It will notify all parent shapes or effects to invalidate accordingly.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.ProcessGeometry(System.Windows.Media.Geometry)">
            <summary>
            Process geometry effect on given input geometry.
            Result is stored in GeometryEffect.OutputGeometry.
            </summary>
            <returns>Return false if nothing has been changed.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.UpdateCachedGeometry(System.Windows.Media.Geometry)">
            <summary>
            Extend the way of updating cachedGeometry based on given input geometry.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Detach">
            <summary>
            Notified when detached from parent chain.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Attach(System.Windows.DependencyObject)">
            <summary>
            Notified when attached to a parent chain.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.InvalidateParent(System.Windows.DependencyObject)">
            <summary>
            Invalidate the geometry on given dependency object when
            the object is a valid parent type (IShape or GeometryEffect).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.CreateInstanceCore">
            <summary>
            Implement the Freezable in WPF.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.DefaultGeometryEffect">
            <summary>
            The default geometry effect that does nothing but passing through the input geometry.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.OutputGeometry">
            <summary>
            Gets the output geometry of this geometry effect.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.Parent">
            <summary>
            Parent can be either IShape or GeometryEffectGroup.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometryEffectConverter">
            <summary>
            Provides the conversion between string and geometry effect
            </summary>
            <remarks>
            This class enables the brief sytax in xaml like <code>GeometryEffect="Sketch"</code>
            It will create a clone of instance of geometry effect so it can be used as resources.
            </remarks>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometryEffectConverter.registeredEffects">
            <summary>
            Build a preset list of supported geometry effects.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A GeometryEffect can be converted from string type.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A GeometryEffect can be converted to string type.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts a string to a geometry effect.  Fallback value is null.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a geometry effect into a string.  Fallback value is null.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySourceExtensions">
            <summary>
            Provides helper extension methods to work with IGeometrySource and parameters.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.ArrowType">
            <summary>
            Specifies the Arrow head type.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.NoArrow">
            <summary>
            No arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.Arrow">
            <summary>
            A triagle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.StealthArrow">
            <summary>
            A stealth triangle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.OpenArrow">
            <summary>
            An open triangle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.OvalArrow">
            <summary>
            An oval head.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.CornerType">
            <summary>
            Specifies the corner location.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.TopLeft">
            <summary>
            On top left of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.TopRight">
            <summary>
            On top right of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.BottomRight">
            <summary>
            On bottom right of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.BottomLeft">
            <summary>
            On bottom left of bounding box.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.PolygonGeometrySource.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Polygon think Stretch.None is same as Stretch.Fill
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.SketchGeometryEffect">
            <summary>
            A geometry effect to transform any geometry into a Sketch style as in SketchFlow.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.DeepCopy">
            <summary>
            Makes a deep copy of the geometry effect
            </summary>
            <returns>A clone of current instance of geometry effect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.Equals(Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Tests if given geometry effect is equivalent to the current instance.
            </summary>
            <param name="geometryEffect">a geometry effect compare with.</param>
            <returns>Returns true when two effects renders a same appearance.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.UpdateCachedGeometry(System.Windows.Media.Geometry)">
            <summary>
            Updating cachedGeometry based on given input geometry.
            </summary>
            <param name="input">A input geometry</param>
            <returns>Returns true when anything on cachedGeometry has been updated.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.SketchGeometryEffect.randomSeed">
            <summary>
            Use the same random seed on creation to keep visual flickering minimum
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.GetEffectiveSegments(System.Windows.Media.PathFigure)">
            <summary>
            Iterates all simple segments in given path figure including the closing chord.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Shapes.Arc">
            <summary>
            Renderes an Arc shape supporting Arc, Ring and Pie mode controled by ArcThickness.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Shapes.PrimitiveShape">
            <summary>
            Platform neutral implementation of Shape deriving from WPF:Shape or SL:Path
            </summary>
            <summary>
            Provides WPF implementation of Shap who derives from platform Shape.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.CreateGeometrySource">
            <summary>
            Extend how the shape is drawn with creating geometry source
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.MeasureOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
            <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes, or possibly on other considerations such as fixed container size.</returns>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <remarks>
            In WPF, measure override works from Shape.DefiningGeometry which is not always as expected
            see bug 99497 for details where WPF is not having correct measure by default.
            
            In Silverlight, measure override on Path does not work the same as primitive shape works.
            
            We should return the smallest size this shape can correctly render without clipping.
            By default a shape can render as small as a dot, therefore returning the strokethickness.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Shapes.PrimitiveShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Shapes.PrimitiveShape.GeometryMargin">
            <summary>
            Gets or sets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Shapes.PrimitiveShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.PrimitiveShape.RenderedGeometry">
            <summary>
            Gets a value that represents the final rendered <see cref="T:System.Windows.Media.Geometry"/> of a <see cref="T:System.Windows.Shapes.Shape"/>.
            </summary>
            <returns>The final rendered <see cref="T:System.Windows.Media.Geometry"/> of a <see cref="T:System.Windows.Shapes.Shape"/>.</returns>
            <remarks>The WPF primitive shape hides base class RenderedGeometry to provide a local storage and matches Silverlight primitive shape interface.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
            <value>The start angle in degrees. 0 degree is pointing up.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.EndAngle">
            <summary>
            Gets or sets the end angle.
            </summary>
            <value>The end angle in degree. 0 degree is pointing up.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.ArcThickness">
            <summary>
            Gets or sets the arc thickness.
            </summary>
            <value>The arc thickness in pixels or percentage depending on "ArcThicnessUnit"/>.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.ArcThicknessUnit">
            <summary>
            Gets or sets the arc thickness unit.
            </summary>
            <value>The arc thickness unit, either pixel or percentage.</value>
        </member>
        <member name="T:Microsoft.Expression.Shapes.BlockArrow">
            <summary>
            Renders a block arrow shape supporting resizable arrow head and body.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation where the arrow is pointing to.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.ArrowheadAngle">
            <summary>
            Gets or sets the arrowhead angle.
            </summary>
            <value>The arrowhead angle in degrees.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.ArrowBodySize">
            <summary>
            Gets or sets the size of the arrow body.
            </summary>
            <value>The size of the arrow body in pixels.</value>
        </member>
        <member name="T:Microsoft.Expression.Shapes.RegularPolygon">
            <summary>
            Renders a regular polygon shape or corresponding star shape with variable number of points.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.RegularPolygon.PointCount">
            <summary>
            Gets or sets the number of points of the <see cref="T:Microsoft.Expression.Shapes.RegularPolygon"/>
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.RegularPolygon.InnerRadius">
            <summary>
            Gets or sets the the distance between the center and the innermost point.
            </summary>
            <value>The distance between the center and the innermost point.</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\ko\Microsoft.Expression.Controls.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Controls</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.Initialize">
            <summary>
            Called before we loop over the polylines.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.ShouldBreak(System.Int32)">
            <summary>
            Checks whether or not we should continue looping over the polylines.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnPolylineBegin(Microsoft.Expression.Drawing.Core.PolylineData)">
            <summary>
            Called before we begin marching a new polyline.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnPolylineCompleted(System.Double)">
            <summary>
            Called when we walk off the end of a polyline.
            </summary>
            <param name="remaingLength">The remaining arclength in the polyline.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnStepCompleted(System.Double)">
            <summary>
            Called when we sucessfully complete a step.
            </summary>
            <param name="actualStepDistance">The actual step distance.
            This may be different than Step if we have wrapped to another polyline.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.Distribute(Microsoft.Expression.Controls.PathPanel,System.Int32,System.Int32)">
            <summary>
            Distributes the children of a path panel along a given layout path.
            </summary>
            <param name="pathPanel">The path panel.</param>
            <param name="pathIndex">The index of the path in pathPanel.LayoutPaths.</param>
            <param name="childIndex">The index of the first child to be laid out on this path.</param>
            <returns>The index of the next child to be distributed. If childIndex is returned, this function has done nothing.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.ChildIndex">
            <summary>
            The index of the next child to be arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Span">
            <summary>
            The distance in arclength that we want to use for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Step">
            <summary>
            The distance in arclength to walk along the current polyline.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Capacity">
            <summary>
            The total number of elements to be arranged on the LayoutPath.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.EvenDistributionStrategy">
            <summary>
            Distributes the children of a path panel along a layout path.
            Even distribution means that there is equal arclength between the centers of all
            the elements on the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.ChangedPathLayoutProperties">
            <summary>
            Specifies which path layout properties have changed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs.#ctor(Microsoft.Expression.Controls.ChangedPathLayoutProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs"/> class.
            </summary>
            <param name="changedProperties">The data for the event.</param>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs.ChangedProperties">
            <summary>
            Gets the properties changed in a <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathLayoutData">
            <summary>
            Encapsulates the data needed to update a <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LayoutPathIndex">
            <summary>
            Gets or sets the index of the path on which an element is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.GlobalIndex">
            <summary>
            Gets or sets the index of an element in a collection of elements.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LocalIndex">
            <summary>
            Gets or sets the index of an element on a path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.GlobalOffset">
            <summary>
            Gets or sets the offset of an element proportional to the total length of a collection of paths.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LocalOffset">
            <summary>
            Gets or sets the offset of an element proportional to the length of path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.NormalAngle">
            <summary>
            Gets or sets the angle perpendicular to the path at an element's location.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.OrientationAngle">
            <summary>
            Gets or sets the angle perpendicular to the path at an element's location if the element is oriented to the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.IPathLayoutItem">
            <summary>
            Represents an element that is arranged by a <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </summary>
            <remarks>
            Implementing this interface enables <see cref="T:Microsoft.Expression.Controls.PathPanel"/> to set these properties when the element is arranged.
            This interface is not intended for general implementation.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.IPathLayoutItem.Update(Microsoft.Expression.Controls.PathLayoutData)">
            <summary>
            Updates the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/> properties based on the given <see cref="T:Microsoft.Expression.Controls.PathLayoutData"/> and raises the <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
            <param name="data">The data needed to update the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/>.</param>
        </member>
        <member name="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated">
            <summary>
            Occurs when one or more of the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/> properties change.
            </summary>
            <remarks>
            This event is raised whenever the item’s position along the path is updated. This can occur due to changes in the properties on the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> or changes to <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LayoutPathIndex">
            <summary>
            Gets the index of the path on which the item is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalIndex">
            <summary>
            Gets the index of the item in a collection of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalIndex">
            <summary>
            Gets the index of the item on the path on which it is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalOffset">
            <summary>
            Gets the offset of the item proportional to the total length of a collection of paths.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalOffset">
            <summary>
            Gets the offset of the item proportional to the length of the path on which it is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.NormalAngle">
            <summary>
            Gets the angle perpendicular to the path at the item's location.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.OrientationAngle">
            <summary>
            Gets the angle perpendicular to the path at the items's location if the item is oriented to the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.Distribution">
            <summary>
            Specifies the distribution of a <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.Orientation">
            <summary>
            Specifies the orientation of elements on a <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.FillBehavior">
            <summary>
            Specifies the method for altering the <see cref="P:Microsoft.Expression.Controls.LayoutPath.Span"/> on an open path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.LayoutPath">
            <summary>
            Describes a path along which elements are arranged.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Controls.LayoutPath.transformedPolylines">
            <summary>
            Ideally, we want to cache the Bezier curves before flattening, because transform will affect flattening.
            That requires us to cache curves that we don't support very well yet.  Instead, we cache the flatten points
            in distribution strategy and transform them on demand.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.SourceElement">
            <summary>
            Gets or sets the element that defines the path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Distribution">
            <summary>
            Gets or sets whether items are laid out evenly or with a fixed padding.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Capacity">
            <summary>
            Gets or sets the maximum number of items displayed on the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Padding">
            <summary>
            Gets or sets the distance in pixels along the arc length of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> between two items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Orientation">
            <summary>
            Gets or sets the orientation of the items.
            </summary>
            <remarks>
            This property is supported on <see cref="T:Microsoft.Expression.Controls.PathListBox"/>, but not <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Start">
            <summary>
            Gets or sets the distance from the start of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> to place the first item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Span">
            <summary>
            Gets or sets the percentage of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> that participates in layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.FillBehavior">
            <summary>
            Gets or set the method to alter <see cref="P:Microsoft.Expression.Controls.LayoutPath.Span"/> on an open path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.ActualCapacity">
            <summary>
            Gets the computed Capacity.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.IsValid">
            <summary>
            Gets whether or not the <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/> is valid in the context.
            A <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/> is invalid if it is a descendant of the <see cref="T:Microsoft.Expression.Controls.PathPanel"/> in which it used.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PaddedDistributionStrategy">
            <summary>
            Distributes the children of a layout path based on the size of the children and a given padding between the children.
            The distance in arclength between children is determined by the padding plus the sum of the radii of the children's bounding boxes.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathListBox">
            <summary>
            Contains a list of items that are laid out along one or more paths.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathListBox"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.GetContainerForItemOverride">
            <summary>
            Creates the element used to display a specified item.
            </summary>
            <returns>A <see cref="T:Microsoft.Expression.Controls.PathListBoxItem"/> corresponding to a specified item.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own item container.
            </summary>
            <returns>true if the item is its own item container; otherwise, false.</returns>
            <param name="item">The specified item.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements.
            </summary>
            <param name="finalSize">The size that this object should use to arrange its child elements.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.LayoutPaths">
            <summary>
            Gets or sets a collection of objects that define the path(s) used for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.StartItemIndex">
            <summary>
            Gets or sets the index to use within the list of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.WrapItems">
            <summary>
            Gets or sets whether the item index wraps to the beginning of the collection when StartItemIndex is greater than 0.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathListBoxItem">
            <summary>
            Represents an item in a <see cref="T:Microsoft.Expression.Controls.PathListBox"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBoxItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathListBoxItem"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBoxItem.Update(Microsoft.Expression.Controls.PathLayoutData)">
            <summary>
            For a description of this member, see <see cref="M:Microsoft.Expression.Controls.IPathLayoutItem.Update(Microsoft.Expression.Controls.PathLayoutData)"/>.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.PathListBoxItem.PathLayoutUpdated">
            <summary>
            For a description of this member, see <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LayoutPathIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LayoutPathIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.GlobalIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LocalIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.GlobalOffset">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalOffset"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LocalOffset">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalOffset"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.NormalAngle">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.NormalAngle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.OrientationAngle">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.OrientationAngle"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathPanel">
            <summary>
            Arranges child elements along one or more path.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Expression.Controls.PathPanel"/> can be used as an alternative to <see cref="T:Microsoft.Expression.Controls.PathListBox"/> when selection is not necessary.
            The <see cref="P:Microsoft.Expression.Controls.LayoutPath.Orientation"/> property is not supported on <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathPanel"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the size required for child elements.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. </param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements.
            </summary>
            <param name="finalSize">The size that this object should use to arrange its child elements.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.ArrangeChild(System.Int32,System.Int32,Microsoft.Expression.Drawing.Core.PolylineData,Microsoft.Expression.Drawing.Core.MarchLocation,System.Int32)">
            <summary>
            Arranges the child at the given index at a particular location on a LayoutPath.
            </summary>
            <param name="indirectIndex">An index from the range 0 to PathPanel.Count.</param>
            <param name="pathIndex">The index of the layout path on which to arrange the child.</param>
            <param name="polyline">The polyline in the layout path.</param>
            <param name="location">The location on the polyline.</param>
            <param name="localIndex">The index of the child on the LayoutPath.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.GetChildRadius(System.Int32)">
            <summary>
            Calculates the radius of the bounding circle for the child at the given index.
            </summary>
            <param name="indirectIndex">An index from the range 0 to PathPanel.Count.</param>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.LayoutPaths">
            <summary>
            Gets or sets a collection of objects that define the path(s) used for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.StartItemIndex">
            <summary>
            Gets or sets the index to use within the list of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.WrapItems">
            <summary>
            Gets or sets whether the item index wraps to the beginning of the collection when StartItemIndex is greater than 0.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.ValidPaths">
            <summary>
            The subset of LayoutPaths that are attached and not Collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.Count">
            <summary>
            Count is the number of Children that the PathPanel will layout.
            If StartItemIndex > 0 and WrapItems is false, this can be less than PathPanel.Children.Count
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetItemsHost(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the Panel that contains the containers of an ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>
            The Panel that contains the containers of an ItemsControl, or null
            if the Panel could not be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.TraverseBreadthFirst``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Traverses a tree by accepting an initial value and a function that 
            retrieves the child nodes of a node.
            </summary>
            <typeparam name="T">The type of the stream.</typeparam>
            <param name="initialNode">The initial node.</param>
            <param name="getChildNodes">A function that retrieves the child
            nodes of a node.</param>
            <param name="traversePredicate">A predicate that evaluates a node
            and returns a value indicating whether that node and it's children
            should be traversed.</param>
            <returns>A stream of nodes.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetVisualChildrenAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree children of an element and the element itself.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetLogicalChildren(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical children of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetLogicalDescendents(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical descendents of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\ja\Microsoft.Expression.Effects.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Effects</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Media.Effects.BlindOrientation">
            <summary>
            Determine the orientation of the blinds
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.BlindsTransitionEffect">
            <summary>
            Transition shader that simulates blinds opening when transitioning
            from one visual to another. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.OrientationProperty">
            <summary>
            Gets or sets the orientation of the blinds
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.CountProperty">
            <summary>
            Gets or sets the number of blinds
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.ShaderOrientationProperty">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the BlindsTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of BlindsTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.Orientation">
            <summary>
            Gets or sets orientatio of the blinds.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.Count">
            <summary>
            Gets or sets the number of blinds to display.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.ShaderOrientation">
            <summary>
            Gets or sets orientation of the blinds.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.BloomEffect">
            <summary>
            Effect that implements a bloom illumination of a visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
            
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BloomIntensityProperty">
            <summary>
            This property is mapped to the BloomIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseIntensityProperty">
            <summary>
            This property is mapped to the BaseIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BloomSaturationProperty">
            <summary>
            This property is mapped to the BloomSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseSaturationProperty">
            <summary>
            This property is mapped to the BaseSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomIntensityProperty">
            <summary>
            This property is mapped to the BloomIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomSaturationProperty">
            <summary>
            This property is mapped to the BloomSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.ThresholdProperty">
            <summary>
            This property is mapped to the BaseSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BloomEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.Threshold">
            <summary>
            Gets or sets the minimum intensity that will be used for the bloom
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseIntensity">
            <summary>
            Gets or sets the base intensity
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BloomIntensity">
            <summary>
            Gets or sets the bloom intensity
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseSaturation">
            <summary>
            Gets or sets the base saturation
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BloomSaturation">
            <summary>
            Gets or sets the bloom saturation
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomIntensity">
            <summary>
            Gets or sets the Base/BloomIntensity variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomSaturation">
            <summary>
            Gets or sets the BaseBloomSaturation variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect">
            <summary>
            Transition effect that reveals two visuals through a growing/shrinking circle. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.FeatherAmountProperty">
            <summary>
            Dependency property which modifies the Feather amount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseProperty">
            <summary>
            Dependency property which modifies the circle movement.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseShaderProperty">
            <summary>
            Dependency property which modifies the reverseShader variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the CircleRevealTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of CircleRevealTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.FeatherAmount">
            <summary>
            Gets or sets the FuzzyAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.Reverse">
            <summary>
            Gets or sets playing the circle reveal backward
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseShader">
            <summary>
            Gets or sets playing the circle reveal backward into the shader
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect">
            <summary>
            Transition effect that transitions two visuals using a cloud 
            texture as the sampler threshold.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CloudyTransitionEffect">
            <summary>
            Defines a transition shader effect that uses an image as a sampler threshold
            for interpolating pixel value between two visuals. 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect">
            <summary>
            Defines a transition shader effect that provides a random value
            allowing the effect to provide variance each time the effect is run.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.RandomSeedProperty">
            <summary>
            Dependency property which modifies the RandomSeed variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.#ctor">
            <summary>
            Updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.RandomSeed">
            <summary>
            Gets or sets the RandomSeed variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.CloudImageProperty">
            <summary>
            Dependency property which modifies the CloudImage variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.CloudImage">
            <summary>
            Gets or sets the CloudImage variable within the shader used for sampling. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the CloudRevealTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of CloudRevealTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.ColorToneEffect">
            <summary>
            Effects that modifies the color tone of a visual using
            two colors as the sampling.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.DesaturationProperty">
            <summary>
            This property is mapped to the Desaturation variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.ToneAmountProperty">
            <summary>
            This property is mapped to the Toned variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.LightColorProperty">
            <summary>
            This property is mapped to the LightColor variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.DarkColorProperty">
            <summary>
            This property is mapped to the DarkColor variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.ColorToneEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.Desaturation">
            <summary>
            Gets or sets the Desaturation variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.ToneAmount">
            <summary>
            Gets or sets the Toned variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.LightColor">
            <summary>
            Gets or sets the LightColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.DarkColor">
            <summary>
            Gets or sets the DarkColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.EmbossedEffect">
            <summary>
            Effect that simulates an embossed look to the visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.AmountProperty">
            <summary>
            This property is mapped to the Amount variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.HeightProperty">
            <summary>
            This property is mapped to the Height variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.ColorProperty">
            <summary>
            This property is mapped to the Color variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.EmbossedEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Amount">
            <summary>
            Gets or sets the Amount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Height">
            <summary>
            Gets or sets the Height variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Color">
            <summary>
            Gets or sets the Color variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.FadeTransitionEffect">
            <summary>
            Transition effect that gradually transitions from one visual to another.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.FadeTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.FadeTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the FadeTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of FadeTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MagnifyEffect">
            <summary>
            Effect that simulates a magnifying lens.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.InnerRadiusProperty">
            <summary>
            Gets or sets the InnerRadius variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.OuterRadiusProperty">
            <summary>
            Gets or sets the OuterRadius variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.CenterProperty">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.AmountProperty">
            <summary>
            Gets or sets the amount variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.InputProperty">
            <summary>
            Gets or sets the input used in the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.generalTransform">
            <summary>
            The transform used for this shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.InnerRadius">
            <summary>
            Gets or sets the inner radius variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.OuterRadius">
            <summary>
            Gets or sets the outer radius variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Center">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Amount">
            <summary>
            Gets or sets the ShrinkFactor: 
            The higher the shrink factor the "smaller" the content inside the ellipse will appear. 
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.EffectMapping">
            <summary>
            Gets the EffectMapping.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform">
            <summary>
            The GeneralTransform corrosponding to the Magnify effect.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.biasValue">
            <summary>
            Attempt to transform a point based on the effect.
            </summary>
            <param name="targetPoint">The point to transform.</param>
            <param name="result">The result if available.</param>
            <returns>Return true if successful.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.effect">
            <summary>
            The effect instance.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.IsInverse">
            <summary>
            If the transform is an inverse.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.inverseTransform">
            <summary>
            The transform specific to this Effect.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.#ctor(Microsoft.Expression.Media.Effects.MagnifyEffect)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fx">The source effect.</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.TransformBounds(System.Windows.Rect)">
            <summary>
            This particular effect keeps axis aligned lines axis aligned, so transformation of the rect is just
            transformation of its corner points.
            </summary>
            <param name="rect">The input rect.</param>
            <returns>The output rect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.OutToIn(System.Windows.Point,System.Double,System.Double,System.Windows.Point,System.Double)">
            <summary>
            For the inverse of the shader, we need to find Pin which is the Pixel Ouput, given Pout the texture input (is the reverse of the shader)
            However, the shader algorithm is dependant on the radius of the pixel output from the center, which is a variable that we don't
            have when computing the inverse. We need to perform bisection in order to converge using the equation below
            PHatout = PHat_in*Scalar where
            PHatout = Pout - Pcenter  
            pHatin = Pin -Pcenter
            
            Scalar is dependent on the radius of Pin (which we don't have). 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.InToOut(System.Windows.Point,System.Double,System.Double,System.Windows.Point,System.Double)">
            <summary>
            Given a pixel output (Pin) find the texture input (Pout)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.CreateInstanceCore">
            <summary>
            Creats a new instance.
            </summary>
            <returns>A new instance of this.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.PointIsInCircle(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Determines if a point is within an ellipse.
            </summary>
            <param name="pt">The test point.</param>
            <param name="center">The center point of the ellipse.</param>
            <param name="radius">The radius of the ellipse.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.Inverse">
            <summary>
            Gets the inverse transform.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MonochromeEffect">
             <summary>
            Effect that turns a visual into a monochrom color
             </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MonochromeEffect.ColorProperty">
            <summary>
            Gets or sets the FilterColor variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MonochromeEffect.InputProperty">
            <summary>
            Gets or sets the Input of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MonochromeEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MonochromeEffect.Color">
            <summary>
            Gets or sets the FilterColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MonochromeEffect.Input">
            <summary>
            Gets or sets the input used in the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.PixelateEffect">
            <summary>
            Effect that pixelates a visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.PixelateEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.PixelateEffect.PixelationProperty">
            <summary>
            This property is mapped to the pixelation amount variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.PixelateEffect.Pixelation">
            <summary>
            Gets or sets the amount of pixelation inside the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.PixelateEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.PixelateTransitionEffect">
            <summary>
            Transition effect that increase/decrease pixelation between two visuals.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the PixelateTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of PixelateTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect">
            <summary>
            Transition effects that performs a radial blur of the current visual  as the new visual is introduced.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the RadialBlurTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of RadialBlurTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RippleEffect">
            <summary>
            Effect that simulates water ripples on the visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.CenterProperty">
            <summary>
            Gets or sets the Center variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.MagnitudeProperty">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.FrequencyProperty">
            <summary>
            Gets or sets the Frequency variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.PhaseProperty">
            <summary>
            Gets or sets the Phase variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.InputProperty">
            <summary>
            Gets or sets the input brush used in the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Center">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Magnitude">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Frequency">
            <summary>
            Gets or sets the frequency variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Phase">
            <summary>
            Gets or sets the Phase variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RippleTransitionEffect">
            <summary>
            Transition effect that simulate water ripple during transition. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the RippleTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of RippleTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SharpenEffect">
            <summary>
            Effects that makes a visual more crisp and sharper. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.AmountProperty">
            <summary>
            This property is mapped to the Amount variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.HeightProperty">
            <summary>
            This property is mapped to the Width variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SharpenEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Amount">
            <summary>
            Gets or sets the Amount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Height">
            <summary>
            Gets or sets the Height variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SlideDirection">
            <summary>
            Define the slide orientation
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SlideInTransitionEffect">
            <summary>
            Transition effect that slide the current visual away, revealing the new visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideDirectionProperty">
            <summary>
            Dependency property which modifies the SlideAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideNormalProperty">
            <summary>
            Dependency property which modifies the SlideAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the SlideInTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of SlideInTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideDirection">
            <summary>
            Gets or sets the SlideAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideNormal">
            <summary>
            Gets or sets the SlideAmount variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect">
             <summary>
            Transition effect that swirl the current visual while introducing the new visual.
             </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.TwistAmountProperty">
            <summary>
            Dependency property which modifies the TwistAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.CellCountProperty">
            <summary>
            Dependency property which modifies the number of cell where pixels will be twisted.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.#ctor(System.Double)">
            <summary>
            Creates an instance and sets the shader's twist variable to the specified values.
            </summary>
            <param name="twist">level of swirl twist</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the SmoothSwirlGridTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of SmoothSwirlGridTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.TwistAmount">
            <summary>
            Gets or sets the TwistAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.CellCount">
            <summary>
            Gets or sets the CellCount variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SwirlEffect">
            <summary>
            Effect that swirls the current visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.CenterProperty">
            <summary>
            This property is mapped to the Center variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.TwistAmountProperty">
            <summary>
            This property is mapped to the SwirlStrength variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.AngleFrequencyProperty">
            <summary>
            This property is mapped to the AngleFrequency variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.generalTransform">
            <summary>
            The transform used when this Effect is applied.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.Center">
            <summary>
            Gets or sets the Center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.TwistAmount">
            <summary>
            Gets or sets the SwirlStrength variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.AngleFrequency">
            <summary>
            Gets or sets the AngleFrequency variable within the shader.
            We do not expose this property. 
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.EffectMapping">
            <summary>
            Gets the GeneralTransform for this effect.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform">
            <summary>
            For transforming input and tree transformations.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.theEffect">
            <summary>
            The instance of the Effect.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.thisIsInverse">
            <summary>
            The inverse of the transform.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.inverseTransform">
            <summary>
            The inverse of this GeneralTransform.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.#ctor(Microsoft.Expression.Media.Effects.SwirlEffect)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="eff">The effect itself.</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.TransformBounds(System.Windows.Rect)">
            <summary>
            For this operation, the bounds is the bounding box of the 4 transformed points. 
            Need to transform each of them, and then circumscribe.  This is true for both the 
            forward and the inverse.
            </summary>
            <param name="rect">The input rect.</param>
            <returns>The transformed rect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.TryTransform(System.Windows.Point,System.Windows.Point@)">
            <summary>
            Attempt to transform inPoint with the Swirl effect.
            </summary>
            <param name="targetPoint">The input point.</param>
            <param name="result">The output point after transformed using the Swirl effect.</param>
            <returns>True and throws if false.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.CreateInstanceCore">
            <summary>
            Returns a new instance of this.
            </summary>
            <returns>A new instance.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.Inverse">
            <summary>
            Gets a clone of the inverse of the current transform.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WaveTransitionEffect">
            <summary>
            Transition effect that waves the current visual while introducing the new visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.MagnitudeProperty">
            <summary>
            Dependency property which modifies the Magnitude variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.PhaseProperty">
            <summary>
            Dependency property which modifies the Phase variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.FrequencyProperty">
            <summary>
            Dependency property which modifies the Phase variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WaveTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WaveTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the WaveTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of WaveTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Magnitude">
            <summary>
            Gets or sets the magnitude of the wave
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Phase">
            <summary>
            Gets or sets the phase of the wave
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Frequency">
            <summary>
            Gets or sets the magnitude of the wave
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WipeDirection">
            <summary>
            Define the wipe direction.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WipeTransitionEffect">
            <summary>
            Transition effect that wipes the current visual introducing the new visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.WipeDirectionProperty">
            <summary>
            Dependency property which modifies the preset of the wipe
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.FeatherAmountProperty">
            <summary>
            Dependency property which modifies the FuzzyAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOriginProperty">
            <summary>
            Dependency property which modifies the LineOrigin variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineNormalProperty">
            <summary>
            Dependency property which modifies the LineNormal variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOffsetProperty">
            <summary>
            Dependency property which modifies the LineOffset variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WipeTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WipeTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the WipeTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of WipeTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.WipeDirection">
            <summary>
            Gets or sets the direction of the wipe.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.FeatherAmount">
            <summary>
            Gets or sets the FuzzyAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOrigin">
            <summary>
            Gets or sets the LineOrigin variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineNormal">
            <summary>
            Gets or sets the LineNormal variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOffset">
            <summary>
            Gets or sets the LineOffset variable within the shader.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\ja\Microsoft.Expression.Interactions.xml ===
﻿<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Interactions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Interactivity.Core.ActionCommand">
            <summary>
パラメーターを取らないメソッド、または 1 つのパラメータを取るメソッドをラップする、ICommand の基本的な実装です。
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action)">
            <summary>
<see cref="T:Microsoft.Expression.Interactivity.Core.ActionCommand"/> クラスの新しいインスタンスを初期化します。
            </summary>
<param name="action">アクション。</param>
<remarks>このコンストラクターを使用し、ICommand パラメータを無視するアクションを提供します。</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action{System.Object})">
            <summary>
<see cref="T:Microsoft.Expression.Interactivity.Core.ActionCommand"/> クラスの新しいインスタンスを初期化します。
            </summary>
<param name="objectAction">オブジェクト パラメーターを取るアクション。</param>
<remarks>このコンストラクターを使用し、メソッドの実行によって渡されるオブジェクト パラメーターを使用するアクションを提供します。</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
現在の状態でコマンドが実行可能かどうかを決定するメソッドを定義します。
            </summary>
<param name="parameter">コマンドにより使用されるデータです。このコマンドが引き渡すデータを要求しない場合、オブジェクトを null に設定できます。</param>
            <returns>
常に真を返します。
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.Execute(System.Object)">
            <summary>
コマンドが起動される際に呼び出すメソッドを定義します。
            </summary>
<param name="parameter">コマンドにより使用されるデータです。このコマンドが引き渡すデータを要求しない場合、オブジェクトを null に設定できます。</param>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecuteChanged">
            <summary>
コマンドを実行すべきかどうかに影響を与える変更がされたときに発生します。ActionCommand によっては実行されません。
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ChangePropertyAction">
            <summary>
起動されたときに、特定のプロパティを特定の値に変更するアクションです。
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.#ctor">
            <summary>
<see cref="T:Microsoft.Expression.Interactivity.Core.ChangePropertyAction"/> クラスの新しいインスタンスを初期化します。
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Invoke(System.Object)">
            <summary>
アクションを起動します。
            </summary>
<param name="parameter">アクションへのパラメーター。Action がパラメーターを要求しない場合、パラメーターを null 参照に設定できます。</param>
<exception cref="T:System.ArgumentException"><c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName"/> を伴うプロパティは、ターゲット上で見つかりませんでした。</exception>
<exception cref="T:System.ArgumentException"><c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Value"/> で指定された値に<c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName"/> を設定できませんでした。</exception>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName">
            <summary>
変更するプロパティの名前を取得または設定します。これは依存関係プロパティです。
            </summary>
<value>変更するプロパティの名前。</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Value">
            <summary>
設定する値を取得または設定します。これは依存関係プロパティです。
            </summary>
<value>設定する値。</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Duration">
            <summary>
ChangePropertyAction が起動されたときに表示されるアニメーションの再生時間を取得または設定します。これは依存関係プロパティです。時間を設定しないと、アニメーションは適用されません。
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager">
            <summary>
ExtendedVisualStateManager は、レイアウト プロパティのアニメーションを滑らかにするカスタム VisualStateManager です。このカスタム VisualStateManager により、状態は Grid.Column などのプロパティの変更を含むことができ、要素の高さを 'Auto' に切り替えたり、戻したりできます。これらの変更は、適切な切り替え効果の GeneratedDuration および GeneratedEasingFunction を使用することによって、徐々に滑らかになります。このアルゴリズムの一般的な説明については、以下の "VisualStateManager オーバーライド" を参照してください。
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.UseFluidLayoutProperty">
            <summary>
VisualStateGroup は、場合によっては Fluid Layout を使用できません。
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValuesProperty">
            <summary>
VisualStateGroup はこれらの元の値のリストをアタッチされたプロパティに保持します。
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutStoryboardProperty">
            <summary>
すべての状態について、レイアウト固有のプロパティを抽出し、状態に添付します。これらのプロパティは、状態自体から削除されます。
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CurrentStateProperty">
            <summary>
現在の状況を保存します。
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.MovingElements">
            <summary>
これは、現在モーション中の要素のセットです。
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutTransitionStoryboard">
            <summary>
これは、移行をアニメーション化するストーリーボードです。
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutProperties">
            <summary>
この一覧には、すべての既知のレイアウト プロパティが含まれます。
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.StopAnimations">
            <summary>
アニメーションを停止し、アニメーションをサポートするために行ったレイアウト変更を置き換えます。
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.FindTransition(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState)">
            <summary>
変更をアニメーション化するために VisualStateManager が使用する移行を見つけ、レイアウト アニメーションが時間およびイーズに一致するようにします。
            </summary>
<param name="group">移行が発生するグループ</param>
<param name="previousState">移行前の状態</param>
<param name="state">移行後の状態</param>
<returns>移行</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.ExtractLayoutStoryboard(System.Windows.VisualState)">
            <summary>
状態のストーリーボードからレイアウトに影響を及ぼすすべてのプロパティを削除し、アタッチされたプロパティにキャッシュします。
            </summary>
<param name="state">移行後の状態</param>
<returns>状態内にレイアウト プロパティを含むストーリーボード</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.FindTargetElements(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
このターゲット要素のセットは、レイアウト移行へ移動した可能性のあるすべての要素です。このセットは次を終了します: 状態内でアニメーション化されるレイアウト プロパティを伴う要素 - セット内の要素の兄弟 - セット内の要素の親
             
以降のコードは、レイアウトの変更前後にこれらの四角形をチェックします。
            </summary>
<param name="control">状態が変化しているレイアウトのコントロール</param>
<param name="layoutStoryboard">レイアウトの変更を含むストーリーボード</param>
<param name="originalValueRecords">戻せる可能性がある、以前の状態ナビゲーションからの前の値</param>
<param name="movingElements">状態の変化が移行中の場合の、現在モーション中の要素のセット</param>
<returns>レイアウトが変更された可能性のあるすべての要素のセット</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetRectsOfTargets(System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
ターゲット一覧内のすべての要素に対して四角形のセットを取得します。
            </summary>
<param name="targets">対象となる要素のセット</param>
<param name="movingElements">現在モーション中の要素のセット</param>
<returns>要素をそれらの四角形にマッピングするディクショナリ</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetLayoutRect(System.Windows.FrameworkElement)">
            <summary>
レイアウト スロットを取得してからスロットの使用される部分を計算することによって、要素のレイアウト四角形を取得します。
            </summary>
<param name="element">求めている四角形が所属する要素</param>
<returns>要素のレイアウト四角形</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetOldOpacities(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
可視性ではなく状態変化時の要素の不透明度を取得します。これは、状態の変化が途中である可能性があり、現在の値が最も重要であるためです。
            </summary>
<param name="control">状態が変化しているコントロール</param>
<param name="layoutStoryboard">レイアウトのプロパティを伴うストーリーボード</param>
<param name="originalValueRecords">元の値のセット</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.SetLayoutStoryboardProperties(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord})">
            <summary>
ストーリーボードの中で SetValue を使用してすべてのプロパティを設定し、表示の原因となるタイムラインのティッキングを行わずに UpdateLayout を呼び出せるようにします。上書きされるすべての値は、後で置換できるように OriginalValueRecords のコレクションに保管されます。
            </summary>
<param name="control">状態が変化しているコントロール</param>
<param name="layoutStoryboard">レイアウトのプロパティを保持するストーリーボード</param>
<param name="originalValueRecords">元の値の保管</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.WrapMovingElementsInCanvases(System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Windows.Rect},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Windows.Rect})">
            <summary>
レイアウトのアニメーション化の結果として移動するすべての要素を取得し、それらが兄弟要素に影響を与えないように Canvases にラップします。
            </summary>
<param name="movingElements">移動する要素のセット</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.UnwrapMovingElementsFromCanvases(System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
レイアウトのアニメーション化の結果として移動中のすべての要素を取得し、Canvases からラップ解除します。
            </summary>
<param name="movingElements">移動中の要素のセット</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CopyLayoutProperties(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
レイアウト プロパティをソース要素からターゲット要素にコピーし、ソースから削除します。
            </summary>
<param name="source">レイアウト プロパティのソース</param>
<param name="target">レイアウト プロパティのコピー先</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CreateLayoutTransitionStoryboard(System.Windows.VisualTransition,System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Double})">
            <summary>
以降のアニメーション化に使用する実際のストーリーボードを作成します。以前の計算結果をすべて使用します。
            </summary>
<param name="duration">アニメーションの時間</param>
<param name="ease">アニメーションに使用するイージング機能</param>
<param name="movingElements">移動する要素のセット</param>
<param name="oldOpacities">可視性が変化中の要素の元の不透明度</param>
<returns>ストーリーボード</returns>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord">
            <summary>
OriginalValueRecord は状態を変化させたプロパティの元の値を保存しています。
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.FluidMoveScope">
            <summary>
この列挙型は、それが添付されている要素か、またはその要素の子のどちらに FluidMoveBehavior が適用するかを示します。特別なビヘイビアが必要な単一の要素がある場合、"自己" を使用し、同じ動作を WrapPanel のすべての子または ItemsControl の ItemsHost Panel に適用する場合は "子" を使用します。
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior">
            <summary>
レイアウトの変更について要素 (または要素のセット) を監視し、必要に応じて新しい位置に要素を滑らかに移動する動作。この動作は要素のサイズまたは可視性をアニメーション化せず、その親コンテナ内部の要素のオフセットをアニメーション化するだけです。
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.DurationProperty">
            <summary>
移動期間に対する DependencyProperty。
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.AppliesToProperty">
            <summary>
動作のスコープに対する DependencyProperty。詳細については、「FluidMoveScope」を参照してください。
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.IsActiveProperty">
            <summary>
動作のアクティブな状態に対する DependencyProperty。
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.Duration">
            <summary>
移動の時間。
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.AppliesTo">
            <summary>
動作がこの要素のみに適用するか、または要素のすべての子に適用するかを示します (要素が Panel の場合)。
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.IsActive">
            <summary>
動作が現在アクティブ化どうかを示します。
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.GoToStateAction">
            <summary>
起動されたときに、FrameworkElement を特定 FrameworkElement に移行するアクションです。
            </summary>
            <remarks>
TargetName プロパティが設定されると、このアクションはターゲット要素の状態の変更を試みます。設定されなければ、要素ツリー上で状態を定義する別のターゲットを検索します。ControlTemplate および UserControl が 可能性の高い 2 つの選択肢です。
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.GoToStateAction.OnTargetChanged(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
ターゲットが変化すると呼び出されます。TargetName プロパティが設定されない場合、このアクションはカスタム動作を有します。
            </summary>
            <param name="oldTarget"></param>
            <param name="newTarget"></param>
<exception cref="T:System.InvalidOperationException">状態のある適切な FrameworkElement  が見つかりませんでした。</exception>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.GoToStateAction.Invoke(System.Object)">
            <summary>
一部の条件が一致し、アクションが起動されると、このメソッドが呼び出されます。
            </summary>
            <param name="parameter"></param>
<exception cref="T:System.InvalidOperationException">ターゲットを指定の StateName に変更できませんでした。</exception>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.GoToStateAction.UseTransitions">
            <summary>
状態間の移行に VisualTransition を使用するかどうか。
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.GoToStateAction.StateName">
            <summary>
VisualState の名前。  
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Input.KeyTrigger">
            <summary>
キーボード イベントによってトリガーされる Trigger。ターゲットの Key および Modifier が検出されると起動します。
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.Key">
            <summary>
Trigger を起動するために押す必要のあるキー。
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.Modifiers">
            <summary>
Trigger が起動するためには、Modifier がアクティブである必要があります (既定では修飾子は選択されていません)。
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.ActiveOnFocus">
            <summary>
true の場合、Trigger はそのトリガー ソース オブジェクトのみをリッスンします。つまり、要素のフォーカスが起動するトリガーにある必要があります。false の場合、Trigger はルートをリッスンするため、処理できない KeyDown/Up メッセージがあれば検出されます。
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.FiredOn">
            <summary>
KeyDown または KeyUp イベントにリッスンするかどうか。
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction">
            <summary>
ファイルまたは URI を開くためのプロセスを起動するアクション。ファイルの場合、このアクションは指定されたファイル拡張子に対して既定のプログラムを起動します。URI はウェブ ブラウザーで開きます。
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction.Invoke(System.Object)">
            <summary>
一部の条件が一致し、アクションが起動されると、このメソッドが呼び出されます。
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction.Path">
            <summary>
開こうとするファイルまたは URI。 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior">
            <summary>
アタッチされた要素をマウスをドラッグのジェスチャに応答して要素の上に再配置します。
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.XProperty">
            <summary>
ルート要素の左との相対で、ドラッグされる要素の X 位置に対する DependencyProperty。
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.YProperty">
            <summary>
ルート要素の上方との相対で、ドラッグされる要素の Y 位置に対する DependencyProperty。
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ConstrainToParentBoundsProperty">
            <summary>
ConstrainToParentBounds プロパティに対する DependencyProperty。true の場合、ドラッグされた要素はその親コンテナーの境界内に固定するように制約されます。
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.UpdatePosition(System.Windows.Point)">
            <summary>
特定の座標に関連要素の位置を更新しようとします。
            </summary>
<param name="point">ルート座標内の要素の目的の位置。</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ApplyTranslation(System.Double,System.Double)">
            <summary>
関連要素に相対位置移動を適用します。
            </summary>
<param name="x">ルート座標内の X コンポーネントの必要な移動。</param>
<param name="y">ルート座標内の Y コンポーネントの必要な移動。</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ApplyTranslationTransform(System.Double,System.Double)">
            <summary>
特定の移動を関連要素の RenderTransform に適用します。
            </summary>
<param name="x">親座標内の X コンポーネントの移動。</param>
<param name="y">親座標内の Y コンポーネントの移動。</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.UpdatePosition">
            <summary>
関連要素の現在レンダリングされた位置に基づいて X および Y のプロパティを更新します。
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.IsValidConstrainedMove(System.Windows.Point)">
            <summary>
特定のカーソル位置をドラッグ操作の一部としてカウントすべきかどうか決定します。
            </summary>
<param name="currentPosition">カーソル位置。</param>
            <returns>
	提供される位置をドラッグ操作の一部としてカウントする場合は<c>true</c>、それ以外の場合は<c>false</c>。
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.RectContainsRect(System.Windows.Rect,System.Windows.Rect)">
            <summary>
1 つの四角形が別の四角形に含まれるかどうかチェックします。
            </summary>
<param name="rect1">含む四角形。</param>
<param name="rect2">含まれる四角形。</param>
<returns><c>true</c> rect1 が rect2 を含む場合、それ以外の場合は <c>false</c></returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.TransformAsVector(System.Windows.Media.GeneralTransform,System.Double,System.Double)">
            <summary>
ベクターとして変換します。
            </summary>
<param name="transform">変換。</param>
<param name="x">ベクターの X コンポーネント。</param>
<param name="y">ベクターの Y コンポーネント。</param>
<returns>ベクターとしての変換により変換された X 値および Y 値を含む点。</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.GetTransformOffset(System.Windows.Media.GeneralTransform)">
            <summary>
変換オフセットを取得します。
            </summary>
<param name="transform">変換。</param>
<returns>変換のオフセット。</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.OnAttached">
            <summary>
ビヘイビアーが AssociatedObject にアタッチされた後で呼び出されます。
            </summary>
<remarks>これをオーバーライドし、AssociatedObject に機能をフックアップします。</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.OnDetaching">
            <summary>
ビヘイビアーが AssociatedObject から解除されるとき、実際に発生する前に呼び出されます。
            </summary>
<remarks>これをオーバーライドし、機能を AssociatedObject からアンフックします。</remarks>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.DragBegun">
            <summary>
ドラッグ ジェスチャーの開始時に発生します。
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.Dragging">
            <summary>
ドラッグ ジェスチャーの更新処理時に発生します。
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.DragFinished">
            <summary>
ドラッグ ジェスチャーの終了時に発生します。
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.X">
            <summary>
ルート要素の左との相対で、ドラッグされる要素の X 位置を取得または設定します。これは依存関係プロパティです。
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.Y">
            <summary>
ルート要素の上方との相対で、ドラッグされる要素の Y 位置を取得または設定します。これは依存関係プロパティです。
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ConstrainToParentBounds">
            <summary>
ドラッグされる要素がその親コンテナーの境界内に固定するように制約されるかどうかを示す値を取得または設定します。これは依存関係プロパティです。
            </summary>
            <value>
	ドラッグされる要素が親領域内に制約される必要がある場合は<c>true</c>、それ以外の場合は<c>false</c>。
            </value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ActualPosition">
            <summary>
ルート座標内の関連要素の画面上の位置を取得します。
            </summary>
<value>ルート座標内の関連要素の画面上の位置。</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ElementBounds">
            <summary>
要素座標内にバインドする要素を取得します。
            </summary>
<value>要素座標内にバインドする要素。</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ParentElement">
            <summary>
関連オブジェクトの親要素を取得します。
            </summary>
<value>関連オブジェクトの親要素。</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.RootElement">
            <summary>
関連オブジェクトがあるシーンのルート要素を取得します。
            </summary>
<value>関連オブジェクトがあるシーンのルート要素。</value>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.PlaySoundAction">
            <summary>
完了時にサウンドを鳴らす Action。
            </summary>
            <remarks>
この Actionは、停止または制御する必要のない短いサウンド効果の利用を想定しています。音楽プレーヤやゲームを作成する場合には役に立たないかも知れません。
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.#ctor">
            <summary>
<see cref="T:Microsoft.Expression.Interactivity.Media.PlaySoundAction"/> クラスの新しいインスタンスを初期化します。
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.SetMediaElementProperties(System.Windows.Controls.MediaElement)">
            <summary>
Action を起動するとき、動的に作成された MediaElement をカスタマイズするためにこのメソッドが利用されます。
            </summary>
            <remarks>
このメソッドは、Action 作成者が PlaySoundAction を拡張したい場合に役立つ可能性があります。MediaElement バランス プロパティを管理する場合、PlaySoundAction から継承してこのメソッドを上書きすることができます。
            </remarks>
            <param name="mediaElement"></param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Invoke(System.Object)">
            <summary>
一部の条件が一致し、アクションを起動する必要がある場合に、このメソッドが呼び出されます。 
            </summary>
            <remarks>
Action を呼び出すごとに新しいサウンドが再生されます。実装は変更される可能性がありますが、発信者はこれにより新しい MediaElement が作成され、再生の終了時またはメディアが再生に失敗した場合に消去されることを覚えておいてください。
            </remarks>
            <param name="parameter"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Source">
            <summary>
サウンド ファイルの場所を定義する URI。これは、MediaElement のソース プロパティの設定に使用します。これは依存関係プロパティです。
            </summary>
            <remarks>
サウンドのファイル形式は MediaElement でサポートされていればどれでも使用できます。動画の場合には、オーディオのみが再生されます。
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Volume">
            <summary>
サウンドの音量制御。これは、MediaElement の音量プロパティの設定に使用します。これは依存関係プロパティです。
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.RemoveElementAction">
            <summary>
起動されたときに、ターゲット要素をツリーから削除する Action です。
            </summary>
            <remarks>
この Action は失敗する場合があります。この Action は、共通の親から要素を削除する方法は認識しますが、カスタム コレクションからの削除またはビジュアル ツリーの直接操作は認識しません。
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardAction">
            <summary>
ストーリーボードをターゲットにする能力を提供する抽象的なクラス。
            </summary>
            <remarks>
このクラスは、Action 作成者にストーリーボードをターゲットにするための標準的な方法を提供します。設計ツールは、デザイナが腕を磨けるように、この Action から継承するクラスの特殊な編集体験を提供する場合があります。 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardAction.OnStoryboardChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
このメソッドは、ストーリーボード プロパティが変更される場合に呼び出されます。
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.StoryboardAction.Storyboard">
            <summary>
対象のストーリーボード。これは依存関係プロパティです。
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.ControlStoryboardAction">
            <summary>
起動されたときに、ターゲット ストーリーボードの状態を変更するアクションです。
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.ControlStoryboardAction.Invoke(System.Object)">
            <summary>
一部の条件が一致し、アクションを起動する必要がある場合に、このメソッドが呼び出されます。このメソッドは、ControlStoryboardOption で定義された方法でターゲット ストーリーボードの変更を試行します。
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardTrigger">
            <summary>
ストーリーボードをターゲットにする能力を提供する抽象的なクラス。
            </summary>
            <remarks>
このクラスは、Trigger 作成者にストーリーボードをターゲットにするための標準的な方法を提供します。設計ツールは、デザイナが腕を磨けるように、この Trigger から継承するクラスの特殊な編集体験を提供する場合があります。 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardTrigger.OnStoryboardChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
このメソッドは、ストーリーボード プロパティが変更される場合に呼び出されます。
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.StoryboardTrigger.Storyboard">
            <summary>
対象のストーリーボード。これは依存関係プロパティです。
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger">
            <summary>
ストーリーボードの完了をリッスンするトリガー。
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger.#ctor">
            <summary>
<see cref="T:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger"/> クラスの新しいインスタンスを初期化します。
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.TimerTrigger">
            <summary>
ソース上で発生する指定されたイベントによりトリガーされ、イベントが起動されたときに遅れて起動する Trigger。
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.TimerTrigger.#ctor">
            <summary>
<see cref="T:Microsoft.Expression.Interactivity.Core.TimerTrigger"/> クラスの新しいインスタンスを初期化します。
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.TimerTrigger.MillisecondsPerTick">
            <summary>
目盛の間の待ち時間 (ミリ秒) を取得または設定します。これは依存関係プロパティです。
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.TimerTrigger.TotalTicks">
            <summary>
Trigger が終了する前に起動される目盛の合計数を取得または設定します。これは依存関係プロパティです。
            </summary>
        </member>
        <member name="T:ExceptionStringTable">
            <summary>
ローカライズされた文字列などを調べるために、厳密に型指定されたリソース クラス。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ResourceManager">
            <summary>
このクラスで使用される、キャッシュされた ResourceManager インスタンスに戻ります。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.Culture">
            <summary>
この厳密に型指定されたリソース クラスを使用して、すべてのリソース ルックアップに対して現在のスレッドの CurrentUICulture プロパティを上書きします。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotFindPropertyNameExceptionMessage">
            <summary>
「型 "{1}" に "{0}" という名前のプロパティが見つかりません。」に類似したローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotSetValueExceptionMessage">
            <summary>
「型 "{2}" の "{1}" プロパティに、型 "{0}" の値を割り当てることはできません。"{1}" プロパティは、型 "{2}" の値のみ割り当てることができます。」に類似したローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionPropertyIsReadOnlyExceptionMessage">
            <summary>
「型 "{1}" で定義されたプロパティ "{0}" は set メソッドを公開しないため、変更できません。」に類似したローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.GoToStateActionStateChangeFailed">
            <summary>
「ターゲット {0} の状態を {1} に変更できませんでした。」に類似したローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.GoToStateActionTargetHasNoStateGroups">
            <summary>
「ターゲット {0} は VisualStateGroups を定義しません。」に類似したローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.UnsupportedRemoveTargetExceptionMessage">
            <summary>
「RemoveElementAction のターゲットはサポートされていません。」に類似したローカライズされた文字列を検索します。
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\ja\System.Windows.Interactivity.xml ===
﻿<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Interactivity</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Interactivity.AttachableCollection`1">
            <summary>
共有される AssociatedObject と共に IAttachedObject のコレクションを表し、AssociatedObject が変更するときに変更通知をコンテンツに提供します。
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.IAttachedObject">
            <summary>
別のオブジェクトにアタッチ可能なオブジェクトのインターフェイスです。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.IAttachedObject.Attach(System.Windows.DependencyObject)">
            <summary>
指定されたオブジェクトにアタッチします。
            </summary>
<param name="dependencyObject">アタッチするオブジェクト。</param>
        </member>
        <member name="M:System.Windows.Interactivity.IAttachedObject.Detach">
            <summary>
このインスタンスを関連オブジェクトから解除します。
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.IAttachedObject.AssociatedObject">
            <summary>
関連オブジェクトを取得します。
            </summary>
<value>関連オブジェクト。</value>
<remarks>インスタンスがアタッチされるオブジェクトを表します。</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.#ctor">
            <summary>
<see cref="T:System.Windows.Interactivity.AttachableCollection`1"/> クラスの新しいインスタンスを初期化します。
            </summary>
<remarks>アセンブリの外部で継承すべきではないため、内部とします。</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.OnAttached">
            <summary>
コレクションが AssociatedObject にアタッチされる直後に呼び出されます。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.OnDetaching">
            <summary>
コレクションが AssociatedObject から解除されるとき、実際に発生する前に呼び出されます。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.ItemAdded(`0)">
            <summary>
新しい項目がコレクションに追加されるときに呼び出されます。
            </summary>
<param name="item">新しい項目。</param>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.ItemRemoved(`0)">
            <summary>
項目がコレクションから削除されるときに呼び出されます。
            </summary>
<param name="item">削除される項目。</param>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.VerifyAdd(`0)">
<exception cref="T:System.InvalidOperationException">インスタンスをコレクションに再度追加することはできません。</exception>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.Attach(System.Windows.DependencyObject)">
            <summary>
指定されたオブジェクトにアタッチします。
            </summary>
<param name="dependencyObject">アタッチするオブジェクト。</param>
<exception cref="T:System.InvalidOperationException">IAttachedObject は既に別のオブジェクトにアタッチされています。</exception>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.Detach">
            <summary>
このインスタンスを関連オブジェクトから解除します。
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.AttachableCollection`1.AssociatedObject">
            <summary>
コレクションがホストされるオブジェクト。
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.AttachableCollection`1.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
関連オブジェクトを取得します。
            </summary>
<value>関連オブジェクト。</value>
        </member>
        <member name="T:System.Windows.Interactivity.Behavior`1">
            <summary>
状態情報および 0 以上の ICommands をアタッチ可能なオブジェクトにカプセル化します。
            </summary>
<typeparam name="T"><see cref="T:System.Windows.Interactivity.Behavior`1"/> をアタッチできる型。</typeparam>
            <remarks>
	Behavior とは、アタッチ可能な状態およびコマンドをオブジェクトに提供するための基本クラスです。Behavior をアタッチできる型は、ジェネリック パラメーターで制御可能です。OnAttached() および OnDetaching() メソッドをオーバーライドし、必要なハンドラーを AssociatedObject にフックしたり、アンフックします。</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.Behavior">
            <summary>
状態情報および 0 以上の ICommands をアタッチ可能なオブジェクトにカプセル化します。
            </summary>
<remarks>これはインフラストラクチャ クラスです。Behavior 作成者は、このクラスの代わりに Behavior&lt;T&gt; から派生する必要があります。</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.OnAttached">
            <summary>
ビヘイビアーが AssociatedObject にアタッチされた後で呼び出されます。
            </summary>
<remarks>これをオーバーライドし、AssociatedObject に機能をフックアップします。</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.OnDetaching">
            <summary>
ビヘイビアーが AssociatedObject から解除されるとき、実際に発生する前に呼び出されます。
            </summary>
<remarks>これをオーバーライドし、機能を AssociatedObject からアンフックします。</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.Attach(System.Windows.DependencyObject)">
            <summary>
指定されたオブジェクトにアタッチします。
            </summary>
<param name="dependencyObject">アタッチするオブジェクト。</param>
<exception cref="T:System.InvalidOperationException">Behavior は既に別の要素上でホストされています。</exception>
<exception cref="T:System.InvalidOperationException">dependencyObject は、Behavior の型制約を満たしていません。</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.Detach">
            <summary>
このインスタンスを関連オブジェクトから解除します。
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.AssociatedType">
            <summary>
このビヘイビアーをアタッチできる型。
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.AssociatedObject">
            <summary>
このビヘイビアーがアタッチされるオブジェクトを取得します。
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
関連オブジェクトを取得します。
            </summary>
<value>関連オブジェクト。</value>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior`1.#ctor">
            <summary>
<see cref="T:System.Windows.Interactivity.Behavior`1"/> クラスの新しいインスタンスを初期化します。
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior`1.AssociatedObject">
            <summary>
この<see cref="T:System.Windows.Interactivity.Behavior`1"/>がアタッチされるオブジェクトを取得します。
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.BehaviorCollection">
            <summary>
共有される AssociatedObject と共にビヘイビアーのコレクションを表し、AssociatedObject が変更するときに変更通知をコンテンツに提供します。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.#ctor">
            <summary>
<see cref="T:System.Windows.Interactivity.BehaviorCollection"/> クラスの新しいインスタンスを初期化します。
            </summary>
<remarks>アセンブリの外部で継承すべきではないため、内部とします。</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.OnAttached">
            <summary>
コレクションが AssociatedObject にアタッチされる直後に呼び出されます。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.OnDetaching">
            <summary>
コレクションが AssociatedObject から解除されるとき、実際に発生する前に呼び出されます。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.ItemAdded(System.Windows.Interactivity.Behavior)">
            <summary>
新しい項目がコレクションに追加されるときに呼び出されます。
            </summary>
<param name="item">新しい項目。</param>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.ItemRemoved(System.Windows.Interactivity.Behavior)">
            <summary>
項目がコレクションから削除されるときに呼び出されます。
            </summary>
<param name="item">削除される項目。</param>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.CreateInstanceCore">
            <summary>
BehaviorCollection の新しいインスタンスを作成します。
            </summary>
<returns>新しいインスタンス。</returns>
        </member>
        <member name="T:System.Windows.Interactivity.CustomPropertyValueEditor">
            <summary>
再利用可能なプロパティ値エディターに対し可能な値をカプセル化します。
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.Element">
            <summary>
デザイン時に、サポートされている場合は要素ピッカーを使用してこのプロパティを編集します。
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.Storyboard">
            <summary>
デザイン時に、サポートされている場合はストーリーボード ピッカーを使用してこのプロパティを編集します。
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.StateName">
            <summary>
デザイン時に、サポートされている場合は状態ピッカーを使用してこのプロパティを編集します。
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.CustomPropertyValueEditorAttribute">
            <summary>
特定のエディターの種類を CustomPropertyValueEditor が適用されるプロパティに関連付けます。
            </summary>
<remarks>この属性を使用して、要素 (名前別)、ストーリーボード、または状態 (名前別) を示すプロパティ用にデザイン時の編集を強化します。</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.CustomPropertyValueEditorAttribute.#ctor(System.Windows.Interactivity.CustomPropertyValueEditor)">
            <summary>
<see cref="T:System.Windows.Interactivity.CustomPropertyValueEditorAttribute"/> クラスの新しいインスタンスを初期化します。
            </summary>
<param name="customPropertyValueEditor">カスタム プロパティ値エディター。</param>
        </member>
        <member name="P:System.Windows.Interactivity.CustomPropertyValueEditorAttribute.CustomPropertyValueEditor">
            <summary>
カスタム プロパティ値エディターを取得または設定します。
            </summary>
<value>カスタム プロパティ値エディター。</value>
        </member>
        <member name="T:System.Windows.Interactivity.DefaultTriggerAttribute">
            <summary>
特定のアクションまたはコマンドに対してどの<see cref="T:System.Windows.Interactivity.TriggerBase"/>をインスタンス化するかについてデザイン ツールの情報を提供します。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.#ctor(System.Type,System.Type,System.Object)">
            <summary>
<see cref="T:System.Windows.Interactivity.DefaultTriggerAttribute"/> クラスの新しいインスタンスを初期化します。
            </summary>
<param name="targetType">この属性が適用される型。</param>
<param name="triggerType">インスタンス化する<see cref="T:System.Windows.Interactivity.TriggerBase"/>の型。</param>
<param name="parameters">指定された<see cref="T:System.Windows.Interactivity.TriggerBase"/>用の単一の引数。</param>
<exception cref="T:System.ArgumentException"><c cref="F:System.Windows.Interactivity.DefaultTriggerAttribute.triggerType"/>は TriggerBase から派生しません。</exception>
<remarks>このコンストラクターは、指定された<see cref="T:System.Windows.Interactivity.TriggerBase"/>に単一の引数がある場合に役立ちます。結果コードは CLS に準拠します。</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.#ctor(System.Type,System.Type,System.Object[])">
            <summary>
<see cref="T:System.Windows.Interactivity.DefaultTriggerAttribute"/> クラスの新しいインスタンスを初期化します。
            </summary>
<param name="targetType">この属性が適用される型。</param>
<param name="triggerType">インスタンス化する<see cref="T:System.Windows.Interactivity.TriggerBase"/>の型。</param>
<param name="parameters">指定された<see cref="T:System.Windows.Interactivity.TriggerBase"/>用のコンストラクター引数。</param>
<exception cref="T:System.ArgumentException"><c cref="F:System.Windows.Interactivity.DefaultTriggerAttribute.triggerType"/>は TriggerBase から派生しません。</exception>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.Instantiate">
            <summary>
このインスタンスをインスタンス化します。
            </summary>
<returns>DefaultTriggerAttribute により指定された<see cref="T:System.Windows.Interactivity.TriggerBase"/>。</returns>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.TargetType">
            <summary>
この DefaultTriggerAttribute が適用される型を取得します。
            </summary>
<value>この DefaultTriggerAttribute が適用される型。</value>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.TriggerType">
            <summary>
インスタンス化する<see cref="T:System.Windows.Interactivity.TriggerBase"/>の型を取得します。
            </summary>
<value>インスタンス化する<see cref="T:System.Windows.Interactivity.TriggerBase"/>の型。</value>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.Parameters">
            <summary>
<see cref="T:System.Windows.Interactivity.TriggerBase"/> コンストラクターに渡すパラメーターを取得します。
            </summary>
<value><see cref="T:System.Windows.Interactivity.TriggerBase"/> コンストラクターに渡すパラメーター。</value>
        </member>
        <member name="T:System.Windows.Interactivity.EventTrigger">
            <summary>
ソース上の指定されたイベントをリッスンし、イベントが起動されたときに起動するトリガー。
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.EventTriggerBase`1">
            <summary>
その AssociatedObject 以外の要素をリッスンできるトリガーを表します。
            </summary>
<typeparam name="T">このトリガーを関連付けられる型。</typeparam>
            <remarks>
	EventTriggerBase は TriggerBase を拡張し、アタッチしている要素とは別の要素のナレッジを追加します。これによりユーザーは Trigger/Action のペアを 1 つの要素にアタッチし、どこか別の場所にある別の要素の変化に応じて Action を起動できます。ソース要素上のハンドラーをフック/アンフックするために OnSourceChanged を、また関連要素に対して OnAttached/OnDetaching を上書きします。ソース要素の型はジェネリック型パラメーターによって制約できます。AssociatedObject の型を制御する必要がある場合、派生型上で TypeConstraintAttribute を設定します。
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.EventTriggerBase">
            <summary>
その AssociatedObject 以外の要素をリッスンできるトリガーを表します。
            </summary>
<remarks>これはインフラストラクチャ クラスです。Trigger 作成者は、このクラスの代わりに EventTriggerBase&lt;T&gt; から派生する必要があります。</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerBase">
            <summary>
条件付きで Action を起動できるオブジェクトを表します。
            </summary>
<remarks>これはインフラストラクチャ クラスです。Trigger 作成者は、このクラスの代わりに Trigger&lt;T&gt; から派生する必要があります。</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.InvokeActions(System.Object)">
            <summary>
このトリガーに関連するすべての Action を起動します。
            </summary>
<remarks>トリガーを起動すには派生クラスがこれを呼び出す必要があります。</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.OnAttached">
            <summary>
トリガーが AssociatedObject にアタッチされた後で呼び出されます。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.OnDetaching">
            <summary>
トリガーが AssociatedObject から解除されるとき、実際に発生する前に呼び出されます。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.CreateInstanceCore">
            <summary>
TriggerBase 派生クラスの新しいインスタンスを作成します。
            </summary>
<returns>新しいインスタンス。</returns>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.Attach(System.Windows.DependencyObject)">
            <summary>
指定されたオブジェクトにアタッチします。
            </summary>
<param name="dependencyObject">アタッチするオブジェクト。</param>
<exception cref="T:System.InvalidOperationException">同じ Trigger を一度に複数のオブジェクトにホストすることはできません。</exception>
<exception cref="T:System.InvalidOperationException">dependencyObject は、Trigger 型制約を満たしていません。</exception>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.Detach">
            <summary>
このインスタンスを関連オブジェクトから解除します。
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.AssociatedObject">
            <summary>
トリガーがアタッチされるオブジェクトを取得します。
            </summary>
<value>関連オブジェクト。</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.AssociatedObjectTypeConstraint">
            <summary>
関連オブジェクトの型制約を取得します。
            </summary>
<value>関連のオブジェクト型制約。</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.Actions">
            <summary>
このトリガーに関連するアクションを取得します。
            </summary>
<value>このトリガーに関連するアクション。</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
関連オブジェクトを取得します。
            </summary>
<value>関連オブジェクト。</value>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.GetEventName">
            <summary>
この EventTriggerBase がリッスンするイベントの名前を指定します。
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnEvent(System.EventArgs)">
            <summary>
この EventTriggerBase に関連付けられたイベントの起動時に呼び出されます。既定では、これはトリガー上のすべてのアクションを起動します。
            </summary>
<param name="eventArgs">イベント データを含む<see cref="T:System.EventArgs"/>インスタンス。</param>
<remarks>これをオーバーライドし、このトリガーに関連付けられたアクションの起動時をりきめ細かく制御します。</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnSourceChangedImpl(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
ソースが変化すると呼び出されます。
            </summary>
<param name="oldSource">古いソース。</param>
<param name="newSource">新しいソース。</param>
<remarks>変化するソース オブジェクトに機能をフックしたり、アンフックするために、この機能を派生クラス内でオーバーライドする必要があります。</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnAttached">
            <summary>
トリガーが AssociatedObject にアタッチされた後で呼び出されます。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnDetaching">
            <summary>
トリガーが AssociatedObject から解除されるとき、実際に発生する前に呼び出されます。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.RegisterEvent(System.Object,System.String)">
<exception cref="T:System.ArgumentException">ターゲット上に eventName が見つかりませんでした。</exception>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.AssociatedObjectTypeConstraint">
            <summary>
関連オブジェクトの型制約を取得します。
            </summary>
<value>関連のオブジェクト型制約。</value>
<remarks>アタッチすることのできる型を制約する派生型で TypeConstraintAttribute を定義します。</remarks>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.SourceTypeConstraint">
            <summary>
ソース型制約を取得します。
            </summary>
<value>ソース型制約。</value>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.SourceName">
            <summary>
この EventTriggerBase がソースとしてリッスンする要素の名前を取得または設定します。名前が未設定または解決できない場合、AssociatedObject が使用されます。これは依存関係プロパティです。
            </summary>
<value>ソール要素の名前。</value>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.Source">
            <summary>
解決されたソースを取得します。<c ref="SourceName"/>が未設定または解決できない場合、既定で AssociatedObject に設定されます。
            </summary>
<value>解決されたソース オブジェクト。</value>
<remarks>通常、このプロパティは派生クラスで AssociatedObject の代わりに使用される必要があります。</remarks>
<exception cref="T:System.InvalidOperationException"><c cref="P:System.Windows.Interactivity.EventTriggerBase.Source"/>で指された要素が型制約を満たしていません。</exception>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase`1.#ctor">
            <summary>
<see cref="T:System.Windows.Interactivity.EventTriggerBase`1"/> クラスの新しいインスタンスを初期化します。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase`1.OnSourceChanged(`0,`0)">
            <summary>
ソース プロパティが変化すると呼び出されます。
            </summary>
<remarks>これをオーバーライドし、AssociatedObject ではなく、指定されたソースに機能をフックまたはアンフックします。</remarks>
<param name="oldSource">古いソース。</param>
<param name="newSource">新しいソース。</param>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase`1.Source">
            <summary>
解決されたソースを取得します。<c ref="SourceName"/>が設定されない、解決できない場合、既定で AssociatedObject に設定されます。
            </summary>
<value>解決されたソース オブジェクト。</value>
<remarks>通常、このプロパティは派生クラスで AssociatedObject の代わりに使用される必要があります。</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTrigger.#ctor">
            <summary>
<see cref="T:System.Windows.Interactivity.EventTrigger"/> クラスの新しいインスタンスを初期化します。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTrigger.#ctor(System.String)">
            <summary>
<see cref="T:System.Windows.Interactivity.EventTrigger"/> クラスの新しいインスタンスを初期化します。
            </summary>
<param name="eventName">イベントの名前。</param>
        </member>
        <member name="P:System.Windows.Interactivity.EventTrigger.EventName">
            <summary>
リッスンするイベントの名前を取得または設定します。これは依存関係プロパティです。
            </summary>
<value>イベントの名前。</value>
        </member>
        <member name="T:System.Windows.Interactivity.Interaction">
            <summary>
プロパティにアタッチされた Trigger および Behavior を所有する静的クラス。AssociatedObject 変更通知の伝達を処理します。
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.Interaction.TriggersProperty">
            <summary>
このプロパティは、パブリックの Trigger がアタッチされたプロパティ用の内部バッキング ストアとして使用されます。
            </summary>
            <remarks>
このプロパティは公開されていません。これは、クライアントがコレクションにアクセスする際に GetTriggers および SetTriggers メソッドを使用することを強制し、コレクションが存在すること、および使用前に設定されることを保証します。
            </remarks>
        </member>
        <member name="F:System.Windows.Interactivity.Interaction.BehaviorsProperty">
            <summary>
このプロパティは、パブリックの Behavior がアタッチされたプロパティ用の内部バッキング ストアとして使用されます。
            </summary>
            <remarks>
このプロパティは公開されていません。これは、クライアントがコレクションにアクセスする際に GetBehaviors および SetBehaviors メソッドを使用することを強制し、コレクションが存在すること、および使用前に設定されることを保証します。
            </remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.GetTriggers(System.Windows.DependencyObject)">
            <summary>
指定したオブジェクトに関連付けられた Trigger を含む TriggerCollection を取得します。
            </summary>
<param name="obj">トリガーが取得されるオブジェクト。</param>
<returns>指定したオブジェクトに関連付けられた Trigger を含む TriggerCollection。</returns>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.GetBehaviors(System.Windows.DependencyObject)">
            <summary>
指定したオブジェクトに関連付けられた<see cref="T:System.Windows.Interactivity.BehaviorCollection"/>を取得します。
            </summary>
<param name="obj"><see cref="T:System.Windows.Interactivity.BehaviorCollection"/>が取得されるオブジェクト。</param>
<returns>指定したオブジェクトに関連付けられたビヘイビアーを含む<see cref="T:System.Windows.Interactivity.BehaviorCollection"/>。</returns>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.OnBehaviorsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
<exception cref="T:System.InvalidOperationException">同じ BehaviorCollection を一度に複数のオブジェクトにホストすることはできません。</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.OnTriggersChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
<exception cref="T:System.InvalidOperationException">同じ TriggerCollection を一度に複数のオブジェクトにホストすることはできません。</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.IsElementLoaded(System.Windows.FrameworkElement)">
            <summary>
Silverlight に類似のプロパティがないために FrameworkElement.IsLoaded に取って代わるヘルパー関数です。
            </summary>
<param name="element">関心の要素。</param>
<returns>要素がロードされる場合は True、それ以外の場合は False。</returns>
        </member>
        <member name="P:System.Windows.Interactivity.Interaction.ShouldRunInDesignMode">
            <summary>
デザイン モードのように実行するかどうかを示す値を取得または設定します。
            </summary>
            <value>
	[デザイン モードで実行する] 場合は<c>true</c>、それ以外の場合は<c>false</c>。
            </value>
<remarks>単位テストの外部では使用しません。</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.InvokeCommandAction">
            <summary>
起動時にホスト Behavior 上で指定した Action を実行します。
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerAction`1">
            <summary>
機能単位をカプセル化する、アタッチ可能なオブジェクトを表します。
            </summary>
<typeparam name="T">このアクションをアタッチできる型。</typeparam>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerAction">
            <summary>
機能単位をカプセル化する、アタッチ可能なオブジェクトを表します。
            </summary>
<remarks>これはインフラストラクチャ クラスです。Action 作成者は、このクラスの代わりに TriggerAction&lt;T&gt; から派生する必要があります。</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.CallInvoke(System.Object)">
            <summary>
アクション機能の試みです。
            </summary>
<param name="parameter">アクションへのパラメーター。Action がパラメーターを要求しない場合、パラメーターを null 参照に設定できます。</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Invoke(System.Object)">
            <summary>
アクションを起動します。
            </summary>
<param name="parameter">アクションへのパラメーター。Action がパラメーターを要求しない場合、パラメーターを null 参照に設定できます。</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.OnAttached">
            <summary>
アクションが AssociatedObject にアタッチされた後で呼び出されます。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.OnDetaching">
            <summary>
アクションが AssociatedObject から解除されるとき、実際に発生する前に呼び出されます。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.CreateInstanceCore">
            <summary>
派生クラスに実装された場合、<see cref="T:System.Windows.Freezable"/> 派生クラスの新しいインスタンスを作成します。
            </summary>
<returns>新しいインスタンス。</returns>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Attach(System.Windows.DependencyObject)">
            <summary>
指定されたオブジェクトにアタッチします。
            </summary>
<param name="dependencyObject">アタッチするオブジェクト。</param>
<exception cref="T:System.InvalidOperationException">同じ TriggerAction を一度に複数のオブジェクトにホストすることはできません。</exception>
<exception cref="T:System.InvalidOperationException">dependencyObject は、TriggerAction 型制約を満たしていません。</exception>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Detach">
            <summary>
このインスタンスを関連オブジェクトから解除します。
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.IsEnabled">
            <summary>
このアクションを起動時に実行するかどうかを示す値を取得または設定します。これは依存関係プロパティです。
            </summary>
            <value>
	このアクションを起動時に実行する場合は<c>true</c>、それ以外の場合は<c>false</c>。
            </value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.AssociatedObject">
            <summary>
この Action がアタッチされるオブジェクトを取得します。
            </summary>
<value>関連オブジェクト。</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.AssociatedObjectTypeConstraint">
            <summary>
関連のオブジェクト型制約を取得します。
            </summary>
<value>関連のオブジェクト型制約。</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.IsHosted">
            <summary>
このスタンスがアタッチされるかどうかを示す値を取得または設定します。
            </summary>
<value>インスタンスがアタッチされる場合は<c>true</c>、それ以外の場合は<c>false</c>。</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
関連オブジェクトを取得します。
            </summary>
<value>関連オブジェクト。</value>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction`1.#ctor">
            <summary>
<see cref="T:System.Windows.Interactivity.TriggerAction`1"/> クラスの新しいインスタンスを初期化します。
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject">
            <summary>
この<see cref="T:System.Windows.Interactivity.TriggerAction`1"/>がアタッチされるオブジェクトを取得します。
            </summary>
<value>関連オブジェクト。</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObjectTypeConstraint">
            <summary>
関連のオブジェクト型制約を取得します。
            </summary>
<value>関連のオブジェクト型制約。</value>
        </member>
        <member name="M:System.Windows.Interactivity.InvokeCommandAction.Invoke(System.Object)">
            <summary>
アクションを起動します。
            </summary>
<param name="parameter">アクションへのパラメーター。Action がパラメーターを要求しない場合、パラメーターを null 参照に設定できます。</param>
        </member>
        <member name="M:System.Windows.Interactivity.InvokeCommandAction.OnAttached">
            <summary>
コレクションが AssociatedObject にアタッチされた後で呼び出されます。
            </summary>
<exception cref="T:System.InvalidOperationException">InvokeActionCommand は Behavior 上でホストされる必要があります。</exception>
        </member>
        <member name="P:System.Windows.Interactivity.InvokeCommandAction.CommandName">
            <summary>
このアクションが起動する必要のあるコマンドの名前を取得または設定します。
            </summary>
<value>このアクションが起動する必要のあるコマンドの名前。</value>
        </member>
        <member name="P:System.Windows.Interactivity.InvokeCommandAction.CommandParameter">
            <summary>
コマンド パラメーターを取得または設定します。
            </summary>
<value>コマンド パラメーター。</value>
<remarks>これは、ICommand.CanExecute and ICommand.Execute に渡される値です。</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.NameResolvedEventArgs">
            <summary>
名前の変更の解決時にどのオブジェクトが影響を受けるかについてのデータを提供します。
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.NameResolver">
            <summary>
ホスト要素によって提供されるコンテキストに基づき、TargetName をターゲット要素に解決するロジックを処理するヘルパー クラスです。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.NameResolver.UpdateObjectFromName(System.Windows.DependencyObject)">
            <summary>
名前空間の参照要素のコンテキスト内で名前から解決済みオブジェクトの更新を試行します。
            </summary>
<param name="oldObject">古い解決済みオブジェクト。</param>
            <remarks>
既存のターゲットをリセットし、現在のホストのコンテキストから現在の TargetName の解決を試行します。ホストのコンテキストから解決できない場合、解決されるまでビジュアル ツリーを辿ります。ルートに到達しても解決されない場合、ターゲットを null に設定し、デバッグ出力に警告メッセージを書き込みます。
            </remarks>
        </member>
        <member name="E:System.Windows.Interactivity.NameResolver.ResolvedElementChanged">
            <summary>
解決済み要素が変更されたときに発生します。
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.Name">
            <summary>
解決を試行するための要素の名前を取得または設定します。
            </summary>
<value>解決を試行する名前。</value>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.Object">
            <summary>
解決済みオブジェクト。TargetName が null または空の場合、または解決が試行されていない場合に参照要素を返します。
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.NameScopeReferenceElement">
            <summary>
名前の解決が実行される参照要素を取得または設定します。
            </summary>
<value>参照要素。</value>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.PendingReferenceElementLoad">
            <summary>
参照要素の読み込みが保留中かどうかを示す値を取得または設定します。
            </summary>
            <value>
	[参照要素の読み込みを保留中]の場合は<c>true</c>、それ以外の場合は<c>false</c>。
            </value>
            <remarks>
ホストが読み込まれて以内場合、名前は解決されません。その場合、解決を遅らせてこのプロパティを伴う情報を追跡します。
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TargetedTriggerAction`1">
            <summary>
AssociatedObject 以外のオブジェクトに影響を与えるために対象となり得るアクションを表します。
            </summary>
<typeparam name="T">ターゲット上の型制約。</typeparam>
            <remarks>
	TargetedTriggerAction は TriggerAction を拡張し、アタッチしている要素とは別の要素のナレッジを追加します。これによりユーザーは Trigger の起動に応答して、アタッチされている以外の要素上の Action を起動できます。ターゲット要素上のハンドラーをフック/アンフックするために OnTargetChanged を、また関連要素に対して OnAttached/OnDetaching をオーバーライドします。Target 要素の型はジェネリック型パラメーターにより制約できます。AssociatedObject の型を制御する必要がある場合、派生型上で TypeConstraintAttribute を設定します。
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TargetedTriggerAction">
            <summary>
AssociatedObject 以外のオブジェクトに影響を与えるために対象となり得るアクションを表します。
            </summary>
<remarks>これはインフラストラクチャ クラスです。Action 作成者は、このクラスの代わりに TargetedTriggerAction&lt;T&gt; から派生する必要があります。</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnTargetChangedImpl(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
ターゲットが変化すると呼び出されます。
            </summary>
<param name="oldTarget">古いターゲット。</param>
<param name="newTarget">新しいターゲット。</param>
<remarks>変化するソース オブジェクトに機能をフックしたり、アンフックするために、この機能を派生クラス内でオーバーライドする必要があります。</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnAttached">
            <summary>
アクションが AssociatedObject にアタッチされた後で呼び出されます。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnDetaching">
            <summary>
アクションが AssociatedObject から解除されるとき、実際に発生する前に呼び出されます。
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.TargetName">
            <summary>
ターゲットの名前を取得または設定します。TargetName が未設定または解決できない場合、既定で AssociatedObject に設定されます。これは依存関係プロパティです。
            </summary>
<value>ターゲットの名前。</value>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.Target">
            <summary>
ターゲット オブジェクトを取得します。TargetName が未設定または解決できない場合、既定で AssociatedObject に設定されます。
            </summary>
<value>ターゲット。</value>
<remarks>通常、このプロパティは派生クラスで AssociatedObject の代わりに使用される必要があります。</remarks>
<exception cref="T:System.InvalidOperationException">ターゲット要素が型制約を満たしていません。</exception>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.AssociatedObjectTypeConstraint">
            <summary>
関連のオブジェクト型制約を取得します。
            </summary>
<value>関連のオブジェクト型制約。</value>
<remarks>アタッチすることのできる型を制約する派生型で TypeConstraintAttribute を定義します。</remarks>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.TargetTypeConstraint">
            <summary>
ターゲット型制約を取得します。
            </summary>
<value>ターゲット型制約。</value>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction`1.#ctor">
            <summary>
<see cref="T:System.Windows.Interactivity.TargetedTriggerAction`1"/> クラスの新しいインスタンスを初期化します。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction`1.OnTargetChanged(`0,`0)">
            <summary>
ターゲット プロパティが変化すると呼び出されます。
            </summary>
<remarks>これをオーバーライドし、AssociatedObject 以外の指定されたターゲットに機能をフックまたはアンフックします。</remarks>
<param name="oldTarget">古いターゲット。</param>
<param name="newTarget">新しいターゲット。</param>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction`1.Target">
            <summary>
ターゲット オブジェクトを取得します。TargetName が未設定または解決できない場合、既定で AssociatedObject に設定されます。
            </summary>
<value>ターゲット。</value>
<remarks>通常、このプロパティは派生クラスで AssociatedObject の代わりに使用される必要があります。</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerActionCollection">
            <summary>
共有される AssociatedObject と共にアクションのコレクションを表し、AssociatedObject が変更するときに変更通知をコンテンツに提供します。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.#ctor">
            <summary>
<see cref="T:System.Windows.Interactivity.TriggerActionCollection"/> クラスの新しいインスタンスを初期化します。
            </summary>
<remarks>アセンブリの外部で継承すべきではないため、内部とします。</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.OnAttached">
            <summary>
コレクションが AssociatedObject にアタッチされる直後に呼び出されます。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.OnDetaching">
            <summary>
コレクションが AssociatedObject から解除されるとき、実際に発生する前に呼び出されます。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.ItemAdded(System.Windows.Interactivity.TriggerAction)">
            <summary>
新しい項目がコレクションに追加されるときに呼び出されます。
            </summary>
<param name="item">新しい項目。</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.ItemRemoved(System.Windows.Interactivity.TriggerAction)">
            <summary>
項目がコレクションから削除されるときに呼び出されます。
            </summary>
<param name="item">削除される項目。</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.CreateInstanceCore">
            <summary>
TriggerActionCollection の新しいインスタンスを作成します。
            </summary>
<returns>新しいインスタンス。</returns>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerBase`1">
            <summary>
条件付きで Action を起動できるオブジェクトを表します。
            </summary>
<typeparam name="T">このターゲットをアタッチできる型。</typeparam>
            <remarks>
	TriggerBase は Action を制御するための基本クラスです。OnAttached() および OnDetaching() をオーバーライドし、ハンドラーを AssociatedObject にフックしたり、アンフックします。ジェネリック パラメーターを指定することによって、派生の TriggerBase をアタッチすることが可能な型を制約できます。InvokeActions() を呼び出して、この TriggerBase に関連付けられるすべての Action を起動します。
            </remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase`1.#ctor">
            <summary>
<see cref="T:System.Windows.Interactivity.TriggerBase`1"/> クラスの新しいインスタンスを初期化します。
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject">
            <summary>
トリガーがアタッチされるオブジェクトを取得します。
            </summary>
<value>関連オブジェクト。</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObjectTypeConstraint">
            <summary>
関連オブジェクトの型制約を取得します。
            </summary>
<value>関連のオブジェクト型制約。</value>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerCollection">
            <summary>
共有される AssociatedObject と共にトリガーのコレクションを表し、AssociatedObject が変更するときに変更通知をコンテンツに提供します。
             </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.#ctor">
            <summary>
<see cref="T:System.Windows.Interactivity.TriggerCollection"/> クラスの新しいインスタンスを初期化します。
            </summary>
<remarks>アセンブリの外部で継承すべきではないため、内部とします。</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.OnAttached">
            <summary>
コレクションが AssociatedObject にアタッチされる直後に呼び出されます。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.OnDetaching">
            <summary>
コレクションが AssociatedObject から解除されるとき、実際に発生する前に呼び出されます。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.ItemAdded(System.Windows.Interactivity.TriggerBase)">
            <summary>
新しい項目がコレクションに追加されるときに呼び出されます。
            </summary>
<param name="item">新しい項目。</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.ItemRemoved(System.Windows.Interactivity.TriggerBase)">
            <summary>
項目がコレクションから削除されるときに呼び出されます。
            </summary>
<param name="item">削除される項目。</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.CreateInstanceCore">
            <summary>
<see cref="T:System.Windows.Interactivity.TriggerCollection"/> の新しいインスタンスを作成します。
            </summary>
<returns>新しいインスタンス。</returns>
        </member>
        <member name="T:System.Windows.Interactivity.TypeConstraintAttribute">
            <summary>
TargetedTriggerAction および EventTriggerBase の AssociatedObject 上で型制約を指定します。
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TypeConstraintAttribute.#ctor(System.Type)">
            <summary>
<see cref="T:System.Windows.Interactivity.TypeConstraintAttribute"/> クラスの新しいインスタンスを初期化します。
            </summary>
<param name="constraint">制約型。</param>
        </member>
        <member name="P:System.Windows.Interactivity.TypeConstraintAttribute.Constraint">
            <summary>
制約型を取得します。
            </summary>
<value>制約型。</value>
        </member>
        <member name="T:ExceptionStringTable">
            <summary>
ローカライズされた文字列などを調べるために、厳密に型指定されたリソース クラス。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ResourceManager">
            <summary>
このクラスで使用される、キャッシュされた ResourceManager インスタンスに戻ります。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.Culture">
            <summary>
この厳密に型指定されたリソース クラスを使用して、すべてのリソース ルックアップに対して現在のスレッドの CurrentUICulture プロパティを上書きします。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostBehaviorCollectionMultipleTimesExceptionMessage">
            <summary>
「複数オブジェクトに同じ BehaviorCollection を設定することはできません。」に類似したローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostBehaviorMultipleTimesExceptionMessage">
            <summary>
「Behavior のインスタンスを一度に複数のオブジェクトに添付することはできません。」に類似したローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerActionMultipleTimesExceptionMessage">
            <summary>
「1 つの TriggerAction のインスタンスを複数の TriggerCollections で同時にホストすることはできません。インスタンスを TriggerCollection から削除してから、別の TriggerCollection に追加してください。」に類似したローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerCollectionMultipleTimesExceptionMessage">
            <summary>
「複数オブジェクトに同じ TriggerCollection を設定することはできません。」に類似したローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerMultipleTimesExceptionMessage">
            <summary>
「トリガーのインスタンスを一度に複数のオブジェクトに添付することはできません。」に類似したローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CommandDoesNotExistOnBehaviorWarningMessage">
            <summary>
「コマンド "{0}" は存在しないか、{1} で公開されていません。」に類似したローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.DefaultTriggerAttributeInvalidTriggerTypeSpecifiedExceptionMessage">
            <summary>
「"{0}" は TriggerType パラメーターには無効な型です。"{0}" が TriggerBase から派生していることを確認してください。」に類似したローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.DuplicateItemInCollectionExceptionMessage">
            <summary>
「同じ "{0}" のインスタンスを一度以上 "{1}" に追加できません。」に類似したローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.EventTriggerCannotFindEventNameExceptionMessage">
            <summary>
「型 "{1}" に "{0}" という名前のイベントはありません。」に類似したローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.InvokeActionCommandMustBeHostedOnBehaviorExceptionMessage">
            <summary>
「InvokeCommandAction を Behavior に添付する必要があります。これは、Behavior オブジェクトの Triggers コレクションで Trigger の Actions コレクションに追加することで行えます。」に類似したローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.RetargetedTypeConstraintViolatedExceptionMessage">
            <summary>
「型 "{0}" にオブジェクトに型 "{1}"の {3} プロパティを設定することはできません。型 "{0}" のインスタンスには、型 "{2}" の {3} プロパティしか設定できません。」に類似したローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.TypeConstraintViolatedExceptionMessage">
            <summary>
「型 "{0}" を型 "{1}" に添付することはできません。型 "{0}" のインスタンスは、型 "{2}" のオブジェクトにしか添付できません。」に類似したローカライズされた文字列を検索します。
            </summary>
        </member>
        <member name="P:ExceptionStringTable.UnableToResolveTargetNameWarningMessage">
            <summary>
「TargetName "{0}" を解決できません。」に類似したローカライズされた文字列を検索します。
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\ko\Microsoft.Expression.Effects.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Effects</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Media.Effects.BlindOrientation">
            <summary>
            Determine the orientation of the blinds
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.BlindsTransitionEffect">
            <summary>
            Transition shader that simulates blinds opening when transitioning
            from one visual to another. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.OrientationProperty">
            <summary>
            Gets or sets the orientation of the blinds
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.CountProperty">
            <summary>
            Gets or sets the number of blinds
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.ShaderOrientationProperty">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the BlindsTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of BlindsTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.Orientation">
            <summary>
            Gets or sets orientatio of the blinds.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.Count">
            <summary>
            Gets or sets the number of blinds to display.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.ShaderOrientation">
            <summary>
            Gets or sets orientation of the blinds.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.BloomEffect">
            <summary>
            Effect that implements a bloom illumination of a visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
            
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BloomIntensityProperty">
            <summary>
            This property is mapped to the BloomIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseIntensityProperty">
            <summary>
            This property is mapped to the BaseIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BloomSaturationProperty">
            <summary>
            This property is mapped to the BloomSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseSaturationProperty">
            <summary>
            This property is mapped to the BaseSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomIntensityProperty">
            <summary>
            This property is mapped to the BloomIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomSaturationProperty">
            <summary>
            This property is mapped to the BloomSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.ThresholdProperty">
            <summary>
            This property is mapped to the BaseSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BloomEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.Threshold">
            <summary>
            Gets or sets the minimum intensity that will be used for the bloom
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseIntensity">
            <summary>
            Gets or sets the base intensity
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BloomIntensity">
            <summary>
            Gets or sets the bloom intensity
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseSaturation">
            <summary>
            Gets or sets the base saturation
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BloomSaturation">
            <summary>
            Gets or sets the bloom saturation
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomIntensity">
            <summary>
            Gets or sets the Base/BloomIntensity variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomSaturation">
            <summary>
            Gets or sets the BaseBloomSaturation variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect">
            <summary>
            Transition effect that reveals two visuals through a growing/shrinking circle. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.FeatherAmountProperty">
            <summary>
            Dependency property which modifies the Feather amount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseProperty">
            <summary>
            Dependency property which modifies the circle movement.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseShaderProperty">
            <summary>
            Dependency property which modifies the reverseShader variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the CircleRevealTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of CircleRevealTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.FeatherAmount">
            <summary>
            Gets or sets the FuzzyAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.Reverse">
            <summary>
            Gets or sets playing the circle reveal backward
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseShader">
            <summary>
            Gets or sets playing the circle reveal backward into the shader
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect">
            <summary>
            Transition effect that transitions two visuals using a cloud 
            texture as the sampler threshold.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CloudyTransitionEffect">
            <summary>
            Defines a transition shader effect that uses an image as a sampler threshold
            for interpolating pixel value between two visuals. 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect">
            <summary>
            Defines a transition shader effect that provides a random value
            allowing the effect to provide variance each time the effect is run.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.RandomSeedProperty">
            <summary>
            Dependency property which modifies the RandomSeed variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.#ctor">
            <summary>
            Updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.RandomSeed">
            <summary>
            Gets or sets the RandomSeed variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.CloudImageProperty">
            <summary>
            Dependency property which modifies the CloudImage variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.CloudImage">
            <summary>
            Gets or sets the CloudImage variable within the shader used for sampling. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the CloudRevealTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of CloudRevealTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.ColorToneEffect">
            <summary>
            Effects that modifies the color tone of a visual using
            two colors as the sampling.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.DesaturationProperty">
            <summary>
            This property is mapped to the Desaturation variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.ToneAmountProperty">
            <summary>
            This property is mapped to the Toned variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.LightColorProperty">
            <summary>
            This property is mapped to the LightColor variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.DarkColorProperty">
            <summary>
            This property is mapped to the DarkColor variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.ColorToneEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.Desaturation">
            <summary>
            Gets or sets the Desaturation variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.ToneAmount">
            <summary>
            Gets or sets the Toned variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.LightColor">
            <summary>
            Gets or sets the LightColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.DarkColor">
            <summary>
            Gets or sets the DarkColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.EmbossedEffect">
            <summary>
            Effect that simulates an embossed look to the visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.AmountProperty">
            <summary>
            This property is mapped to the Amount variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.HeightProperty">
            <summary>
            This property is mapped to the Height variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.ColorProperty">
            <summary>
            This property is mapped to the Color variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.EmbossedEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Amount">
            <summary>
            Gets or sets the Amount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Height">
            <summary>
            Gets or sets the Height variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Color">
            <summary>
            Gets or sets the Color variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.FadeTransitionEffect">
            <summary>
            Transition effect that gradually transitions from one visual to another.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.FadeTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.FadeTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the FadeTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of FadeTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MagnifyEffect">
            <summary>
            Effect that simulates a magnifying lens.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.InnerRadiusProperty">
            <summary>
            Gets or sets the InnerRadius variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.OuterRadiusProperty">
            <summary>
            Gets or sets the OuterRadius variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.CenterProperty">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.AmountProperty">
            <summary>
            Gets or sets the amount variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.InputProperty">
            <summary>
            Gets or sets the input used in the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.generalTransform">
            <summary>
            The transform used for this shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.InnerRadius">
            <summary>
            Gets or sets the inner radius variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.OuterRadius">
            <summary>
            Gets or sets the outer radius variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Center">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Amount">
            <summary>
            Gets or sets the ShrinkFactor: 
            The higher the shrink factor the "smaller" the content inside the ellipse will appear. 
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.EffectMapping">
            <summary>
            Gets the EffectMapping.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform">
            <summary>
            The GeneralTransform corrosponding to the Magnify effect.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.biasValue">
            <summary>
            Attempt to transform a point based on the effect.
            </summary>
            <param name="targetPoint">The point to transform.</param>
            <param name="result">The result if available.</param>
            <returns>Return true if successful.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.effect">
            <summary>
            The effect instance.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.IsInverse">
            <summary>
            If the transform is an inverse.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.inverseTransform">
            <summary>
            The transform specific to this Effect.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.#ctor(Microsoft.Expression.Media.Effects.MagnifyEffect)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fx">The source effect.</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.TransformBounds(System.Windows.Rect)">
            <summary>
            This particular effect keeps axis aligned lines axis aligned, so transformation of the rect is just
            transformation of its corner points.
            </summary>
            <param name="rect">The input rect.</param>
            <returns>The output rect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.OutToIn(System.Windows.Point,System.Double,System.Double,System.Windows.Point,System.Double)">
            <summary>
            For the inverse of the shader, we need to find Pin which is the Pixel Ouput, given Pout the texture input (is the reverse of the shader)
            However, the shader algorithm is dependant on the radius of the pixel output from the center, which is a variable that we don't
            have when computing the inverse. We need to perform bisection in order to converge using the equation below
            PHatout = PHat_in*Scalar where
            PHatout = Pout - Pcenter  
            pHatin = Pin -Pcenter
            
            Scalar is dependent on the radius of Pin (which we don't have). 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.InToOut(System.Windows.Point,System.Double,System.Double,System.Windows.Point,System.Double)">
            <summary>
            Given a pixel output (Pin) find the texture input (Pout)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.CreateInstanceCore">
            <summary>
            Creats a new instance.
            </summary>
            <returns>A new instance of this.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.PointIsInCircle(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Determines if a point is within an ellipse.
            </summary>
            <param name="pt">The test point.</param>
            <param name="center">The center point of the ellipse.</param>
            <param name="radius">The radius of the ellipse.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.Inverse">
            <summary>
            Gets the inverse transform.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MonochromeEffect">
             <summary>
            Effect that turns a visual into a monochrom color
             </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MonochromeEffect.ColorProperty">
            <summary>
            Gets or sets the FilterColor variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MonochromeEffect.InputProperty">
            <summary>
            Gets or sets the Input of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MonochromeEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MonochromeEffect.Color">
            <summary>
            Gets or sets the FilterColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MonochromeEffect.Input">
            <summary>
            Gets or sets the input used in the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.PixelateEffect">
            <summary>
            Effect that pixelates a visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.PixelateEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.PixelateEffect.PixelationProperty">
            <summary>
            This property is mapped to the pixelation amount variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.PixelateEffect.Pixelation">
            <summary>
            Gets or sets the amount of pixelation inside the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.PixelateEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.PixelateTransitionEffect">
            <summary>
            Transition effect that increase/decrease pixelation between two visuals.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the PixelateTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of PixelateTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect">
            <summary>
            Transition effects that performs a radial blur of the current visual  as the new visual is introduced.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the RadialBlurTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of RadialBlurTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RippleEffect">
            <summary>
            Effect that simulates water ripples on the visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.CenterProperty">
            <summary>
            Gets or sets the Center variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.MagnitudeProperty">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.FrequencyProperty">
            <summary>
            Gets or sets the Frequency variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.PhaseProperty">
            <summary>
            Gets or sets the Phase variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.InputProperty">
            <summary>
            Gets or sets the input brush used in the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Center">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Magnitude">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Frequency">
            <summary>
            Gets or sets the frequency variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Phase">
            <summary>
            Gets or sets the Phase variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RippleTransitionEffect">
            <summary>
            Transition effect that simulate water ripple during transition. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the RippleTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of RippleTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SharpenEffect">
            <summary>
            Effects that makes a visual more crisp and sharper. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.AmountProperty">
            <summary>
            This property is mapped to the Amount variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.HeightProperty">
            <summary>
            This property is mapped to the Width variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SharpenEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Amount">
            <summary>
            Gets or sets the Amount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Height">
            <summary>
            Gets or sets the Height variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SlideDirection">
            <summary>
            Define the slide orientation
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SlideInTransitionEffect">
            <summary>
            Transition effect that slide the current visual away, revealing the new visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideDirectionProperty">
            <summary>
            Dependency property which modifies the SlideAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideNormalProperty">
            <summary>
            Dependency property which modifies the SlideAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the SlideInTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of SlideInTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideDirection">
            <summary>
            Gets or sets the SlideAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideNormal">
            <summary>
            Gets or sets the SlideAmount variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect">
             <summary>
            Transition effect that swirl the current visual while introducing the new visual.
             </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.TwistAmountProperty">
            <summary>
            Dependency property which modifies the TwistAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.CellCountProperty">
            <summary>
            Dependency property which modifies the number of cell where pixels will be twisted.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.#ctor(System.Double)">
            <summary>
            Creates an instance and sets the shader's twist variable to the specified values.
            </summary>
            <param name="twist">level of swirl twist</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the SmoothSwirlGridTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of SmoothSwirlGridTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.TwistAmount">
            <summary>
            Gets or sets the TwistAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.CellCount">
            <summary>
            Gets or sets the CellCount variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SwirlEffect">
            <summary>
            Effect that swirls the current visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.CenterProperty">
            <summary>
            This property is mapped to the Center variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.TwistAmountProperty">
            <summary>
            This property is mapped to the SwirlStrength variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.AngleFrequencyProperty">
            <summary>
            This property is mapped to the AngleFrequency variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.generalTransform">
            <summary>
            The transform used when this Effect is applied.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.Center">
            <summary>
            Gets or sets the Center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.TwistAmount">
            <summary>
            Gets or sets the SwirlStrength variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.AngleFrequency">
            <summary>
            Gets or sets the AngleFrequency variable within the shader.
            We do not expose this property. 
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.EffectMapping">
            <summary>
            Gets the GeneralTransform for this effect.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform">
            <summary>
            For transforming input and tree transformations.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.theEffect">
            <summary>
            The instance of the Effect.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.thisIsInverse">
            <summary>
            The inverse of the transform.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.inverseTransform">
            <summary>
            The inverse of this GeneralTransform.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.#ctor(Microsoft.Expression.Media.Effects.SwirlEffect)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="eff">The effect itself.</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.TransformBounds(System.Windows.Rect)">
            <summary>
            For this operation, the bounds is the bounding box of the 4 transformed points. 
            Need to transform each of them, and then circumscribe.  This is true for both the 
            forward and the inverse.
            </summary>
            <param name="rect">The input rect.</param>
            <returns>The transformed rect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.TryTransform(System.Windows.Point,System.Windows.Point@)">
            <summary>
            Attempt to transform inPoint with the Swirl effect.
            </summary>
            <param name="targetPoint">The input point.</param>
            <param name="result">The output point after transformed using the Swirl effect.</param>
            <returns>True and throws if false.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.CreateInstanceCore">
            <summary>
            Returns a new instance of this.
            </summary>
            <returns>A new instance.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.Inverse">
            <summary>
            Gets a clone of the inverse of the current transform.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WaveTransitionEffect">
            <summary>
            Transition effect that waves the current visual while introducing the new visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.MagnitudeProperty">
            <summary>
            Dependency property which modifies the Magnitude variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.PhaseProperty">
            <summary>
            Dependency property which modifies the Phase variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.FrequencyProperty">
            <summary>
            Dependency property which modifies the Phase variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WaveTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WaveTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the WaveTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of WaveTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Magnitude">
            <summary>
            Gets or sets the magnitude of the wave
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Phase">
            <summary>
            Gets or sets the phase of the wave
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Frequency">
            <summary>
            Gets or sets the magnitude of the wave
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WipeDirection">
            <summary>
            Define the wipe direction.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WipeTransitionEffect">
            <summary>
            Transition effect that wipes the current visual introducing the new visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.WipeDirectionProperty">
            <summary>
            Dependency property which modifies the preset of the wipe
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.FeatherAmountProperty">
            <summary>
            Dependency property which modifies the FuzzyAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOriginProperty">
            <summary>
            Dependency property which modifies the LineOrigin variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineNormalProperty">
            <summary>
            Dependency property which modifies the LineNormal variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOffsetProperty">
            <summary>
            Dependency property which modifies the LineOffset variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WipeTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WipeTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the WipeTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of WipeTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.WipeDirection">
            <summary>
            Gets or sets the direction of the wipe.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.FeatherAmount">
            <summary>
            Gets or sets the FuzzyAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOrigin">
            <summary>
            Gets or sets the LineOrigin variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineNormal">
            <summary>
            Gets or sets the LineNormal variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOffset">
            <summary>
            Gets or sets the LineOffset variable within the shader.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\ko\Microsoft.Expression.Drawing.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Drawing</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Controls.Callout">
            <summary>
            Renders a callout shape supporting several shapes combined with a callout arrow.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.CompositeContentShape">
             <summary>
             Provides a base class of a composite shape that derives from <see cref="T:System.Windows.Controls.ContentControl"/> and implements <see cref="T:Microsoft.Expression.Media.IShape"/>.
             </summary>
             <remarks>
             <see cref="T:Microsoft.Expression.Controls.CompositeContentShape"/> implements <see cref="T:Microsoft.Expression.Media.IShape"/> interface,
             and supports rendering a geometry similar to <see cref="T:System.Windows.Shapes.Shape"/>, but the geometry can be rendered outside of layout boundary.
             
             A typical implementation will have a customized default template in generic.xaml which template-binds most shape properties to a <see cref="T:System.Windows.Shapes.Path"/>.
             It should also extend the <see cref="P:GeometrySource"/> property to customize the appearance of the <see cref="T:System.Windows.Shapes.Path"/>.
            
             This class also supports showing content together with the shape.
             </remarks>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySourceParameters">
            <summary>
            Provides an interface to discribe the parameters of a Shape.
            </summary>
            <remarks>
            This interface is the data for communication between Shape and GeometrySource.
            Typically a concrete implementation of IShape will implements this interface and pass it into
            GeometrySource.UpdateGeometry(), who will consume the shape as readonly data provider.
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Media.IShape">
            <summary>
            Provides the necessary interface to define a Shape.
            Both primitive and composite shapes need to match this interface, although they might derive from different type of FrameworkElement.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.IShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Fill">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how to paint the interior of the shape.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that describes how the shape's interior is painted. The default is null. See Remarks.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values. The default value at run time depends on the type of <see cref="T:System.Windows.Shapes.Shape" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.RenderedGeometry">
            <summary>
            Gets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.GeometryMargin">
            <summary>
            Gets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Media.IShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.CreateGeometrySource">
            <summary>
            Extends how the shape is drawn with creating geometry source.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Controls.CompositeContentShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.OnContentChanged(System.Object,System.Object)">
            <summary>
            Transforms a string content into <see cref="T:TextBlock"/> with center alignment and mulitple line support.
            </summary>
            <remarks>
            Use template binding to <see cref="P:Microsoft.Expression.Controls.CompositeContentShape.InternalContent"/> instead of <see cref="P:Content"/> to enable this method.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that specifies how to paint the interior of the shape.
            </summary>
            <returns>A <see cref="T:System.Windows.Media.Brush"/> that describes how the shape's interior is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeStartLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. </summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineCap" /> enumeration that specifies the shape at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeEndLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the end of a line. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeLineJoin">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:System.Windows.Shapes.Shape" />.</summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration that specifies the join appearance. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeMiterLimit">
            <summary>Gets or sets a limit on the ratio of the miter length to half the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. </summary>
            <returns>The limit on the ratio of the miter length to the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. This value is always a positive number that is greater than or equal to 1.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashArray">
            <summary>Gets or sets a collection of <see cref="T:System.Double" /> values that indicate the pattern of dashes and gaps that is used to outline shapes. </summary>
            <returns>A collection of <see cref="T:System.Double" /> values that specify the pattern of dashes and gaps. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that specifies how the ends of a dash are drawn. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashOffset">
            <summary>Gets or sets a <see cref="T:System.Double" /> that specifies the distance within the dash pattern where a dash begins.</summary>
            <returns>A <see cref="T:System.Double" /> that represents the distance within the dash pattern where a dash begins. The default value is 0.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.RenderedGeometry">
            <summary>
            Gets or sets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.GeometryMargin">
            <summary>
            Gets or sets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.InternalContent">
            <summary>
            Gets or sets the internal content that converts string into center aligned multiple line textblock.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.CompositeContentShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.Callout.AnchorPoint">
            <summary>
            Gets or sets the position of the callout relative to the top and left corner.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.Callout.CalloutStyle">
            <summary>
            Gets or sets the callout style.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.CompositeShape">
            <summary>
            Provides a base class of a composite shape that derives from <see cref="T:System.Windows.Controls.Control"/> and implements <see cref="T:Microsoft.Expression.Media.IShape"/>.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Expression.Controls.CompositeShape"/> implements <see cref="T:Microsoft.Expression.Media.IShape"/> interface,
            and supports rendering a geometry similar to <see cref="T:System.Windows.Shapes.Shape"/>, but the geometry can be rendered outside of layout boundary.
            
            A typical implementation will have a customized default template in generic.xaml which template-binds most shape properties to a <see cref="T:System.Windows.Shapes.Path"/>.
            It should also extend the <see cref="P:GeometrySource"/> property to customize the appearance of the <see cref="T:System.Windows.Shapes.Path"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.CreateGeometrySource">
            <summary>
            Extends how the shape is drawn with creating geometry source.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Controls.CompositeShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that specifies how to paint the interior of the shape.
            </summary>
            <returns>A <see cref="T:System.Windows.Media.Brush"/> that describes how the shape's interior is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeStartLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. </summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineCap" /> enumeration that specifies the shape at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeEndLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the end of a line. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeLineJoin">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:System.Windows.Shapes.Shape" />.</summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration that specifies the join appearance. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeMiterLimit">
            <summary>Gets or sets a limit on the ratio of the miter length to half the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. </summary>
            <returns>The limit on the ratio of the miter length to the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. This value is always a positive number that is greater than or equal to 1.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashArray">
            <summary>Gets or sets a collection of <see cref="T:System.Double" /> values that indicate the pattern of dashes and gaps that is used to outline shapes. </summary>
            <returns>A collection of <see cref="T:System.Double" /> values that specify the pattern of dashes and gaps. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that specifies how the ends of a dash are drawn. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashOffset">
            <summary>Gets or sets a <see cref="T:System.Double" /> that specifies the distance within the dash pattern where a dash begins.</summary>
            <returns>A <see cref="T:System.Double" /> that represents the distance within the dash pattern where a dash begins. The default value is 0.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.RenderedGeometry">
            <summary>
            Gets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.GeometryMargin">
            <summary>
            Gets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.CompositeShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.LineArrow">
            <summary>
            Renders a bended line segment with optional arrowhead on both end.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.LineArrow.MeasureOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
            <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes, or possibly on other considerations such as fixed container size.</returns>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <remarks>
            A default <see cref="T:LineArrow"/> can render at anysize.
            The <see cref="P:RenderedGeometry"/> will stretch to layout boundary and render to outside if necessary.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.BendAmount">
            <summary>
            Gets or sets the amount of bend for the arrow.
            </summary>
            <value>The bend amount between 0 to 1.</value>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.StartArrow">
            <summary>
            Gets or sets how the arrow head is rendered at the start of the line.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.EndArrow">
            <summary>
            Gets or sets how the arrow head is rendered at the end of the line.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.StartCorner">
            <summary>
            Gets or sets from which corner to start drawing the arrow.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.ArrowSize">
            <summary>
            Gets or sets the length of the arrow in pixels.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PanningItems">
            <summary>
            Provides an items control that displays one selected item, and allows panning between items using touch gestures.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PanningItems.#ctor">
            <summary>
            The constructor for PanningItems.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PanningItems.OnApplyTemplate">
            <summary>
            Called when the PanningItems template is applied.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.ScrollDirection">
            <summary>
            Gets or sets the orientation of items in the control.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.FlickTolerance">
            <summary>
            Gets or sets the flick tolerance.  This can be a value between 0 and 1.  
            It represents the percentage of the size of the PanningItems needed to be covered by the flick gesture to trigger an items change.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.PreviousItem">
            <summary>
            Gets or sets the item before the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.NextItem">
            <summary>
            Gets or sets the item after the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.LoopContents">
            <summary>
            Gets or sets whether the contents of the items control will loop, so that the first item will follow the last item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.SliderValue">
            <summary>
            Gets or sets the value of the slider controlling the panning motion.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathGeometryHelper">
            <summary>
            Helper class to work with PathGeometry
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.ConvertToPathGeometry(System.String)">
            <summary>
            Converts a string in the path mini-langauge into a PathGeometry.
            </summary>
            <param name="abbreviatedGeometry">A string in the path mini-langauge.</param>
            <remarks>
            Algorithm is modified from WPF: MS.Internal.Parsers.ParseStringToStreamGeometryContext.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.AsPathGeometry(System.Windows.Media.Geometry)">
            <summary>
            Convert the given geometry into a single PathGeometry.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.SyncPolylineGeometry(System.Windows.Media.Geometry@,System.Collections.Generic.IList{System.Windows.Point},System.Boolean)">
            <summary>
            Update the given geometry as PathGeometry with polyline matching given point list.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathGeometryHelper.AbbreviatedGeometryParser">
            <summary>
            Parses abbreviated geometry sytax.
            </summary>
            <remarks>
            The algorithm is modified from WPF: MS.Internal.AbbreviatedGeometryParser
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathSegmentHelper">
            <summary>
            Helper class to Convert ArcSegment to BezierSegment(s)
            </summary>
            <summary>
            Helper class to work with PathSegment and all variations.
            </summary>
            <summary>
            Strategy classes to handle different types of PathSegment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierSegments(System.Windows.Media.ArcSegment,System.Windows.Point)">
            <summary>
            Convert an Arc segment into Bezier format
            Return BezierSegment, PolyBezierSegment, LineSegment, or null
            When returning null, the Arc degenerated into start point.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SetIsStroked(System.Windows.Media.PathSegment,System.Boolean)">
            <summary>
            Avoid calling the three-parameter constructor, since it always sets a local value for IsStroked.
            </summary>
            <param name="segment"></param>
            <param name="isStroked"></param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SyncPolylineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Collections.Generic.IList{System.Windows.Point},System.Int32,System.Int32)">
            <summary>
            Update the SegmentCollection with given polyline matching given point list.
            Try to keep changes minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SyncPolyBezierSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Collections.Generic.IList{System.Windows.Point},System.Int32,System.Int32)">
            <summary>
            Update the collection[index] segment with poly bezier segment matching given point list.
            givne point list must contain 3*N points for N Bezier segments.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.IsEmpty(System.Windows.Media.PathSegment)">
            <summary>
            Test if given path segment is empty.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetPointCount(System.Windows.Media.PathSegment)">
            <summary>
            Get the point count in given path segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetLastPoint(System.Windows.Media.PathSegment)">
            <summary>
            Get the last point of given path segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetPoint(System.Windows.Media.PathSegment,System.Int32)">
            <summary>
            Get the point of given index in given segment.
            If input is (-1), return the last point.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.FlattenSegment(System.Windows.Media.PathSegment,System.Collections.Generic.IList{System.Windows.Point},System.Windows.Point,System.Double)">
            <summary>
            Flatten given segment and add result points into given point list.
            </summary>
            <param name="segment">The segment to be flatten</param>
            <param name="points">The result point list</param>
            <param name="start">The start point of the segment</param>
            <param name="tolerance">The error tolerance. Must be possitive. Can be 0, fallback to default tolerance.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.ArcToBezier(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Double,System.Double,System.Windows.Point[]@,System.Int32@)">
            <summary>
            ArcToBezier, Compute the Bezier approximation of an arc
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            </summary>
            <remarks>
            This utility computes the Bezier approximation for an elliptical arc as
            it is defined in the SVG arc spec. The ellipse from which the arc is
            carved is axis-aligned in its own coordinates, and defined there by its
            x and y radii. The rotation angle defines how the ellipse's axes are
            rotated relative to our x axis. The start and end points define one of 4
            possible arcs; the sweep and large-arc flags determine which one of
            these arcs will be chosen. See SVG spec for details.
            
            Returning cPieces = 0 indicates a line instead of an arc
                      cPieces = -1 indicates that the arc degenerates to a point 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.GetArcAngle(System.Windows.Point,System.Windows.Point,System.Boolean,System.Boolean,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Get the number of Bezier arcs, and sine/cosine of each.
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            </summary>
            <remarks>
            This is a private utility used by ArcToBezier.  We break the arc into
            pieces so that no piece will span more than 90 degrees.  The input
            points are on the unit circle.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.GetBezierDistance(System.Double,System.Double)">
             <summary>
             GetBezierDistance, return the distance as a fraction of the radius
             Adopted from MIL:Graphics\core\geometry\utils.cpp
             </summary>
            <remarks>
                  Get the distance from a circular arc's endpoints to the control points
                  of the Bezier arc that approximates it, as a fraction of the arc's
                  radius.
            
                  Since the result is relative to the arc's radius, it depends strictly on
                  the arc's angle. The arc is assumed to be of 90 degrees of less, so the
                  angle is determined by the cosine of that angle, which is derived from
                  rDot = the dot product of two radius vectors.  We need the Bezier curve
                  that agrees with the arc's points and tangents at the ends and midpoint. 
                  Here we compute the distance from the curve's endpoints to its control
                  points.
            
                  Since we are looking for the relative distance, we can work on the unit
                  circle. Place the center of the circle at the origin, and put the X axis
                  as the bisector between the 2 vectors.  Let a be the angle between the
                  vectors.  Then the X coordinates of the 1st and last points are cos(a/2). 
                  Let x be the X coordinate of the 2nd and 3rd points.  At t=1/2 we have a
                  point at (1,0). But the terms of the polynomial there are all equal:
            
                            (1-t)^3 = t*(1-t)^2 = t^2*(1-t) = t^3 = 1/8,
            
                  so from the Bezier formula there we have:
            
                            1 = (1/8) * (cos(a/2) + 3x + 3x + cos(a/2)), 
            
                  hence
            
                            x = (4 - cos(a/2)) / 3
            
                  The X difference between that and the 1st point is:
                  
                            DX = x - cos(a/2) = 4(1 - cos(a/2)) / 3.
            
                  But DX = distance / sin(a/2), hence the distance is
            
                            dist = (4/3)*(1 - cos(a/2)) / sin(a/2).
            
                  Rather than the angle a, we are given rDot = R^2 * cos(a), so we
                  multiply top and bottom by R:
             
                            dist = (4/3)*(R - Rcos(a/2)) / Rsin(a/2)
             
                  and use some trig:
                                           ________________
                            cos(a/2)   = \/(1 + cos(a)) / 2
                                           ______________________
                            R*cos(a/2) = \/(R^2 + R^2 cos(a)) / 2 
                                           ________________
                                       = \/(R^2 + rDot) / 2
            
                  Let A = (R^2 + rDot)/2.
                                           ____________________
                            R*sin(a/2) = \/R^2 - R^2 cos^2(a/2)
                                           _______
                                       = \/R^2 - A
            
                  so:
                                                      _
                                         4      R - \/A
                                  dist = - * ------------
                                         3      _______
                                              \/R^2 - A
            
              History:
                  5/29/2001 MichKa
                      Created it.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.AcceptRadius(System.Double,System.Double,System.Double@)">
            <summary>
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            Return false if the radius is too small compared to the chord length (returns true on NaNs)
            radius is modified to the value that's accepted.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.BezierCurveFlattener">
            <summary>
            A utility class to flatten Bezier curves.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.BezierCurveFlattener.FlattenCubic(System.Windows.Point[],System.Double,System.Collections.Generic.ICollection{System.Windows.Point},System.Boolean,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Flattens a Bezier cubic curve and adds the result polyline to the third parameter.
            </summary>
            <param name="controlPoints">The 4 Bezier cubic control points.</param>
            <param name="errorTolerance">The maximum distance between two corresponding points on the true curve 
            and on the flattened polyline. Must be strictly positive.</param>
            <param name="resultPolyline">Where to add the flattened polyline.</param>
            <param name="skipFirstPoint">True to skip the first control point when adding the flattened polyline.
            <param name="resultParameters">Where to add the value of the Bezier curve parameter associated to 
            each of the polyline vertices</param> 
            If <paramref name="resultPolyline"/> is empty, the first control point 
            and its associated parameter are always added.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.BezierCurveFlattener.FlattenQuadratic(System.Windows.Point[],System.Double,System.Collections.Generic.ICollection{System.Windows.Point},System.Boolean,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Flattens a Bezier quadratic curve and adds the result polyline to the third parameter.
            We use degree elevation for Bezier curves to reuse the code for the cubic case.
            </summary>
            <param name="controlPoints">The 3 Bezier quadratic control points.</param>
            <param name="errorTolerance">The maximum distance between two corresponding points on the true curve 
            and on the flattened polyline. Must be strictly positive.</param>
            <param name="resultPolyline">Where to add the flattened polyline.</param>
            <param name="skipFirstPoint">Whether to skip the first control point when adding the flattened polyline. 
            <param name="resultParameters">Where to add the value of the Bezier curve parameter associated to
            each of the polyline vertices</param>
            If <paramref name="resultPolyline"/> is empty, the first control point and 
            its associated parameter are always added.</param>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.CommonExtensions">
            <summary>
            Extension methods supporting non-geometry types
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence with the index of each item.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.EnsureListCount``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Ensure the count of list to given count.  Create default(T) or remove items when necessary.
            If Input IList is a List, AddRange or RemoveRange is used.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.EnsureListCount``1(System.Collections.Generic.IList{``0},System.Int32,System.Func{``0})">
            <summary>
            Ensure the count of list to given count.  Create with given fatory or remove items when necessary.
            If Input IList is a List, AddRange or RemoveRange is used when there's no factory.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a range of items to the end of a collection.
            If collection is list, List.AddRange is used.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.Last``1(System.Collections.Generic.IList{``0})">
            <summary>
            Get the last item of given list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.RemoveLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove the last item from the given list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.DeepCopy``1(``0)">
            <summary>
            Make a copy of obj and all it's public properties, including all collection properties.
            Possible perf optimization: this is used only for Transform and Geometry.
            We should develope a copier for them instead of using reflection.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.SetIfDifferent(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object)">
            <summary>
            Set the value if different.  Avoid setting local value if possible.
            return true when the value has been changed
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ClearIfSet(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Clears the dependency property when it is locally set on the given dependency object.
            Return false if the dependeny property is not locally set.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.FindVisualDesendent``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean})">
            <summary>
            Find all visual desendent of given type and condition using breath first search.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get all visual children in IEnumerable
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.DrawingPropertyMetadata">
            <summary>
            Unify the interface of PropertyMetadata in WPF and Silverlight.
            Providing the necessary notification about render, arrange or measure.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.#ctor(Microsoft.Expression.Media.DrawingPropertyMetadataOptions,System.Object)">
            <summary>
            This private Ctor should only be used by AttachCallback.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.AttachCallback(System.Object,Microsoft.Expression.Media.DrawingPropertyMetadataOptions,System.Windows.PropertyChangedCallback)">
            <summary>
            Chain InternalCallback() to attach the instance of DrawingPropertyMetadata on property callback.
            In Silverlight4-, the property metadata is thrown away after setting. Use callback to remember it.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.InternalCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Before chaining the original callback, trigger DrawingPropertyChangedEvent
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.GeometryHelper">
            <summary>
            Extension methods for Geometry related data structures (Point/Vector/Size/Rect)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Resize(System.Windows.Rect,System.Double)">
            <summary>
            Resize the rectangle to relative size while keeping center invariant.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Subtract(System.Windows.Point,System.Windows.Point)">
            <summary>
            Get the difference Vector between two Points
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Plus(System.Windows.Point,System.Windows.Point)">
            <summary>
            Memberwise plus for Point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Minus(System.Windows.Point,System.Windows.Point)">
            <summary>
            Memberwise minus for Point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.ConvertToPathGeometry(System.String)">
            <summary>
            Converts a string of mini-languages to a <see cref="T:PathGeometry"/>.
            </summary>
            <remarks>See: Path Markup Syntax(http://msdn.microsoft.com/en-us/library/cc189041(VS.95).aspx)</remarks>
            <param name="abbreviatedGeometry">The string of path mini-languages for describing geometric paths.</param>
            <returns>A <see cref="T:PathGeometry"/> converted from the the path mini-languages/></returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.FlattenFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Double)">
            <summary>
            Flattens a <see cref="T:PathFigure"/> and adds result points to given <paramref name="points"/>.
            </summary>
            <param name="figure">The input <see cref="T:PathFigure"/>.</param>
            <param name="points">The point list to which result points will append.</param>
            <param name="tolerance">A positive number specifying the maximum allowed error from result points to input path figure.  Value 0 allows algorithm to pick the tolerance automatically.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcPoint(System.Double)">
            <summary>
            Get the normalized arc in (0,0)(1,1) box.
            Zero degree is mapped to [0.5, 0] (up), and clockwise
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcPoint(System.Double,System.Windows.Rect)">
            <summary>
            Get the absolute arc point in given bound with given relative radius.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcAngle(System.Windows.Point)">
            <summary>
            Get the angle on arc relative to (0,0)(1,1) box.
            Zero degree is mapped to [0.5, 0] (up), and clockwise
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcAngle(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Get the angle on arc from given absolute point relative to bound
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeTransform(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Compute the transform that moves Rect from to Rect to.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeTransform(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Computes the transform from the coordinate space of one <c>UIElement</c> to another.
            </summary>
            <param name="from">The source element.</param>
            <param name="to">The destination element.</param>
            <returns>The transform between the <c>UIElement</c>s, or null if it cannot be computed.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeToAbsolutePoint(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Map relative point to absolute using the mapping from given bound to (0,0)(1,1) box.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.AbsoluteToRelativePoint(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Map absolute point to relative using the mapping from (0,0)(1,1) box to given bound.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetStretchBound(System.Windows.Rect,System.Windows.Media.Stretch,System.Windows.Size)">
            <summary>
            Compute the bound after stretch within given logical bound.
            If stretch to uniform, use given aspectRatio.
            If aspectRatio is empty, it's equivalent to Fill.
            If stretch is None, equivalent to Fill or Uniform.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Midpoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the mid point of given 2 points
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The mid point between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Dot(System.Windows.Vector,System.Windows.Vector)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="lhs">The first vector.</param>
            <param name="rhs">The second vector.</param>
            <returns>The dot product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Dot(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the dot product of two Points.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Distance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance between two points.
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The distance between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.SquaredDistance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the square of the distance between two points.
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The square of the distance between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Determinant(System.Windows.Point,System.Windows.Point)">
            <summary>
            Determinant of cross product.  Equivalent to directional area
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Normal(System.Windows.Point,System.Windows.Point)">
            <summary>
            Compute the normal direction vector of given line segments
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Perpendicular(System.Windows.Vector)">
            <summary>
            Compute perpendicular vector, 90 degrees counter-clockwise.
            Vector to right perpendicular result a vector to up.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GeometryEquals(System.Windows.Media.Geometry,System.Windows.Media.Geometry)">
            <summary>
            Returns whether the two geometries are identical.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureGeometryType``1(``0@,System.Windows.Media.Geometry@,System.Func{``0})">
            <summary>
            Ensure the value is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureGeometryType``1(``0@,System.Collections.Generic.IList{System.Windows.Media.Geometry},System.Int32,System.Func{``0})">
            <summary>
            Ensure the list[index] is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureSegmentType``1(``0@,System.Collections.Generic.IList{System.Windows.Media.PathSegment},System.Int32,System.Func{``0})">
            <summary>
            Ensure the list[index] is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.ComputeBSpline(System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Double)">
            <summary>
            de'Boor algorithm to subdevide BSpline into poly Bezier segments.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.MathHelper">
            <summary>
            Helper class providing static properties and methods related to floating point arithmetic.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.Epsilon">
            <summary>
            The minimum distance to consider two values are same.
            Note: internal floating point in MIL/SL is float, not double.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.TwoPI">
            <summary>
            The value of angle of a full circle.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.PentagramInnerRadius">
            <summary>
            The inner radius for pentagram polygon shape, at precision of 3 digits in percentage.
            (1 - Sin36 * Sin72 / Sin54) / (Cos36) ^ 2, which is 0.47210998990512996761913067272407
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.IsVerySmall(System.Double)">
            <summary>
            Determines whether a <c>System.Double</c> value is small enough to be considered
            equivalent to zero.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if value is smaller than <c>DoubleTolerance</c>;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.EnsureRange(System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Return the value that's within the given range
            Given min/max is null means no limit.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.Hypotenuse(System.Double,System.Double)">
            <summary>
            Computes the Euclidean norm of the vector (x, y).
            </summary>
            <param name="x">The first component.</param>
            <param name="y">The second component.</param>
            <returns>The Euclidean norm of the vector (x, y).</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.DoubleFromMantissaAndExponent(System.Double,System.Int32)">
            <summary>
            Computes a real number from the mantissa and exponent.
            </summary>
            <param name="x"></param>
            <param name="exp"></param>
            <returns>The value of x * 2^exp if successful.</returns>
            <remarks>See ::ldexp in any decent C language runtime library.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.IsFiniteDouble(System.Double)">
            <summary>
            Tests a double.
            </summary>
            <param name="x">The double to test.</param>
            <returns><c>true</c> if x is not a NaN and is not equal to plus or minus infinity;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathFigureHelper">
            <summary>
            Helper class to work with PathFigure
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.FlattenFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Double,System.Boolean)">
            <summary>
            Flatten the given figure and add to the point list.
            </summary>
            <param name="tolerance">The error tolerance. Must be possitive. Can be 0, fallback to default tolerance.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.AllSegments(System.Windows.Media.PathFigure)">
            <summary>
            Iterate all segments inside given figure, and returns correct start point for each segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncPolylineFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
            <summary>
            Synchronize the figure to the given list of points as a single polyline segment.
            Try to keep the change minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncPolyBezierFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
            <summary>
            Synchronize the figure to the given list of points as a single PolyBezierSegment.
            Try to keep the change minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncEllipseFigure(System.Windows.Media.PathFigure,System.Windows.Rect,System.Windows.Media.SweepDirection,System.Boolean)">
            <summary>
            Synchronize the given figure to be a closed ellipse with 2 arc segments.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathSegmentData">
            <summary>
            A Tuple data structure for PathSegment and corresponding StartPoint.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PolylineData">
            <summary>
            Represent a polyline consist with a list of connecting points.
            A closed polygon is represented by repeating the first point at the end.
            The differences, normals, angles, and lengths are computed on Demand.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.#ctor(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Construct a polyline with two or more points.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.Difference(System.Int32)">
            The forward difference vector of polyline.
            Points[i] + Differences[i] = Points[i+1]
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.SmoothNormal(System.Int32,System.Double,System.Double)">
            <summary>
            Compute the normal vector of given location (lerp(index, index+1, fraction).
            If the location is within range of cornerRadius, interpolate the normal direction.
            </summary>
            <param name="cornerRadius">The range of normal smoothless.  If zero, no smoothness and return the exact normal on index.</param>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.IsClosed">
            <summary>
            The polyline is closed when first and last point is repeated.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Count">
            <summary>
            The count of points in this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.TotalLength">
            <summary>
            The total arc length of this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Points">
            <summary>
            The point array of this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Lengths">
            <summary>
            The length between line segments, Points[i] to Points[i+1]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Normals">
            <summary>
            The list of normal vectors for each segment.
            Normals[i] is the normal of segment p[i] to p[i + 1].
            Normals[N-1] == Normals[N-2].
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Angles">
            <summary>
            The list of Cos(angle) between 2 line segments on point p[i]
            Note: The value is cos(angle) = Dot(u, v). It's not in degree.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.AccumulatedLength">
            <summary>
            The list of accumulated length from points[i] to points[0]
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.MarchLocation">
            <summary>
            The data structure to communicate with PathMarch algorithm.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetPoint(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Get the interpolated position of this this MarchLocation on given point list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetNormal(Microsoft.Expression.Drawing.Core.PolylineData,System.Double)">
            <summary>
            Get the interpolated normal direction of this this MarchLocation on given normal vector list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetArcLength(System.Collections.Generic.IList{System.Double})">
            <summary>
            Get the arc length of this MarchLocation to the start of the entire polyline.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Reason">
            <summary>
            The reason why this location is sampled.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Index">
            <summary>
            The index of the point on polyline point list.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Ratio">
            <summary>
            Ratio: [0, 1], which is always before / (before + after)
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Before">
            <summary>
            Arc length before stop point.  It's non-negative, and less than Length[index]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.After">
            <summary>
            Arc length after the stop point.  It's non-negative, and less than Length[index]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Remain">
            <summary>
            Remaining length within a step to hit next stop.  Positive to go forward. Negative to go backward.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PolylineHelper">
            <summary>
            Helper class to work with list of points
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineHelper.PathMarch(Microsoft.Expression.Drawing.Core.PolylineData,System.Double,System.Double,System.Func{Microsoft.Expression.Drawing.Core.MarchLocation,System.Double})">
            <summary>
            March the given polyline with given interval and output each stop through callback
            </summary>
            <param name="polyline">The polyline points to march on</param>
            <param name="startArcLength">The arc length to march before stopping at the first point.</param>
            <param name="cornerThreshold">The max angle between edges to be considered a corner vertex</param>
            <param name="stopCallback">Callback when marching algorithm stop at a point.  The callback returns the arc length for next stop.
            If the asked length is negative, march backwards. If callback returns NaN, finish marching.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineHelper.GetWrappedPolylines(System.Collections.Generic.IList{Microsoft.Expression.Drawing.Core.PolylineData},System.Double@)">
            <summary>
            Reorders the given list of polylines so that the polyline a given arclength into the list is the first.
            Polylines that preceded this line are concatenated to the end of the list, with the first polyline at the very end. 
            </summary>
            <param name="lines">A list of polylines.</param>
            <param name="startArcLength">The arclength into the entire list of polylines at which to find the start line.
            The arc length into that line is returned in this variable.</param>
            <returns>The reordered and wrapped list.</returns>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.RandomEngine">
            <summary>
            A random generator support uniform and gaussian distributions.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.RandomEngine.Gaussian">
            <summary>
            Generate a pair of independent standard normally distributed random numbers,
            zero expectation, unit variance, using polar form of the Box-Muller transformation.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.#ctor">
            <summary>
            Private constructor. Force to use factory methods.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a line segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a cubic bezier segment from quatratic curve (3 control points)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a cubic bezier segment with 4 control points.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.SimpleSegment.Points">
            <summary>
            Control points of path segment.  Length is variant.
            Line segment has 2 points, Cubic bezier has 4 points.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.TransformExtensions.TransformEquals(System.Windows.Media.Transform,System.Windows.Media.Transform)">
            <summary>
            Compares two transforms for an exact match.  Transforms with the same value but different structure(e.g. Translate(0,0) and Rotate(0) are not considered equivalent).
            </summary>
            <param name="firstTransform">The first transform.</param>
            <param name="secondTransform">The second transform.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Expression.Media.UnitType">
            <summary>
            Specifies the unit of thickness.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.UnitType.Pixel">
            <summary>
            Unit in pixels.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.UnitType.Percent">
            <summary>
            Unit in percentage relative to bounding box.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometrySource`1">
            <summary>
            Provides the base class of a source of geometry.
            It generate and cache the geometry based on input parameters and layout bounds.
            </summary>
            <remarks>
            A typical implementation will extend the UpdateCachedGeometry() to update this.cachedGeometry.
            This base class will then handle the invalidation, pipeline to geometry effects and caching realtive to layout bounds.
            An implementation should try to reuse the cached geometry as much as possible to avoid reconstruction in rendering thread.
            An implementation can extend the ComputeLogicalBounds to handle Stretch differently.
            </remarks>
            <typeparam name="TParameters">The type of geometry source parameter on which the base class is working on.</typeparam>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySource">
            <summary>
            Provides an interface to describe the source of a geometry.
            </summary>
            <remarks>
            This interface is designed to expose geometry source in a non-generic way.
            Typical implementation should subclass GeometrySource&lt;&gt; instead of implementing this interface directly.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.IGeometrySource.InvalidateGeometry">
            <summary>
            Notify the geometry is invalidated because of external changes.
            </summary>
            <remarks>
            Typically geometry is invalidated when parameters are changed.
            If any geometry has been invalidated externally, geometry will be recomputed regardless bounds' change.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.IGeometrySource.UpdateGeometry(Microsoft.Expression.Media.IGeometrySourceParameters,System.Windows.Rect)">
            <summary>
            Update the geometry using given parameter and layout bounds.
            Returns false if nothing has been updated.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.Geometry">
            <summary>
            Gets or sets the result geometry after the latest UpdateGeometry()
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.LogicalBounds">
            <summary>
            Gets the bounding box where geometry should stretch to.
            The actual geometry might be smaller or larger than this.
            <see cref="P:Microsoft.Expression.Media.IGeometrySource.LogicalBounds"/> should already take stroke thickness and stretch into consideration.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.LayoutBounds">
            <summary>
            Gets the actuall bound of FrameworkElement.
            <see cref="P:Microsoft.Expression.Media.IGeometrySource.LayoutBounds"/> includes logical bounds, stretch and stroke thickness.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometrySource`1.cachedGeometry">
            <summary>
            Specifics the geometry from the previous geometry effect process.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.InvalidateGeometry">
            <summary>
            Notify the geometry is invalidated because of external changes.
            </summary>
            <remarks>
            Typically geometry is invalidated when parameters are changed.
            If any geometry has been invalidated externally, geometry will be recomputed regardless bounds' change.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.UpdateGeometry(Microsoft.Expression.Media.IGeometrySourceParameters,System.Windows.Rect)">
            <summary>
            Update the geometry based on given parameters and layoutBounds.
            Returns false if geometry hasn't been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.UpdateCachedGeometry(`0)">
            <summary>
            Extend the way to provide geometry by implementing this function.
            Return true when any of the geometry is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Extend the way to handle stretch mode.
            Default is to always use Stretch.Fill and center stroke.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.ApplyGeometryEffect(Microsoft.Expression.Media.IGeometrySourceParameters,System.Boolean)">
            <summary>
            Apply geometry effect when dirty or forced, update this.Geometry.
            Otherwise, keep this.Geometry as this.cachedGeometry.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.Geometry">
            <summary>
            Gets or sets the result geometry after the latest UpdateGeometry()
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.LogicalBounds">
            <summary>
            Gets the bounding box where geometry should stretch to.
            The actual geometry might be smaller or larger than this.
            <see cref="P:Microsoft.Expression.Media.GeometrySource`1.LogicalBounds"/> should already take stroke thickness and stretch into consideration.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.LayoutBounds">
            <summary>
            Gets the actuall bound of FrameworkElement.
            <see cref="P:Microsoft.Expression.Media.GeometrySource`1.LayoutBounds"/> includes logical bounds, stretch and stroke thickness.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Expression.Media.ArcGeometrySource.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Arc think Stretch.None is same as Stretch.Fill, assuming aspect ratio = 1:1
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.ArcGeometrySource.NormalizeThickness(Microsoft.Expression.Media.IArcGeometrySourceParameters)">
            <summary>
            Normalize thickness, both relative to bounding box and absolute pixel.
            realtive thickness = 0 -> full circle radius or clamped.
            realtive thickness = 1 -> shrinked to a dot, or degenerated.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.ArrowOrientation">
            <summary>
            Specifies the direction the arrow points.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Left">
            <summary>
            The arrow points to left.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Right">
            <summary>
            The arrow points to right.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Up">
            <summary>
            The arrow points up.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Down">
            <summary>
            The arrow points down.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.BlockArrowGeometrySource.ArrowBuilder">
            <summary>
                 B
                /|
               / C--D
              A     |
               \ C--D
                \|
                 B
            Algorithm only use Width/Height assuming top-left at 0,0
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.CalloutStyle">
            <summary>
            Specifies the rendering style of a Callout shape
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Rectangle">
            <summary>
            A rectangle shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.RoundedRectangle">
            <summary>
            A rounded rectangle shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Oval">
            <summary>
            A oval shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Cloud">
            <summary>
            A cloud shaped callout.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateEdge(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double,System.Boolean)">
            <summary>
            Update the edge line, and connect to anchor point if necessary
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdatePolylineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Update polyline segment, connecting start, anchor and end point with Callout style
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateLineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point)">
            <summary>
            Update the line segment to given point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.ComputeCorners(System.Double)">
            <summary>
            Compute the corner points, clockwise, 8 points for 4 corners
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateCornerArc(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point)">
            <summary>
            Corner Arc is always smaller arc with 90 degree
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometryEffect">
            <summary>
            Provides the base class of GeometryEffect that transform a geometry into another geometry.
            </summary>
            <remarks>
            This class provides the basic implementation of processing the rendered geometry of a IShape before it's passed to rendering.
            A typical implementation will extend the virtual function <see cref="F:ProcessGeometry"/> to transform input geometry.
            <see cref="T:GeometryEffect"/> is typically attached to <see cref="T:IShape"/> as an attached property and activated when <see cref="T:IShape"/> geometry is updated.
            The <see cref="P:OutputGeometry"/> of a <see cref="T:GeometryEffect"/> will replace the rendered geometry in <see cref="T:IShape"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.GetGeometryEffect(System.Windows.DependencyObject)">
            <summary>
            Gets the geometry effect as attached property on given dependency object.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.SetGeometryEffect(System.Windows.DependencyObject,Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Sets the geometry effect as attached property on given dependency object.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.CloneCurrentValue">
            <summary>
            Creates a modifiable clone (deep copy) of the <see cref="T:GeometryEffect"/> using its current values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.DeepCopy">
            <summary>
            Makes a deep copy of the geometry effect. Implements CloneCurrentValue in Silverlight.
            </summary>
            <returns>A clone of current instance of geometry effect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Equals(Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Tests if given geometry effect is equivalent to the current instance.
            </summary>
            <param name="geometryEffect">a geometry effect compare with.</param>
            <returns>Returns true when two effects renders a same appearance.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometryEffect.cachedGeometry">
            <summary>
            Specifics the geometry from the previous geometry effect process.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.InvalidateGeometry">
            <summary>
            Invalidate the geometry effect without actually compute the geometry.
            It will notify all parent shapes or effects to invalidate accordingly.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.ProcessGeometry(System.Windows.Media.Geometry)">
            <summary>
            Process geometry effect on given input geometry.
            Result is stored in GeometryEffect.OutputGeometry.
            </summary>
            <returns>Return false if nothing has been changed.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.UpdateCachedGeometry(System.Windows.Media.Geometry)">
            <summary>
            Extend the way of updating cachedGeometry based on given input geometry.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Detach">
            <summary>
            Notified when detached from parent chain.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Attach(System.Windows.DependencyObject)">
            <summary>
            Notified when attached to a parent chain.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.InvalidateParent(System.Windows.DependencyObject)">
            <summary>
            Invalidate the geometry on given dependency object when
            the object is a valid parent type (IShape or GeometryEffect).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.CreateInstanceCore">
            <summary>
            Implement the Freezable in WPF.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.DefaultGeometryEffect">
            <summary>
            The default geometry effect that does nothing but passing through the input geometry.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.OutputGeometry">
            <summary>
            Gets the output geometry of this geometry effect.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.Parent">
            <summary>
            Parent can be either IShape or GeometryEffectGroup.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometryEffectConverter">
            <summary>
            Provides the conversion between string and geometry effect
            </summary>
            <remarks>
            This class enables the brief sytax in xaml like <code>GeometryEffect="Sketch"</code>
            It will create a clone of instance of geometry effect so it can be used as resources.
            </remarks>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometryEffectConverter.registeredEffects">
            <summary>
            Build a preset list of supported geometry effects.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A GeometryEffect can be converted from string type.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A GeometryEffect can be converted to string type.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts a string to a geometry effect.  Fallback value is null.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a geometry effect into a string.  Fallback value is null.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySourceExtensions">
            <summary>
            Provides helper extension methods to work with IGeometrySource and parameters.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.ArrowType">
            <summary>
            Specifies the Arrow head type.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.NoArrow">
            <summary>
            No arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.Arrow">
            <summary>
            A triagle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.StealthArrow">
            <summary>
            A stealth triangle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.OpenArrow">
            <summary>
            An open triangle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.OvalArrow">
            <summary>
            An oval head.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.CornerType">
            <summary>
            Specifies the corner location.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.TopLeft">
            <summary>
            On top left of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.TopRight">
            <summary>
            On top right of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.BottomRight">
            <summary>
            On bottom right of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.BottomLeft">
            <summary>
            On bottom left of bounding box.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.PolygonGeometrySource.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Polygon think Stretch.None is same as Stretch.Fill
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.SketchGeometryEffect">
            <summary>
            A geometry effect to transform any geometry into a Sketch style as in SketchFlow.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.DeepCopy">
            <summary>
            Makes a deep copy of the geometry effect
            </summary>
            <returns>A clone of current instance of geometry effect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.Equals(Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Tests if given geometry effect is equivalent to the current instance.
            </summary>
            <param name="geometryEffect">a geometry effect compare with.</param>
            <returns>Returns true when two effects renders a same appearance.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.UpdateCachedGeometry(System.Windows.Media.Geometry)">
            <summary>
            Updating cachedGeometry based on given input geometry.
            </summary>
            <param name="input">A input geometry</param>
            <returns>Returns true when anything on cachedGeometry has been updated.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.SketchGeometryEffect.randomSeed">
            <summary>
            Use the same random seed on creation to keep visual flickering minimum
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.GetEffectiveSegments(System.Windows.Media.PathFigure)">
            <summary>
            Iterates all simple segments in given path figure including the closing chord.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Shapes.Arc">
            <summary>
            Renderes an Arc shape supporting Arc, Ring and Pie mode controled by ArcThickness.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Shapes.PrimitiveShape">
            <summary>
            Platform neutral implementation of Shape deriving from WPF:Shape or SL:Path
            </summary>
            <summary>
            Provides WPF implementation of Shap who derives from platform Shape.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.CreateGeometrySource">
            <summary>
            Extend how the shape is drawn with creating geometry source
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.MeasureOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
            <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes, or possibly on other considerations such as fixed container size.</returns>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <remarks>
            In WPF, measure override works from Shape.DefiningGeometry which is not always as expected
            see bug 99497 for details where WPF is not having correct measure by default.
            
            In Silverlight, measure override on Path does not work the same as primitive shape works.
            
            We should return the smallest size this shape can correctly render without clipping.
            By default a shape can render as small as a dot, therefore returning the strokethickness.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Shapes.PrimitiveShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Shapes.PrimitiveShape.GeometryMargin">
            <summary>
            Gets or sets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Shapes.PrimitiveShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.PrimitiveShape.RenderedGeometry">
            <summary>
            Gets a value that represents the final rendered <see cref="T:System.Windows.Media.Geometry"/> of a <see cref="T:System.Windows.Shapes.Shape"/>.
            </summary>
            <returns>The final rendered <see cref="T:System.Windows.Media.Geometry"/> of a <see cref="T:System.Windows.Shapes.Shape"/>.</returns>
            <remarks>The WPF primitive shape hides base class RenderedGeometry to provide a local storage and matches Silverlight primitive shape interface.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
            <value>The start angle in degrees. 0 degree is pointing up.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.EndAngle">
            <summary>
            Gets or sets the end angle.
            </summary>
            <value>The end angle in degree. 0 degree is pointing up.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.ArcThickness">
            <summary>
            Gets or sets the arc thickness.
            </summary>
            <value>The arc thickness in pixels or percentage depending on "ArcThicnessUnit"/>.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.ArcThicknessUnit">
            <summary>
            Gets or sets the arc thickness unit.
            </summary>
            <value>The arc thickness unit, either pixel or percentage.</value>
        </member>
        <member name="T:Microsoft.Expression.Shapes.BlockArrow">
            <summary>
            Renders a block arrow shape supporting resizable arrow head and body.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation where the arrow is pointing to.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.ArrowheadAngle">
            <summary>
            Gets or sets the arrowhead angle.
            </summary>
            <value>The arrowhead angle in degrees.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.ArrowBodySize">
            <summary>
            Gets or sets the size of the arrow body.
            </summary>
            <value>The size of the arrow body in pixels.</value>
        </member>
        <member name="T:Microsoft.Expression.Shapes.RegularPolygon">
            <summary>
            Renders a regular polygon shape or corresponding star shape with variable number of points.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.RegularPolygon.PointCount">
            <summary>
            Gets or sets the number of points of the <see cref="T:Microsoft.Expression.Shapes.RegularPolygon"/>
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.RegularPolygon.InnerRadius">
            <summary>
            Gets or sets the the distance between the center and the innermost point.
            </summary>
            <value>The distance between the center and the innermost point.</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\zh-Hans\Microsoft.Expression.Effects.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Effects</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Media.Effects.BlindOrientation">
            <summary>
            Determine the orientation of the blinds
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.BlindsTransitionEffect">
            <summary>
            Transition shader that simulates blinds opening when transitioning
            from one visual to another. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.OrientationProperty">
            <summary>
            Gets or sets the orientation of the blinds
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.CountProperty">
            <summary>
            Gets or sets the number of blinds
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.ShaderOrientationProperty">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the BlindsTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of BlindsTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.Orientation">
            <summary>
            Gets or sets orientatio of the blinds.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.Count">
            <summary>
            Gets or sets the number of blinds to display.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BlindsTransitionEffect.ShaderOrientation">
            <summary>
            Gets or sets orientation of the blinds.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.BloomEffect">
            <summary>
            Effect that implements a bloom illumination of a visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
            
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BloomIntensityProperty">
            <summary>
            This property is mapped to the BloomIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseIntensityProperty">
            <summary>
            This property is mapped to the BaseIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BloomSaturationProperty">
            <summary>
            This property is mapped to the BloomSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseSaturationProperty">
            <summary>
            This property is mapped to the BaseSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomIntensityProperty">
            <summary>
            This property is mapped to the BloomIntensity variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomSaturationProperty">
            <summary>
            This property is mapped to the BloomSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.BloomEffect.ThresholdProperty">
            <summary>
            This property is mapped to the BaseSaturation variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.BloomEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.Threshold">
            <summary>
            Gets or sets the minimum intensity that will be used for the bloom
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseIntensity">
            <summary>
            Gets or sets the base intensity
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BloomIntensity">
            <summary>
            Gets or sets the bloom intensity
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseSaturation">
            <summary>
            Gets or sets the base saturation
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BloomSaturation">
            <summary>
            Gets or sets the bloom saturation
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomIntensity">
            <summary>
            Gets or sets the Base/BloomIntensity variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.BloomEffect.BaseBloomSaturation">
            <summary>
            Gets or sets the BaseBloomSaturation variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect">
            <summary>
            Transition effect that reveals two visuals through a growing/shrinking circle. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.FeatherAmountProperty">
            <summary>
            Dependency property which modifies the Feather amount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseProperty">
            <summary>
            Dependency property which modifies the circle movement.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseShaderProperty">
            <summary>
            Dependency property which modifies the reverseShader variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the CircleRevealTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of CircleRevealTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.FeatherAmount">
            <summary>
            Gets or sets the FuzzyAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.Reverse">
            <summary>
            Gets or sets playing the circle reveal backward
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CircleRevealTransitionEffect.ReverseShader">
            <summary>
            Gets or sets playing the circle reveal backward into the shader
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect">
            <summary>
            Transition effect that transitions two visuals using a cloud 
            texture as the sampler threshold.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.CloudyTransitionEffect">
            <summary>
            Defines a transition shader effect that uses an image as a sampler threshold
            for interpolating pixel value between two visuals. 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect">
            <summary>
            Defines a transition shader effect that provides a random value
            allowing the effect to provide variance each time the effect is run.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.RandomSeedProperty">
            <summary>
            Dependency property which modifies the RandomSeed variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.#ctor">
            <summary>
            Updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RandomizedTransitionEffect.RandomSeed">
            <summary>
            Gets or sets the RandomSeed variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.CloudImageProperty">
            <summary>
            Dependency property which modifies the CloudImage variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.CloudyTransitionEffect.CloudImage">
            <summary>
            Gets or sets the CloudImage variable within the shader used for sampling. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.CloudRevealTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the CloudRevealTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of CloudRevealTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.ColorToneEffect">
            <summary>
            Effects that modifies the color tone of a visual using
            two colors as the sampling.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.DesaturationProperty">
            <summary>
            This property is mapped to the Desaturation variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.ToneAmountProperty">
            <summary>
            This property is mapped to the Toned variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.LightColorProperty">
            <summary>
            This property is mapped to the LightColor variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.ColorToneEffect.DarkColorProperty">
            <summary>
            This property is mapped to the DarkColor variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.ColorToneEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.Desaturation">
            <summary>
            Gets or sets the Desaturation variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.ToneAmount">
            <summary>
            Gets or sets the Toned variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.LightColor">
            <summary>
            Gets or sets the LightColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.DarkColor">
            <summary>
            Gets or sets the DarkColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.ColorToneEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.EmbossedEffect">
            <summary>
            Effect that simulates an embossed look to the visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.AmountProperty">
            <summary>
            This property is mapped to the Amount variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.HeightProperty">
            <summary>
            This property is mapped to the Height variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.EmbossedEffect.ColorProperty">
            <summary>
            This property is mapped to the Color variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.EmbossedEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Amount">
            <summary>
            Gets or sets the Amount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Height">
            <summary>
            Gets or sets the Height variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Color">
            <summary>
            Gets or sets the Color variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.EmbossedEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.FadeTransitionEffect">
            <summary>
            Transition effect that gradually transitions from one visual to another.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.FadeTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.FadeTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the FadeTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of FadeTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MagnifyEffect">
            <summary>
            Effect that simulates a magnifying lens.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.InnerRadiusProperty">
            <summary>
            Gets or sets the InnerRadius variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.OuterRadiusProperty">
            <summary>
            Gets or sets the OuterRadius variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.CenterProperty">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.AmountProperty">
            <summary>
            Gets or sets the amount variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.InputProperty">
            <summary>
            Gets or sets the input used in the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.generalTransform">
            <summary>
            The transform used for this shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.InnerRadius">
            <summary>
            Gets or sets the inner radius variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.OuterRadius">
            <summary>
            Gets or sets the outer radius variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Center">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Amount">
            <summary>
            Gets or sets the ShrinkFactor: 
            The higher the shrink factor the "smaller" the content inside the ellipse will appear. 
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.EffectMapping">
            <summary>
            Gets the EffectMapping.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform">
            <summary>
            The GeneralTransform corrosponding to the Magnify effect.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.biasValue">
            <summary>
            Attempt to transform a point based on the effect.
            </summary>
            <param name="targetPoint">The point to transform.</param>
            <param name="result">The result if available.</param>
            <returns>Return true if successful.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.effect">
            <summary>
            The effect instance.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.IsInverse">
            <summary>
            If the transform is an inverse.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.inverseTransform">
            <summary>
            The transform specific to this Effect.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.#ctor(Microsoft.Expression.Media.Effects.MagnifyEffect)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="fx">The source effect.</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.TransformBounds(System.Windows.Rect)">
            <summary>
            This particular effect keeps axis aligned lines axis aligned, so transformation of the rect is just
            transformation of its corner points.
            </summary>
            <param name="rect">The input rect.</param>
            <returns>The output rect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.OutToIn(System.Windows.Point,System.Double,System.Double,System.Windows.Point,System.Double)">
            <summary>
            For the inverse of the shader, we need to find Pin which is the Pixel Ouput, given Pout the texture input (is the reverse of the shader)
            However, the shader algorithm is dependant on the radius of the pixel output from the center, which is a variable that we don't
            have when computing the inverse. We need to perform bisection in order to converge using the equation below
            PHatout = PHat_in*Scalar where
            PHatout = Pout - Pcenter  
            pHatin = Pin -Pcenter
            
            Scalar is dependent on the radius of Pin (which we don't have). 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.InToOut(System.Windows.Point,System.Double,System.Double,System.Windows.Point,System.Double)">
            <summary>
            Given a pixel output (Pin) find the texture input (Pout)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.CreateInstanceCore">
            <summary>
            Creats a new instance.
            </summary>
            <returns>A new instance of this.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.PointIsInCircle(System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Determines if a point is within an ellipse.
            </summary>
            <param name="pt">The test point.</param>
            <param name="center">The center point of the ellipse.</param>
            <param name="radius">The radius of the ellipse.</param>
            <returns>True if successful.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MagnifyEffect.MagnifyGeneralTransform.Inverse">
            <summary>
            Gets the inverse transform.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.MonochromeEffect">
             <summary>
            Effect that turns a visual into a monochrom color
             </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MonochromeEffect.ColorProperty">
            <summary>
            Gets or sets the FilterColor variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.MonochromeEffect.InputProperty">
            <summary>
            Gets or sets the Input of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.MonochromeEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MonochromeEffect.Color">
            <summary>
            Gets or sets the FilterColor variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.MonochromeEffect.Input">
            <summary>
            Gets or sets the input used in the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.PixelateEffect">
            <summary>
            Effect that pixelates a visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.PixelateEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.PixelateEffect.PixelationProperty">
            <summary>
            This property is mapped to the pixelation amount variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.PixelateEffect.Pixelation">
            <summary>
            Gets or sets the amount of pixelation inside the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.PixelateEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.PixelateTransitionEffect">
            <summary>
            Transition effect that increase/decrease pixelation between two visuals.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.PixelateTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the PixelateTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of PixelateTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect">
            <summary>
            Transition effects that performs a radial blur of the current visual  as the new visual is introduced.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RadialBlurTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the RadialBlurTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of RadialBlurTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RippleEffect">
            <summary>
            Effect that simulates water ripples on the visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.CenterProperty">
            <summary>
            Gets or sets the Center variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.MagnitudeProperty">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.FrequencyProperty">
            <summary>
            Gets or sets the Frequency variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.PhaseProperty">
            <summary>
            Gets or sets the Phase variable within the shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.RippleEffect.InputProperty">
            <summary>
            Gets or sets the input brush used in the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Center">
            <summary>
            Gets or sets the center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Magnitude">
            <summary>
            Gets or sets the Amplitude variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Frequency">
            <summary>
            Gets or sets the frequency variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Phase">
            <summary>
            Gets or sets the Phase variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.RippleEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.RippleTransitionEffect">
            <summary>
            Transition effect that simulate water ripple during transition. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.RippleTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the RippleTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of RippleTransitionEffect effect.</returns>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SharpenEffect">
            <summary>
            Effects that makes a visual more crisp and sharper. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.AmountProperty">
            <summary>
            This property is mapped to the Amount variable within the pixel shader. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SharpenEffect.HeightProperty">
            <summary>
            This property is mapped to the Width variable within the pixel shader. 
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SharpenEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Amount">
            <summary>
            Gets or sets the Amount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Height">
            <summary>
            Gets or sets the Height variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SharpenEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SlideDirection">
            <summary>
            Define the slide orientation
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SlideInTransitionEffect">
            <summary>
            Transition effect that slide the current visual away, revealing the new visual. 
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideDirectionProperty">
            <summary>
            Dependency property which modifies the SlideAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideNormalProperty">
            <summary>
            Dependency property which modifies the SlideAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the SlideInTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of SlideInTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideDirection">
            <summary>
            Gets or sets the SlideAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SlideInTransitionEffect.SlideNormal">
            <summary>
            Gets or sets the SlideAmount variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect">
             <summary>
            Transition effect that swirl the current visual while introducing the new visual.
             </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.TwistAmountProperty">
            <summary>
            Dependency property which modifies the TwistAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.CellCountProperty">
            <summary>
            Dependency property which modifies the number of cell where pixels will be twisted.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.#ctor(System.Double)">
            <summary>
            Creates an instance and sets the shader's twist variable to the specified values.
            </summary>
            <param name="twist">level of swirl twist</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the SmoothSwirlGridTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of SmoothSwirlGridTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.TwistAmount">
            <summary>
            Gets or sets the TwistAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SmoothSwirlGridTransitionEffect.CellCount">
            <summary>
            Gets or sets the CellCount variable within the shader.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SwirlEffect">
            <summary>
            Effect that swirls the current visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.InputProperty">
            <summary>
            The explict input for this pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.CenterProperty">
            <summary>
            This property is mapped to the Center variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.TwistAmountProperty">
            <summary>
            This property is mapped to the SwirlStrength variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.AngleFrequencyProperty">
            <summary>
            This property is mapped to the AngleFrequency variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.generalTransform">
            <summary>
            The transform used when this Effect is applied.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.Center">
            <summary>
            Gets or sets the Center variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.TwistAmount">
            <summary>
            Gets or sets the SwirlStrength variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.AngleFrequency">
            <summary>
            Gets or sets the AngleFrequency variable within the shader.
            We do not expose this property. 
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.Input">
            <summary>
            Gets or sets the Input shader sampler.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.EffectMapping">
            <summary>
            Gets the GeneralTransform for this effect.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform">
            <summary>
            For transforming input and tree transformations.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.theEffect">
            <summary>
            The instance of the Effect.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.thisIsInverse">
            <summary>
            The inverse of the transform.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.inverseTransform">
            <summary>
            The inverse of this GeneralTransform.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.#ctor(Microsoft.Expression.Media.Effects.SwirlEffect)">
            <summary>
            Creates an instance of this class.
            </summary>
            <param name="eff">The effect itself.</param>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.TransformBounds(System.Windows.Rect)">
            <summary>
            For this operation, the bounds is the bounding box of the 4 transformed points. 
            Need to transform each of them, and then circumscribe.  This is true for both the 
            forward and the inverse.
            </summary>
            <param name="rect">The input rect.</param>
            <returns>The transformed rect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.TryTransform(System.Windows.Point,System.Windows.Point@)">
            <summary>
            Attempt to transform inPoint with the Swirl effect.
            </summary>
            <param name="targetPoint">The input point.</param>
            <param name="result">The output point after transformed using the Swirl effect.</param>
            <returns>True and throws if false.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.CreateInstanceCore">
            <summary>
            Returns a new instance of this.
            </summary>
            <returns>A new instance.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.SwirlEffect.SwirlGeneralTransform.Inverse">
            <summary>
            Gets a clone of the inverse of the current transform.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WaveTransitionEffect">
            <summary>
            Transition effect that waves the current visual while introducing the new visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.MagnitudeProperty">
            <summary>
            Dependency property which modifies the Magnitude variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.PhaseProperty">
            <summary>
            Dependency property which modifies the Phase variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WaveTransitionEffect.FrequencyProperty">
            <summary>
            Dependency property which modifies the Phase variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WaveTransitionEffect.#ctor">
            <summary>
            Creates an instance of the shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WaveTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the WaveTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of WaveTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Magnitude">
            <summary>
            Gets or sets the magnitude of the wave
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Phase">
            <summary>
            Gets or sets the phase of the wave
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WaveTransitionEffect.Frequency">
            <summary>
            Gets or sets the magnitude of the wave
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WipeDirection">
            <summary>
            Define the wipe direction.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.Effects.WipeTransitionEffect">
            <summary>
            Transition effect that wipes the current visual introducing the new visual.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.WipeDirectionProperty">
            <summary>
            Dependency property which modifies the preset of the wipe
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.FeatherAmountProperty">
            <summary>
            Dependency property which modifies the FuzzyAmount variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOriginProperty">
            <summary>
            Dependency property which modifies the LineOrigin variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineNormalProperty">
            <summary>
            Dependency property which modifies the LineNormal variable within the pixel shader.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOffsetProperty">
            <summary>
            Dependency property which modifies the LineOffset variable within the pixel shader.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WipeTransitionEffect.#ctor">
            <summary>
            Creates an instance and updates the shader's variables to the default values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.Effects.WipeTransitionEffect.DeepCopy">
            <summary>
            Makes a deep copy of the WipeTransitionEffect effect. 
            </summary>
            <returns>A clone of current instance of WipeTransitionEffect effect.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.WipeDirection">
            <summary>
            Gets or sets the direction of the wipe.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.FeatherAmount">
            <summary>
            Gets or sets the FuzzyAmount variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOrigin">
            <summary>
            Gets or sets the LineOrigin variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineNormal">
            <summary>
            Gets or sets the LineNormal variable within the shader.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.Effects.WipeTransitionEffect.LineOffset">
            <summary>
            Gets or sets the LineOffset variable within the shader.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\ko\Microsoft.Expression.Interactions.xml ===
﻿<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Interactions</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Interactivity.Core.ActionCommand">
            <summary>
            매개 변수를 갖지 않는 메서드 또는 한 개의 매개 변수를 갖는 메서드를 줄 바꿈하는 ICommand의 기본 구현입니다.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action)">
            <summary>
            <see cref="T:Microsoft.Expression.Interactivity.Core.ActionCommand"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
            <param name="action">작업.</param>
            <remarks>이 생성자를 사용하여 ICommand 매개 변수를 무시하는 작업을 제공합니다.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.#ctor(System.Action{System.Object})">
            <summary>
            <see cref="T:Microsoft.Expression.Interactivity.Core.ActionCommand"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
            <param name="objectAction">개체 매개 변수를 갖는 작업.</param>
            <remarks>이 생성자를 사용하여 Execute 메서드를 통해 전달된 개체 매개 변수를 사용하는 작업을 제공합니다.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecute(System.Object)">
            <summary>
            명령을 현재 상태에서 실행할 수 있는지 여부를 결정하는 메서드를 정의합니다.
            </summary>
            <param name="parameter">명령에 사용된 데이터.  명령에서 데이터를 전달할 필요가 없으면 이 개체를 Null로 설정할 수 있습니다.</param>
            <returns>
            항상 true를 반환합니다.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ActionCommand.Execute(System.Object)">
            <summary>
            명령이 호출될 때 호출될 메서드를 정의합니다.
            </summary>
            <param name="parameter">명령에 사용된 데이터.  명령에서 데이터를 전달할 필요가 없으면 이 개체를 Null로 설정할 수 있습니다.</param>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Core.ActionCommand.System#Windows#Input#ICommand#CanExecuteChanged">
            <summary>
            명령 실행 여부에 영향을 미치는 변경 내용이 있는 경우에 발생합니다. ActionCommand로 발생되지 않습니다.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ChangePropertyAction">
            <summary>
            호출 시 지정된 속성을 지정된 값으로 변경하는 작업입니다.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.#ctor">
            <summary>
            <see cref="T:Microsoft.Expression.Interactivity.Core.ChangePropertyAction"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Invoke(System.Object)">
            <summary>
            작업을 호출합니다.
            </summary>
            <param name="parameter">작업에 대한 매개 변수. Action에 매개 변수가 필요하지 않은 경우 매개 변수를 Null 참조로 설정할 수 있습니다.</param>
            <exception cref="T:System.ArgumentException"><c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName"/>가 있는 속성을 대상에서 찾을 수 없습니다.</exception>
            <exception cref="T:System.ArgumentException"><c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName"/>를 <c cref="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Value"/>에 의해 지정된 값으로 설정할 수 없습니다.</exception>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.PropertyName">
            <summary>
            변경할 속성의 이름을 가져오거나 설정합니다. 이것은 종속성 속성입니다.
            </summary>
            <value>변경할 속성의 이름입니다.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Value">
            <summary>
            설정할 값을 가져오거나 설정합니다. 이것은 종속성 속성입니다.
            </summary>
            <value>설정할 값.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.ChangePropertyAction.Duration">
            <summary>
            ChangePropertyAction을 호출할 때 발생할 애니메이션 지속 시간을 가져오거나 설정합니다.  이것은 종속성 속성입니다. 지속 시간을 설정하지 않으면 애니메이션이 적용되지 않습니다.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager">
            <summary>
            ExtendedVisualStateManager는 레이아웃 속성의 애니메이션을 부드럽게 할 수 있는 사용자 지정 VisualStateManager입니다. 이 사용자 지정 VisualStateManager로 상태는 Grid.Column과 같은 속성의 변경 내용을 포함하고 요소 높이를 자동 등으로 변경할 수 있습니다. 이러한 변경 내용은 해당 전환의 GeneratedDuration과 GeneratedEasingFunction을 사용하여 시간이 경과되면서 부드럽게 됩니다. 알고리즘에 대한 일반적인 설명은 아래 &quot;VisualStateManager 다시 정의&quot; 영역을 참조하십시오.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.UseFluidLayoutProperty">
            <summary>
            VisualStateGroup은 유체 레이아웃을 사용하거나 사용하지 않을 수 있습니다.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValuesProperty">
            <summary>
            VisualStateGroup은 연결된 속성에 이러한 원래 값의 목록을 보존합니다.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutStoryboardProperty">
            <summary>
            모든 상태의 경우 레이아웃 특정 속성이 추출된 다음 해당 상태에 연결됩니다. 이러한 속성은 상태 자체에서는 제거됩니다.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CurrentStateProperty">
            <summary>
            현재 상태를 기억하십시오.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.MovingElements">
            <summary>
            이는 현재 동작 중인 요소의 집합입니다.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutTransitionStoryboard">
            <summary>
            이는 전환에 애니메이션 효과를 주는 스토리보드입니다.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.LayoutProperties">
            <summary>
            이 목록은 레이아웃 속성을 모두 포함합니다.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.StopAnimations">
            <summary>
            애니메이션을 중지하고 해당 애니메이션을 지원하기 위한 레이아웃 변경 내용을 바꿉니다.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.FindTransition(System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState)">
            <summary>
            VisualStateManager가 변경 내용에 애니메이션 효과를 주는 데 사용할 전환을 찾아 레이아웃 애니메이션을 지속 시간 및 감속/가속 설정과 일치시킬 수 있습니다.
            </summary>
            <param name="group">전환이 발생하는 그룹</param>
            <param name="previousState">현재 상태</param>
            <param name="state">이동할 상태</param>
            <returns>전환</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.ExtractLayoutStoryboard(System.Windows.VisualState)">
            <summary>
            스토리보드에서 해당 상태의 모든 레이아웃 관련 속성을 제거하고 이 속성을 연결된 속성에 캐시합니다.
            </summary>
            <param name="state">이동할 상태</param>
            <returns>해당 상태의 레이아웃 속성을 포함하는 스토리보드</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.FindTargetElements(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            대상 요소의 집합은 레이아웃 전환에서 이동했을 수 있는 모든 요소의 집합입니다. 이 집합은 다음에 대한 종결입니다. - 해당 상태에서 애니메이션 효과를 준 레이아웃 속성을 포함한 요소. - 집합의 요소 형제. - 집합의 요소 부모.
             
            후속 코드는 레이아웃 변경 전과 후에 해당 사각형을 확인합니다.
            </summary>
            <param name="control">레이아웃의 상태를 변경하는 컨트롤</param>
            <param name="layoutStoryboard">레이아웃 변경 내용을 포함하는 스토리보드</param>
            <param name="originalValueRecords">되돌릴 수 있는 이전 상태 탐색의 모든 이전 값</param>
            <param name="movingElements">진행 중인 상태 변경 전환이 있는 경우 현재 동작 중인 요소의 집합</param>
            <returns>레이아웃을 변경했을 수 있는 요소의 전체 집합</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetRectsOfTargets(System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            대상 목록의 모든 요소에 대한 사각형의 집합을 가져옵니다.
            </summary>
            <param name="targets">고려할 요소의 집합</param>
            <param name="movingElements">현재 동작 중인 요소의 집합</param>
            <returns>요소를 해당 사각형에 매핑하는 사전</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetLayoutRect(System.Windows.FrameworkElement)">
            <summary>
            레이아웃 슬롯을 가져온 다음 사용 중인 슬롯 부분을 계산하여 요소의 레이아웃 사각형을 가져옵니다.
            </summary>
            <param name="element">가져오려는 사각형의 요소</param>
            <returns>해당 요소의 레이아웃 사각형</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.GetOldOpacities(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord},System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            상태 변경이 진행 중일 수 있고 현재 값이 가장 중요하기 때문에, 상태 변경 시 표시 유형 대신 요소의 불투명도를 가져옵니다.
            </summary>
            <param name="control">상태가 변경 중인 컨트롤</param>
            <param name="layoutStoryboard">레이아웃 속성이 있는 스토리보드</param>
            <param name="originalValueRecords">원래 값의 집합</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.SetLayoutStoryboardProperties(System.Windows.Controls.Control,System.Windows.FrameworkElement,System.Windows.Media.Animation.Storyboard,System.Collections.Generic.List{Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord})">
            <summary>
            레이아웃 스토리보드를 끝까지 진행하며, 타임라인을 표시하지 않고 렌더링을 실행하는 UpdateLayout을 호출할 수 있도록 SetValue를 사용하여 모든 속성을 설정합니다. 덮어쓰여진 모든 값은 OriginalValueRecords 컬렉션에 저장되므로 나중에 바꿀 수 있습니다.
            </summary>
            <param name="control">상태가 변경 중인 컨트롤</param>
            <param name="layoutStoryboard">레이아웃 속성을 보유하는 스토리보드</param>
            <param name="originalValueRecords">원래 값의 저장소</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.WrapMovingElementsInCanvases(System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Windows.Rect},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Windows.Rect})">
            <summary>
            레이아웃 애니메이션의 결과로 이동할 모든 요소를 가져와 형제 요소에 영향을 주지 않도록 캔버스에서 줄 바꿉니다.
            </summary>
            <param name="movingElements">이동될 요소의 집합</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.UnwrapMovingElementsFromCanvases(System.Collections.Generic.List{System.Windows.FrameworkElement})">
            <summary>
            레이아웃 애니메이션의 결과로 이동 중이었던 모든 요소를 가져와 캔버스에서 줄 바꿈하지 않습니다.
            </summary>
            <param name="movingElements">이동 중이었던 요소의 집합</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CopyLayoutProperties(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            원본 요소에서 대상 요소로 레이아웃 속성을 복사하고, 원본에서 지웁니다.
            </summary>
            <param name="source">레이아웃 속성의 원본</param>
            <param name="target">레이아웃 속성의 대상</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.CreateLayoutTransitionStoryboard(System.Windows.VisualTransition,System.Collections.Generic.List{System.Windows.FrameworkElement},System.Collections.Generic.Dictionary{System.Windows.FrameworkElement,System.Double})">
            <summary>
            전환에 애니메이션 효과를 주는 데 사용될 실제 스토리보드를 만듭니다. 이전에 계산된 모든 결과를 사용합니다.
            </summary>
            <param name="duration">애니메이션 지속 시간</param>
            <param name="ease">애니메이션에 사용될 감속/가속 기능</param>
            <param name="movingElements">이동될 요소의 집합</param>
            <param name="oldOpacities">변경하는 표시 유형 요소의 이전 불투명도</param>
            <returns>스토리보드</returns>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.ExtendedVisualStateManager.OriginalLayoutValueRecord">
            <summary>
            OriginalValueRecord는 상태에서 변경된 속성의 원래 값을 기억합니다.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.FluidMoveScope">
            <summary>
            열거된 이 형식은 FluidMoveBehavior가 연결된 요소 또는 해당 요소의 자식에 적용될지 여부를 나타냅니다. &quot;Self&quot;는 특수한 방식으로 작동해야 하는 단일 요소가 있을 때 유용하고, &quot;Children&quot;은 동일한 동작을 WrapPanel의 모든 자식 또는 ItemsControl의 ItemsHost 패널에 적용해야 할 때 유용합니다.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior">
            <summary>
            요소(또는 요소의 집합)의 레이아웃 변경 내용을 확인하고 필요한 경우 요소를 새 위치로 부드럽게 이동하는 동작입니다. 이 동작은 요소의 크기나 표시 유형에 애니메이션 효과를 주지 않고 부모 컨테이너 내에서 해당 요소의 오프셋에만 애니메이션 효과를 줍니다.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.DurationProperty">
            <summary>
            이동 지속 시간에 대한 DependencyProperty.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.AppliesToProperty">
            <summary>
            동작 범위에 대한 DependencyProperty입니다. 자세한 내용은 FluidMoveScope를 참조하십시오.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.IsActiveProperty">
            <summary>
            동작의 활성 상태에 대한 DependencyProperty입니다.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.Duration">
            <summary>
            이동 지속 시간입니다.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.AppliesTo">
            <summary>
            동작이 이 요소에만 또는 요소의 모든 자식에(요소가 패널인 경우) 적용되는지 여부를 나타냅니다.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.FluidMoveBehavior.IsActive">
            <summary>
            동작이 현재 활성 상태인지 여부를 나타냅니다.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.GoToStateAction">
            <summary>
            호출 시 FrameworkElement를 지정된 VisualState로 전환할 작업입니다.
            </summary>
            <remarks>
            TargetName 속성을 설정하면 이 작업은 대상 요소의 상태를 변경하려고 합니다. 그렇지 않으면 요소 트리를 살펴보고 상태를 정의하는 다른 대상을 찾습니다. ControlTemplate과 UserControl이 두 가지 일반적인 가능성이 있습니다.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.GoToStateAction.OnTargetChanged(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            대상이 변경될 때 호출됩니다. TargetName 속성을 설정하지 않으면 이 작업은 사용자 지정 동작을 갖습니다.
            </summary>
            <param name="oldTarget"></param>
            <param name="newTarget"></param>
            <exception cref="T:System.InvalidOperationException">상태를 통해 적절한 FrameworkElement를 찾을 수 없습니다.</exception>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.GoToStateAction.Invoke(System.Object)">
            <summary>
            일부 기준이 충족되고 작업이 호출될 때 이 메서드가 호출됩니다.
            </summary>
            <param name="parameter"></param>
            <exception cref="T:System.InvalidOperationException">대상을 지정된 StateName으로 변경할 수 없습니다.</exception>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.GoToStateAction.UseTransitions">
            <summary>
            상태 간 전환에 VisualTransition을 사용할지 여부를 나타냅니다.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.GoToStateAction.StateName">
            <summary>
            VisualState의 이름입니다.  
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Input.KeyTrigger">
            <summary>
            키보드 이벤트로 트리거되는 Trigger입니다.  대상 키 및 수정자가 검색될 때 발생됩니다.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.Key">
            <summary>
            Trigger를 발생시키기 위해 눌러야 하는 키입니다.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.Modifiers">
            <summary>
            Trigger를 발생시키기 위해 활성 상태여야 하는 수정자입니다(기본값은 수정자를 누르지 않는 것임).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.ActiveOnFocus">
            <summary>
            true인 경우 Trigger는 트리거 Source 개체만 수신 대기합니다. 즉, 요소가 트리거 발생에 중점을 두어야 한다는 의미합니다. false이면 Trigger는 루트에서 수신 대기하므로 처리되지 않은 모든 KeyDown/Up 메시지가 포착됩니다.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Input.KeyTrigger.FiredOn">
            <summary>
            KeyDown 또는 KeyUp 이벤트 수신 대기 여부를 나타냅니다.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction">
            <summary>
            파일 또는 URI를 여는 프로세스를 시작할 작업. 파일의 경우 이 작업은 지정된 파일 확장자의 기본 프로그램을 실행합니다. URI는 웹 브라우저에서 열립니다.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction.Invoke(System.Object)">
            <summary>
            일부 기준이 충족되고 작업이 호출될 때 이 메서드가 호출됩니다.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.LaunchUriOrFileAction.Path">
            <summary>
            열 파일 또는 URI입니다. 
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior">
            <summary>
            요소에서의 마우스 끌기 제스처에 대한 응답으로 연결된 요소의 위치를 변경합니다.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.XProperty">
            <summary>
            루트 요소의 왼쪽을 기준으로 끌린 요소의 X 위치에 대한 DependencyProperty입니다.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.YProperty">
            <summary>
            루트 요소의 위쪽을 기준으로 끌린 요소의 Y 위치에 대한 DependencyProperty입니다.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ConstrainToParentBoundsProperty">
            <summary>
            ConstrainToParentBounds 속성에 대한 DependencyProperty입니다. true이면 끌린 요소는 부모 컨테이너의 경계 이내로 제한됩니다.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.UpdatePosition(System.Windows.Point)">
            <summary>
            연결된 요소의 위치를 지정된 좌표로 업데이트하려는 시도입니다.
            </summary>
            <param name="point">루트 좌표에서 요소의 원하는 위치입니다.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ApplyTranslation(System.Double,System.Double)">
            <summary>
            상대적 위치 좌표 이동을 연결된 요소에 적용합니다.
            </summary>
            <param name="x">루트 좌표에서 원하는 좌표 이동의 X 구성 요소입니다.</param>
            <param name="y">루트 좌표에서 원하는 좌표 이동의 Y 구성 요소입니다.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ApplyTranslationTransform(System.Double,System.Double)">
            <summary>
            지정된 좌표 이동을 연결된 요소의 RenderTransform에 적용합니다.
            </summary>
            <param name="x">부모 좌표에서 좌표 이동의 X 구성 요소입니다.</param>
            <param name="y">부모 좌표에서 좌표 이동의 Y 구성 요소입니다.</param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.UpdatePosition">
            <summary>
            연결된 요소의 현재 렌더링 위치에 따라 X 및 Y 속성을 업데이트합니다.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.IsValidConstrainedMove(System.Windows.Point)">
            <summary>
            지정된 커서 위치를 끌기 작업의 일부분으로 계산할지 여부를 결정합니다.
            </summary>
            <param name="currentPosition">커서 위치입니다.</param>
            <returns>
            	제공된 위치가 끌기 작업의 일부분으로 계산되어야 하는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.RectContainsRect(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            한 사각형이 다른 사각형에 포함되는지 확인합니다.
            </summary>
            <param name="rect1">포함하는 사각형입니다.</param>
            <param name="rect2">포함되는 사각형입니다.</param>
            <returns> rect1이 rect2를 포함하는 경우 <c>true</c>, 그렇지 않으면 <c>false</c>입니다. </returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.TransformAsVector(System.Windows.Media.GeneralTransform,System.Double,System.Double)">
            <summary>
            벡터로 변형합니다.
            </summary>
            <param name="transform">변형입니다.</param>
            <param name="x">벡터의 X 구성 요소입니다.</param>
            <param name="y">벡터의 Y 구성 요소입니다.</param>
            <returns>벡터로 변형을 통해 변형된 X 및 Y 값을 포함하는 점입니다.</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.GetTransformOffset(System.Windows.Media.GeneralTransform)">
            <summary>
            변형 오프셋을 가져옵니다.
            </summary>
            <param name="transform">변형입니다.</param>
            <returns>변형 오프셋.</returns>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.OnAttached">
            <summary>
            동작이 AssociatedObject에 연결된 후 호출됩니다.
            </summary>
            <remarks>이 동작을 다시 정의하여 기능을 AssociatedObject에 연결합니다.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.OnDetaching">
            <summary>
            AssociatedObject에서 동작이 분리될 때 호출되나 실제로 동작이 발생하기 전에 호출됩니다.
            </summary>
            <remarks>이 동작을 다시 정의하여 AssociatedObject에서 기능을 분리합니다.</remarks>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.DragBegun">
            <summary>
            끌기 제스처가 시작될 때 발생합니다.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.Dragging">
            <summary>
            끌기 제스처 업데이트가 처리될 때 발생합니다.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.DragFinished">
            <summary>
            끌기 제스처가 완료될 때 발생합니다.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.X">
            <summary>
            루트 요소의 왼쪽을 기준으로 끌린 요소의 X 위치를 가져오거나 설정합니다. 이것은 종속성 속성입니다.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.Y">
            <summary>
            루트 요소의 위쪽을 기준으로 끌린 요소의 Y 위치를 가져오거나 설정합니다. 이것은 종속성 속성입니다.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ConstrainToParentBounds">
            <summary>
            끌린 요소가 부모 컨테이너의 경계 이내로 제한되는지 여부를 나타내는 값을 가져오거나 설정합니다. 이것은 종속성 속성입니다.
            </summary>
            <value>
            	끌린 요소를 부모 경계로 제한해야 하면 <c>true</c>이고, 그렇지 않으면 <c>false</c>입니다.
            </value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ActualPosition">
            <summary>
            루트 좌표에서 연결된 요소의 화면 위치를 가져옵니다.
            </summary>
            <value>루트 좌표에서 연결된 요소의 화면 위치.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ElementBounds">
            <summary>
            요소 좌표의 요소 경계를 가져옵니다.
            </summary>
            <value>요소 좌표의 요소 경계.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.ParentElement">
            <summary>
            연결된 개체의 부모 요소를 가져옵니다.
            </summary>
            <value>연결된 개체의 부모 요소.</value>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Layout.MouseDragElementBehavior.RootElement">
            <summary>
            연결된 개체가 있는 장면의 루트 요소를 가져옵니다.
            </summary>
            <value>연결된 개체가 있는 장면의 루트 요소.</value>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.PlaySoundAction">
            <summary>
            완료 시 소리를 재생할 Action입니다.
            </summary>
            <remarks>
            이 Action은 중지하거나 제어할 필요가 없는 짧은 소리 효과와 함께 사용하기 위한 것입니다. 음악 플레이어 또는 게임을 만들려는 경우 요구 사항을 충족하지 못할 수 있습니다.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.#ctor">
            <summary>
            <see cref="T:Microsoft.Expression.Interactivity.Media.PlaySoundAction"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.SetMediaElementProperties(System.Windows.Controls.MediaElement)">
            <summary>
            Action이 호출될 때 이 메서드는 동적으로 만들어진 MediaElement를 사용자 지정하는 데 사용합니다.
            </summary>
            <remarks>
            이 메서드는 PlaySoundAction을 확장하려는 Action 작성자에게 유용할 수 있습니다. MediaElement Balance 속성을 제어하려는 경우 PlaySoundAction에서 상속하고 이 메서드를 다시 정의할 수 있습니다.
            </remarks>
            <param name="mediaElement"></param>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Invoke(System.Object)">
            <summary>
            일부 기준이 충족되고 작업이 호출되어야 할 때 이 메서드가 호출됩니다. 
            </summary>
            <remarks>
            Action을 호출할 때마다 소리가 새로 재생됩니다.  구현이 변경될 수 있더라도, 호출자는 이 호출로 새 MediaElement가 만들어질 것으로 예상해야 합니다. 소리가 끝나거나 미디어가 재생되지 않으면 이 요소는 삭제됩니다.
            </remarks>
            <param name="parameter"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Source">
            <summary>
            소리 파일의 위치를 정의하는 URI입니다.  이것은 MediaElement의 원본 속성을 설정하는 데 사용됩니다. 이것은 종속성 속성입니다.
            </summary>
            <remarks>
            소리는 MediaElement에서 지원하는 모든 파일 형식이 될 수 있습니다.  비디오의 경우에는 오디오 부분만 재생합니다.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.PlaySoundAction.Volume">
            <summary>
            소리 볼륨을 제어합니다.  이것은 MediaElement의 Volume 속성을 설정하는 데 사용됩니다.  이것은 종속성 속성입니다.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.RemoveElementAction">
            <summary>
            호출 시 트리에서 대상 요소를 제거하는 Action입니다.
            </summary>
            <remarks>
            이 Action은 실패할 수 있습니다. Action으로 공통 부모에서 요소를 제거하는 방법을 이해하지만 사용자 지정 컬렉션에서 또는 시각적 트리의 직접 조작으로 요소를 제거하는 방법은 아닙니다.
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardAction">
            <summary>
            스토리보드를 대상으로 지정하는 기능을 제공하는 추상 클래스입니다.
            </summary>
            <remarks>
            Action 작성자에게 이 클래스는 스토리보드를 대상으로 지정하는 표준 방법을 제공합니다.  디자인 도구가 이 Action에서 상속할 클래스에 대한 특별한 편집 경험을 제공하도록 선택할 수 있므로 설계자 경험을 향상시킬 수 있습니다. 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardAction.OnStoryboardChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            스토리보드 속성이 변경될 때 이 메서드가 호출됩니다.
            </summary>
            <param name="args"></param>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.StoryboardAction.Storyboard">
            <summary>
            대상 스토리보드입니다.  이것은 종속성 속성입니다.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.ControlStoryboardAction">
            <summary>
            호출 시 대상 스토리보드의 상태를 변경할 작업.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.ControlStoryboardAction.Invoke(System.Object)">
            <summary>
            일부 기준이 충족되고 작업이 호출되어야 할 때 이 메서드가 호출됩니다. 이 메서드는 ControlStoryboardOption으로 정의된 방법으로 대상 스토리보드를 변경하려고 합니다.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardTrigger">
            <summary>
            스토리보드를 대상으로 지정하는 기능을 제공하는 추상 클래스입니다.
            </summary>
            <remarks>
            Trigger 작성자에게 이 클래스는 스토리보드를 대상으로 지정하는 표준 방법을 제공합니다.  디자인 도구가 이 Trigger에서 상속할 클래스에 대한 특별한 편집 경험을 제공하도록 선택할 수 있므로 디자이너 경험을 향상시킬 수 있습니다. 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardTrigger.OnStoryboardChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            스토리보드 속성이 변경될 때 이 메서드가 호출됩니다.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Media.StoryboardTrigger.Storyboard">
            <summary>
            대상 스토리보드입니다.  이것은 종속성 속성입니다.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger">
            <summary>
            스토리보드를 완료하기 위해 수신 대기하는 트리거.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger.#ctor">
            <summary>
            <see cref="T:Microsoft.Expression.Interactivity.Media.StoryboardCompletedTrigger"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Interactivity.Core.TimerTrigger">
            <summary>
            원본에서 발생하는 지정된 이벤트로 트리거되고 해당 이벤트 발생 시 잠시 후 발생되는 Trigger입니다.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Interactivity.Core.TimerTrigger.#ctor">
            <summary>
            <see cref="T:Microsoft.Expression.Interactivity.Core.TimerTrigger"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.TimerTrigger.MillisecondsPerTick">
            <summary>
            눈금 간 대기 시간(밀리초)을 가져오거나 설정합니다. 이것은 종속성 속성입니다.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Interactivity.Core.TimerTrigger.TotalTicks">
            <summary>
            Trigger가 완료되기 전에 발생될 총 눈금 수를 가져오거나 설정합니다.  이것은 종속성 속성입니다.
            </summary>
        </member>
        <member name="T:ExceptionStringTable">
            <summary>
              지역화된 문자열 등을 검색하기 위한 강력한 형식의 리소스 클래스입니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ResourceManager">
            <summary>
              이 클래스에 사용된 캐시된 ResourceManager 인스턴스를 반환합니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.Culture">
            <summary>
              이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스를 검색할 경우 현재 스레드의 CurrentUICulture 속성을 다시 정의합니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotFindPropertyNameExceptionMessage">
            <summary>
              [&quot;{1}&quot; 형식에서 &quot;{0}&quot; 속성을 찾을 수 없습니다.]와 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionCannotSetValueExceptionMessage">
            <summary>
              [&quot;{0}&quot; 형식의 값을 &quot;{2}&quot; 형식의 &quot;{1}&quot; 속성에 할당할 수 없습니다. &quot;{1}&quot; 속성에는 &quot;{2}&quot; 형식의 값만 할당할 수 있습니다.]와 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ChangePropertyActionPropertyIsReadOnlyExceptionMessage">
            <summary>
              [&quot;{1}&quot; 형식에 의해 정의된 &quot;{0}&quot; 속성이 Set 메서드를 노출하지 않으므로 해당 속성을 수정할 수 없습니다.]와 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.GoToStateActionStateChangeFailed">
            <summary>
              [대상 {0}의 상태를 {1}(으)로 변경할 수 없습니다.]와 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.GoToStateActionTargetHasNoStateGroups">
            <summary>
              [대상 {0}이(가) VisualStateGroups를 정의하지 않았습니다.]와 유사한 지역화된 문자열을 찾습니다. .
            </summary>
        </member>
        <member name="P:ExceptionStringTable.UnsupportedRemoveTargetExceptionMessage">
            <summary>
              [RemoveElementAction의 대상이 지원되지 않습니다.]와 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\zh-Hans\Microsoft.Expression.Controls.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Controls</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.Initialize">
            <summary>
            Called before we loop over the polylines.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.ShouldBreak(System.Int32)">
            <summary>
            Checks whether or not we should continue looping over the polylines.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnPolylineBegin(Microsoft.Expression.Drawing.Core.PolylineData)">
            <summary>
            Called before we begin marching a new polyline.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnPolylineCompleted(System.Double)">
            <summary>
            Called when we walk off the end of a polyline.
            </summary>
            <param name="remaingLength">The remaining arclength in the polyline.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnStepCompleted(System.Double)">
            <summary>
            Called when we sucessfully complete a step.
            </summary>
            <param name="actualStepDistance">The actual step distance.
            This may be different than Step if we have wrapped to another polyline.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.Distribute(Microsoft.Expression.Controls.PathPanel,System.Int32,System.Int32)">
            <summary>
            Distributes the children of a path panel along a given layout path.
            </summary>
            <param name="pathPanel">The path panel.</param>
            <param name="pathIndex">The index of the path in pathPanel.LayoutPaths.</param>
            <param name="childIndex">The index of the first child to be laid out on this path.</param>
            <returns>The index of the next child to be distributed. If childIndex is returned, this function has done nothing.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.ChildIndex">
            <summary>
            The index of the next child to be arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Span">
            <summary>
            The distance in arclength that we want to use for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Step">
            <summary>
            The distance in arclength to walk along the current polyline.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Capacity">
            <summary>
            The total number of elements to be arranged on the LayoutPath.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.EvenDistributionStrategy">
            <summary>
            Distributes the children of a path panel along a layout path.
            Even distribution means that there is equal arclength between the centers of all
            the elements on the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.ChangedPathLayoutProperties">
            <summary>
            Specifies which path layout properties have changed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs.#ctor(Microsoft.Expression.Controls.ChangedPathLayoutProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs"/> class.
            </summary>
            <param name="changedProperties">The data for the event.</param>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs.ChangedProperties">
            <summary>
            Gets the properties changed in a <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathLayoutData">
            <summary>
            Encapsulates the data needed to update a <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LayoutPathIndex">
            <summary>
            Gets or sets the index of the path on which an element is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.GlobalIndex">
            <summary>
            Gets or sets the index of an element in a collection of elements.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LocalIndex">
            <summary>
            Gets or sets the index of an element on a path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.GlobalOffset">
            <summary>
            Gets or sets the offset of an element proportional to the total length of a collection of paths.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LocalOffset">
            <summary>
            Gets or sets the offset of an element proportional to the length of path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.NormalAngle">
            <summary>
            Gets or sets the angle perpendicular to the path at an element's location.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.OrientationAngle">
            <summary>
            Gets or sets the angle perpendicular to the path at an element's location if the element is oriented to the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.IPathLayoutItem">
            <summary>
            Represents an element that is arranged by a <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </summary>
            <remarks>
            Implementing this interface enables <see cref="T:Microsoft.Expression.Controls.PathPanel"/> to set these properties when the element is arranged.
            This interface is not intended for general implementation.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.IPathLayoutItem.Update(Microsoft.Expression.Controls.PathLayoutData)">
            <summary>
            Updates the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/> properties based on the given <see cref="T:Microsoft.Expression.Controls.PathLayoutData"/> and raises the <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
            <param name="data">The data needed to update the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/>.</param>
        </member>
        <member name="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated">
            <summary>
            Occurs when one or more of the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/> properties change.
            </summary>
            <remarks>
            This event is raised whenever the item’s position along the path is updated. This can occur due to changes in the properties on the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> or changes to <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LayoutPathIndex">
            <summary>
            Gets the index of the path on which the item is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalIndex">
            <summary>
            Gets the index of the item in a collection of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalIndex">
            <summary>
            Gets the index of the item on the path on which it is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalOffset">
            <summary>
            Gets the offset of the item proportional to the total length of a collection of paths.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalOffset">
            <summary>
            Gets the offset of the item proportional to the length of the path on which it is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.NormalAngle">
            <summary>
            Gets the angle perpendicular to the path at the item's location.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.OrientationAngle">
            <summary>
            Gets the angle perpendicular to the path at the items's location if the item is oriented to the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.Distribution">
            <summary>
            Specifies the distribution of a <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.Orientation">
            <summary>
            Specifies the orientation of elements on a <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.FillBehavior">
            <summary>
            Specifies the method for altering the <see cref="P:Microsoft.Expression.Controls.LayoutPath.Span"/> on an open path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.LayoutPath">
            <summary>
            Describes a path along which elements are arranged.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Controls.LayoutPath.transformedPolylines">
            <summary>
            Ideally, we want to cache the Bezier curves before flattening, because transform will affect flattening.
            That requires us to cache curves that we don't support very well yet.  Instead, we cache the flatten points
            in distribution strategy and transform them on demand.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.SourceElement">
            <summary>
            Gets or sets the element that defines the path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Distribution">
            <summary>
            Gets or sets whether items are laid out evenly or with a fixed padding.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Capacity">
            <summary>
            Gets or sets the maximum number of items displayed on the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Padding">
            <summary>
            Gets or sets the distance in pixels along the arc length of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> between two items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Orientation">
            <summary>
            Gets or sets the orientation of the items.
            </summary>
            <remarks>
            This property is supported on <see cref="T:Microsoft.Expression.Controls.PathListBox"/>, but not <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Start">
            <summary>
            Gets or sets the distance from the start of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> to place the first item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Span">
            <summary>
            Gets or sets the percentage of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> that participates in layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.FillBehavior">
            <summary>
            Gets or set the method to alter <see cref="P:Microsoft.Expression.Controls.LayoutPath.Span"/> on an open path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.ActualCapacity">
            <summary>
            Gets the computed Capacity.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.IsValid">
            <summary>
            Gets whether or not the <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/> is valid in the context.
            A <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/> is invalid if it is a descendant of the <see cref="T:Microsoft.Expression.Controls.PathPanel"/> in which it used.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PaddedDistributionStrategy">
            <summary>
            Distributes the children of a layout path based on the size of the children and a given padding between the children.
            The distance in arclength between children is determined by the padding plus the sum of the radii of the children's bounding boxes.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathListBox">
            <summary>
            Contains a list of items that are laid out along one or more paths.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathListBox"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.GetContainerForItemOverride">
            <summary>
            Creates the element used to display a specified item.
            </summary>
            <returns>A <see cref="T:Microsoft.Expression.Controls.PathListBoxItem"/> corresponding to a specified item.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own item container.
            </summary>
            <returns>true if the item is its own item container; otherwise, false.</returns>
            <param name="item">The specified item.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements.
            </summary>
            <param name="finalSize">The size that this object should use to arrange its child elements.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.LayoutPaths">
            <summary>
            Gets or sets a collection of objects that define the path(s) used for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.StartItemIndex">
            <summary>
            Gets or sets the index to use within the list of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.WrapItems">
            <summary>
            Gets or sets whether the item index wraps to the beginning of the collection when StartItemIndex is greater than 0.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathListBoxItem">
            <summary>
            Represents an item in a <see cref="T:Microsoft.Expression.Controls.PathListBox"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBoxItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathListBoxItem"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBoxItem.Update(Microsoft.Expression.Controls.PathLayoutData)">
            <summary>
            For a description of this member, see <see cref="M:Microsoft.Expression.Controls.IPathLayoutItem.Update(Microsoft.Expression.Controls.PathLayoutData)"/>.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.PathListBoxItem.PathLayoutUpdated">
            <summary>
            For a description of this member, see <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LayoutPathIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LayoutPathIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.GlobalIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LocalIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.GlobalOffset">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalOffset"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LocalOffset">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalOffset"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.NormalAngle">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.NormalAngle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.OrientationAngle">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.OrientationAngle"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathPanel">
            <summary>
            Arranges child elements along one or more path.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Expression.Controls.PathPanel"/> can be used as an alternative to <see cref="T:Microsoft.Expression.Controls.PathListBox"/> when selection is not necessary.
            The <see cref="P:Microsoft.Expression.Controls.LayoutPath.Orientation"/> property is not supported on <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathPanel"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the size required for child elements.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. </param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements.
            </summary>
            <param name="finalSize">The size that this object should use to arrange its child elements.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.ArrangeChild(System.Int32,System.Int32,Microsoft.Expression.Drawing.Core.PolylineData,Microsoft.Expression.Drawing.Core.MarchLocation,System.Int32)">
            <summary>
            Arranges the child at the given index at a particular location on a LayoutPath.
            </summary>
            <param name="indirectIndex">An index from the range 0 to PathPanel.Count.</param>
            <param name="pathIndex">The index of the layout path on which to arrange the child.</param>
            <param name="polyline">The polyline in the layout path.</param>
            <param name="location">The location on the polyline.</param>
            <param name="localIndex">The index of the child on the LayoutPath.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.GetChildRadius(System.Int32)">
            <summary>
            Calculates the radius of the bounding circle for the child at the given index.
            </summary>
            <param name="indirectIndex">An index from the range 0 to PathPanel.Count.</param>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.LayoutPaths">
            <summary>
            Gets or sets a collection of objects that define the path(s) used for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.StartItemIndex">
            <summary>
            Gets or sets the index to use within the list of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.WrapItems">
            <summary>
            Gets or sets whether the item index wraps to the beginning of the collection when StartItemIndex is greater than 0.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.ValidPaths">
            <summary>
            The subset of LayoutPaths that are attached and not Collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.Count">
            <summary>
            Count is the number of Children that the PathPanel will layout.
            If StartItemIndex > 0 and WrapItems is false, this can be less than PathPanel.Children.Count
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetItemsHost(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the Panel that contains the containers of an ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>
            The Panel that contains the containers of an ItemsControl, or null
            if the Panel could not be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.TraverseBreadthFirst``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Traverses a tree by accepting an initial value and a function that 
            retrieves the child nodes of a node.
            </summary>
            <typeparam name="T">The type of the stream.</typeparam>
            <param name="initialNode">The initial node.</param>
            <param name="getChildNodes">A function that retrieves the child
            nodes of a node.</param>
            <param name="traversePredicate">A predicate that evaluates a node
            and returns a value indicating whether that node and it's children
            should be traversed.</param>
            <returns>A stream of nodes.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetVisualChildrenAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree children of an element and the element itself.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetLogicalChildren(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical children of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetLogicalDescendents(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical descendents of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\ko\System.Windows.Interactivity.xml ===
﻿<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.Windows.Interactivity</name>
    </assembly>
    <members>
        <member name="T:System.Windows.Interactivity.AttachableCollection`1">
            <summary>
            공유된 AssociatedObject가 있는 IAttachedObject의 컬렉션을 나타내고 해당 AssociatedObject가 변경될 때 해당 컬렉션의 콘텐츠에 변경 알림을 제공합니다.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.IAttachedObject">
            <summary>
            다른 개체에 연결될 수 있는 개체의 인터페이스입니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.IAttachedObject.Attach(System.Windows.DependencyObject)">
            <summary>
            지정된 개체에 연결합니다.
            </summary>
            <param name="dependencyObject">연결할 개체.</param>
        </member>
        <member name="M:System.Windows.Interactivity.IAttachedObject.Detach">
            <summary>
            연결된 개체에서 이 인스턴스를 분리합니다.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.IAttachedObject.AssociatedObject">
            <summary>
            연결된 개체를 가져옵니다.
            </summary>
            <value>연결된 개체.</value>
            <remarks>인스턴스가 연결된 개체를 나타냅니다.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.#ctor">
            <summary>
            <see cref="T:System.Windows.Interactivity.AttachableCollection`1"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
            <remarks>이것은 이 어셈블리 외부에서 상속되어선 안 되므로 내부적으로 수행합니다.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.OnAttached">
            <summary>
            컬렉션이 AssociatedObject에 연결된 후 즉시 호출됩니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.OnDetaching">
            <summary>
            AssociatedObject에서 컬렉션이 분리될 때 호출되나 실제로 컬렉션이 발생하기 전에 호출됩니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.ItemAdded(`0)">
            <summary>
            새 항목이 컬렉션에 추가될 때 호출됩니다.
            </summary>
            <param name="item">새 항목.</param>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.ItemRemoved(`0)">
            <summary>
            컬렉션에서 항목이 제거될 때 호출됩니다.
            </summary>
            <param name="item">제거된 항목.</param>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.VerifyAdd(`0)">
            <exception cref="T:System.InvalidOperationException">컬렉션에 인스턴스를 두 번 이상 추가할 수 없습니다.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.Attach(System.Windows.DependencyObject)">
            <summary>
            지정된 개체에 연결합니다.
            </summary>
            <param name="dependencyObject">연결할 개체.</param>
            <exception cref="T:System.InvalidOperationException">IAttachedObject가 다른 개체에 이미 연결되었습니다.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.AttachableCollection`1.Detach">
            <summary>
            연결된 개체에서 이 인스턴스를 분리합니다.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.AttachableCollection`1.AssociatedObject">
            <summary>
            컬렉션을 호스트하는 개체입니다.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.AttachableCollection`1.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            연결된 개체를 가져옵니다.
            </summary>
            <value>연결된 개체.</value>
        </member>
        <member name="T:System.Windows.Interactivity.Behavior`1">
            <summary>
            상태 정보와 0개 이상의 ICommands를 연결 가능한 개체에 캡슐화합니다.
            </summary>
            <typeparam name="T"><see cref="T:System.Windows.Interactivity.Behavior`1"/>를 연결할 수 있는 형식.</typeparam>
            <remarks>
            	Behavior는 연결 가능한 상태 및 명령을 개체에 제공하기 위한 기본 클래스입니다. Behavior를 연결할 수 있는 형식은 일반 매개 변수로 제어할 수 있습니다. OnAttached() 및 OnDetaching() 메서드를 다시 정의하여 AssociatedObject에서 필수 처리기를 연결 및 분리합니다.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.Behavior">
            <summary>
            상태 정보와 0개 이상의 ICommands를 연결 가능한 개체에 캡슐화합니다.
            </summary>
            <remarks>이것은 인프라 클래스입니다. Behavior작성자는 이 클래스 대신 Behavior&lt;T&gt;에서 파생되어야 합니다.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.OnAttached">
            <summary>
            동작이 AssociatedObject에 연결된 후 호출됩니다.
            </summary>
            <remarks>이 동작을 다시 정의하여 기능을 AssociatedObject에 연결합니다.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.OnDetaching">
            <summary>
            AssociatedObject에서 동작이 분리될 때 호출되나 실제로 동작이 발생하기 전에 호출됩니다.
            </summary>
            <remarks>이 동작을 다시 정의하여 AssociatedObject에서 기능을 분리합니다.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.Attach(System.Windows.DependencyObject)">
            <summary>
            지정된 개체에 연결합니다.
            </summary>
            <param name="dependencyObject">연결할 개체.</param>
            <exception cref="T:System.InvalidOperationException">Behavior를 다른 요소에서 이미 호스트합니다.</exception>
            <exception cref="T:System.InvalidOperationException">dependencyObject가 Behavior 형식 제약 조건을 만족하지 않습니다.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior.Detach">
            <summary>
            연결된 개체에서 이 인스턴스를 분리합니다.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.AssociatedType">
            <summary>
            이 동작을 연결할 수 있는 형식입니다.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.AssociatedObject">
            <summary>
            이 동작이 연결되는 개체를 가져옵니다.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            연결된 개체를 가져옵니다.
            </summary>
            <value>연결된 개체.</value>
        </member>
        <member name="M:System.Windows.Interactivity.Behavior`1.#ctor">
            <summary>
            <see cref="T:System.Windows.Interactivity.Behavior`1"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.Behavior`1.AssociatedObject">
            <summary>
            이 <see cref="T:System.Windows.Interactivity.Behavior`1"/>가 연결되는 개체를 가져옵니다.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.BehaviorCollection">
            <summary>
            공유된 AssociatedObject가 있는 동작의 컬렉션을 나타내고 해당 AssociatedObject가 변경될 때 해당 컬렉션의 콘텐츠에 변경 알림을 제공합니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.#ctor">
            <summary>
            <see cref="T:System.Windows.Interactivity.BehaviorCollection"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
            <remarks>이것은 이 어셈블리 외부에서 상속되어선 안 되므로 내부적으로 수행합니다.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.OnAttached">
            <summary>
            컬렉션이 AssociatedObject에 연결된 후 즉시 호출됩니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.OnDetaching">
            <summary>
            AssociatedObject에서 컬렉션이 분리될 때 호출되나 실제로 컬렉션이 발생하기 전에 호출됩니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.ItemAdded(System.Windows.Interactivity.Behavior)">
            <summary>
            새 항목이 컬렉션에 추가될 때 호출됩니다.
            </summary>
            <param name="item">새 항목.</param>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.ItemRemoved(System.Windows.Interactivity.Behavior)">
            <summary>
            컬렉션에서 항목이 제거될 때 호출됩니다.
            </summary>
            <param name="item">제거된 항목.</param>
        </member>
        <member name="M:System.Windows.Interactivity.BehaviorCollection.CreateInstanceCore">
            <summary>
            BehaviorCollection의 새 인스턴스를 만듭니다.
            </summary>
            <returns>새 인스턴스.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.CustomPropertyValueEditor">
            <summary>
            다시 사용 가능한 속성 값 편집기의 가능한 값을 열거합니다.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.Element">
            <summary>
            지원되는 경우 요소 선택기를 사용하여 디자인 시 이 속성을 편집합니다.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.Storyboard">
            <summary>
            지원되는 경우 스토리보드 선택기를 사용하여 디자인 시 이 속성을 편집합니다.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.CustomPropertyValueEditor.StateName">
            <summary>
            지원되는 경우 상태 선택기를 사용하여 디자인 시 이 속성을 편집합니다.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.CustomPropertyValueEditorAttribute">
            <summary>
            지정된 편집기 형식을 CustomPropertyValueEditor가 적용되는 속성과 연결합니다.
            </summary>
            <remarks>이 특성을 사용하여 요소(이름별), 스토리보드 또는 상태(이름별)를 표시하는 속성에 대한 향상된 디자인 타임 편집 기능을 가져옵니다.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.CustomPropertyValueEditorAttribute.#ctor(System.Windows.Interactivity.CustomPropertyValueEditor)">
            <summary>
            <see cref="T:System.Windows.Interactivity.CustomPropertyValueEditorAttribute"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
            <param name="customPropertyValueEditor">사용자 지정 속성 값 편집기.</param>
        </member>
        <member name="P:System.Windows.Interactivity.CustomPropertyValueEditorAttribute.CustomPropertyValueEditor">
            <summary>
            사용자 지정 속성 값 편집기를 가져오거나 설정합니다.
            </summary>
            <value>사용자 지정 속성 값 편집기.</value>
        </member>
        <member name="T:System.Windows.Interactivity.DefaultTriggerAttribute">
            <summary>
            지정된 작업 또는 명령에 인스턴스화할 <see cref="T:System.Windows.Interactivity.TriggerBase"/>에 대한 디자인 도구 정보를 제공합니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.#ctor(System.Type,System.Type,System.Object)">
            <summary>
            <see cref="T:System.Windows.Interactivity.DefaultTriggerAttribute"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
            <param name="targetType">이 특성이 적용되는 형식.</param>
            <param name="triggerType">인스턴스화할 <see cref="T:System.Windows.Interactivity.TriggerBase"/>의 형식.</param>
            <param name="parameters">지정된 <see cref="T:System.Windows.Interactivity.TriggerBase"/>에 대한 단일 인수.</param>
            <exception cref="T:System.ArgumentException"><c cref="F:System.Windows.Interactivity.DefaultTriggerAttribute.triggerType"/>는 TriggerBase에서 파생되지 않습니다.</exception>
            <remarks>이 생성자는 지정된 <see cref="T:System.Windows.Interactivity.TriggerBase"/>에 단일 인수가 있을 경우 유용합니다. 결과 코드는 CLS 규격이 됩니다.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.#ctor(System.Type,System.Type,System.Object[])">
            <summary>
            <see cref="T:System.Windows.Interactivity.DefaultTriggerAttribute"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
            <param name="targetType">이 특성이 적용되는 형식.</param>
            <param name="triggerType">인스턴스화할 <see cref="T:System.Windows.Interactivity.TriggerBase"/>의 형식.</param>
            <param name="parameters">지정된 <see cref="T:System.Windows.Interactivity.TriggerBase"/>에 대한 생성자 인수.</param>
            <exception cref="T:System.ArgumentException"><c cref="F:System.Windows.Interactivity.DefaultTriggerAttribute.triggerType"/>는 TriggerBase에서 파생되지 않습니다.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.DefaultTriggerAttribute.Instantiate">
            <summary>
            이 인스턴스를 인스턴스화합니다.
            </summary>
            <returns>DefaultTriggerAttribute로 지정된 <see cref="T:System.Windows.Interactivity.TriggerBase"/>.</returns>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.TargetType">
            <summary>
            이 DefaultTriggerAttribute가 적용되는 형식을 가져옵니다.
            </summary>
            <value>이 DefaultTriggerAttribute가 적용되는 형식.</value>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.TriggerType">
            <summary>
            인스턴스화할 <see cref="T:System.Windows.Interactivity.TriggerBase"/>의 형식을 가져옵니다.
            </summary>
            <value>인스턴스화할 <see cref="T:System.Windows.Interactivity.TriggerBase"/>의 형식.</value>
        </member>
        <member name="P:System.Windows.Interactivity.DefaultTriggerAttribute.Parameters">
            <summary>
            <see cref="T:System.Windows.Interactivity.TriggerBase"/> 생성자로 전달할 매개 변수를 가져옵니다.
            </summary>
            <value><see cref="T:System.Windows.Interactivity.TriggerBase"/> 생성자로 전달할 매개 변수.</value>
        </member>
        <member name="T:System.Windows.Interactivity.EventTrigger">
            <summary>
            원본에서 지정된 이벤트를 수신 대기하고 해당 이벤트가 발생될 때 발생하는 트리거입니다.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.EventTriggerBase`1">
            <summary>
            AssociatedObject가 아닌 다른 요소를 수신 대기할 수 있는 트리거를 나타냅니다.
            </summary>
            <typeparam name="T">이 트리거를 연결할 수 있는 형식.</typeparam>
            <remarks>
            	EventTriggerBase는 TriggerBase를 확장하여 연결된 요소가 아닌 다른 요소의 정보를 추가합니다. 이를 통해 사용자는 Trigger/Action 쌍을 한 요소에 연결하고 다른 곳에서 다른 요소가 변경될 때 그에 대한 응답으로 Action을 호출할 수 있습니다. 원본 요소의 처리기를 연결 또는 분리하려면 OnSourceChanged를 다시 정의하고 연결된 요소에 대해서는 OnAttached/OnDetaching을 다시 정의합니다. Source 요소의 형식은 일반 형식 매개 변수로 제한할 수 있습니다. AssociatedObject의 형식을 제어해야 하는 경우에는 파생된 형식에 TypeConstraintAttribute를 설정합니다.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.EventTriggerBase">
            <summary>
            AssociatedObject가 아닌 다른 요소를 수신 대기할 수 있는 트리거를 나타냅니다.
            </summary>
            <remarks>이것은 인프라 클래스입니다. Trigger 작성자는 이 클래스 대신 EventTriggerBase&lt;T&gt;에서 파생되어야 합니다.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerBase">
            <summary>
            조건에 따라 Action을 호출할 수 있는 개체를 나타냅니다.
            </summary>
            <remarks>이것은 인프라 클래스입니다. Trigger 작성자는 이 클래스 대신 Trigger&lt;T&gt;에서 파생되어야 합니다.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.InvokeActions(System.Object)">
            <summary>
            이 트리거와 연결된 모든 Action을 호출합니다.
            </summary>
            <remarks>파생된 클래스는 트리거를 발생시키려면 이 작업을 호출해야 합니다.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.OnAttached">
            <summary>
            트리거가 AssociatedObject에 연결된 후 호출됩니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.OnDetaching">
            <summary>
            AssociatedObject에서 트리거가 분리될 때 호출되나 실제로 트리거가 발생하기 전에 호출됩니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.CreateInstanceCore">
            <summary>
            TriggerBase 파생된 클래스의 새 인스턴스를 만듭니다.
            </summary>
            <returns>새 인스턴스.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.Attach(System.Windows.DependencyObject)">
            <summary>
            지정된 개체에 연결합니다.
            </summary>
            <param name="dependencyObject">연결할 개체.</param>
            <exception cref="T:System.InvalidOperationException">동일한 Trigger를 한 번에 두 개 이상의 개체에서 호스트할 수 없습니다.</exception>
            <exception cref="T:System.InvalidOperationException">dependencyObject가 Trigger 형식 제약 조건을 만족하지 않습니다.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase.Detach">
            <summary>
            연결된 개체에서 이 인스턴스를 분리합니다.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.AssociatedObject">
            <summary>
            트리거가 연결되는 개체를 가져옵니다.
            </summary>
            <value>연결된 개체.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.AssociatedObjectTypeConstraint">
            <summary>
            연결된 개체의 형식 제약 조건을 가져옵니다.
            </summary>
            <value>연결된 개체 형식 제약 조건.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.Actions">
            <summary>
            이 트리거와 연결된 작업을 가져옵니다.
            </summary>
            <value>이 트리거와 연결된 작업.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            연결된 개체를 가져옵니다.
            </summary>
            <value>연결된 개체.</value>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.GetEventName">
            <summary>
            이 EventTriggerBase가 수신 대기 중인 이벤트의 이름을 지정합니다.
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnEvent(System.EventArgs)">
            <summary>
            이 EventTriggerBase와 연결된 이벤트가 발생될 때 호출됩니다. 기본적으로 이것은 트리거의 모든 작업을 호출합니다.
            </summary>
            <param name="eventArgs">이벤트 데이터를 포함하는 <see cref="T:System.EventArgs"/> 인스턴스.</param>
            <remarks>이 인스턴스를 다시 정의하여 이 트리거와 연결된 작업이 호출될 때 더 세부적으로 제어합니다.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnSourceChangedImpl(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            원본이 변경될 때 호출됩니다.
            </summary>
            <param name="oldSource">이전 원본.</param>
            <param name="newSource">새 원본.</param>
            <remarks>변경 중인 원본 개체에 기능을 연결하거나 반대로 기능을 분리하려면 파생된 클래스에서 이 기능을 다시 정의해야 합니다.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnAttached">
            <summary>
            트리거가 AssociatedObject에 연결된 후 호출됩니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.OnDetaching">
            <summary>
            AssociatedObject에서 트리거가 분리될 때 호출되나 실제로 트리거가 발생하기 전에 호출됩니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase.RegisterEvent(System.Object,System.String)">
            <exception cref="T:System.ArgumentException">대상에서 eventName을 찾을 수 없습니다.</exception>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.AssociatedObjectTypeConstraint">
            <summary>
            연결된 개체의 형식 제약 조건을 가져옵니다.
            </summary>
            <value>연결된 개체 형식 제약 조건.</value>
            <remarks>파생된 형식에 TypeConstraintAttribute를 정의하여 연결할 수 있는 형식을 제한합니다.</remarks>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.SourceTypeConstraint">
            <summary>
            원본 형식 제약 조건을 가져옵니다.
            </summary>
            <value>원본 형식 제약 조건.</value>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.SourceName">
            <summary>
            이 EventTriggerBase가 원본으로 수신 대기하는 요소의 이름을 가져오거나 설정합니다. 이름을 설정하지 않았거나 확인할 수 없으면 AssociatedObject가 사용됩니다.  이것은 종속성 속성입니다.
            </summary>
            <value>원본 요소의 이름.</value>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase.Source">
            <summary>
            확인된 원본을 가져옵니다. <c ref="SourceName"/>를 설정하지 않거나 확인할 수 없으면 AssociatedObject로 기본 설정됩니다.
            </summary>
            <value>확인된 원본 개체.</value>
            <remarks>일반적으로 이 속성은 파생된 클래스에서 AssociatedObject 대신 사용되어야 합니다.</remarks>
            <exception cref="T:System.InvalidOperationException"><c cref="P:System.Windows.Interactivity.EventTriggerBase.Source"/>가 나타내는 요소가 형식 제약 조건을 만족하지 않습니다.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase`1.#ctor">
            <summary>
            <see cref="T:System.Windows.Interactivity.EventTriggerBase`1"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTriggerBase`1.OnSourceChanged(`0,`0)">
            <summary>
            원본 속성이 변경될 때 호출됩니다.
            </summary>
            <remarks>이 속성을 다시 정의하여 AssociatedObject가 아닌 지정된 Source에 기능을 연결하거나 반대로 기능을 분리합니다.</remarks>
            <param name="oldSource">이전 원본.</param>
            <param name="newSource">새 원본.</param>
        </member>
        <member name="P:System.Windows.Interactivity.EventTriggerBase`1.Source">
            <summary>
            확인된 원본을 가져옵니다. <c ref="SourceName"/>를 설정하지 않거나 확인할 수 없으면 AssociatedObject로 기본 설정됩니다.
            </summary>
            <value>확인된 원본 개체.</value>
            <remarks>일반적으로 이 속성은 파생된 클래스에서 AssociatedObject 대신 사용되어야 합니다.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.EventTrigger.#ctor">
            <summary>
            <see cref="T:System.Windows.Interactivity.EventTrigger"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.EventTrigger.#ctor(System.String)">
            <summary>
            <see cref="T:System.Windows.Interactivity.EventTrigger"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
            <param name="eventName">이벤트의 이름.</param>
        </member>
        <member name="P:System.Windows.Interactivity.EventTrigger.EventName">
            <summary>
            수신 대기할 이벤트의 이름을 가져오거나 설정합니다. 이것은 종속성 속성입니다.
            </summary>
            <value>이벤트의 이름.</value>
        </member>
        <member name="T:System.Windows.Interactivity.Interaction">
            <summary>
            Trigger 및 Behavior 연결 속성을 소유하는 정적 클래스입니다. AssociatedObject 변경 알림의 전파를 처리합니다.
            </summary>
        </member>
        <member name="F:System.Windows.Interactivity.Interaction.TriggersProperty">
            <summary>
            이 속성은 공용 Trigger 연결 속성의 내부 보조 저장소로 사용됩니다.
            </summary>
            <remarks>
            이 속성은 공개적으로 노출되지 않습니다. 이것은 클라이언트가 컬렉션에 액세스하도록 GetTriggers 및 SetTriggers 메서드를 강제로 사용하게 하여, 컬렉션을 사용하기 전에 컬렉션이 존재하고 설정되었음을 확인합니다.
            </remarks>
        </member>
        <member name="F:System.Windows.Interactivity.Interaction.BehaviorsProperty">
            <summary>
            이 속성은 공용 Behavior 연결 속성의 내부 보조 저장소로 사용됩니다.
            </summary>
            <remarks>
            이 속성은 공개적으로 노출되지 않습니다. 이것은 클라이언트가 컬렉션에 액세스하도록 GetBehaviors 및 SetBehaviors 메서드를 강제로 사용하게 하여, 컬렉션을 사용하기 전에 컬렉션이 존재하고 설정되었음을 확인합니다.
            </remarks>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.GetTriggers(System.Windows.DependencyObject)">
            <summary>
            지정된 개체와 연결된 트리거를 포함하는 TriggerCollection을 가져옵니다.
            </summary>
            <param name="obj">트리거를 검색할 개체.</param>
            <returns>지정된 개체와 연결된 트리거를 포함하는 TriggerCollection.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.GetBehaviors(System.Windows.DependencyObject)">
            <summary>
            지정된 개체와 연결된 <see cref="T:System.Windows.Interactivity.BehaviorCollection"/>를 가져옵니다.
            </summary>
            <param name="obj"><see cref="T:System.Windows.Interactivity.BehaviorCollection"/>를 검색할 개체.</param>
            <returns>지정된 개체와 연결된 동작을 포함하는 <see cref="T:System.Windows.Interactivity.BehaviorCollection"/>.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.OnBehaviorsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <exception cref="T:System.InvalidOperationException">동일한 BehaviorCollection을 한 번에 두 개 이상의 개체에서 호스트할 수 없습니다.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.OnTriggersChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <exception cref="T:System.InvalidOperationException">동일한 TriggerCollection을 한 번에 두 개 이상의 개체에서 호스트할 수 없습니다.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.Interaction.IsElementLoaded(System.Windows.FrameworkElement)">
            <summary>
            Silverlight에는 FrameworkElement.IsLoaded와 같은 속성이 없기 때문에 이 속성을 대신하는 도우미 기능입니다.
            </summary>
            <param name="element">관심 요소.</param>
            <returns>요소가 로드되었으면 true이고, 그렇지 않으면 false입니다.</returns>
        </member>
        <member name="P:System.Windows.Interactivity.Interaction.ShouldRunInDesignMode">
            <summary>
            디자인 모드에 있는 경우처럼 실행할 지 여부를 나타내는 값을 가져오거나 설정합니다.
            </summary>
            <value>
            	[디자인 모드에서 실행해야] 하는 경우 <c>true</c>이고, 그렇지 않으면 <c>false</c>입니다.
            </value>
            <remarks>단위 테스트 외부에서는 사용되지 않습니다.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.InvokeCommandAction">
            <summary>
            호출 시 호스트 Behavior에 지정된 Action을 실행합니다.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerAction`1">
            <summary>
            기능 단위를 캡슐화하는 연결 가능 개체를 나타냅니다.
            </summary>
            <typeparam name="T">이 작업을 연결할 수 있는 형식.</typeparam>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerAction">
            <summary>
            기능 단위를 캡슐화하는 연결 가능 개체를 나타냅니다.
            </summary>
            <remarks>이것은 인프라 클래스입니다. Action 작성자는 이 클래스 대신 TriggerAction&lt;T&gt;에서 파생되어야 합니다.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.CallInvoke(System.Object)">
            <summary>
            작업 호출을 시도합니다.
            </summary>
            <param name="parameter">작업에 대한 매개 변수. Action에 매개 변수가 필요하지 않은 경우 매개 변수를 Null 참조로 설정할 수 있습니다.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Invoke(System.Object)">
            <summary>
            작업을 호출합니다.
            </summary>
            <param name="parameter">작업에 대한 매개 변수. Action에 매개 변수가 필요하지 않은 경우 매개 변수를 Null 참조로 설정할 수 있습니다.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.OnAttached">
            <summary>
            작업이 AssociatedObject에 연결된 후 호출됩니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.OnDetaching">
            <summary>
            AssociatedObject에서 작업이 분리될 때 호출되나 실제로 작업이 발생하기 전에 호출됩니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.CreateInstanceCore">
            <summary>
            파생된 클래스에 구현되었을 때 <see cref="T:System.Windows.Freezable"/> 파생된 클래스의 새 인스턴스를 만듭니다.
            </summary>
            <returns>새 인스턴스.</returns>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Attach(System.Windows.DependencyObject)">
            <summary>
            지정된 개체에 연결합니다.
            </summary>
            <param name="dependencyObject">연결할 개체.</param>
            <exception cref="T:System.InvalidOperationException">동일한 TriggerAction을 한 번에 두 개 이상의 개체에서 호스트할 수 없습니다.</exception>
            <exception cref="T:System.InvalidOperationException">dependencyObject가 TriggerAction 형식 제약 조건을 만족하지 않습니다.</exception>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction.Detach">
            <summary>
            연결된 개체에서 이 인스턴스를 분리합니다.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.IsEnabled">
            <summary>
            호출 시 이 작업을 실행할지 여부를 나타내는 값을 가져오거나 설정합니다. 이것은 종속성 속성입니다.
            </summary>
            <value>
            	호출 시 이 작업이 실행될 경우 <c>true</c>이고, 그렇지 않으면 <c>false</c>입니다.
            </value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.AssociatedObject">
            <summary>
            이 Action이 연결되는 개체를 가져옵니다.
            </summary>
            <value>연결된 개체.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.AssociatedObjectTypeConstraint">
            <summary>
            연결된 개체 형식 제약 조건을 가져옵니다.
            </summary>
            <value>연결된 개체 형식 제약 조건.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.IsHosted">
            <summary>
            이 인스턴스의 연결 여부를 나타내는 값을 가져오거나 설정합니다.
            </summary>
            <value>이 인스턴스가 연결되었으면 <c>true</c>이고, 그렇지 않으면 <c>false</c>입니다.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction.System#Windows#Interactivity#IAttachedObject#AssociatedObject">
            <summary>
            연결된 개체를 가져옵니다.
            </summary>
            <value>연결된 개체.</value>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerAction`1.#ctor">
            <summary>
            <see cref="T:System.Windows.Interactivity.TriggerAction`1"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObject">
            <summary>
            이 <see cref="T:System.Windows.Interactivity.TriggerAction`1"/>가 연결되는 개체를 가져옵니다.
            </summary>
            <value>연결된 개체.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerAction`1.AssociatedObjectTypeConstraint">
            <summary>
            연결된 개체 형식 제약 조건을 가져옵니다.
            </summary>
            <value>연결된 개체 형식 제약 조건.</value>
        </member>
        <member name="M:System.Windows.Interactivity.InvokeCommandAction.Invoke(System.Object)">
            <summary>
            작업을 호출합니다.
            </summary>
            <param name="parameter">작업에 대한 매개 변수. Action에 매개 변수가 필요하지 않은 경우 매개 변수를 Null 참조로 설정할 수 있습니다.</param>
        </member>
        <member name="M:System.Windows.Interactivity.InvokeCommandAction.OnAttached">
            <summary>
            컬렉션이 AssociatedObject에 연결된 후 호출됩니다.
            </summary>
            <exception cref="T:System.InvalidOperationException">InvokeActionCommand를 Behavior에서 호스트해야 합니다.</exception>
        </member>
        <member name="P:System.Windows.Interactivity.InvokeCommandAction.CommandName">
            <summary>
            이 작업이 호출해야 하는 명령의 이름을 가져오거나 설정합니다.
            </summary>
            <value>이 작업이 호출해야 하는 명령의 이름.</value>
        </member>
        <member name="P:System.Windows.Interactivity.InvokeCommandAction.CommandParameter">
            <summary>
            명령 매개 변수를 가져오거나 설정합니다.
            </summary>
            <value>명령 매개 변수.</value>
            <remarks>이것은 ICommand.CanExecute 및 ICommand.Execute로 전달된 값입니다.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.NameResolvedEventArgs">
            <summary>
            이름 변경을 확인할 때 영향을 받은 개체에 대한 데이터를 제공합니다.
            </summary>
        </member>
        <member name="T:System.Windows.Interactivity.NameResolver">
            <summary>
            TargetName을 호스트 요소에 의해 제공된 컨텍스트에 따라 대상 요소로 확인하는 논리를 처리하는 도우미 클래스입니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.NameResolver.UpdateObjectFromName(System.Windows.DependencyObject)">
            <summary>
            namescope 참조 요소의 컨텍스트 내 이름에서 확인된 개체를 업데이트하려고 시도합니다.
            </summary>
            <param name="oldObject">이전의 확인된 개체입니다.</param>
            <remarks>
            기존 대상을 다시 설정하고 현재 호스트 컨텍스트에서 현재 TargetName을 확인하려고 합니다. 호스트의 컨텍스트에서 요소를 확인할 수 없으면 확인될 때까지 가시적 트리를 계속 탐색해 들어갑니다. 루트에 도달할 때까지 확인하지 못했으면 대상을 Null로 설정하고 디버그 출력에 경고 메시지를 작성합니다.
            </remarks>
        </member>
        <member name="E:System.Windows.Interactivity.NameResolver.ResolvedElementChanged">
            <summary>
            확인된 요소가 변경되었을 때 발생합니다.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.Name">
            <summary>
            확인하려는 요소의 이름을 가져오거나 설정합니다.
            </summary>
            <value>확인하려는 이름.</value>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.Object">
            <summary>
            확인된 개체. TargetName이 Null 또는 비어 있거나 확인이 시도되지 않은 경우 참조 요소를 반환합니다.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.NameScopeReferenceElement">
            <summary>
            이름 확인을 수행할 참조 요소를 가져오거나 설정합니다.
            </summary>
            <value>참조 요소.</value>
        </member>
        <member name="P:System.Windows.Interactivity.NameResolver.PendingReferenceElementLoad">
            <summary>
            참조 요소 로드가 보류 중인지 여부를 나타내는 값을 가져오거나 설정합니다.
            </summary>
            <value>
            	[참조 요소 로드를 보류 중]인 경우 <c>true</c>이고, 그렇지 않으면 <c>false</c>입니다.
            </value>
            <remarks>
            호스트가 로드되지 않은 경우 이름은 확인되지 않습니다. 이 경우에는 확인을 지연하고 이 속성으로 해당 사실을 추적합니다.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TargetedTriggerAction`1">
            <summary>
            AssociatedObject가 아닌 다른 개체에 영향을 주기 위해 대상으로 지정할 수 있는 작업을 나타냅니다.
            </summary>
            <typeparam name="T">대상의 형식 제약 조건.</typeparam>
            <remarks>
            	TargetedTriggerAction은 TriggerAction을 확장하여 연결된 요소가 아닌 다른 요소의 정보를 추가합니다. 따라서 사용자는 Trigger 발생에 대한 응답으로 연결된 요소가 아닌 다른 요소에 Action을 호출할 수 있습니다. OnTargetChanged를 다시 정의하여 대상 요소의 처리기를 연결 또는 분리하고 연결된 요소에 대해서는 OnAttached/OnDetaching을 다시 정의합니다. 대상 요소의 형식은 일반 형식 매개 변수로 제한할 수 있습니다. AssociatedObject의 형식을 제어해야 하는 경우에는 파생된 형식에 TypeConstraintAttribute를 설정합니다.
            </remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TargetedTriggerAction">
            <summary>
            AssociatedObject가 아닌 다른 개체에 영향을 주기 위해 대상으로 지정할 수 있는 작업을 나타냅니다.
            </summary>
            <remarks>이것은 인프라 클래스입니다. Action 작성자는 이 클래스 대신 TargetedTriggerAction&lt;T&gt;에서 파생되어야 합니다.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnTargetChangedImpl(System.Windows.DependencyObject,System.Windows.DependencyObject)">
            <summary>
            대상이 변경될 때 호출됩니다.
            </summary>
            <param name="oldTarget">이전 대상.</param>
            <param name="newTarget">새 대상.</param>
            <remarks>변경 중인 원본 개체에 기능을 연결하거나 반대로 기능을 분리하려면 파생된 클래스에서 이 기능을 다시 정의해야 합니다.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnAttached">
            <summary>
            작업이 AssociatedObject에 연결된 후 호출됩니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction.OnDetaching">
            <summary>
            AssociatedObject에서 작업이 분리될 때 호출되나 실제로 작업이 발생하기 전에 호출됩니다.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.TargetName">
            <summary>
            대상의 이름을 가져오거나 설정합니다. TargetName을 설정하지 않았거나 확인할 수 없으면 대상이 AssociatedObject로 기본 설정됩니다. 이것은 종속성 속성입니다.
            </summary>
            <value>대상의 이름.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.Target">
            <summary>
            대상 개체를 가져옵니다. TargetName을 설정하지 않거나 확인할 수 없으면 AssociatedObject로 기본 설정됩니다.
            </summary>
            <value>대상.</value>
            <remarks>일반적으로 이 속성은 파생된 클래스에서 AssociatedObject 대신 사용되어야 합니다.</remarks>
            <exception cref="T:System.InvalidOperationException">대상 요소가 형식 제약 조건을 만족하지 않습니다.</exception>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.AssociatedObjectTypeConstraint">
            <summary>
            연결된 개체 형식 제약 조건을 가져옵니다.
            </summary>
            <value>연결된 개체 형식 제약 조건.</value>
            <remarks>파생된 형식에 TypeConstraintAttribute를 정의하여 연결할 수 있는 형식을 제한합니다.</remarks>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction.TargetTypeConstraint">
            <summary>
            대상 형식 제약 조건을 가져옵니다.
            </summary>
            <value>대상 형식 제약 조건.</value>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction`1.#ctor">
            <summary>
            <see cref="T:System.Windows.Interactivity.TargetedTriggerAction`1"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TargetedTriggerAction`1.OnTargetChanged(`0,`0)">
            <summary>
            대상 속성이 변경될 때 호출됩니다.
            </summary>
            <remarks>이 속성을 다시 정의하여 AssociatedObject가 아닌 지정된 대상에 기능을 연결하거나 반대로 기능을 분리합니다.</remarks>
            <param name="oldTarget">이전 대상.</param>
            <param name="newTarget">새 대상.</param>
        </member>
        <member name="P:System.Windows.Interactivity.TargetedTriggerAction`1.Target">
            <summary>
            대상 개체를 가져옵니다. TargetName을 설정하지 않거나 확인할 수 없으면 AssociatedObject로 기본 설정됩니다.
            </summary>
            <value>대상.</value>
            <remarks>일반적으로 이 속성은 파생된 클래스에서 AssociatedObject 대신 사용되어야 합니다.</remarks>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerActionCollection">
            <summary>
            공유된 AssociatedObject가 있는 작업의 컬렉션을 나타내고 해당 AssociatedObject가 변경될 때 해당 컬렉션의 콘텐츠에 변경 알림을 제공합니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.#ctor">
            <summary>
            <see cref="T:System.Windows.Interactivity.TriggerActionCollection"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
            <remarks>이것은 이 어셈블리 외부에서 상속되어선 안 되므로 내부적으로 수행합니다.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.OnAttached">
            <summary>
            컬렉션이 AssociatedObject에 연결된 후 즉시 호출됩니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.OnDetaching">
            <summary>
            AssociatedObject에서 컬렉션이 분리될 때 호출되나 실제로 컬렉션이 발생하기 전에 호출됩니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.ItemAdded(System.Windows.Interactivity.TriggerAction)">
            <summary>
            새 항목이 컬렉션에 추가될 때 호출됩니다.
            </summary>
            <param name="item">새 항목.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.ItemRemoved(System.Windows.Interactivity.TriggerAction)">
            <summary>
            컬렉션에서 항목이 제거될 때 호출됩니다.
            </summary>
            <param name="item">제거된 항목.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerActionCollection.CreateInstanceCore">
            <summary>
            TriggerActionCollection의 새 인스턴스를 만듭니다.
            </summary>
            <returns>새 인스턴스.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerBase`1">
            <summary>
            조건에 따라 Action을 호출할 수 있는 개체를 나타냅니다.
            </summary>
            <typeparam name="T">이 트리거를 연결할 수 있는 형식.</typeparam>
            <remarks>
            	TriggerBase는 Action을 제어하기 위한 기본 클래스입니다. OnAttached() 및 OnDetaching()을 다시 정의하여 AssociatedObject에서 처리기를 연결 및 분리합니다. 일반 매개 변수를 지정하여 파생된 TriggerBase를 연결할 수 있는 형식을 제한할 수 있습니다. InvokeActions()를 호출하여 이 TriggerBase와 연결된 모든 Action을 발생시킵니다.
            </remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerBase`1.#ctor">
            <summary>
            <see cref="T:System.Windows.Interactivity.TriggerBase`1"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObject">
            <summary>
            트리거가 연결되는 개체를 가져옵니다.
            </summary>
            <value>연결된 개체.</value>
        </member>
        <member name="P:System.Windows.Interactivity.TriggerBase`1.AssociatedObjectTypeConstraint">
            <summary>
            연결된 개체의 형식 제약 조건을 가져옵니다.
            </summary>
            <value>연결된 개체 형식 제약 조건.</value>
        </member>
        <member name="T:System.Windows.Interactivity.TriggerCollection">
            <summary>
             공유된 AssociatedObject가 있는 트리거의 컬렉션을 나타내고 해당 AssociatedObject가 변경될 때 해당 컬렉션의 콘텐츠에 변경 알림을 제공합니다.
             </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.#ctor">
            <summary>
            <see cref="T:System.Windows.Interactivity.TriggerCollection"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
            <remarks>이것은 이 어셈블리 외부에서 상속되어선 안 되므로 내부적으로 수행합니다.</remarks>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.OnAttached">
            <summary>
            컬렉션이 AssociatedObject에 연결된 후 즉시 호출됩니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.OnDetaching">
            <summary>
            AssociatedObject에서 컬렉션이 분리될 때 호출되나 실제로 컬렉션이 발생하기 전에 호출됩니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.ItemAdded(System.Windows.Interactivity.TriggerBase)">
            <summary>
            새 항목이 컬렉션에 추가될 때 호출됩니다.
            </summary>
            <param name="item">새 항목.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.ItemRemoved(System.Windows.Interactivity.TriggerBase)">
            <summary>
            컬렉션에서 항목이 제거될 때 호출됩니다.
            </summary>
            <param name="item">제거된 항목.</param>
        </member>
        <member name="M:System.Windows.Interactivity.TriggerCollection.CreateInstanceCore">
            <summary>
            <see cref="T:System.Windows.Interactivity.TriggerCollection"/>의 새 인스턴스를 만듭니다.
            </summary>
            <returns>새 인스턴스.</returns>
        </member>
        <member name="T:System.Windows.Interactivity.TypeConstraintAttribute">
            <summary>
            TargetedTriggerAction 및 EventTriggerBase의 AssociatedObject에 형식 제약 조건을 지정합니다.
            </summary>
        </member>
        <member name="M:System.Windows.Interactivity.TypeConstraintAttribute.#ctor(System.Type)">
            <summary>
            <see cref="T:System.Windows.Interactivity.TypeConstraintAttribute"/> 클래스의 새 인스턴스를 초기화합니다.
            </summary>
            <param name="constraint">제약 조건 형식.</param>
        </member>
        <member name="P:System.Windows.Interactivity.TypeConstraintAttribute.Constraint">
            <summary>
            제약 조건 형식을 가져옵니다.
            </summary>
            <value>제약 조건 형식.</value>
        </member>
        <member name="T:ExceptionStringTable">
            <summary>
              지역화된 문자열 등을 검색하기 위한 강력한 형식의 리소스 클래스입니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.ResourceManager">
            <summary>
              이 클래스에 사용된 캐시된 ResourceManager 인스턴스를 반환합니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.Culture">
            <summary>
              이 강력한 형식의 리소스 클래스를 사용하여 모든 리소스를 검색할 경우 현재 스레드의 CurrentUICulture 속성을 다시 정의합니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostBehaviorCollectionMultipleTimesExceptionMessage">
            <summary>
              [여러 개체에 동일한 BehaviorCollection을 설정할 수 없습니다.]와 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostBehaviorMultipleTimesExceptionMessage">
            <summary>
              [한 번에 둘 이상의 개체에 동작 인스턴스를 연결할 수 없습니다]와 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerActionMultipleTimesExceptionMessage">
            <summary>
              [TriggerAction 인스턴스를 여러 TriggerCollections에서 동시에 호스팅할 수 없습니다. 다른 TriggerCollection에 추가하기 전에 한 TriggerCollection에서 TriggerAction 인스턴스를 제거하십시오.]와 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerCollectionMultipleTimesExceptionMessage">
            <summary>
              [여러 개체에 동일한 TriggerCollection을 설정할 수 없습니다.]와 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CannotHostTriggerMultipleTimesExceptionMessage">
            <summary>
              [한 번에 둘 이상의 개체에 트리거 인스턴스를 연결할 수 없습니다.]와 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.CommandDoesNotExistOnBehaviorWarningMessage">
            <summary>
              [&quot;{0}&quot; 명령이 없거나 {1}에 공개적으로 노출되어 있지 않습니다.]와 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.DefaultTriggerAttributeInvalidTriggerTypeSpecifiedExceptionMessage">
            <summary>
              [&quot;{0}&quot;은(는) TriggerType 매개 변수에 유효한 형식이 아닙니다. &quot;{0}&quot;이(가) TriggerBase에서 파생되었는지 확인하십시오.]와 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.DuplicateItemInCollectionExceptionMessage">
            <summary>
              [동일한 &quot;{0}&quot; 인스턴스를 &quot;{1}&quot;에 두 번 이상 추가할 수 없습니다.]와 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.EventTriggerCannotFindEventNameExceptionMessage">
            <summary>
              [&quot;{1}&quot; 형식에서 &quot;{0}&quot; 이벤트를 찾을 수 없습니다.]와 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.InvokeActionCommandMustBeHostedOnBehaviorExceptionMessage">
            <summary>
              [InvokeCommandAction을 Behavior에 연결해야 합니다. 이 작업을 수행하려면 Behavior 개체의 Triggers 컬렉션에서 트리거의 Actions 컬렉션에 InvokeCommandAction을 추가하면 됩니다.]와 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.RetargetedTypeConstraintViolatedExceptionMessage">
            <summary>
              [&quot;{0}&quot; 형식의 개체에는 &quot;{1}&quot; 형식의 {3} 속성이 있을 수 없습니다. &quot;{0}&quot; 형식의 인스턴스에는 &quot;{2}&quot; 형식의 {3} 속성만 있을 수 있습니다.]와 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.TypeConstraintViolatedExceptionMessage">
            <summary>
              [&quot;{0}&quot; 형식을 &quot;{1}&quot; 형식에 연결할 수 없습니다. &quot;{0}&quot; 형식의 인스턴스는 &quot;{2}&quot; 형식의 개체에만 연결할 수 있습니다.]와 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
        <member name="P:ExceptionStringTable.UnableToResolveTargetNameWarningMessage">
            <summary>
              [TargetName &quot;{0}&quot;을(를) 확인할 수 없습니다.]와 유사한 지역화된 문자열을 찾습니다.
            </summary>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\zh-Hans\Microsoft.Expression.Drawing.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Drawing</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Controls.Callout">
            <summary>
            Renders a callout shape supporting several shapes combined with a callout arrow.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.CompositeContentShape">
             <summary>
             Provides a base class of a composite shape that derives from <see cref="T:System.Windows.Controls.ContentControl"/> and implements <see cref="T:Microsoft.Expression.Media.IShape"/>.
             </summary>
             <remarks>
             <see cref="T:Microsoft.Expression.Controls.CompositeContentShape"/> implements <see cref="T:Microsoft.Expression.Media.IShape"/> interface,
             and supports rendering a geometry similar to <see cref="T:System.Windows.Shapes.Shape"/>, but the geometry can be rendered outside of layout boundary.
             
             A typical implementation will have a customized default template in generic.xaml which template-binds most shape properties to a <see cref="T:System.Windows.Shapes.Path"/>.
             It should also extend the <see cref="P:GeometrySource"/> property to customize the appearance of the <see cref="T:System.Windows.Shapes.Path"/>.
            
             This class also supports showing content together with the shape.
             </remarks>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySourceParameters">
            <summary>
            Provides an interface to discribe the parameters of a Shape.
            </summary>
            <remarks>
            This interface is the data for communication between Shape and GeometrySource.
            Typically a concrete implementation of IShape will implements this interface and pass it into
            GeometrySource.UpdateGeometry(), who will consume the shape as readonly data provider.
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Media.IShape">
            <summary>
            Provides the necessary interface to define a Shape.
            Both primitive and composite shapes need to match this interface, although they might derive from different type of FrameworkElement.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.IShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Fill">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how to paint the interior of the shape.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that describes how the shape's interior is painted. The default is null. See Remarks.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values. The default value at run time depends on the type of <see cref="T:System.Windows.Shapes.Shape" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.RenderedGeometry">
            <summary>
            Gets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.GeometryMargin">
            <summary>
            Gets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Media.IShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.CreateGeometrySource">
            <summary>
            Extends how the shape is drawn with creating geometry source.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Controls.CompositeContentShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.OnContentChanged(System.Object,System.Object)">
            <summary>
            Transforms a string content into <see cref="T:TextBlock"/> with center alignment and mulitple line support.
            </summary>
            <remarks>
            Use template binding to <see cref="P:Microsoft.Expression.Controls.CompositeContentShape.InternalContent"/> instead of <see cref="P:Content"/> to enable this method.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that specifies how to paint the interior of the shape.
            </summary>
            <returns>A <see cref="T:System.Windows.Media.Brush"/> that describes how the shape's interior is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeStartLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. </summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineCap" /> enumeration that specifies the shape at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeEndLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the end of a line. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeLineJoin">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:System.Windows.Shapes.Shape" />.</summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration that specifies the join appearance. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeMiterLimit">
            <summary>Gets or sets a limit on the ratio of the miter length to half the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. </summary>
            <returns>The limit on the ratio of the miter length to the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. This value is always a positive number that is greater than or equal to 1.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashArray">
            <summary>Gets or sets a collection of <see cref="T:System.Double" /> values that indicate the pattern of dashes and gaps that is used to outline shapes. </summary>
            <returns>A collection of <see cref="T:System.Double" /> values that specify the pattern of dashes and gaps. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that specifies how the ends of a dash are drawn. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.StrokeDashOffset">
            <summary>Gets or sets a <see cref="T:System.Double" /> that specifies the distance within the dash pattern where a dash begins.</summary>
            <returns>A <see cref="T:System.Double" /> that represents the distance within the dash pattern where a dash begins. The default value is 0.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.RenderedGeometry">
            <summary>
            Gets or sets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.GeometryMargin">
            <summary>
            Gets or sets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeContentShape.InternalContent">
            <summary>
            Gets or sets the internal content that converts string into center aligned multiple line textblock.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.CompositeContentShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.Callout.AnchorPoint">
            <summary>
            Gets or sets the position of the callout relative to the top and left corner.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.Callout.CalloutStyle">
            <summary>
            Gets or sets the callout style.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.CompositeShape">
            <summary>
            Provides a base class of a composite shape that derives from <see cref="T:System.Windows.Controls.Control"/> and implements <see cref="T:Microsoft.Expression.Media.IShape"/>.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Expression.Controls.CompositeShape"/> implements <see cref="T:Microsoft.Expression.Media.IShape"/> interface,
            and supports rendering a geometry similar to <see cref="T:System.Windows.Shapes.Shape"/>, but the geometry can be rendered outside of layout boundary.
            
            A typical implementation will have a customized default template in generic.xaml which template-binds most shape properties to a <see cref="T:System.Windows.Shapes.Path"/>.
            It should also extend the <see cref="P:GeometrySource"/> property to customize the appearance of the <see cref="T:System.Windows.Shapes.Path"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.CreateGeometrySource">
            <summary>
            Extends how the shape is drawn with creating geometry source.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Controls.CompositeShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Fill">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Brush"/> that specifies how to paint the interior of the shape.
            </summary>
            <returns>A <see cref="T:System.Windows.Media.Brush"/> that describes how the shape's interior is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeStartLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />. </summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineCap" /> enumeration that specifies the shape at the start of a <see cref="P:System.Windows.Shapes.Shape.Stroke" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeEndLineCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that describes the <see cref="T:System.Windows.Shapes.Shape" /> at the end of a line. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeLineJoin">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration value that specifies the type of join that is used at the vertices of a <see cref="T:System.Windows.Shapes.Shape" />.</summary>
            <returns>A value of the <see cref="T:System.Windows.Media.PenLineJoin" /> enumeration that specifies the join appearance. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeMiterLimit">
            <summary>Gets or sets a limit on the ratio of the miter length to half the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. </summary>
            <returns>The limit on the ratio of the miter length to the <see cref="P:System.Windows.Shapes.Shape.StrokeThickness" /> of a <see cref="T:System.Windows.Shapes.Shape" /> element. This value is always a positive number that is greater than or equal to 1.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashArray">
            <summary>Gets or sets a collection of <see cref="T:System.Double" /> values that indicate the pattern of dashes and gaps that is used to outline shapes. </summary>
            <returns>A collection of <see cref="T:System.Double" /> values that specify the pattern of dashes and gaps. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashCap">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.PenLineCap" /> enumeration value that specifies how the ends of a dash are drawn. </summary>
            <returns>One of the enumeration values for <see cref="T:System.Windows.Media.PenLineCap" />. The default is <see cref="F:System.Windows.Media.PenLineCap.Flat" />. </returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.StrokeDashOffset">
            <summary>Gets or sets a <see cref="T:System.Double" /> that specifies the distance within the dash pattern where a dash begins.</summary>
            <returns>A <see cref="T:System.Double" /> that represents the distance within the dash pattern where a dash begins. The default value is 0.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.RenderedGeometry">
            <summary>
            Gets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.CompositeShape.GeometryMargin">
            <summary>
            Gets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.CompositeShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.LineArrow">
            <summary>
            Renders a bended line segment with optional arrowhead on both end.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.LineArrow.MeasureOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
            <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes, or possibly on other considerations such as fixed container size.</returns>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <remarks>
            A default <see cref="T:LineArrow"/> can render at anysize.
            The <see cref="P:RenderedGeometry"/> will stretch to layout boundary and render to outside if necessary.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.BendAmount">
            <summary>
            Gets or sets the amount of bend for the arrow.
            </summary>
            <value>The bend amount between 0 to 1.</value>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.StartArrow">
            <summary>
            Gets or sets how the arrow head is rendered at the start of the line.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.EndArrow">
            <summary>
            Gets or sets how the arrow head is rendered at the end of the line.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.StartCorner">
            <summary>
            Gets or sets from which corner to start drawing the arrow.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LineArrow.ArrowSize">
            <summary>
            Gets or sets the length of the arrow in pixels.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PanningItems">
            <summary>
            Provides an items control that displays one selected item, and allows panning between items using touch gestures.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PanningItems.#ctor">
            <summary>
            The constructor for PanningItems.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PanningItems.OnApplyTemplate">
            <summary>
            Called when the PanningItems template is applied.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.ScrollDirection">
            <summary>
            Gets or sets the orientation of items in the control.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.FlickTolerance">
            <summary>
            Gets or sets the flick tolerance.  This can be a value between 0 and 1.  
            It represents the percentage of the size of the PanningItems needed to be covered by the flick gesture to trigger an items change.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.PreviousItem">
            <summary>
            Gets or sets the item before the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.NextItem">
            <summary>
            Gets or sets the item after the selected item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.LoopContents">
            <summary>
            Gets or sets whether the contents of the items control will loop, so that the first item will follow the last item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PanningItems.SliderValue">
            <summary>
            Gets or sets the value of the slider controlling the panning motion.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathGeometryHelper">
            <summary>
            Helper class to work with PathGeometry
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.ConvertToPathGeometry(System.String)">
            <summary>
            Converts a string in the path mini-langauge into a PathGeometry.
            </summary>
            <param name="abbreviatedGeometry">A string in the path mini-langauge.</param>
            <remarks>
            Algorithm is modified from WPF: MS.Internal.Parsers.ParseStringToStreamGeometryContext.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.AsPathGeometry(System.Windows.Media.Geometry)">
            <summary>
            Convert the given geometry into a single PathGeometry.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathGeometryHelper.SyncPolylineGeometry(System.Windows.Media.Geometry@,System.Collections.Generic.IList{System.Windows.Point},System.Boolean)">
            <summary>
            Update the given geometry as PathGeometry with polyline matching given point list.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathGeometryHelper.AbbreviatedGeometryParser">
            <summary>
            Parses abbreviated geometry sytax.
            </summary>
            <remarks>
            The algorithm is modified from WPF: MS.Internal.AbbreviatedGeometryParser
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathSegmentHelper">
            <summary>
            Helper class to Convert ArcSegment to BezierSegment(s)
            </summary>
            <summary>
            Helper class to work with PathSegment and all variations.
            </summary>
            <summary>
            Strategy classes to handle different types of PathSegment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierSegments(System.Windows.Media.ArcSegment,System.Windows.Point)">
            <summary>
            Convert an Arc segment into Bezier format
            Return BezierSegment, PolyBezierSegment, LineSegment, or null
            When returning null, the Arc degenerated into start point.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SetIsStroked(System.Windows.Media.PathSegment,System.Boolean)">
            <summary>
            Avoid calling the three-parameter constructor, since it always sets a local value for IsStroked.
            </summary>
            <param name="segment"></param>
            <param name="isStroked"></param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SyncPolylineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Collections.Generic.IList{System.Windows.Point},System.Int32,System.Int32)">
            <summary>
            Update the SegmentCollection with given polyline matching given point list.
            Try to keep changes minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.SyncPolyBezierSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Collections.Generic.IList{System.Windows.Point},System.Int32,System.Int32)">
            <summary>
            Update the collection[index] segment with poly bezier segment matching given point list.
            givne point list must contain 3*N points for N Bezier segments.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.IsEmpty(System.Windows.Media.PathSegment)">
            <summary>
            Test if given path segment is empty.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetPointCount(System.Windows.Media.PathSegment)">
            <summary>
            Get the point count in given path segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetLastPoint(System.Windows.Media.PathSegment)">
            <summary>
            Get the last point of given path segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.GetPoint(System.Windows.Media.PathSegment,System.Int32)">
            <summary>
            Get the point of given index in given segment.
            If input is (-1), return the last point.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.FlattenSegment(System.Windows.Media.PathSegment,System.Collections.Generic.IList{System.Windows.Point},System.Windows.Point,System.Double)">
            <summary>
            Flatten given segment and add result points into given point list.
            </summary>
            <param name="segment">The segment to be flatten</param>
            <param name="points">The result point list</param>
            <param name="start">The start point of the segment</param>
            <param name="tolerance">The error tolerance. Must be possitive. Can be 0, fallback to default tolerance.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.ArcToBezier(System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,System.Boolean,System.Double,System.Double,System.Windows.Point[]@,System.Int32@)">
            <summary>
            ArcToBezier, Compute the Bezier approximation of an arc
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            </summary>
            <remarks>
            This utility computes the Bezier approximation for an elliptical arc as
            it is defined in the SVG arc spec. The ellipse from which the arc is
            carved is axis-aligned in its own coordinates, and defined there by its
            x and y radii. The rotation angle defines how the ellipse's axes are
            rotated relative to our x axis. The start and end points define one of 4
            possible arcs; the sweep and large-arc flags determine which one of
            these arcs will be chosen. See SVG spec for details.
            
            Returning cPieces = 0 indicates a line instead of an arc
                      cPieces = -1 indicates that the arc degenerates to a point 
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.GetArcAngle(System.Windows.Point,System.Windows.Point,System.Boolean,System.Boolean,System.Double@,System.Double@,System.Int32@)">
            <summary>
            Get the number of Bezier arcs, and sine/cosine of each.
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            </summary>
            <remarks>
            This is a private utility used by ArcToBezier.  We break the arc into
            pieces so that no piece will span more than 90 degrees.  The input
            points are on the unit circle.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.GetBezierDistance(System.Double,System.Double)">
             <summary>
             GetBezierDistance, return the distance as a fraction of the radius
             Adopted from MIL:Graphics\core\geometry\utils.cpp
             </summary>
            <remarks>
                  Get the distance from a circular arc's endpoints to the control points
                  of the Bezier arc that approximates it, as a fraction of the arc's
                  radius.
            
                  Since the result is relative to the arc's radius, it depends strictly on
                  the arc's angle. The arc is assumed to be of 90 degrees of less, so the
                  angle is determined by the cosine of that angle, which is derived from
                  rDot = the dot product of two radius vectors.  We need the Bezier curve
                  that agrees with the arc's points and tangents at the ends and midpoint. 
                  Here we compute the distance from the curve's endpoints to its control
                  points.
            
                  Since we are looking for the relative distance, we can work on the unit
                  circle. Place the center of the circle at the origin, and put the X axis
                  as the bisector between the 2 vectors.  Let a be the angle between the
                  vectors.  Then the X coordinates of the 1st and last points are cos(a/2). 
                  Let x be the X coordinate of the 2nd and 3rd points.  At t=1/2 we have a
                  point at (1,0). But the terms of the polynomial there are all equal:
            
                            (1-t)^3 = t*(1-t)^2 = t^2*(1-t) = t^3 = 1/8,
            
                  so from the Bezier formula there we have:
            
                            1 = (1/8) * (cos(a/2) + 3x + 3x + cos(a/2)), 
            
                  hence
            
                            x = (4 - cos(a/2)) / 3
            
                  The X difference between that and the 1st point is:
                  
                            DX = x - cos(a/2) = 4(1 - cos(a/2)) / 3.
            
                  But DX = distance / sin(a/2), hence the distance is
            
                            dist = (4/3)*(1 - cos(a/2)) / sin(a/2).
            
                  Rather than the angle a, we are given rDot = R^2 * cos(a), so we
                  multiply top and bottom by R:
             
                            dist = (4/3)*(R - Rcos(a/2)) / Rsin(a/2)
             
                  and use some trig:
                                           ________________
                            cos(a/2)   = \/(1 + cos(a)) / 2
                                           ______________________
                            R*cos(a/2) = \/(R^2 + R^2 cos(a)) / 2 
                                           ________________
                                       = \/(R^2 + rDot) / 2
            
                  Let A = (R^2 + rDot)/2.
                                           ____________________
                            R*sin(a/2) = \/R^2 - R^2 cos^2(a/2)
                                           _______
                                       = \/R^2 - A
            
                  so:
                                                      _
                                         4      R - \/A
                                  dist = - * ------------
                                         3      _______
                                              \/R^2 - A
            
              History:
                  5/29/2001 MichKa
                      Created it.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathSegmentHelper.ArcToBezierHelper.AcceptRadius(System.Double,System.Double,System.Double@)">
            <summary>
            Adopted from MIL:Graphics\core\geometry\utils.cpp
            Return false if the radius is too small compared to the chord length (returns true on NaNs)
            radius is modified to the value that's accepted.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.BezierCurveFlattener">
            <summary>
            A utility class to flatten Bezier curves.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.BezierCurveFlattener.FlattenCubic(System.Windows.Point[],System.Double,System.Collections.Generic.ICollection{System.Windows.Point},System.Boolean,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Flattens a Bezier cubic curve and adds the result polyline to the third parameter.
            </summary>
            <param name="controlPoints">The 4 Bezier cubic control points.</param>
            <param name="errorTolerance">The maximum distance between two corresponding points on the true curve 
            and on the flattened polyline. Must be strictly positive.</param>
            <param name="resultPolyline">Where to add the flattened polyline.</param>
            <param name="skipFirstPoint">True to skip the first control point when adding the flattened polyline.
            <param name="resultParameters">Where to add the value of the Bezier curve parameter associated to 
            each of the polyline vertices</param> 
            If <paramref name="resultPolyline"/> is empty, the first control point 
            and its associated parameter are always added.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.BezierCurveFlattener.FlattenQuadratic(System.Windows.Point[],System.Double,System.Collections.Generic.ICollection{System.Windows.Point},System.Boolean,System.Collections.Generic.ICollection{System.Double})">
            <summary>
            Flattens a Bezier quadratic curve and adds the result polyline to the third parameter.
            We use degree elevation for Bezier curves to reuse the code for the cubic case.
            </summary>
            <param name="controlPoints">The 3 Bezier quadratic control points.</param>
            <param name="errorTolerance">The maximum distance between two corresponding points on the true curve 
            and on the flattened polyline. Must be strictly positive.</param>
            <param name="resultPolyline">Where to add the flattened polyline.</param>
            <param name="skipFirstPoint">Whether to skip the first control point when adding the flattened polyline. 
            <param name="resultParameters">Where to add the value of the Bezier curve parameter associated to
            each of the polyline vertices</param>
            If <paramref name="resultPolyline"/> is empty, the first control point and 
            its associated parameter are always added.</param>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.CommonExtensions">
            <summary>
            Extension methods supporting non-geometry types
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach(System.Collections.IEnumerable,System.Action{System.Object})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ForEach``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int32})">
            <summary>
            Allows the application of an action delegate (often a very simple lambda) against an entire sequence with the index of each item.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.EnsureListCount``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Ensure the count of list to given count.  Create default(T) or remove items when necessary.
            If Input IList is a List, AddRange or RemoveRange is used.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.EnsureListCount``1(System.Collections.Generic.IList{``0},System.Int32,System.Func{``0})">
            <summary>
            Ensure the count of list to given count.  Create with given fatory or remove items when necessary.
            If Input IList is a List, AddRange or RemoveRange is used when there's no factory.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.AddRange``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Add a range of items to the end of a collection.
            If collection is list, List.AddRange is used.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.Last``1(System.Collections.Generic.IList{``0})">
            <summary>
            Get the last item of given list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.RemoveLast``1(System.Collections.Generic.IList{``0})">
            <summary>
            Remove the last item from the given list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.DeepCopy``1(``0)">
            <summary>
            Make a copy of obj and all it's public properties, including all collection properties.
            Possible perf optimization: this is used only for Transform and Geometry.
            We should develope a copier for them instead of using reflection.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.SetIfDifferent(System.Windows.DependencyObject,System.Windows.DependencyProperty,System.Object)">
            <summary>
            Set the value if different.  Avoid setting local value if possible.
            return true when the value has been changed
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.ClearIfSet(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Clears the dependency property when it is locally set on the given dependency object.
            Return false if the dependeny property is not locally set.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.FindVisualDesendent``1(System.Windows.DependencyObject,System.Func{``0,System.Boolean})">
            <summary>
            Find all visual desendent of given type and condition using breath first search.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.CommonExtensions.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get all visual children in IEnumerable
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.DrawingPropertyMetadata">
            <summary>
            Unify the interface of PropertyMetadata in WPF and Silverlight.
            Providing the necessary notification about render, arrange or measure.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.#ctor(Microsoft.Expression.Media.DrawingPropertyMetadataOptions,System.Object)">
            <summary>
            This private Ctor should only be used by AttachCallback.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.AttachCallback(System.Object,Microsoft.Expression.Media.DrawingPropertyMetadataOptions,System.Windows.PropertyChangedCallback)">
            <summary>
            Chain InternalCallback() to attach the instance of DrawingPropertyMetadata on property callback.
            In Silverlight4-, the property metadata is thrown away after setting. Use callback to remember it.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.DrawingPropertyMetadata.InternalCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Before chaining the original callback, trigger DrawingPropertyChangedEvent
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.GeometryHelper">
            <summary>
            Extension methods for Geometry related data structures (Point/Vector/Size/Rect)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Resize(System.Windows.Rect,System.Double)">
            <summary>
            Resize the rectangle to relative size while keeping center invariant.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Subtract(System.Windows.Point,System.Windows.Point)">
            <summary>
            Get the difference Vector between two Points
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Plus(System.Windows.Point,System.Windows.Point)">
            <summary>
            Memberwise plus for Point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Minus(System.Windows.Point,System.Windows.Point)">
            <summary>
            Memberwise minus for Point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.ConvertToPathGeometry(System.String)">
            <summary>
            Converts a string of mini-languages to a <see cref="T:PathGeometry"/>.
            </summary>
            <remarks>See: Path Markup Syntax(http://msdn.microsoft.com/en-us/library/cc189041(VS.95).aspx)</remarks>
            <param name="abbreviatedGeometry">The string of path mini-languages for describing geometric paths.</param>
            <returns>A <see cref="T:PathGeometry"/> converted from the the path mini-languages/></returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.FlattenFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Double)">
            <summary>
            Flattens a <see cref="T:PathFigure"/> and adds result points to given <paramref name="points"/>.
            </summary>
            <param name="figure">The input <see cref="T:PathFigure"/>.</param>
            <param name="points">The point list to which result points will append.</param>
            <param name="tolerance">A positive number specifying the maximum allowed error from result points to input path figure.  Value 0 allows algorithm to pick the tolerance automatically.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcPoint(System.Double)">
            <summary>
            Get the normalized arc in (0,0)(1,1) box.
            Zero degree is mapped to [0.5, 0] (up), and clockwise
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcPoint(System.Double,System.Windows.Rect)">
            <summary>
            Get the absolute arc point in given bound with given relative radius.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcAngle(System.Windows.Point)">
            <summary>
            Get the angle on arc relative to (0,0)(1,1) box.
            Zero degree is mapped to [0.5, 0] (up), and clockwise
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetArcAngle(System.Windows.Point,System.Windows.Rect)">
            <summary>
            Get the angle on arc from given absolute point relative to bound
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeTransform(System.Windows.Rect,System.Windows.Rect)">
            <summary>
            Compute the transform that moves Rect from to Rect to.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeTransform(System.Windows.UIElement,System.Windows.UIElement)">
            <summary>
            Computes the transform from the coordinate space of one <c>UIElement</c> to another.
            </summary>
            <param name="from">The source element.</param>
            <param name="to">The destination element.</param>
            <returns>The transform between the <c>UIElement</c>s, or null if it cannot be computed.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.RelativeToAbsolutePoint(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Map relative point to absolute using the mapping from given bound to (0,0)(1,1) box.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.AbsoluteToRelativePoint(System.Windows.Rect,System.Windows.Point)">
            <summary>
            Map absolute point to relative using the mapping from (0,0)(1,1) box to given bound.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GetStretchBound(System.Windows.Rect,System.Windows.Media.Stretch,System.Windows.Size)">
            <summary>
            Compute the bound after stretch within given logical bound.
            If stretch to uniform, use given aspectRatio.
            If aspectRatio is empty, it's equivalent to Fill.
            If stretch is None, equivalent to Fill or Uniform.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Midpoint(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the mid point of given 2 points
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The mid point between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Dot(System.Windows.Vector,System.Windows.Vector)">
            <summary>
            Returns the dot product of two vectors.
            </summary>
            <param name="lhs">The first vector.</param>
            <param name="rhs">The second vector.</param>
            <returns>The dot product of <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Dot(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the dot product of two Points.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Distance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the distance between two points.
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The distance between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.SquaredDistance(System.Windows.Point,System.Windows.Point)">
            <summary>
            Returns the square of the distance between two points.
            </summary>
            <param name="lhs">The first point.</param>
            <param name="rhs">The second point.</param>
            <returns>The square of the distance between <paramref name="lhs"/> and <paramref name="rhs"/>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Determinant(System.Windows.Point,System.Windows.Point)">
            <summary>
            Determinant of cross product.  Equivalent to directional area
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Normal(System.Windows.Point,System.Windows.Point)">
            <summary>
            Compute the normal direction vector of given line segments
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.Perpendicular(System.Windows.Vector)">
            <summary>
            Compute perpendicular vector, 90 degrees counter-clockwise.
            Vector to right perpendicular result a vector to up.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.GeometryEquals(System.Windows.Media.Geometry,System.Windows.Media.Geometry)">
            <summary>
            Returns whether the two geometries are identical.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureGeometryType``1(``0@,System.Windows.Media.Geometry@,System.Func{``0})">
            <summary>
            Ensure the value is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureGeometryType``1(``0@,System.Collections.Generic.IList{System.Windows.Media.Geometry},System.Int32,System.Func{``0})">
            <summary>
            Ensure the list[index] is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.EnsureSegmentType``1(``0@,System.Collections.Generic.IList{System.Windows.Media.PathSegment},System.Int32,System.Func{``0})">
            <summary>
            Ensure the list[index] is an instance of result type (T).  If not, replace with a new instance of type (T).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.GeometryHelper.ComputeBSpline(System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Double)">
            <summary>
            de'Boor algorithm to subdevide BSpline into poly Bezier segments.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.MathHelper">
            <summary>
            Helper class providing static properties and methods related to floating point arithmetic.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.Epsilon">
            <summary>
            The minimum distance to consider two values are same.
            Note: internal floating point in MIL/SL is float, not double.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.TwoPI">
            <summary>
            The value of angle of a full circle.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Drawing.Core.MathHelper.PentagramInnerRadius">
            <summary>
            The inner radius for pentagram polygon shape, at precision of 3 digits in percentage.
            (1 - Sin36 * Sin72 / Sin54) / (Cos36) ^ 2, which is 0.47210998990512996761913067272407
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.IsVerySmall(System.Double)">
            <summary>
            Determines whether a <c>System.Double</c> value is small enough to be considered
            equivalent to zero.
            </summary>
            <param name="value"></param>
            <returns><c>true</c> if value is smaller than <c>DoubleTolerance</c>;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.EnsureRange(System.Double,System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
            Return the value that's within the given range
            Given min/max is null means no limit.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.Hypotenuse(System.Double,System.Double)">
            <summary>
            Computes the Euclidean norm of the vector (x, y).
            </summary>
            <param name="x">The first component.</param>
            <param name="y">The second component.</param>
            <returns>The Euclidean norm of the vector (x, y).</returns>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.DoubleFromMantissaAndExponent(System.Double,System.Int32)">
            <summary>
            Computes a real number from the mantissa and exponent.
            </summary>
            <param name="x"></param>
            <param name="exp"></param>
            <returns>The value of x * 2^exp if successful.</returns>
            <remarks>See ::ldexp in any decent C language runtime library.</remarks>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MathHelper.IsFiniteDouble(System.Double)">
            <summary>
            Tests a double.
            </summary>
            <param name="x">The double to test.</param>
            <returns><c>true</c> if x is not a NaN and is not equal to plus or minus infinity;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathFigureHelper">
            <summary>
            Helper class to work with PathFigure
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.FlattenFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Double,System.Boolean)">
            <summary>
            Flatten the given figure and add to the point list.
            </summary>
            <param name="tolerance">The error tolerance. Must be possitive. Can be 0, fallback to default tolerance.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.AllSegments(System.Windows.Media.PathFigure)">
            <summary>
            Iterate all segments inside given figure, and returns correct start point for each segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncPolylineFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
            <summary>
            Synchronize the figure to the given list of points as a single polyline segment.
            Try to keep the change minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncPolyBezierFigure(System.Windows.Media.PathFigure,System.Collections.Generic.IList{System.Windows.Point},System.Boolean,System.Boolean)">
            <summary>
            Synchronize the figure to the given list of points as a single PolyBezierSegment.
            Try to keep the change minimum and returns false if nothing has been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PathFigureHelper.SyncEllipseFigure(System.Windows.Media.PathFigure,System.Windows.Rect,System.Windows.Media.SweepDirection,System.Boolean)">
            <summary>
            Synchronize the given figure to be a closed ellipse with 2 arc segments.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PathSegmentData">
            <summary>
            A Tuple data structure for PathSegment and corresponding StartPoint.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PolylineData">
            <summary>
            Represent a polyline consist with a list of connecting points.
            A closed polygon is represented by repeating the first point at the end.
            The differences, normals, angles, and lengths are computed on Demand.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.#ctor(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Construct a polyline with two or more points.
            </summary>
            <param name="points"></param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.Difference(System.Int32)">
            The forward difference vector of polyline.
            Points[i] + Differences[i] = Points[i+1]
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineData.SmoothNormal(System.Int32,System.Double,System.Double)">
            <summary>
            Compute the normal vector of given location (lerp(index, index+1, fraction).
            If the location is within range of cornerRadius, interpolate the normal direction.
            </summary>
            <param name="cornerRadius">The range of normal smoothless.  If zero, no smoothness and return the exact normal on index.</param>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.IsClosed">
            <summary>
            The polyline is closed when first and last point is repeated.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Count">
            <summary>
            The count of points in this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.TotalLength">
            <summary>
            The total arc length of this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Points">
            <summary>
            The point array of this polyline
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Lengths">
            <summary>
            The length between line segments, Points[i] to Points[i+1]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Normals">
            <summary>
            The list of normal vectors for each segment.
            Normals[i] is the normal of segment p[i] to p[i + 1].
            Normals[N-1] == Normals[N-2].
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.Angles">
            <summary>
            The list of Cos(angle) between 2 line segments on point p[i]
            Note: The value is cos(angle) = Dot(u, v). It's not in degree.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.PolylineData.AccumulatedLength">
            <summary>
            The list of accumulated length from points[i] to points[0]
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.MarchLocation">
            <summary>
            The data structure to communicate with PathMarch algorithm.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetPoint(System.Collections.Generic.IList{System.Windows.Point})">
            <summary>
            Get the interpolated position of this this MarchLocation on given point list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetNormal(Microsoft.Expression.Drawing.Core.PolylineData,System.Double)">
            <summary>
            Get the interpolated normal direction of this this MarchLocation on given normal vector list.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.MarchLocation.GetArcLength(System.Collections.Generic.IList{System.Double})">
            <summary>
            Get the arc length of this MarchLocation to the start of the entire polyline.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Reason">
            <summary>
            The reason why this location is sampled.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Index">
            <summary>
            The index of the point on polyline point list.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Ratio">
            <summary>
            Ratio: [0, 1], which is always before / (before + after)
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Before">
            <summary>
            Arc length before stop point.  It's non-negative, and less than Length[index]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.After">
            <summary>
            Arc length after the stop point.  It's non-negative, and less than Length[index]
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.MarchLocation.Remain">
            <summary>
            Remaining length within a step to hit next stop.  Positive to go forward. Negative to go backward.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.PolylineHelper">
            <summary>
            Helper class to work with list of points
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineHelper.PathMarch(Microsoft.Expression.Drawing.Core.PolylineData,System.Double,System.Double,System.Func{Microsoft.Expression.Drawing.Core.MarchLocation,System.Double})">
            <summary>
            March the given polyline with given interval and output each stop through callback
            </summary>
            <param name="polyline">The polyline points to march on</param>
            <param name="startArcLength">The arc length to march before stopping at the first point.</param>
            <param name="cornerThreshold">The max angle between edges to be considered a corner vertex</param>
            <param name="stopCallback">Callback when marching algorithm stop at a point.  The callback returns the arc length for next stop.
            If the asked length is negative, march backwards. If callback returns NaN, finish marching.</param>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.PolylineHelper.GetWrappedPolylines(System.Collections.Generic.IList{Microsoft.Expression.Drawing.Core.PolylineData},System.Double@)">
            <summary>
            Reorders the given list of polylines so that the polyline a given arclength into the list is the first.
            Polylines that preceded this line are concatenated to the end of the list, with the first polyline at the very end. 
            </summary>
            <param name="lines">A list of polylines.</param>
            <param name="startArcLength">The arclength into the entire list of polylines at which to find the start line.
            The arc length into that line is returned in this variable.</param>
            <returns>The reordered and wrapped list.</returns>
        </member>
        <member name="T:Microsoft.Expression.Drawing.Core.RandomEngine">
            <summary>
            A random generator support uniform and gaussian distributions.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.RandomEngine.Gaussian">
            <summary>
            Generate a pair of independent standard normally distributed random numbers,
            zero expectation, unit variance, using polar form of the Box-Muller transformation.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.#ctor">
            <summary>
            Private constructor. Force to use factory methods.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a line segment
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a cubic bezier segment from quatratic curve (3 control points)
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.SimpleSegment.Create(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Windows.Point)">
            <summary>
             Creates a cubic bezier segment with 4 control points.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Drawing.Core.SimpleSegment.Points">
            <summary>
            Control points of path segment.  Length is variant.
            Line segment has 2 points, Cubic bezier has 4 points.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Drawing.Core.TransformExtensions.TransformEquals(System.Windows.Media.Transform,System.Windows.Media.Transform)">
            <summary>
            Compares two transforms for an exact match.  Transforms with the same value but different structure(e.g. Translate(0,0) and Rotate(0) are not considered equivalent).
            </summary>
            <param name="firstTransform">The first transform.</param>
            <param name="secondTransform">The second transform.</param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.Expression.Media.UnitType">
            <summary>
            Specifies the unit of thickness.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.UnitType.Pixel">
            <summary>
            Unit in pixels.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.UnitType.Percent">
            <summary>
            Unit in percentage relative to bounding box.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometrySource`1">
            <summary>
            Provides the base class of a source of geometry.
            It generate and cache the geometry based on input parameters and layout bounds.
            </summary>
            <remarks>
            A typical implementation will extend the UpdateCachedGeometry() to update this.cachedGeometry.
            This base class will then handle the invalidation, pipeline to geometry effects and caching realtive to layout bounds.
            An implementation should try to reuse the cached geometry as much as possible to avoid reconstruction in rendering thread.
            An implementation can extend the ComputeLogicalBounds to handle Stretch differently.
            </remarks>
            <typeparam name="TParameters">The type of geometry source parameter on which the base class is working on.</typeparam>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySource">
            <summary>
            Provides an interface to describe the source of a geometry.
            </summary>
            <remarks>
            This interface is designed to expose geometry source in a non-generic way.
            Typical implementation should subclass GeometrySource&lt;&gt; instead of implementing this interface directly.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.IGeometrySource.InvalidateGeometry">
            <summary>
            Notify the geometry is invalidated because of external changes.
            </summary>
            <remarks>
            Typically geometry is invalidated when parameters are changed.
            If any geometry has been invalidated externally, geometry will be recomputed regardless bounds' change.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.IGeometrySource.UpdateGeometry(Microsoft.Expression.Media.IGeometrySourceParameters,System.Windows.Rect)">
            <summary>
            Update the geometry using given parameter and layout bounds.
            Returns false if nothing has been updated.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.Geometry">
            <summary>
            Gets or sets the result geometry after the latest UpdateGeometry()
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.LogicalBounds">
            <summary>
            Gets the bounding box where geometry should stretch to.
            The actual geometry might be smaller or larger than this.
            <see cref="P:Microsoft.Expression.Media.IGeometrySource.LogicalBounds"/> should already take stroke thickness and stretch into consideration.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IGeometrySource.LayoutBounds">
            <summary>
            Gets the actuall bound of FrameworkElement.
            <see cref="P:Microsoft.Expression.Media.IGeometrySource.LayoutBounds"/> includes logical bounds, stretch and stroke thickness.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometrySource`1.cachedGeometry">
            <summary>
            Specifics the geometry from the previous geometry effect process.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.InvalidateGeometry">
            <summary>
            Notify the geometry is invalidated because of external changes.
            </summary>
            <remarks>
            Typically geometry is invalidated when parameters are changed.
            If any geometry has been invalidated externally, geometry will be recomputed regardless bounds' change.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.UpdateGeometry(Microsoft.Expression.Media.IGeometrySourceParameters,System.Windows.Rect)">
            <summary>
            Update the geometry based on given parameters and layoutBounds.
            Returns false if geometry hasn't been changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.UpdateCachedGeometry(`0)">
            <summary>
            Extend the way to provide geometry by implementing this function.
            Return true when any of the geometry is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Extend the way to handle stretch mode.
            Default is to always use Stretch.Fill and center stroke.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometrySource`1.ApplyGeometryEffect(Microsoft.Expression.Media.IGeometrySourceParameters,System.Boolean)">
            <summary>
            Apply geometry effect when dirty or forced, update this.Geometry.
            Otherwise, keep this.Geometry as this.cachedGeometry.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.Geometry">
            <summary>
            Gets or sets the result geometry after the latest UpdateGeometry()
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.LogicalBounds">
            <summary>
            Gets the bounding box where geometry should stretch to.
            The actual geometry might be smaller or larger than this.
            <see cref="P:Microsoft.Expression.Media.GeometrySource`1.LogicalBounds"/> should already take stroke thickness and stretch into consideration.
            </summary>
            <value></value>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometrySource`1.LayoutBounds">
            <summary>
            Gets the actuall bound of FrameworkElement.
            <see cref="P:Microsoft.Expression.Media.GeometrySource`1.LayoutBounds"/> includes logical bounds, stretch and stroke thickness.
            </summary>
            <value></value>
        </member>
        <member name="M:Microsoft.Expression.Media.ArcGeometrySource.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Arc think Stretch.None is same as Stretch.Fill, assuming aspect ratio = 1:1
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.ArcGeometrySource.NormalizeThickness(Microsoft.Expression.Media.IArcGeometrySourceParameters)">
            <summary>
            Normalize thickness, both relative to bounding box and absolute pixel.
            realtive thickness = 0 -> full circle radius or clamped.
            realtive thickness = 1 -> shrinked to a dot, or degenerated.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.ArrowOrientation">
            <summary>
            Specifies the direction the arrow points.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Left">
            <summary>
            The arrow points to left.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Right">
            <summary>
            The arrow points to right.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Up">
            <summary>
            The arrow points up.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowOrientation.Down">
            <summary>
            The arrow points down.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.BlockArrowGeometrySource.ArrowBuilder">
            <summary>
                 B
                /|
               / C--D
              A     |
               \ C--D
                \|
                 B
            Algorithm only use Width/Height assuming top-left at 0,0
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.CalloutStyle">
            <summary>
            Specifies the rendering style of a Callout shape
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Rectangle">
            <summary>
            A rectangle shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.RoundedRectangle">
            <summary>
            A rounded rectangle shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Oval">
            <summary>
            A oval shaped callout.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CalloutStyle.Cloud">
            <summary>
            A cloud shaped callout.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateEdge(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double,System.Boolean)">
            <summary>
            Update the edge line, and connect to anchor point if necessary
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdatePolylineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Double)">
            <summary>
            Update polyline segment, connecting start, anchor and end point with Callout style
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateLineSegment(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point)">
            <summary>
            Update the line segment to given point
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.ComputeCorners(System.Double)">
            <summary>
            Compute the corner points, clockwise, 8 points for 4 corners
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.CalloutGeometrySource.UpdateCornerArc(System.Windows.Media.PathSegmentCollection,System.Int32,System.Windows.Point,System.Windows.Point)">
            <summary>
            Corner Arc is always smaller arc with 90 degree
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometryEffect">
            <summary>
            Provides the base class of GeometryEffect that transform a geometry into another geometry.
            </summary>
            <remarks>
            This class provides the basic implementation of processing the rendered geometry of a IShape before it's passed to rendering.
            A typical implementation will extend the virtual function <see cref="F:ProcessGeometry"/> to transform input geometry.
            <see cref="T:GeometryEffect"/> is typically attached to <see cref="T:IShape"/> as an attached property and activated when <see cref="T:IShape"/> geometry is updated.
            The <see cref="P:OutputGeometry"/> of a <see cref="T:GeometryEffect"/> will replace the rendered geometry in <see cref="T:IShape"/>
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.GetGeometryEffect(System.Windows.DependencyObject)">
            <summary>
            Gets the geometry effect as attached property on given dependency object.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.SetGeometryEffect(System.Windows.DependencyObject,Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Sets the geometry effect as attached property on given dependency object.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.CloneCurrentValue">
            <summary>
            Creates a modifiable clone (deep copy) of the <see cref="T:GeometryEffect"/> using its current values.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.DeepCopy">
            <summary>
            Makes a deep copy of the geometry effect. Implements CloneCurrentValue in Silverlight.
            </summary>
            <returns>A clone of current instance of geometry effect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Equals(Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Tests if given geometry effect is equivalent to the current instance.
            </summary>
            <param name="geometryEffect">a geometry effect compare with.</param>
            <returns>Returns true when two effects renders a same appearance.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometryEffect.cachedGeometry">
            <summary>
            Specifics the geometry from the previous geometry effect process.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.InvalidateGeometry">
            <summary>
            Invalidate the geometry effect without actually compute the geometry.
            It will notify all parent shapes or effects to invalidate accordingly.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.ProcessGeometry(System.Windows.Media.Geometry)">
            <summary>
            Process geometry effect on given input geometry.
            Result is stored in GeometryEffect.OutputGeometry.
            </summary>
            <returns>Return false if nothing has been changed.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.UpdateCachedGeometry(System.Windows.Media.Geometry)">
            <summary>
            Extend the way of updating cachedGeometry based on given input geometry.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Detach">
            <summary>
            Notified when detached from parent chain.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.Attach(System.Windows.DependencyObject)">
            <summary>
            Notified when attached to a parent chain.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.InvalidateParent(System.Windows.DependencyObject)">
            <summary>
            Invalidate the geometry on given dependency object when
            the object is a valid parent type (IShape or GeometryEffect).
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffect.CreateInstanceCore">
            <summary>
            Implement the Freezable in WPF.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.DefaultGeometryEffect">
            <summary>
            The default geometry effect that does nothing but passing through the input geometry.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.OutputGeometry">
            <summary>
            Gets the output geometry of this geometry effect.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.GeometryEffect.Parent">
            <summary>
            Parent can be either IShape or GeometryEffectGroup.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.GeometryEffectConverter">
            <summary>
            Provides the conversion between string and geometry effect
            </summary>
            <remarks>
            This class enables the brief sytax in xaml like <code>GeometryEffect="Sketch"</code>
            It will create a clone of instance of geometry effect so it can be used as resources.
            </remarks>
        </member>
        <member name="F:Microsoft.Expression.Media.GeometryEffectConverter.registeredEffects">
            <summary>
            Build a preset list of supported geometry effects.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A GeometryEffect can be converted from string type.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            A GeometryEffect can be converted to string type.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts a string to a geometry effect.  Fallback value is null.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.GeometryEffectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            Converts a geometry effect into a string.  Fallback value is null.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySourceExtensions">
            <summary>
            Provides helper extension methods to work with IGeometrySource and parameters.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.ArrowType">
            <summary>
            Specifies the Arrow head type.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.NoArrow">
            <summary>
            No arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.Arrow">
            <summary>
            A triagle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.StealthArrow">
            <summary>
            A stealth triangle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.OpenArrow">
            <summary>
            An open triangle arrow head.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.ArrowType.OvalArrow">
            <summary>
            An oval head.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.CornerType">
            <summary>
            Specifies the corner location.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.TopLeft">
            <summary>
            On top left of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.TopRight">
            <summary>
            On top right of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.BottomRight">
            <summary>
            On bottom right of bounding box.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Media.CornerType.BottomLeft">
            <summary>
            On bottom left of bounding box.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.PolygonGeometrySource.ComputeLogicalBounds(System.Windows.Rect,Microsoft.Expression.Media.IGeometrySourceParameters)">
            <summary>
            Polygon think Stretch.None is same as Stretch.Fill
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Media.SketchGeometryEffect">
            <summary>
            A geometry effect to transform any geometry into a Sketch style as in SketchFlow.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.DeepCopy">
            <summary>
            Makes a deep copy of the geometry effect
            </summary>
            <returns>A clone of current instance of geometry effect.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.Equals(Microsoft.Expression.Media.GeometryEffect)">
            <summary>
            Tests if given geometry effect is equivalent to the current instance.
            </summary>
            <param name="geometryEffect">a geometry effect compare with.</param>
            <returns>Returns true when two effects renders a same appearance.</returns>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.UpdateCachedGeometry(System.Windows.Media.Geometry)">
            <summary>
            Updating cachedGeometry based on given input geometry.
            </summary>
            <param name="input">A input geometry</param>
            <returns>Returns true when anything on cachedGeometry has been updated.</returns>
        </member>
        <member name="F:Microsoft.Expression.Media.SketchGeometryEffect.randomSeed">
            <summary>
            Use the same random seed on creation to keep visual flickering minimum
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.SketchGeometryEffect.GetEffectiveSegments(System.Windows.Media.PathFigure)">
            <summary>
            Iterates all simple segments in given path figure including the closing chord.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Shapes.Arc">
            <summary>
            Renderes an Arc shape supporting Arc, Ring and Pie mode controled by ArcThickness.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Shapes.PrimitiveShape">
            <summary>
            Platform neutral implementation of Shape deriving from WPF:Shape or SL:Path
            </summary>
            <summary>
            Provides WPF implementation of Shap who derives from platform Shape.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.CreateGeometrySource">
            <summary>
            Extend how the shape is drawn with creating geometry source
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.MeasureOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Measure pass of Silverlight layout. Classes can override this method to define their own Measure pass behavior.</summary>
            <returns>The size that this object determines it needs during layout, based on its calculations of child object allotted sizes, or possibly on other considerations such as fixed container size.</returns>
            <param name="availableSize">The available size that this object can give to child objects. Infinity (<see cref="F:System.Double.PositiveInfinity" />) can be specified as a value to indicate that the object will size to whatever content is available.</param>
            <remarks>
            In WPF, measure override works from Shape.DefiningGeometry which is not always as expected
            see bug 99497 for details where WPF is not having correct measure by default.
            
            In Silverlight, measure override on Path does not work the same as primitive shape works.
            
            We should return the smallest size this shape can correctly render without clipping.
            By default a shape can render as small as a dot, therefore returning the strokethickness.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Shapes.PrimitiveShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Shapes.PrimitiveShape"/>  will recompute the Geometry when it's invalidated and update the RenderedGeometry, and GeometryMargin.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Shapes.PrimitiveShape.GeometryMargin">
            <summary>
            Gets or sets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Shapes.PrimitiveShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.PrimitiveShape.RenderedGeometry">
            <summary>
            Gets a value that represents the final rendered <see cref="T:System.Windows.Media.Geometry"/> of a <see cref="T:System.Windows.Shapes.Shape"/>.
            </summary>
            <returns>The final rendered <see cref="T:System.Windows.Media.Geometry"/> of a <see cref="T:System.Windows.Shapes.Shape"/>.</returns>
            <remarks>The WPF primitive shape hides base class RenderedGeometry to provide a local storage and matches Silverlight primitive shape interface.</remarks>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.StartAngle">
            <summary>
            Gets or sets the start angle.
            </summary>
            <value>The start angle in degrees. 0 degree is pointing up.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.EndAngle">
            <summary>
            Gets or sets the end angle.
            </summary>
            <value>The end angle in degree. 0 degree is pointing up.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.ArcThickness">
            <summary>
            Gets or sets the arc thickness.
            </summary>
            <value>The arc thickness in pixels or percentage depending on "ArcThicnessUnit"/>.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.Arc.ArcThicknessUnit">
            <summary>
            Gets or sets the arc thickness unit.
            </summary>
            <value>The arc thickness unit, either pixel or percentage.</value>
        </member>
        <member name="T:Microsoft.Expression.Shapes.BlockArrow">
            <summary>
            Renders a block arrow shape supporting resizable arrow head and body.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.Orientation">
            <summary>
            Gets or sets the orientation.
            </summary>
            <value>The orientation where the arrow is pointing to.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.ArrowheadAngle">
            <summary>
            Gets or sets the arrowhead angle.
            </summary>
            <value>The arrowhead angle in degrees.</value>
        </member>
        <member name="P:Microsoft.Expression.Shapes.BlockArrow.ArrowBodySize">
            <summary>
            Gets or sets the size of the arrow body.
            </summary>
            <value>The size of the arrow body in pixels.</value>
        </member>
        <member name="T:Microsoft.Expression.Shapes.RegularPolygon">
            <summary>
            Renders a regular polygon shape or corresponding star shape with variable number of points.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.RegularPolygon.PointCount">
            <summary>
            Gets or sets the number of points of the <see cref="T:Microsoft.Expression.Shapes.RegularPolygon"/>
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Shapes.RegularPolygon.InnerRadius">
            <summary>
            Gets or sets the the distance between the center and the innermost point.
            </summary>
            <value>The distance between the center and the innermost point.</value>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\zh-Hant\Microsoft.Expression.Controls.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Controls</name>
    </assembly>
    <members>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.Initialize">
            <summary>
            Called before we loop over the polylines.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.ShouldBreak(System.Int32)">
            <summary>
            Checks whether or not we should continue looping over the polylines.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnPolylineBegin(Microsoft.Expression.Drawing.Core.PolylineData)">
            <summary>
            Called before we begin marching a new polyline.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnPolylineCompleted(System.Double)">
            <summary>
            Called when we walk off the end of a polyline.
            </summary>
            <param name="remaingLength">The remaining arclength in the polyline.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.OnStepCompleted(System.Double)">
            <summary>
            Called when we sucessfully complete a step.
            </summary>
            <param name="actualStepDistance">The actual step distance.
            This may be different than Step if we have wrapped to another polyline.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.DistributionStrategy.Distribute(Microsoft.Expression.Controls.PathPanel,System.Int32,System.Int32)">
            <summary>
            Distributes the children of a path panel along a given layout path.
            </summary>
            <param name="pathPanel">The path panel.</param>
            <param name="pathIndex">The index of the path in pathPanel.LayoutPaths.</param>
            <param name="childIndex">The index of the first child to be laid out on this path.</param>
            <returns>The index of the next child to be distributed. If childIndex is returned, this function has done nothing.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.ChildIndex">
            <summary>
            The index of the next child to be arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Span">
            <summary>
            The distance in arclength that we want to use for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Step">
            <summary>
            The distance in arclength to walk along the current polyline.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.DistributionStrategy.Capacity">
            <summary>
            The total number of elements to be arranged on the LayoutPath.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.EvenDistributionStrategy">
            <summary>
            Distributes the children of a path panel along a layout path.
            Even distribution means that there is equal arclength between the centers of all
            the elements on the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.ChangedPathLayoutProperties">
            <summary>
            Specifies which path layout properties have changed.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs">
            <summary>
            Provides data for the <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs.#ctor(Microsoft.Expression.Controls.ChangedPathLayoutProperties)">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs"/> class.
            </summary>
            <param name="changedProperties">The data for the event.</param>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutUpdatedEventArgs.ChangedProperties">
            <summary>
            Gets the properties changed in a <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathLayoutData">
            <summary>
            Encapsulates the data needed to update a <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LayoutPathIndex">
            <summary>
            Gets or sets the index of the path on which an element is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.GlobalIndex">
            <summary>
            Gets or sets the index of an element in a collection of elements.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LocalIndex">
            <summary>
            Gets or sets the index of an element on a path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.GlobalOffset">
            <summary>
            Gets or sets the offset of an element proportional to the total length of a collection of paths.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.LocalOffset">
            <summary>
            Gets or sets the offset of an element proportional to the length of path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.NormalAngle">
            <summary>
            Gets or sets the angle perpendicular to the path at an element's location.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathLayoutData.OrientationAngle">
            <summary>
            Gets or sets the angle perpendicular to the path at an element's location if the element is oriented to the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.IPathLayoutItem">
            <summary>
            Represents an element that is arranged by a <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </summary>
            <remarks>
            Implementing this interface enables <see cref="T:Microsoft.Expression.Controls.PathPanel"/> to set these properties when the element is arranged.
            This interface is not intended for general implementation.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.IPathLayoutItem.Update(Microsoft.Expression.Controls.PathLayoutData)">
            <summary>
            Updates the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/> properties based on the given <see cref="T:Microsoft.Expression.Controls.PathLayoutData"/> and raises the <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/> event.
            </summary>
            <param name="data">The data needed to update the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/>.</param>
        </member>
        <member name="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated">
            <summary>
            Occurs when one or more of the <see cref="T:Microsoft.Expression.Controls.IPathLayoutItem"/> properties change.
            </summary>
            <remarks>
            This event is raised whenever the item’s position along the path is updated. This can occur due to changes in the properties on the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> or changes to <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LayoutPathIndex">
            <summary>
            Gets the index of the path on which the item is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalIndex">
            <summary>
            Gets the index of the item in a collection of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalIndex">
            <summary>
            Gets the index of the item on the path on which it is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalOffset">
            <summary>
            Gets the offset of the item proportional to the total length of a collection of paths.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalOffset">
            <summary>
            Gets the offset of the item proportional to the length of the path on which it is arranged.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.NormalAngle">
            <summary>
            Gets the angle perpendicular to the path at the item's location.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.IPathLayoutItem.OrientationAngle">
            <summary>
            Gets the angle perpendicular to the path at the items's location if the item is oriented to the path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.Distribution">
            <summary>
            Specifies the distribution of a <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.Orientation">
            <summary>
            Specifies the orientation of elements on a <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.FillBehavior">
            <summary>
            Specifies the method for altering the <see cref="P:Microsoft.Expression.Controls.LayoutPath.Span"/> on an open path.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.LayoutPath">
            <summary>
            Describes a path along which elements are arranged.
            </summary>
        </member>
        <member name="F:Microsoft.Expression.Controls.LayoutPath.transformedPolylines">
            <summary>
            Ideally, we want to cache the Bezier curves before flattening, because transform will affect flattening.
            That requires us to cache curves that we don't support very well yet.  Instead, we cache the flatten points
            in distribution strategy and transform them on demand.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.SourceElement">
            <summary>
            Gets or sets the element that defines the path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Distribution">
            <summary>
            Gets or sets whether items are laid out evenly or with a fixed padding.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Capacity">
            <summary>
            Gets or sets the maximum number of items displayed on the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Padding">
            <summary>
            Gets or sets the distance in pixels along the arc length of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> between two items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Orientation">
            <summary>
            Gets or sets the orientation of the items.
            </summary>
            <remarks>
            This property is supported on <see cref="T:Microsoft.Expression.Controls.PathListBox"/>, but not <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </remarks>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Start">
            <summary>
            Gets or sets the distance from the start of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> to place the first item.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.Span">
            <summary>
            Gets or sets the percentage of the <see cref="T:Microsoft.Expression.Controls.LayoutPath"/> that participates in layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.FillBehavior">
            <summary>
            Gets or set the method to alter <see cref="P:Microsoft.Expression.Controls.LayoutPath.Span"/> on an open path.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.ActualCapacity">
            <summary>
            Gets the computed Capacity.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.LayoutPath.IsValid">
            <summary>
            Gets whether or not the <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/> is valid in the context.
            A <see cref="P:Microsoft.Expression.Controls.LayoutPath.SourceElement"/> is invalid if it is a descendant of the <see cref="T:Microsoft.Expression.Controls.PathPanel"/> in which it used.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PaddedDistributionStrategy">
            <summary>
            Distributes the children of a layout path based on the size of the children and a given padding between the children.
            The distance in arclength between children is determined by the padding plus the sum of the radii of the children's bounding boxes.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathListBox">
            <summary>
            Contains a list of items that are laid out along one or more paths.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathListBox"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.GetContainerForItemOverride">
            <summary>
            Creates the element used to display a specified item.
            </summary>
            <returns>A <see cref="T:Microsoft.Expression.Controls.PathListBoxItem"/> corresponding to a specified item.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own item container.
            </summary>
            <returns>true if the item is its own item container; otherwise, false.</returns>
            <param name="item">The specified item.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBox.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements.
            </summary>
            <param name="finalSize">The size that this object should use to arrange its child elements.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.LayoutPaths">
            <summary>
            Gets or sets a collection of objects that define the path(s) used for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.StartItemIndex">
            <summary>
            Gets or sets the index to use within the list of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBox.WrapItems">
            <summary>
            Gets or sets whether the item index wraps to the beginning of the collection when StartItemIndex is greater than 0.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathListBoxItem">
            <summary>
            Represents an item in a <see cref="T:Microsoft.Expression.Controls.PathListBox"/>.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBoxItem.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathListBoxItem"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathListBoxItem.Update(Microsoft.Expression.Controls.PathLayoutData)">
            <summary>
            For a description of this member, see <see cref="M:Microsoft.Expression.Controls.IPathLayoutItem.Update(Microsoft.Expression.Controls.PathLayoutData)"/>.
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Controls.PathListBoxItem.PathLayoutUpdated">
            <summary>
            For a description of this member, see <see cref="E:Microsoft.Expression.Controls.IPathLayoutItem.PathLayoutUpdated"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LayoutPathIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LayoutPathIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.GlobalIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LocalIndex">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalIndex"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.GlobalOffset">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.GlobalOffset"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.LocalOffset">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.LocalOffset"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.NormalAngle">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.NormalAngle"/>.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathListBoxItem.OrientationAngle">
            <summary>
            For a description of this member, see <see cref="P:Microsoft.Expression.Controls.IPathLayoutItem.OrientationAngle"/>.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.PathPanel">
            <summary>
            Arranges child elements along one or more path.
            </summary>
            <remarks>
            <see cref="T:Microsoft.Expression.Controls.PathPanel"/> can be used as an alternative to <see cref="T:Microsoft.Expression.Controls.PathListBox"/> when selection is not necessary.
            The <see cref="P:Microsoft.Expression.Controls.LayoutPath.Orientation"/> property is not supported on <see cref="T:Microsoft.Expression.Controls.PathPanel"/>.
            </remarks>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.Expression.Controls.PathPanel"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the size required for child elements.
            </summary>
            <param name="availableSize">The available size that this element can give to child elements. </param>
            <returns>The size that this element determines it needs during layout, based on its calculations of child element sizes.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Positions child elements.
            </summary>
            <param name="finalSize">The size that this object should use to arrange its child elements.</param>
            <returns>The actual size used.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.ArrangeChild(System.Int32,System.Int32,Microsoft.Expression.Drawing.Core.PolylineData,Microsoft.Expression.Drawing.Core.MarchLocation,System.Int32)">
            <summary>
            Arranges the child at the given index at a particular location on a LayoutPath.
            </summary>
            <param name="indirectIndex">An index from the range 0 to PathPanel.Count.</param>
            <param name="pathIndex">The index of the layout path on which to arrange the child.</param>
            <param name="polyline">The polyline in the layout path.</param>
            <param name="location">The location on the polyline.</param>
            <param name="localIndex">The index of the child on the LayoutPath.</param>
        </member>
        <member name="M:Microsoft.Expression.Controls.PathPanel.GetChildRadius(System.Int32)">
            <summary>
            Calculates the radius of the bounding circle for the child at the given index.
            </summary>
            <param name="indirectIndex">An index from the range 0 to PathPanel.Count.</param>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.LayoutPaths">
            <summary>
            Gets or sets a collection of objects that define the path(s) used for layout.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.StartItemIndex">
            <summary>
            Gets or sets the index to use within the list of items.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.WrapItems">
            <summary>
            Gets or sets whether the item index wraps to the beginning of the collection when StartItemIndex is greater than 0.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.ValidPaths">
            <summary>
            The subset of LayoutPaths that are attached and not Collapsed.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Controls.PathPanel.Count">
            <summary>
            Count is the number of Children that the PathPanel will layout.
            If StartItemIndex > 0 and WrapItems is false, this can be less than PathPanel.Children.Count
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetItemsHost(System.Windows.Controls.ItemsControl)">
            <summary>
            Gets the Panel that contains the containers of an ItemsControl.
            </summary>
            <param name="control">The ItemsControl.</param>
            <returns>
            The Panel that contains the containers of an ItemsControl, or null
            if the Panel could not be found.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="control" /> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.TraverseBreadthFirst``1(``0,System.Func{``0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Traverses a tree by accepting an initial value and a function that 
            retrieves the child nodes of a node.
            </summary>
            <typeparam name="T">The type of the stream.</typeparam>
            <param name="initialNode">The initial node.</param>
            <param name="getChildNodes">A function that retrieves the child
            nodes of a node.</param>
            <param name="traversePredicate">A predicate that evaluates a node
            and returns a value indicating whether that node and it's children
            should be traversed.</param>
            <returns>A stream of nodes.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetVisualChildren(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element.
            </summary>
            <param name="element">The element.</param>
            <returns>The visual tree children of an element.</returns>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="element"/> is null.
            </exception>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetVisualChildrenAndSelfIterator(System.Windows.DependencyObject)">
            <summary>
            Get the visual tree children of an element and the element itself.
            </summary>
            <param name="element">The element.</param>
            <returns>
            The visual tree children of an element and the element itself.
            </returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetLogicalChildren(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical children of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
        <member name="M:Microsoft.Expression.Controls.Utilities.GetLogicalDescendents(System.Windows.FrameworkElement)">
            <summary>
            Retrieves all the logical descendents of a framework element using a 
            breadth-first search. For performance reasons this method manually 
            manages the stack instead of using recursion.
            </summary>
            <param name="parent">The parent framework element.</param>
            <returns>The logical children of the framework element.</returns>
        </member>
    </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\Silverlight\Blend\.NETFramework\v4.0\Libraries\zh-Hant\Microsoft.Expression.Drawing.xml ===
<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.Expression.Drawing</name>
    </assembly>
    <members>
        <member name="T:Microsoft.Expression.Controls.Callout">
            <summary>
            Renders a callout shape supporting several shapes combined with a callout arrow.
            </summary>
        </member>
        <member name="T:Microsoft.Expression.Controls.CompositeContentShape">
             <summary>
             Provides a base class of a composite shape that derives from <see cref="T:System.Windows.Controls.ContentControl"/> and implements <see cref="T:Microsoft.Expression.Media.IShape"/>.
             </summary>
             <remarks>
             <see cref="T:Microsoft.Expression.Controls.CompositeContentShape"/> implements <see cref="T:Microsoft.Expression.Media.IShape"/> interface,
             and supports rendering a geometry similar to <see cref="T:System.Windows.Shapes.Shape"/>, but the geometry can be rendered outside of layout boundary.
             
             A typical implementation will have a customized default template in generic.xaml which template-binds most shape properties to a <see cref="T:System.Windows.Shapes.Path"/>.
             It should also extend the <see cref="P:GeometrySource"/> property to customize the appearance of the <see cref="T:System.Windows.Shapes.Path"/>.
            
             This class also supports showing content together with the shape.
             </remarks>
        </member>
        <member name="T:Microsoft.Expression.Media.IGeometrySourceParameters">
            <summary>
            Provides an interface to discribe the parameters of a Shape.
            </summary>
            <remarks>
            This interface is the data for communication between Shape and GeometrySource.
            Typically a concrete implementation of IShape will implements this interface and pass it into
            GeometrySource.UpdateGeometry(), who will consume the shape as readonly data provider.
            </remarks>
        </member>
        <member name="T:Microsoft.Expression.Media.IShape">
            <summary>
            Provides the necessary interface to define a Shape.
            Both primitive and composite shapes need to match this interface, although they might derive from different type of FrameworkElement.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Media.IShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Fill">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how to paint the interior of the shape.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that describes how the shape's interior is painted. The default is null. See Remarks.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Stroke">
            <summary>Gets or sets the <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</summary>
            <returns>A <see cref="T:System.Windows.Media.Brush" /> that specifies how the <see cref="T:System.Windows.Shapes.Shape" /> outline is painted.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.StrokeThickness">
            <summary>Gets or sets the width of the <see cref="T:System.Windows.Shapes.Shape" /> stroke outline. </summary>
            <returns>The width of the <see cref="T:System.Windows.Shapes.Shape" /> outline, in pixels.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.Stretch">
            <summary>Gets or sets a <see cref="T:System.Windows.Media.Stretch" /> enumeration value that describes how the shape fills its allocated space.</summary>
            <returns>One of the <see cref="T:System.Windows.Media.Stretch" /> enumeration values. The default value at run time depends on the type of <see cref="T:System.Windows.Shapes.Shape" />.</returns>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.RenderedGeometry">
            <summary>
            Gets the rendered geometry presented by the rendering engine.
            </summary>
        </member>
        <member name="P:Microsoft.Expression.Media.IShape.GeometryMargin">
            <summary>
            Gets the margin between logical bounds and actual geometry bounds.
            This can be either positive (as in <see cref="T:Microsoft.Expression.Shapes.Arc"/>) or negative (as in <see cref="T:Microsoft.Expression.Controls.Callout"/>).
            </summary>
        </member>
        <member name="E:Microsoft.Expression.Media.IShape.RenderedGeometryChanged">
            <summary>
            Occurs when RenderedGeometry is changed.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.CreateGeometrySource">
            <summary>
            Extends how the shape is drawn with creating geometry source.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.InvalidateGeometry">
            <summary>
            Invalidates the geometry for a <see cref="T:Microsoft.Expression.Media.IShape"/>. After the invalidation, the <see cref="T:Microsoft.Expression.Media.IShape"/> will recompute the geometry, which will occur asynchronously.
            </summary>
        </member>
        <member name="M:Microsoft.Expression.Controls.CompositeContentShape.ArrangeOverride(System.Windows.Size)">
            <summary>Provides the behavior for the Arrange pass of Silverlight layout. Classes can override this method to define their own Arrange pass behavior.</summary>
            <returns>The actual size used once the element is arranged in layout.</returns>
            <param name="finalSize">The final area within the parent that this object should use to arrange itself and its children.</param>
            <remarks> <see cref="T:Microsoft.Expression.Controls.CompositeContentShape"/>  will rec