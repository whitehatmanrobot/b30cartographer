0x7c168617
0xffb57680  0x7d158919 0x7d138515 0x81178315 0x82138615
0xffb57690  0x7e158714 0x7c148417 0x7a147d16 0x7d147a13
0xffb576a0  0x7e127f13 0x801a7e14 0x84138111 0x89138617
0xffb576b0  0x84158311 0x7c178811 0x7c15871b 0x83117c17
0xffb576c0  0x80157915 0x81147f14 0x7e158211 0x78198017
0xffb576d0  0x7d178318 0x8515851b 0x84138617 0x7c148817
0xffb576e0  0x7d158216 0x76118212 0x7513840f 0x85128610
0xffb576f0  0x85198112 0x83118413 0x7f118913 0x7b118815
0xffb57700  0x80148012 0x7e118412 0x7e128015 0x86107a11
0xffb57710  0x85127d11 0x83137f13 0x87138512 0x860f8413
0xffb57720  0x81147c14 0x81147d13 0x80137f17 0x82118014
0xffb57730  0x82158015 0x8019820d 0x76128b13 0x80158616
0xffb57740  0x8a168411 0x8b138717 0x84178616 0x79178314
0xffb57750  0x7d168613 0x80118a15 0x7c188212 0x79138312
0xffb57760  0x78148415 0x80158015 0x86148611 0x7e148516
0xffb57770  0x7e128111 0x84127c16 0x7f127d11 0x7b108311
0xffb57780  0x780b8814 0x7314890d 0x71188a11 0x791b7f11
0xffb57790  0x7a167f13 0x79158312 0x85127c15 0x7e117f0e
0xffb577a0  0x7812840f 0x7a168117 0x7e1b8120 0x87227f18
0xffb577b0  0x82248428 0x8326802f 0x852b7b2c 0x852b7829
0xffb577c0  0x852a7822 0x8224801c 0x81237f21 0x8a247924
0xffb577d0  0x8d267a31 0x88248129 0x852f812a 0x89287d29
0xffb577e0  0x8b267a29 0x87257e24 0x83207b23 0x801c7e19
0xffb577f0  0x7c1c821d 0x761d801a 0x7b1b8217 0x811d8719
0xffb57800  0x81188818 0x7f158219 0x80178313 0x85157e37
0xffb57810  0x7e697f82 0x809580a5 0x80a980ac 0x80ab80af
0xffb57820  0x80a780a8 0x80aa80a5 0x809a8082 0x83678343
0xffb57830  0x832f8524 0x72219326 0x6f259627 0x6a279426
0xffb57840  0x6c269426 0x73238a23 0x7d1f892a 0x7f7280a2
0xffb57850  0x80c180d7 0x80da80d9 0x80d880d7 0x80d780d7
0xffb57860  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb57870  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb57880  0x86148112 0x91167f11 0x8a137e15 0x7f0f8115
0xffb57890  0x7f118515 0x8611830e 0x7d11810f 0x750f800f
0xffb578a0  0x7b127f0f 0x7b0d7f10 0x8313810f 0x92138613
0xffb578b0  0x860f850f 0x76097a12 0x730d7b10 0x75118012
0xffb578c0  0x7c118414 0x82148611 0x88157f12 0x7d147e12
0xffb578d0  0x76138113 0x7f127c13 0x81157d0f 0x81138415
0xffb578e0  0x7e12830f 0x83128417 0x81158411 0x79118318
0xffb578f0  0x7f158115 0x71128514 0x79178716 0x80148615
0xffb57900  0x7e148715 0x7f198515 0x87178217 0x8a19831b
0xffb57910  0x83138716 0x8213861a 0x7d158116 0x76147b11
0xffb57920  0x7b177f14 0x86148016 0x89168313 0x8c158614
0xffb57930  0x8e168615 0x7d158916 0x760f8a17 0x84197e10
0xffb57940  0x80167d16 0x81138418 0x84118516 0x7f198114
0xffb57950  0x7d1b8215 0x841d8518 0x8a1b8517 0x7f178617
0xffb57960  0x82168413 0x7a13840b 0x76117f10 0x85138215
0xffb57970  0x82118713 0x85168215 0x80138411 0x77148a13
0xffb57980  0x7a0f8615 0x7f14830f 0x81128314 0x84128212
0xffb57990  0x85117e12 0x80137e11 0x8011821b 0x85148310
0xffb579a0  0x7f178314 0x7d148016 0x82157b13 0x8a177e17
0xffb579b0  0x8a108317 0x83138713 0x72118914 0x7b158416
0xffb579c0  0x8c198511 0x901a8915 0x82178717 0x74138419
0xffb579d0  0x7d168215 0x83178114 0x7b138217 0x73138614
0xffb579e0  0x750f831b 0x7d128317 0x83158716 0x80158412
0xffb579f0  0x7f167f17 0x81177c0d 0x7c127f15 0x7e11870d
0xffb57a00  0x7d138612 0x6f0d8414 0x7011851a 0x7c168214
0xffb57a10  0x7c138615 0x79118515 0x7f0d7a13 0x780f7b0d
0xffb57a20  0x75118015 0x78138117 0x7d1c8221 0x7f23841c
0xffb57a30  0x792e832d 0x802e7e36 0x87337e33 0x89347b31
0xffb57a40  0x88327c30 0x862c8429 0x83228128 0x8b2c7e2c
0xffb57a50  0x922d803e 0x8d398232 0x89317d2d 0x8c2d782e
0xffb57a60  0x89297b29 0x89308123 0x831b7e21 0x7d1f8215
0xffb57a70  0x7d1f861c 0x7d1a821c 0x86218117 0x8c20861d
0xffb57a80  0x7a158813 0x72158217 0x83187e15 0x84198036
0xffb57a90  0x7f657f84 0x809c80a4 0x80aa80ae 0x80ae80a8
0xffb57aa0  0x80ab80a9 0x80ab80a5 0x81997f84 0x88647e43
0xffb57ab0  0x88298522 0x6d229126 0x6c279325 0x6e269226
0xffb57ac0  0x6d278f23 0x741d8b26 0x81208c2d 0x7f7580a5
0xffb57ad0  0x80be80d6 0x80da80d9 0x80d880d8 0x80d480d9
0xffb57ae0  0x80d880d7 0x80d780d7 0x80d680d9 0x80d280d1
0xffb57af0  0x80d880d9 0x80d680d7 0x80d680d3 0x80d780d3
0xffb57b00  0x7e148615 0x88157911 0x87147e12 0x7f148713
0xffb57b10  0x79118812 0x80158210 0x820f7c13 0x74107f0f
0xffb57b20  0x790f7d0d 0x7f157e0e 0x81108511 0x820a8713
0xffb57b30  0x7d108111 0x770d760f 0x7812770c 0x7b13810d
0xffb57b40  0x77138316 0x790f8213 0x7f128013 0x76128012
0xffb57b50  0x75138011 0x7f177d11 0x7e13800e 0x7f15860d
0xffb57b60  0x7c158413 0x7a128614 0x7c178514 0x76138417
0xffb57b70  0x7b178715 0x77198813 0x7e158518 0x8115841b
0xffb57b80  0x78168413 0x791a8412 0x84197e14 0x88157f15
0xffb57b90  0x84168413 0x83178317 0x79158219 0x6f177d11
0xffb57ba0  0x78117d15 0x7f158115 0x82158414 0x80158715
0xffb57bb0  0x7d148519 0x75138813 0x72168a16 0x81148117
0xffb57bc0  0x80138016 0x7e168713 0x7e178918 0x7e17821e
0xffb57bd0  0x7c198113 0x811d831b 0x82198218 0x7b178217
0xffb57be0  0x8116860f 0x7e118312 0x7f127612 0x86157c0e
0xffb57bf0  0x7d0f8915 0x7c177f14 0x80147c10 0x7a128911
0xffb57c00  0x7c128817 0x84168014 0x82148313 0x7d148811
0xffb57c10  0x85147e15 0x83127b13 0x7d138115 0x7f178412
0xffb57c20  0x7c138814 0x7c178215 0x821a7513 0x86197b11
0xffb57c30  0x81178815 0x7d148b15 0x77118719 0x7c158118
0xffb57c40  0x85138418 0x890f8918 0x87178816 0x7c168319
0xffb57c50  0x7f157c17 0x841d7615 0x7b158011 0x76158615
0xffb57c60  0x7c198115 0x7d13841c 0x81138716 0x82158218
0xffb57c70  0x81127c12 0x85137a14 0x83147e11 0x82118711
0xffb57c80  0x80188311 0x7c157e12 0x7c137e15 0x7f148111
0xffb57c90  0x81138b15 0x7a13840f 0x7812790e 0x78117411
0xffb57ca0  0x75147a13 0x7d137f17 0x861a801e 0x8128871f
0xffb57cb0  0x7b2e8231 0x7b317d3d 0x7c327d35 0x84347c31
0xffb57cc0  0x86337e35 0x842e8532 0x8432823c 0x874f7d5b
0xffb57cd0  0x8561826b 0x846e8165 0x885c7a4a 0x8d347634
0xffb57ce0  0x882e7b2a 0x842b8224 0x7d238121 0x7c1e851b
0xffb57cf0  0x7d1d8721 0x841f841a 0x881a801c 0x8917841c
0xffb57d00  0x801a8817 0x78177f17 0x82197918 0x851b812c
0xffb57d10  0x7e627f82 0x80957fa0 0x80a780ad 0x80ac80a7
0xffb57d20  0x80a780a7 0x80a880a6 0x81997d86 0x91677b4a
0xffb57d30  0x8e2d831f 0x6c248f28 0x68258f25 0x74248e24
0xffb57d40  0x74268a24 0x77218b22 0x811d8d25 0x7f7081a0
0xffb57d50  0x80bc80d6 0x80da80da 0x80d880d7 0x80d780d7
0xffb57d60  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb57d70  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb57d80  0x79128711 0x7e167e14 0x87138113 0x83158616
0xffb57d90  0x75138414 0x7a128411 0x8410840b 0x740d830e
0xffb57da0  0x780b7f16 0x830d820f 0x8310830e 0x780c860e
0xffb57db0  0x760f810f 0x780f7b0e 0x7d0f7d12 0x880d7e0e
0xffb57dc0  0x7612800d 0x72128013 0x7a15820f 0x70118612
0xffb57dd0  0x76118311 0x82137f15 0x7e158113 0x7f148716
0xffb57de0  0x7c138517 0x730f8415 0x78198311 0x79158514
0xffb57df0  0x7c198613 0x7d178716 0x84168419 0x85178016
0xffb57e00  0x72138118 0x75178417 0x80198517 0x84168619
0xffb57e10  0x86138416 0x87198417 0x78168312 0x6a178114
0xffb57e20  0x75178417 0x7c168712 0x7d1d8714 0x73148911
0xffb57e30  0x6c198813 0x6c138a18 0x73178b15 0x80148418
0xffb57e40  0x82148213 0x7d178314 0x7d138417 0x80197d1b
0xffb57e50  0x7c137f1d 0x7f19841a 0x791b8413 0x75188318
0xffb57e60  0x81148517 0x84128411 0x87107a15 0x8b147e13
0xffb57e70  0x7b148814 0x71118314 0x7c128414 0x81168911
0xffb57e80  0x83148615 0x8a158312 0x87188410 0x7a138214
0xffb57e90  0x87177c13 0x87177e11 0x7c168214 0x7c148015
0xffb57ea0  0x7d168517 0x7c158313 0x80197a14 0x82147d16
0xffb57eb0  0x7f168713 0x7c178815 0x7a158419 0x7e168215
0xffb57ec0  0x7e138418 0x84178918 0x8e17851b 0x8314851a
0xffb57ed0  0x7f188417 0x84177c19 0x7c118115 0x7d148615
0xffb57ee0  0x86187e16 0x80168012 0x7f1d8411 0x84167e15
0xffb57ef0  0x86137c13 0x8b167d0f 0x8b158111 0x8815840f
0xffb57f00  0x84148213 0x88118412 0x83118416 0x84158114
0xffb57f10  0x89178312 0x7d107d0f 0x71117b0f 0x78117c11
0xffb57f20  0x74158311 0x7f13841f 0x8e17821d 0x862a8121
0xffb57f30  0x802d7f33 0x74347f33 0x70307f39 0x80347e34
0xffb57f40  0x86338139 0x843d854a 0x87537e58 0x83657c76
0xffb57f50  0x82837e86 0x818a7f81 0x84737f62 0x8d467d3d
0xffb57f60  0x882c7e28 0x80287e28 0x7a207f22 0x7e21861c
0xffb57f70  0x811c871d 0x8e1f831f 0x8e1d7b17 0x88177c1e
0xffb57f80  0x89188415 0x7f198112 0x7e177c17 0x88157f36
0xffb57f90  0x7e647f7f 0x7f9680a5 0x80a980ab 0x80ac80aa
0xffb57fa0  0x80ab80a5 0x80a780a8 0x809d7f84 0x96677e45
0xffb57fb0  0x922a8424 0x71258b23 0x67228c24 0x7a2b8d20
0xffb57fc0  0x7c278a23 0x7a218d23 0x82239028 0x7e6e819f
0xffb57fd0  0x80bd80d5 0x80da80da 0x80d880d8 0x80d480d9
0xffb57fe0  0x80d880d8 0x80d380d9 0x80d880d2 0x80d380d5
0xffb57ff0  0x80d980d6 0x80d480d2 0x80d580d6 0x80d680d4
0xffb58000  0x7e13880f 0x7c158314 0x82128213 0x7f138314
0xffb58010  0x79147f14 0x7a118213 0x7a0c8b0f 0x7412850f
0xffb58020  0x780f810f 0x820e840b 0x830e820f 0x7c0f830e
0xffb58030  0x7b0e7f11 0x7d0f7d11 0x7d0d810f 0x82117913
0xffb58040  0x7b10790f 0x780f7d13 0x7d10830d 0x7d158b10
0xffb58050  0x82168615 0x85148015 0x81158015 0x7a138710
0xffb58060  0x7b158814 0x7d0f8015 0x7c147f14 0x750f8412
0xffb58070  0x7c148511 0x811b8310 0x88148216 0x88197b15
0xffb58080  0x79157d14 0x76118317 0x78138a15 0x7a168a15
0xffb58090  0x7e158419 0x83178213 0x7916821b 0x71158213
0xffb580a0  0x78168816 0x79168917 0x7e198810 0x7a168917
0xffb580b0  0x74158917 0x7819881a 0x7c1a8815 0x7f198717
0xffb580c0  0x7d178316 0x80187f13 0x83197c14 0x801f7718
0xffb580d0  0x7c177d1d 0x7e178419 0x7b19841b 0x7919821b
0xffb580e0  0x7e168413 0x80158415 0x83157d12 0x83148016
0xffb580f0  0x7a158511 0x78148516 0x7d118813 0x7d148617
0xffb58100  0x7e148313 0x86148513 0x87168315 0x81107c15
0xffb58110  0x80177817 0x7f0f8019 0x7d148311 0x801a7c13
0xffb58120  0x7f188216 0x79178317 0x7c147e17 0x84147e18
0xffb58130  0x85158219 0x7d15811c 0x7d168016 0x85188318
0xffb58140  0x85168416 0x8213871e 0x851b8214 0x7d1b8712
0xffb58150  0x781b8819 0x7816821b 0x7a178019 0x85148218
0xffb58160  0x881d7917 0x83167a14 0x82158016 0x85187919
0xffb58170  0x82137b13 0x83117e14 0x8916810e 0x87178014
0xffb58180  0x83157f15 0x86178a11 0x820f8919 0x851a8012
0xffb58190  0x85177c15 0x82117712 0x79117b11 0x7b10830d
0xffb581a0  0x7c108a12 0x7d16871a 0x8819831c 0x81277c27
0xffb581b0  0x7d2b7c2c 0x7a2d812d 0x752c8131 0x7f317f26
0xffb581c0  0x84398241 0x814f835e 0x80677c71 0x81787a88
0xffb581d0  0x81967f9a 0x81978090 0x82828274 0x8760834b
0xffb581e0  0x88367e2a 0x80227a29 0x7a237e1e 0x7a19851c
0xffb581f0  0x801e871b 0x8a208122 0x871b7622 0x85187316
0xffb58200  0x85178015 0x7c168219 0x7e187c1b 0x87177d2b
0xffb58210  0x7f607f7e 0x7f9380a2 0x80a980a7 0x80ac80a9
0xffb58220  0x80a880a6 0x80a780a6 0x809c7f87 0x926a804a
0xffb58230  0x932e8326 0x77248925 0x6e238925 0x77228b25
0xffb58240  0x74258821 0x7d218d1f 0x7f1f9325 0x7c63819c
0xffb58250  0x80b980cf 0x80da80da 0x80d880d7 0x80d780d7
0xffb58260  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb58270  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d8
0xffb58280  0x87118313 0x7c107f19 0x7f118214 0x7d118311
0xffb58290  0x7b127f13 0x78138511 0x73068d11 0x750d870d
0xffb582a0  0x7c0f7f0f 0x8411830d 0x840f830a 0x8213810f
0xffb582b0  0x820e7f0c 0x85117a0f 0x7e117c0c 0x7c0e7e11
0xffb582c0  0x8011800e 0x81108212 0x810f8813 0x8a128c12
0xffb582d0  0x92138515 0x8b0e8011 0x86178313 0x78128a0e
0xffb582e0  0x7c128613 0x89137d13 0x81138113 0x73108916
0xffb582f0  0x7d148514 0x86178819 0x8b148917 0x8b167f15
0xffb58300  0x7f158215 0x79158516 0x77178417 0x73168817
0xffb58310  0x77188718 0x8119871b 0x7c138715 0x7c148212
0xffb58320  0x80178715 0x7b158814 0x81158719 0x7f108a15
0xffb58330  0x7f178917 0x84198819 0x86198918 0x7d188915
0xffb58340  0x78198818 0x841a8419 0x88158119 0x80197f1c
0xffb58350  0x7d1a801c 0x7e1c841b 0x7f1b8817 0x7d19841b
0xffb58360  0x811b811a 0x81188213 0x82197d0f 0x7d188411
0xffb58370  0x7b148715 0x81148211 0x80168216 0x7b138615
0xffb58380  0x7a11861c 0x82158712 0x8a138118 0x8a0d7c19
0xffb58390  0x7c127e13 0x79168318 0x81168417 0x82178215
0xffb583a0  0x81168317 0x7a198519 0x7c178213 0x881a801f
0xffb583b0  0x89158316 0x7f188217 0x82178018 0x901b841b
0xffb583c0  0x8e19871a 0x8219871b 0x7f17841c 0x7b1b891b
0xffb583d0  0x741b8818 0x6f19811a 0x7a19821d 0x8b1a871b
0xffb583e0  0x8a1d7e19 0x851b7c15 0x871b8618 0x87188417
0xffb583f0  0x80178215 0x7c158415 0x87188315 0x85178318
0xffb58400  0x84158518 0x87178916 0x84158717 0x851b8416
0xffb58410  0x84157f12 0x88107a11 0x7d12810d 0x7f128415
0xffb58420  0x8a158611 0x7f138518 0x861a7f20 0x7c187d20
0xffb58430  0x79217f23 0x83258121 0x80258026 0x80247f29
0xffb58440  0x843d8154 0x80668072 0x7d787e84 0x808d7f9a
0xffb58450  0x80a780ad 0x80ae80a0 0x828d7f82 0x846e7e5b
0xffb58460  0x8a477f31 0x7f257e17 0x7e257e20 0x7a19821e
0xffb58470  0x841b8122 0x88227e1f 0x7b197d20 0x801e791c
0xffb58480  0x7f177f19 0x7b188216 0x801a7c19 0x85117f2d
0xffb58490  0x805e7f80 0x7f9380a1 0x80a980a8 0x80a980a9
0xffb584a0  0x80a880a6 0x80a780a4 0x809d8084 0x906a804a
0xffb584b0  0x952d8122 0x7b268b26 0x74218b25 0x75238a20
0xffb584c0  0x6d238b22 0x81248c1f 0x80228f23 0x7a63819a
0xffb584d0  0x80b580ce 0x80da80d4 0x80d580d5 0x80d680da
0xffb584e0  0x80d780d5 0x80d680d9 0x80d480d2 0x80d380d5
0xffb584f0  0x80d680d6 0x80d380d2 0x80d780d3 0x80d480d2
0xffb58500  0x84127c12 0x80167b15 0x7b118213 0x7d158215
0xffb58510  0x7a157c12 0x7313860b 0x770e8f10 0x7c0e8711
0xffb58520  0x7d0f7e0c 0x820c800b 0x88108110 0x820d8013
0xffb58530  0x7e0e7e0f 0x84117611 0x7a107611 0x750e830f
0xffb58540  0x7a138610 0x7b108613 0x800c8c15 0x850e8c19
0xffb58550  0x89138214 0x8c137e14 0x86118312 0x7a148911
0xffb58560  0x7b158413 0x86157813 0x81158011 0x76118b13
0xffb58570  0x79158414 0x81108c13 0x850f8e14 0x86188215
0xffb58580  0x7f158713 0x76158611 0x7a187c13 0x8113860d
0xffb58590  0x7f158a17 0x7c118815 0x7a108916 0x80177e12
0xffb585a0  0x8113840d 0x7c178519 0x80118314 0x7e158a14
0xffb585b0  0x7f188a19 0x81158819 0x83198818 0x7d188819
0xffb585c0  0x77198d14 0x831b8a1a 0x89178318 0x821b851b
0xffb585d0  0x7c20831c 0x801d8319 0x7c1c8a1d 0x7c1c841f
0xffb585e0  0x7f1c7e1b 0x7f197d18 0x7f157c16 0x7a178710
0xffb585f0  0x791b8516 0x84157b19 0x82177d15 0x78168318
0xffb58600  0x76158718 0x7d178817 0x87197e14 0x85177a18
0xffb58610  0x7f188314 0x7d18851b 0x80178218 0x8117861a
0xffb58620  0x861f831b 0x8219851b 0x7c1f8519 0x821d7f1b
0xffb58630  0x7f1a821d 0x7d1a821c 0x831e7f1a 0x8d1f831d
0xffb58640  0x8c1a8822 0x8a1e8421 0x8c1d841b 0x851f8a1d
0xffb58650  0x7e1e871f 0x7c217e21 0x791d821e 0x7e1d8a1e
0xffb58660  0x7f1e8321 0x801e7d1b 0x8d178818 0x8d1b8c1c
0xffb58670  0x831f8714 0x8a1a861a 0x8c17831a 0x891c8416
0xffb58680  0x8617891d 0x88188815 0x8b1a851b 0x83178416
0xffb58690  0x80168112 0x87117d10 0x7c0e8512 0x7f128312
0xffb586a0  0x8615800d 0x811b8417 0x87227c1d 0x801d7c1e
0xffb586b0  0x791e801d 0x811e7c20 0x841b7d23 0x85257e3a
0xffb586c0  0x83508062 0x7d727f80 0x7f897f95 0x819780a6
0xffb586d0  0x80a880b4 0x80ba80b1 0x81a17f8b 0x857f7c6c
0xffb586e0  0x865c7f46 0x83308222 0x841e7e1f 0x801e7c1c
0xffb586f0  0x821c7a1c 0x82257c1d 0x7a208321 0x801c8017
0xffb58700  0x821e7d17 0x7d188118 0x7f177c18 0x82178126
0xffb58710  0x80587e80 0x7f957f9e 0x80a680aa 0x80a980a8
0xffb58720  0x80a880a5 0x80a480a5 0x7d9d8187 0x8a707f4c
0xffb58730  0x8f327f25 0x7b1f8d27 0x7d248b23 0x76238823
0xffb58740  0x6e228b1f 0x7c218920 0x831d8b1f 0x7d5c8296
0xffb58750  0x80b180cb 0x80da80da 0x80d880d7 0x80d780d7
0xffb58760  0x80d780d7 0x80d780d7 0x80d780d7 0x80d780d7
0xffb58770  0x80d780d7 0x80d780d7 0x80d780d7 0x80d680c1
0xffb58780  0x80147c13 0x85137d16 0x79128213 0x7b148013
0xffb58790  0x79138011 0x72138212 0x810e8410 0x860e810a
0xffb587a0  0x7c0e7f0e 0x800b820e 0x8c11850d 0x860f840d
0xffb587b0  0x7f10810f 0x820f790d 0x74127b0f 0x71138210
0xffb587c0  0x79108312 0x790f8413 0x84138912 0x85148915
0xffb587d0  0x830e8217 0x90168117 0x8b118411 0x8017870f
0xffb587e0  0x7c158515 0x82178016 0x82148316 0x7b168816
0xffb587f0  0x78148314 0x8015851a 0x86128817 0x86138314
0xffb58800  0x85148715 0x76138915 0x7b138414 0x8e198714
0xffb58810  0x87138913 0x7a168614 0x7e10851a 0x840f8112
0xffb58820  0x7f138511 0x7e0f8715 0x84118412 0x81138713
0xffb58830  0x81198615 0x80178218 0x8718851c 0x8017891a
0xffb58840  0x7a1a881a 0x861a8417 0x8e198025 0x8720811d
0xffb58850  0x80228120 0x86238421 0x8122851b 0x7c218124
0xffb58860  0x7c1f7d1f 0x7c20821d 0x7717841a 0x771f851b
0xffb58870  0x7915831d 0x87197f1d 0x85187f17 0x77198220
0xffb58880  0x751c871c 0x7b1f8a18 0x86218417 0x82188420
0xffb58890  0x851c881c 0x821e8414 0x8220841b 0x861c831e
0xffb588a0  0x8b208121 0x8a1e8520 0x80198422 0x791f7f1b
0xffb588b0  0x761d8321 0x7a1d8522 0x831f8521 0x8a208c21
0xffb588c0  0x8b1f9321 0x8d219622 0x93239721 0x8921961d
0xffb588d0  0x8626911f 0x86218821 0x7a1c8922 0x751f8a20
0xffb588e0  0x741f8920 0x78208f20 0x91209723 0x90209a1b
0xffb588f0  0x841d9c1d 0x9120a01f 0x8c1f9918 0x8a218c19
0xffb58900  0x881d8a1d 0x8a1f8720 0x911b881a 0x821a8815
0xffb58910  0x7f128012 0x8a127d12 0x7e118508 0x81198411
0xffb58920  0x83138212 0x8520841a 0x8922801f 0x84207c1d
0xffb58930  0x7e1f7b1b 0x801d7d20 0x861e8124 0x8834824b
0xffb58940  0x83608275 0x7b80818f 0x8094809b 0x809b80a5
0xffb58950  0x80a880ac 0x80b280a7 0x819f8099 0x878c7c7a
0xffb58960  0x84637a57 0x863e802b 0x8b1a8220 0x84208118
0xffb58970  0x81217c17 0x7b21801e 0x7a19851d 0x861d7e1c
0xffb58980  0x861a7f1a 0x7f188518 0x7d15811b 0x80168126
0xffb58990  0x80607f7c 0x7f9280a2 0x80aa80a9 0x80ab80a8
0xffb589a0  0x80a880a7 0x80a380a2 0x7b9d8087 0x856f804f
0xffb589b0  0x89298523 0x7d228d29 0x84248c22 0x77238a23
0xffb589c0  0x71218b23 0x79218d20 0x881e8e24 0x805a8294
0xffb589d0  0x80b180c5 0x80d780d7 0x80d780d5 0x80d580d5
0xffb589e0  0x80d480d5 0x80d580d4 0x80d580d3 0x80d280d4
0xffb589f0  0x80d680d2 0x80d380d5 0x80d380d4 0x80d280d1
0xffb58a00  0x82187914 0x8413810e 0x80138314 0x80177e13
0xffb58a10  0x80138315 0x7c147d13 0x790d780d 0x81107a09
0xffb58a20  0x7d0b7d15 0x7b08800f 0x880e860b 0x840c8914
0xffb58a30  0x860d8411 0x850f7c11 0x7b0b7f13 0x7d118011
0xffb58a40  0x82157e11 0x7d0c8113 0x84138313 0x84148414
0xffb58a50  0x83158215 0x8a128217 0x85108415 0x80158517
0xffb58a60  0x80118517 0x81158516 0x83148515 0x7f158516
0xffb58a70  0x7b177f1a 0x81187d15 0x82178117 0x81138219
0xffb58a80  0x80168714 0x73188919 0x75118917 0x85188717
0xffb58a90  0x85148516 0x81168217 0x7f138213 0x7e158214
0xffb58aa0  0x78148614 0x73148817 0x7d0f8313 0x80148313
0xffb58ab0  0x7d198019 0x80167a1b 0x89197f15 0x881a861b
0xffb58ac0  0x811c821f 0x831b7d1e 0x83197c23 0x81257d23
0xffb58ad0  0x81247f24 0x83258322 0x80268225 0x7b247d27
0xffb58ae0  0x7b257d24 0x7f248324 0x7e218621 0x7920821e
0xffb58af0  0x79217d1d 0x841b7f1d 0x821c801e 0x7b1e8020
0xffb58b00  0x7721861d 0x7a1e8b1e 0x821e8723 0x811b8c1d
0xffb58b10  0x801f8b22 0x80228320 0x801f831f 0x85247b23
0xffb58b20  0x881f7d22 0x80218427 0x791d8223 0x78238025
0xffb58b30  0x7d1e8223 0x80208725 0x81218a25 0x8b239227
0xffb58b40  0x90259a26 0x8d2da027 0x902aa02c 0x862a9d29
0xffb58b50  0x7c26972b 0x7e278f24 0x7d248d24 0x81248822
0xffb58b60  0x7a218f1f 0x76249a25 0x87249f24 0x8926a323
0xffb58b70  0x8225a826 0x8321b024 0x7f25a823 0x80279124
0xffb58b80  0x7f1d871f 0x8422851e 0x8a1f8919 0x82188918
0xffb58b90  0x7c147f13 0x7f137c16 0x7f0f8311 0x85128113
0xffb58ba0  0x7f138117 0x791a841c 0x7e21821c 0x83217a1d
0xffb58bb0  0x8423741b 0x861e7b1a 0x851f812b 0x7e398556
0xffb58bc0  0x7c6a837e 0x7b8a8196 0x7f95819a 0x809a80a4
0xffb58bd0  0x80a880a1 0x80a480a0 0x80968094 0x82937c86
0xffb58be0  0x84757961 0x874d7f3a 0x86288419 0x821c8420
0xffb58bf0  0x7f1e7c1f 0x791f8317 0x781f8520 0x871d7b1c
0xffb58c00  0x8a1c8015 0x841b8715 0x7e198217 0x84197f22
0xffb58c10  0x7f587f7a 0x7f9180a1 0x80a880ab 0x80a780ab
0xffb58c20  0x80a780a4 0x80a680a8 0x7f9e7f87 0x8472804f
0xffb58c30  0x88328a23 0x73268d26 0x7b258c24 0x77238b22
0xffb58c40  0x74228c20 0x7d20911c 0x871f901b 0x7f51828f
0xffb58c50  0x80ad80c7 0x80d480da 0x80da80d8 0x80d780d7
0xffb58c60  0x80d780d7 0x80d780d7 0x80d880d2 0x80d480c1
0xffb58c70  0x80da80d6 0x80da80d8 0x80d180da 0x80cd80c5
0xffb58c80  0x830e8014 0x84198615 0x88148415 0x87137f12
0xffb58c90  0x8a117f17 0x88137d12 0x710d7e0a 0x7b117f0f
0xffb58ca0  0x7e107f0b 0x780b8411 0x870e8611 0x890b8411
0xffb58cb0  0x900f810f 0x8c0e7e11 0x87107e13 0x8c0e8014
0xffb58cc0  0x8c0f8011 0x80118210 0x85118415 0x86128711
0xffb58cd0  0x82148512 0x88118311 0x84128514 0x7f0f8516
0xffb58ce0  0x83158714 0x81158a13 0x85178514 0x84158215
0xffb58cf0  0x7e128214 0x7f138313 0x7f198515 0x7c0f851a
0xffb58d00  0x7c148414 0x75168716 0x75178913 0x7e148813
0xffb58d10  0x84168916 0x86158713 0x80128413 0x7a138512
0xffb58d20  0x73138711 0x6b148616 0x7b138516 0x7e138719
0xffb58d30  0x7b17851b 0x8118841b 0x8c1d8419 0x8d22871f
0xffb58d40  0x851b881e 0x7f1b851e 0x741d8124 0x7927812a
0xffb58d50  0x832b8229 0x80278529 0x7e2b8429 0x76288429
0xffb58d60  0x7b298227 0x84298324 0x8623862c 0x7b1d8621
0xffb58d70  0x781d8524 0x80228720 0x7e208922 0x80208721
0xffb58d80  0x7b228a22 0x7b239123 0x7c209222 0x82259122
0xffb58d90  0x801f8b20 0x7f268425 0x81258123 0x82217f26
0xffb58da0  0x83238623 0x77218924 0x76248528 0x79268523
0xffb58db0  0x81248727 0x86218d23 0x82269122 0x8d2b9a2d
0xffb58dc0  0x9228a32d 0x8d2fa92f 0x8b30ac30 0x812dab2a
0xffb58dd0  0x752ca328 0x75299626 0x82248c25 0x8b268923
0xffb58de0  0x811f9023 0x7a239d29 0x7e29a927 0x8428ae27
0xffb58df0  0x8428b128 0x7a25b129 0x7726a826 0x76269b24
0xffb58e00  0x7623901b 0x7d248d1f 0x851f8c1f 0x851a8911
0xffb58e10  0x7c11850f 0x73138312 0x7d138715 0x860d8814
0xffb58e20  0x7e138418 0x6f188220 0x741e841c 0x8324811f
0xffb58e30  0x881b7c20 0x8b207e1f 0x8522803a 0x784c8261
0xffb58e40  0x77778380 0x7e928192 0x80938196 0x809980a4
0xffb58e50  0x80ac80a8 0x80a78098 0x7f9a8191 0x7d8a7f8c
0xffb58e60  0x83807c6b 0x885c8039 0x852d8323 0x851f831b
0xffb58e70  0x801d7f1b 0x7b217e19 0x7919811c 0x89227f1d
0xffb58e80  0x8f197e1b 0x8c1a7e17 0x83157d1b 0x8b158025
0xffb58e90  0x7e5b8079 0x7e9280a4 0x80a780ad 0x80aa80aa
0xffb58ea0  0x80a980a4 0x80a680a5 0x809e8088 0x85708151
0xffb58eb0  0x89288523 0x6e248d22 0x73278d24 0x79248e1f
0xffb58ec0  0x78219122 0x841f9422 0x881c8e1f 0x7e508190
0xffb58ed0  0x80ab80c7 0x80d680d5 0x80d580d6 0x80d480d0
0xffb58ee0  0x80d580d4 0x80d580d3 0x80d580d1 0x80d080d1
0xffb58ef0  0x80d080d5 0x80d180d4 0x80d180d0 0x80cf80d3
0xffb58f00  0x7f0e8417 0x7f128b13 0x86198615 0x84167e15
0xffb58f10  0x86167b18 0x87137c10 0x790f840e 0x7c0d820d
0xffb58f20  0x80107e0f 0x7d0d850d 0x8313830b 0x86127d0f
0xffb58f30  0x8a0e7d11 0x83117c10 0x7e117a12 0x85147e0f
0xffb58f40  0x840f8311 0x7c0f850f 0x81108510 0x80108912
0xffb58f50  0x780f8912 0x7f128515 0x7e0d8615 0x7c118513
0xffb58f60  0x80118813 0x80128b13 0x83178214 0x84147e14
0xffb58f70  0x81128414 0x80148614 0x7e128912 0x7c13851a
0xffb58f80  0x7c108114 0x7d168214 0x7711880e 0x7f178914
0xffb58f90  0x83118a14 0x7b148a11 0x7b16820f 0x8213830f
0xffb58fa0  0x7b138514 0x78138315 0x810f8711 0x7c158919
0xffb58fb0  0x7a19891e 0x85198a1f 0x89238520 0x8a21861f
0xffb58fc0  0x81238a1f 0x7d228922 0x7e23822b 0x7c2e832c
0xffb58fd0  0x7f2b852f 0x802d852c 0x7d2f852e 0x782d882f
0xffb58fe0  0x7b298730 0x822a8229 0x81278427 0x7a28881f
0xffb58ff0  0x76238c23 0x7a209022 0x7e24901f 0x80248b23
0xffb59000  0x7d258d20 0x7f229323 0x7c209923 0x7f249526
0xffb59010  0x81248a25 0x7f248524 0x82247f28 0x85208120
0xffb59020  0x7f238d21 0x7b278d23 0x78238926 0x7c248824
0xffb59030  0x80258b24 0x8023921e 0x81279725 0x8726a027
0xffb59040  0x892baa2d 0x862bb333 0x8331b82f 0x7d2db831
0xffb59050  0x752daf30 0x7a2b9b2b 0x82268a25 0x85238823
0xffb59060  0x7e219224 0x7f24a027 0x822ab225 0x802bba23
0xffb59070  0x7c2bba29 0x7928b22d 0x7833a92b 0x6d27a226
0xffb59080  0x75229620 0x7b1d931f 0x7c208c23 0x82198712
0xffb59090  0x7e128a0f 0x7b178711 0x7f13890d 0x83108c14
0xffb590a0  0x83158515 0x791e8019 0x7920841f 0x7d1e881e
0xffb590b0  0x8321821d 0x8b1b8121 0x84297e43 0x7b587f6c
0xffb590c0  0x78788383 0x7a87828f 0x80908192 0x809580a3
0xffb590d0  0x80a880ac 0x7fa6809e 0x7f948190 0x7d8b8088
0xffb590e0  0x80867f72 0x8164824d 0x88328124 0x8b1f7f1c
0xffb590f0  0x811d7f1a 0x7b23781c 0x751a7c1a 0x821d811d
0xffb59100  0x891f7917 0x871b7616 0x88197819 0x8f1c7f21
0xffb59110  0x81517f7a 0x7e9080a0 0x80ab80a8 0x80ad80a6
0xffb59120  0x80ad80a5 0x80a680a4 0x809f808b 0x86738152
0xffb59130  0x8f2f7f25 0x75258b23 0x6f278e26 0x72219023
0xffb59140  0x73229521 0x80219521 0x89208b1d 0x7e428185
0xffb59150  0x80a980c0 0x80ce80da 0x80da80d8 0x80d980c1
0xffb59160  0x80ce80da 0x80cd80c9 0x80cc80da 0x80c280da
0xffb59170  0x80c880ca 0x80cc80ce 0x80cc80cf 0x80cb80cf
0xffb59180  0x7d158413 0x80168719 0x8a138516 0x84168211
0xffb59190  0x84147d15 0x8a147911 0x860f7e0f 0x7e0d840f
0xffb591a0  0x820f8510 0x8510850f 0x7f10810d 0x81117e10
0xffb591b0  0x860d800f 0x7d11820d 0x77138210 0x7c118311
0xffb591c0  0x7f178409 0x7e118211 0x850f8211 0x7b12840f
0xffb591d0  0x7010820f 0x7813830f 0x7a128511 0x7b108610
0xffb591e0  0x81178312 0x82118410 0x82148613 0x85118212
0xffb591f0  0x88148316 0x8214840d 0x7f188811 0x7f16850d
0xffb59200  0x7f148315 0x85198513 0x7b0f8612 0x83138318
0xffb59210  0x86158513 0x720f8515 0x7c0d8017 0x8d118514
0xffb59220  0x84128514 0x86128211 0x8b198611 0x7d168c13
0xffb59230  0x7a1d9220 0x871f9821 0x87219521 0x86208b20
0xffb59240  0x821e8a21 0x80208b1e 0x87218628 0x80258532
0xffb59250  0x7e2c8730 0x822f872e 0x7f2e852d 0x7c30852b
0xffb59260  0x802f852c 0x812a8429 0x7d258425 0x7e238723
0xffb59270  0x7a238b23 0x791f8d24 0x83218d26 0x821f8b21
0xffb59280  0x84238d21 0x841e9922 0x7b249f25 0x7d269826
0xffb59290  0x85268f24 0x81238a23 0x84248721 0x862b8e1f
0xffb592a0  0x7d229827 0x80249724 0x7c239022 0x7f298f22
0xffb592b0  0x81269021 0x7f249222 0x82259426 0x8329a12a
0xffb592c0  0x7f2eb12f 0x7d32b830 0x7d34bc2e 0x7b32c031
0xffb592d0  0x792cb42d 0x812fa125 0x82249125 0x7f218a22
0xffb592e0  0x7a239927 0x832bac28 0x872fbc2e 0x812dbc2b
0xffb592f0  0x772ab82a 0x7a2ab42f 0x7b30a825 0x6a279d22
0xffb59300  0x7a1f931f 0x7c219122 0x78208a1f 0x83198215
0xffb59310  0x84128010 0x85138015 0x840f8413 0x8510850f
0xffb59320  0x8b188113 0x86187d19 0x8221821d 0x79208316
0xffb59330  0x7f227d1d 0x8b1e8220 0x8333824b 0x7c5f8277
0xffb59340  0x797b8484 0x7885838c 0x7f8d8193 0x8093809f
0xffb59350  0x80a280a3 0x80a4809b 0x7f8c818e 0x7d89838a
0xffb59360  0x7e84827c 0x7b668153 0x8a418027 0x92227d18
0xffb59370  0x861e7f1b 0x7e1d7d1f 0x74167e1f 0x7c20821e
0xffb59380  0x811c8218 0x80187f1a 0x8e1a781f 0x95157a22
0xffb59390  0x84567e79 0x7f8f7fa3 0x80aa80ae 0x80ac80ab
0xffb593a0  0x80a880a8 0x80a780a7 0x809f808c 0x89717b55
0xffb593b0  0x962e7a23 0x7c1e8a29 0x6e218e23 0x6f238d24
0xffb593c0  0x7324901d 0x7e228f22 0x8c218a1a 0x7e488184
0xffb593d0  0x80a980c0 0x80d080d4 0x80d480d3 0x80d380d2
0xffb593e0  0x80d580d2 0x80d480d2 0x80d480d2 0x80d280d0
0xffb593f0  0x80cf80d2 0x80d280cf 0x80d080d1 0x80d080cf
0xffb59400  0x79168214 0x7f198119 0x88128215 0x83168717
0xffb59410  0x85137d16 0x8a1a760f 0x8a0f770f 0x7f0b830f
0xffb59420  0x7c0d8c11 0x80118312 0x7f107b0d 0x84107d10
0xffb59430  0x880f8113 0x7e0d870d 0x7d138615 0x86128411
0xffb59440  0x84108310 0x7e127d0d 0x80117d0f 0x79117d12
0xffb59450  0x74107a10 0x7e0d8011 0x85118413 0x800f8411
0xffb59460  0x7e167a11 0x82157b11 0x820f8717 0x82158412
0xffb59470  0x87138013 0x81138110 0x7e178511 0x86138414
0xffb59480  0x83128314 0x80148613 0x7b148313 0x82147d16
0xffb59490  0x85147b13 0x7c0f7c12 0x7d117d12 0x82118611
0xffb594a0  0x7a128315 0x7712810e 0x83148414 0x83158d17
0xffb594b0  0x8217991e 0x801ca320 0x8024a121 0x83249122
0xffb594c0  0x8222881c 0x831f8b1e 0x86198825 0x812e872b
0xffb594d0  0x81308732 0x832c882d 0x8230852f 0x82308231
0xffb594e0  0x7f2c842e 0x7e2b8727 0x7c278426 0x7f268422
0xffb594f0  0x801f8923 0x7b218821 0x7c228a21 0x7c238a22
0xffb59500  0x80238a20 0x831f9d22 0x8122a42b 0x7f2a9b2d
0xffb59510  0x84229328 0x79228f23 0x79238e24 0x831f9824
0xffb59520  0x7d299f28 0x81259c2a 0x7f289524 0x7a219425
0xffb59530  0x7b239524 0x7b229028 0x7c249022 0x7a29a226
0xffb59540  0x7129b732 0x732ebe33 0x7631bf32 0x7233c534
0xffb59550  0x7932b934 0x7e31a429 0x7d259727 0x7e268a23
0xffb59560  0x7a1c9e26 0x7a2ab829 0x7628c72f 0x7330be2c
0xffb59570  0x6e2bb62a 0x6e2bb52f 0x722aa82f 0x722e9625
0xffb59580  0x7b1f8e23 0x79218d24 0x732a861f 0x7e137d15
0xffb59590  0x86137412 0x8410770e 0x810d7a13 0x830e7a15
0xffb595a0  0x87137b16 0x8319791c 0x7c19801f 0x79207d1d
0xffb595b0  0x841e771f 0x8f19831f 0x8436864f 0x7b678377
0xffb595c0  0x787d8584 0x77848687 0x7f89818d 0x808e8198
0xffb595d0  0x7f9d819d 0x7f9c8095 0x7d8d818a 0x79898586
0xffb595e0  0x78858583 0x7a70805d 0x87427e2b 0x8e267a1c
0xffb595f0  0x871d7f1d 0x821e7f1d 0x7b1e7d1e 0x811b821b
0xffb59600  0x851b881c 0x7c1c8718 0x84197a20 0x9019741c
0xffb59610  0x844f7d74 0x7f907fa0 0x80a980ab 0x80ad80aa
0xffb59620  0x80a780a6 0x80a580a4 0x80a17f8d 0x87737658
0xffb59630  0x90317323 0x79218824 0x71258d22 0x77278b20
0xffb59640  0x77238921 0x7920871f 0x84228819 0x7b40827b
0xffb59650  0x80a580bf 0x80cb80ca 0x80d280c8 0x80cf80d2
0xffb59660  0x80d280ca 0x80ce80ce 0x80cd80cc 0x80cd80ca
0xffb59670  0x80d080cb 0x80cd80cf 0x80ca80cc 0x80cd80cb
0xffb59680  0x76177e17 0x7c187f19 0x871b8417 0x86158214
0xffb59690  0x88177d14 0x89157d14 0x8b0f7d13 0x81098510
0xffb596a0  0x7a0f880e 0x7f0e830f 0x810d7a13 0x880f770e
0xffb596b0  0x8c11800f 0x8213870d 0x86108412 0x90127e12
0xffb596c0  0x8b11810f 0x7e117f0f 0x7c0b7f0e 0x770e840f
0xffb596d0  0x770f800f 0x85118213 0x9010860f 0x8812870f
0xffb596e0  0x7a0f8013 0x80157f13 0x84118515 0x83118411
0xffb596f0  0x86178212 0x7d148712 0x7d138a14 0x8f178514
0xffb59700  0x89118013 0x7d128611 0x7d118412 0x83137b15
0xffb59710  0x84137b13 0x85137c11 0x83128012 0x7a108513
0xffb59720  0x720f8712 0x6b138613 0x7c148213 0x8d178715
0xffb59730  0x8a1d9d21 0x7c23b024 0x7c28ae24 0x8221981b
0xffb59740  0x8520891c 0x891c861b 0x861c8528 0x832c872d
0xffb59750  0x842d892f 0x8630882c 0x8731862f 0x862e872f
0xffb59760  0x7e2c872e 0x7c2f872a 0x7b288726 0x81268926
0xffb59770  0x86218a22 0x7e21891f 0x77218a23 0x78208a23
0xffb59780  0x7721901d 0x81269f26 0x8729ac27 0x8129a32b
0xffb59790  0x86239229 0x751b8b20 0x6f259127 0x812e9f2a
0xffb597a0  0x7c2caa30 0x8328a52e 0x84289723 0x78219027
0xffb597b0  0x7a249122 0x7a268d25 0x7a258e25 0x772a9a2a
0xffb597c0  0x6b2caa2d 0x6f2bae32 0x762db12e 0x7032bd35
0xffb597d0  0x7c34ba31 0x7e2da529 0x7b249522 0x7b239123
0xffb597e0  0x7626a52a 0x752fb82d 0x6c2dbd2a 0x6c24ae26
0xffb597f0  0x6e22a42d 0x6b24a327 0x6f289e2b 0x782c9a2a
0xffb59800  0x7c2b9627 0x78278d26 0x70208121 0x7a147a19
0xffb59810  0x870f7c13 0x820d7d13 0x81107b12 0x82127816
0xffb59820  0x83137d1b 0x7d157f1f 0x78198020 0x7b1e7e1d
0xffb59830  0x881e7d1e 0x931d8326 0x863d885b 0x7c68857f
0xffb59840  0x79838485 0x78868489 0x7c89828a 0x808f8195
0xffb59850  0x7f9a819a 0x7e93818b 0x7c88838a 0x75838684
0xffb59860  0x73828480 0x7c727f5d 0x85497e31 0x8c237b1e
0xffb59870  0x8c1c7e1d 0x8c197e20 0x85187e1d 0x861d8120
0xffb59880  0x8c1c831b 0x7c198313 0x7a1a7d1e 0x8b1d7d1e
0xffb59890  0x83557f76 0x7f90809f 0x80a980ac 0x80ac80a9
0xffb598a0  0x80ab80a4 0x80a780a5 0x80a1808c 0x85757c57
0xffb598b0  0x89317b26 0x77208c22 0x77278d24 0x7f248b22
0xffb598c0  0x7b248a19 0x7425891f 0x7c218d1f 0x783a847c
0xffb598d0  0x80a480ba 0x80cc80cb 0x80cf80d2 0x80d080d0
0xffb598e0  0x80cf80cf 0x80cf80cc 0x80d080ce 0x80cf80ca
0xffb598f0  0x80cd80ca 0x80ce80cf 0x80cc80cc 0x80d080c8
0xffb59900  0x7f1e7719 0x83167b1a 0x82198314 0x86197c16
0xffb59910  0x84167916 0x82148212 0x8a13820d 0x86118606
0xffb59920  0x8114840e 0x880e800d 0x8a0b7615 0x8a0f6e0e
0xffb59930  0x8b0d7d0d 0x860f840d 0x81117c17 0x87027717
0xffb59940  0x86117e09 0x80117f13 0x7f107f0e 0x800b8911
0xffb59950  0x81148210 0x840e8010 0x8710880f 0x7e128a12
0xffb59960  0x78158313 0x7c128213 0x80138211 0x7d108112
0xffb59970  0x7d0f8415 0x78158e10 0x7e128e14 0x85138417
0xffb59980  0x82137f13 0x77158510 0x7711830d 0x86187711
0xffb59990  0x84137913 0x7e117d18 0x7d0e8014 0x7f0f8111
0xffb599a0  0x770f8b12 0x6e118b15 0x7d167e11 0x8e12821d
0xffb599b0  0x8416a01d 0x6e21ba23 0x7228b929 0x7e299e22
0xffb599c0  0x81208920 0x891b8017 0x841f8224 0x7c278630
0xffb599d0  0x812d892d 0x812d8732 0x822e8530 0x842e8b30
0xffb599e0  0x7d2d8b2c 0x7b308629 0x7a268a27 0x7b258b23
0xffb599f0  0x81218920 0x7d208922 0x7d218820 0x81238a1f
0xffb59a00  0x7e1f9522 0x8020a326 0x8425b225 0x842eab2c
0xffb59a10  0x85279126 0x7725861e 0x73249322 0x8228a427
0xffb59a20  0x812db531 0x8232ad31 0x832b9928 0x7f278b26
0xffb59a30  0x7e1f8c24 0x7a248924 0x77248a25 0x77279227
0xffb59a40  0x75289d2a 0x77299e29 0x7829a127 0x792cb42a
0xffb59a50  0x7f34ba2f 0x7b39a627 0x7b2c9325 0x7b249820
0xffb59a60  0x7626ac29 0x7930b930 0x7c2cb42c 0x7b2a9f21
0xffb59a70  0x79239024 0x74249026 0x74249426 0x78249c2a
0xffb59a80  0x76299927 0x792d8b25 0x7b257c1d 0x831f7910
0xffb59a90  0x80108211 0x7f15830e 0x82127910 0x7b177512
0xffb59aa0  0x7b177d18 0x7c19851f 0x81207e1d 0x7f217f1b
0xffb59ab0  0x7f1e8220 0x8b1e831f 0x8241895a 0x7971857f
0xffb59ac0  0x77848387 0x798a8289 0x7e858287 0x808e8198
0xffb59ad0  0x80928098 0x7e90828b 0x7a868685 0x78848684
0xffb59ae0  0x7883837c 0x78767f61 0x81487d31 0x88247c22
0xffb59af0  0x851e7c1d 0x861b7c1f 0x81207f1a 0x81207e1c
0xffb59b00  0x841d7e18 0x7d1d7e1a 0x7c1a7e1c 0x8919831a
0xffb59b10  0x804c8170 0x7f8d809e 0x80a680ac 0x80ab80a7
0xffb59b20  0x80a780a7 0x80a580a5 0x80a27f91 0x83777f5c
0xffb59b30  0x88328326 0x73238f22 0x73268b24 0x78218b24
0xffb59b40  0x7a218b23 0x74218a21 0x7822921b 0x79328773
0xffb59b50  0x809c80ae 0x80c080c8 0x80c880c8 0x80c880c6
0xffb59b60  0x80c880c7 0x80c480c4 0x80c680c5 0x80c180c1
0xffb59b70  0x80bc80c3 0x80c180c0 0x80c180c1 0x80bf80be
0xffb59b80  0x86177d19 0x891b7a16 0x7d1a8017 0x84187d19
0xffb59b90  0x7f157d16 0x7d178015 0x8d107d0f 0x8c0f810d
0xffb59ba0  0x8810810e 0x900f820f 0x930f7d0f 0x880b780e
0xffb59bb0  0x8b0f8010 0x8b11860d 0x7a10850d 0x7b137d0e
0xffb59bc0  0x80107e10 0x83108010 0x84118012 0x8c0d8613
0xffb59bd0  0x8a10830f 0x820f8211 0x7f108411 0x7b0f8511
0xffb59be0  0x7b15820f 0x7a118411 0x7e12810e 0x79107e10
0xffb59bf0  0x7513860e 0x76158b13 0x81138911 0x7c118413
0xffb59c00  0x79118114 0x7311810d 0x75127d12 0x88117d0f
0xffb59c10  0x84157c0d 0x76117d11 0x7d148112 0x870f840d
0xffb59c20  0x7f11890f 0x75108410 0x7e128114 0x8c15891a
0xffb59c30  0x7f20a421 0x6829bb2b 0x6e2cb926 0x7b22a022
0xffb59c40  0x7d1d8b1c 0x8a1b831d 0x7f1a8824 0x772c8a2e
0xffb59c50  0x7f2d892f 0x7c2f862e 0x7e30842d 0x86318b2f
0xffb59c60  0x7e2e8c26 0x7a2b8a28 0x7a288d27 0x78248b22
0xffb59c70  0x7a218a25 0x7e1b8c22 0x84218923 0x8c208b21
0xffb59c80  0x881d971f 0x7f25a82a 0x8330b72d 0x8930ae29
0xffb59c90  0x83229521 0x76218b24 0x7b22952c 0x8529a731
0xffb59ca0  0x8736bc36 0x822fb52d 0x852a9d25 0x85248f22
0xffb59cb0  0x83248e21 0x7c238c28 0x74218c28 0x7827902b
0xffb59cc0  0x7e299529 0x7e269624 0x76249e25 0x8030b731
0xffb59cd0  0x8432bc30 0x7a2ea528 0x7b239527 0x7e249a27
0xffb59ce0  0x7a27af32 0x802fbb33 0x882db329 0x83229f1d
0xffb59cf0  0x7d239122 0x75259326 0x79269526 0x7c269a24
0xffb59d00  0x73209820 0x79268d26 0x8621811e 0x8d1d7b13
0xffb59d10  0x7a0d8213 0x7d108311 0x84147b0f 0x75127d11
0xffb59d20  0x71158117 0x7e1c821e 0x881e8120 0x851f7f1e
0xffb59d30  0x7b177f20 0x831d812a 0x8047865e 0x7873867e
0xffb59d40  0x75848388 0x7b8a818c 0x808b818c 0x80918198
0xffb59d50  0x80948094 0x7e8f8089 0x7b848484 0x7a838683
0xffb59d60  0x7a80847c 0x766e8163 0x7d497f2c 0x8622821f
0xffb59d70  0x8120811c 0x831d7d1d 0x821f7d1f 0x801a7c1c
0xffb59d80  0x801c7b1a 0x80197e1a 0x821c7e1b 0x8a1b8222
0xffb59d90  0x7e4a8071 0x7e8d80a0 0x80a680a8 0x80ab80a9
0xffb59da0  0x80a780a6 0x80a680a4 0x80a57f8f 0x85797d55
0xffb59db0  0x88348223 0x721c8f26 0x72268d23 0x73208b23
0xffb59dc0  0x7b248d23 0x771f901f 0x7a219320 0x7b2b8d65
0xffb59dd0  0x7f8b81a2 0x80ab80ad 0x80b180b1 0x80af80af
0xffb59de0  0x80ac80af 0x80b080af 0x80aa80ac 0x80a780a8
0xffb59df0  0x80a880aa 0x80a780a7 0x80a880a8 0x80a780a7
0xffb59e00  0x8713801c 0x8818771a 0x851f7c17 0x89177e1a
0xffb59e10  0x81187f13 0x7f157d19 0x8810760f 0x860f7a11
0xffb59e20  0x820c7e11 0x820d810f 0x81108213 0x7f0d820f
0xffb59e30  0x820f820e 0x810e8610 0x7f0f8a0f 0x80108311
0xffb59e40  0x81137c0d 0x8412800c 0x86138111 0x860d8212
0xffb59e50  0x800f830f 0x7e108112 0x80107e0f 0x80137f0f
0xffb59e60  0x7d128011 0x7e10840d 0x840f7f13 0x81127a10
0xffb59e70  0x7e0d8812 0x7e0d8616 0x7f108111 0x7d128211
0xffb59e80  0x810e8411 0x7c117a12 0x7c107211 0x89107e0f
0xffb59e90  0x850f7f14 0x7e137c0d 0x7e0d7e13 0x8010830f
0xffb59ea0  0x840c8415 0x7e127910 0x7a118010 0x81179015
0xffb59eb0  0x7b1da720 0x6321bb2a 0x672ab82b 0x7826a321
0xffb59ec0  0x7b1f8b1d 0x861d841b 0x7e178d26 0x782c8d2c
0xffb59ed0  0x7f2d892f 0x7e2b842f 0x8131842a 0x85318a2a
0xffb59ee0  0x7f2f8c2b 0x7b298d28 0x79278e26 0x7a248a23
0xffb59ef0  0x7c218821 0x7d218c21 0x86228720 0x8a24891c
0xffb59f00  0x821d9821 0x7e1fad28 0x7826ba30 0x772cad2e
0xffb59f10  0x78309721 0x74268f21 0x7c269729 0x8227ab2c
0xffb59f20  0x8031c030 0x7932bd32 0x762da32f 0x7f259226
0xffb59f30  0x84268e22 0x7b268d2a 0x79218c2d 0x7d268c2b
0xffb59f40  0x7d268c23 0x7f268b29 0x7a249a22 0x7425b730
0xffb59f50  0x7732bd30 0x7738a62e 0x7e289524 0x80259c26
0xffb59f60  0x7825b12c 0x7b2dbb32 0x8732b12b 0x8b289e22
0xffb59f70  0x86249223 0x7a249625 0x78269624 0x76239924
0xffb59f80  0x75219622 0x77268d26 0x7d208522 0x86187c17
0xffb59f90  0x7b0e8019 0x7a0b8013 0x85157c11 0x7d148414
0xffb59fa0  0x7d118418 0x7f1c811f 0x7a1f831e 0x7a197e1f
0xffb59fb0  0x7b207a1e 0x821b7f1f 0x7d498357 0x79718581
0xffb59fc0  0x79888289 0x7d8c818c 0x808d818f 0x7f9c819b
0xffb59fd0  0x809c8099 0x8091808a 0x7e828282 0x7b7e877d
0xffb59fe0  0x7a7d8579 0x7370845d 0x7a487f2f 0x7d20861e
0xffb59ff0  0x7b208719 0x7f1f7c20 0x821c7b1a 0x80197a19
0xffb5a000  0x801f7517 0x7f1a7a19 0x861c7c1b 0x8c177f1a
0xffb5a010  0x7f46806f 0x7e8a7f9c 0x80a680a8 0x80a580a7
0xffb5a020  0x80a780a3 0x80a380a9 0x80a37f92 0x857b7b5a
0xffb5a030  0x8c378228 0x73228e25 0x6a238d26 0x70228a22
0xffb5a040  0x74238f21 0x771f9521 0x77209420 0x751d9044
0xffb5a050  0x786f8784 0x7a8c8296 0x7e8f8196 0x7f918192
0xffb5a060  0x7e91808f 0x7e8f808d 0x7c8b828c 0x798c8388
0xffb5a070  0x798a838b 0x7a8d8289 0x78898488 0x7e888785
0xffb5a080  0x8a168511 0x8715801a 0x8e1d8018 0x90168415
0xffb5a090  0x85178317 0x82117e15 0x84137c0d 0x800f8010
0xffb5a0a0  0x7e0f820f 0x7513810d 0x700e8010 0x79117d0c
0xffb5a0b0  0x7d0d7d0e 0x7d0e820e 0x880e8413 0x870f8311
0xffb5a0c0  0x83107c0b 0x870f7f13 0x8b0f800f 0x820d8012
0xffb5a0d0  0x7b11800d 0x790f7f12 0x83167d10 0x860e7e10
0xffb5a0e0  0x80108010 0x840f8510 0x8b13860f 0x880d8312
0xffb5a0f0  0x870f8612 0x86128211 0x80127d0f 0x81157f11
0xffb5a100  0x89118013 0x84117c0f 0x820e7a0f 0x8d118012
0xffb5a110  0x88128412 0x840f8410 0x81137e0b 0x7e138010
0xffb5a120  0x8911860f 0x830c7e16 0x7a098217 0x79188d19
0xffb5a130  0x7722a122 0x6726b024 0x692aad24 0x771f9b1f
0xffb5a140  0x7a198a1d 0x8617861b 0x811d8b25 0x7c2d8a2f
0xffb5a150  0x812f8929 0x82318529 0x8531842c 0x86318930
0xffb5a160  0x842c8b24 0x7f2d8f25 0x7b249421 0x7e238c20
0xffb5a170  0x7f268d20 0x7f229220 0x88218c1f 0x871e8a20
0xffb5a180  0x7d209920 0x7c26b129 0x6f2cbc2e 0x662cad28
0xffb5a190  0x72279621 0x75278d24 0x8125952a 0x832aa72d
0xffb5a1a0  0x7c32ba33 0x7631b42d 0x6b279d21 0x7c259028
0xffb5a1b0  0x87248e22 0x7b248f26 0x7f2a8f29 0x83278f27
0xffb5a1c0  0x7b279023 0x7b269225 0x7a2d9f27 0x682fba31
0xffb5a1d0  0x6a35bb33 0x772ba329 0x82269225 0x82269a27
0xffb5a1e0  0x782bb135 0x7932be32 0x8530b325 0x9323a320
0xffb5a1f0  0x8f209b23 0x83219c26 0x7a219a28 0x71219921
0xffb5a200  0x76219223 0x77208723 0x7722801b 0x81197f16
0xffb5a210  0x7d127f0d 0x77148212 0x89137f16 0x8b148011
0xffb5a220  0x89198118 0x831d8019 0x6b198521 0x711a7e1e
0xffb5a230  0x7d1f7720 0x85157c22 0x7c43845b 0x7b6d857e
0xffb5a240  0x7d868589 0x7f8c808c 0x808f8195 0x80a180a3
0xffb5a250  0x80a280a3 0x8195808c 0x80868282 0x7d84867c
0xffb5a260  0x7a7b8575 0x75678457 0x79428029 0x7b1f821e
0xffb5a270  0x7a1e851e 0x7a1a7f1f 0x811d7e16 0x83197d18
0xffb5a280  0x83177a18 0x801a7d1a 0x8d1f7c1d 0x8e17811f
0xffb5a290  0x81438273 0x7f88809d 0x80a380a9 0x80a580a6
0xffb5a2a0  0x80a380a6 0x80a680a5 0x80a27f93 0x88777d5d
0xffb5a2b0  0x9239821f 0x75239121 0x64269224 0x6f238d23
0xffb5a2c0  0x6d24901e 0x79229223 0x7722911c 0x6a248e2b
0xffb5a2d0  0x653e8c58 0x665a875f 0x6f61855e 0x7261845d
0xffb5a2e0  0x705d8260 0x6c5b835c 0x6a5b865b 0x6c5a8958
0xffb5a2f0  0x65558a5a 0x61558856 0x67538856 0x745b8854
0xffb5a300  0x8115870f 0x83178517 0x8d1c8319 0x85158915
0xffb5a310  0x79158517 0x7e1d7d13 0x830b7e11 0x7f0f830f
0xffb5a320  0x80108210 0x7f0d7e13 0x79117f08 0x7f127810
0xffb5a330  0x8210740e 0x790c780f 0x810f7e0e 0x8710800f
0xffb5a340  0x8713790c 0x87127c0d 0x87117f10 0x82137b0f
0xffb5a350  0x780c7b13 0x7a117b0d 0x810f7c10 0x84107a0f
0xffb5a360  0x7e0f7e0d 0x7c0f850d 0x7c108a0f 0x7b118a13
0xffb5a370  0x83118217 0x86137b13 0x7f117a12 0x7e117d13
0xffb5a380  0x85117c0f 0x7e0f7e0e 0x800d7f0e 0x89117f0b
0xffb5a390  0x820d8715 0x7c0d8a13 0x86157d12 0x84137c0d
0xffb5a3a0  0x86098613 0x82118010 0x79128211 0x7e19881a
0xffb5a3b0  0x7b1e9818 0x6b1fa522 0x7021a220 0x791f911c
0xffb5a3c0  0x821b8818 0x881a861d 0x7f17872b 0x7c2d872d
0xffb5a3d0  0x812e882f 0x7f2d842f 0x7c2e812d 0x832e872b
0xffb5a3e0  0x83278926 0x7927901f 0x76249823 0x7c218e24
0xffb5a3f0  0x7b1e8f21 0x7d229420 0x81208f1e 0x801c8a20
0xffb5a400  0x7d1d981d 0x791db325 0x792cbd2e 0x7a32ab2a
0xffb5a410  0x7a279425 0x7e268c26 0x80239327 0x7c23a12b
0xffb5a420  0x702ab32f 0x702faa31 0x752b9728 0x7e268c23
0xffb5a430  0x84228d26 0x7c229026 0x7f289129 0x86259128
0xffb5a440  0x84289225 0x80279624 0x7f28a227 0x732db92f
0xffb5a450  0x6633b934 0x6f37a128 0x822b8e28 0x7d279522
0xffb5a460  0x7126b127 0x7130c12e 0x7e2eb42f 0x8b25a425
0xffb5a470  0x8b23a125 0x8326a125 0x7b269d22 0x6e229520
0xffb5a480  0x6e208f23 0x7b238026 0x7d237919 0x81158015
0xffb5a490  0x80157b13 0x7e11800f 0x86138113 0x88117c18
0xffb5a4a0  0x89177c1d 0x8617801c 0x7b1d841f 0x7c207c1e
0xffb5a4b0  0x7c1d731f 0x84207817 0x7f308552 0x79638576
0xffb5a4c0  0x7b828586 0x808a8190 0x808f809c 0x80a380ac
0xffb5a4d0  0x80a880a2 0x809c8092 0x7f8b8184 0x7a84857c
0xffb5a4e0  0x76798474 0x75658354 0x7b3b7f2b 0x7f1f7c19
0xffb5a4f0  0x771e821d 0x7c1d811d 0x821a8017 0x811c7f1f
0xffb5a500  0x831a7c19 0x84197e1b 0x8d1b7a1f 0x8c178119
0xffb5a510  0x803b836c 0x808a809b 0x80a480a5 0x80a580a8
0xffb5a520  0x80a380a4 0x80a480a2 0x80a57f90 0x88797e61
0xffb5a530  0x913c8124 0x77229322 0x66259622 0x69218f24
0xffb5a540  0x67208f24 0x721d8e21 0x79208d20 0x77258c29
0xffb5a550  0x72298b31 0x702a8832 0x752e8431 0x772f8631
0xffb5a560  0x762f8433 0x7330832f 0x722b8630 0x77308131
0xffb5a570  0x742c842d 0x6d2d892e 0x6d2e8629 0x7730852c
0xffb5a580  0x7e208413 0x83178218 0x8e1e8116 0x7e148417
0xffb5a590  0x71178319 0x7d137f18 0x82107f0c 0x820f810f
0xffb5a5a0  0x87117e0d 0x88128010 0x810b840e 0x860e7e0f
0xffb5a5b0  0x860f7810 0x760d740d 0x79117910 0x8411830f
0xffb5a5c0  0x8e0f7e11 0x87107b0d 0x840d8114 0x82117d11
0xffb5a5d0  0x770f7e10 0x7a0f810f 0x7d11810e 0x810d7d12
0xffb5a5e0  0x7d107e0e 0x750b8415 0x720e880a 0x73138713
0xffb5a5f0  0x7f148114 0x860e7d17 0x820f7f10 0x80108011
0xffb5a600  0x82137d0f 0x7c107e0f 0x820d8215 0x880f8216
0xffb5a610  0x7f118413 0x79108712 0x8c158012 0x89117e0a
0xffb5a620  0x860f8314 0x850f8012 0x800f8116 0x8518891a
0xffb5a630  0x801f9717 0x72199d1f 0x751f9a1a 0x79198f16
0xffb5a640  0x891f8a18 0x8e19891b 0x7f1b8928 0x7b2d892d
0xffb5a650  0x812e892f 0x7d2f862c 0x722f852a 0x81308a2b
0xffb5a660  0x83248c24 0x76239123 0x77219621 0x7c228e22
0xffb5a670  0x7a1f9121 0x7e249122 0x7a228e21 0x791d8d20
0xffb5a680  0x7f209821 0x7921ae2b 0x872bb82f 0x8d2ba725
0xffb5a690  0x841f9122 0x89248b23 0x81249023 0x74269b29
0xffb5a6a0  0x6829a425 0x6e2a9e28 0x7d269526 0x80248f25
0xffb5a6b0  0x83258c22 0x7f269124 0x7f28992a 0x85269f2c
0xffb5a6c0  0x882ba72b 0x822aab2b 0x8231b12f 0x7e34b834
0xffb5a6d0  0x692cb230 0x6d299e2a 0x832a8e26 0x7a259428
0xffb5a6e0  0x6e29ae31 0x6d2dc132 0x772bbb2e 0x8523ad2b
0xffb5a6f0  0x892aab29 0x8729a926 0x7e26a022 0x671d9921
0xffb5a700  0x68209325 0x7e258521 0x7f1e7d1d 0x82168312
0xffb5a710  0x810f8512 0x8713800e 0x86148114 0x860f8419
0xffb5a720  0x891d7e1e 0x891d8022 0x871b8820 0x861f8220
0xffb5a730  0x7c19781f 0x851e791b 0x8426834d 0x795d866f
0xffb5a740  0x7a808585 0x818a8190 0x8096809d 0x80ac80ad
0xffb5a750  0x80ac80a7 0x819d8092 0x808f8089 0x7881837e
0xffb5a760  0x7376846d 0x745e824b 0x7f328124 0x8118801b
0xffb5a770  0x7618801e 0x7f208019 0x851e8016 0x821d7d19
0xffb5a780  0x861c7b1a 0x8a1b7e1a 0x8e177e20 0x8b15811a
0xffb5a790  0x813e8270 0x8089809a 0x80a580a4 0x80a780a6
0xffb5a7a0  0x80a680a2 0x80a480a2 0x80a48090 0x897d7c60
0xffb5a7b0  0x91377f21 0x7a229120 0x6d249221 0x6825921f
0xffb5a7c0  0x641f9223 0x6e208c21 0x7d1e8a22 0x84238925
0xffb5a7d0  0x7a298a28 0x752e882c 0x762b882e 0x772a882d
0xffb5a7e0  0x772f852d 0x742e8528 0x7830872e 0x7e2c852e
0xffb5a7f0  0x7f2d842c 0x742b872c 0x6b27872c 0x752d862b
0xffb5a800  0x7e32801c 0x861b811a 0x871a7d1c 0x81127d16
0xffb5a810  0x7c148019 0x7e168013 0x8310800d 0x87107c0f
0xffb5a820  0x87107a0f 0x870e820e 0x7c0c880e 0x8712810b
0xffb5a830  0x91117a0f 0x840e6f13 0x7c10720f 0x840d8410
0xffb5a840  0x88108013 0x82127711 0x820c820f 0x8111800f
0xffb5a850  0x7a0e7f0f 0x760b860e 0x7c108511 0x80107f0d
0xffb5a860  0x7b137c0b 0x7810810f 0x780f830d 0x7a128211
0xffb5a870  0x81127f16 0x85157d12 0x8212820d 0x80138310
0xffb5a880  0x85127e0f 0x83107e0f 0x7b0e820d 0x77128413
0xffb5a890  0x76128115 0x780f8311 0x7e128013 0x7f0f8010
0xffb5a8a0  0x820f7f0f 0x810f7f0f 0x82157f0d 0x801d8915
0xffb5a8b0  0x7d189418 0x7e19931a 0x7f1c9118 0x7e178c17
0xffb5a8c0  0x89188a18 0x8d168c1a 0x841b8a2a 0x7d2e892d
0xffb5a8d0  0x802d892e 0x812e872f 0x782d872d 0x7b2e8a2b
0xffb5a8e0  0x7d218c25 0x7826901f 0x78219121 0x7d228c22
0xffb5a8f0  0x811b9124 0x80228e25 0x76238c1b 0x79268f19
0xffb5a900  0x82279819 0x7f24aa22 0x8328b028 0x842ba126
0xffb5a910  0x7d268e24 0x7d238a24 0x7c288c21 0x79239523
0xffb5a920  0x7427942a 0x72268e25 0x77219023 0x7a249125
0xffb5a930  0x84238b25 0x84249123 0x7d22a127 0x802aad27
0xffb5a940  0x802db92d 0x7c2fbf2c 0x8032bf2f 0x7c34b837
0xffb5a950  0x7031ad35 0x752c9b28 0x83288f27 0x7b249229
0xffb5a960  0x6d22aa2a 0x6e2ec02c 0x7731c02c 0x7e2cb52e
0xffb5a970  0x7f2ab52b 0x7d2db22a 0x762aa327 0x6e259a22
0xffb5a980  0x721f9725 0x791e8a28 0x7f1f811a 0x86188611
0xffb5a990  0x84118c0d 0x84118119 0x8015820f 0x81158a1b
0xffb5a9a0  0x85207e1c 0x821d7f1b 0x821b8b1b 0x811d871d
0xffb5a9b0  0x7f207d20 0x851d7a1e 0x8214803e 0x764f8765
0xffb5a9c0  0x7a748580 0x808a8090 0x809880a4 0x80ae80b2
0xffb5a9d0  0x80b280a7 0x819e7f95 0x8090808b 0x7a84817e
0xffb5a9e0  0x75738368 0x7c578142 0x832c811f 0x7a21841d
0xffb5a9f0  0x76188022 0x78177e21 0x7b1d7f13 0x801e7b1d
0xffb5aa00  0x881d791a 0x8f157d1c 0x8e1a821b 0x88178117
0xffb5aa10  0x7d39816c 0x7f858097 0x80a280a6 0x80a580a6
0xffb5aa20  0x80a380a4 0x80a380a2 0x7fa38094 0x87807b63
0xffb5aa30  0x8f3c7c20 0x7d238c26 0x6f268d23 0x6f21941d
0xffb5aa40  0x7222921e 0x76278a1e 0x7f218721 0x85238627
0xffb5aa50  0x7e248727 0x7b2a8626 0x782d8826 0x73298b2b
0xffb5aa60  0x782b872b 0x762a842b 0x762d8827 0x79298b28
0xffb5aa70  0x782d862b 0x782b8328 0x742d8626 0x7b298929
0xffb5aa80  0x7f3c8123 0x8c1b7d1e 0x82177a19 0x85177e16
0xffb5aa90  0x8b188417 0x82148111 0x87108012 0x8c118109
0xffb5aaa0  0x8513820f 0x860e840f 0x7a0d840c 0x8814840f
0xffb5aab0  0x9d0f7a11 0x900d700f 0x7e0d7a10 0x87108713
0xffb5aac0  0x8410850d 0x7e107e11 0x7d11820e 0x8111810d
0xffb5aad0  0x8312800e 0x760a880f 0x7f0e8210 0x850f7b0b
0xffb5aae0  0x7c107f0e 0x7d11840d 0x83128208 0x84138112
0xffb5aaf0  0x85117e17 0x87157b12 0x8512820f 0x8313820f
0xffb5ab00  0x89128013 0x8b13840d 0x7711840b 0x6c127e14
0xffb5ab10  0x74117f14 0x7c118316 0x710e800f 0x77127d15
0xffb5ab20  0x82107f12 0x7e0e7e13 0x82137f10 0x7e198518
0xffb5ab30  0x7b168c1b 0x881d8e1a 0x89168f18 0x84198b16
0xffb5ab40  0x89188b1a 0x8d188b17 0x881f8b29 0x7f2d8c2a
0xffb5ab50  0x8031872e 0x862f872f 0x7f2d8a2e 0x752c8d2d
0xffb5ab60  0x77258f25 0x7c249025 0x7d218f1f 0x7e218d1d
0xffb5ab70  0x8923911d 0x8122901f 0x70208d24 0x7b239121
0xffb5ab80  0x86249a21 0x8522aa28 0x8125ac28 0x7c1f9c23
0xffb5ab90  0x75229022 0x70248e24 0x76238c24 0x7c269025
0xffb5aba0  0x7d258f24 0x70259021 0x6e249329 0x74249424
0xffb5abb0  0x86248b27 0x8a249223 0x7d29a129 0x812eb02e
0xffb5abc0  0x7d33ba2c 0x7d2fbf30 0x8233c431 0x7b34bd33
0xffb5abd0  0x7a2ea72d 0x802a9625 0x86288f29 0x7e279225
0xffb5abe0  0x7228a229 0x782db62b 0x7c2cbd2b 0x7b2cb92b
0xffb5abf0  0x782bba31 0x7729b72a 0x712ba826 0x75239b26
0xffb5ac00  0x7e239522 0x79208e25 0x8322841a 0x8c118512
0xffb5ac10  0x8c118612 0x830c7f14 0x7d168013 0x821a851e
0xffb5ac20  0x811e7f18 0x791d801e 0x7f208521 0x801a841f
0xffb5ac30  0x831c831c 0x851d8015 0x8218812c 0x784d885b
0xffb5ac40  0x776f857b 0x7e838192 0x809980a6 0x80b380b5
0xffb5ac50  0x80b280a6 0x819d7f96 0x818e7f8a 0x7d828076
0xffb5ac60  0x776b825f 0x844c8135 0x89267f20 0x781b851d
0xffb5ac70  0x761c831c 0x741d801b 0x751d7f1f 0x7e177d15
0xffb5ac80  0x891d7c1d 0x951b801b 0x91158219 0x8817821e
0xffb5ac90  0x79358169 0x7f86809a 0x80a180a8 0x80a580a5
0xffb5aca0  0x80a380a4 0x80a280a1 0x7fa28093 0x857d7d60
0xffb5acb0  0x8b3d8224 0x801f8e23 0x71208f22 0x77239521
0xffb5acc0  0x81209324 0x80208b1f 0x8022891f 0x85228925
0xffb5acd0  0x81278b2a 0x822b872b 0x7d2a872a 0x6f258a29
0xffb5ace0  0x782a852c 0x7a2c8528 0x7728862c 0x762d8927
0xffb5acf0  0x722a8928 0x7a2f862c 0x7b2c852b 0x812d872a
0xffb5ad00  0x7a408322 0x8a227a1c 0x881a761d 0x84187f10
0xffb5ad10  0x81198817 0x7e118217 0x84117e0d 0x840f8510
0xffb5ad20  0x810b8a0e 0x830f8212 0x7d0e7e0d 0x850b870d
0xffb5ad30  0x9311780d 0x8814710d 0x790f7f10 0x820f880f
0xffb5ad40  0x84118717 0x7d0e8212 0x7911810e 0x7a0b8111
0xffb5ad50  0x8111800a 0x7b0e870b 0x7b117d11 0x790a7a13
0xffb5ad60  0x780e830a 0x7b108510 0x81137f0c 0x83137e12
0xffb5ad70  0x82137a13 0x80157611 0x810d8011 0x83108315
0xffb5ad80  0x81128211 0x7d128810 0x72128212 0x72127615
0xffb5ad90  0x7a137a0f 0x7f12830f 0x79197d11 0x7b127b10
0xffb5ada0  0x7c127d11 0x7d157e11 0x830f7d17 0x7d18811a
0xffb5adb0  0x7b1a8515 0x87198a1a 0x84178e19 0x811b8819
0xffb5adc0  0x86198b15 0x87188a18 0x7f198c2b 0x782b8d2f
0xffb5add0  0x7c2e852e 0x7f2b852c 0x7c2d8c2c 0x7c2d8f2e
0xffb5ade0  0x7a279025 0x77228f22 0x79228c20 0x801e8e1d
0xffb5adf0  0x871f931e 0x7f1b921d 0x74208f1d 0x7a21921d
0xffb5ae00  0x7c239d22 0x7c22aa27 0x7d24a72d 0x7d269627
0xffb5ae10  0x7d229023 0x7c248f23 0x75258d22 0x75248824
0xffb5ae20  0x7c268826 0x791e9125 0x73289622 0x6f259527
0xffb5ae30  0x79268b24 0x8124921d 0x7c299f29 0x7f2cb125
0xffb5ae40  0x7733ba2f 0x7432be2e 0x7c30c933 0x8036c033
0xffb5ae50  0x8134a232 0x812a9029 0x7e279123 0x7b299222
0xffb5ae60  0x78249a27 0x7728ac21 0x762aba2b 0x6e2bbb2e
0xffb5ae70  0x732fbe30 0x7b2bbb35 0x772dad2d 0x752a9b29
0xffb5ae80  0x7d278f20 0x7a228f26 0x7f20881c 0x82178314
0xffb5ae90  0x86128016 0x87117e13 0x82187e14 0x801c7e1e
0xffb5aea0  0x7a1c7f1d 0x781e801b 0x7a207d1d 0x7d197f1d
0xffb5aeb0  0x841d871b 0x851c8420 0x82197f15 0x77388b4a
0xffb5aec0  0x785e866f 0x7c7e8088 0x7f9480a3 0x80ae80b2
0xffb5aed0  0x80af80a6 0x809a7f8e 0x7d898186 0x7b808072
0xffb5aee0  0x7d627f52 0x803c802a 0x7f217b1d 0x761d831d
0xffb5aef0  0x7c1b841a 0x7d1d8019 0x7b1c7f1d 0x84157c18
0xffb5af00  0x8b1b7e16 0x8e19801b 0x8a188116 0x8a1b8112
0xffb5af10  0x80398167 0x7d828099 0x80a580a0 0x80a580a5
0xffb5af20  0x80a480a2 0x80a380a4 0x7fa27f96 0x83817f63
0xffb5af30  0x8d418525 0x83268d20 0x72278f23 0x7123951d
0xffb5af40  0x77239321 0x78208c22 0x7c1f8a21 0x81238c22
0xffb5af50  0x7f288c2b 0x7d2d872f 0x772f872f 0x722e8a2e
0xffb5af60  0x7f2d8434 0x7f2f842a 0x752d842e 0x732e862e
0xffb5af70  0x732c8a2f 0x712f862f 0x772f8530 0x812c8433
0xffb5af80  0x77348626 0x881f7c1f 0x8b227a19 0x821a8414
0xffb5af90  0x7a198a15 0x7d158611 0x8213820c 0x7f11850b
0xffb5afa0  0x810f8a0f 0x800e840f 0x7e067e10 0x8411820e
0xffb5afb0  0x890d7b11 0x7f0a790f 0x750a7e12 0x83108113
0xffb5afc0  0x88108710 0x81128210 0x760d7d0f 0x790f7d0d
0xffb5afd0  0x83108009 0x810f870b 0x790e7e0f 0x730e770e
0xffb5afe0  0x78108011 0x790b8510 0x7f0f820f 0x84118311
0xffb5aff0  0x7f118211 0x78137d13 0x82148013 0x85108015
0xffb5b000  0x7a117d15 0x750e8017 0x740e8012 0x79147e13
0xffb5b010  0x82178013 0x84128212 0x84118013 0x7e0f8012
0xffb5b020  0x77137e0d 0x7d138012 0x83147e11 0x7c137f1b
0xffb5b030  0x8019821d 0x88198919 0x82198d1a 0x81198718
0xffb5b040  0x841a8815 0x82188c1a 0x761b8f2b 0x722e8e2d
0xffb5b050  0x782d882f 0x752a882d 0x7a2b8d2e 0x85358f29
0xffb5b060  0x7f2a9027 0x71218e24 0x78218d21 0x86248f19
0xffb5b070  0x881d9118 0x7e19921d 0x7c18901c 0x7b1e9420
0xffb5b080  0x7322a223 0x732bad27 0x7924a626 0x7b249622
0xffb5b090  0x83239127 0x87249122 0x74219320 0x67239420
0xffb5b0a0  0x79279527 0x83259323 0x7c239024 0x6d249122
0xffb5b0b0  0x6b218b29 0x79249225 0x7d279e28 0x8033aa35
0xffb5b0c0  0x772eb02e 0x6f31b632 0x7b34c135 0x8933be34
0xffb5b0d0  0x872da827 0x812a9826 0x77259227 0x7b299027
0xffb5b0e0  0x7f299727 0x7a25a429 0x7529ad29 0x6b2aad27
0xffb5b0f0  0x742eb330 0x8230b730 0x7d2bae2a 0x7a2a9d24
0xffb5b100  0x7d208c25 0x7e248a23 0x80238519 0x7d187f19
0xffb5b110  0x81117c13 0x891c7d11 0x8717811a 0x7d168121
0xffb5b120  0x751b811f 0x7b1b8221 0x741d831b 0x7a1c8223
0xffb5b130  0x891e831c 0x881e831f 0x84198311 0x7620873e
0xffb5b140  0x7950855d 0x7d708180 0x7f8b809e 0x80a480a4
0xffb5b150  0x7ea37f9b 0x7d8f7f87 0x78828180 0x7a738267
0xffb5b160  0x8255823c 0x7a308025 0x721d821b 0x751f871f
0xffb5b170  0x8419841d 0x881c7e1c 0x8216801f 0x8c197c18
0xffb5b180  0x8f1a7b19 0x85188317 0x831a8018 0x8f177d13
0xffb5b190  0x87388066 0x7c848096 0x7f9f80a5 0x80a780a4
0xffb5b1a0  0x80a480a4 0x80a180a3 0x7fa17f94 0x83828062
0xffb5b1b0  0x8f418524 0x89228a23 0x74218d22 0x70229025
0xffb5b1c0  0x6b1d9223 0x6d219220 0x77239321 0x7e219027
0xffb5b1d0  0x812a8b2f 0x792d8834 0x72338732 0x78368833
0xffb5b1e0  0x82338735 0x83328632 0x7633882e 0x73348833
0xffb5b1f0  0x77348634 0x6b318531 0x73328635 0x80368730
0xffb5b200  0x7d3c872c 0x851d7b21 0x871c7e17 0x80178817
0xffb5b210  0x77158c19 0x7f158713 0x840a8212 0x820f820d
0xffb5b220  0x830b880f 0x810e840f 0x810f7c0e 0x8b0e7b0f
0xffb5b230  0x890f7c0b 0x7e107e0e 0x7a0f7d0f 0x85117b11
0xffb5b240  0x880e8410 0x810f820f 0x78107810 0x7c0d7611
0xffb5b250  0x7e0e7e0e 0x810b840d 0x800f7c0f 0x7911720e
0xffb5b260  0x7b10790f 0x7a0d830f 0x8311810d 0x8c128610
0xffb5b270  0x7f0c8a13 0x70128316 0x7d117f11 0x81197c0c
0xffb5b280  0x7b167713 0x7d157617 0x7b0f7a10 0x7c108312
0xffb5b290  0x7e138213 0x7b177f12 0x7f128111 0x7f118411
0xffb5b2a0  0x7f177d11 0x810f800d 0x84157f11 0x81177a1d
0xffb5b2b0  0x82197f1a 0x871a8917 0x841b8c1a 0x82188517
0xffb5b2c0  0x7d198511 0x7b168b1b 0x7617902a 0x732c8d2d
0xffb5b2d0  0x7c2e892d 0x7c2e8a2c 0x7a318d2a 0x832f8f2c
0xffb5b2e0  0x802c8f2b 0x76268c23 0x7e258c1d 0x89228d1e
0xffb5b2f0  0x8d1d8d17 0x811d9019 0x801c901b 0x8318941f
0xffb5b300  0x781fa724 0x7b26af28 0x8128a425 0x7c27952a
0xffb5b310  0x7c1d9126 0x7e249523 0x75239822 0x69249c24
0xffb5b320  0x73239d26 0x7f249327 0x78288a21 0x74248b25
0xffb5b330  0x77268b24 0x79229224 0x7c239b28 0x7c2aa229
0xffb5b340  0x6f25a62d 0x6e2aad25 0x7b2eba31 0x822fb92f
0xffb5b350  0x7d32ac2d 0x7a2b9e23 0x7b2e9224 0x80278e23
0xffb5b360  0x8127931f 0x72249b24 0x6e219f26 0x6f259f25
0xffb5b370  0x7723a929 0x7f2eb32d 0x792bae30 0x752e9e2a
0xffb5b380  0x7b298927 0x80288421 0x7d29821d 0x7c1f7913
0xffb5b390  0x84117917 0x88157c15 0x8415821f 0x7b1e821c
0xffb5b3a0  0x791a7f19 0x7c1e831d 0x761b881f 0x801f821d
0xffb5b3b0  0x8c237e19 0x871c821d 0x84158317 0x7c11811d
0xffb5b3c0  0x79467d4d 0x7a53826c 0x787e828d 0x7e9d819d
0xffb5b3d0  0x7c968193 0x7c857f7e 0x78738270 0x795e8757
0xffb5b3e0  0x7f458334 0x7e23821e 0x79218716 0x751c8a1c
0xffb5b3f0  0x801e821b 0x851d7a1b 0x831a7f1b 0x8c1a7b16
0xffb5b400  0x8e18781a 0x89178317 0x8b177d18 0x901c770c
0xffb5b410  0x872d7d65 0x7e7f8095 0x80a080a5 0x80a480a3
0xffb5b420  0x80a380a3 0x80a180a1 0x80a47f96 0x84828168
0xffb5b430  0x8f488427 0x84238726 0x79228a23 0x7a228a22
0xffb5b440  0x6f1e9121 0x6e1e9721 0x75209b20 0x7520932b
0xffb5b450  0x772a8933 0x75318834 0x74378537 0x7c398736
0xffb5b460  0x7d33893b 0x7a348836 0x74368b38 0x77388936
0xffb5b470  0x7b3c8231 0x71368436 0x71368830 0x73358936
0xffb5b480  0x84358924 0x811e841a 0x84217d16 0x801c8412
0xffb5b490  0x77158c18 0x81148a14 0x8511840c 0x860e7f0d
0xffb5b4a0  0x8b11820c 0x85128410 0x810f7d10 0x90127c0f
0xffb5b4b0  0x8b0e810f 0x7e0e800d 0x82117c10 0x880f7a0d
0xffb5b4c0  0x8811830e 0x7f10820b 0x7e0f7a10 0x8313790c
0xffb5b4d0  0x7b107b0d 0x8410810d 0x860d7c12 0x7f087713
0xffb5b4e0  0x7f0f8010 0x7c0e880e 0x89108312 0x980e8513
0xffb5b4f0  0x8311860e 0x6c068117 0x79158014 0x7d127f13
0xffb5b500  0x7c147e15 0x80137c16 0x7e0e7d14 0x7f118112
0xffb5b510  0x7c138214 0x72138112 0x7b117f13 0x8315810f
0xffb5b520  0x89147f13 0x870e840d 0x86128412 0x861f7d17
0xffb5b530  0x841a811b 0x87178a19 0x88188b15 0x851e8a14
0xffb5b540  0x76178818 0x72168a19 0x751e8e2a 0x752c8d2f
0xffb5b550  0x802b8930 0x852c8732 0x7d2a8a2f 0x812f9031
0xffb5b560  0x832c8f29 0x7c2a8b28 0x85248c25 0x8d209021
0xffb5b570  0x921f8e1d 0x87208e1c 0x871e9021 0x8b1d971e
0xffb5b580  0x8323aa26 0x862ab22c 0x8727ab27 0x7c249924
0xffb5b590  0x75208e26 0x76239621 0x76279f27 0x6a28a626
0xffb5b5a0  0x712ea226 0x7c299625 0x75218b24 0x79288c25
0xffb5b5b0  0x80268e26 0x7b239224 0x7e269926 0x79279d23
0xffb5b5c0  0x67249e28 0x6d22a727 0x7a2dbb30 0x7c2fbd30
0xffb5b5d0  0x782daa29 0x79249a24 0x7f279327 0x85279129
0xffb5b5e0  0x82249421 0x6b1d9923 0x67239a20 0x73259728
0xffb5b5f0  0x7b25a228 0x7d2cb02b 0x762faf2f 0x732b9e25
0xffb5b600  0x7c268925 0x83298428 0x7a208620 0x7b1f8215
0xffb5b610  0x87197d14 0x861b8018 0x81198520 0x7b1d8218
0xffb5b620  0x7e207f1b 0x7f1f8319 0x7a1c861d 0x891f8320
0xffb5b630  0x91198121 0x871e821a 0x83158317 0x82147f0f
0xffb5b640  0x79227f3e 0x744e844f 0x74618372 0x7881838a
0xffb5b650  0x7d83827b 0x7c6e8068 0x7a5e835a 0x7e4f873f
0xffb5b660  0x80308322 0x871d8119 0x851d851e 0x791f871b
0xffb5b670  0x7d1c831f 0x801a7a1f 0x85117e22 0x90177c19
0xffb5b680  0x8b127a1c 0x8e188019 0x93177e17 0x8f157e15
0xffb5b690  0x872d7f68 0x80817f94 0x80a080a4 0x80a280a5
0xffb5b6a0  0x80a280a2 0x80a180a4 0x81a07f95 0x86818164
0xffb5b6b0  0x90458525 0x81228920 0x7e248d24 0x7f238f22
0xffb5b6c0  0x75208e24 0x74209321 0x791c9225 0x6f229022
0xffb5b6d0  0x6c2c8c2e 0x73358939 0x773a8839 0x7e3e8b3a
0xffb5b6e0  0x79348b33 0x743c8a37 0x773c8933 0x7c3d8839
0xffb5b6f0  0x7d3a8735 0x78398737 0x71368a38 0x67318d39
0xffb5b700  0x80358a24 0x7f228b21 0x87197e1f 0x7f16811a
0xffb5b710  0x71158b17 0x7c158a12 0x8511840e 0x850e790f
0xffb5b720  0x88127911 0x7f078212 0x7a137c10 0x88107a0f
0xffb5b730  0x8a0f830d 0x8610800f 0x890e7713 0x870f780d
0xffb5b740  0x8411800a 0x8010830d 0x7e117b0e 0x7f0e7811
0xffb5b750  0x7c12780a 0x7d0f7d10 0x7f0f7d0f 0x7e117b0b
0xffb5b760  0x7f118409 0x800b8a0d 0x8311850f 0x890e8113
0xffb5b770  0x85128012 0x7a137f15 0x7c108113 0x7b147f13
0xffb5b780  0x7f148110 0x83188211 0x810f8013 0x82127d11
0xffb5b790  0x80137e13 0x79148015 0x7c127d12 0x82117b12
0xffb5b7a0  0x86117e0e 0x820f8410 0x7f0f8613 0x831b7e1f
0xffb5b7b0  0x811a8317 0x85188918 0x861a8c15 0x871b8e13
0xffb5b7c0  0x8019891b 0x7c188517 0x791f892d 0x772d8a2e
0xffb5b7d0  0x7f2e882e 0x7e31852c 0x7a28882f 0x802b8f2e
0xffb5b7e0  0x7f2c8e30 0x7a2c892b 0x82278d26 0x89229422
0xffb5b7f0  0x8c228f21 0x87218c1d 0x83218f1b 0x7f209721
0xffb5b800  0x7f20aa25 0x8328b62e 0x832cae2b 0x77289a22
0xffb5b810  0x7a278a1f 0x781f9722 0x7421a729 0x7827b02a
0xffb5b820  0x7530a728 0x7d2f9626 0x7e248b26 0x7c248d22
0xffb5b830  0x80259122 0x7d269225 0x7e229626 0x7c269724
0xffb5b840  0x71249323 0x74219f23 0x7b26bb29 0x7631c12e
0xffb5b850  0x7436a630 0x7a289426 0x80269229 0x8124922c
0xffb5b860  0x83229423 0x7a219321 0x741f8f27 0x7f1f8b27
0xffb5b870  0x83219b26 0x7d27ad2b 0x7530b030 0x762f9e2c
0xffb5b880  0x81268826 0x83298426 0x7c238a20 0x7d23881a
0xffb5b890  0x8012801d 0x801a821b 0x801c851a 0x801b8220
0xffb5b8a0  0x821a7f19 0x7e1d8222 0x7d1d831f 0x891f8319
0xffb5b8b0  0x8b1a821f 0x801e821c 0x83178218 0x83137912
0xffb5b8c0  0x7c0d8117 0x7835853e 0x734c834e 0x7557885b
0xffb5b8d0  0x775f895e 0x784f824e 0x774a8343 0x7f34842c
0xffb5b8e0  0x84227e18 0x831c7f1d 0x841c831c 0x801c821c
0xffb5b8f0  0x7d1c8119 0x7e1b7b1c 0x811b7d16 0x8a187d1b
0xffb5b900  0x84197b1a 0x85187b18 0x92167c15 0x93128212
0xffb5b910  0x852a7f65 0x7f7c7f92 0x80a080a4 0x80a480a2
0xffb5b920  0x80a280a2 0x80a180a1 0x80a38099 0x82818167
0xffb5b930  0x8648852b 0x78238a23 0x6c239123 0x73219224
0xffb5b940  0x76248b20 0x711d8b22 0x741f8923 0x74228d22
0xffb5b950  0x722c8e34 0x73348938 0x743a8a38 0x77398e39
0xffb5b960  0x753b8e3c 0x73358c39 0x75428535 0x76388835
0xffb5b970  0x76388c35 0x77398938 0x75368c35 0x6d379133
0xffb5b980  0x7f39871f 0x811e8a1e 0x8a1a851f 0x7e118412
0xffb5b990  0x6d198817 0x78118b1a 0x86118810 0x820f7f0e
0xffb5b9a0  0x850d7e11 0x7d10850e 0x780f7c10 0x82107811
0xffb5b9b0  0x8812820f 0x91107f10 0x9111760d 0x870f7b10
0xffb5b9c0  0x810e800d 0x860c7e12 0x820d7b0f 0x7e117a0f
0xffb5b9d0  0x7d147710 0x750a7c0e 0x7916810d 0x8011810f
0xffb5b9e0  0x830b840f 0x860c890c 0x810f850e 0x7c0f8313
0xffb5b9f0  0x87128512 0x89128317 0x800d8615 0x7d118215
0xffb5ba00  0x840d8013 0x89168114 0x850f8111 0x83128113
0xffb5ba10  0x85148211 0x82158213 0x7f148113 0x81158011
0xffb5ba20  0x85107f11 0x8410830f 0x7d10840f 0x821e8119
0xffb5ba30  0x811c841c 0x86198a18 0x87188b1a 0x8d1d8c17
0xffb5ba40  0x8e18851a 0x86178219 0x7c24882c 0x7a2e892f
0xffb5ba50  0x7e2d8b2f 0x772b8b2d 0x752c8c2c 0x81328e30
0xffb5ba60  0x7e278c2a 0x7a2d8b2f 0x81278e24 0x87259125
0xffb5ba70  0x8724911e 0x86249020 0x7c1f901d 0x721e951f
0xffb5ba80  0x7c27ac2d 0x842bbc2f 0x802caf2a 0x7820981f
0xffb5ba90  0x81228f22 0x7b239b22 0x7324ae2e 0x8133bd32
0xffb5baa0  0x7927b32d 0x7f279b28 0x87268c22 0x7f258e22
0xffb5bab0  0x83289026 0x80219224 0x7e259525 0x7e209623
0xffb5bac0  0x76209124 0x781d9e28 0x7d2eb82d 0x752ebe2f
0xffb5bad0  0x7229a42b 0x7c229425 0x80279327 0x7f2b9225
0xffb5bae0  0x83289527 0x85239422 0x7e238e24 0x85259125
0xffb5baf0  0x8824a52a 0x7d2eb42d 0x7732b02e 0x7e299c27
0xffb5bb00  0x88248822 0x84268624 0x81218a20 0x8420811b
0xffb5bb10  0x7c157a1b 0x7c218218 0x801f871c 0x871e821b
0xffb5bb20  0x881f7e1d 0x801b841e 0x7f21811a 0x8c208220
0xffb5bb30  0x861e8519 0x7a188423 0x861a8119 0x84137d11
0xffb5bb40  0x82128314 0x7e0f8523 0x782f843f 0x73438a44
0xffb5bb50  0x70428c3e 0x733d8634 0x712f8328 0x81228319
0xffb5bb60  0x8b15811d 0x8019801f 0x841f7e1d 0x871c811c
0xffb5bb70  0x7e1c7f1b 0x7d1d7b1b 0x7c1c831c 0x861c811c
0xffb5bb80  0x7f1a7919 0x7c167a19 0x921b7a13 0x98157d11
0xffb5bb90  0x822f7f5f 0x7d7e7f93 0x809e80a2 0x80a280a1
0xffb5bba0  0x80a580a2 0x80a180a0 0x80a27f9a 0x80818068
0xffb5bbb0  0x7d468425 0x75258923 0x5e238f21 0x68259024
0xffb5bbc0  0x74228f21 0x6b1f9123 0x6f1a9024 0x7b209128
0xffb5bbd0  0x7c2b8d34 0x75328b39 0x753d8c3b 0x73388b3c
0xffb5bbe0  0x753c8937 0x763c8c3a 0x7335893d 0x6f368a3b
0xffb5bbf0  0x73398a39 0x77378a3e 0x78368b3d 0x76398d38
0xffb5bc00  0x803c8426 0x84238420 0x81188b1b 0x7c15861c
0xffb5bc10  0x6f138416 0x76178a11 0x840f890f 0x800e8213
0xffb5bc20  0x7f0d810f 0x7c12840f 0x7b127b13 0x7e117611
0xffb5bc30  0x830d7d11 0x88127d0d 0x8a147313 0x850c7b0f
0xffb5bc40  0x840e7c0e 0x8612770d 0x8910780e 0x8513790c
0xffb5bc50  0x83137511 0x7d0e7b0f 0x79108510 0x80138211
0xffb5bc60  0x830e830e 0x870f890d 0x850e8213 0x7c11820f
0xffb5bc70  0x7e128611 0x8416870e 0x82138717 0x80117f17
0xffb5bc80  0x86147b14 0x8c107f14 0x85168113 0x7e138114
0xffb5bc90  0x83148414 0x83128112 0x81138211 0x80158412
0xffb5bca0  0x84118011 0x85127e0f 0x80137f11 0x8018811a
0xffb5bcb0  0x7e208315 0x7d198916 0x861a8a17 0x8d1c8719
0xffb5bcc0  0x891c8019 0x861a7e1f 0x82208429 0x7c2f882c
0xffb5bcd0  0x792e8d2d 0x772e902a 0x7a308e2d 0x7b2f8b2b
0xffb5bce0  0x772d8a2f 0x772e8b2a 0x7f2a8c26 0x85268d20
0xffb5bcf0  0x86239223 0x85219421 0x7f20911c 0x78259022
0xffb5bd00  0x791aab25 0x762ac12b 0x742eb02b 0x792b9621
0xffb5bd10  0x7f209022 0x751d9e25 0x7221b42a 0x762fc731
0xffb5bd20  0x7138bd30 0x7e2e9d2e 0x84248d23 0x7e228f23
0xffb5bd30  0x82258e22 0x83268f24 0x81229427 0x83219424
0xffb5bd40  0x85288d22 0x87249b23 0x8127b62c 0x742eba33
0xffb5bd50  0x7532a22c 0x7c259225 0x80269327 0x8128912a
0xffb5bd60  0x85259424 0x89219628 0x83228e25 0x85299423
0xffb5bd70  0x8523ae23 0x7a2cbb31 0x7230af2f 0x79319828
0xffb5bd80  0x83268726 0x7d25871f 0x7b228923 0x841f7920
0xffb5bd90  0x841d7418 0x7f1a8221 0x801a8a1d 0x821b8321
0xffb5bda0  0x831e7c1f 0x841e8416 0x86227f1e 0x871d801e
0xffb5bdb0  0x851e8720 0x8120851e 0x871f7e1b 0x87177f11
0xffb5bdc0  0x84118113 0x83138211 0x7c118712 0x751e8826
0xffb5bdd0  0x71298e23 0x71218e1d 0x751a8012 0x80127e19
0xffb5bde0  0x871a801e 0x82207d20 0x82207a22 0x7f1b7f1f
0xffb5bdf0  0x7b207c1d 0x7e1d7a1b 0x801b871b 0x841b841d
0xffb5be00  0x831d751a 0x7e14751f 0x88137612 0x95167916
0xffb5be10  0x84237d5e 0x7b7b7e8f 0x809c80a2 0x80a380a0
0xffb5be20  0x80a480a1 0x80a1809f 0x7fa17f99 0x80827f6b
0xffb5be30  0x814b8329 0x77238722 0x65238c23 0x6a228e23
0xffb5be40  0x6e1d9225 0x6b209423 0x6d1f951d 0x79229326
0xffb5be50  0x742b8b37 0x6c358c39 0x73378c3b 0x783d883b
0xffb5be60  0x753d8539 0x6e368a3d 0x73398a3a 0x783a8b39
0xffb5be70  0x7a3b8838 0x77378a3b 0x75388c3d 0x763c8a37
0xffb5be80  0x81338324 0x881f821e 0x7c1b8919 0x7b158718
0xffb5be90  0x73188214 0x78178415 0x860f8613 0x7f0b8210
0xffb5bea0  0x7d118010 0x80118310 0x82117f12 0x7c10770f
0xffb5beb0  0x7e127d11 0x82117d12 0x83107912 0x84117e10
0xffb5bec0  0x870e7c10 0x8910780f 0x8d107c11 0x8a117f13
0xffb5bed0  0x870f7e11 0x8512800f 0x7a108110 0x82117f13
0xffb5bee0  0x8410840f 0x890d8615 0x8c0d7f0e 0x81107e10
0xffb5bef0  0x79148213 0x81118215 0x89148417 0x82128216
0xffb5bf00  0x87177d11 0x90157e11 0x8417810f 0x7c138115
0xffb5bf10  0x87137f15 0x87108115 0x86158314 0x84148113
0xffb5bf20  0x8814800f 0x8a117e15 0x840d8216 0x8318831b
0xffb5bf30  0x7f1c871c 0x77178c17 0x84198c1f 0x8d198e1d
0xffb5bf40  0x831c871b 0x84178619 0x8823872a 0x812f892b
0xffb5bf50  0x782d8b2d 0x7b2d8b2a 0x802d8c2f 0x762f8c2c
0xffb5bf60  0x712c8a2d 0x772f8b2d 0x7d2b8e28 0x85269026
0xffb5bf70  0x87249325 0x851a9622 0x8220941f 0x7c1f9621
0xffb5bf80  0x7626ad29 0x6d2ebd2a 0x6e2cae26 0x7c219421
0xffb5bf90  0x7e208e1a 0x74209826 0x7626ad2e 0x7333c130
0xffb5bfa0  0x702eb82f 0x7e299e24 0x80229021 0x80238f23
0xffb5bfb0  0x80259221 0x82249722 0x81239b23 0x83249d26
0xffb5bfc0  0x8e269c26 0x9127a82c 0x862db92e 0x7631b82d
0xffb5bfd0  0x7a2aa027 0x7e259021 0x81259028 0x85269225
0xffb5bfe0  0x86299726 0x8c299e29 0x8529a028 0x852ca12c
0xffb5bff0  0x842db02d 0x7a30b931 0x6f2eab2e 0x75299524
0xffb5c000  0x7e248526 0x7b218323 0x79258424 0x83237e20
0xffb5c010  0x8b217517 0x851d7c1b 0x841d8422 0x7e1a831e
0xffb5c020  0x7d1b821f 0x891b8223 0x8d1c8019 0x82198621
0xffb5c030  0x84248422 0x88258124 0x87247f21 0x8b1c7f1f
0xffb5c040  0x87158013 0x87128212 0x85128513 0x7a13850b
0xffb5c050  0x79138a11 0x790b8515 0x78108117 0x7e1e7e23
0xffb5c060  0x86257b27 0x84247a26 0x82267c29 0x79217e1f
0xffb5c070  0x781e7c1d 0x81197d1f 0x871c851c 0x841f8317
0xffb5c080  0x851f7d1a 0x84157c17 0x82157a16 0x93177918
0xffb5c090  0x83277e5f 0x787b8090 0x7f9d80a1 0x80a280a1
0xffb5c0a0  0x80a180a1 0x80a0809e 0x7f9e7f99 0x8083806a
0xffb5c0b0  0x85468228 0x7b1e8821 0x6a228f23 0x6d219026
0xffb5c0c0  0x6c229122 0x6c239222 0x6f20931d 0x79239126
0xffb5c0d0  0x712c8830 0x66308a3c 0x713b8d39 0x7b3c8d40
0xffb5c0e0  0x71368b37 0x673a8b39 0x733e8b38 0x7f3c8c3c
0xffb5c0f0  0x81388a3b 0x793c893a 0x75378b3a 0x763c8b34
0xffb5c100  0x87388425 0x8b217e1f 0x7f178519 0x80188615
0xffb5c110  0x7b197e17 0x80197d0e 0x8811820d 0x7e11830f
0xffb5c120  0x7c117e13 0x7c11820f 0x7b0f810f 0x7f11760f
0xffb5c130  0x7f0f7a13 0x810f7c13 0x86157c11 0x870b7e10
0xffb5c140  0x87167b0c 0x87127911 0x8a117e0d 0x830f8315
0xffb5c150  0x840f8416 0x91138413 0x88177b13 0x83127a12
0xffb5c160  0x8811820d 0x8c13810f 0x90117714 0x88137813
0xffb5c170  0x7f157c16 0x83127e13 0x81157f17 0x7d168417
0xffb5c180  0x7b137e1b 0x7e177d13 0x801f7f13 0x7b1b7e17
0xffb5c190  0x81137b15 0x87157e15 0x89168316 0x87177e14
0xffb5c1a0  0x86147f0f 0x85157d12 0x7e0f8415 0x7f16841d
0xffb5c1b0  0x821d8919 0x79178c1f 0x80168d1f 0x8a1b921b
0xffb5c1c0  0x81208d17 0x7c1c8c1b 0x82218b2b 0x802e882d
0xffb5c1d0  0x7d2c882e 0x7e2f842c 0x7f308a2a 0x77318d30
0xffb5c1e0  0x762e8a2d 0x782a8a32 0x7c298d28 0x7f269025
0xffb5c1f0  0x7b249223 0x7c219921 0x7f219621 0x7b1f9b23
0xffb5c200  0x771cad27 0x712cb92c 0x7429aa2c 0x7b27921f
0xffb5c210  0x7d208b21 0x7822901e 0x7426a627 0x6b2bbb2c
0xffb5c220  0x672fb230 0x732b9d25 0x7b219222 0x7c248e27
0xffb5c230  0x7d229520 0x7f229e26 0x81269f23 0x802ca226
0xffb5c240  0x862da62a 0x8326b32d 0x7a2ebc30 0x7c31b52f
0xffb5c250  0x812e9d28 0x82248b25 0x7d258b26 0x8021922b
0xffb5c260  0x83299b2b 0x802ca52a 0x762daf31 0x7d32b031
0xffb5c270  0x8430b232 0x7d30b631 0x7731a634 0x7c28922b
0xffb5c280  0x83248525 0x82237e25 0x7f267f27 0x82257f23
0xffb5c290  0x871b7622 0x831c7519 0x7f207d1b 0x781b831b
0xffb5c2a0  0x7d21851a 0x871e7e1e 0x871f7f1d 0x82178a25
0xffb5c2b0  0x82268132 0x822f7c2d 0x83287e2a 0x84297e24
0xffb5c2c0  0x811d7c1c 0x801b8110 0x82108313 0x80117c12
0xffb5c2d0  0x810d7f0c 0x81147814 0x7a167d17 0x7d2b7d2a
0xffb5c2e0  0x852d762d 0x832d782e 0x7e2d7d27 0x7b287c24
0xffb5c2f0  0x7f237a1b 0x851d7f1b 0x841c8220 0x8119841d
0xffb5c300  0x811d8417 0x811b8216 0x84187e15 0x90187a15
0xffb5c310  0x8623805d 0x7a7b808c 0x7f9c80a1 0x80a080a2
0xffb5c320  0x80a180a2 0x809c80a2 0x80a1819d 0x8082816f
0xffb5c330  0x8c4d832b 0x8627871b 0x72239124 0x70249122
0xffb5c340  0x6c229023 0x6e1f8f20 0x77209121 0x7b1e8d23
0xffb5c350  0x742e8333 0x6e348736 0x753d8d3e 0x7839913c
0xffb5c360  0x7238913f 0x7238893d 0x753b8a3b 0x7c358d3c
0xffb5c370  0x7e3b8a3d 0x7a3a883b 0x793a8939 0x7a39893a
0xffb5c380  0x8d2c8823 0x8f208219 0x861d8218 0x8a188415
0xffb5c390  0x84198215 0x88167d18 0x8b137e0f 0x83127e12
0xffb5c3a0  0x7e0f7b12 0x77138115 0x7813810f 0x82157d17
0xffb5c3b0  0x800f7f12 0x80167c14 0x8b177b14 0x8b167f0f
0xffb5c3c0  0x89157d15 0x8511800f 0x86108219 0x7f178013
0xffb5c3d0  0x83178421 0x9a1d851e 0x921b7e1b 0x85177c1e
0xffb5c3e0  0x8e1f801e 0x8c1f801a 0x92227821 0x8c217b1f
0xffb5c3f0  0x83217f23 0x85257e27 0x79218225 0x7c28822a
0xffb5c400  0x74297d25 0x71297b2a 0x7d277d1d 0x781e7f1a
0xffb5c410  0x7d167f14 0x89147d15 0x8e168017 0x8d117b16
0xffb5c420  0x86137f0e 0x8212810f 0x7a138415 0x7e16891d
0xffb5c430  0x861a891b 0x80198c1b 0x81198d1a 0x871f8b1a
0xffb5c440  0x81178a19 0x791d8917 0x7f238729 0x812b882d
0xffb5c450  0x812d8e32 0x812d892f 0x7d2b8a2f 0x7b2b8d2d
0xffb5c460  0x7d318a2a 0x7b2d8b2e 0x7d308f29 0x7a269524
0xffb5c470  0x6e219621 0x76249720 0x8426921c 0x7f1f9620
0xffb5c480  0x7b27a82b 0x7828b22e 0x7c25a323 0x7d228e21
0xffb5c490  0x7d208d20 0x7b229220 0x73229c29 0x6c2cab2b
0xffb5c4a0  0x652ba828 0x6e259921 0x79219223 0x7b1c8f23
0xffb5c4b0  0x7e239324 0x7f269f2a 0x8226a82d 0x822eac2a
0xffb5c4c0  0x8230ad2f 0x782fb130 0x772db537 0x8630ac27
0xffb5c4d0  0x8a279923 0x88228b21 0x79218b24 0x7d26922b
0xffb5c4e0  0x81299c28 0x742ba730 0x6e34ae33 0x7c33af34
0xffb5c4f0  0x8531b232 0x7f2eb32f 0x7e2da227 0x86269027
0xffb5c500  0x89208523 0x8a247e23 0x862c8224 0x83248220
0xffb5c510  0x851c7b19 0x811d7c1d 0x7a1c7f1d 0x741c8518
0xffb5c520  0x8123831e 0x88197b20 0x851e7f1e 0x861f8326
0xffb5c530  0x812c7e2f 0x7e397d36 0x80317e2e 0x822f7e28
0xffb5c540  0x7c207e22 0x7b198215 0x7f138513 0x82118514
0xffb5c550  0x84148411 0x86127c16 0x7e1b7b24 0x7d2a7f2e
0xffb5c560  0x86307e3a 0x842d7d2d 0x7b317c2c 0x7d2b7d24
0xffb5c570  0x8523811f 0x8a19831f 0x8318851c 0x8219821f
0xffb5c580  0x82198218 0x83188117 0x88167f18 0x8d158013
0xffb5c590  0x8a28815c 0x7d7b808f 0x809d80a0 0x80a280a1
0xffb5c5a0  0x80a280a0 0x80a0809f 0x819f7f9b 0x81847f6d
0xffb5c5b0  0x92508129 0x901d8621 0x7a218f24 0x74239320
0xffb5c5c0  0x69239422 0x6d1d9123 0x80228e21 0x7d1d8b26
0xffb5c5d0  0x762c8830 0x72398c3c 0x793c8e3c 0x783d8f39
0xffb5c5e0  0x753c903b 0x7a3c8a3e 0x7739893d 0x773b8e3b
0xffb5c5f0  0x7b3e8f39 0x7a3c8c3b 0x7d3b8b3d 0x7e3b8c3b
0xffb5c600  0x852d8c26 0x891d841e 0x841f7d18 0x84178211
0xffb5c610  0x83158717 0x881b7c19 0x83157b1a 0x7e1c781f
0xffb5c620  0x82197721 0x7d197e1e 0x7b217e1f 0x7f218021
0xffb5c630  0x80238228 0x7d227b28 0x83277b29 0x81237f26
0xffb5c640  0x83287f29 0x86278426 0x8829832c 0x7c2f7d2c
0xffb5c650  0x7c29832e 0x892a8530 0x872e7f28 0x7e297d2e
0xffb5c660  0x862b7d29 0x88287e2a 0x892d7929 0x872a7c2e
0xffb5c670  0x83257f30 0x862a7e29 0x83288328 0x822e802c
0xffb5c680  0x7f2c7a2d 0x7f2d7a2d 0x802c7a29 0x7a227f1b
0xffb5c690  0x7c1b8313 0x88177b14 0x8a147c10 0x85157914
0xffb5c6a0  0x80117d0f 0x81138313 0x7d128314 0x7d198c1b
0xffb5c6b0  0x831d891c 0x80198b1d 0x821c8a1c 0x831b831e
0xffb5c6c0  0x7c178418 0x83168516 0x82218229 0x792a882a
0xffb5c6d0  0x782f922c 0x7b328d2e 0x7f2d8a2d 0x7c2d8d2d
0xffb5c6e0  0x7a2f8a2e 0x7c2d8d2b 0x7b2f9127 0x75289820
0xffb5c6f0  0x6d239923 0x7b219321 0x87228b20 0x811c9021
0xffb5c700  0x7924a31f 0x7429ab27 0x79269b29 0x7e208924
0xffb5c710  0x80208f1b 0x7e229323 0x79259322 0x75259b26
0xffb5c720  0x6e279d27 0x73249524 0x79239020 0x7d248f20
0xffb5c730  0x801f9123 0x7b229d25 0x7d24af28 0x802bb42d
0xffb5c740  0x802eb232 0x7735af30 0x7a2cad2d 0x8730a128
0xffb5c750  0x84299028 0x81208b29 0x7a228927 0x7b269021
0xffb5c760  0x7d2a9e29 0x722da832 0x7432ad33 0x7932ae2f
0xffb5c770  0x7b37b22d 0x7b2db033 0x7b2c9d2f 0x81258a22
0xffb5c780  0x84228425 0x83217e27 0x822c8329 0x82238320
0xffb5c790  0x821d7f21 0x8117811c 0x7b1e7f1d 0x7b19851d
0xffb5c7a0  0x841e7f1b 0x84257817 0x7f1d7f16 0x84217c25
0xffb5c7b0  0x80347b2f 0x7c3b7d38 0x81337c30 0x80317c2c
0xffb5c7c0  0x7c277b23 0x811b8118 0x7e178714 0x7b118a14
0xffb5c7d0  0x7f148815 0x85167c18 0x82217827 0x792f7f2c
0xffb5c7e0  0x7e348437 0x8134802a 0x7b397a2e 0x7b2a7e26
0xffb5c7f0  0x7d21871d 0x7e1d861f 0x8118861f 0x861b801d
0xffb5c800  0x84217c19 0x85188019 0x8c168014 0x8a178211
0xffb5c810  0x861f825b 0x7d78808d 0x7f9c80a0 0x80a0809e
0xffb5c820  0x80a280a0 0x80a080a1 0x80a07f9c 0x81867c70
0xffb5c830  0x8c4f7f2d 0x87258421 0x7b208c21 0x7425931e
0xffb5c840  0x70269521 0x72239222 0x79278b1b 0x7c238a23
0xffb5c850  0x742b8d2f 0x6e35913f 0x753a8e3d 0x753c8d3e
0xffb5c860  0x75368e41 0x783b883f 0x743d873b 0x76388e3c
0xffb5c870  0x7b3a913d 0x783c8d39 0x783d8d3d 0x7b3b8f38
0xffb5c880  0x7e258923 0x841f8424 0x83157e1c 0x7e177e16
0xffb5c890  0x8517811b 0x881f7d24 0x7c267e26 0x7a287b27
0xffb5c8a0  0x822e7a27 0x81277f28 0x7e257d2b 0x7f297b2a
0xffb5c8b0  0x83307c26 0x7d257b29 0x7e2e7a2a 0x7b2a7c2a
0xffb5c8c0  0x822a7d28 0x89277f28 0x892a8225 0x7d267d28
0xffb5c8d0  0x7b2b7e2c 0x7d287f2a 0x7e2b7c2a 0x7d297b26
0xffb5c8e0  0x802c7b27 0x86287c29 0x822a7b29 0x842b7b2c
0xffb5c8f0  0x862e7c29 0x872c802a 0x8b2b852e 0x852b832d
0xffb5c900  0x862c7f2e 0x86358032 0x81307f32 0x7d26811d
0xffb5c910  0x7e1b8019 0x85157f17 0x870f8113 0x7f13800d
0xffb5c920  0x7a128311 0x850c8416 0x82118311 0x7e178c1c
0xffb5c930  0x811d8d18 0x7e1b8d17 0x831f8d1c 0x7c1a8b18
0xffb5c940  0x79148c19 0x8d1f8a13 0x8222852c 0x74308828
0xffb5c950  0x752f9034 0x7b2f8e34 0x812e8730 0x7f30862b
0xffb5c960  0x792b882d 0x7e2f8928 0x7f2f8c24 0x76279424
0xffb5c970  0x6e209721 0x81229321 0x88218e20 0x82209122
0xffb5c980  0x791f9d26 0x7326a025 0x76239421 0x7e1f8c1b
0xffb5c990  0x83228f21 0x82208f1f 0x80238b26 0x7c239223
0xffb5c9a0  0x74239423 0x781f8f24 0x7e218e1e 0x81218c25
0xffb5c9b0  0x831f8f20 0x78269f27 0x7c29af2b 0x842cb42d
0xffb5c9c0  0x8034b42a 0x762eb029 0x7f30aa2d 0x88299c27
0xffb5c9d0  0x7f218e23 0x7c218a27 0x7d248822 0x79229126
0xffb5c9e0  0x7c299d2a 0x742ba830 0x7a32ab36 0x7833ac30
0xffb5c9f0  0x742fac2e 0x7b2da226 0x78269920 0x7a228c1f
0xffb5ca00  0x7f24841f 0x7d1f8227 0x7e2a8629 0x8022841f
0xffb5ca10  0x811d7f1c 0x841e8120 0x7d1d821b 0x841b8423
0xffb5ca20  0x891e7d1b 0x811a7b1d 0x7a1c821d 0x811b7d26
0xffb5ca30  0x7f347d37 0x7b397e3c 0x8334802d 0x802d812a
0xffb5ca40  0x7c277e24 0x891d801b 0x80158519 0x7a11881b
0xffb5ca50  0x80178413 0x84177e1b 0x861f7e24 0x792f822e
0xffb5ca60  0x78328330 0x8034822a 0x7b2e822d 0x79278227
0xffb5ca70  0x751e8519 0x741b851c 0x811f821b 0x8b1e7c1d
0xffb5ca80  0x881c7d19 0x891a8219 0x8f188316 0x8a168517
0xffb5ca90  0x821d8158 0x7e7a7f8c 0x7f9a809f 0x80a180a2
0xffb5caa0  0x80a0809c 0x80a4809e 0x7fa07f9a 0x81877d71
0xffb5cab0  0x864e7f28 0x7c208821 0x7a249321 0x73249921
0xffb5cac0  0x76259422 0x79218d1c 0x73238d18 0x7a258d22
0xffb5cad0  0x772f8b2c 0x6f368e3d 0x723b8d3c 0x743d8d41
0xffb5cae0  0x76398d3d 0x7740893d 0x713c8a3c 0x743f8d3b
0xffb5caf0  0x7c3e8e3e 0x77398d3c 0x753a8d3b 0x7a3d8e3a
0xffb5cb00  0x7f318524 0x811f831e 0x7c1d7d1b 0x8216791b
0xffb5cb10  0x84167b21 0x7f277e2b 0x7c297f26 0x7c257f27
0xffb5cb20  0x7e287d22 0x7d297f27 0x7e267c29 0x8229752b
0xffb5cb30  0x8628752a 0x8227792d 0x7f2c782e 0x832c7929
0xffb5cb40  0x872c792d 0x862c7a2b 0x85298129 0x802c7b2e
0xffb5cb50  0x7c2b782e 0x7e2d792c 0x7e2c7831 0x752b7a2f
0xffb5cb60  0x7a2b792f 0x7e31792c 0x7a2e7d32 0x7e2c7c37
0xffb5cb70  0x8434782d 0x842b8034 0x842b8631 0x8333842f
0xffb5cb80  0x8331842c 0x8432843e 0x7f3a8430 0x7b2b811d
0xffb5cb90  0x7d1d7d18 0x8115840f 0x85178313 0x82138410
0xffb5cba0  0x7c108710 0x84108110 0x81128314 0x7e138b19
0xffb5cbb0  0x7e1a8f1d 0x79168f1f 0x7f158f1c 0x7e1d8e13
0xffb5cbc0  0x7b1b9218 0x84188f17 0x7e218727 0x772b882c
0xffb5cbd0  0x772b8d2c 0x792f8d31 0x7d30832d 0x7a2d7f2d
0xffb5cbe0  0x7826872c 0x7c2a8530 0x7a2d8626 0x74248e23
0xffb5cbf0  0x711f951f 0x80209220 0x86218f1f 0x801f9220
0xffb5cc00  0x75229620 0x76259322 0x7a248921 0x76208c1d
0xffb5cc10  0x7c20901e 0x82228921 0x7f218324 0x7a208720
0xffb5cc20  0x79258825 0x781e8a21 0x76208b20 0x7924881a
0xffb5cc30  0x7d218d21 0x741da01e 0x7326af26 0x752ab52e
0xffb5cc40  0x702cb52d 0x6c2ab12c 0x7c2aa52b 0x84249427
0xffb5cc50  0x7c218a20 0x7d228823 0x7e228522 0x79209022
0xffb5cc60  0x77269d27 0x6e24a82b 0x7029a930 0x672ca92a
0xffb5cc70  0x6a2aa529 0x7b2a9625 0x781f901f 0x741e8d1f
0xffb5cc80  0x7e1f841b 0x791d8525 0x78268722 0x8023821a
0xffb5cc90  0x7f227e1b 0x7f1d7f1f 0x7e1e831e 0x841b821d
0xffb5cca0  0x851d7a1f 0x82207e18 0x8319831d 0x7f227f20
0xffb5ccb0  0x7b257f2e 0x7d2e7f2e 0x82288621 0x7d288526
0xffb5ccc0  0x8323801f 0x8e1f7e17 0x85198118 0x82188419
0xffb5ccd0  0x8518801c 0x861a801b 0x851d851f 0x7a258527
0xffb5cce0  0x7a277e28 0x82268422 0x7e248a28 0x75228524
0xffb5ccf0  0x741a831f 0x781f8319 0x81197d22 0x831c751b
0xffb5cd00  0x7f1c7d17 0x8019831a 0x86138516 0x8e178616
0xffb5cd10  0x871a7e56 0x7c757f88 0x7e9a809e 0x809f80a0
0xffb5cd20  0x809f809d 0x80a0809f 0x7f9e7f9d 0x80877e75
0xffb5cd30  0x8a507e31 0x81238a1c 0x701f9a20 0x6b229d22
0xffb5cd40  0x74229123 0x7e228724 0x7a1d911f 0x77219223
0xffb5cd50  0x6e2b8930 0x6d378b3b 0x74398b40 0x763e8d3c
0xffb5cd60  0x78398b42 0x753b883c 0x6e3d8b3d 0x74398c3d
0xffb5cd70  0x7a388a3b 0x773a8a3c 0x753d8d3d 0x743a8d41
0xffb5cd80  0x7e2d8a1e 0x8023861d 0x77188018 0x831a7e18
0xffb5cd90  0x82187f22 0x79287e35 0x7d2f7f29 0x7f298128
0xffb5cda0  0x792a802a 0x7a29812a 0x802d7e33 0x84277c32
0xffb5cdb0  0x882c7d32 0x87317e2a 0x822c7c2e 0x892e7b2e
0xffb5cdc0  0x8a297e2c 0x852b7f28 0x812a842d 0x822a7f29
0xffb5cdd0  0x7b2a7d28 0x7e2f7d29 0x7b2a7b20 0x6c277d22
0xffb5cde0  0x72237e21 0x74217d23 0x77207e20 0x7a217c20
0xffb5cdf0  0x7f217b1c 0x82218215 0x7e1c8718 0x801b8717
0xffb5ce00  0x8217801e 0x851b7f2c 0x7f348030 0x7b2a7f20
0xffb5ce10  0x7b167f19 0x81138615 0x86118815 0x89128313
0xffb5ce20  0x810e820f 0x83108412 0x84138612 0x81198b1c
0xffb5ce30  0x7e1f8c17 0x781b8a1b 0x7e1a871a 0x831a8a1c
0xffb5ce40  0x81198b18 0x80178a17 0x7c1d8a28 0x7c2b8a2a
0xffb5ce50  0x7a2a8a29 0x7c368a27 0x7a2c882b 0x752a862a
0xffb5ce60  0x792a882c 0x7a2a8727 0x77288727 0x76268c21
0xffb5ce70  0x741b9221 0x7e209020 0x841d8c23 0x811f8d21
0xffb5ce80  0x741c911f 0x7c208d1e 0x811e861e 0x70218a16
0xffb5ce90  0x761f8b1f 0x851d8821 0x7c198420 0x771e8422
0xffb5cea0  0x7e20861f 0x78208819 0x70238a1b 0x721d8919
0xffb5ceb0  0x7a228c1c 0x76219721 0x7021a222 0x6d22a423
0xffb5cec0  0x6922a423 0x6c24a225 0x7a219c20 0x7b21911c
0xffb5ced0  0x7a1e881c 0x801d871f 0x83208620 0x7f218c20
0xffb5cee0  0x761e9625 0x70219b24 0x6a229c27 0x56209e20
0xffb5cef0  0x63259d21 0x7c1f8f1c 0x771c8b17 0x701f8c18
0xffb5cf00  0x801b851f 0x7813851d 0x73218624 0x7f1f871e
0xffb5cf10  0x7e18841f 0x7b1f841b 0x7f1b831f 0x831e811d
0xffb5cf20  0x801d7d20 0x841a7e1f 0x8a1f821e 0x7d1d7f1d
0xffb5cf30  0x77197f1d 0x8126811e 0x81208417 0x7c1b8518
0xffb5cf40  0x8a1b831c 0x920f8018 0x8b178216 0x89138315
0xffb5cf50  0x89158115 0x8a138015 0x86168419 0x7d188417
0xffb5cf60  0x7b1c7d21 0x871c8421 0x85218820 0x781b801f
0xffb5cf70  0x781a7e1f 0x7d1e8221 0x82197f1c 0x7c197c1e
0xffb5cf80  0x751e821f 0x7a16851b 0x80198217 0x93178218
0xffb5cf90  0x8c228252 0x79767f89 0x7d99809e 0x80a080a1
0xffb5cfa0  0x809f80a0 0x809e809d 0x7f9f7f9b 0x80877f70
0xffb5cfb0  0x8e52802e 0x8820871c 0x6c209222 0x6a299721
0xffb5cfc0  0x74219224 0x83228b20 0x84258c1e 0x77218d25
0xffb5cfd0  0x65268b32 0x6a378e3c 0x753e8d3c 0x7a3c8c3e
0xffb5cfe0  0x7b3d8b3c 0x743e8b3e 0x6c398e3e 0x743d8a3c
0xffb5cff0  0x773c893e 0x783d8b3c 0x78418e3e 0x6f368d3f
0xffb5d000  0x7d308c23 0x7d218a1d 0x7a1b831c 0x86138418
0xffb5d010  0x821d8124 0x77307d40 0x81297c26 0x86258125
0xffb5d020  0x7c238323 0x77228422 0x7f218122 0x861d8226
0xffb5d030  0x871e8520 0x8421861f 0x811f801f 0x881d7d1d
0xffb5d040  0x8a19821e 0x8615821a 0x7c138513 0x7f198315
0xffb5d050  0x7a0e8317 0x7b1b7e15 0x7e197d0f 0x770e800d
0xffb5d060  0x7c10850f 0x7d118211 0x7a107e13 0x7e147a17
0xffb5d070  0x84157c15 0x8417821d 0x7b1a871b 0x7b1a8916
0xffb5d080  0x86157916 0x88177623 0x81317f30 0x80307d1a
0xffb5d090  0x78158214 0x7c128810 0x85108b10 0x89128114
0xffb5d0a0  0x820f7c12 0x80128412 0x7d0e8a14 0x7d188917
0xffb5d0b0  0x811c891b 0x7e1d831a 0x7c1d7f1d 0x7c158517
0xffb5d0c0  0x7f1d8116 0x80178511 0x791d8b24 0x7a278a26
0xffb5d0d0  0x7b278529 0x7c288329 0x7b258b25 0x79288b2b
0xffb5d0e0  0x7d268724 0x79268727 0x75248824 0x7a24881e
0xffb5d0f0  0x76188d1d 0x771b8e1e 0x7d1e891c 0x821c881b
0xffb5d100  0x781a8b1d 0x7a1d851b 0x811c7f1f 0x741b841b
0xffb5d110  0x711b861a 0x7e1a8717 0x811a8622 0x7c20821e
0xffb5d120  0x7d1b871f 0x7a20861f 0x751c881a 0x7817881c
0xffb5d130  0x7a1f8616 0x78208b19 0x751a8d1a 0x751b8b1b
0xffb5d140  0x751d8b15 0x7a1d8917 0x801f8b19 0x7e198d1b
0xffb5d150  0x7f20851b 0x7b1c8319 0x7e1e851b 0x7d1f8718
0xffb5d160  0x7e1f8a1d 0x7e19861d 0x761c871c 0x6d1a8c1b
0xffb5d170  0x731c8d1a 0x7f18851d 0x7e198219 0x7a148a17
0xffb5d180  0x7a1b8516 0x7618841c 0x7c1e861c 0x821b891c
0xffb5d190  0x811d891f 0x7f20871d 0x80198320 0x811f7f18
0xffb5d1a0  0x7c237f1e 0x851b7d20 0x86207f1f 0x7a1c7d1d
0xffb5d1b0  0x7b207918 0x801e811a 0x841e801f 0x801b8017
0xffb5d1c0  0x801c871c 0x851a831c 0x8419841b 0x8119831a
0xffb5d1d0  0x8217821a 0x821b7f18 0x84178215 0x801c7f1f
0xffb5d1e0  0x7d187a11 0x831a821e 0x831e831f 0x8220791d
0xffb5d1f0  0x7e21771a 0x7b1e7e1c 0x7b1f8217 0x751c831b
0xffb5d200  0x771f8519 0x7e19861b 0x7e187e16 0x8b177d14
0xffb5d210  0x841b8449 0x7c738186 0x7f9a7f9e 0x809f809d
0xffb5d220  0x809d80a0 0x809e809f 0x7f9c7f9c 0x80868172
0xffb5d230  0x89548431 0x87248223 0x76218924 0x6c229023
0xffb5d240  0x6f239322 0x7a228e22 0x7c208721 0x75248724
0xffb5d250  0x6a268b30 0x6c338f3c 0x76418e3a 0x783f8b40
0xffb5d260  0x773e8a3b 0x703f8e3b 0x6b3e8e3d 0x7442883d
0xffb5d270  0x7838883f 0x773c8c3c 0x773e903c 0x75398c3f
0xffb5d280  0x812a8821 0x81238318 0x811e8117 0x8b187d17
0xffb5d290  0x85208129 0x76348135 0x85177c12 0x8f137b0f
0xffb5d2a0  0x870f8113 0x7c128511 0x81168415 0x8c168015
0xffb5d2b0  0x8a188118 0x8415831a 0x83178019 0x88187d17
0xffb5d2c0  0x8d187f17 0x88168313 0x77188414 0x7e187f1b
0xffb5d2d0  0x7f197f19 0x7b177e1b 0x87167f15 0x8a108210
0xffb5d2e0  0x8e148312 0x8a157f0e 0x80147b14 0x83167916
0xffb5d2f0  0x86127e1b 0x851b821c 0x7a1e831b 0x771f851a
0xffb5d300  0x84157e15 0x8a137b24 0x842d8034 0x842c8218
0xffb5d310  0x78108514 0x7e178213 0x89148512 0x89138211
0xffb5d320  0x830f7e12 0x80128412 0x7b128613 0x7d15821a
0xffb5d330  0x861f831b 0x861c8117 0x7c1a8218 0x77138719
0xffb5d340  0x7f15801a 0x85168017 0x7b158824 0x7b228921
0xffb5d350  0x7e228623 0x7c208327 0x80258424 0x83228523
0xffb5d360  0x84238721 0x79218623 0x75218521 0x8120801c
0xffb5d370  0x7a1d871c 0x731b8a17 0x7a1d8717 0x851d871a
0xffb5d380  0x811d8416 0x781a8216 0x801f8217 0x77188518
0xffb5d390  0x6c15871b 0x7617891d 0x881a8619 0x84198016
0xffb5d3a0  0x7e1d831b 0x7c19861b 0x7f138516 0x81198817
0xffb5d3b0  0x7c158716 0x7c188615 0x79188816 0x79178510
0xffb5d3c0  0x7b178315 0x83158615 0x81178717 0x82158918
0xffb5d3d0  0x83188618 0x7b188218 0x7a198419 0x7a1a8718
0xffb5d3e0  0x84178718 0x86188519 0x7e13821c 0x801a8516
0xffb5d3f0  0x7f198917 0x81188519 0x85158315 0x85178819
0xffb5d400  0x78168811 0x7916841b 0x88228317 0x8921831e
0xffb5d410  0x891d8320 0x861d8420 0x851b831d 0x7e1c831a
0xffb5d420  0x761d821e 0x851d7c1f 0x831e7e1b 0x741b821e
0xffb5d430  0x7c1b811f 0x801c7f1c 0x851d7e1a 0x831d801b
0xffb5d440  0x7616851a 0x7c1b841c 0x7f1b8519 0x7e19851b
0xffb5d450  0x7e1b851b 0x7b19821e 0x851d7e1d 0x841d7e16
0xffb5d460  0x7f228019 0x81158420 0x841f7e1f 0x8a1c781d
0xffb5d470  0x851f7918 0x7c1d7d1e 0x781f8020 0x711e7f16
0xffb5d480  0x7d25821e 0x8519861a 0x7e177f16 0x85147e1b
0xffb5d490  0x7c18834f 0x7e728288 0x8199809d 0x809e809e
0xffb5d4a0  0x809e809d 0x809c7f9c 0x809e7f9a 0x81888171
0xffb5d4b0  0x8655812c 0x871f8122 0x7f238a23 0x6f1f8e23
0xffb5d4c0  0x6f259023 0x75239022 0x721f8e24 0x74208b21
0xffb5d4d0  0x722a8b30 0x70368f3b 0x77418e3c 0x77418c3b
0xffb5d4e0  0x723d8c3c 0x6f408e3b 0x6e458d39 0x74438a3f
0xffb5d4f0  0x7a41873e 0x783a8a3e 0x783e8d3c 0x79438d3a
0xffb5d500  0x862e8325 0x88217b1f 0x87167c1c 0x8e177718
0xffb5d510  0x82228225 0x74398532 0x84197814 0x8e147117
0xffb5d520  0x82147a16 0x7615851a 0x7c1c8419 0x831b7a1b
0xffb5d530  0x82177c19 0x801a7f1c 0x811e7d1d 0x831b7c1a
0xffb5d540  0x811b7b1a 0x80168119 0x7a19821c 0x84217a1b
0xffb5d550  0x841b7719 0x7b1f7d1a 0x83198111 0x8a118312
0xffb5d560  0x8c137e12 0x85137b12 0x81137914 0x87127917
0xffb5d570  0x86157f17 0x82197f22 0x78207d28 0x751a8119
0xffb5d580  0x82198013 0x89187d25 0x812d8132 0x812d8618
0xffb5d590  0x7a148617 0x7c137c19 0x820d7d16 0x88138012
0xffb5d5a0  0x87127f12 0x7f138214 0x7e0d8215 0x82177913
0xffb5d5b0  0x84187c17 0x86167e19 0x81178313 0x7a148617
0xffb5d5c0  0x81157c14 0x841b790f 0x7c14821d 0x7c1e871e
0xffb5d5d0  0x791e851e 0x7a1f821e 0x82207c21 0x851d7e1d
0xffb5d5e0  0x8217841f 0x781d841b 0x7d1c8219 0x85227716
0xffb5d5f0  0x80137f16 0x7e18841b 0x81188418 0x8314821d
0xffb5d600  0x80137b17 0x7c147f17 0x7f118415 0x7c168512
0xffb5d610  0x73198718 0x78158916 0x84188419 0x7b137d18
0xffb5d620  0x7c177f17 0x81178314 0x7d14821a 0x80128711
0xffb5d630  0x7c168718 0x79168015 0x79148114 0x7b147c17
0xffb5d640  0x80147913 0x8717810e 0x87148215 0x7d168212
0xffb5d650  0x77168517 0x7d147f1b 0x82198013 0x8118851b
0xffb5d660  0x87198319 0x811b8218 0x7b177b1d 0x7f167d14
0xffb5d670  0x7d1b8215 0x7c188518 0x81188319 0x8b178313
0xffb5d680  0x851b8617 0x7c15841b 0x8120801f 0x841e7b20
0xffb5d690  0x801e7d1b 0x7e1a821f 0x851d811d 0x801a8520
0xffb5d6a0  0x751d8121 0x7e217a18 0x7d207d1d 0x7520851e
0xffb5d6b0  0x771b871f 0x7e197d1d 0x881c7a19 0x871b7f1e
0xffb5d6c0  0x7d1b8319 0x7e1f841b 0x7f1d841c 0x7c19881d
0xffb5d6d0  0x791d881e 0x7a1a851a 0x82227a18 0x7f217c18
0xffb5d6e0  0x7b228519 0x84118222 0x881f791b 0x86207420
0xffb5d6f0  0x8317781e 0x7e1d7d22 0x79187d24 0x771d7c1a
0xffb5d700  0x7f227f1d 0x821b8419 0x7d187f19 0x85177e14
0xffb5d710  0x81148248 0x7e708386 0x8097819d 0x809f809f
0xffb5d720  0x809d7f9e 0x809f7f9b 0x7f9b7f9a 0x7d8a8071
0xffb5d730  0x8b5a7e35 0x8c1d8022 0x7c228a23 0x6e248c22
0xffb5d740  0x6b238e23 0x71229220 0x7322931d 0x79228d25
0xffb5d750  0x762a8b2e 0x6e318e40 0x72398d3f 0x76388d43
0xffb5d760  0x773d8b3f 0x79458b3d 0x733f8b3e 0x763e8a42
0xffb5d770  0x7e448540 0x7b40863f 0x783e8a42 0x76438d40
0xffb5d780  0x8b258520 0x90257d1d 0x8c19851a 0x8f188116
0xffb5d790  0x82227f2c 0x76328031 0x84157b14 0x8a187719
0xffb5d7a0  0x7c167b1c 0x761d821b 0x7b21811d 0x791c7b1c
0xffb5d7b0  0x7b1c7b1d 0x7f1f7b1e 0x821d7b26 0x7f1d7f1f
0xffb5d7c0  0x7618801b 0x7a1f7e1b 0x7e1f7d20 0x891f7e24
0xffb5d7d0  0x871e7f1d 0x7a1e811a 0x7d1d8016 0x8b127e11
0xffb5d7e0  0x8d137f11 0x83147c11 0x84147b13 0x8b197b11
0xffb5d7f0  0x871d7f1a 0x801b841d 0x76257e24 0x74227e1b
0xffb5d800  0x84147d1c 0x88157e26 0x7e2d8133 0x812e8314
0xffb5d810  0x7e118314 0x79197f13 0x79158115 0x87188315
0xffb5d820  0x8c178016 0x7e128017 0x821a7f17 0x85177c18
0xffb5d830  0x811b8119 0x8817811d 0x87198717 0x7f17871b
0xffb5d840  0x84197e17 0x8215801b 0x7d168618 0x7d1a861b
0xffb5d850  0x751c8519 0x7921831c 0x841d801a 0x87197f20
0xffb5d860  0x83178118 0x7c1c831b 0x821a841a 0x871d8316
0xffb5d870  0x86178716 0x88148617 0x8c178014 0x810f8016
0xffb5d880  0x7b148113 0x81138116 0x80148013 0x84157f12
0xffb5d890  0x80148015 0x7f168417 0x80178716 0x72138713
0xffb5d8a0  0x7d178318 0x88168116 0x80157f11 0x81158215
0xffb5d8b0  0x7e178510 0x7a148116 0x7c0d7e15 0x7d128015
0xffb5d8c0  0x83148315 0x8d148214 0x8c158116 0x77108215
0xffb5d8d0  0x6e168316 0x7e17801c 0x8a198019 0x8b1a8117
0xffb5d8e0  0x8a18821c 0x7d178114 0x78187e1a 0x7d1a8318
0xffb5d8f0  0x7b158719 0x7a158317 0x7d148217 0x8e18831b
0xffb5d900  0x92178213 0x8016841b 0x791c851d 0x7f1e7e1e
0xffb5d910  0x771c7e19 0x751a801d 0x861f7f18 0x8722811c
0xffb5d920  0x7a207f1e 0x781d7d22 0x7a1e7d1b 0x7b21821c
0xffb5d930  0x791d841e 0x7e117f1f 0x8a1f8019 0x8b207f19
0xffb5d940  0x861c8118 0x8120871c 0x8219841e 0x801f8216
0xffb5d950  0x7a1c8319 0x7d208619 0x7e1e811d 0x7b1d801e
0xffb5d960  0x7c1d8619 0x891d841f 0x8b1b7e1e 0x811e7c1a
0xffb5d970  0x821f7c1d 0x831f7c1f 0x7b1f7f1e 0x7d1e7f1f
0xffb5d980  0x831d7f20 0x831c801a 0x80177f1b 0x88138119
0xffb5d990  0x861a8445 0x7f728185 0x8096809c 0x809d809c
0xffb5d9a0  0x809d7f9c 0x819e7f9a 0x7e998094 0x798a8072
0xffb5d9b0  0x91577d30 0x9321811f 0x7b218d21 0x6c248e20
0xffb5d9c0  0x67249123 0x70229021 0x79218e21 0x80218c21
0xffb5d9d0  0x792d8a2d 0x6a35903c 0x6a3f8f3f 0x76428b41
0xffb5d9e0  0x7c428b44 0x83448b44 0x78448d3f 0x784a8b44
0xffb5d9f0  0x844a8945 0x7f458846 0x76458a42 0x75478b48
0xffb5da00  0x7f2b8625 0x8d21801f 0x8d1a8a17 0x8b17891b
0xffb5da10  0x84237a2d 0x7b3d7a2a 0x83157c16 0x881b781d
0xffb5da20  0x7d1e791f 0x76207d25 0x75247e24 0x79207b1b
0xffb5da30  0x81207820 0x831d7828 0x812a772b 0x7f238124
0xffb5da40  0x7f228421 0x87207b22 0x8325792d 0x7a2c7f29
0xffb5da50  0x7c218523 0x7d21841b 0x811f7d18 0x84167716
0xffb5da60  0x82147e12 0x85197d15 0x84137b17 0x86177a1b
0xffb5da70  0x8415801a 0x7a1a861e 0x77217d20 0x77227a18
0xffb5da80  0x801e7a19 0x89167e28 0x80318032 0x7f307e1c
0xffb5da90  0x80197e1b 0x7a158220 0x7b19851b 0x7e1a841d
0xffb5daa0  0x8019801c 0x7d1d7e17 0x801b7d1f 0x81197f1a
0xffb5dab0  0x7f16831d 0x871a831b 0x7d18881b 0x72188720
0xffb5dac0  0x82177d1e 0x8015851a 0x7919881a 0x7b1f8419
0xffb5dad0  0x7919861f 0x801c841c 0x871c8219 0x851c7e1d
0xffb5dae0  0x7e1d7f12 0x7b1b821c 0x801c841a 0x80198c16
0xffb5daf0  0x7f158e14 0x86148712 0x85157c13 0x77137e14
0xffb5db00  0x77118614 0x83148115 0x830f7b15 0x82137713
0xffb5db10  0x82147810 0x84197e13 0x7e158a10 0x73118f17
0xffb5db20  0x80198416 0x86157f16 0x80157a14 0x82167c13
0xffb5db30  0x8217820d 0x84188114 0x86147a14 0x7d148213
0xffb5db40  0x79138912 0x84148315 0x87148012 0x7b128014
0xffb5db50  0x79147f15 0x83158213 0x85188118 0x851a7e19
0xffb5db60  0x8313801b 0x791a7d19 0x79138018 0x82158717
0xffb5db70  0x7c158813 0x7d198019 0x7d198114 0x84198015
0xffb5db80  0x8b197d15 0x83198316 0x7d1d8616 0x791f7f1e
0xffb5db90  0x711f7f1b 0x751c7d1f 0x801d7c1d 0x80207b1e
0xffb5dba0  0x7c1d7b21 0x7d1c7e1b 0x7a207d1f 0x7d1e811c
0xffb5dbb0  0x80198022 0x80157f19 0x851b831e 0x8a1c7e1c
0xffb5dbc0  0x891d7e1c 0x8318871e 0x7d19821f 0x7e1d7b17
0xffb5dbd0  0x801a7b1b 0x7f1c8513 0x7d1c861e 0x7c1e821e
0xffb5dbe0  0x7a1f8614 0x7f198420 0x8020821d 0x7b1d841d
0xffb5dbf0  0x81207e24 0x831d771d 0x781f801f 0x791e8021
0xffb5dc00  0x851d7e1f 0x851a7b1b 0x7d147f1b 0x8613821b
0xffb5dc10  0x88148240 0x7f6e7f84 0x7f92809b 0x809c809c
0xffb5dc20  0x819b809d 0x809b7f99 0x7e9c809a 0x7b888174
0xffb5dc30  0x8d5c7b37 0x8c1c8220 0x7a218e23 0x6e229122
0xffb5dc40  0x6a259121 0x70228c21 0x7824881f 0x7c228823
0xffb5dc50  0x792a8b2f 0x723b9141 0x73439048 0x76488a4b
0xffb5dc60  0x76488849 0x7a4c8a47 0x744c8b4c 0x744a8a4c
0xffb5dc70  0x7d4d8a4c 0x7c52884e 0x764f884e 0x794f8752
0xffb5dc80  0x74268522 0x8b207e21 0x911f8413 0x8917841a
0xffb5dc90  0x86227e2d 0x7f3e7f2c 0x8322801b 0x84217e25
0xffb5dca0  0x7d207f27 0x762d7d30 0x70307c2d 0x7a2b7e22
0xffb5dcb0  0x87257c2b 0x86287d2f 0x7f347f32 0x8231842c
0xffb5dcc0  0x89278726 0x8e298128 0x842e7c31 0x7035802f
0xffb5dcd0  0x7430862e 0x81278523 0x83227b1c 0x7b1a7a13
0xffb5dce0  0x7b1a7d19 0x86197b1b 0x87167e13 0x86187b19
0xffb5dcf0  0x821a7c18 0x781c831b 0x781c811b 0x781b7f19
0xffb5dd00  0x80187d19 0x8d1a7e2b 0x84307f31 0x7e2d7e18
0xffb5dd10  0x821b811a 0x7d1d8015 0x7f1e821a 0x79198517
0xffb5dd20  0x781a831c 0x7f197f1d 0x8017821a 0x811b8218
0xffb5dd30  0x82198319 0x891d8319 0x791a8417 0x6816851d
0xffb5dd40  0x7f1b831d 0x8317841e 0x761a851a 0x7b1a861f
0xffb5dd50  0x801b861a 0x891d821b 0x8d1b8019 0x84187e15
0xffb5dd60  0x7b1d8016 0x7e1d8119 0x811a801a 0x7f1b8815
0xffb5dd70  0x79148c15 0x85158814 0x7e118011 0x6d127e12
0xffb5dd80  0x79128313 0x88138712 0x87128311 0x80137c12
0xffb5dd90  0x83127a14 0x8a167c19 0x80158411 0x7d158217
0xffb5dda0  0x89158019 0x830d8014 0x81167e13 0x85177d14
0xffb5ddb0  0x85158113 0x8c138215 0x90177b15 0x7f108213
0xffb5ddc0  0x71108814 0x7b128415 0x81138613 0x7f118115
0xffb5ddd0  0x85127c15 0x85168214 0x81148315 0x801c7f15
0xffb5dde0  0x7c158619 0x76168819 0x7d158218 0x881d8213
0xffb5ddf0  0x82158417 0x83177f16 0x80187f1a 0x7d128119
0xffb5de00  0x84188019 0x8a1a811b 0x8419811f 0x761b821d
0xffb5de10  0x6e1d811c 0x731c801f 0x7c1e821c 0x7b1a801d
0xffb5de20  0x7e1e7f1e 0x821e7f20 0x7c1b821b 0x8024841b
0xffb5de30  0x891c8122 0x87158019 0x821b8219 0x871c7e1c
0xffb5de40  0x8d1c7b1b 0x89217b1b 0x791b7e19 0x7a1a7f1b
0xffb5de50  0x84147d1d 0x841d7f13 0x801c831d 0x801f831b
0xffb5de60  0x7d208119 0x791d831f 0x731c831b 0x7920831f
0xffb5de70  0x82207c1f 0x811e791e 0x751a801f 0x761f811b
0xffb5de80  0x88227d1f 0x871a7918 0x7a187f15 0x861b8416
0xffb5de90  0x8b198241 0x7f6d7f81 0x80977f9c 0x819a809c
0xffb5dea0  0x819d7f99 0x7f9b7f99 0x7e9c8099 0x7d888075
0xffb5deb0  0x8a5a7b31 0x87208322 0x7b229022 0x72249120
0xffb5dec0  0x6f228e25 0x71228c22 0x77218c21 0x78218d23
0xffb5ded0  0x7c2c8d39 0x7b498d4b 0x7a4e8c52 0x77508a4e
0xffb5dee0  0x70508853 0x73598955 0x73568858 0x72548655
0xffb5def0  0x7a5c8758 0x7a568859 0x75588a5b 0x7a598a5c
0xffb5df00  0x7c2c8320 0x8b207c1f 0x8d1b7d18 0x88187f16
0xffb5df10  0x8522812e 0x80398230 0x80158220 0x80238323
0xffb5df20  0x8228832e 0x7d2f7d3a 0x76327d32 0x7a2a8125
0xffb5df30  0x81257e27 0x812e7f2d 0x7d34853a 0x8130842f
0xffb5df40  0x85278923 0x87268535 0x852f7e3c 0x7b397f34
0xffb5df50  0x78328525 0x7f258529 0x82257a1b 0x811a7c19
0xffb5df60  0x7e167a21 0x87187817 0x86188114 0x7c1d7a1a
0xffb5df70  0x7b1a761a 0x7b177e15 0x7d198313 0x7e168515
0xffb5df80  0x821b8019 0x86177e24 0x82317c34 0x84307e11
0xffb5df90  0x891b8317 0x801e7e1b 0x7e1a7f1a 0x7d178519
0xffb5dfa0  0x7e1a841d 0x7d1b811a 0x7e1b8516 0x851c821c
0xffb5dfb0  0x821b8114 0x8119821a 0x7a1c7f1b 0x781a801c
0xffb5dfc0  0x811b851d 0x8015821e 0x79178219 0x7a19871c
0xffb5dfd0  0x78218418 0x821d7f1b 0x8a177b1b 0x841d7c19
0xffb5dfe0  0x7d1b821c 0x7d1a821a 0x81197d18 0x7e198218
0xffb5dff0  0x78148911 0x84178712 0x82108210 0x76117b14
0xffb5e000  0x7c118014 0x85118b13 0x82138713 0x7b147f15
0xffb5e010  0x80147914 0x8b167b14 0x87107d14 0x84177513
0xffb5e020  0x85157b13 0x81148114 0x85178011 0x84158014
0xffb5e030  0x7f148011 0x82158213 0x87137e15 0x7e128210
0xffb5e040  0x74118513 0x78148511 0x8013880f 0x81178117
0xffb5e050  0x82137a1a 0x800d8215 0x80168314 0x7f177e16
0xffb5e060  0x79148913 0x74189017 0x7d198518 0x8a197c16
0xffb5e070  0x82117f18 0x80177e15 0x81187c18 0x7f17801a
0xffb5e080  0x82198216 0x821a7e1d 0x781d7c1d 0x6f178420
0xffb5e090  0x721d801f 0x761c801e 0x7815871f 0x791e841e
0xffb5e0a0  0x7e21811c 0x7c1e8021 0x7a1b851d 0x7f1f851e
0xffb5e0b0  0x7d198220 0x7e14801c 0x7d1c7f1e 0x801d7d1c
0xffb5e0c0  0x87197823 0x841b6f17 0x7f217611 0x811d8219
0xffb5e0d0  0x7d147f1a 0x7f1d7714 0x85187e1b 0x841e8120
0xffb5e0e0  0x7c1d7c15 0x7a1c811e 0x7c1f851b 0x801e821e
0xffb5e0f0  0x7c1f7b21 0x7d1c7b1f 0x7d1e7e1d 0x791c831c
0xffb5e100  0x831f7c22 0x8419761d 0x7e157f18 0x84188417
0xffb5e110  0x8213823c 0x7d6d7f82 0x7f907f9b 0x819d7f98
0xffb5e120  0x819a7f9f 0x7f997f98 0x7f9a7f96 0x7e8b7f77
0xffb5e130  0x8a5c7b39 0x8b23811f 0x78228e20 0x6d239225
0xffb5e140  0x6f248c21 0x76218b22 0x791d901d 0x7b219321
0xffb5e150  0x792c8e43 0x7a4f8859 0x7a5d8960 0x765e8962
0xffb5e160  0x71628760 0x735d8764 0x74608462 0x75648361
0xffb5e170  0x76628364 0x75638564 0x76628864 0x7a648865
0xffb5e180  0x8328831e 0x8b1f7d1d 0x891d7f1b 0x88178015
0xffb5e190  0x86207c30 0x853d7d2e 0x8016801d 0x81248125
0xffb5e1a0  0x87277f2d 0x8138803e 0x7b358036 0x7c2e8026
0xffb5e1b0  0x7d227d2c 0x7e2e7e3c 0x7c3d833c 0x80388331
0xffb5e1c0  0x82268727 0x8128842f 0x893b7e42 0x853e8133
0xffb5e1d0  0x7d36852d 0x7c278420 0x82247f1f 0x8715801a
0xffb5e1e0  0x80197d1c 0x871c7c1c 0x891c7e12 0x781a7917
0xffb5e1f0  0x76187717 0x7e177f17 0x83158113 0x89158011
0xffb5e200  0x89177f14 0x7f177f27 0x81347d31 0x8d308019
0xffb5e210  0x931f8614 0x8419841d 0x7c198517 0x81198519
0xffb5e220  0x86228616 0x7b1b8415 0x7f1f841b 0x891b8315
0xffb5e230  0x8319811a 0x7817801b 0x7e1a7d1e 0x8419831d
0xffb5e240  0x831a881a 0x7f198316 0x7a207f15 0x7c1d821a
0xffb5e250  0x7215841b 0x7e1c821c 0x891b811b 0x82217e19
0xffb5e260  0x80207f16 0x7c1b8419 0x7f1c821b 0x7f198117
0xffb5e270  0x7c158513 0x8615850f 0x89118312 0x7c117f12
0xffb5e280  0x81128215 0x88138311 0x800f8116 0x77138312
0xffb5e290  0x7b138119 0x89148114 0x8b158315 0x88127c19
0xffb5e2a0  0x82137a14 0x84167814 0x8a177c12 0x86178212
0xffb5e2b0  0x7915830f 0x77128716 0x80148416 0x7e138014
0xffb5e2c0  0x78158114 0x78138013 0x82138116 0x86138117
0xffb5e2d0  0x80138110 0x7d188314 0x82158415 0x7e158216
0xffb5e2e0  0x79168716 0x79178a17 0x82147f17 0x8c1b7a15
0xffb5e2f0  0x82157f14 0x7d168219 0x82138019 0x83157e1d
0xffb5e300  0x83198017 0x77198119 0x6b1d801b 0x691b841f
0xffb5e310  0x741d821c 0x7b1e811d 0x781d841d 0x7b1f8020
0xffb5e320  0x7e1d7f21 0x751e811d 0x7b1e821f 0x831e821c
0xffb5e330  0x751b811d 0x7a197d17 0x7c1f7d1b 0x7c1e8019
0xffb5e340  0x801d7c1c 0x7b18791b 0x851b7c1f 0x881b8219
0xffb5e350  0x77117e15 0x791b7a15 0x891f7f1d 0x871f8419
0xffb5e360  0x7b1e7f1b 0x7d1c801d 0x8820801e 0x8a23811c
0xffb5e370  0x7a1b801e 0x7f1f7e1d 0x8420811d 0x7c20821c
0xffb5e380  0x801e7c22 0x85167b1a 0x84188018 0x8518811a
0xffb5e390  0x7c11813b 0x7b6b8083 0x7f908099 0x819d7f9a
0xffb5e3a0  0x819b7f9b 0x7f9a809b 0x7f9a8098 0x808b7d72
0xffb5e3b0  0x8d5c7b34 0x8d23811e 0x76239027 0x6b259421
0xffb5e3c0  0x70228d24 0x7d218c23 0x7f21921f 0x82219126
0xffb5e3d0  0x782e904b 0x775a8b62 0x7c6b8767 0x796b856e
0xffb5e3e0  0x7868856d 0x776d866e 0x786c856e 0x796c856f
0xffb5e3f0  0x776a856d 0x766d846d 0x7b6d846e 0x7e6f876e
0xffb5e400  0x85228323 0x881f7d1e 0x7f1d7f17 0x7f158116
0xffb5e410  0x84237931 0x8538792c 0x851d7d20 0x83237e2a
0xffb5e420  0x812c7c2c 0x7c398240 0x7c3b8338 0x7f2f7f28
0xffb5e430  0x81267b2a 0x80307d39 0x7c3f803d 0x7d398131
0xffb5e440  0x7a288529 0x7d2a822b 0x84397e40 0x7d378539
0xffb5e450  0x76368429 0x7d2a8225 0x8222841e 0x821b821a
0xffb5e460  0x7c178019 0x851d7f19 0x831b7c17 0x771b751b
0xffb5e470  0x7c157715 0x86157e15 0x85147e12 0x88107814
0xffb5e480  0x8d117d13 0x84177e27 0x7f327c36 0x88298117
0xffb5e490  0x90178618 0x85198a18 0x7e1a891e 0x7b17831a
0xffb5e4a0  0x7e1b8519 0x751d8719 0x7a15831a 0x831d7f1a
0xffb5e4b0  0x84178019 0x801a7c1d 0x7d197918 0x7b15861b
0xffb5e4c0  0x7c1c8919 0x7d1b8117 0x7c1e7a1c 0x7b1a7c19
0xffb5e4d0  0x721c8219 0x741b8319 0x7a1a8416 0x821e7f1b
0xffb5e4e0  0x881b7c1a 0x7f1a8416 0x7a1a851c 0x7a1d7e19
0xffb5e4f0  0x77157f13 0x80128113 0x82108210 0x83128214
0xffb5e500  0x84138213 0x810f7d17 0x82137a13 0x790f8519
0xffb5e510  0x7a138514 0x85168512 0x83148714 0x83158317
0xffb5e520  0x82147915 0x84176d19 0x87137613 0x81178010
0xffb5e530  0x7a178310 0x79138812 0x7c128714 0x7b137e13
0xffb5e540  0x7c157b14 0x7e137815 0x83117714 0x88137f10
0xffb5e550  0x8317860d 0x7f198211 0x82148513 0x83178314
0xffb5e560  0x7f118419 0x79128315 0x801e790d 0x89187417
0xffb5e570  0x86187e13 0x80148616 0x82188215 0x831f7c15
0xffb5e580  0x831a7d19 0x7d1b8218 0x75228219 0x751b841e
0xffb5e590  0x771d811f 0x791d8220 0x7d1d821f 0x81207a1d
0xffb5e5a0  0x7f1c7b1c 0x7c198120 0x85207e18 0x841f7c23
0xffb5e5b0  0x76177d1e 0x7e17771b 0x7d1d781d 0x7919821f
0xffb5e5c0  0x811c811c 0x811c7f1d 0x851a7e1d 0x871c7f1c
0xffb5e5d0  0x7f187c17 0x80157a16 0x871a7e1c 0x8219851c
0xffb5e5e0  0x781f801b 0x7e207d1c 0x871d7c22 0x851f7e1d
0xffb5e5f0  0x7c1b8421 0x7e22801b 0x821d811d 0x811f7f24
0xffb5e600  0x7f1b7b1f 0x7f1a7e19 0x8017811b 0x84157d19
0xffb5e610  0x7e118035 0x7b668080 0x7f8e809c 0x809c7f9e
0xffb5e620  0x809a7f99 0x7f9c8198 0x8097809b 0x808b7c75
0xffb5e630  0x895e7a3d 0x8d268123 0x7b1e9222 0x6c249525
0xffb5e640  0x6c238e22 0x74268d1d 0x79219221 0x7f248f21
0xffb5e650  0x742d904c 0x7563896c 0x77728673 0x76738377
0xffb5e660  0x7877836f 0x79748577 0x7a758474 0x7a748574
0xffb5e670  0x79748476 0x79728273 0x7d778175 0x7d748471
0xffb5e680  0x8924851d 0x861f831c 0x76178517 0x78178117
0xffb5e690  0x83247b31 0x863d7c2e 0x8c207d20 0x86277e26
0xffb5e6a0  0x7b247e32 0x79367e3f 0x7e3a803b 0x842e7f23
0xffb5e6b0  0x85287f29 0x82328039 0x7b3c8135 0x793d812e
0xffb5e6c0  0x7525832a 0x7b29802b 0x80348239 0x77368835
0xffb5e6d0  0x6f308624 0x7f298526 0x86228419 0x7e188519
0xffb5e6e0  0x7b168619 0x841b8319 0x7b1a7f1b 0x74127c20
0xffb5e6f0  0x82187c16 0x8e177b15 0x8a118110 0x84107e11
0xffb5e700  0x911a7e15 0x8a15812a 0x7d308034 0x842d851d
0xffb5e710  0x8e1b8514 0x8a18861c 0x831a8614 0x7617851d
0xffb5e720  0x78198819 0x6f17871d 0x761d8719 0x7d1b8517
0xffb5e730  0x871c7b1a 0x8a1d7616 0x7d1d7c19 0x761b8619
0xffb5e740  0x791d8518 0x7c1b801b 0x7a1b7f1b 0x7819821d
0xffb5e750  0x7318841d 0x6b1a841a 0x701b861c 0x841f811c
0xffb5e760  0x8f1c7b1b 0x871b8017 0x751a8519 0x751b7f1e
0xffb5e770  0x75107f13 0x7a178112 0x80128113 0x8a138112
0xffb5e780  0x87138112 0x78128310 0x84188213 0x80108514
0xffb5e790  0x7d158515 0x84158416 0x7f158614 0x8310821b
0xffb5e7a0  0x85137b16 0x82137917 0x84157d19 0x7d138016
0xffb5e7b0  0x7d148213 0x7b158815 0x7a138513 0x7a147f13
0xffb5e7c0  0x81118214 0x82157e14 0x86147917 0x8c128113
0xffb5e7d0  0x89178610 0x83148216 0x83147f14 0x89158014
0xffb5e7e0  0x85178115 0x77138518 0x7b12801e 0x850e7c15
0xffb5e7f0  0x8c197e18 0x88117d19 0x85177f19 0x82198719
0xffb5e800  0x811b851b 0x861d8119 0x8316811e 0x8522851d
0xffb5e810  0x7b17831e 0x791f821e 0x831e801f 0x89207d1f
0xffb5e820  0x811d7b1d 0x831f7c20 0x8c20811f 0x8321811b
0xffb5e830  0x771b821d 0x821a7f1c 0x7e177c1f 0x781d8115
0xffb5e840  0x8421811c 0x8b1d831b 0x851b821f 0x871a801c
0xffb5e850  0x881a7e17 0x8a1d7d14 0x841a811d 0x7d1b861d
0xffb5e860  0x781e801a 0x811c7d1f 0x87227d1f 0x821b8121
0xffb5e870  0x821d8320 0x8020821f 0x811e821e 0x861d8020
0xffb5e880  0x801b8022 0x7d13831f 0x7d16851c 0x82128217
0xffb5e890  0x821e8039 0x7b64817e 0x7f918097 0x809f809c
0xffb5e8a0  0x809c809b 0x809b8099 0x80998097 0x7f897e76
0xffb5e8b0  0x875d7c39 0x8e258223 0x83229026 0x6f239323
0xffb5e8c0  0x6a219122 0x6b208f21 0x76239223 0x7c229223
0xffb5e8d0  0x722f8e55 0x76658875 0x7878857e 0x767d847d
0xffb5e8e0  0x797c8481 0x7c7a857e 0x7d7a8580 0x7c7a857c
0xffb5e8f0  0x7c7c847e 0x7c78857c 0x7e7d847a 0x7d7b857a
0xffb5e900  0x852b861f 0x7c1b881f 0x7a1a8919 0x871a7f16
0xffb5e910  0x86227c32 0x83397e32 0x881a7b1d 0x852b7a29
0xffb5e920  0x7a277e2d 0x793c7b36 0x7e377d32 0x852a7d24
0xffb5e930  0x82268121 0x7d308236 0x7c348239 0x7d32812c
0xffb5e940  0x7a288024 0x7e297d2b 0x812f8430 0x7c2f8c35
0xffb5e950  0x7d2c8927 0x81248625 0x8321821e 0x84178619
0xffb5e960  0x85178b1a 0x8a1f8619 0x81208019 0x7c1b7f1a
0xffb5e970  0x841a7e19 0x87167919 0x8614800d 0x8b168217
0xffb5e980  0x8d137b15 0x85207f23 0x7f338236 0x8123871f
0xffb5e990  0x8a1d8419 0x89188219 0x7f17821a 0x791a8417
0xffb5e9a0  0x7c1b8618 0x721a881b 0x781b8a19 0x8318871a
0xffb5e9b0  0x841b751c 0x861d6e17 0x7b177d1a 0x7519841b
0xffb5e9c0  0x7a197f1d 0x80187e1a 0x7f1b831b 0x851a851a
0xffb5e9d0  0x841a851a 0x771c8517 0x761b841c 0x7c19811b
0xffb5e9e0  0x851d791d 0x86197a1b 0x7e18821c 0x811b7e1d
0xffb5e9f0  0x81187d15 0x80147e12 0x81138014 0x85117d12
0xffb5ea00  0x84137c14 0x7b148610 0x7f148918 0x7f118413
0xffb5ea10  0x7b148217 0x81108117 0x80128215 0x81178015
0xffb5ea20  0x84157c17 0x84138317 0x7d158417 0x7a1b7d15
0xffb5ea30  0x7b177f12 0x77138811 0x7a198112 0x80177d11
0xffb5ea40  0x7f138713 0x83158214 0x87167b16 0x83128013
0xffb5ea50  0x84168511 0x88157f17 0x84137a16 0x85157c13
0xffb5ea60  0x84177d16 0x77158416 0x75168713 0x79178214
0xffb5ea70  0x86157e17 0x891b7418 0x85177c15 0x7d158f1a
0xffb5ea80  0x79198b1a 0x811e7d1b 0x7f1e7f1b 0x7f1e851d
0xffb5ea90  0x7f21831d 0x7d1f821b 0x7c1d7e20 0x871b7e20
0xffb5eaa0  0x89207a22 0x8820771d 0x851e8220 0x7b1d8519
0xffb5eab0  0x7420831e 0x7d1b851b 0x7e1c7e1f 0x781d7e19
0xffb5eac0  0x7e1d831c 0x861e841a 0x82228419 0x851c7e1f
0xffb5ead0  0x8d1d7b1b 0x8c1b7d1d 0x8318801c 0x8020841a
0xffb5eae0  0x801e7d1e 0x82177d1e 0x84217e1d 0x811b8020
0xffb5eaf0  0x7c1f801f 0x7a1c841f 0x791d8221 0x801e801b
0xffb5eb00  0x7a1e851f 0x7719861b 0x79178417 0x7f1a8417
0xffb5eb10  0x85178132 0x7e66807d 0x7e8c8198 0x7f9a809b
0xffb5eb20  0x7f9a8098 0x809e7f99 0x80958095 0x7d8d8177
0xffb5eb30  0x85647c40 0x91258121 0x82218c25 0x6f238f23
0xffb5eb40  0x69209229 0x6f1e9020 0x73239121 0x7521941c
0xffb5eb50  0x72338b55 0x75698476 0x77818382 0x78838483
0xffb5eb60  0x7c838584 0x7d848684 0x7b848582 0x7a848484
0xffb5eb70  0x7a818380 0x7c83867f 0x7c808883 0x7c7f8582
0xffb5eb80  0x83208421 0x761b851f 0x801b8719 0x961c8012
0xffb5eb90  0x89247c2d 0x81407f2f 0x85207c1e 0x84277d29
0xffb5eba0  0x7b258227 0x7a318235 0x7d308130 0x86237d26
0xffb5ebb0  0x82258121 0x7726822c 0x7d348231 0x822f8229
0xffb5ebc0  0x7f237f26 0x81208226 0x84288630 0x832b882d
0xffb5ebd0  0x89278329 0x83288326 0x81238325 0x8a1e7f22
0xffb5ebe0  0x90207d2b 0x91218221 0x85228020 0x84237d22
0xffb5ebf0  0x8a237c1a 0x7f217a16 0x83208120 0x901f8327
0xffb5ec00  0x8a267c27 0x852f7b3a 0x823c8335 0x7f29891c
0xffb5ec10  0x8b128121 0x8c157e19 0x7a1b831b 0x7d1a881b
0xffb5ec20  0x821b871b 0x7718831c 0x7e1a871b 0x8a1f8915
0xffb5ec30  0x81157f1b 0x7f1c7a1b 0x7c1b811b 0x761a851a
0xffb5ec40  0x7b178620 0x831a831c 0x851d8518 0x901c881c
0xffb5ec50  0x931b851c 0x8416831c 0x7b1b8519 0x721e8519
0xffb5ec60  0x7a1b7d1c 0x86197e18 0x8917811f 0x8c1c7e1a
0xffb5ec70  0x8c187f18 0x86148016 0x83128112 0x81137f11
0xffb5ec80  0x8213811a 0x80158711 0x7c148a13 0x7f148516
0xffb5ec90  0x7c128114 0x7e157f14 0x83178312 0x82178313
0xffb5eca0  0x87167c15 0x8b158115 0x7a128615 0x76188115
0xffb5ecb0  0x7c198113 0x75158611 0x7b148317 0x83148218
0xffb5ecc0  0x800d8614 0x85188311 0x89158116 0x7d148214
0xffb5ecd0  0x80138413 0x8e157f19 0x83107b13 0x82197f14
0xffb5ece0  0x81188313 0x79158219 0x75168216 0x7311801d
0xffb5ecf0  0x85167d15 0x8a197716 0x881a8118 0x791c8c11
0xffb5ed00  0x731a8b20 0x7b17811c 0x7d227f21 0x7d208219
0xffb5ed10  0x8424841f 0x821f8422 0x76198020 0x87227e23
0xffb5ed20  0x91217e21 0x8b257d21 0x7f21821c 0x751f841f
0xffb5ed30  0x731f841b 0x7d1f8019 0x7f1e801b 0x7a1d811d
0xffb5ed40  0x781d8020 0x801f8321 0x7f20871e 0x841b8222
0xffb5ed50  0x91227d23 0x8e238024 0x821d8226 0x831b8323
0xffb5ed60  0x87207f20 0x851c7c1d 0x831f7e1f 0x82217f1b
0xffb5ed70  0x791f821f 0x791e831f 0x741e801c 0x7b21821d
0xffb5ed80  0x771d881e 0x721c851a 0x77188418 0x80198119
0xffb5ed90  0x87138136 0x8165817c 0x7e8d8097 0x7e9a819c
0xffb5eda0  0x809b809d 0x809a7f97 0x7f988096 0x7b898178
0xffb5edb0  0x84617e41 0x9521801f 0x81239023 0x6c249621
0xffb5edc0  0x69239523 0x74248f1f 0x72218f22 0x72239120
0xffb5edd0  0x742e8d58 0x7572867c 0x7580858b 0x7a8c8488
0xffb5ede0  0x8087848d 0x7f858388 0x7b898489 0x78878484
0xffb5edf0  0x798a8487 0x7e868588 0x7d888684 0x7d868584
0xffb5ee00  0x82268220 0x8121821d 0x881a8418 0x8f168019
0xffb5ee10  0x851f7c31 0x823d7f34 0x872a7c25 0x802b7d2b
0xffb5ee20  0x7829842d 0x7a338833 0x7a328234 0x7f2d7b2e
0xffb5ee30  0x82297f30 0x7f317e37 0x8234823b 0x8237803a
0xffb5ee40  0x7f327e2e 0x80388432 0x7f32883c 0x7e348534
0xffb5ee50  0x84337d31 0x81347f31 0x7e31832e 0x81367b31
0xffb5ee60  0x8932752f 0x88307f2e 0x7d2f8033 0x7c2d7b26
0xffb5ee70  0x80277b2b 0x7b217b23 0x7f208225 0x8724822c
0xffb5ee80  0x832c7c35 0x83327933 0x7e358234 0x7c248a17
0xffb5ee90  0x851c7c1d 0x851a791b 0x7a178317 0x7d1b8b1a
0xffb5eea0  0x8114861f 0x7e1a7d17 0x7e188217 0x8419891a
0xffb5eeb0  0x7b1a8819 0x7a208415 0x7d1d821c 0x751b851b
0xffb5eec0  0x7b198c1c 0x841b8819 0x82208617 0x871a8a19
0xffb5eed0  0x881f841d 0x80198018 0x7f19841a 0x7c1a861c
0xffb5eee0  0x7f197f1d 0x84188115 0x87207e1a 0x8a197c1c
0xffb5eef0  0x881d7f16 0x81138216 0x80148213 0x83127f15
0xffb5ef00  0x7b158211 0x7b198a13 0x7d168b16 0x7b158614
0xffb5ef10  0x7d157e17 0x81167c15 0x81168416 0x81128419
0xffb5ef20  0x84157915 0x87167e15 0x81168716 0x7f198215
0xffb5ef30  0x85178117 0x81148516 0x7a13851a 0x80138514
0xffb5ef40  0x85178417 0x84198315 0x83168512 0x7d158315
0xffb5ef50  0x7d138213 0x84167c17 0x7f187a1b 0x81168118
0xffb5ef60  0x801b8418 0x79198019 0x7d1c7c18 0x82197d1c
0xffb5ef70  0x881a7c1e 0x841e7a1e 0x80208220 0x7e20891e
0xffb5ef80  0x7b20881b 0x801d851d 0x841f7e25 0x7d277f22
0xffb5ef90  0x81208324 0x82278526 0x7f288129 0x85257d29
0xffb5efa0  0x8429802a 0x84288129 0x7b248221 0x731f8321
0xffb5efb0  0x751e821d 0x80207a19 0x841f8119 0x7f1d821c
0xffb5efc0  0x7e207922 0x7d228122 0x78238921 0x7b258625
0xffb5efd0  0x86267e25 0x84268128 0x7f2c8126 0x82238220
0xffb5efe0  0x811f7e24 0x85177c1f 0x861e7c1f 0x80237e1c
0xffb5eff0  0x7c20811e 0x82208120 0x80217d1d 0x7b1d841d
0xffb5f000  0x7820891b 0x771c851a 0x7c198219 0x86137c18
0xffb5f010  0x8818812b 0x7d60817d 0x7d898196 0x7e998199
0xffb5f020  0x7f9a809d 0x7f978099 0x7f978095 0x7d8f8277
0xffb5f030  0x88668042 0x912a7f23 0x791e9524 0x6a239b23
0xffb5f040  0x6c239723 0x71248e23 0x70248b1b 0x79258e23
0xffb5f050  0x77288f59 0x74708882 0x78888388 0x7f8f818a
0xffb5f060  0x808d818c 0x808c808b 0x7c8b818a 0x798b828e
0xffb5f070  0x7b8c8289 0x7e8d818a 0x7c89828a 0x7c8a8389
0xffb5f080  0x80268121 0x8b1c7d20 0x8f1d7e18 0x8a158219
0xffb5f090  0x821e7f2d 0x873d8136 0x8b347e39 0x802f7c34
0xffb5f0a0  0x79318236 0x7c378436 0x79358130 0x7e377a34
0xffb5f0b0  0x86377b34 0x86387e32 0x87358232 0x85327f31
0xffb5f0c0  0x82337c2e 0x8232812f 0x7f2d822e 0x7d2e812f
0xffb5f0d0  0x7f307d34 0x7f2a7e31 0x7d34822b 0x7c2d7e2f
0xffb5f0e0  0x832e792f 0x812e7e2a 0x772e802f 0x762c7c2a
0xffb5f0f0  0x7a257d24 0x78248020 0x80218128 0x82287f29
0xffb5f100  0x80307e37 0x80317f32 0x79348430 0x7d1a841b
0xffb5f110  0x81197c19 0x7d207d15 0x7a1c8319 0x8019871d
0xffb5f120  0x8415811b 0x85187e13 0x80168617 0x8019871a
0xffb5f130  0x7a17861d 0x7a18851a 0x821d841b 0x7919851a
0xffb5f140  0x7f198720 0x881b851b 0x821b8420 0x801c8a16
0xffb5f150  0x7c1e8919 0x7d1b851d 0x851a871d 0x851b861a
0xffb5f160  0x851a811a 0x841b811d 0x861b801d 0x881b7e20
0xffb5f170  0x871f821c 0x7f15871a 0x81168715 0x860e8515
0xffb5f180  0x78148711 0x79158917 0x81158513 0x7c178111
0xffb5f190  0x80178014 0x82178211 0x82168616 0x83168415
0xffb5f1a0  0x80168118 0x84198220 0x8919831f 0x871a8221
0xffb5f1b0  0x8d1e8319 0x891f8514 0x791f811a 0x7f1f8220
0xffb5f1c0  0x8a23831f 0x8622811f 0x7e1f831c 0x7f1a821b
0xffb5f1d0  0x7b168411 0x7b1c7f22 0x7d227f22 0x81268024
0xffb5f1e0  0x8229812a 0x7c2a7f28 0x83267b22 0x8d1f7925
0xffb5f1f0  0x8b1e7b2b 0x7f267b24 0x7c288027 0x81258829
0xffb5f200  0x83218a1d 0x851b8920 0x89218413 0x7f1f802c
0xffb5f210  0x8036822c 0x822c8431 0x842e842f 0x8233802c
0xffb5f220  0x7a2d7f2f 0x802d7d27 0x7b257f24 0x75208120
0xffb5f230  0x79207e1d 0x83137d1d 0x8820851d 0x841b841f
0xffb5f240  0x82227f24 0x7824852c 0x76268523 0x78278128
0xffb5f250  0x7d297e24 0x7e337e2c 0x7e258026 0x7f298324
0xffb5f260  0x7c1d821f 0x861e801f 0x891e7f20 0x7e1c8020
0xffb5f270  0x8122821c 0x8b20801f 0x8a21841a 0x7d1e861e
0xffb5f280  0x7c208520 0x7c188417 0x801a8018 0x8f1b7a15
0xffb5f290  0x8a188131 0x795e827a 0x7c8b8095 0x7e9a809a
0xffb5f2a0  0x7e9a7f9a 0x7f9c8095 0x7e988096 0x7f8f807a
0xffb5f2b0  0x8d617f43 0x8e248222 0x73209425 0x6b269824
0xffb5f2c0  0x71249322 0x72238f21 0x70228d22 0x83248f26
0xffb5f2d0  0x7e2e8e5c 0x76708781 0x7d8c8290 0x8090828f
0xffb5f2e0  0x808e818f 0x80918190 0x7d8d818f 0x7d908190
0xffb5f2f0  0x7f8f818e 0x7f918292 0x7e8d828f 0x7e8f828b
0xffb5f300  0x86257f21 0x8d20761f 0x8a1b7819 0x8515811b
0xffb5f310  0x821c8225 0x85378331 0x872f802b 0x80307b30
0xffb5f320  0x7e2d7f2e 0x7f308033 0x7a317f2f 0x7e387730
0xffb5f330  0x84327630 0x852d7c30 0x8330802f 0x802f7e33
0xffb5f340  0x7f2f7833 0x822c7c2c 0x82327b2e 0x80307c2e
0xffb5f350  0x7e307d31 0x7f2d7e32 0x7c328231 0x7e307f35
0xffb5f360  0x82307c2f 0x7f327c32 0x7b2f7e2e 0x78337d2c
0xffb5f370  0x772a801e 0x75248522 0x78258022 0x7a2d7b2e
0xffb5f380  0x76328033 0x7c338235 0x7c298326 0x80217a1b
0xffb5f390  0x821d7b16 0x7e1b7e1a 0x7a1b7f19 0x7c188015
0xffb5f3a0  0x821a7b1a 0x851b7c11 0x83188517 0x8215841e
0xffb5f3b0  0x821d831b 0x851d821f 0x8217841e 0x7b1a841d
0xffb5f3c0  0x801f8022 0x821a801f 0x801b7f1a 0x811c8917
0xffb5f3d0  0x7b1c8d1d 0x7d17871b 0x831c871f 0x7e1c8422
0xffb5f3e0  0x831b8120 0x871c801f 0x80227f24 0x7f247e23
0xffb5f3f0  0x80228325 0x801c8a1d 0x82158913 0x89108915
0xffb5f400  0x7f138815 0x7d168817 0x86177e14 0x82177912
0xffb5f410  0x81118013 0x83178611 0x82148615 0x84138415
0xffb5f420  0x821c871d 0x7f24842a 0x81288028 0x81288127
0xffb5f430  0x8425832b 0x84288326 0x82307e2f 0x8231802d
0xffb5f440  0x8232812c 0x7e2b7f2d 0x782c8026 0x7e237f1c
0xffb5f450  0x7f158414 0x7c268123 0x7825802d 0x7e337e2e
0xffb5f460  0x83337e39 0x7f3c7e35 0x852d7828 0x8b257629
0xffb5f470  0x86227a31 0x81357c29 0x83317e2f 0x83278728
0xffb5f480  0x80258a20 0x7e1c8a1d 0x81208a1a 0x7e1d801e
0xffb5f490  0x7c327f3e 0x7b3b843d 0x81308537 0x823b8034
0xffb5f4a0  0x83317c3e 0x81337928 0x7c2d7d1f 0x80227d1f
0xffb5f4b0  0x7e1e771f 0x80177e15 0x841b881b 0x851d841b
0xffb5f4c0  0x81278323 0x7627892c 0x7c2a812a 0x7c287c2b
0xffb5f4d0  0x7c2b7d29 0x7d26782b 0x7c237f2a 0x7f268420
0xffb5f4e0  0x7c208620 0x811d841c 0x82237f1c 0x7a1d801e
0xffb5f4f0  0x801f811f 0x88207d20 0x851c8920 0x821e8720
0xffb5f500  0x831f7f1f 0x801c8319 0x7e177d1b 0x881a7719
0xffb5f510  0x870f8128 0x7c5e8377 0x7d8a8094 0x7f997f97
0xffb5f520  0x7f9b8099 0x80998095 0x7f988095 0x7e8c7f7b
0xffb5f530  0x8a627e44 0x91298323 0x76239122 0x68249423
0xffb5f540  0x6f268f20 0x74238e21 0x77239022 0x7c239220
0xffb5f550  0x772b8d5a 0x77738584 0x7e8e8195 0x808f8195
0xffb5f560  0x7f928196 0x7f928094 0x7e938093 0x7e938094
0xffb5f570  0x7f958190 0x7f928293 0x7f918292 0x7f928191
0xffb5f580  0x8c1d8122 0x8e1e7b1f 0x821c7e17 0x7f177f19
0xffb5f590  0x85157f23 0x86318137 0x832a7f32 0x81318030
0xffb5f5a0  0x83328435 0x8030842d 0x7c368130 0x80367930
0xffb5f5b0  0x80317b31 0x8232842f 0x7e34872f 0x77328430
0xffb5f5c0  0x7b2d7e2e 0x802f8034 0x832e7f2f 0x822a802b
0xffb5f5d0  0x7c2c7f2d 0x80307e2d 0x7d2c7f2f 0x832d7f2c
0xffb5f5e0  0x842b7e26 0x7d287d29 0x7e298022 0x7c238025
0xffb5f5f0  0x7820811c 0x771d811b 0x731b7e1c 0x711c7b22
0xffb5f600  0x6d208120 0x79218521 0x82248122 0x84277a19
0xffb5f610  0x85167b1f 0x84177c18 0x7d1a7c19 0x77198017
0xffb5f620  0x7d187f19 0x871c7c1d 0x891d8113 0x8420821f
0xffb5f630  0x8a238122 0x91238024 0x83278221 0x7f2f8127
0xffb5f640  0x812a822a 0x7c278324 0x7e1b7f18 0x8322841e
0xffb5f650  0x7d1e891b 0x8019871d 0x83218227 0x7a28802c
0xffb5f660  0x822d7f28 0x882d7e2e 0x7e277f33 0x7b2f7d2c
0xffb5f670  0x7f358030 0x842e8723 0x86178616 0x90118017
0xffb5f680  0x87148413 0x83168319 0x8c157d15 0x87157e14
0xffb5f690  0x86137e13 0x88138014 0x83138413 0x86148315
0xffb5f6a0  0x85208028 0x7d257f34 0x7d367f30 0x7e2f8037
0xffb5f6b0  0x80298230 0x82318032 0x87397d3a 0x853b7e3e
0xffb5f6c0  0x7f3e823e 0x7b367f38 0x7739802e 0x7f2a8126
0xffb5f6d0  0x83138116 0x7f257f26 0x782c8034 0x7d317d42
0xffb5f6e0  0x84407c41 0x82457f3b 0x85347f2c 0x88267a2d
0xffb5f6f0  0x842b7937 0x843f7b2e 0x88377e36 0x852b8729
0xffb5f700  0x7d268b21 0x781a8b1d 0x79218a1c 0x7f1c821f
0xffb5f710  0x7a287f2b 0x75498352 0x7e3c8539 0x8538803c
0xffb5f720  0x8c307e3a 0x83307d2b 0x7d278221 0x89228120
0xffb5f730  0x7f1d7d1d 0x7e1a7e19 0x821b831f 0x871c7f1f
0xffb5f740  0x83238125 0x79218529 0x812e7f23 0x812a7d28
0xffb5f750  0x7d2a7e2d 0x7b257d2f 0x7a277f2a 0x81268422
0xffb5f760  0x821f841f 0x8120821e 0x7b1f7f20 0x791f7c1f
0xffb5f770  0x7f207e20 0x87207f20 0x841e871b 0x8521851b
0xffb5f780  0x8a1e7f19 0x881d851a 0x7d198110 0x821b781b
0xffb5f790  0x86107f2f 0x7f5a827a 0x7f878094 0x7f987f9b
0xffb5f7a0  0x80977f98 0x8096809a 0x80928095 0x7d8d7f78
0xffb5f7b0  0x87658143 0x95278322 0x7b1e8f23 0x63229424
0xffb5f7c0  0x6f239123 0x78239024 0x7f229322 0x77229522
0xffb5f7d0  0x722d8e5d 0x78768486 0x7e938194 0x7f9b8196
0xffb5f7e0  0x7f968199 0x7e978194 0x7e968197 0x7e958196
0xffb5f7f0  0x7f978195 0x7f958296 0x7f918298 0x7f958297
0xffb5f800  0x8528811f 0x871f7f1d 0x811c821a 0x84177b1d
0xffb5f810  0x871b7d20 0x84297e2d 0x802b7d2a 0x7c2a8627
0xffb5f820  0x7f298c26 0x7d2c882b 0x7c288527 0x7e287f2b
0xffb5f830  0x7d208226 0x7e218c22 0x7c288d1b 0x75218a21
0xffb5f840  0x7b248517 0x80208717 0x8619871b 0x821a851b
0xffb5f850  0x7e1c821a 0x83197e1b 0x801a7915 0x81177d11
0xffb5f860  0x8719811c 0x83197f15 0x7d1a8316 0x7c198318
0xffb5f870  0x7b167f15 0x7e177d12 0x7a177a17 0x7a177818
0xffb5f880  0x79137e1a 0x79188426 0x81287d28 0x832e7a19
0xffb5f890  0x83197d17 0x821a791d 0x7f197619 0x7c197e15
0xffb5f8a0  0x7f177f1a 0x85217b1f 0x85267e2a 0x852e7e26
0xffb5f8b0  0x852c7e30 0x852d7e39 0x82387d34 0x81437f3a
0xffb5f8c0  0x7d398243 0x792f8230 0x7e207c22 0x80197c1c
0xffb5f8d0  0x8019841f 0x831b841e 0x821e7f36 0x7c2d7c36
0xffb5f8e0  0x7c397e2f 0x80367e34 0x7d397c42 0x7c2f7c3d
0xffb5f8f0  0x7f477c33 0x7f328428 0x7e1b8219 0x84147714
0xffb5f900  0x86138015 0x82137f14 0x83167b17 0x820e8212
0xffb5f910  0x88157c13 0x88137913 0x7e128111 0x7d19800d
0xffb5f920  0x7c237931 0x80337a3c 0x80427c38 0x7a3c8136
0xffb5f930  0x78358441 0x80387d3e 0x823c7a48 0x80407e42
0xffb5f940  0x81458248 0x803a7f3c 0x7d3d7f30 0x7e308123
0xffb5f950  0x811a7c15 0x82237d29 0x7b318034 0x7a2f7d42
0xffb5f960  0x7e3f7d3e 0x7d428148 0x8133842d 0x8a287c2b
0xffb5f970  0x80317a2e 0x7c3a7a33 0x80297d2e 0x802c8627
0xffb5f980  0x7d248a1d 0x78188820 0x7b208820 0x7a24811e
0xffb5f990  0x78287c27 0x7a30833e 0x8153843c 0x8a387f33
0xffb5f9a0  0x8831802f 0x812c8229 0x7b228622 0x81208420
0xffb5f9b0  0x7e20801e 0x7d1b7c17 0x7f1f7c1b 0x851d791f
0xffb5f9c0  0x801b7d24 0x78277f26 0x7e2a7b24 0x83277c26
0xffb5f9d0  0x7c247f28 0x72298329 0x7629802b 0x7f228219
0xffb5f9e0  0x7e228022 0x7d207f1a 0x801e7f20 0x7d20761d
0xffb5f9f0  0x7d1e7a1f 0x821f7f20 0x841e811d 0x851d811e
0xffb5fa00  0x851f7f1d 0x7c1c851a 0x78198318 0x88187817
0xffb5fa10  0x89157c25 0x7e5b8273 0x7e858093 0x7f977f9a
0xffb5fa20  0x80987f98 0x80948197 0x80948096 0x7b8e807b
0xffb5fa30  0x7f668144 0x922c821c 0x81228d24 0x71229326
0xffb5fa40  0x75249127 0x771e9123 0x73239522 0x73249821
0xffb5fa50  0x75298e5b 0x77778387 0x7d95819a 0x7e9c819a
0xffb5fa60  0x7e9b819a 0x7e9a819c 0x7e98819a 0x7e988199
0xffb5fa70  0x7e988297 0x7f968297 0x7f978299 0x7f978294
0xffb5fa80  0x8022841e 0x8220801f 0x801b8317 0x84167e1b
0xffb5fa90  0x881d7e22 0x82278024 0x7e157e1a 0x781b851b
0xffb5faa0  0x7e198819 0x7e158811 0x841b8417 0x82127f15
0xffb5fab0  0x7d198113 0x7e1a8914 0x7c188c19 0x770f881d
0xffb5fac0  0x7f178615 0x84138617 0x8c18821d 0x87138119
0xffb5fad0  0x84188017 0x8a138016 0x8617801b 0x81168112
0xffb5fae0  0x8b1b821c 0x8d1b821a 0x80138217 0x82187d16
0xffb5faf0  0x83147d14 0x86157e16 0x85137b16 0x841a7c19
0xffb5fb00  0x821a8214 0x79198523 0x7d31802e 0x81327e1d
0xffb5fb10  0x83197f18 0x80197e1a 0x7e197f1c 0x811a831a
0xffb5fb20  0x8217821b 0x821f7c2c 0x83327c38 0x87427e2c
0xffb5fb30  0x85388041 0x82377e4b 0x834a7d3e 0x864d7b4b
0xffb5fb40  0x7d477b51 0x7a407e3b 0x7e277e1e 0x7e19821f
0xffb5fb50  0x861f8419 0x881e831b 0x83237d3a 0x7b3c7c44
0xffb5fb60  0x75497f37 0x7a477f3d 0x7c477e4a 0x7e3c7f49
0xffb5fb70  0x7f4b8238 0x7c3e8727 0x771a8316 0x7a147a0f
0xffb5fb80  0x85178113 0x82148113 0x78138014 0x80148515
0xffb5fb90  0x8a138317 0x86148113 0x7b0d8412 0x74148613
0xffb5fba0  0x731a802c 0x84377d40 0x85397f31 0x79398232
0xffb5fbb0  0x74318233 0x7d327f35 0x7d387f3e 0x7d42813d
0xffb5fbc0  0x863f823e 0x87328034 0x83417e2e 0x812a7c1d
0xffb5fbd0  0x7f157a18 0x861e7e24 0x81268128 0x77278032
0xffb5fbe0  0x7a368139 0x7c3e8133 0x82298226 0x8a217e24
0xffb5fbf0  0x79257f2c 0x722a7f2b 0x76278026 0x7b248521
0xffb5fc00  0x7e218a1b 0x781b861b 0x7c25871b 0x7a26821f
0xffb5fc10  0x7b1b7d28 0x82247f21 0x8640804f 0x8d367f2c
0xffb5fc20  0x87297f28 0x81287d20 0x7c21821f 0x7b1f8420
0xffb5fc30  0x7e21811d 0x791a7c1a 0x7c1b7d20 0x841e7d1f
0xffb5fc40  0x7e1d801d 0x78248423 0x7e217f21 0x87267e1e
0xffb5fc50  0x7d227f22 0x6d1b7f23 0x74237f23 0x8021801e
0xffb5fc60  0x7d1d7c20 0x7c1c7d1f 0x87237d1d 0x821b771f
0xffb5fc70  0x7c207c20 0x7e207f1d 0x861d7f20 0x861a7f1f
0xffb5fc80  0x801e821b 0x711d8817 0x7519861b 0x8e198017
0xffb5fc90  0x8d188124 0x7d578273 0x7e898093 0x7f967f99
0xffb5fca0  0x80967f9a 0x80978193 0x7f968095 0x798c7f7a
0xffb5fcb0  0x7864814a 0x8e2c851b 0x87278c20 0x7f299222
0xffb5fcc0  0x7c249423 0x76239323 0x6b239020 0x75249324
0xffb5fcd0  0x792d8f58 0x7575858a 0x7d97829c 0x7d9c819b
0xffb5fce0  0x7e9c819a 0x7e9c8299 0x7f9c819a 0x7e9a8198
0xffb5fcf0  0x7d988299 0x7e978299 0x7f958299 0x7f9b829a
0xffb5fd00  0x832c8622 0x7e1c7f1c 0x7e1b841b 0x83177f17
0xffb5fd10  0x85237d25 0x882e7f2a 0x841f7c1a 0x761a8118
0xffb5fd20  0x7b15831d 0x7e13861a 0x801a831a 0x80187d17
0xffb5fd30  0x7f187d1a 0x84188216 0x8213891d 0x7e138418
0xffb5fd40  0x7f158416 0x7f168418 0x87177c16 0x86187918
0xffb5fd50  0x80127d1a 0x81128117 0x83158617 0x87178116
0xffb5fd60  0x891a8119 0x87188616 0x80198015 0x83167717
0xffb5fd70  0x85177716 0x85147d16 0x81177c18 0x801b7f17
0xffb5fd80  0x80138415 0x7b1c8521 0x7e308237 0x7d308122
0xffb5fd90  0x7d13821a 0x7e198318 0x7e1a841a 0x8019851a
0xffb5fda0  0x831a8317 0x83247c2f 0x82387947 0x86487d38
0xffb5fdb0  0x833d8142 0x7e497e4b 0x7f447e4c 0x814d7652
0xffb5fdc0  0x7d4e744f 0x7c467939 0x7c1e7f1f 0x7e1e841b
0xffb5fdd0  0x8a1f831c 0x891c8117 0x82237a37 0x7c3b7c40
0xffb5fde0  0x77448034 0x7a41823e 0x7e3b8048 0x8034823e
0xffb5fdf0  0x7b3e8839 0x7b338928 0x7e1a8017 0x7b177a13
0xffb5fe00  0x80128111 0x86148214 0x7d138211 0x79178713
0xffb5fe10  0x83158912 0x7f158813 0x7d148518 0x7f118a0f
0xffb5fe20  0x79178626 0x802a802e 0x7f2f812c 0x782c832e
0xffb5fe30  0x7a278128 0x7d2b802a 0x7b2c8329 0x7d34852d
0xffb5fe40  0x8431822d 0x84287f2a 0x83277c27 0x8326771f
0xffb5fe50  0x810c7717 0x84187e1c 0x821b8022 0x7c1e8425
0xffb5fe60  0x7e278829 0x7e238228 0x82217e20 0x8a19801d
0xffb5fe70  0x7b208920 0x73218822 0x7c1c8220 0x801e841d
0xffb5fe80  0x7c1b861f 0x781c811f 0x7921841e 0x77228326
0xffb5fe90  0x7f1e7c1d 0x861d761d 0x871b7c36 0x893d7d3c
0xffb5fea0  0x85367c28 0x83267715 0x80187b11 0x7d248220
0xffb5feb0  0x7d1f811e 0x801a7b1d 0x801e7c1d 0x801a7f21
0xffb5fec0  0x7d1d821d 0x7c1c8a19 0x7f22861c 0x861d811e
0xffb5fed0  0x82227c18 0x7b23781f 0x7c207e21 0x7d207e1d
0xffb5fee0  0x79227822 0x7c1f7a1d 0x88217b1f 0x85207620
0xffb5fef0  0x7d1a7c1f 0x7a207d20 0x821e7b1e 0x87217c20
0xffb5ff00  0x8020811d 0x731d8816 0x72198812 0x851b8616
0xffb5ff10  0x8d19871d 0x7c588275 0x7c86808f 0x809a7f97
0xffb5ff20  0x80957f96 0x80948193 0x7f928096 0x7b8f7e7d
0xffb5ff30  0x7c687f48 0x8f2e8622 0x7c258a23 0x6f258f25
0xffb5ff40  0x73229626 0x72249324 0x71268923 0x79218d23
0xffb5ff50  0x7a249055 0x74778887 0x7c98829b 0x7e9b819d
0xffb5ff60  0x7e9c819c 0x7e9d819c 0x7f9a8199 0x7f9c8198
0xffb5ff70  0x7d998296 0x7d9a8297 0x7f978297 0x7f988297
0xffb5ff80  0x86228720 0x7c1f821e 0x7e17821f 0x82178115
0xffb5ff90  0x8220822f 0x8a3a832a 0x89177d1a 0x76187f18
0xffb5ffa0  0x7a178318 0x80198417 0x7e19821a 0x7e177f17
0xffb5ffb0  0x81198017 0x8b198314 0x8a1f8515 0x8415841c
0xffb5ffc0  0x82198413 0x7d198217 0x82177d18 0x851b7b14
0xffb5ffd0  0x7c167f16 0x7a168418 0x82188418 0x8c198013
0xffb5ffe0  0x891b7f19 0x82158117 0x80178016 0x81167c14
0xffb5fff0  0x85167b16 0x87188117 0x81137f1a 0x7f158118
0xffb60000  0x81198415 0x7f1c8428 0x80328234 0x7c2d8321
0xffb60010  0x7a17841a 0x811c841b 0x83198617 0x821a841a
0xffb60020  0x861c7e18 0x841f7e2e 0x813b7f45 0x883e7e38
0xffb60030  0x84378038 0x7c417f3f 0x7e3e7f40 0x7c397f43
0xffb60040  0x7e477d46 0x7d3f7e2b 0x7b207f1b 0x82228119
0xffb60050  0x8d1d841f 0x8c1a831d 0x841f7d28 0x7d337f3e
0xffb60060  0x7a348233 0x7c348335 0x82328234 0x83308230
0xffb60070  0x7a2d862a 0x7c248521 0x87158216 0x7e168413
0xffb60080  0x7d148513 0x8b148116 0x84167e12 0x76138115
0xffb60090  0x7f148415 0x7a138a11 0x80188714 0x8b148217
0xffb600a0  0x820f8419 0x7d227f22 0x791c7d1f 0x7922811e
0xffb600b0  0x821e8521 0x7f187f1b 0x7d1d811e 0x841a851f
0xffb600c0  0x84178322 0x80177f1c 0x861b7d1c 0x87197c17
0xffb600d0  0x82177d15 0x81198014 0x811a7e15 0x8515841c
0xffb600e0  0x8815861c 0x82198415 0x8117821a 0x8b188018
0xffb600f0  0x8416841a 0x7d158711 0x841f8115 0x841f7f1a
0xffb60100  0x7a1c861d 0x7a1b8221 0x7720851d 0x73258725
0xffb60110  0x8020851b 0x8c1b7e18 0x8b178029 0x843d8339
0xffb60120  0x864a7f43 0x83417f3f 0x80318125 0x80208221
0xffb60130  0x7e1f7e1d 0x881a7d18 0x871e8120 0x811f811d
0xffb60140  0x801b7e20 0x8620841f 0x851c871e 0x86218720
0xffb60150  0x85208421 0x85237f1d 0x82228321 0x791b8321
0xffb60160  0x74207e1c 0x7b207f21 0x891f7e1e 0x89217d1e
0xffb60170  0x81198123 0x781d821e 0x801d7c22 0x8a227b1c
0xffb60180  0x821f831f 0x791e8618 0x7117831e 0x7f138418
0xffb60190  0x8f198625 0x7d578271 0x7a868192 0x80998096
0xffb601a0  0x81968095 0x80958196 0x7f928096 0x7c907f7c
0xffb601b0  0x7f66814a 0x902d8620 0x711f8e23 0x5d24942a
0xffb601c0  0x6c279522 0x71269223 0x77238c22 0x7d229125
0xffb601d0  0x7d299156 0x72728788 0x7992829b 0x7f9d819e
0xffb601e0  0x7f9d819b 0x7e9c819c 0x809d829e 0x7f988199
0xffb601f0  0x7d988299 0x7d988299 0x7f9b8298 0x7f968299
0xffb60200  0x8631861d 0x8222831b 0x821a7f1a 0x89157f1a
0xffb60210  0x7f21842f 0x803c842d 0x84177d1f 0x7a177c1c
0xffb60220  0x77138318 0x7c197f1c 0x7d147f19 0x7b198019
0xffb60230  0x79198212 0x841c8016 0x861b7d1d 0x7e188011
0xffb60240  0x7b1d8119 0x7a0f7f1d 0x82157c19 0x82177a18
0xffb60250  0x7c188014 0x7a198318 0x7f147f19 0x861d7d17
0xffb60260  0x86187c18 0x821d7b16 0x81138116 0x80177f18
0xffb60270  0x85177e13 0x88188319 0x85188215 0x8717811a
0xffb60280  0x861a841b 0x80198327 0x802f8137 0x7e2e841b
0xffb60290  0x7f1b8618 0x80198218 0x821b8612 0x861b801d
0xffb602a0  0x8819771a 0x821b8124 0x7b308434 0x82377f2e
0xffb602b0  0x81327f2e 0x80348033 0x80288133 0x7c2a862e
0xffb602c0  0x7b308533 0x77308220 0x7c207e1f 0x801d7c1c
0xffb602d0  0x841b841c 0x861c851c 0x831d7f23 0x7e258128
0xffb602e0  0x79288528 0x7a268528 0x80268424 0x7b248426
0xffb602f0  0x7521831e 0x801b7d22 0x87148115 0x81158c16
0xffb60300  0x81138918 0x86158015 0x83147b15 0x81157a13
0xffb60310  0x81157e14 0x79138a14 0x8513881b 0x8e167a18
0xffb60320  0x82107f13 0x7d117d15 0x7a167316 0x7a117e11
0xffb60330  0x80158715 0x821a7b17 0x80177915 0x85108416
0xffb60340  0x85178317 0x84177a1b 0x85127e15 0x85178115
0xffb60350  0x85127f17 0x83138016 0x84197b12 0x821b8211
0xffb60360  0x83198017 0x85148314 0x84198419 0x86187d1a
0xffb60370  0x84177a1d 0x81158214 0x88177e1c 0x8b1b791c
0xffb60380  0x8015841f 0x791b8320 0x75208321 0x701d8924
0xffb60390  0x7a268d17 0x89178619 0x8d1d8419 0x86318742
0xffb603a0  0x87408245 0x873e8141 0x8045833a 0x7e348228
0xffb603b0  0x81207b1a 0x84187e19 0x84158617 0x861b831a
0xffb603c0  0x881c791a 0x891b7c16 0x8d1a8519 0x8d1c8a16
0xffb603d0  0x86218721 0x87278322 0x89278623 0x78218821
0xffb603e0  0x71228420 0x791b8422 0x7d20811d 0x7a1e8320
0xffb603f0  0x7f1b8620 0x7d1d8522 0x81207c22 0x811f7b1e
0xffb60400  0x7c1d851d 0x7d1c831a 0x731d8019 0x7a178119
0xffb60410  0x8c17831b 0x7f538270 0x7b84818d 0x80998098
0xffb60420  0x81968196 0x80968195 0x7f918096 0x7d92807b
0xffb60430  0x826d824b 0x902d8523 0x7a1f9121 0x63289526
0xffb60440  0x69259425 0x77288e25 0x7a1d8e25 0x7b239320
0xffb60450  0x7d25914f 0x76738786 0x7d928299 0x7f9c819b
0xffb60460  0x7f9a829c 0x7f9d8199 0x7f998298 0x7e9b8299
0xffb60470  0x7e9b8099 0x7e968099 0x7f968297 0x7f978197
0xffb60480  0x86298820 0x881e811d 0x861b7c19 0x92197d1a
0xffb60490  0x8126822c 0x7741812a 0x80157a17 0x7f178017
0xffb604a0  0x78168916 0x78128118 0x801a7e18 0x7c188115
0xffb604b0  0x70168418 0x7d18811c 0x831a7c15 0x7b168216
0xffb604c0  0x75178413 0x78168317 0x80168116 0x82137c19
0xffb604d0  0x80157f15 0x7c188218 0x7e147e15 0x80167c18
0xffb604e0  0x831e7e15 0x84188019 0x85157f11 0x82158015
0xffb604f0  0x89188217 0x8c138218 0x8c198215 0x8e15821c
0xffb60500  0x8d158318 0x831a8226 0x7f308231 0x802e871d
0xffb60510  0x85178419 0x8014841b 0x82178b1b 0x8619871e
0xffb60520  0x871c7e1d 0x821a7f23 0x791c8324 0x7d1f8126
0xffb60530  0x81277f1d 0x8921811b 0x88218115 0x811e8420
0xffb60540  0x7d21831a 0x741b8023 0x7b1d801f 0x7e1c831b
0xffb60550  0x7d1e841f 0x831d8220 0x841e831b 0x7e1b841c
0xffb60560  0x77208719 0x78198520 0x7d1d831b 0x6e19851c
0xffb60570  0x6e19821f 0x811f7f1a 0x8b1a8317 0x8a158a18
0xffb60580  0x86178910 0x82178214 0x83157d11 0x8a167b14
0xffb60590  0x82177d10 0x7a158a16 0x8e198714 0x8f157d15
0xffb605a0  0x82158113 0x7e167d15 0x74117a15 0x79158115
0xffb605b0  0x7e158816 0x81178415 0x7e13831b 0x851c8517
0xffb605c0  0x88178315 0x88198013 0x86178113 0x83168219
0xffb605d0  0x87168216 0x87168319 0x87168015 0x80168119
0xffb605e0  0x7d157f18 0x871a821b 0x8719811b 0x7f147f1a
0xffb605f0  0x80177f14 0x83178117 0x8b1d8019 0x9114801d
0xffb60600  0x8918861d 0x791b851d 0x73208621 0x6f1f8722
0xffb60610  0x7a238921 0x891a871b 0x92198322 0x892f8642
0xffb60620  0x894b844c 0x8f42803e 0x823e823c 0x7d3c813f
0xffb60630  0x82337c2e 0x842a7d27 0x852a8221 0x8a1a811f
0xffb60640  0x8f1c7d1d 0x8b147f20 0x94198624 0x94278545
0xffb60650  0x89567c5e 0x8a577e51 0x8d318022 0x7a21811d
0xffb60660  0x6f22821d 0x7b227f21 0x7221801d 0x6d1e8520
0xffb60670  0x8020871b 0x85208420 0x84207d20 0x7a1d8020
0xffb60680  0x7820871d 0x83228117 0x78198012 0x77168019
0xffb60690  0x8a17811d 0x83558172 0x7d858090 0x80988198
0xffb606a0  0x81988195 0x80958093 0x80948092 0x7f8f8080
0xffb606b0  0x8768824b 0x8f2a821f 0x88218e24 0x6f229326
0xffb606c0  0x6a269124 0x7c268f25 0x7f248f23 0x7b1f9523
0xffb606d0  0x7e298f4d 0x7a728587 0x7e92829b 0x7f9a829c
0xffb606e0  0x809c829c 0x809b819b 0x7e99829a 0x7e95829a
0xffb606f0  0x7e99819a 0x80978199 0x7f948292 0x7f9a8295
0xffb60700  0x852d8a1e 0x87217e20 0x871b7817 0x891a7b15
0xffb60710  0x7e217f32 0x793f7e2d 0x7e1b7618 0x7c188212
0xffb60720  0x77198c17 0x7f1b8018 0x821a7a19 0x7d187f1a
0xffb60730  0x7a168417 0x811d7e1b 0x7e177a1a 0x7b198217
0xffb60740  0x7b178418 0x7f188418 0x85178518 0x7e187e1a
0xffb60750  0x791d7f12 0x781b8119 0x79157c1a 0x7b187718
0xffb60760  0x7c1a7e15 0x7f188317 0x80177e18 0x7f197e13
0xffb60770  0x85168519 0x86138218 0x831a8017 0x8119821b
0xffb60780  0x801b8119 0x821b8126 0x7e2e8231 0x802d881d
0xffb60790  0x861c821a 0x7d198517 0x7e168f18 0x811c8d1c
0xffb607a0  0x831b841b 0x841f7d1c 0x7f18801e 0x7e18821f
0xffb607b0  0x811e7d17 0x8a1d7f19 0x8b1e7d1d 0x881f7c1b
0xffb607c0  0x851d7b1f 0x811d7a1c 0x831c8117 0x7f1f871d
0xffb607d0  0x811b811f 0x83207e1b 0x821a871c 0x7d1e881e
0xffb607e0  0x791d8821 0x811e841f 0x871f7f1c 0x7c20821b
0xffb607f0  0x771d7e1e 0x7e197d1d 0x82168418 0x7e168615
0xffb60800  0x7c158912 0x80168414 0x7f148015 0x85177c13
0xffb60810  0x7c137c13 0x77138911 0x8e178416 0x8c1b7e0c
0xffb60820  0x80148314 0x7e167e13 0x7a157d15 0x7b198113
0xffb60830  0x8319861a 0x8225873c 0x743a863b 0x7a37831f
0xffb60840  0x8c198418 0x87158517 0x8512821a 0x83138019
0xffb60850  0x82158217 0x82178416 0x80188413 0x86187d18
0xffb60860  0x871a7c20 0x871f7e23 0x83457e5f 0x7a617f59
0xffb60870  0x814c7f26 0x8c1a7f16 0x87188118 0x841a841a
0xffb60880  0x8019851c 0x7c20861c 0x751f8720 0x79218425
0xffb60890  0x80208424 0x83218629 0x892b8350 0x8264836a
0xffb608a0  0x826e846a 0x8d578047 0x88407f3e 0x7d3d8039
0xffb608b0  0x84437b3a 0x833c7d3b 0x813c8040 0x80317f2a
0xffb608c0  0x83277e1d 0x891c8021 0x8c2f874b 0x87558175
0xffb608d0  0x85827b77 0x86747c70 0x8e507b39 0x8c277a23
0xffb608e0  0x7e207f20 0x81217b20 0x7b1d7c1e 0x751e841c
0xffb608f0  0x7b1d861d 0x801b831e 0x86247e1c 0x7d20851a
0xffb60900  0x771e881d 0x811d7e1d 0x831a801a 0x83127f19
0xffb60910  0x891c8017 0x824f8070 0x7f817e90 0x80948095
0xffb60920  0x81978096 0x80958094 0x80958093 0x8091807e
0xffb60930  0x876d824e 0x8e317d20 0x841d8a23 0x6e269028
0xffb60940  0x6a268d24 0x76228f24 0x77229023 0x75249323
0xffb60950  0x7d218b4b 0x78728482 0x7d928297 0x7e9b819b
0xffb60960  0x7f9d819a 0x7e9b819a 0x7e9b8199 0x7e9a819b
0xffb60970  0x7f97819a 0x80998295 0x80978296 0x80968196
0xffb60980  0x8523881e 0x87207e1e 0x841c7e19 0x8018801a
0xffb60990  0x7d258032 0x7d428028 0x7e1a791a 0x7d197f18
0xffb609a0  0x7d198715 0x86198118 0x85197e16 0x80198215
0xffb609b0  0x841f8417 0x85187d1a 0x7b1b7e1a 0x7d1b851c
0xffb609c0  0x82188717 0x85178518 0x8b1d8015 0x7d177c13
0xffb609d0  0x75157d16 0x781a8213 0x74168018 0x77167913
0xffb609e0  0x78197919 0x7e1b8118 0x7f168415 0x7d158115
0xffb609f0  0x84198015 0x81187f18 0x7c197e19 0x71198419
0xffb60a00  0x7417841c 0x811d7f29 0x7d2d8233 0x842b8520
0xffb60a10  0x8a19821b 0x7e158320 0x7f19841a 0x8019851b
0xffb60a20  0x82208115 0x851c7c1c 0x851c811d 0x7e1b821d
0xffb60a30  0x7f207c20 0x8a1c7e20 0x8d1f8219 0x8f21851c
0xffb60a40  0x8d19821c 0x8a197e1f 0x8c19801f 0x841a811d
0xffb60a50  0x871d7f1e 0x861d831d 0x811e891e 0x7f1e8720
0xffb60a60  0x7e248424 0x861d8126 0x89267f20 0x85228117
0xffb60a70  0x8120841b 0x7b1c8215 0x7c207f17 0x73138316
0xffb60a80  0x74188a15 0x82148413 0x7f147f13 0x81177c11
0xffb60a90  0x73127d12 0x76118417 0x8f198614 0x89198314
0xffb60aa0  0x7f118415 0x7f158114 0x7e148215 0x7c1f8624
0xffb60ab0  0x8429852a 0x82408467 0x75707e75 0x766d7f54
0xffb60ac0  0x921e8018 0x8a138316 0x8415841a 0x86118213
0xffb60ad0  0x82148318 0x7e148717 0x7c138519 0x8c157d21
0xffb60ae0  0x8c21802e 0x88348237 0x825e7e6c 0x7b627e6e
0xffb60af0  0x8260823b 0x93218514 0x82178418 0x78198719
0xffb60b00  0x7a19851c 0x801e8221 0x7b1c8720 0x84218224
0xffb60b10  0x85258331 0x8235884a 0x844d8367 0x80768173
0xffb60b20  0x7f7e827c 0x8d5f814d 0x8d39803a 0x7f388037
0xffb60b30  0x883d7e3e 0x85408039 0x7e418142 0x79388038
0xffb60b40  0x7d3d7f35 0x8b347f40 0x88587f6f 0x81807f8e
0xffb60b50  0x819d7e99 0x82927f8a 0x8a717c54 0x963e7926
0xffb60b60  0x8d227d1f 0x88207d1e 0x861f801d 0x7f1e8320
0xffb60b70  0x761a851f 0x7e20831f 0x88217e1d 0x811f861b
0xffb60b80  0x75208b1f 0x7f1c7f1c 0x901b7d11 0x921c7b19
0xffb60b90  0x8b13811b 0x8250816e 0x80837f90 0x80948097
0xffb60ba0  0x80938099 0x81908094 0x80948090 0x81917f82
0xffb60bb0  0x8a6a7e4d 0x8e2f8020 0x811f8b21 0x6f289126
0xffb60bc0  0x68289326 0x6f239424 0x6f24931d 0x71229624
0xffb60bd0  0x7b258e4a 0x76708483 0x79908299 0x7d9d829a
0xffb60be0  0x7e9b829e 0x7e97819d 0x7d9a829b 0x7d9c819b
0xffb60bf0  0x7f99819b 0x8098819b 0x80968299 0x80988194
0xffb60c00  0x7e238420 0x7f1f7f20 0x7d1a8416 0x8418831a
0xffb60c10  0x7e248034 0x7b3e812b 0x811d7c19 0x80127b1d
0xffb60c20  0x80138313 0x821b8214 0x841a811d 0x801a8417
0xffb60c30  0x831b841a 0x85187b1a 0x821c811b 0x7d1d881a
0xffb60c40  0x761d8719 0x7b1b8316 0x87147915 0x831d7713
0xffb60c50  0x7d197a15 0x7f178115 0x7d168219 0x7c1b7819
0xffb60c60  0x7b177415 0x7b157f15 0x7a0f8817 0x7d168215
0xffb60c70  0x83157917 0x84127b18 0x83177c18 0x7b178514
0xffb60c80  0x7b198419 0x811a7c27 0x7f2f8230 0x82318019
0xffb60c90  0x841f8111 0x821d801d 0x821a771d 0x7f157c1f
0xffb60ca0  0x80167c1f 0x8a1c7b1a 0x8920811a 0x85228129
0xffb60cb0  0x872e7a31 0x80397c2d 0x81288420 0x8a1c8c1d
0xffb60cc0  0x881b881d 0x831d801d 0x801c7e1b 0x801f7c1d
0xffb60cd0  0x871e7e20 0x7f1a871e 0x781e8820 0x7d258326
0xffb60ce0  0x862c803c 0x89417e5b 0x83657c67 0x7e587f37
0xffb60cf0  0x7c1f881f 0x77228617 0x7e1b7a19 0x7f167c15
0xffb60d00  0x7d138914 0x7f178315 0x7a147f14 0x79147c10
0xffb60d10  0x75157b13 0x7a137f16 0x8916860c 0x83168511
0xffb60d20  0x7a178213 0x7d108317 0x7f15861b 0x7c22882d
0xffb60d30  0x7f358537 0x7a438174 0x78727c6a 0x796f7c56
0xffb60d40  0x8a2f7c1d 0x86167c16 0x860e841c 0x82158215
0xffb60d50  0x7f158214 0x7a198811 0x7d178518 0x8c1a7c27
0xffb60d60  0x882d7f3a 0x8441843e 0x7f637f7b 0x7d697d6f
0xffb60d70  0x80668545 0x8b2b8920 0x7e17861b 0x78188915
0xffb60d80  0x7921831d 0x7a1d7f1c 0x7c1f851d 0x85228021
0xffb60d90  0x7f2b8241 0x7b4f8a59 0x82628276 0x8089808e
0xffb60da0  0x8096808f 0x847c8165 0x884b813e 0x7d3b7f3c
0xffb60db0  0x81368042 0x823c843e 0x803f833f 0x7e40813a
0xffb60dc0  0x7e3a7f38 0x8b437e60 0x857a7c84 0x809a80a7
0xffb60dd0  0x80b980bc 0x80b080a2 0x818a7c73 0x90557733
0xffb60de0  0x8d277922 0x841f7e1f 0x871f831f 0x85218119
0xffb60df0  0x7d1f8222 0x7c1b8220 0x851f7c20 0x7f208620
0xffb60e00  0x731b8e20 0x79227f1b 0x85187917 0x8c177918
0xffb60e10  0x88198115 0x804d826c 0x7d807f8e 0x80968094
0xffb60e20  0x80968195 0x80948094 0x80928190 0x80937e81
0xffb60e30  0x866d7a4f 0x8c2f8123 0x7f1b8a24 0x6c299227
0xffb60e40  0x68279726 0x77269722 0x73229524 0x68219825
0xffb60e50  0x791f9146 0x786e8486 0x7b8c8199 0x7d9a8299
0xffb60e60  0x7e9c829b 0x7e9b819c 0x7e99829b 0x7e9c819a
0xffb60e70  0x7f9c819a 0x7f99819b 0x7f968198 0x7f978196
0xffb60e80  0x7621841d 0x7c22831b 0x7c1b8419 0x8a177e1e
0xffb60e90  0x80248033 0x7b3c8229 0x85208117 0x81168519
0xffb60ea0  0x80178618 0x81177e19 0x851a7d1a 0x841a8215
0xffb60eb0  0x85188318 0x89197d1c 0x8b1b7e20 0x8120831a
0xffb60ec0  0x6e208618 0x6f1b8819 0x7f198118 0x87167917
0xffb60ed0  0x85197c12 0x8417811b 0x851a8415 0x81188017
0xffb60ee0  0x7d187c15 0x7a18801b 0x79148419 0x80138019
0xffb60ef0  0x81187c15 0x85187e1c 0x8a188018 0x8916851b
0xffb60f00  0x841a8417 0x821f7e29 0x80328133 0x80348018
0xffb60f10  0x7f188019 0x861f841b 0x851d8117 0x7e1c7d22
0xffb60f20  0x7e1f7d1b 0x8d1a8120 0x8d268326 0x8832813b
0xffb60f30  0x8a3e8251 0x7d667d70 0x7c6e7c59 0x89288320
0xffb60f40  0x881e831e 0x7f18821b 0x77188020 0x7c1f7f1f
0xffb60f50  0x8620831d 0x791f8617 0x70238522 0x7d33833e
0xffb60f60  0x8b4e8257 0x875d7f78 0x817e7c7c 0x7d7b7f60
0xffb60f70  0x7d2a8721 0x761b7f1d 0x7d1b7d18 0x8a1d7d12
0xffb60f80  0x87178714 0x7f148514 0x77148114 0x740f7f13
0xffb60f90  0x78128012 0x7f138017 0x87157e13 0x7e12820f
0xffb60fa0  0x74148313 0x7c158516 0x821c8823 0x7c2e8a34
0xffb60fb0  0x7d3f8847 0x794f8774 0x78878681 0x7e75825b
0xffb60fc0  0x832d7a21 0x7f177f19 0x8913831f 0x810b8015
0xffb60fd0  0x7e198211 0x79158816 0x8111821d 0x8c227e2e
0xffb60fe0  0x873a854c 0x814d8850 0x7e628586 0x7c8b8581
0xffb60ff0  0x816f8753 0x89318420 0x7a1a841a 0x7a19871f
0xffb61000  0x7a1d841b 0x7620801b 0x7d24871d 0x86228824
0xffb61010  0x79378a4e 0x77628a6f 0x83778581 0x80a380a9
0xffb61020  0x80af80a3 0x808b7f79 0x835e7e39 0x7c387d38
0xffb61030  0x7c367f40 0x7f438041 0x843b823f 0x843e7f36
0xffb61040  0x82388038 0x88577f78 0x81857f9b 0x80b380b9
0xffb61050  0x80c680cd 0x80c580b2 0x7e987e82 0x87657b4a
0xffb61060  0x8c257b22 0x831e831e 0x8d1e861f 0x8e1e801f
0xffb61070  0x871d7c1d 0x7e1d8020 0x82208121 0x811b861f
0xffb61080  0x7520891e 0x74208319 0x7b1a7f18 0x86197b18
0xffb61090  0x85138217 0x7e50806c 0x7b7e7e8d 0x80968096
0xffb610a0  0x80948094 0x7f918091 0x80948092 0x7f907f7d
0xffb610b0  0x836d7d51 0x8d2e7f1f 0x7e238a21 0x6b269227
0xffb610c0  0x6d299424 0x81289526 0x7a23911f 0x661d8f26
0xffb610d0  0x7a228e46 0x7a6e8580 0x7d948298 0x7d9b829c
0xffb610e0  0x7e9c8297 0x7e9e819b 0x7e9b829a 0x7e9b829c
0xffb610f0  0x7f9a8298 0x7f9d8299 0x7f97809a 0x80948198
0xffb61100  0x79208222 0x761d8519 0x8119821f 0x8b16791b
0xffb61110  0x8025802d 0x7d45802b 0x84178417 0x81198e19
0xffb61120  0x7e158919 0x841e7918 0x84137a1d 0x8217811a
0xffb61130  0x831c7f18 0x841a7e1a 0x851b7b1d 0x81207f22
0xffb61140  0x73228320 0x731c8c16 0x7f188919 0x85177a19
0xffb61150  0x87187d13 0x86197f18 0x81148319 0x7b188518
0xffb61160  0x7918811a 0x751c8014 0x75187e18 0x7d167d15
0xffb61170  0x7f168018 0x7e188118 0x80188319 0x7e1b841b
0xffb61180  0x821a811b 0x7f207e2b 0x79327f34 0x7a307f21
0xffb61190  0x7d197f1b 0x821a851f 0x821b871b 0x81217c22
0xffb611a0  0x831d7c1a 0x861f8425 0x85308234 0x89478246
0xffb611b0  0x8a42875a 0x80747f68 0x826f7968 0x883c7c26
0xffb611c0  0x82207c20 0x8019821b 0x7f1e801e 0x7a208019
0xffb611d0  0x80208720 0x7f208420 0x8025802c 0x81478155
0xffb611e0  0x8565816f 0x81737f88 0x80987c83 0x7f7a7f69
0xffb611f0  0x813b8328 0x7820761e 0x751c7f18 0x80187f15
0xffb61200  0x80188219 0x7d118314 0x79158215 0x78138014
0xffb61210  0x7a17830f 0x7e158117 0x87137512 0x80147e12
0xffb61220  0x79158211 0x7f15841a 0x7c198a28 0x79358d40
0xffb61230  0x7c448a4f 0x79499058 0x7384908c 0x7e7b855a
0xffb61240  0x88397728 0x81198116 0x7e198216 0x7e167f15
0xffb61250  0x88178114 0x82188515 0x81187f1f 0x88277e35
0xffb61260  0x7e3c894e 0x7a528d56 0x7c518d5f 0x79838d81
0xffb61270  0x7d70855b 0x8b4a802d 0x8d21811b 0x7f1b831c
0xffb61280  0x7f1d831d 0x7a1c801f 0x78218820 0x84228c27
0xffb61290  0x7c448e57 0x74708980 0x7f7e8393 0x809e80b0
0xffb612a0  0x80be80b3 0x809a7f8a 0x8c6f7c4d 0x86377c35
0xffb612b0  0x7d367f3d 0x81467c3c 0x823f7f41 0x85367e3f
0xffb612c0  0x8e3b812f 0x8a638083 0x809880ab 0x80bb80c6
0xffb612d0  0x80c780c8 0x80c680b7 0x80a67f8b 0x85757c5c
0xffb612e0  0x8c3b7b27 0x8921861d 0x8621891e 0x841e7d23
0xffb612f0  0x851f741d 0x801d7c1d 0x801f841b 0x7e20851e
0xffb61300  0x751f8422 0x7a1e8619 0x8017821d 0x83157a17
0xffb61310  0x8013831a 0x7b427c6c 0x79817d8b 0x7f948097
0xffb61320  0x80977f93 0x80947f91 0x80947f8f 0x7c918082
0xffb61330  0x816e8157 0x8f2f7e23 0x7e1f8723 0x67239029
0xffb61340  0x68268f27 0x73249224 0x78248c26 0x75218621
0xffb61350  0x75248b37 0x756e857d 0x7c8f8295 0x7d9b829c
0xffb61360  0x7e9b829b 0x7e9a8197 0x7f9c8199 0x7e9b829a
0xffb61370  0x7f97829b 0x7f998299 0x7f978098 0x7f948095
0xffb61380  0x7e21801c 0x731c861f 0x87198319 0x8f1b781b
0xffb61390  0x81268036 0x7d418228 0x86198215 0x88208617
0xffb613a0  0x80158417 0x861d7e17 0x82197f19 0x801b8218
0xffb613b0  0x841a8019 0x81198118 0x82188022 0x84218122
0xffb613c0  0x7a238324 0x7a1b881c 0x83198715 0x83177e18
0xffb613d0  0x8a197f18 0x8b157c18 0x7f188218 0x7a1a8819
0xffb613e0  0x79198618 0x75158419 0x70168411 0x7b1e861a
0xffb613f0  0x80198215 0x78188319 0x7818871d 0x79178219
0xffb61400  0x841f7f1c 0x7d1c7f2a 0x73347f35 0x74318020
0xffb61410  0x7d1a801a 0x821d8319 0x8422851e 0x851f7f20
0xffb61420  0x891f8023 0x8324832e 0x803b8445 0x8b4e8856
0xffb61430  0x87518a62 0x827d8484 0x85798069 0x88467d2a
0xffb61440  0x7a22801c 0x81218322 0x8719801c 0x7b1a801e
0xffb61450  0x7c1e841d 0x85208221 0x8832834d 0x825f8272
0xffb61460  0x837f7f87 0x80897f96 0x7fa980a9 0x8093846e
0xffb61470  0x8642812a 0x79227f1f 0x71257e1e 0x7519811b
0xffb61480  0x79158518 0x7d198311 0x7e168415 0x7e0f8216
0xffb61490  0x80148113 0x7e107f19 0x84147c11 0x82158313
0xffb614a0  0x80148214 0x8419831d 0x7b278832 0x77368e49
0xffb614b0  0x7c4a8e49 0x844b9348 0x7f48914d 0x82568d4b
0xffb614c0  0x8c3b802c 0x87197e1c 0x77118218 0x7a177f1c
0xffb614d0  0x9118821a 0x8d198218 0x83107f23 0x84318437
0xffb614e0  0x7647904e 0x72539253 0x7e578c5a 0x7b668a72
0xffb614f0  0x7a6e8865 0x8d59813f 0x9b24821e 0x8713831d
0xffb61500  0x861b8121 0x8120831d 0x741e8822 0x8326882e
0xffb61510  0x7e508f64 0x74728b83 0x7f898293 0x80a280af
0xffb61520  0x80c480c4 0x80ab7f91 0x8e7a7b55 0x90397b2d
0xffb61530  0x7d2d7f38 0x83487f37 0x803e823e 0x873e813a
0xffb61540  0x9a397f41 0x88747e8e 0x80a580bc 0x80ca80c8
0xffb61550  0x80cc80c6 0x80c180ba 0x80ad7f94 0x86817c65
0xffb61560  0x8e4e7c2f 0x8e2a8025 0x841c8420 0x7a1c801f
0xffb61570  0x821d7d23 0x801b7f1d 0x82227f20 0x7e1f8320
0xffb61580  0x7820841e 0x841f851c 0x87188719 0x84197a17
0xffb61590  0x7e168217 0x7549826c 0x777c808c 0x7e948097
0xffb615a0  0x80998095 0x81927f95 0x7f928090 0x7a908182
0xffb615b0  0x816e8054 0x91347f1b 0x7c22901f 0x63269426
0xffb615c0  0x62258f24 0x67269026 0x75218f26 0x80258c23
0xffb615d0  0x70228d3c 0x71688783 0x7b8d829a 0x7e98829a
0xffb615e0  0x7f99829b 0x7e998197 0x7f9b8198 0x7f978298
0xffb615f0  0x7f968297 0x7f968296 0x7f988194 0x7f988192
0xffb61600  0x83247a1b 0x781c831c 0x841b8118 0x8a1a771d
0xffb61610  0x7f247f36 0x7c3c822a 0x811e7f18 0x81157e19
0xffb61620  0x7a177f15 0x7c158119 0x80188318 0x81188219
0xffb61630  0x821a7f19 0x811b8019 0x7e17841c 0x841e8421
0xffb61640  0x8426811f 0x84228216 0x84198116 0x7f178217
0xffb61650  0x851b8215 0x851b7919 0x7d197d18 0x7c15881b
0xffb61660  0x7b178a18 0x76188919 0x75188a1a 0x7d168e19
0xffb61670  0x821c831b 0x7f198414 0x8117881e 0x821c7f1c
0xffb61680  0x851b7c1c 0x82207f25 0x7a347e36 0x7633811c
0xffb61690  0x7d198021 0x85207d1c 0x841c8320 0x8323811f
0xffb616a0  0x84208321 0x80288136 0x793e8448 0x7d538b4f
0xffb616b0  0x82528e57 0x7d70898b 0x7d888472 0x804a7e3a
0xffb616c0  0x832b8122 0x831b811c 0x811d7f1f 0x7b1c7f1b
0xffb616d0  0x871f7f20 0x89207f24 0x85438359 0x82738185
0xffb616e0  0x808e7f93 0x7f958094 0x7f9582a0 0x7d918877
0xffb616f0  0x87567f39 0x7d328230 0x73347e2c 0x77178316
0xffb61700  0x7b1a8818 0x7e18821c 0x7d0f8513 0x7e148212
0xffb61710  0x7b1d7d13 0x7f147c14 0x85138217 0x830c8817
0xffb61720  0x8b188318 0x87198124 0x7b298639 0x763d8f45
0xffb61730  0x78479146 0x7d48904a 0x7c4b904f 0x7b539150
0xffb61740  0x84418734 0x86297c1b 0x79187e13 0x78178019
0xffb61750  0x83198111 0x88187f18 0x871f7f21 0x84308938
0xffb61760  0x794b954c 0x7946984f 0x81578c63 0x7c6f8777
0xffb61770  0x78818773 0x8765824e 0x982c8120 0x871a821b
0xffb61780  0x791e801f 0x7a1b881d 0x7d1f891c 0x7d2d8641
0xffb61790  0x74508b68 0x71768f84 0x7e8a8297 0x80a580b6
0xffb617a0  0x80c580ca 0x80b5809b 0x8a85795c 0x91427832
0xffb617b0  0x7f2f802f 0x8040823e 0x80378333 0x863b8142
0xffb617c0  0x8f467e61 0x82887fa2 0x80b980c8 0x80ce80c8
0xffb617d0  0x80c580c2 0x80b980b5 0x80b2809d 0x81877c6f
0xffb617e0  0x8a597b41 0x87417e37 0x7f2a7f27 0x7f24801f
0xffb617f0  0x821d8421 0x7e1d8020 0x8621781f 0x821d801d
0xffb61800  0x7b208020 0x82208218 0x81198a1d 0x821b7918
0xffb61810  0x831b8013 0x77388868 0x777f828a 0x7e958093
0xffb61820  0x7f958094 0x80957f93 0x80937f91 0x7c918186
0xffb61830  0x806f7f5c 0x8e367f20 0x7a1f9420 0x66259628
0xffb61840  0x65278d27 0x67268c25 0x70269221 0x7f219324
0xffb61850  0x781c8d38 0x7867877f 0x7c8a8297 0x7e98819a
0xffb61860  0x7f9a8197 0x7f9a809d 0x7f9a8099 0x7f958296
0xffb61870  0x7f988196 0x7f978194 0x7f968196 0x7f948194
0xffb61880  0x871f821d 0x7e1d821f 0x82197c18 0x8519771f
0xffb61890  0x7c248136 0x79418227 0x7e168316 0x7c1b7f16
0xffb618a0  0x77177d1a 0x76187e17 0x83197e18 0x8517811a
0xffb618b0  0x831f7f14 0x851a7d1d 0x801a830f 0x881f8522
0xffb618c0  0x8d228321 0x8e1d821a 0x86178217 0x7d158118
0xffb618d0  0x84187f16 0x80167d19 0x7c1a811a 0x7f158718
0xffb618e0  0x7e1b8b17 0x7c188617 0x7f188115 0x831b8619
0xffb618f0  0x84178217 0x871e8219 0x8d188517 0x8c20841a
0xffb61900  0x871b7c1e 0x881b7c29 0x80328035 0x7a308220
0xffb61910  0x7f1d811a 0x871c7f1e 0x861f8120 0x83217e21
0xffb61920  0x831e8228 0x7c31883f 0x723f8b4e 0x70459042
0xffb61930  0x7c469052 0x79518b60 0x71708860 0x794b8545
0xffb61940  0x8b2f8325 0x881a831a 0x7b1f851e 0x7b208617
0xffb61950  0x91238022 0x8f248033 0x8254836f 0x81868096
0xffb61960  0x7f98809d 0x809b809b 0x8093828f 0x7d828572
0xffb61970  0x89608149 0x8136812f 0x772d802e 0x7d2a8216
0xffb61980  0x81178319 0x80168216 0x7d138717 0x80148117
0xffb61990  0x790f7a19 0x80147d13 0x8a167f15 0x89188218
0xffb619a0  0x9719841f 0x8812832e 0x79428a45 0x754b9045
0xffb619b0  0x76489346 0x764b904b 0x784b904e 0x774f9052
0xffb619c0  0x7e47863a 0x85267f21 0x7d178217 0x79198017
0xffb619d0  0x76197d18 0x84167e1a 0x8b1d842a 0x82388f46
0xffb619e0  0x7e48944d 0x81469251 0x825c8770 0x7b758784
0xffb619f0  0x7886867c 0x856c815d 0x9733811e 0x8b16861f
0xffb61a00  0x6d14841d 0x751d8020 0x861f841d 0x794f865d
0xffb61a10  0x6d6c8b79 0x71828b84 0x7e91829e 0x80ac80b9
0xffb61a20  0x80c680c5 0x80b780a0 0x85887b62 0x93387a31
0xffb61a30  0x822d7f30 0x7e348139 0x822e8232 0x86358140
0xffb61a40  0x874a8072 0x808d80a6 0x80c080d1 0x80cf80ca
0xffb61a50  0x80be80b9 0x80b480af 0x80b2809f 0x7f8a7c76
0xffb61a60  0x87597b3f 0x863a7d3b 0x7e368236 0x82368228
0xffb61a70  0x86227b23 0x801d7b1d 0x89267b21 0x8a207c20
0xffb61a80  0x811f7b20 0x841f801f 0x7e178519 0x80197e19
0xffb61a90  0x8a14811d 0x7d3c826a 0x787a7f8e 0x7e958098
0xffb61aa0  0x7e958096 0x7e967f94 0x80968093 0x7f908086
0xffb61ab0  0x80707e56 0x8c328027 0x7b1e9420 0x68249726
0xffb61ac0  0x68248c26 0x64258d26 0x6c269426 0x80229228
0xffb61ad0  0x82238d36 0x7f69867d 0x7e8b8195 0x7e98809a
0xffb61ae0  0x7f9a819b 0x80988196 0x7f978097 0x7e978298
0xffb61af0  0x7f958194 0x80988195 0x7f968291 0x7f948195
0xffb61b00  0x851e871d 0x811c7d1f 0x871e7414 0x881a751c
0xffb61b10  0x7f28812f 0x7b438426 0x7a188619 0x7d16801f
0xffb61b20  0x7b187a15 0x7b197b17 0x851b7b16 0x82187f19
0xffb61b30  0x801d7f17 0x881a7b1a 0x84197e13 0x821e851d
0xffb61b40  0x851f831e 0x831a8018 0x801a8118 0x7d1d7f18
0xffb61b50  0x81167a19 0x831a8011 0x7f198619 0x7e1a8519
0xffb61b60  0x7e178a18 0x801b821a 0x831a7719 0x82187c19
0xffb61b70  0x7c187f18 0x7f197d1a 0x851b7f17 0x851b8719
0xffb61b80  0x87227c1e 0x831d782a 0x7e328133 0x7f33831f
0xffb61b90  0x7f1b8021 0x7d18811f 0x83217e23 0x8823781f
0xffb61ba0  0x85228028 0x7e368c41 0x79489143 0x74329134
0xffb61bb0  0x78399250 0x78568d5b 0x775f8d5b 0x7f558a44
0xffb61bc0  0x88358526 0x881f861f 0x811c8a1f 0x7b1e8d1c
0xffb61bd0  0x8e25811e 0x7d238050 0x776a8381 0x80958097
0xffb61be0  0x809f809c 0x7f9c8096 0x80948190 0x7f8b8179
0xffb61bf0  0x83688453 0x823a8030 0x7d2d842f 0x7c2f822f
0xffb61c00  0x7c237f1d 0x7d19811a 0x7e19841a 0x861b7c20
0xffb61c10  0x831b7518 0x86137d19 0x85137c19 0x89177b15
0xffb61c20  0x95188414 0x761a8767 0x69628a69 0x706a9253
0xffb61c30  0x764f924d 0x754e8e47 0x744c8f49 0x794f8d55
0xffb61c40  0x854f843e 0x8c2f8021 0x84198217 0x7a1a7e1d
0xffb61c50  0x7814751b 0x89177b16 0x821d8746 0x734f9259
0xffb61c60  0x715c924e 0x7e4f8a4b 0x82608772 0x7d82828d
0xffb61c70  0x7c99828a 0x83778164 0x8f468020 0x881c891c
0xffb61c80  0x79198622 0x7c20771b 0x83238115 0x785d885e
0xffb61c90  0x6f5c897b 0x75848787 0x7f9380a3 0x80ae80bc
0xffb61ca0  0x80bf80c3 0x80bb80a0 0x83887d6b 0x8f477b33
0xffb61cb0  0x892f7c2a 0x8122802f 0x83388032 0x87288143
0xffb61cc0  0x823e8071 0x808d80aa 0x80c280d1 0x80c880c4
0xffb61cd0  0x80b980b2 0x80b280af 0x80b580a3 0x7e8f7b76
0xffb61ce0  0x87587b45 0x833e7e3a 0x7b388639 0x7f39833a
0xffb61cf0  0x8038752f 0x7d2c7629 0x84267c24 0x87237622
0xffb61d00  0x84227421 0x821e7f1c 0x7c19801a 0x80168218
0xffb61d10  0x8a138117 0x7f397c68 0x7c7c7c8b 0x7f937f95
0xffb61d20  0x7e957f95 0x7f937f98 0x81928094 0x7f938085
0xffb61d30  0x81757e59 0x89348026 0x7c229121 0x69229627
0xffb61d40  0x6a298929 0x68268b21 0x69269526 0x78249227
0xffb61d50  0x7f1a8e34 0x7c64867f 0x7d898193 0x7e9b8099
0xffb61d60  0x7f988198 0x7f998196 0x7e9a8197 0x7e988296
0xffb61d70  0x7f978199 0x7f948194 0x7f998191 0x7f968194
0xffb61d80  0x8a20851b 0x841e8020 0x89197c1a 0x8a177d20
0xffb61d90  0x82268236 0x7f3d8624 0x7a1c8813 0x7f187f19
0xffb61da0  0x80147e18 0x82197f18 0x87167f19 0x80188217
0xffb61db0  0x7e1d811a 0x8b1a801d 0x881b8318 0x7e1a811a
0xffb61dc0  0x7d1b7e1c 0x7818861b 0x7b188517 0x7e1b7b17
0xffb61dd0  0x8119791c 0x8915821c 0x89198614 0x82198219
0xffb61de0  0x811a8715 0x831a8719 0x851a7d16 0x801b7d17
0xffb61df0  0x72198215 0x741b7f1a 0x7b1c801a 0x821b871c
0xffb61e00  0x871e821b 0x7d1c7c29 0x7e327f34 0x8934801b
0xffb61e10  0x7f157f1d 0x7521821e 0x80217e22 0x89207c21
0xffb61e20  0x85248733 0x7e448f52 0x804e8f35 0x7a3a8d3a
0xffb61e30  0x743d8c4f 0x7657905e 0x7e5c8d55 0x88538646
0xffb61e40  0x87328627 0x8a228516 0x8b23841d 0x861a841e
0xffb61e50  0x8c227e1b 0x72467f78 0x74848198 0x7fa9819c
0xffb61e60  0x819e819a 0x80918092 0x7f8d8091 0x7f8b817c
0xffb61e70  0x806e8453 0x84397f2d 0x852c842a 0x7b2a852b
0xffb61e80  0x792a7f24 0x7d248123 0x831b811e 0x8b277f1f
0xffb61e90  0x8d1e7d14 0x8e1b8213 0x82138116 0x87188018
0xffb61ea0  0x931d8217 0x6c318873 0x686e8776 0x6e7c8e5e
0xffb61eb0  0x76529652 0x734e914a 0x724b8e4c 0x7d538d54
0xffb61ec0  0x8d518841 0x9230821f 0x8d178216 0x7c17821b
0xffb61ed0  0x77177c1a 0x8e187c12 0x803e806a 0x7471867d
0xffb61ee0  0x6b7d8d5f 0x7c578c54 0x8262847c 0x7f90819b
0xffb61ef0  0x7fa5819d 0x8280816c 0x89418019 0x891f831c
0xffb61f00  0x871d841e 0x811f7c21 0x821d811a 0x785b8b69
0xffb61f10  0x6f678a7e 0x7a83868b 0x809780a3 0x80b280b9
0xffb61f20  0x80bd80bb 0x80b980a3 0x808a7f6c 0x8f4a7c31
0xffb61f30  0x912e7f2b 0x88298124 0x872e7c30 0x8a307c3e
0xffb61f40  0x7d3b8278 0x809a80b0 0x80c080cc 0x80c980be
0xffb61f50  0x80b480b7 0x80b580b3 0x80b380a7 0x7e8c7e77
0xffb61f60  0x87597c43 0x83377e3b 0x7b398539 0x7e37843f
0xffb61f70  0x7a357d36 0x7b397d35 0x82377f30 0x84337925
0xffb61f80  0x85297922 0x84217e1b 0x7d1a8318 0x84178118
0xffb61f90  0x8d187e16 0x803c7f64 0x7d7c7f8d 0x7f927f96
0xffb61fa0  0x7f977f95 0x80938094 0x81958093 0x7f8f8087
0xffb61fb0  0x80718059 0x88368323 0x7e218e22 0x6c269423
0xffb61fc0  0x6e288e25 0x6d238f26 0x6a289422 0x72239325
0xffb61fd0  0x7d238c31 0x7b64877c 0x7c8a8293 0x7e9a819b
0xffb61fe0  0x7f988199 0x7e988195 0x7f978193 0x7e968298
0xffb61ff0  0x7e978194 0x7f958199 0x7f948195 0x80958190
0xffb62000  0x8b21811f 0x841f8019 0x8819831a 0x8819821d
0xffb62010  0x8525813b 0x8139871e 0x7c1f881b 0x7f1a7f13
0xffb62020  0x7e198215 0x7e1a8318 0x8518831d 0x81158318
0xffb62030  0x8319811a 0x8a1a8619 0x83198915 0x7d1b7d1b
0xffb62040  0x7c1e7816 0x77158c11 0x7f1a8818 0x8017771d
0xffb62050  0x82177718 0x87158316 0x87188519 0x821f7d15
0xffb62060  0x7f1b8317 0x771a8c1a 0x7817831c 0x801b7c19
0xffb62070  0x7a1a8217 0x7319801b 0x7c1a7f1a 0x8419861d
0xffb62080  0x8419871d 0x7b1c8028 0x7a327e34 0x82317d1d
0xffb62090  0x82217d19 0x781e831d 0x87217e23 0x90237e1b
0xffb620a0  0x74338a65 0x6b6f8979 0x79688c51 0x86488550
0xffb620b0  0x78518856 0x745c925d 0x7f5a8d51 0x8553833f
0xffb620c0  0x85358429 0x8423811f 0x891b7d20 0x8e23791d
0xffb620d0  0x8f237a1a 0x72448084 0x747e819f 0x7da58199
0xffb620e0  0x80958192 0x8093808b 0x7e8b808e 0x7d8c807e
0xffb620f0  0x806c8359 0x853f7d2f 0x7e29831d 0x79278627
0xffb62100  0x7c288022 0x7f237f23 0x84217c20 0x8722811c
0xffb62110  0x8a1f8416 0x89128612 0x801b8416 0x8114811b
0xffb62120  0x8e197f1a 0x6c218978 0x6572887d 0x697a8e5f
0xffb62130  0x725f9a5a 0x7153944f 0x744c8b4b 0x7a508c53
0xffb62140  0x84518d46 0x8a338223 0x891e7f19 0x821a851a
0xffb62150  0x82188318 0x95187f12 0x7e3a7a7b 0x736f8284
0xffb62160  0x71828a6e 0x86618c51 0x835e8280 0x809c80a4
0xffb62170  0x80b280a9 0x808c8075 0x8b4a7e27 0x86237d1b
0xffb62180  0x821e831c 0x7e227f20 0x861f7e1b 0x76388d71
0xffb62190  0x6c748b7e 0x7b828585 0x809980a9 0x80b380b7
0xffb621a0  0x80bd80b9 0x80b780a4 0x808e8073 0x944b7a31
0xffb621b0  0x8c308130 0x862a8227 0x8829792c 0x882f7630
0xffb621c0  0x7c2a855a 0x7f8e81a6 0x80b280c0 0x80c080c0
0xffb621d0  0x80b780b6 0x80b580b3 0x80b280a8 0x7e8f8179
0xffb621e0  0x89607c48 0x83397e39 0x7b3a8239 0x81328438
0xffb621f0  0x803a8239 0x7c378236 0x7d338040 0x82357c32
0xffb62200  0x81347c32 0x80297e23 0x7f1c841d 0x82187e18
0xffb62210  0x8c157a19 0x802f8267 0x7c76828a 0x7f958099
0xffb62220  0x80948096 0x80958096 0x80948094 0x7c957f89
0xffb62230  0x7e72815f 0x873e8525 0x7c218822 0x6d288e24
0xffb62240  0x6f239226 0x6e25921f 0x6a299123 0x6c21921f
0xffb62250  0x7d278c2f 0x7c5f8878 0x7b878293 0x7e998298
0xffb62260  0x7f978195 0x7f988198 0x7f978196 0x7f958299
0xffb62270  0x7f988294 0x7e998094 0x7f968195 0x80938292
0xffb62280  0x8d1d7f1c 0x871c7f1c 0x8b1d8217 0x891a7f1e
0xffb62290  0x872b7f32 0x86408422 0x7e128319 0x7f19801b
0xffb622a0  0x7e148217 0x7c18811b 0x851a8519 0x8518871d
0xffb622b0  0x8a1a811d 0x8c19831c 0x7f188718 0x7b188019
0xffb622c0  0x79187c18 0x7b16871a 0x861b8919 0x81178018
0xffb622d0  0x82187f17 0x881b7e15 0x8a187b19 0x85177e1b
0xffb622e0  0x7e178416 0x6915861a 0x6d19831b 0x821b821a
0xffb622f0  0x821a8218 0x7517801a 0x7f1e8018 0x8a1b841d
0xffb62300  0x821b8515 0x7c207f29 0x75308034 0x7c32801d
0xffb62310  0x87227f1d 0x7e1f8321 0x90237b25 0x99217b1b
0xffb62320  0x735b8389 0x6c82849b 0x7a858761 0x8e5f865c
0xffb62330  0x78618665 0x73688b61 0x7f5f8f4d 0x83478648
0xffb62340  0x84287f25 0x7e1f7c20 0x831f801e 0x9323801d
0xffb62350  0x93257a22 0x74368382 0x758f83a0 0x7d9c8192
0xffb62360  0x8090808b 0x7f8a8089 0x7c8b818b 0x7a8a827f
0xffb62370  0x81718456 0x873b7d25 0x792d7f25 0x77258328
0xffb62380  0x81257f23 0x8023801f 0x83208223 0x8421841f
0xffb62390  0x8a1c8216 0x86128115 0x851b8217 0x7f198219
0xffb623a0  0x891c7c1f 0x701d8972 0x65808a85 0x667b925f
0xffb623b0  0x71619a58 0x7151914d 0x774c8b4d 0x774f8a54
0xffb623c0  0x7d568c40 0x82348620 0x87197d1a 0x8b1b801a
0xffb623d0  0x8f1a8219 0x9d177c15 0x7d267f78 0x7088858e
0xffb623e0  0x778c8774 0x8e638b59 0x8462847e 0x80a080bb
0xffb623f0  0x80bc80b1 0x7f987f78 0x8e497d22 0x801b7f21
0xffb62400  0x7c1d871f 0x7c20821e 0x8c267e21 0x7929874a
0xffb62410  0x6e65896e 0x7d798487 0x809980a9 0x80af80b8
0xffb62420  0x80b980ba 0x80b980a4 0x818d7f75 0x994c7e2d
0xffb62430  0x8b2b832f 0x862e832a 0x8a2d7d2a 0x872b7a2b
0xffb62440  0x83258154 0x7f7d8099 0x80a980bd 0x80c180c1
0xffb62450  0x80b980b4 0x80b180b2 0x80b280a5 0x7f8e8177
0xffb62460  0x895d7e45 0x84358039 0x7c388238 0x84388335
0xffb62470  0x883a8135 0x7f378139 0x7a367f36 0x823c7c3b
0xffb62480  0x7f39803a 0x7f37812a 0x87247f1f 0x82198013
0xffb62490  0x8b188311 0x823d8063 0x7c79808c 0x7f938099
0xffb624a0  0x81988096 0x81957f94 0x7f938092 0x7a948088
0xffb624b0  0x7e76805f 0x863b8624 0x791f8a1f 0x6d268f29
0xffb624c0  0x72279226 0x6f269424 0x69249324 0x69239421
0xffb624d0  0x7e258e33 0x7e62877a 0x7c8a8292 0x7e978298
0xffb624e0  0x7f998298 0x80988199 0x80948196 0x8094819c
0xffb624f0  0x80968196 0x7e948192 0x7f978193 0x80948192
0xffb62500  0x8c217c20 0x861c7e1a 0x871a8119 0x851f7b1b
0xffb62510  0x81277e35 0x833d7e23 0x881b7b18 0x84178015
0xffb62520  0x7f168017 0x831a7d18 0x85158619 0x8615871b
0xffb62530  0x891d7f1a 0x881a7e17 0x7f1b841a 0x791a8219
0xffb62540  0x721a7d1a 0x7c198218 0x84178819 0x7f1a8619
0xffb62550  0x82198415 0x831d791b 0x85177218 0x82177e19
0xffb62560  0x7d1d8513 0x781f7f18 0x77198019 0x7d168518
0xffb62570  0x841d801c 0x7a1b7f1a 0x7c17801b 0x821a8218
0xffb62580  0x831e8018 0x841c7c29 0x7d2f8033 0x7f2f8220
0xffb62590  0x8220801d 0x821f8223 0x91237823 0x911d7a1f
0xffb625a0  0x71588193 0x7183829d 0x7c848571 0x846f856d
0xffb625b0  0x796a8773 0x78778870 0x7a6e8e53 0x814b8845
0xffb625c0  0x872f792a 0x861f751e 0x87217f1a 0x8f208320
0xffb625d0  0x9128782d 0x7c318961 0x75838790 0x7b8c8289
0xffb625e0  0x7e887f87 0x7d868185 0x7a878388 0x78898581
0xffb625f0  0x7c718457 0x873d7d2b 0x7f297a26 0x80257f25
0xffb62600  0x84267d20 0x81277f24 0x841f851f 0x861f8425
0xffb62610  0x8d1c7d18 0x8b187b16 0x891d7c16 0x881d801a
0xffb62620  0x8d1c781d 0x7c1d8846 0x6a64926d 0x696c965e
0xffb62630  0x755c995c 0x7a558d4e 0x7a4f884d 0x7a508853
0xffb62640  0x7c4f8b43 0x863d852a 0x8f1e781e 0x901e790f
0xffb62650  0x8d1c8312 0x961d791b 0x851d8556 0x727e898b
0xffb62660  0x75838575 0x85658956 0x8262867d 0x809680ba
0xffb62670  0x80c680b5 0x7a9e7f7f 0x8b547c2a 0x84238021
0xffb62680  0x7b1f8822 0x7b238323 0x8e247b23 0x85318047
0xffb62690  0x7a56836e 0x807d7f84 0x809780a5 0x80b080b4
0xffb626a0  0x80b780b9 0x80b780a5 0x7f917f73 0x944d803d
0xffb626b0  0x84328334 0x7b338236 0x7f308033 0x87337f34
0xffb626c0  0x84297b4e 0x7d7b7e8c 0x809d80b3 0x80ba80be
0xffb626d0  0x80b480ad 0x80ab80a8 0x80ad80a5 0x7c8f8178
0xffb626e0  0x875d8147 0x893a8138 0x7f378136 0x7a368237
0xffb626f0  0x80357f38 0x80368035 0x7b3a7d39 0x7f3a7b37
0xffb62700  0x7b3e8436 0x7a36832e 0x89277b1f 0x83198012
0xffb62710  0x80138813 0x80317c64 0x7b797d88 0x7e948096
0xffb62720  0x80977f97 0x81947f92 0x7f908192 0x7a97808d
0xffb62730  0x7d747f61 0x88408625 0x80248c1d 0x6f268f28
0xffb62740  0x73299224 0x6f219626 0x6a279124 0x6d239522
0xffb62750  0x7c229027 0x7c5f8777 0x7a888290 0x7d968297
0xffb62760  0x7f9b8199 0x7f998199 0x80988199 0x81938197
0xffb62770  0x80978197 0x7e938197 0x7f928095 0x7f908090
0xffb62780  0x8c227b16 0x881e7d1f 0x87197e1c 0x83187e21
0xffb62790  0x7b2b8135 0x7f3b8027 0x8f1d801c 0x89198417
0xffb627a0  0x83158419 0x881b7f1f 0x8813831d 0x881c871a
0xffb627b0  0x8a1d8317 0x84187f1d 0x80178219 0x7a1f8217
0xffb627c0  0x6b187e17 0x7f1a8521 0x851a8b14 0x7f19851d
0xffb627d0  0x841a8218 0x7d1a7e1a 0x81177a20 0x83158015
0xffb627e0  0x801a8319 0x851c8019 0x7e1f8019 0x791a8314
0xffb627f0  0x851f821c 0x7f1b8216 0x77198019 0x7b1a821a
0xffb62800  0x83198421 0x891c7f28 0x86387e31 0x84348021
0xffb62810  0x811d7f21 0x84238423 0x9121811f 0x8a237c1f
0xffb62820  0x70448490 0x789483a9 0x7f7c856d 0x806f856e
0xffb62830  0x7b73847f 0x7b84827b 0x7a79855e 0x804c8841
0xffb62840  0x882b7e2a 0x8d257c20 0x8d218121 0x8d268024
0xffb62850  0x8f317b2f 0x8d38855a 0x8070867c 0x7e848282
0xffb62860  0x7c808083 0x7c7e8286 0x7b858386 0x7887837c
0xffb62870  0x79718255 0x87367f2c 0x85267c25 0x88267f27
0xffb62880  0x86278327 0x83257f21 0x88247e27 0x89228121
0xffb62890  0x9024801f 0x8f1a801f 0x8c1d7f21 0x8e237e1f
0xffb628a0  0x8f277b24 0x8929834f 0x7a568d5f 0x7069925e
0xffb628b0  0x7860905a 0x815d8c53 0x7d54894f 0x7b56865e
0xffb628c0  0x7e548449 0x8a4b832e 0x932f7d29 0x922d7d28
0xffb628d0  0x8b2b7f27 0x942d7b2c 0x9238835a 0x79678678
0xffb628e0  0x747b8575 0x7e6a875e 0x8169847a 0x808f80a9
0xffb628f0  0x80b880b0 0x789d7e7c 0x85517a32 0x862a812a
0xffb62900  0x7c2e822a 0x7b2b812c 0x8d2c7f29 0x8c418153
0xffb62910  0x82628371 0x817e8187 0x808f809c 0x80a780a8
0xffb62920  0x80ad80ad 0x80ac809b 0x7f8a7f73 0x8f557d46
0xffb62930  0x803e7f3a 0x74497f3d 0x7a447e40 0x8a427b46
0xffb62940  0x853c7b4e 0x7d718087 0x809580a0 0x80aa80b1
0xffb62950  0x80a980a4 0x80a180a3 0x7ea5809d 0x79878074
0xffb62960  0x865b8042 0x90328131 0x83368239 0x6e2c8335
0xffb62970  0x7a3a8134 0x83378133 0x7b388236 0x7c367f39
0xffb62980  0x783b8338 0x7637862c 0x8b278222 0x85168314
0xffb62990  0x77118816 0x7d2e7f64 0x7a797f8b 0x7e938198
0xffb629a0  0x80967f99 0x81947f95 0x7f908091 0x7b92808b
0xffb629b0  0x7d75815f 0x8b438622 0x88208b1d 0x73269026
0xffb629c0  0x77289126 0x73259224 0x6e269222 0x74239425
0xffb629d0  0x7b218d2a 0x7b5d8677 0x79878390 0x7e9a8297
0xffb629e0  0x7f988197 0x7f988198 0x8096819b 0x81948196
0xffb629f0  0x80958195 0x7f938196 0x7f908193 0x7b918191
0xffb62a00  0x8e24791c 0x8b1c7c1d 0x8e1d7a1b 0x8a1a7d1f
0xffb62a10  0x80278232 0x7e3e8322 0x8c1d8515 0x861b8817
0xffb62a20  0x8216861c 0x89197f1c 0x871c801c 0x8515861e
0xffb62a30  0x881e831f 0x891d7e20 0x881c7e19 0x8419811c
0xffb62a40  0x82197f20 0x8118881f 0x7c188b1f 0x7f208117
0xffb62a50  0x87217f1f 0x881f7e17 0x84217e19 0x8220801d
0xffb62a60  0x83208023 0x871a8021 0x841f7e1d 0x7c217f1e
0xffb62a70  0x8221821e 0x8220831f 0x84237d21 0x871f7f25
0xffb62a80  0x8823841d 0x86258032 0x85387b39 0x86367c26
0xffb62a90  0x852b7c28 0x8425842c 0x8b26862b 0x8a2d7c2d
0xffb62aa0  0x753f8b70 0x77858b8e 0x81788575 0x81758473
0xffb62ab0  0x7d7a8486 0x78908089 0x7886816b 0x80588650
0xffb62ac0  0x873d813a 0x89338039 0x8c33803e 0x8e407d46
0xffb62ad0  0x8d477a47 0x864e7d65 0x7f708180 0x7e848181
0xffb62ae0  0x7d7f8283 0x7b838383 0x7d848386 0x7b85827e
0xffb62af0  0x7d72825c 0x8546803c 0x82367e36 0x8537802f
0xffb62b00  0x882f8435 0x87357e38 0x8437783e 0x82437f40
0xffb62b10  0x8946813e 0x893e8141 0x85428042 0x85487c47
0xffb62b20  0x87447b49 0x884d7d57 0x7d668769 0x7a6e8c6b
0xffb62b30  0x7b6a8a68 0x78688667 0x7a63875f 0x7e668364
0xffb62b40  0x7f657f5b 0x87577f4b 0x91487f48 0x8b498048
0xffb62b50  0x864c7d4d 0x8e4d7b4e 0x884e8062 0x7b718378
0xffb62b60  0x777a867a 0x7e6d876c 0x8270817d 0x7f8b7f9e
0xffb62b70  0x7faa80a5 0x7b947e77 0x8d527835 0x8834822e
0xffb62b80  0x802e7e2f 0x812e7e2c 0x862e802a 0x7f507f67
0xffb62b90  0x7a70827d 0x7e838385 0x80868096 0x809c7f9d
0xffb62ba0  0x80a180a4 0x809f8095 0x81837e70 0x89587a51
0xffb62bb0  0x7a4e7a4d 0x784b7c4c 0x814f7b4b 0x86507751
0xffb62bc0  0x844d7a56 0x7f69827f 0x7f8b8194 0x7f9f80a0
0xffb62bd0  0x819d819a 0x819a8099 0x7fa18099 0x7d848076
0xffb62be0  0x865d7e3a 0x88307f2b 0x7f2d832e 0x772f812a
0xffb62bf0  0x792e8130 0x7c338335 0x77318536 0x7d3d8134
0xffb62c00  0x7d3c8239 0x7b368732 0x8526871c 0x84178416
0xffb62c10  0x80138513 0x7d2b8263 0x7b778188 0x7e918198
0xffb62c20  0x7f998095 0x81948095 0x81927f90 0x7c957f8b
0xffb62c30  0x7e778261 0x8b41842e 0x841e891e 0x74289123
0xffb62c40  0x7b268f26 0x77278d21 0x70269023 0x72259122
0xffb62c50  0x77218a29 0x78588573 0x79848291 0x7e988296
0xffb62c60  0x7f968198 0x80968195 0x809a8195 0x80968191
0xffb62c70  0x7f958292 0x7f938293 0x80938193 0x7e93818f
0xffb62c80  0x911f7d1d 0x911a7b23 0x91227d2b 0x90267e2d
0xffb62c90  0x8431823b 0x7e4a8424 0x8a268526 0x87218622
0xffb62ca0  0x8324852b 0x892c802c 0x84317e2e 0x8230812f
0xffb62cb0  0x88327f36 0x8b2b8032 0x8c2c802a 0x8a31822c
0xffb62cc0  0x8e2a8435 0x8427842f 0x7928832e 0x81337d31
0xffb62cd0  0x87308130 0x8b368235 0x84318131 0x80348438
0xffb62ce0  0x85378033 0x86368132 0x8530802d 0x7e2a802e
0xffb62cf0  0x7f2d842b 0x852c842a 0x892f812b 0x8e2e812c
0xffb62d00  0x8c2e8131 0x8634804a 0x854f7e54 0x884f7946
0xffb62d10  0x864b794a 0x844b824d 0x8b507f50 0x89517c51
0xffb62d20  0x7f5d8472 0x81788882 0x847d8379 0x827d827c
0xffb62d30  0x8081828c 0x7a928192 0x78878277 0x8265845e
0xffb62d40  0x84578153 0x87538052 0x8e597d5a 0x8e5c7b61
0xffb62d50  0x88667a62 0x83697d73 0x7d767f86 0x7e878086
0xffb62d60  0x7d838085 0x7d85818a 0x7e858184 0x7e85807d
0xffb62d70  0x8070805f 0x864c7d40 0x823b7b3c 0x853c7d3e
0xffb62d80  0x923b7f3b 0x8e3c7c3a 0x80477b4c 0x805b7e57
0xffb62d90  0x86587e5b 0x88537b54 0x83597c59 0x825c7d57
0xffb62da0  0x825e7d5e 0x85607e66 0x7e6d8371 0x7f738573
0xffb62db0  0x7d73856e 0x776d816e 0x7c6b8269 0x816b826d
0xffb62dc0  0x806a8069 0x83607f5d 0x8f5b7f5c 0x865a7e5a
0xffb62dd0  0x835e7c5f 0x88617c64 0x81647f6a 0x7c77817b
0xffb62de0  0x7b7e8379 0x7f778276 0x8275807e 0x81868096
0xffb62df0  0x7f988098 0x7e857f6e 0x92547d44 0x8b35823c
0xffb62e00  0x823b8033 0x833a8037 0x81348435 0x74538269
0xffb62e10  0x74658378 0x7b7f827e 0x81868088 0x818e8090
0xffb62e20  0x819a8096 0x8194808a 0x83797e69 0x82617a58
0xffb62e30  0x74597e59 0x7e577d56 0x8a5a7d59 0x84597b5a
0xffb62e40  0x845d795e 0x826e8177 0x7b83828b 0x7f8e8194
0xffb62e50  0x818e8191 0x818a8090 0x80978091 0x7f7f806f
0xffb62e60  0x865a7e38 0x7e2a842d 0x7a2e8529 0x7f2e8129
0xffb62e70  0x792b822b 0x732d822b 0x74378333 0x7f348239
0xffb62e80  0x833f7e36 0x8237802e 0x8024831b 0x85188619
0xffb62e90  0x8c158111 0x7f2c8060 0x7c788288 0x7e928198
0xffb62ea0  0x7f938094 0x81948092 0x82918091 0x7d917f89
0xffb62eb0  0x80778066 0x8d3d8125 0x8221871e 0x75249325
0xffb62ec0  0x7e289226 0x7a249225 0x74259321 0x70279320
0xffb62ed0  0x71208d2a 0x72548774 0x7887828f 0x7e968199
0xffb62ee0  0x7f958198 0x80958197 0x81958195 0x7f958191
0xffb62ef0  0x7f958292 0x80928293 0x8191818f 0x7f938290
0xffb62f00  0x9120801c 0x8b217928 0x863c7c4c 0x87557e50
0xffb62f10  0x834a824b 0x7d4b863f 0x82378435 0x803b8436
0xffb62f20  0x803c843e 0x824a8050 0x81507e53 0x854d7d50
0xffb62f30  0x8b4f7b51 0x8c4f7f4c 0x874b7f4b 0x87448341
0xffb62f40  0x8e428841 0x89448349 0x7d447c47 0x854a774a
0xffb62f50  0x874b8248 0x854e844f 0x8252824c 0x7e4e8652
0xffb62f60  0x80538154 0x84498143 0x873a8038 0x86348036
0xffb62f70  0x89368332 0x8b398335 0x86358230 0x8438812e
0xffb62f80  0x8c387f3f 0x8c4a8153 0x87608062 0x8764755f
0xffb62f90  0x865f775a 0x845d7e63 0x87637c64 0x85667c67
0xffb62fa0  0x82707f77 0x847c8086 0x83828184 0x82848080
0xffb62fb0  0x8184808a 0x7b91818f 0x7b828376 0x80738167
0xffb62fc0  0x84648060 0x87658163 0x86677c6d 0x836d7b6e
0xffb62fd0  0x82717c73 0x84767c79 0x7f827d87 0x7e887f86
0xffb62fe0  0x80887d88 0x81897f87 0x82857f8a 0x80847f83
0xffb62ff0  0x82707f63 0x87567a4f 0x83467948 0x84467b4b
0xffb63000  0x8f4a7749 0x8c45794b 0x82597c5f 0x81677e67
0xffb63010  0x84697c6b 0x846a7866 0x80677c67 0x7f6b7f6b
0xffb63020  0x7e6c7f6d 0x806f7d70 0x80747f75 0x7f778078
0xffb63030  0x81757f78 0x7d767e72 0x7b727e73 0x7e718172
0xffb63040  0x7d768170 0x7d707f6a 0x806a7f6b 0x7d6d7e6d
0xffb63050  0x806d7c70 0x856f7d74 0x82717f74 0x7e777f7c
0xffb63060  0x7c7f807e 0x7e7c7f79 0x817c7e7f 0x83807f80
0xffb63070  0x80888287 0x827e806d 0x8d5e7f53 0x8b53824e
0xffb63080  0x844b8051 0x7e4f8048 0x7d53864c 0x755f8471
0xffb63090  0x76708379 0x7d80827a 0x81798081 0x81837e83
0xffb630a0  0x80858085 0x8181817b 0x85737e6b 0x82647a5f
0xffb630b0  0x765a805e 0x7d5b7c60 0x835d7e59 0x815d7e63
0xffb630c0  0x82607b62 0x82687e6f 0x7e778077 0x7e7c817b
0xffb630d0  0x83817f82 0x817f8181 0x7c8d8288 0x7e7c8170
0xffb630e0  0x855a7d3a 0x7d30872b 0x7b2f862d 0x8432802c
0xffb630f0  0x7c2c842e 0x782d7f31 0x7d367f2b 0x822e8230
0xffb63100  0x82337b3b 0x7f377a2f 0x7d257e20 0x83138415
0xffb63110  0x8d157a16 0x82277e5a 0x7b748386 0x7e928195
0xffb63120  0x7f968095 0x81937f92 0x81927f93 0x7e94808d
0xffb63130  0x7f777e68 0x8c457d28 0x85228320 0x71219228
0xffb63140  0x7b269426 0x7b249526 0x73269622 0x6c239428
0xffb63150  0x6f1f8f21 0x71548971 0x7684838e 0x7e95829a
0xffb63160  0x7f9a8095 0x80938097 0x81938093 0x7f938193
0xffb63170  0x7f948291 0x7f938193 0x8094818f 0x7f918291
0xffb63180  0x971a7d1c 0x88237930 0x7f4b7b5d 0x83647b61
0xffb63190  0x84587f57 0x7f578051 0x83497c4d 0x7f4b7e49
0xffb631a0  0x82507e55 0x7f587b5d 0x80627c67 0x85617b64
0xffb631b0  0x8b627b62 0x8c617e5c 0x84567c5f 0x875a7d55
0xffb631c0  0x8f578156 0x8e577f57 0x7f577c58 0x865f755e
0xffb631d0  0x87607e60 0x8061835f 0x81627f65 0x80607e66
0xffb631e0  0x7e637e64 0x835d8055 0x8749814b 0x8c448142
0xffb631f0  0x92458042 0x91448343 0x84408044 0x7b437d43
0xffb63200  0x89467f50 0x8e5f8065 0x876b7f73 0x85727c6e
0xffb63210  0x84707c6f 0x83727e72 0x86777d78 0x84767d79
0xffb63220  0x857c7d81 0x83867e8a 0x818a7f8a 0x82877e86
0xffb63230  0x82838087 0x828c8285 0x807f8278 0x7f727f71
0xffb63240  0x85717e6f 0x87727f71 0x83757c74 0x7c797d79
0xffb63250  0x7e817e81 0x85837e84 0x81867e88 0x7f897f89
0xffb63260  0x818b7f88 0x83897f88 0x85867f86 0x8282807e
0xffb63270  0x84787e6c 0x85647b5f 0x84627d63 0x84627f62
0xffb63280  0x8a607b62 0x88607a61 0x846b7f6c 0x81738074
0xffb63290  0x82727f74 0x83737c75 0x80717c76 0x7f747e77
0xffb632a0  0x7d768079 0x7d767f7a 0x807b7f7c 0x807b807b
0xffb632b0  0x837b7f7e 0x80788078 0x7d7a8076 0x7d768174
0xffb632c0  0x7d768074 0x79728173 0x78758073 0x79717d74
0xffb632d0  0x80787c79 0x837a7f7d 0x857d7e77 0x817c7f77
0xffb632e0  0x7e7c8080 0x7e7e7e7e 0x7f7d7f80 0x827c8179
0xffb632f0  0x847f8276 0x8773816c 0x8a607f5d 0x8c5a7e58
0xffb63300  0x84587f57 0x7b538257 0x7d54835b 0x7a608372
0xffb63310  0x7876837d 0x7f7b8178 0x81747f7a 0x80787e7c
0xffb63320  0x7e7b7f75 0x817a8073 0x88707d68 0x82647c5e
0xffb63330  0x795d805c 0x7e5d7e5f 0x80607c61 0x81657b5f
0xffb63340  0x83667966 0x826b7e6d 0x81748076 0x82788279
0xffb63350  0x82768178 0x7e748177 0x7b858286 0x7d76816e
0xffb63360  0x84587f3a 0x7f30842e 0x7d2d882a 0x872d842a
0xffb63370  0x812a822f 0x7c328035 0x84318134 0x87348328
0xffb63380  0x812d7d31 0x7a347b2c 0x79297f1d 0x84188217
0xffb63390  0x8e117d15 0x8428805d 0x7b758286 0x7e908195
0xffb633a0  0x7f948094 0x80958093 0x80928093 0x80968088
0xffb633b0  0x807c7f62 0x8e487c29 0x8b1f8121 0x721f9126
0xffb633c0  0x7b26952a 0x7e239624 0x74249924 0x69239821
0xffb633d0  0x71238f26 0x70538972 0x7382838e 0x7e948197
0xffb633e0  0x80968195 0x80968194 0x80958194 0x7f928193
0xffb633f0  0x7f938292 0x7f928194 0x7f908191 0x7f90828f
0xffb63400  0x9324791c 0x87237b32 0x7f527865 0x7d6d7b61
0xffb63410  0x815d7d5a 0x80587b51 0x8053764f 0x7e527a4f
0xffb63420  0x8256795c 0x805e7766 0x81687c6c 0x856e7c70
0xffb63430  0x86717c74 0x86707e77 0x806f7b70 0x816e7b68
0xffb63440  0x896c7d69 0x876a7e66 0x806a7d6c 0x8371776e
0xffb63450  0x856a7c6e 0x8270826f 0x82727d71 0x81717a71
0xffb63460  0x81727c6f 0x826c806b 0x7f608160 0x80608163
0xffb63470  0x855e7d5c 0x855c825c 0x825d7d5f 0x805d7a5d
0xffb63480  0x865f7f68 0x896d7f70 0x83797e7d 0x82787e7a
0xffb63490  0x82777f7b 0x817b7d78 0x817e7e7f 0x80837d82
0xffb634a0  0x84847a8b 0x84877c8a 0x808b7f8b 0x818a7c88
0xffb634b0  0x82888085 0x81828184 0x7f7e8076 0x7f777f79
0xffb634c0  0x82757f76 0x83777e79 0x827a7d7c 0x7d7b7d81
0xffb634d0  0x7c848080 0x82898186 0x82877f87 0x80867f88
0xffb634e0  0x7f8a8185 0x83888087 0x85867f82 0x847f827d
0xffb634f0  0x857b7e73 0x856e7c6d 0x81688167 0x7f678267
0xffb63500  0x80677e67 0x83677c6b 0x8269816d 0x7f798173
0xffb63510  0x7f758073 0x80747f72 0x7f747c71 0x80747f72
0xffb63520  0x7d758276 0x7d798079 0x7f787f7a 0x7e787f7b
0xffb63530  0x80798078 0x81798278 0x7d788278 0x7e708175
0xffb63540  0x7f728072 0x7b738371 0x7c738274 0x7d717d72
0xffb63550  0x7e747f74 0x80777f7b 0x82737e76 0x80748071
0xffb63560  0x7d76817a 0x7f767d77 0x7e787f77 0x81738274
0xffb63570  0x83748272 0x8570816c 0x86657e62 0x8b5b7b5f
0xffb63580  0x85597f5a 0x7d5d835c 0x815e825e 0x7c5e8462
0xffb63590  0x7a6c846e 0x80727f71 0x82727c72 0x82747d77
0xffb635a0  0x7e707e76 0x7f737d6d 0x856a7c62 0x835f7e58
0xffb635b0  0x7f5a8159 0x805b805e 0x7b597b5c 0x805d785d
0xffb635c0  0x875d7960 0x81667d6a 0x7b707e70 0x7c74826f
0xffb635d0  0x82718272 0x806d816f 0x7b808181 0x7873816a
0xffb635e0  0x80578137 0x822f7f2b 0x7a268829 0x81298529
0xffb635f0  0x802c7e30 0x7c2d8134 0x7e2d8531 0x8030832f
0xffb63600  0x7d2f7f2f 0x802c7c2a 0x84277e1a 0x85187e17
0xffb63610  0x88137f13 0x82238259 0x7b748184 0x7e908092
0xffb63620  0x7f958195 0x80928192 0x80948091 0x8093808e
0xffb63630  0x80797f66 0x8d4a7d2b 0x91217e1e 0x78209025
0xffb63640  0x6e269426 0x72249626 0x70229a24 0x66249b23
0xffb63650  0x74238d21 0x714d896e 0x7582848a 0x7e958195
0xffb63660  0x7f968197 0x7f968293 0x7f958196 0x7f948194
0xffb63670  0x7f948292 0x80928292 0x8097818f 0x7f8f8291
0xffb63680  0x8d1e771e 0x86217c35 0x7f507b67 0x7a6e7c65
0xffb63690  0x7e5e7f58 0x81557e53 0x7e557b51 0x7e517f53
0xffb636a0  0x8258825e 0x81617f64 0x82687f6b 0x846e7d78
0xffb636b0  0x847b7c7c 0x85847d7e 0x7f7c7d74 0x7e737d76
0xffb636c0  0x86717c6d 0x856d7c70 0x806e7f6d 0x83717b71
0xffb636d0  0x85737c70 0x84737f71 0x83767e71 0x81737c73
0xffb636e0  0x83737d76 0x84767d6a 0x7e677e63 0x7a63816a
0xffb636f0  0x7c627f65 0x7e647f65 0x82667b68 0x83667b6a
0xffb63700  0x82677f6c 0x85737f78 0x827c8077 0x81778076
0xffb63710  0x83777f75 0x7f777f76 0x7d777f78 0x7d797f7e
0xffb63720  0x827b7c84 0x84817d88 0x80897f8d 0x7e897f89
0xffb63730  0x81868085 0x8182807b 0x7f7c7f77 0x7f767f74
0xffb63740  0x80748072 0x80758175 0x81757f76 0x7f7e7e75
0xffb63750  0x7c7c7f7f 0x817d7f7e 0x83817e7f 0x81817f7d
0xffb63760  0x7e80807f 0x8180807e 0x867f7f7d 0x867b827e
0xffb63770  0x8580807c 0x837a7e78 0x81757e72 0x7d6d816e
0xffb63780  0x796d816e 0x7e6f7f70 0x826e7f71 0x7e70816e
0xffb63790  0x7d70816f 0x7e6f7f6f 0x806d7b6e 0x83707c6e
0xffb637a0  0x8168806f 0x7e6f7f70 0x7e6f7f71 0x7d708070
0xffb637b0  0x7e6f8271 0x826e8271 0x826f826f 0x816e816c
0xffb637c0  0x826c816d 0x806a836a 0x826d8067 0x84687d66
0xffb637d0  0x7f6c7e6b 0x7c717f6d 0x7e6e7f6b 0x80698266
0xffb637e0  0x7e68826c 0x806a7f6e 0x7e6d806b 0x7e6c8268
0xffb637f0  0x826b826c 0x846b816a 0x83607e61 0x895e7b60
0xffb63800  0x875d7f59 0x825c815e 0x855e8161 0x7f608362
0xffb63810  0x7f648362 0x82668169 0x82667f6c 0x85697e6b
0xffb63820  0x7f6a7e67 0x7c6a7f64 0x835e7c59 0x84517e50
0xffb63830  0x86527f50 0x83508056 0x77527f50 0x7d567c55
0xffb63840  0x89577f53 0x805d7f62 0x76677e6a 0x746c8168
0xffb63850  0x81698464 0x8268846a 0x7b77817f 0x75728069
0xffb63860  0x7f558236 0x882c8128 0x7a248626 0x7c27822a
0xffb63870  0x82327d2b 0x7d2f8033 0x7a2b842a 0x782c862e
0xffb63880  0x78308330 0x872e8027 0x8f23801d 0x88157c13
0xffb63890  0x85157e14 0x8223815a 0x7c747f84 0x7e908094
0xffb638a0  0x80988195 0x80948092 0x81938097 0x818f808f
0xffb638b0  0x807a7f67 0x8c4a7f2a 0x9720851c 0x7a239224
0xffb638c0  0x60249726 0x69269527 0x6f279623 0x65209622
0xffb638d0  0x79268d25 0x744a876d 0x7784858b 0x7f948196
0xffb638e0  0x7f968196 0x7f968194 0x7f988192 0x7f958294
0xffb638f0  0x80948290 0x81928292 0x8194818e 0x7f92818e
0xffb63900  0x9020721d 0x87207c2a 0x7f457f61 0x775f8357
0xffb63910  0x7c59824f 0x8150824c 0x814c7f51 0x7f4c864b
0xffb63920  0x7d4e8b4f 0x80518857 0x8858855e 0x86667f6e
0xffb63930  0x83807c89 0x84887c89 0x807f7e78 0x7e777f76
0xffb63940  0x846f7b6d 0x85677b64 0x8366816b 0x85687d6b
0xffb63950  0x86697c6a 0x836a7e69 0x83697f66 0x836c7f6a
0xffb63960  0x836a7f70 0x836e7c6d 0x80667c68 0x7f668168
0xffb63970  0x80638268 0x83697e65 0x86687c67 0x826c7c69
0xffb63980  0x826e7e6a 0x86707f74 0x83738273 0x82708370
0xffb63990  0x876e7f6f 0x836c7f6f 0x816e806b 0x826e806f
0xffb639a0  0x826e7d73 0x82767f79 0x817b817e 0x7f80817d
0xffb639b0  0x827d8079 0x81757f73 0x7f737f6e 0x80707f6e
0xffb639c0  0x7e6f8369 0x806c846e 0x826c8268 0x806e7f72
0xffb639d0  0x806d7d6d 0x83737d71 0x85717d71 0x82737f73
0xffb639e0  0x7f738071 0x7f718073 0x82717f6e 0x84728175
0xffb639f0  0x8178827e 0x817b7f7b 0x84767b70 0x816f7f6d
0xffb63a00  0x7a6b846e 0x806e816a 0x856d7d65 0x81658060
0xffb63a10  0x7f678161 0x80657d62 0x81617862 0x8466775f
0xffb63a20  0x87627d65 0x82637f63 0x7f677e62 0x7f698161
0xffb63a30  0x82648268 0x83678062 0x80668265 0x83628069
0xffb63a40  0x865e8261 0x8261845e 0x84617c5f 0x855d7c5c
0xffb63a50  0x815d7f63 0x7f617e60 0x835d815a 0x86598456
0xffb63a60  0x8158885c 0x805f855c 0x8161825c 0x7f5f835c
0xffb63a70  0x865d805f 0x88607f5e 0x875d7e5a 0x8b597b59
0xffb63a80  0x87537f59 0x84558057 0x83577e5a 0x81598059
0xffb63a90  0x825e825d 0x8260835e 0x8361815b 0x865d7f5e
0xffb63aa0  0x835f7f5a 0x825e7f56 0x84527d51 0x85497d43
0xffb63ab0  0x8a4d7b47 0x854b7e4c 0x794c8152 0x804d7e4b
0xffb63ac0  0x89498649 0x82548459 0x785f7c5f 0x745d7f5a
0xffb63ad0  0x7d578658 0x7f5d8560 0x7a7a817a 0x76708069
0xffb63ae0  0x80528232 0x872a8229 0x7d238328 0x7c267f2d
0xffb63af0  0x812c7c2b 0x7c2d7f29 0x7b2c8226 0x7a248627
0xffb63b00  0x7728882c 0x7f2a8429 0x8a1e7f1b 0x8a187717
0xffb63b10  0x86117c15 0x811e7e5b 0x7c737e84 0x7f928097
0xffb63b20  0x7f948095 0x80958095 0x81948093 0x8093808f
0xffb63b30  0x807f7f6b 0x8b4d812b 0x911f8a21 0x7a209322
0xffb63b40  0x64239628 0x6c259325 0x76228f25 0x6b238e23
0xffb63b50  0x7a208b26 0x7842876d 0x767c858b 0x7e958193
0xffb63b60  0x7f988094 0x7f958195 0x7f928292 0x7f958193
0xffb63b70  0x7f918192 0x7f8e8293 0x80938190 0x80928092
0xffb63b80  0x921b7419 0x89207b22 0x82357f45 0x783f833f
0xffb63b90  0x7b40843b 0x833c833c 0x863d813c 0x813f8338
0xffb63ba0  0x7e3e8539 0x843e843e 0x9142824b 0x87578068
0xffb63bb0  0x837c7e88 0x84877c84 0x807e7f78 0x7e7e8274
0xffb63bc0  0x816f8069 0x89607c5e 0x8a5d8360 0x8a60815e
0xffb63bd0  0x87607f5f 0x835d8060 0x8760805f 0x875f805f
0xffb63be0  0x83628065 0x83667d67 0x81667c69 0x8366846d
0xffb63bf0  0x84658567 0x8864816d 0x8c6b8069 0x8268816b
0xffb63c00  0x83707f6e 0x866e806a 0x83698262 0x85668262
0xffb63c10  0x8e607f62 0x8c5f7f5b 0x8a60815e 0x8a5e835c
0xffb63c20  0x825e815f 0x8263806b 0x846f8371 0x80728373
0xffb63c30  0x83758271 0x826a7f6c 0x80678065 0x82658264
0xffb63c40  0x7d658561 0x81658363 0x845f8166 0x82628262
0xffb63c50  0x84628063 0x88668165 0x89637f64 0x86658166
0xffb63c60  0x81668268 0x7d658268 0x80627f68 0x8165826d
0xffb63c70  0x7d718375 0x7f77806e 0x866e7e68 0x86638262
0xffb63c80  0x7f5f8662 0x84638565 0x895f7e5e 0x8759825c
0xffb63c90  0x815b8559 0x7f5a8259 0x80597e5b 0x87577d5b
0xffb63ca0  0x925d8055 0x8a59815c 0x7e59815d 0x8159855c
0xffb63cb0  0x885d845f 0x875b805b 0x805c8259 0x8859825a
0xffb63cc0  0x8c558456 0x85558552 0x844f814d 0x864e804d
0xffb63cd0  0x864d814f 0x85548050 0x8b508547 0x8f488743
0xffb63ce0  0x8844864a 0x824f854c 0x84518451 0x834d854b
0xffb63cf0  0x874e854f 0x8b518352 0x8c4e7f4d 0x8d507d45
0xffb63d00  0x884b8148 0x88488349 0x844c814a 0x844d804d
0xffb63d10  0x854f814f 0x84508252 0x864c8150 0x854c814e
0xffb63d20  0x894f8351 0x8b48824f 0x85428142 0x853f8140
0xffb63d30  0x8d3e8047 0x86428345 0x7c458548 0x83438149
0xffb63d40  0x8c448545 0x8847844e 0x80528251 0x794f814d
0xffb63d50  0x7b4a8254 0x7b59835f 0x7a758177 0x78698062
0xffb63d60  0x824c802c 0x89257d25 0x80268426 0x7e268329
0xffb63d70  0x802b7f2a 0x7e2c8122 0x7e268425 0x80208623
0xffb63d80  0x78248526 0x7a2d8329 0x84238118 0x8b197c13
0xffb63d90  0x88117b12 0x80217d5a 0x7b737f85 0x7f948095
0xffb63da0  0x7f968093 0x7f958093 0x81968095 0x808f7f90
0xffb63db0  0x817d7f68 0x8b4d7f2a 0x8f208821 0x7b209226
0xffb63dc0  0x6b239526 0x72259226 0x7b268e24 0x72249020
0xffb63dd0  0x7a209024 0x7b468b6d 0x777e878b 0x7d938293
0xffb63de0  0x7f988195 0x80958293 0x7f938294 0x7f938293
0xffb63df0  0x7f948290 0x7d90828e 0x7f8e8193 0x8193818f
0xffb63e00  0x9020751c 0x87237620 0x87277d2c 0x7f2c802f
0xffb63e10  0x7d2c8530 0x7f308430 0x822d802f 0x842f7d30
0xffb63e20  0x80307b2c 0x832f7a2d 0x922b7c33 0x86447f5f
0xffb63e30  0x7d797f87 0x80867d84 0x7f748075 0x7c768576
0xffb63e40  0x8465875b 0x8c578051 0x8a51854e 0x8b558750
0xffb63e50  0x884f844f 0x804f8451 0x874f814f 0x8b4f814c
0xffb63e60  0x8654824f 0x855a7f5e 0x8457815a 0x8157875a
0xffb63e70  0x8258875b 0x8e5a835a 0x8f5b8559 0x835f8760
0xffb63e80  0x83608360 0x855f815f 0x845c825b 0x87568051
0xffb63e90  0x8d517d53 0x8e4e7e4f 0x8a528051 0x8a47864d
0xffb63ea0  0x864e844f 0x86548459 0x865c8761 0x82648869
0xffb63eb0  0x84678464 0x83607f5e 0x835b815b 0x8752865a
0xffb63ec0  0x8757875a 0x8a52805b 0x884f7f57 0x85538253
0xffb63ed0  0x88558457 0x8b538654 0x8b578257 0x85568357
0xffb63ee0  0x81588757 0x835a825c 0x84567f5d 0x7f5c8261
0xffb63ef0  0x7d66856c 0x816f826c 0x87618158 0x855a8659
0xffb63f00  0x80568b57 0x895b8856 0x8c558154 0x854f8254
0xffb63f10  0x84538752 0x8152864e 0x83528351 0x8b508350
0xffb63f20  0x92528450 0x8b4f8351 0x87508351 0x8950874f
0xffb63f30  0x8d518650 0x8f547e4f 0x8b4e7e4c 0x8d4e8549
0xffb63f40  0x90498743 0x88448744 0x86478544 0x8837833f
0xffb63f50  0x883d823e 0x893d823a 0x8d378637 0x8b398737
0xffb63f60  0x893a833e 0x883b843b 0x87438541 0x87438541
0xffb63f70  0x893d893a 0x8a408844 0x8740803d 0x873e7e3c
0xffb63f80  0x8739843b 0x8936863b 0x8338813d 0x85387f3a
0xffb63f90  0x87427f35 0x863c813e 0x873e8133 0x8744832f
0xffb63fa0  0x8b3e8637 0x8b3b843c 0x84398439 0x8536843b
0xffb63fb0  0x8b39853d 0x85398737 0x7f3c8839 0x843f8639
0xffb63fc0  0x8a3a8138 0x853a833d 0x7d408845 0x7b418238
0xffb63fd0  0x823c7c4a 0x8152805c 0x7a708173 0x7065805a
0xffb63fe0  0x7d407e2f 0x84297726 0x80268324 0x8323842b
0xffb63ff0  0x8224822c 0x7e248224 0x7d238620 0x7f228521
0xffb64000  0x80228223 0x7a29822d 0x7e21821f 0x87168114
0xffb64010  0x87147919 0x7d197d54 0x7a718083 0x7f8e8094
0xffb64020  0x7f968096 0x7f918094 0x80947f92 0x80927f8f
0xffb64030  0x7e7b7f6d 0x8a507c2e 0x8c1f8419 0x7a229023
0xffb64040  0x70249123 0x74289126 0x75248c26 0x70238e24
0xffb64050  0x7a209122 0x793e8f67 0x797c888a 0x7f908292
0xffb64060  0x7f938298 0x7f908294 0x7f928291 0x80958292
0xffb64070  0x80928292 0x7f928090 0x808e818e 0x8190818f
0xffb64080  0x8e16781a 0x881a781f 0x8e257e25 0x852c8229
0xffb64090  0x7f2c862d 0x7a2c842b 0x7e2c7c2d 0x862b792e
0xffb640a0  0x822b7a2b 0x8129782d 0x90287936 0x88417b60
0xffb640b0  0x7a767f85 0x7c847f79 0x7e6e8075 0x7c7a8373
0xffb640c0  0x885d854d 0x9147853d 0x8c44893f 0x90458840
0xffb640d0  0x89458742 0x7f428745 0x883f8444 0x8f438641
0xffb640e0  0x88458745 0x874d844d 0x894b8349 0x7e4a8744
0xffb640f0  0x7f47894a 0x924c854a 0x934e854d 0x864a8752
0xffb64100  0x8452864b 0x814e864c 0x83508549 0x854d8445
0xffb64110  0x8947844b 0x8d4b8344 0x8c498343 0x8d468444
0xffb64120  0x8c448441 0x8c428749 0x8a4d8a4a 0x864d8b4d
0xffb64130  0x8753864e 0x85478347 0x884a8349 0x8d458947
0xffb64140  0x944a8847 0x93488342 0x8b458643 0x8b468747
0xffb64150  0x8d3f8648 0x8f48883e 0x8a438640 0x82468443
0xffb64160  0x84438346 0x8d4a834c 0x8a4b804a 0x7d488252
0xffb64170  0x7d59855c 0x855e8357 0x8655844f 0x83518550
0xffb64180  0x864e8350 0x8e4c824e 0x8e4b814f 0x864b844d
0xffb64190  0x884e854d 0x874e834b 0x8a4d7f4d 0x914d804b
0xffb641a0  0x934e824e 0x904a804d 0x934d7e47 0x954f834b
0xffb641b0  0x924e854f 0x9752814c 0x964c804d 0x93458247
0xffb641c0  0x94498446 0x8c458445 0x88458343 0x8a43833a
0xffb641d0  0x89438334 0x8e378138 0x8f368433 0x87358631
0xffb641e0  0x8938873a 0x8d388834 0x8a388539 0x8b3b843c
0xffb641f0  0x8d358432 0x89368435 0x803c8435 0x803b813e
0xffb64200  0x893f8342 0x893c873c 0x833b8439 0x87398039
0xffb64210  0x87388136 0x883a833a 0x85358436 0x89368238
0xffb64220  0x8e398533 0x8b3a8636 0x85378536 0x87368537
0xffb64230  0x8934862e 0x843a8534 0x83358434 0x87398236
0xffb64240  0x86398232 0x8036842f 0x7c3b8836 0x7d338432
0xffb64250  0x87367f44 0x87508158 0x7867835f 0x695a824b
0xffb64260  0x76357e29 0x7e257925 0x80257e25 0x8c268128
0xffb64270  0x87278124 0x81238224 0x7f238221 0x7f1d8422
0xffb64280  0x8427852c 0x7b2e8225 0x78238220 0x851b840d
0xffb64290  0x87167f15 0x7d207f53 0x79728081 0x7e908094
0xffb642a0  0x7f947f94 0x80948090 0x80927f8f 0x7d92808e
0xffb642b0  0x7c808169 0x884f7f2d 0x8b1f841b 0x7b1f9223
0xffb642c0  0x75249324 0x76259226 0x6f228d21 0x71248e1f
0xffb642d0  0x7c249124 0x793d9069 0x7b7b878a 0x80938294
0xffb642e0  0x7f968193 0x7f948296 0x7f8e8293 0x81938293
0xffb642f0  0x81908192 0x80938190 0x808d8192 0x808f828f
0xffb64300  0x901c7b1e 0x841c7920 0x851f7e24 0x8329832c
0xffb64310  0x8127882f 0x802d842e 0x802c762a 0x812e742a
0xffb64320  0x762c7828 0x7d2d762e 0x932c732d 0x8842755f
0xffb64330  0x7c767e84 0x7f74806b 0x7f6b8076 0x79828274
0xffb64340  0x87568347 0x8d408a3a 0x8b428a40 0x8d41853d
0xffb64350  0x8742893d 0x823d8740 0x883d8740 0x8b3f883f
0xffb64360  0x893b8a40 0x893d893e 0x8744853e 0x833d883e
0xffb64370  0x89398941 0x9041863b 0x9247853e 0x91428644
0xffb64380  0x8d478840 0x87448b45 0x86428a45 0x88468642
0xffb64390  0x88468844 0x8944884a 0x87428446 0x88487f3e
0xffb643a0  0x85428146 0x843c883f 0x85428c40 0x87428845
0xffb643b0  0x8445853f 0x80468645 0x863f8541 0x893c893b
0xffb643c0  0x893f8644 0x893f8640 0x84418c3d 0x89418843
0xffb643d0  0x8e3f8440 0x8d408441 0x89408841 0x843f8447
0xffb643e0  0x85467e46 0x8c468349 0x8a4d814f 0x8252804a
0xffb643f0  0x7c4e8250 0x804d8250 0x87548653 0x88528153
0xffb64400  0x87537b54 0x8a537b50 0x8c567f53 0x87568452
0xffb64410  0x84558352 0x84547f53 0x87547d50 0x8c527e52
0xffb64420  0x8f527e51 0x8c4f7e52 0x90537851 0x8f517d4f
0xffb64430  0x8b538354 0x8e578354 0x90558153 0x8f517f51
0xffb64440  0x8e4b8152 0x8750804f 0x894a7f4b 0x8e488242
0xffb64450  0x893d8640 0x8b447f3c 0x8b3c7e35 0x86398436
0xffb64460  0x8835893a 0x89358939 0x84358435 0x86368137
0xffb64470  0x8a3a7d30 0x8632802f 0x7f3a873a 0x823c8240
0xffb64480  0x883f823b 0x853d893c 0x833d8639 0x833c8138
0xffb64490  0x81387f37 0x87358533 0x8734853a 0x87348038
0xffb644a0  0x8a328234 0x87368736 0x8131863a 0x85388632
0xffb644b0  0x8634873a 0x82338439 0x81368136 0x85347e38
0xffb644c0  0x84368137 0x82348532 0x822f872e 0x802b8426
0xffb644d0  0x8132803b 0x80478350 0x795b8554 0x754b833b
0xffb644e0  0x7e2b7b24 0x7d217a23 0x7e267a27 0x83277b26
0xffb644f0  0x82248023 0x7e258020 0x80277d1f 0x8320821f
0xffb64500  0x82258729 0x792f812d 0x7924811d 0x84188715
0xffb64510  0x88138312 0x7d1f824e 0x7a70807f 0x7f8e7f96
0xffb64520  0x80937f93 0x80917f91 0x80917f90 0x8090808d
0xffb64530  0x7d82826a 0x86548037 0x861b831d 0x761e9224
0xffb64540  0x73229527 0x73229227 0x70248c24 0x72238c25
0xffb64550  0x801f901d 0x7a379167 0x7a798686 0x7f928193
0xffb64560  0x7f958191 0x7f948194 0x7f928192 0x7f938192
0xffb64570  0x7f918194 0x7f8e8191 0x808f818d 0x808d8290
0xffb64580  0x941f7b1a 0x831b7b1b 0x7e217f25 0x812b812e
0xffb64590  0x842b842c 0x872e852d 0x812c812a 0x782a802c
0xffb645a0  0x6b287d2c 0x7a2a7b2c 0x922f7a2f 0x89477862
0xffb645b0  0x7d797f83 0x846d815f 0x80718278 0x77858373
0xffb645c0  0x874a8646 0x8e39883c 0x8c3e863a 0x8a40883d
0xffb645d0  0x84428c44 0x853f8a41 0x873c8a42 0x87438c3d
0xffb645e0  0x873c8b40 0x893f8c40 0x83428b45 0x884c8a4a
0xffb645f0  0x91468847 0x8d4a8845 0x8e4a884f 0x9b4a8747
0xffb64600  0x984b864e 0x9051874c 0x8c4f884f 0x894a894b
0xffb64610  0x874b8a4f 0x85518a52 0x82518751 0x8154844f
0xffb64620  0x7c4e854d 0x7a4a8745 0x7e4d8c48 0x844e8b54
0xffb64630  0x7f548757 0x7a568654 0x834c8845 0x84428b3c
0xffb64640  0x7d3f8940 0x7f428a3d 0x813f8e43 0x8840893d
0xffb64650  0x8f45853c 0x8a3f843f 0x89418642 0x8542823e
0xffb64660  0x85487f45 0x8b50814c 0x8b4f8052 0x87518351
0xffb64670  0x79548455 0x79548257 0x88558255 0x8c548359
0xffb64680  0x86548057 0x84577e58 0x8c598158 0x8a598558
0xffb64690  0x81588458 0x82557f5b 0x84568055 0x8757825b
0xffb646a0  0x8b5a8156 0x8a557e53 0x8b527b55 0x8b547e51
0xffb646b0  0x84558354 0x85598359 0x8e5a8056 0x8c528158
0xffb646c0  0x8a5b855b 0x83618262 0x8b648059 0x8f52844c
0xffb646d0  0x8a458441 0x88488342 0x8445873c 0x853c8a39
0xffb646e0  0x893a8b36 0x86378736 0x7f358334 0x81358335
0xffb646f0  0x87378236 0x8434822f 0x8038883b 0x853d863c
0xffb64700  0x873d843f 0x823e8837 0x853d873c 0x81368239
0xffb64710  0x7b338239 0x88388339 0x89338430 0x84368437
0xffb64720  0x87368432 0x84388634 0x7d308635 0x83398436
0xffb64730  0x85388835 0x82358637 0x7f328535 0x82398233
0xffb64740  0x83398232 0x84358434 0x882e8330 0x84288429
0xffb64750  0x7b308436 0x7945854d 0x7a4c8643 0x8240832f
0xffb64760  0x89228123 0x7e228122 0x7d267c26 0x7c267824
0xffb64770  0x7d237d21 0x7a1f8024 0x7f1f7f22 0x87228020
0xffb64780  0x82268424 0x782d8225 0x7c20801d 0x8a158012
0xffb64790  0x8b147d13 0x7f198255 0x7c6c8184 0x7f8d7f94
0xffb647a0  0x80907f93 0x80937f8f 0x81937f90 0x818f808d
0xffb647b0  0x807f806a 0x85508033 0x821d831c 0x731c8e22
0xffb647c0  0x72259325 0x73249225 0x72238e24 0x73239024
0xffb647d0  0x85229425 0x7e3c8e65 0x797c8586 0x7d928291
0xffb647e0  0x7e968292 0x80928193 0x80948193 0x7d8f8294
0xffb647f0  0x798e8391 0x7d94828d 0x80918292 0x7e8b828d
0xffb64800  0x881c791d 0x7d1c7a20 0x82237e26 0x85287d28
0xffb64810  0x832d7e2a 0x802c8629 0x7e2c8829 0x7c2e8828
0xffb64820  0x742a802e 0x7d277f2e 0x92267f32 0x86457a69
0xffb64830  0x7e797f86 0x846d8360 0x7f71837e 0x798b8374
0xffb64840  0x87498841 0x8e41843b 0x8b3f8348 0x854c8854
0xffb64850  0x83588d5a 0x85578954 0x86518b50 0x895b8d5e
0xffb64860  0x8b5b895b 0x82518b55 0x7d5d9061 0x85618c60
0xffb64870  0x8863865e 0x855e8962 0x87648964 0x8b5b8660
0xffb64880  0x8b5c855e 0x8a668368 0x87648562 0x84628a5c
0xffb64890  0x81608a63 0x8167886a 0x816b856c 0x7c648563
0xffb648a0  0x79678661 0x7f5b8452 0x7f558c55 0x81658868
0xffb648b0  0x806a856d 0x7b6f8565 0x805d8850 0x81468b41
0xffb648c0  0x7f3f8b42 0x833d8f3d 0x81428f41 0x86408947
0xffb648d0  0x883d8542 0x87498444 0x873c824a 0x8348804b
0xffb648e0  0x85497f4c 0x894c7d51 0x87527f53 0x84508457
0xffb648f0  0x80558453 0x81598059 0x88577e5a 0x88558458
0xffb64900  0x83578558 0x82578258 0x8a598358 0x865b865a
0xffb64910  0x815a845a 0x845b7f59 0x82578454 0x87598557
0xffb64920  0x8a568156 0x87577f53 0x87547d54 0x88547e56
0xffb64930  0x89588254 0x89578359 0x8d587f58 0x8a578059
0xffb64940  0x81618566 0x7f708274 0x84718065 0x8c628654
0xffb64950  0x874e824b 0x8551844c 0x80578b51 0x7f518e4a
0xffb64960  0x873e8b42 0x86398539 0x8237803e 0x83328434
0xffb64970  0x88378638 0x89358230 0x85348637 0x863c883d
0xffb64980  0x8840843d 0x833e873e 0x853a863b 0x853d8132
0xffb64990  0x7d3c8437 0x81358138 0x86348232 0x84358835
0xffb649a0  0x83358539 0x84308533 0x81358538 0x84358434
0xffb649b0  0x85338837 0x86338834 0x85368830 0x84348637
0xffb649c0  0x84358335 0x82338235 0x82297e30 0x822b8224
0xffb649d0  0x7c2f8533 0x783c8640 0x7d3e8438 0x82328325
0xffb649e0  0x7d238721 0x79238621 0x7d247e26 0x842a7423
0xffb649f0  0x821b7921 0x7523801f 0x7b1e8226 0x89227b20
0xffb64a00  0x84248124 0x772b8323 0x7b1f7d1f 0x88177611
0xffb64a10  0x88157611 0x8219814a 0x7e6e817c 0x7e8c7f92
0xffb64a20  0x7f957f91 0x81927f91 0x818e7f92 0x808e808e
0xffb64a30  0x80837e6e 0x85557e33 0x831f8220 0x721c8b23
0xffb64a40  0x6d249223 0x6b229026 0x6d259024 0x76249323
0xffb64a50  0x8323951d 0x79348a64 0x77788387 0x7b8f8290
0xffb64a60  0x7e928294 0x7f938092 0x80948092 0x7d8e8291
0xffb64a70  0x79918290 0x7c91828f 0x808c8291 0x808d8192
0xffb64a80  0x7914791c 0x761d7b1f 0x86217f26 0x882a802a
0xffb64a90  0x802a7f29 0x7c298232 0x7f278629 0x842c832c
0xffb64aa0  0x802a7d28 0x84277f31 0x952d7d2e 0x874b7b6e
0xffb64ab0  0x807d808c 0x86738260 0x7f7a8383 0x7b8f8575
0xffb64ac0  0x884f8c3a 0x8e3e8840 0x89428751 0x815a8c67
0xffb64ad0  0x83668967 0x84638568 0x84638765 0x89688867
0xffb64ae0  0x8a678665 0x7e698467 0x7e68876a 0x846d866a
0xffb64af0  0x816e8470 0x806d846b 0x826c846a 0x7f63856e
0xffb64b00  0x81678469 0x866d856d 0x826d876b 0x8073886c
0xffb64b10  0x7e6d8870 0x7f6e886e 0x8070866c 0x7a718478
0xffb64b20  0x7a72856f 0x826b8666 0x81618866 0x80728574
0xffb64b30  0x8171836f 0x7e72856a 0x7e67875d 0x8148883f
0xffb64b40  0x83408841 0x86458b3c 0x85438b42 0x84428943
0xffb64b50  0x823f863e 0x84488541 0x83468443 0x8148834c
0xffb64b60  0x874d824e 0x874e8152 0x84538153 0x84538458
0xffb64b70  0x89578455 0x89558251 0x88588154 0x86588454
0xffb64b80  0x81558255 0x81578058 0x8a578458 0x8457865a
0xffb64b90  0x8357865c 0x86598453 0x83588457 0x89588257
0xffb64ba0  0x8a558152 0x85527f54 0x83537f51 0x86538351
0xffb64bb0  0x8f568153 0x8e568055 0x8e587d58 0x8958815a
0xffb64bc0  0x7e668573 0x7d788382 0x817e8275 0x8669835f
0xffb64bd0  0x8454825b 0x80628367 0x7e6a866b 0x7c6b8660
0xffb64be0  0x84578a55 0x854c8848 0x8443843b 0x853e8836
0xffb64bf0  0x873c8b36 0x8d408832 0x8c368632 0x8a318932
0xffb64c00  0x8b448738 0x853b8739 0x863a8638 0x8a388136
0xffb64c10  0x82388236 0x79348235 0x84378336 0x863b882d
0xffb64c20  0x80348435 0x833b8432 0x84328637 0x85368633
0xffb64c30  0x87318839 0x8b348736 0x8b358634 0x87358633
0xffb64c40  0x84338634 0x81378432 0x7e317f2b 0x812d7f2d
0xffb64c50  0x7f2e8130 0x773a853a 0x81358330 0x84237f24
0xffb64c60  0x75248023 0x77208327 0x7d258224 0x8a237f24
0xffb64c70  0x85217e19 0x6f1f8021 0x79228120 0x8b237f21
0xffb64c80  0x86248323 0x7c2c831b 0x7f217d11 0x861a7a12
0xffb64c90  0x84107c14 0x88167f55 0x81698080 0x7d898190
0xffb64ca0  0x80968092 0x8194808f 0x808e808e 0x7f907f8c
0xffb64cb0  0x80837f6d 0x87537f32 0x881f811d 0x741f8823
0xffb64cc0  0x6c228e24 0x62249221 0x6a249127 0x7e209226
0xffb64cd0  0x82209621 0x74368d61 0x73788684 0x79908295
0xffb64ce0  0x7e918292 0x7f958192 0x7f908193 0x7f908290
0xffb64cf0  0x7b908290 0x7d8f828f 0x808c818d 0x808e828e
0xffb64d00  0x831d7819 0x7a1b7b1f 0x8227801f 0x842d8327
0xffb64d10  0x812b7f28 0x7f2d7c2b 0x7d2a8127 0x7d2d7d2b
0xffb64d20  0x7d2a792b 0x83287f27 0x942a7835 0x864c7a6a
0xffb64d30  0x7e878091 0x84788276 0x7e7c8389 0x7a928670
0xffb64d40  0x854c9048 0x90408b3a 0x894a8b56 0x81638a6b
0xffb64d50  0x806f886f 0x7e6f8473 0x7f6e846e 0x826c866e
0xffb64d60  0x8071846e 0x7c7b8270 0x7f72836e 0x7f738276
0xffb64d70  0x7d7a827d 0x81738277 0x81758174 0x7e738477
0xffb64d80  0x81738373 0x81778476 0x7f798779 0x7c7e8778
0xffb64d90  0x7c7d8779 0x7f768676 0x7c7c8779 0x797e8584
0xffb64da0  0x7b81857f 0x7f768770 0x7c6a8772 0x7d838379
0xffb64db0  0x7d7a8479 0x797b8475 0x7a6d855e 0x804c8743
0xffb64dc0  0x833f8441 0x843c8744 0x833d8547 0x80428843
0xffb64dd0  0x82448647 0x87438543 0x86498648 0x844b844c
0xffb64de0  0x844d8452 0x854b8255 0x85548254 0x7f558457
0xffb64df0  0x83568358 0x87538554 0x8854845a 0x86538255
0xffb64e00  0x84547c55 0x86547e51 0x8d538556 0x88558655
0xffb64e10  0x84578852 0x86568854 0x86578458 0x8a5a7f59
0xffb64e20  0x8b538054 0x88537f53 0x87538152 0x854f8750
0xffb64e30  0x8c56814f 0x8c527b52 0x8c587c54 0x8b538358
0xffb64e40  0x816c8475 0x7b84848e 0x7e8a8480 0x8870826a
0xffb64e50  0x86638165 0x7d768379 0x7e76847c 0x7f7a8370
0xffb64e60  0x7f6f8668 0x7b638a5f 0x805c8652 0x814c894a
0xffb64e70  0x814b8e51 0x8a4c8d3f 0x8e41863d 0x8737892f
0xffb64e80  0x893a8833 0x8b30872e 0x8a338534 0x8b34803a
0xffb64e90  0x83307e37 0x7e368033 0x85358336 0x88318636
0xffb64ea0  0x853c8335 0x86328136 0x85368436 0x86368734
0xffb64eb0  0x88388734 0x8738853a 0x84338437 0x86338735
0xffb64ec0  0x83358733 0x7f328636 0x7e33812d 0x802a7c2c
0xffb64ed0  0x7f2c7e31 0x7c388238 0x82378131 0x88287c23
0xffb64ee0  0x82237920 0x79217f21 0x79288622 0x85218920
0xffb64ef0  0x82208420 0x76207e1e 0x7a217d23 0x83218121
0xffb64f00  0x80208526 0x7a258224 0x851d7b17 0x88137e0f
0xffb64f10  0x83118212 0x85167c47 0x816d7f7c 0x7d8a828e
0xffb64f20  0x7f938196 0x808f8091 0x7f908090 0x7d8f8090
0xffb64f30  0x7d818070 0x87577f33 0x8c23801e 0x7b1d8520
0xffb64f40  0x76248a24 0x6a219224 0x63279222 0x74249126
0xffb64f50  0x7c1b9626 0x732b9060 0x75728784 0x7a8d8291
0xffb64f60  0x7e958193 0x7f928191 0x7f918194 0x7d90828d
0xffb64f70  0x7d92828e 0x7f908190 0x808a818f 0x808c828d
0xffb64f80  0x90137b19 0x82197a1f 0x8222802d 0x8325842c
0xffb64f90  0x842a7f2b 0x84257c2d 0x7e2b8029 0x752d7b29
0xffb64fa0  0x7a2d792c 0x84287f2d 0x93297b35 0x85537c6e
0xffb64fb0  0x7d8b8091 0x82748171 0x7d84828a 0x79938670
0xffb64fc0  0x85498f41 0x943c863f 0x8d4e8761 0x83688977
0xffb64fd0  0x7e778779 0x7a74857d 0x7b7b8573 0x7c788975
0xffb64fe0  0x7a798579 0x7b838476 0x7f7c847a 0x7a7a857f
0xffb64ff0  0x7a858487 0x827d837b 0x7f7c8478 0x7f798581
0xffb65000  0x83778378 0x7f808481 0x7c808783 0x78888782
0xffb65010  0x7b8a8580 0x7e7e847c 0x7a7f8384 0x7886838d
0xffb65020  0x7b8d858b 0x7f7a8677 0x7b7a8778 0x7a898581
0xffb65030  0x7a7f8480 0x78798376 0x78718960 0x804b8940
0xffb65040  0x80418540 0x81458642 0x80428741 0x7d488844
0xffb65050  0x83438549 0x8b498446 0x8c488347 0x884c834b
0xffb65060  0x82478651 0x844f8452 0x83578253 0x7d558156
0xffb65070  0x7f547f59 0x87578451 0x8a558356 0x86528153
0xffb65080  0x84547e55 0x8b547f54 0x90548353 0x8c538451
0xffb65090  0x87548759 0x88578958 0x8959865a 0x8955835b
0xffb650a0  0x8b588451 0x8b568553 0x894f8458 0x85518650
0xffb650b0  0x88538151 0x88507f52 0x894f7e55 0x8d53815b
0xffb650c0  0x846e837d 0x7d898293 0x7c928588 0x87788473
0xffb650d0  0x84708474 0x7c7d8581 0x7e878682 0x81818575
0xffb650e0  0x7c78857a 0x7873856e 0x7f648465 0x815f885e
0xffb650f0  0x7c628862 0x865f8a5a 0x8c55894e 0x83568953
0xffb65100  0x8a4b854b 0x91378436 0x8e318538 0x8b37823b
0xffb65110  0x84308135 0x82378433 0x86378732 0x89378735
0xffb65120  0x8c358335 0x89318636 0x8735853a 0x8b36833b
0xffb65130  0x8b398736 0x84378736 0x7f358635 0x86398736
0xffb65140  0x85358832 0x7e368533 0x7e30822f 0x7f2b822d
0xffb65150  0x802f7f33 0x8236813f 0x8535802f 0x8c287d25
0xffb65160  0x8d217d21 0x7e227f24 0x79228322 0x83208620
0xffb65170  0x8421821c 0x7e1d821f 0x7c20801b 0x7f207f21
0xffb65180  0x7c25841d 0x7b28821f 0x8d1f7d1b 0x8d137d12
0xffb65190  0x87128111 0x82147e49 0x81687e81 0x80898190
0xffb651a0  0x7d918190 0x7d928190 0x7f927f8d 0x7d92808b
0xffb651b0  0x7a817f6d 0x865a7e36 0x931f801c 0x821d8b23
0xffb651c0  0x7f258f20 0x70259321 0x5e249523 0x6b249520
0xffb651d0  0x76239722 0x712e8f5d 0x78758584 0x7b8c8292
0xffb651e0  0x7d908290 0x7f95818e 0x7e90818f 0x7a8f8290
0xffb651f0  0x7e8f828f 0x7f90818f 0x808f8191 0x7f8d8189
0xffb65200  0x8f1c7b19 0x8621771d 0x7d227f23 0x7b2b832a
0xffb65210  0x7c2a7e29 0x802e7c2b 0x7f277d2b 0x7b2a782c
0xffb65220  0x7e2b792b 0x84277f27 0x932d7e30 0x85517e70
0xffb65230  0x7c888090 0x81747f77 0x7f83808a 0x7892856e
0xffb65240  0x84478c45 0x943f823e 0x8e4b835e 0x826d867b
0xffb65250  0x7c78896e 0x7c758680 0x7b788776 0x7c768a6e
0xffb65260  0x7a6f887a 0x7b84857b 0x817b8676 0x7e7b8784
0xffb65270  0x7d8c858b 0x8183867d 0x7f758776 0x7d79877f
0xffb65280  0x7f7b847a 0x80828578 0x7e7b8788 0x7a8b8387
0xffb65290  0x7c8e847b 0x7f7e8374 0x7e7e8084 0x7e8e808d
0xffb652a0  0x7c888290 0x7e818680 0x7d7d877b 0x7c848880
0xffb652b0  0x7f76847a 0x7b748469 0x7b688c5a 0x7e4a8a41
0xffb652c0  0x7c438640 0x82448442 0x833f8743 0x7e498748
0xffb652d0  0x83488349 0x8a43834a 0x894a824b 0x844a824b
0xffb652e0  0x8246874d 0x864e8551 0x82528257 0x7e567d55
0xffb652f0  0x85577c59 0x8b508154 0x8b558255 0x87538153
0xffb65300  0x86538053 0x88537f53 0x8e538152 0x8d548353
0xffb65310  0x8856865f 0x8366866c 0x836d866e 0x8470846b
0xffb65320  0x87658660 0x845c8765 0x81688468 0x8962835b
0xffb65330  0x8e56814f 0x8b4f8153 0x8d4f7f53 0x93557f53
0xffb65340  0x866c8179 0x7c878292 0x79948388 0x827f877b
0xffb65350  0x817b867f 0x79868689 0x7a8a8884 0x7d81887b
0xffb65360  0x7a7f8684 0x7d83837c 0x81768471 0x806f846f
0xffb65370  0x7c6f836f 0x7f6d8569 0x8167876d 0x8067866e
0xffb65380  0x8465805c 0x8e518047 0x8946864a 0x874f844c
0xffb65390  0x8a3e823f 0x8737843c 0x84398a36 0x86398735
0xffb653a0  0x8d398136 0x8c33893a 0x8a388438 0x883c7d37
0xffb653b0  0x85358438 0x8337873c 0x83358737 0x84378735
0xffb653c0  0x84328639 0x81358334 0x7c31842b 0x7e2c852b
0xffb653d0  0x80338030 0x7f3c7e36 0x83337e33 0x8e267d22
0xffb653e0  0x88267e1c 0x7b257f22 0x7621801f 0x7d1b801f
0xffb653f0  0x821e7e1f 0x821b851d 0x82228320 0x82217e1f
0xffb65400  0x7f238124 0x7a258221 0x861d7f17 0x88147b13
0xffb65410  0x7d157a12 0x7e147e42 0x7f6a7c7b 0x7f87808f
0xffb65420  0x7f8f8091 0x7f8e808f 0x7f907f8c 0x7d907f8d
0xffb65430  0x7b847f6d 0x855a7d37 0x8f227e1a 0x7b1d9021
0xffb65440  0x76219326 0x6e269425 0x5d229624 0x67249822
0xffb65450  0x77219720 0x6d2c8c5e 0x77738480 0x7b8b8290
0xffb65460  0x7d938290 0x7e93808e 0x7e918091 0x7c8d828d
0xffb65470  0x7d91828e 0x808e828e 0x8090818d 0x7e8c818b
0xffb65480  0x8f1d7f18 0x891b7c1f 0x78248024 0x742d8225
0xffb65490  0x772d8027 0x7d2a7f2d 0x80297f2a 0x82297c29
0xffb654a0  0x802c7c28 0x842a7f2d 0x972e7b38 0x87537e73
0xffb654b0  0x7c888189 0x81778175 0x8084828d 0x778e8568
0xffb654c0  0x854c8b41 0x95398241 0x8f47875d 0x806e8776
0xffb654d0  0x7c70876f 0x7e6e877c 0x7d758673 0x7e6f8b5c
0xffb654e0  0x7c60896e 0x7d7f8575 0x837f8475 0x827b8587
0xffb654f0  0x8193818b 0x81828481 0x806f8675 0x7c7c8779
0xffb65500  0x7c798582 0x81888478 0x7f82848d 0x7f8e828f
0xffb65510  0x7e8e837f 0x8185827b 0x8286828f 0x80928192
0xffb65520  0x7d848291 0x7f848586 0x8184857b 0x8085877d
0xffb65530  0x83788470 0x8073846e 0x7e64894d 0x7d448744
0xffb65540  0x7a408742 0x84438646 0x86438944 0x81478749
0xffb65550  0x8449834b 0x8b47824c 0x8a4e8148 0x844b814b
0xffb65560  0x854b834d 0x8a4c8352 0x82518252 0x7f56805a
0xffb65570  0x89568055 0x8e567f54 0x8d558054 0x8a538155
0xffb65580  0x87548151 0x85508357 0x8d548453 0x8f538555
0xffb65590  0x855d856b 0x806f847a 0x817d847a 0x827d8477
0xffb655a0  0x8573886e 0x8171886e 0x7d768473 0x866e8260
0xffb655b0  0x95568051 0x8e4f7f4e 0x93507f4d 0x98598153
0xffb655c0  0x86698379 0x7a858291 0x7798828b 0x7f898786
0xffb655d0  0x7f858789 0x768e858c 0x7981887b 0x78778b73
0xffb655e0  0x79808887 0x7f8d848c 0x83848382 0x7f7e8477
0xffb655f0  0x7b7b857d 0x7d778477 0x7f76847a 0x7f7d8578
0xffb65600  0x7f73846d 0x8963875e 0x855d8759 0x845f845e
0xffb65610  0x8f538645 0x8b46864e 0x814c884f 0x83438947
0xffb65620  0x8b448744 0x913d8a3e 0x8d3f873b 0x8338813c
0xffb65630  0x813b843a 0x8636843d 0x89388236 0x85348532
0xffb65640  0x84388731 0x85338433 0x7e32832c 0x812f8527
0xffb65650  0x81308035 0x7a387f38 0x8337802f 0x92298127
0xffb65660  0x871d821f 0x7a227f22 0x73188022 0x751e831e
0xffb65670  0x8020821b 0x881e8622 0x89218321 0x86227e1e
0xffb65680  0x81218024 0x79258320 0x801e8319 0x84157e12
0xffb65690  0x78117e0f 0x7c167f43 0x7a687f7a 0x7d898194
0xffb656a0  0x808f818f 0x818c8092 0x808d808c 0x7c8c808e
0xffb656b0  0x7c80806f 0x83577c3a 0x8c1c7d1e 0x76209121
0xffb656c0  0x70229623 0x6e249422 0x61239525 0x69249825
0xffb656d0  0x77239820 0x692a8d57 0x76758584 0x7c8c8290
0xffb656e0  0x7d928292 0x7c8f8193 0x7e8f8191 0x7e8f8290
0xffb656f0  0x7d91828d 0x8091818d 0x808a818b 0x7e8e8188
0xffb65700  0x8c1e8019 0x831c7f20 0x7e217f27 0x7b2b7e29
0xffb65710  0x7829802c 0x8227812c 0x822a7f27 0x7a2d7d2b
0xffb65720  0x7c298027 0x872c7f29 0x952c7733 0x86577c72
0xffb65730  0x7f868284 0x8464836c 0x7f7f838c 0x77908566
0xffb65740  0x854b8841 0x953f8241 0x8b428a55 0x7e6a8875
0xffb65750  0x80738570 0x7f748777 0x7e748577 0x816f8859
0xffb65760  0x7c678b76 0x7d7d8576 0x8283847a 0x7f878294
0xffb65770  0x7f968194 0x7e858384 0x80758481 0x7d858779
0xffb65780  0x7b81848a 0x818a8482 0x808b8291 0x7f908194
0xffb65790  0x7d938184 0x7f868284 0x808b8195 0x80988295
0xffb657a0  0x80838290 0x7f88828c 0x7f8d8283 0x7f858680
0xffb657b0  0x7f7e8478 0x7e788371 0x82668451 0x84458144
0xffb657c0  0x7c448545 0x84448642 0x85448a46 0x8348874a
0xffb657d0  0x854b834b 0x894d804b 0x8d4c7f4a 0x874b7f4c
0xffb657e0  0x83467e4c 0x884b824e 0x82508157 0x7f548253
0xffb657f0  0x87588353 0x8d557d55 0x88547d52 0x85578154
0xffb65800  0x86598050 0x84528551 0x86528755 0x8d568554
0xffb65810  0x85648673 0x7e7e8483 0x7d878489 0x7f878585
0xffb65820  0x837d897b 0x807d897f 0x7d82857f 0x8577836a
0xffb65830  0x905b7f50 0x90527b50 0x96517d4c 0x98518254
0xffb65840  0x88618572 0x7a818291 0x7a958292 0x8088828b
0xffb65850  0x818a828d 0x7990848a 0x7d7b886e 0x7d678e6e
0xffb65860  0x797c8a85 0x7c938291 0x7e8f8188 0x7d858582
0xffb65870  0x7b838987 0x7c818483 0x7c848283 0x7d848784
0xffb65880  0x7e82857c 0x846e8870 0x826d866d 0x806e8364
0xffb65890  0x8a598955 0x8955865f 0x7f608664 0x80608a60
0xffb658a0  0x875d8a5c 0x855a8958 0x86518950 0x88448542
0xffb658b0  0x883f823b 0x8736803f 0x85397d35 0x80388137
0xffb658c0  0x842e8635 0x84368433 0x7d30812d 0x7e2c8228
0xffb658d0  0x7e2d8036 0x77398138 0x8233822e 0x8d298223
0xffb658e0  0x84258423 0x81217e21 0x741b801c 0x7520851c
0xffb658f0  0x7f1f841b 0x841b8622 0x8b21831a 0x85267d22
0xffb65900  0x7f237d21 0x80258121 0x831d831b 0x84137f17
0xffb65910  0x820f7f13 0x83147e3e 0x7c638274 0x7c89818e
0xffb65920  0x808f8090 0x818e808d 0x7f8b808d 0x7c8a818b
0xffb65930  0x7f84806f 0x875d7b39 0x88237a1a 0x71199122
0xffb65940  0x6a219923 0x6e279324 0x6a229327 0x69229721
0xffb65950  0x71239824 0x6e258d5a 0x776f8682 0x7c888292
0xffb65960  0x7f90818f 0x7f908190 0x7f8d8191 0x7f8f818f
0xffb65970  0x7b8e818e 0x7c8d818c 0x7f8c808d 0x7f87818d
0xffb65980  0x8c1b811c 0x801d8020 0x85248327 0x7f2a8425
0xffb65990  0x792a822a 0x87307e2a 0x862a7b2a 0x75247c2b
0xffb659a0  0x7b2c7f29 0x8b2d7d27 0x932c7838 0x85597d73
0xffb659b0  0x8388817e 0x8a588261 0x7e7f838a 0x788d8662
0xffb659c0  0x84438b3f 0x953f8740 0x894d8656 0x7c72857c
0xffb659d0  0x84798676 0x8178877c 0x7e748779 0x826e8764
0xffb659e0  0x7c70877b 0x7e7e8479 0x80858484 0x7e8d819c
0xffb659f0  0x7e9b8297 0x7a85828b 0x81848487 0x7f878484
0xffb65a00  0x7c888290 0x8190818c 0x808f8195 0x7e90819c
0xffb65a10  0x7e948185 0x808a818d 0x7f96819b 0x809e8198
0xffb65a20  0x8187828d 0x80908189 0x7e91808e 0x7e8b827e
0xffb65a30  0x7b868484 0x7c7a836d 0x8569845a 0x894b883f
0xffb65a40  0x7d438741 0x83448749 0x85438949 0x8543854c
0xffb65a50  0x874a834a 0x884e824a 0x8f4f834a 0x894a8649
0xffb65a60  0x83438649 0x874f844a 0x82508151 0x814d8155
0xffb65a70  0x86548355 0x89547f55 0x82527d56 0x8056805a
0xffb65a80  0x83518156 0x83538352 0x7f508456 0x8a598959
0xffb65a90  0x8367857a 0x7d878494 0x7f938295 0x80998291
0xffb65aa0  0x838a897f 0x7f858a83 0x7c908789 0x8380836e
0xffb65ab0  0x8d59804e 0x90508355 0x97528256 0x9b528050
0xffb65ac0  0x8a5f836d 0x7d76878a 0x7e928295 0x808d848f
0xffb65ad0  0x818d828f 0x7c90838a 0x817c8672 0x85688a70
0xffb65ae0  0x7a7d8987 0x7a908293 0x7d94828f 0x7c8b8588
0xffb65af0  0x7e858783 0x7c808485 0x7a87868a 0x7b898986
0xffb65b00  0x7d888783 0x827b877f 0x817d867d 0x7e758670
0xffb65b10  0x85668c5f 0x855f856a 0x7d6e8571 0x7f72886f
0xffb65b20  0x836d886d 0x7d6a876f 0x81668863 0x8a58864f
0xffb65b30  0x8f49853b 0x863c8238 0x7e3b8139 0x7a358536
0xffb65b40  0x84378539 0x86308036 0x7e2e812c 0x7e2e832a
0xffb65b50  0x7d2b8138 0x7438813d 0x81367f34 0x8c2b7d1d
0xffb65b60  0x84278021 0x8624811f 0x791b7f1b 0x771c861c
0xffb65b70  0x801e8720 0x821e851e 0x8d21831d 0x83237f1c
0xffb65b80  0x7e247d27 0x85258023 0x871f801a 0x86177d13
0xffb65b90  0x8c0b8014 0x8b15833e 0x7f618378 0x7d85818f
0xffb65ba0  0x808d808c 0x808d808c 0x7f8b808c 0x7d8b828d
0xffb65bb0  0x82827f6f 0x8a5b7b35 0x83227e17 0x6d1e9122
0xffb65bc0  0x69209725 0x73239323 0x72249124 0x6a239421
0xffb65bd0  0x71219623 0x76278d58 0x7970857f 0x7b8b8291
0xffb65be0  0x7f8f818f 0x80908194 0x808f8191 0x7e8f828f
0xffb65bf0  0x788c838d 0x788c828e 0x7d8a818f 0x818a808b
0xffb65c00  0x871d7e1b 0x7d1f7f22 0x82228526 0x7e278728
0xffb65c10  0x782f8327 0x8429792d 0x852d7627 0x79287b2c
0xffb65c20  0x7b2b7d27 0x8c2a7a2c 0x922f7935 0x82587f71
0xffb65c30  0x80867f7c 0x87527e62 0x7d7d838f 0x7c8b8560
0xffb65c40  0x8d478e43 0x963d8a47 0x8c4f8160 0x7f71847e
0xffb65c50  0x7f81877e 0x7f788680 0x80798780 0x82788673
0xffb65c60  0x7f778383 0x8182837e 0x808a8187 0x7e97819d
0xffb65c70  0x7f9e8197 0x7e8f818d 0x808a828b 0x808a818c
0xffb65c80  0x7f938199 0x80928295 0x7f938196 0x7e9c809e
0xffb65c90  0x7f948185 0x7f8f828f 0x7e9d81a1 0x7f9c8199
0xffb65ca0  0x808e828d 0x7f90818d 0x7f948094 0x80928084
0xffb65cb0  0x7b848487 0x7c8b847a 0x856e8265 0x8a448d48
0xffb65cc0  0x80468846 0x83438746 0x874a8741 0x8a4b824a
0xffb65cd0  0x8c48824b 0x8d4b844b 0x8d45874d 0x86468d44
0xffb65ce0  0x83478d48 0x8649844a 0x8547804e 0x8651804e
0xffb65cf0  0x85508252 0x87578151 0x85577d57 0x80527f52
0xffb65d00  0x81548253 0x85528151 0x83518158 0x8a538e56
0xffb65d10  0x8167867f 0x7e888296 0x7f97839a 0x7f998298
0xffb65d20  0x8090828a 0x7d87858a 0x7a948391 0x81838371
0xffb65d30  0x8d5d804c 0x8d538953 0x8d5d8759 0x945b7d54
0xffb65d40  0x8e58835f 0x7e728780 0x788b8491 0x7e858688
0xffb65d50  0x7f8d828f 0x7b93828b 0x8084847c 0x82738674
0xffb65d60  0x7d85868a 0x7d958294 0x7f948297 0x7d918288
0xffb65d70  0x7e848582 0x79848487 0x77888981 0x7b7f8b83
0xffb65d80  0x7c878985 0x7e848984 0x7d848887 0x7d858775
0xffb65d90  0x86678a62 0x82698775 0x7a7c857b 0x7f7b8671
0xffb65da0  0x82748775 0x7e7c8678 0x7f73856f 0x87618759
0xffb65db0  0x8c4d8842 0x863d823d 0x7f3b843a 0x80378835
0xffb65dc0  0x83388437 0x83377c35 0x7e388227 0x772e8433
0xffb65dd0  0x75308033 0x753e813d 0x823b7c38 0x882a7628
0xffb65de0  0x84237b19 0x831f801f 0x78217c1d 0x771b8413
0xffb65df0  0x7e21861d 0x7e238217 0x8721841d 0x84218124
0xffb65e00  0x80237d24 0x87247d23 0x881e7c19 0x84137a15
0xffb65e10  0x88108010 0x820c8737 0x79608477 0x7b84818c
0xffb65e20  0x808b808c 0x7f8f7f8c 0x7d8b808a 0x7989818b
0xffb65e30  0x7d847f73 0x875a7b40 0x84218117 0x701e9120
0xffb65e40  0x68219422 0x70239125 0x72238e26 0x711f9029
0xffb65e50  0x751f9322 0x77258c51 0x776c847d 0x798b838b
0xffb65e60  0x7f918291 0x808d8191 0x7f90828d 0x7c8f828e
0xffb65e70  0x798d838d 0x7a8e818c 0x7d8b818b 0x7f89808a
0xffb65e80  0x85197a15 0x7e1b7d1f 0x82268427 0x812a862b
0xffb65e90  0x7a258129 0x812b7c29 0x852b7c26 0x7d2c8029
0xffb65ea0  0x7d2a812b 0x8f2b7b2a 0x922d7733 0x805e7f77
0xffb65eb0  0x7d847f76 0x82557d67 0x7e7f828e 0x808c845a
0xffb65ec0  0x96478a3d 0x973e894a 0x8e59836d 0x827a8484
0xffb65ed0  0x7b878588 0x7e7f8488 0x82828584 0x8280847e
0xffb65ee0  0x8086838c 0x82898284 0x808e818a 0x7f9981a1
0xffb65ef0  0x7f9c819a 0x8095818a 0x808f818c 0x8091819a
0xffb65f00  0x80998195 0x80978199 0x7e908199 0x7fa1819e
0xffb65f10  0x80968189 0x7e938191 0x7e9f80a1 0x7f9e819b
0xffb65f20  0x7f97828e 0x7f908191 0x8092809a 0x7f9b8092
0xffb65f30  0x7f92818e 0x7b8f8585 0x8576856e 0x8d4d8947
0xffb65f40  0x843f8647 0x85478444 0x8a498348 0x8d498047
0xffb65f50  0x924b854c 0x924c8747 0x8b4a874a 0x85438b46
0xffb65f60  0x86458c49 0x86428445 0x8a47814c 0x8c4a814d
0xffb65f70  0x864a8051 0x86517f4f 0x89557e54 0x82567e54
0xffb65f80  0x80538251 0x86518252 0x87508155 0x8d558e5c
0xffb65f90  0x7f69887c 0x7f8d8299 0x7f9b8395 0x7f928297
0xffb65fa0  0x7f93828d 0x7d8b838b 0x7b95828f 0x7f83836f
0xffb65fb0  0x8d5b8152 0x8b5d8764 0x85648163 0x8f5e7d58
0xffb65fc0  0x9456835b 0x7f648977 0x787d8a84 0x7c7e8c80
0xffb65fd0  0x7c838b84 0x7b8a878b 0x7f898483 0x817c857f
0xffb65fe0  0x7f88868f 0x80908292 0x7f958295 0x7d8e8387
0xffb65ff0  0x7e858585 0x7784848d 0x7485887f 0x7c7a897e
0xffb66000  0x7c848889 0x7b878889 0x7b8a8888 0x7e848577
0xffb66010  0x89688a63 0x8171877e 0x77848682 0x7e7f877b
0xffb66020  0x847d8781 0x7d84857c 0x7e808376 0x885f8659
0xffb66030  0x8b4f8742 0x88388337 0x833b8439 0x883a8533
0xffb66040  0x8139852e 0x7d368036 0x7e348331 0x732c8629
0xffb66050  0x6f348137 0x783c8141 0x853d7f30 0x842c7b27
0xffb66060  0x83247d21 0x8220821b 0x751c7f1c 0x791c821a
0xffb66070  0x7f1d8520 0x7b1d8620 0x831f8525 0x8524811f
0xffb66080  0x83267d23 0x89237e26 0x881d7d19 0x81137a13
0xffb66090  0x850f7d11 0x7c158537 0x725e8476 0x7a83828f
0xffb660a0  0x7f8b808b 0x7d8a808b 0x7a8a8088 0x768a8188
0xffb660b0  0x79828072 0x835a7f3c 0x85208618 0x73208f20
0xffb660c0  0x68239220 0x6f289124 0x72239225 0x7a239425
0xffb660d0  0x7b20951e 0x792b8c50 0x756c857e 0x788a8290
0xffb660e0  0x7e938190 0x80908192 0x7f8f8193 0x7b8b828c
0xffb660f0  0x7a91828a 0x7c8c828b 0x7d8c828a 0x7b8a818b
0xffb66100  0x8d1d751b 0x851c7a1d 0x82288024 0x7f2a822b
0xffb66110  0x7f257f28 0x852e7d27 0x8227812a 0x7d27842c
0xffb66120  0x7e2a8429 0x8c287e2c 0x8f2c743a 0x7c5c7f76
0xffb66130  0x7d878075 0x88537c66 0x7f7f808f 0x7e868357
0xffb66140  0x934a8543 0x923a8741 0x865d8473 0x7e86838b
0xffb66150  0x7c8b828a 0x7d8a828d 0x7f89828b 0x80888187
0xffb66160  0x7e988194 0x82918088 0x8190808f 0x7f9a819c
0xffb66170  0x7f9b819c 0x80988090 0x80878288 0x7e8e8199
0xffb66180  0x7f9a8099 0x7f968193 0x7f8e819f 0x7f9d819b
0xffb66190  0x7f948189 0x7d968193 0x7ea0819d 0x7f988295
0xffb661a0  0x7b948292 0x7b898487 0x7d888192 0x7f978098
0xffb661b0  0x7f998092 0x7e918685 0x807a886c 0x89528649
0xffb661c0  0x88458349 0x87478246 0x89487e4b 0x8c447e47
0xffb661d0  0x9447864b 0x954c894c 0x8e498647 0x85468844
0xffb661e0  0x863e8948 0x8941853b 0x8a4a813e 0x8945824b
0xffb661f0  0x8a467e4f 0x894e7b4c 0x87517f53 0x81557c54
0xffb66200  0x7f518052 0x86508250 0x87538151 0x8a508d56
0xffb66210  0x7e678a7e 0x7d8e8398 0x7f978296 0x7f948296
0xffb66220  0x7f94828e 0x7f8e8290 0x7c958391 0x7e868378
0xffb66230  0x8965815e 0x87698271 0x84707d6f 0x8a6a7d5c
0xffb66240  0x94528352 0x83588c64 0x79738979 0x79748b6f
0xffb66250  0x7a748d79 0x7a808984 0x7d828583 0x7f7d8580
0xffb66260  0x8082878a 0x808b8485 0x7f8f828c 0x7c8e848a
0xffb66270  0x7c87858a 0x7988838f 0x78888882 0x7b818782
0xffb66280  0x7a858888 0x7b848788 0x7b878789 0x7d878578
0xffb66290  0x846a8a64 0x7d738a7f 0x77858882 0x7e768876
0xffb662a0  0x827b8783 0x7b888484 0x7a838279 0x7e648457
0xffb662b0  0x884f833e 0x873b8538 0x8539843e 0x8a378138
0xffb662c0  0x8336843a 0x80378235 0x803c832f 0x7b2b872b
0xffb662d0  0x7832823a 0x7a3c7f3b 0x81378030 0x812a8125
0xffb662e0  0x84217d1e 0x8019801d 0x751a8219 0x79197f1b
0xffb662f0  0x7d1b8417 0x7d1d871f 0x8121841f 0x81217f23
0xffb66300  0x7f237c24 0x82257f21 0x821d7f1d 0x82177a12
0xffb66310  0x870d7914 0x7c0d7f32 0x735c8371 0x797f8387
0xffb66320  0x808e808a 0x7f8b7f8b 0x7d8a8186 0x788b808a
0xffb66330  0x78848071 0x80598443 0x8a26891e 0x7419901f
0xffb66340  0x6b228e25 0x70218f22 0x701f9525 0x77229721
0xffb66350  0x7821961e 0x7f238c48 0x796d847b 0x7889828e
0xffb66360  0x7c8f818d 0x7f8f818f 0x8091818c 0x7c8f828f
0xffb66370  0x7c8c828c 0x7d8d828a 0x7e8d818d 0x7c89828b
0xffb66380  0x9419781b 0x8c207d21 0x82248427 0x7b298427
0xffb66390  0x852b7f2b 0x89277c29 0x82257f29 0x7f298229
0xffb663a0  0x7f28802e 0x8b277b2b 0x8d2e763c 0x79638077
0xffb663b0  0x7d898275 0x8c577e6a 0x8182808d 0x7b848657
0xffb663c0  0x8e498a3c 0x8e418843 0x7f5a846f 0x7a888391
0xffb663d0  0x7d8b8586 0x7b7f8489 0x7c828284 0x7d848488
0xffb663e0  0x7c8d8689 0x80878379 0x83888284 0x7f8e8191
0xffb663f0  0x7c8b828c 0x808d8385 0x8280847d 0x7e808488
0xffb66400  0x7a8a828a 0x7b898486 0x7b84828c 0x7c91828b
0xffb66410  0x7f888382 0x7d85828a 0x7d90828a 0x7d8b8586
0xffb66420  0x7a848686 0x7d7a847d 0x7d7b8481 0x7b868289
0xffb66430  0x818d8389 0x81838578 0x7d738763 0x854d8746
0xffb66440  0x8b49874a 0x88458742 0x854a8343 0x8b45814b
0xffb66450  0x994c824b 0x9a4b844a 0x914b843d 0x88438644
0xffb66460  0x88428441 0x8d3b8342 0x8b3a8342 0x88458540
0xffb66470  0x8e49814b 0x8c487e4c 0x874b8153 0x804e804e
0xffb66480  0x80508150 0x8950814d 0x8855814d 0x89518e5b
0xffb66490  0x7f658a7c 0x7b8c8394 0x7f9a8294 0x7f948299
0xffb664a0  0x7f948290 0x7f8e8294 0x7e988295 0x7c8e837f
0xffb664b0  0x87748171 0x8574817f 0x827c807c 0x8970805e
0xffb664c0  0x96578550 0x90558d56 0x7f628a68 0x77698b64
0xffb664d0  0x7a638d69 0x7972897b 0x7c7a887c 0x7e7b857c
0xffb664e0  0x817d8682 0x8582877e 0x837f8984 0x7d8a8a85
0xffb664f0  0x7a858886 0x7b8a878e 0x7c898787 0x7a838586
0xffb66500  0x78868884 0x7b858a82 0x79838888 0x7b83867d
0xffb66510  0x7f758770 0x7a7e8881 0x79858879 0x7f6e8a6d
0xffb66520  0x7e74887e 0x7984857f 0x757b8572 0x76608550
0xffb66530  0x8448833e 0x89398235 0x89378339 0x8937863b
0xffb66540  0x83338738 0x85368237 0x82338330 0x822d842f
0xffb66550  0x812e8139 0x7e3c7f40 0x7f3c8036 0x81267f29
0xffb66560  0x86207f1d 0x7c1b8219 0x7417831c 0x7c127c1d
0xffb66570  0x7f1b7f1b 0x8320841f 0x801d831f 0x7e218022
0xffb66580  0x7a228023 0x7a208026 0x7e197d17 0x84137713
0xffb66590  0x890d7712 0x7c15812c 0x755d8373 0x7a81838b
0xffb665a0  0x808b818a 0x82887f89 0x80898088 0x7b8a8088
0xffb665b0  0x78818171 0x805e833f 0x9125831e 0x77178f20
0xffb665c0  0x6f219122 0x74248e22 0x73239222 0x7825961c
0xffb665d0  0x7b21921d 0x87258a50 0x7d6c8479 0x788a8292
0xffb665e0  0x798f8290 0x7d8e8190 0x808f808e 0x7f8c818d
0xffb665f0  0x7d8c828f 0x7e89828d 0x808b828c 0x7f8a828a
0xffb66600  0x8d1e7a1a 0x871d8125 0x81238827 0x7e29822a
0xffb66610  0x7c287e26 0x7e297b28 0x802c7b25 0x7c2b8126
0xffb66620  0x7f2c7c2c 0x8d2d7625 0x8f2c763f 0x7d60807a
0xffb66630  0x7e888276 0x8b537e6c 0x82818191 0x7d7d8858
0xffb66640  0x8e47903f 0x93408844 0x844e8467 0x7d7a8584
0xffb66650  0x7f808577 0x7d7a857c 0x7d758378 0x7b7c857e
0xffb66660  0x7a7d887c 0x7e768576 0x7e79837b 0x7c808682
0xffb66670  0x7a7d877a 0x7d7d8779 0x8172886b 0x80738679
0xffb66680  0x7b7b867c 0x7d798678 0x7d78857f 0x7b81857c
0xffb66690  0x7e798377 0x7b79837a 0x7b80867c 0x7e778776
0xffb666a0  0x7b7a857a 0x7e718269 0x7e6a8570 0x7b768578
0xffb666b0  0x7c7e867f 0x7b7a8572 0x7e6d875a 0x87498847
0xffb666c0  0x8b458a48 0x85468b46 0x83498749 0x8b44824a
0xffb666d0  0x964a7f4d 0x9b477d4a 0x934b8144 0x893d8545
0xffb666e0  0x88448140 0x883d813f 0x8838833f 0x8c3b883f
0xffb666f0  0x8c438440 0x8c4b7f3f 0x8848834b 0x804d834e
0xffb66700  0x824b824c 0x844e8249 0x83538351 0x824f8d4f
0xffb66710  0x796c8a7a 0x77898395 0x7d958392 0x7c928393
0xffb66720  0x7a938390 0x7b8d8390 0x7d998397 0x7d908489
0xffb66730  0x827d807a 0x807f8284 0x7f848282 0x88728362
0xffb66740  0x9b548452 0x94538654 0x86538a59 0x80598759
0xffb66750  0x7c528a55 0x79608e69 0x7c6d8e6e 0x7e6e8870
0xffb66760  0x7e738576 0x83788671 0x82728976 0x7c7d8984
0xffb66770  0x7c7a8a7b 0x7e828b84 0x7d858886 0x79848484
0xffb66780  0x7581887d 0x79738a78 0x7c7b8883 0x7c848780
0xffb66790  0x7d7d877a 0x7a808685 0x7b7f8773 0x80618c63
0xffb667a0  0x7b6e897a 0x7782877c 0x79758760 0x7c548648
0xffb667b0  0x88408038 0x8a357f39 0x86348337 0x84328b37
0xffb667c0  0x83378739 0x86358238 0x83398233 0x802f832f
0xffb667d0  0x7f327f34 0x7e377e3f 0x813d7e30 0x802d7d24
0xffb667e0  0x811e8015 0x7720841b 0x7317831a 0x7b1b791f
0xffb667f0  0x801b7a15 0x821e8120 0x7e217f19 0x7e217f20
0xffb66800  0x7e268124 0x7b267f23 0x7b1f7718 0x83137512
0xffb66810  0x87127511 0x7b138026 0x785d836f 0x7a7f8286
0xffb66820  0x7e898089 0x7f8a808b 0x7e887f89 0x7c877f88
0xffb66830  0x78808270 0x7d608344 0x8a287d1a 0x751e8d1f
0xffb66840  0x691c9423 0x6f278c22 0x73208e1f 0x7b209426
0xffb66850  0x7d218c1c 0x80248948 0x7b698378 0x7887828f
0xffb66860  0x7a8e8292 0x7e8f818f 0x808f808d 0x808d818d
0xffb66870  0x7d8b828c 0x7e8d828a 0x7e8a828a 0x7c8c8287
0xffb66880  0x851a811d 0x851f7e23 0x84268429 0x842a8125
0xffb66890  0x75257d29 0x76297c29 0x7d277d29 0x7b2b8129
0xffb668a0  0x7e27802b 0x902b7a2a 0x932d7741 0x81687f7c
0xffb668b0  0x80878174 0x89527e70 0x8284818e 0x817c864f
0xffb668c0  0x94478841 0x983f8741 0x8d4a8859 0x816b8873
0xffb668d0  0x8072886e 0x806d8669 0x7f69846d 0x786e8770
0xffb668e0  0x766f8b69 0x79668864 0x796b876d 0x7971886d
0xffb668f0  0x776a8968 0x756c886d 0x835d8c58 0x85628966
0xffb66900  0x7d678769 0x7f6b8762 0x8066876d 0x7c6c8769
0xffb66910  0x7a658464 0x7869836b 0x7b6c8569 0x81628761
0xffb66920  0x7c66866a 0x7d5f8953 0x80568a5f 0x7961865c
0xffb66930  0x6f67876d 0x71678666 0x815a8450 0x8b448747
0xffb66940  0x8d498a45 0x84478d40 0x83498949 0x8e488249
0xffb66950  0x944a7f4c 0x9c4f7c4b 0x974b8042 0x8b3f8341
0xffb66960  0x873e8340 0x82398537 0x86408737 0x9040893e
0xffb66970  0x893b843d 0x8c428144 0x89458448 0x84468347
0xffb66980  0x874f814b 0x7f4b854a 0x7e4c844e 0x7f4d8a54
0xffb66990  0x74628c72 0x75848a8b 0x7e8a8586 0x7c848683
0xffb669a0  0x78898885 0x7a878884 0x7c8c848f 0x7f8a8586
0xffb669b0  0x7e7e8376 0x7c7f8381 0x7c82837c 0x88708260
0xffb669c0  0xa0558452 0x9951844e 0x8c518754 0x8850854d
0xffb669d0  0x8054874f 0x7d558d59 0x835d8a5e 0x7f60865d
0xffb669e0  0x7a64856a 0x836d8668 0x83658968 0x7b728976
0xffb669f0  0x7f758975 0x82778979 0x7e798982 0x777b877d
0xffb66a00  0x70798972 0x76668e68 0x7e768a79 0x7e808881
0xffb66a10  0x7b7f857f 0x7a828680 0x7f7c8969 0x855b8c5d
0xffb66a20  0x786e887c 0x757e8677 0x7b70875c 0x853e8240
0xffb66a30  0x8d3b7d3a 0x8b378134 0x84388636 0x81388a34
0xffb66a40  0x853a853a 0x8a3a8131 0x86378035 0x822c8031
0xffb66a50  0x7f2d8034 0x8037803d 0x83368030 0x812b7f20
0xffb66a60  0x801d7f1d 0x77198417 0x731f8219 0x7b177d1c
0xffb66a70  0x81207e19 0x8223821f 0x7f1c8022 0x81217f20
0xffb66a80  0x82248022 0x7d267f22 0x791b7b1c 0x81107714
0xffb66a90  0x83107d11 0x7c0f832e 0x7a5d8370 0x7a7d8189
0xffb66aa0  0x7e89808d 0x7d85818c 0x7d898289 0x7d878087
0xffb66ab0  0x79808072 0x7e5e8041 0x8423821d 0x761e8d1f
0xffb66ac0  0x691f9421 0x6a229122 0x71239023 0x7e1f9226
0xffb66ad0  0x811d8d17 0x7b238b49 0x7a69857b 0x7a88828a
0xffb66ae0  0x7d8f828d 0x7f8d818b 0x808f818b 0x808d818c
0xffb66af0  0x7e8c8289 0x7f8c838b 0x7c8a838a 0x798b8388
0xffb66b00  0x831a851d 0x82227c23 0x7e217f28 0x7a2c7f28
0xffb66b10  0x7a287c2b 0x7c267d28 0x7f247c27 0x7e2a7f25
0xffb66b20  0x822a842a 0x932b7d29 0x912d7841 0x80687e7c
0xffb66b30  0x82897f6f 0x87507e70 0x8083828f 0x817a844e
0xffb66b40  0x944a8142 0x973b8443 0x8e3c8b4f 0x86538f5d
0xffb66b50  0x885d8d60 0x89548654 0x88518657 0x80518c5c
0xffb66b60  0x7d558c4e 0x7e4a8c4f 0x7e578f52 0x80588d54
0xffb66b70  0x7e52894a 0x7e538a4e 0x834a8d4a 0x82468b50
0xffb66b80  0x804b8750 0x864d8845 0x8c4a8a52 0x8453874f
0xffb66b90  0x8046844f 0x7e50804e 0x804f8248 0x844c8242
0xffb66ba0  0x8350864a 0x80499044 0x86498b4a 0x8448844a
0xffb66bb0  0x7c478a4c 0x7f4b874d 0x854b8049 0x893d844b
0xffb66bc0  0x8d418b43 0x874b8e44 0x87458a49 0x9249824c
0xffb66bd0  0x974a7d4b 0x9c4c7b4b 0x98497f44 0x8c448242
0xffb66be0  0x8a408436 0x873e893a 0x883a8b39 0x8b3a883b
0xffb66bf0  0x8342843b 0x883f8243 0x8b41863f 0x86428344
0xffb66c00  0x85447f47 0x7f3f8847 0x804c8443 0x80508550
0xffb66c10  0x72548f6a 0x74758e82 0x7c7f897f 0x7d7d857f
0xffb66c20  0x7e7a8779 0x7d768b79 0x7a838a84 0x7c868982
0xffb66c30  0x7f7d877c 0x7e7b837b 0x7a798373 0x886b835c
0xffb66c40  0x9c558253 0x9553824f 0x8a558251 0x86518353
0xffb66c50  0x85518252 0x85548156 0x8752815b 0x8758835c
0xffb66c60  0x855d8260 0x855d845b 0x8461875c 0x7f5f8a69
0xffb66c70  0x7f6b8b66 0x80658d68 0x796f8d70 0x76758b72
0xffb66c80  0x76698d60 0x7f53964e 0x7e609170 0x7b74897a
0xffb66c90  0x77788577 0x757a8776 0x7d6d8861 0x82528c5b
0xffb66ca0  0x776f877b 0x757d8676 0x806a8651 0x8a417c3b
0xffb66cb0  0x8b3a7b33 0x893a8237 0x86348836 0x7d3a8837
0xffb66cc0  0x82398239 0x8d397d39 0x85397d32 0x7e307f2c
0xffb66cd0  0x7f2f8035 0x7e388038 0x8037822f 0x83297f22
0xffb66ce0  0x801f7d1e 0x7716821b 0x741b811b 0x781b8117
0xffb66cf0  0x7d1d801c 0x80207f1b 0x7e1b7f21 0x821c7e23
0xffb66d00  0x80227e26 0x7c257e21 0x7a1d7d15 0x80197810
0xffb66d10  0x8712840d 0x810e8828 0x7d588270 0x7a7f8085
0xffb66d20  0x7d8b808a 0x7d8a8189 0x7c87838a 0x79868185
0xffb66d30  0x79847f73 0x7c5e7f44 0x8428851d 0x7c1f8a1b
0xffb66d40  0x6b229420 0x67219623 0x70229121 0x7b218e20
0xffb66d50  0x83248b1c 0x7d1c8c3f 0x7764877a 0x7984828d
0xffb66d60  0x7e8d818f 0x7d8c828c 0x7d90828d 0x7e89808d
0xffb66d70  0x7d8a828a 0x7c89848a 0x7b888488 0x7a8a8586
0xffb66d80  0x86198619 0x82237c1d 0x7a287d27 0x73247c29
0xffb66d90  0x812c7a26 0x83297d26 0x7f2a7f25 0x822a8028
0xffb66da0  0x882e8128 0x982a7a2c 0x90287848 0x7f6d7f7f
0xffb66db0  0x848a7f6d 0x86537e6f 0x7f85828f 0x82768649
0xffb66dc0  0x9244883f 0x963d8642 0x903d883c 0x8d428b44
0xffb66dd0  0x91458c44 0x923d8644 0x93418840 0x91428b44
0xffb66de0  0x8c3d8b40 0x87418d3d 0x8d3f8c43 0x8c3c8b3e
0xffb66df0  0x893d8941 0x89408a3e 0x83428b42 0x7d3d8c3e
0xffb66e00  0x85478940 0x91458a40 0x98458a43 0x90458b42
0xffb66e10  0x86468849 0x86458448 0x85468742 0x8644863e
0xffb66e20  0x89478946 0x85488f46 0x8d408b4c 0x8e438743
0xffb66e30  0x8c448949 0x90448846 0x874a843b 0x85448946
0xffb66e40  0x90448b4a 0x8c458946 0x8c468948 0x9647834e
0xffb66e50  0x9c4a7d4b 0x9d4c7b4c 0x9a478044 0x8f3e8345
0xffb66e60  0x8e3c8442 0x8d3c843b 0x8e3b883c 0x883f8637
0xffb66e70  0x7f3a823e 0x883d813e 0x8e3e833e 0x893e843f
0xffb66e80  0x83428342 0x81428642 0x82458346 0x8147854c
0xffb66e90  0x78529060 0x7668906f 0x79718b6f 0x7b70886f
0xffb66ea0  0x856b896d 0x82678c6a 0x77728978 0x7a768773
0xffb66eb0  0x7f74886f 0x816f8671 0x7b6c8567 0x865f8356
0xffb66ec0  0x98558352 0x93558254 0x87508352 0x854f8256
0xffb66ed0  0x8b537f55 0x8a568158 0x89598356 0x8e5a815c
0xffb66ee0  0x915e7f5c 0x8a587f5a 0x885c835c 0x875a8a57
0xffb66ef0  0x825e8c56 0x7d568d55 0x755d8c60 0x78628c61
0xffb66f00  0x875a8b50 0x93458e43 0x8151955f 0x76688d6e
0xffb66f10  0x7271886e 0x6e6d896b 0x7d608950 0x7f468a5c
0xffb66f20  0x78668b74 0x79738a6d 0x8462874b 0x8d387e38
0xffb66f30  0x873b8137 0x8835833e 0x89348633 0x7a3a8735
0xffb66f40  0x7e35833f 0x8e418035 0x8338822f 0x782d832a
0xffb66f50  0x7f318435 0x7e368232 0x7f387f2e 0x87278023
0xffb66f60  0x8116801b 0x771b821a 0x7413801d 0x761b801a
0xffb66f70  0x7b1a821a 0x821c821e 0x811c7d1e 0x85217e24
0xffb66f80  0x7e247f25 0x7b248026 0x7c1b8018 0x81147b15
0xffb66f90  0x8f0f8312 0x8a158622 0x7f5a806f 0x7a7e8087
0xffb66fa0  0x7d8d8189 0x7f8b818a 0x7b868285 0x76878085
0xffb66fb0  0x78848073 0x7c5e8244 0x8729841e 0x811c8b21
0xffb66fc0  0x6c21941d 0x6b229427 0x701e9121 0x78268c1f
0xffb66fd0  0x88218721 0x821a8b44 0x77638776 0x7984838d
0xffb66fe0  0x7f90828f 0x7b8d828e 0x788b828c 0x7b8c818c
0xffb66ff0  0x7c8a828b 0x7a8c8287 0x7b89838a 0x7c8a8588
0xffb67000  0x811b831d 0x80227923 0x7c267a28 0x77297827
0xffb67010  0x80267429 0x80277c27 0x7c258128 0x7c297f29
0xffb67020  0x80267d2c 0x9529772a 0x92297847 0x7e6c7f80
0xffb67030  0x82888069 0x86547e71 0x7d84818d 0x8072874b
0xffb67040  0x90478e42 0x923e8643 0x8d3b8340 0x8b3e8641
0xffb67050  0x8f388a44 0x91428441 0x8f3f863a 0x8a408943
0xffb67060  0x863e883d 0x8a3d893e 0x8e40863f 0x8b42863a
0xffb67070  0x8a3d863f 0x8c3f8640 0x8a3e8742 0x823c8943
0xffb67080  0x81408a43 0x893f8a44 0x8f438744 0x87458b3f
0xffb67090  0x8243894c 0x86458740 0x85428a44 0x85418741
0xffb670a0  0x88448840 0x85478a45 0x8b458b45 0x8b488842
0xffb670b0  0x89428641 0x8b458644 0x84418648 0x8b458b44
0xffb670c0  0x93458b45 0x91478548 0x90488649 0x9848824e
0xffb670d0  0x9e4b7c4c 0xa04b7c4b 0x9a4a7f43 0x8e438441
0xffb670e0  0x8d3e833d 0x9144813b 0x8d3d843e 0x863a843f
0xffb670f0  0x853a7f3d 0x883d7d3a 0x893a8039 0x8a35843c
0xffb67100  0x863e863c 0x843e8441 0x88428143 0x85458441
0xffb67110  0x7d4c8952 0x7b539451 0x7a5d955c 0x7b5e8f5c
0xffb67120  0x8559885d 0x845b8c5d 0x7d608c62 0x7f648764
0xffb67130  0x815f8a5e 0x855f8b61 0x815f845c 0x87558153
0xffb67140  0x94528353 0x92548258 0x8a548254 0x86558255
0xffb67150  0x88567b54 0x85548054 0x8759845c 0x8c5c8059
0xffb67160  0x8f5f7a5d 0x8d5a7b5b 0x89587f5a 0x87568258
0xffb67170  0x86588254 0x8352844a 0x80518552 0x824c8850
0xffb67180  0x874d874a 0x9244843e 0x853e924a 0x7654955a
0xffb67190  0x75628c5e 0x795b8a53 0x844f873a 0x803a894b
0xffb671a0  0x735f8d68 0x766a8d63 0x88548846 0x8a3d8036
0xffb671b0  0x81388439 0x85378234 0x8b368236 0x7f348438
0xffb671c0  0x7e398438 0x883d8339 0x81388732 0x7930862f
0xffb671d0  0x7e30862f 0x7b39843b 0x7d3a7e2f 0x84238021
0xffb671e0  0x821f8217 0x7b1d8217 0x7c1d7e19 0x7b1b7e1c
0xffb671f0  0x7b1b831c 0x7f188321 0x82217c1f 0x86217d24
0xffb67200  0x7a258026 0x76248123 0x7d1b821d 0x85177c10
0xffb67210  0x8c10810e 0x87118122 0x80557e6e 0x7c798185
0xffb67220  0x7c8a818a 0x7d88818a 0x7b8a7f85 0x79877e86
0xffb67230  0x79817f75 0x7e5d8449 0x8e2d7e1c 0x801a8a1a
0xffb67240  0x6e1f9324 0x711f9222 0x6d209026 0x78218824
0xffb67250  0x85208521 0x7c178c38 0x76618875 0x77838586
0xffb67260  0x7d8f828e 0x7d8d828f 0x7c8b828d 0x7c8b818a
0xffb67270  0x7e8b8288 0x7c8b828a 0x7b8a8388 0x7c87848b
0xffb67280  0x7e188219 0x80237d25 0x7f257e27 0x7c287c28
0xffb67290  0x7f287929 0x7d297e27 0x7b28812b 0x76228328
0xffb672a0  0x76298429 0x91297b2b 0x932c794e 0x7f6e8081
0xffb672b0  0x81878168 0x864e8074 0x7c83828c 0x7e708749
0xffb672c0  0x91408a3e 0x903d8439 0x883f8239 0x863c883d
0xffb672d0  0x8b3e8c42 0x8d398643 0x893e8636 0x8143893e
0xffb672e0  0x8339873c 0x8d42893c 0x8d3d8839 0x873e893a
0xffb672f0  0x8b3f873d 0x91408640 0x8f43883f 0x893a8942
0xffb67300  0x7f3e8941 0x7f428a3f 0x86458645 0x7f408943
0xffb67310  0x7f468a41 0x884b8940 0x84468c43 0x863e8842
0xffb67320  0x89468543 0x86458743 0x89458847 0x88438846
0xffb67330  0x86408947 0x854a8741 0x84468648 0x91488649
0xffb67340  0x98488640 0x9547864b 0x9547864a 0x9a4b814d
0xffb67350  0xa04c7b4b 0xa34b7f4b 0x9b4a8143 0x8e45813c
0xffb67360  0x8e42843f 0x943a833f 0x8e418238 0x863d843b
0xffb67370  0x8c3f833d 0x8737823d 0x8436823c 0x8d37833e
0xffb67380  0x8b3a8638 0x8839863c 0x8e3f813c 0x8b468340
0xffb67390  0x83438944 0x864a8e47 0x844d8e4c 0x7e4b8a52
0xffb673a0  0x81518857 0x86548958 0x88588b57 0x88598853
0xffb673b0  0x87578557 0x8e578554 0x89578353 0x86528352
0xffb673c0  0x90558256 0x92578056 0x8f558054 0x88528255
0xffb673d0  0x84557e51 0x82568157 0x8556845b 0x8b5e815d
0xffb673e0  0x8d577d5f 0x8f5b7e5e 0x8a578158 0x835a8356
0xffb673f0  0x88588156 0x87508251 0x894d844e 0x8c50864d
0xffb67400  0x874b8549 0x8f44833f 0x8c3e8937 0x7f368f42
0xffb67410  0x82478a44 0x8a3d893c 0x8b32882e 0x81338d44
0xffb67420  0x7355945e 0x795b9057 0x8d4c8736 0x89378130
0xffb67430  0x7d378336 0x81358334 0x8c378439 0x8737853a
0xffb67440  0x7e398738 0x823c853c 0x81328532 0x7e31842b
0xffb67450  0x7e308332 0x7b3b8031 0x7a387e32 0x82258122
0xffb67460  0x871d821a 0x80197f17 0x83187e1d 0x801a7d17
0xffb67470  0x7d1d8119 0x7f1e811f 0x851b7e1f 0x88257f1f
0xffb67480  0x77248323 0x75278323 0x811b7f18 0x8d147815
0xffb67490  0x8b0f7e12 0x830d8227 0x8156816d 0x7e7a8384
0xffb674a0  0x7b8a8187 0x7b88808b 0x7c877f87 0x7a838084
0xffb674b0  0x7b848174 0x835e8249 0x9429801e 0x801b8a19
0xffb674c0  0x70229424 0x77239321 0x6c209121 0x78228d21
0xffb674d0  0x81238f21 0x771b8d3d 0x76638772 0x76858588
0xffb674e0  0x7d8c828f 0x7f8d818e 0x7f8e818b 0x7e8e818b
0xffb674f0  0x808c828b 0x7e8b8288 0x7a86838b 0x7c878484
0xffb67500  0x7d1d821c 0x781b8127 0x7b268125 0x7b287f27
0xffb67510  0x7a2b7c25 0x7b277e27 0x7b277e27 0x76268525
0xffb67520  0x78258a29 0x8f287c2a 0x8f2c7c4e 0x7f6d8184
0xffb67530  0x8286815e 0x855a8173 0x7c84828d 0x836b8941
0xffb67540  0x9246873f 0x8f3a7f3f 0x8d3f813f 0x8b3b8a3f
0xffb67550  0x883f8b40 0x87418545 0x863d873f 0x8540883d
0xffb67560  0x863d873c 0x8a368840 0x893e883a 0x883a8b3c
0xffb67570  0x8d3e873e 0x8d3f853e 0x8a3c8941 0x87418742
0xffb67580  0x81428842 0x863f893c 0x89448440 0x7f428544
0xffb67590  0x7c418944 0x85478940 0x82468c3e 0x80448746
0xffb675a0  0x87458145 0x8b438346 0x8a438643 0x89468842
0xffb675b0  0x8d438947 0x8d478847 0x8b478748 0x9349814b
0xffb675c0  0x984b8044 0x964a8749 0x934b854c 0x9a4c7f4e
0xffb675d0  0xa247794a 0xa0498146 0x9b498248 0x94477d3d
0xffb675e0  0x8d41843e 0x8e3b8342 0x8c3e813d 0x8a3b833b
0xffb675f0  0x8e3b8537 0x883b8737 0x893d843b 0x8b3b8337
0xffb67600  0x873b8633 0x86378740 0x893a813a 0x863b823e
0xffb67610  0x853b863d 0x8a41853f 0x8646834a 0x854c8648
0xffb67620  0x8752874b 0x8b568354 0x8c538555 0x8e578354
0xffb67630  0x8e577e55 0x89557e55 0x86558155 0x89548353
0xffb67640  0x8f548057 0x91577d58 0x92537e54 0x8a558351
0xffb67650  0x84568255 0x85557f57 0x8957835c 0x895b825f
0xffb67660  0x885d805c 0x8b5c8159 0x875a8359 0x84588354
0xffb67670  0x85598154 0x884f7f4f 0x8c4e8248 0x8a4f834b
0xffb67680  0x834a8347 0x88448144 0x8b408136 0x85388438
0xffb67690  0x842e8632 0x8a2f8430 0x8a318528 0x80349235
0xffb676a0  0x7a3e984b 0x814c8f42 0x8d3d8534 0x8a318236
0xffb676b0  0x86358133 0x85368237 0x87388438 0x83388638
0xffb676c0  0x8138883a 0x84398639 0x7e388234 0x7b2b822b
0xffb676d0  0x7e317f33 0x7c367d37 0x7e387d2d 0x82268021
0xffb676e0  0x861b821b 0x82187c17 0x80197b1b 0x831b7f16
0xffb676f0  0x83197e1b 0x7f207d1e 0x821d7f1d 0x86218122
0xffb67700  0x7a238522 0x78228520 0x801e7a19 0x86137113
0xffb67710  0x890e7911 0x870e831f 0x7f4b866a 0x7a778483
0xffb67720  0x7b8a818a 0x7c8a7f88 0x7c867f88 0x7b848184
0xffb67730  0x79838273 0x7f638148 0x912b801f 0x791a8b1f
0xffb67740  0x681d9421 0x76209423 0x7725901f 0x72239224
0xffb67750  0x7921961c 0x7b208b36 0x77608573 0x76808589
0xffb67760  0x7c8f828e 0x7f8f808d 0x7d8d818b 0x7d8c828c
0xffb67770  0x7e8c818a 0x7b86838a 0x79898386 0x7c878588
0xffb67780  0x7f1b7f1d 0x71208028 0x7925802a 0x7d278227
0xffb67790  0x76258228 0x7c288126 0x7b297f27 0x76258428
0xffb677a0  0x7d278628 0x8f2b7829 0x8f287c59 0x80748284
0xffb677b0  0x82858260 0x84587f75 0x7c82828d 0x87698b44
0xffb677c0  0x933e873b 0x8d3a833f 0x933c853e 0x923c883c
0xffb677d0  0x863b8a40 0x7f418742 0x8240883e 0x883b893c
0xffb677e0  0x8a3f8839 0x89408737 0x843b893a 0x8a3e8c3e
0xffb677f0  0x903c893c 0x873d8740 0x863d883f 0x8642883a
0xffb67800  0x84408744 0x8d428742 0x8c428841 0x7f3f8744
0xffb67810  0x7b3b8646 0x8343873f 0x81498b40 0x7c428a42
0xffb67820  0x85448445 0x90468544 0x8c448645 0x8c418848
0xffb67830  0x9445884a 0x954a854a 0x924a854c 0x934a824d
0xffb67840  0x9a4c814c 0x994a884b 0x914b854a 0x994e7e4d
0xffb67850  0xa3517e49 0x9f4a814a 0x9b4a8148 0x98458244
0xffb67860  0x8e3a853b 0x8940833f 0x8a3e823d 0x903e833d
0xffb67870  0x903a8639 0x8d3a8535 0x903a803c 0x8d377f3b
0xffb67880  0x87378435 0x883c8336 0x8439843a 0x833b8636
0xffb67890  0x893b863a 0x8d3b863f 0x873d8547 0x8c4e8648
0xffb678a0  0x8f4c864c 0x8f4d8255 0x90518054 0x95578255
0xffb678b0  0x92548152 0x844f8154 0x83568353 0x8b548252
0xffb678c0  0x8f557d53 0x91537f52 0x96588254 0x8c538350
0xffb678d0  0x86558355 0x89578356 0x8c57835b 0x8a5e8057
0xffb678e0  0x865c7f5e 0x865a8058 0x8554835c 0x86588457
0xffb678f0  0x82538155 0x884f7e51 0x924d7d4b 0x8a4d7f4c
0xffb67900  0x7f42844c 0x81458440 0x883f843a 0x89378634
0xffb67910  0x84318732 0x8b2f882e 0x892f872f 0x822d8b34
0xffb67920  0x84368e31 0x8b348b32 0x8e35862a 0x8d328436
0xffb67930  0x90338336 0x89338237 0x83388437 0x81388539
0xffb67940  0x88398539 0x893b8438 0x7c34812c 0x782f802d
0xffb67950  0x7d2f8030 0x7d338138 0x8138822c 0x83298420
0xffb67960  0x8821831b 0x85177f19 0x8117801a 0x891b7e17
0xffb67970  0x8a1b7e16 0x7e1d7f20 0x821d7f20 0x86258221
0xffb67980  0x80268324 0x7e1f811f 0x7e1a7e1b 0x80137a11
0xffb67990  0x84117a12 0x8c158320 0x80518562 0x78798381
0xffb679a0  0x7c8a8089 0x7e887f86 0x7c878184 0x7d888184
0xffb679b0  0x79838171 0x7c60804a 0x8e2d7e20 0x76158e1d
0xffb679c0  0x64219424 0x75249025 0x80238e20 0x73238f21
0xffb679d0  0x79219422 0x7f1c8c39 0x785d8774 0x76818688
0xffb679e0  0x7b8a828f 0x7e8c818c 0x7d8c818b 0x7d8b828c
0xffb679f0  0x7d8c8288 0x788b8486 0x798b8388 0x7d868388
0xffb67a00  0x831f7c1b 0x79227e26 0x7d24802a 0x7e258325
0xffb67a10  0x7428862a 0x76288527 0x7c277f28 0x7c258127
0xffb67a20  0x82268229 0x902b7425 0x8c307b52 0x7d718385
0xffb67a30  0x8284835e 0x86577d77 0x7c888287 0x86668c47
0xffb67a40  0x953c8441 0x8b398639 0x8f3a883b 0x913a883e
0xffb67a50  0x8b3f8841 0x8840893f 0x873e893e 0x893b893f
0xffb67a60  0x8b3f863c 0x8a3e853d 0x833a893f 0x84358c43
0xffb67a70  0x883d893c 0x843e883f 0x873f873e 0x8b3f8841
0xffb67a80  0x89428641 0x8e438544 0x8b448b42 0x81428748
0xffb67a90  0x81408441 0x86428541 0x8a438843 0x80458a47
0xffb67aa0  0x7f3c874b 0x8d428546 0x8e44844b 0x8e448647
0xffb67ab0  0x95498549 0x964c814b 0x934b834c 0x994f844c
0xffb67ac0  0x9e527f4b 0x9a4b874b 0x9a4e854e 0xa04e7e50
0xffb67ad0  0xa349814c 0x9b4b804b 0x9b4a7f42 0x9c418547
0xffb67ae0  0x96398542 0x8d398344 0x8c3e8441 0x8e3d8039
0xffb67af0  0x8d3d8339 0x8b39843a 0x8c3a7b3b 0x8d3b7b39
0xffb67b00  0x8b377d38 0x89388136 0x84348939 0x853e8732
0xffb67b10  0x893a8634 0x8b35873c 0x873e863f 0x884a8443
0xffb67b20  0x8c498449 0x914e7d4e 0x9250794f 0x8c528153
0xffb67b30  0x8a548453 0x85538351 0x82548454 0x8b517f52
0xffb67b40  0x8f577b52 0x91527f53 0x91598552 0x89548256
0xffb67b50  0x85528454 0x86578757 0x8958815a 0x8a5c7c59
0xffb67b60  0x8b5e7d58 0x8a5d7e59 0x86558258 0x86538457
0xffb67b70  0x87558053 0x8d527b52 0x924a784e 0x8e487b46
0xffb67b80  0x88498245 0x8742863c 0x8843873b 0x89348635
0xffb67b90  0x87378630 0x85338a2b 0x85338930 0x87328430
0xffb67ba0  0x8835822f 0x8b2b872f 0x8f34832e 0x8c308431
0xffb67bb0  0x8c348636 0x8b38823a 0x88338238 0x89378338
0xffb67bc0  0x8a378334 0x87378235 0x7f377f30 0x802e7d29
0xffb67bd0  0x832d8031 0x80348335 0x80338532 0x8227871f
0xffb67be0  0x84218317 0x851d8017 0x831a8417 0x83197d18
0xffb67bf0  0x80177d1d 0x801c7f1b 0x83207f20 0x851f8322
0xffb67c00  0x86218025 0x85207b22 0x851a8015 0x7f148314
0xffb67c10  0x85117b11 0x870f811d 0x7e4b8365 0x7b768082
0xffb67c20  0x7c867e8a 0x7e887f85 0x7b888184 0x7c848084
0xffb67c30  0x7b837f74 0x7f627d4a 0x8c2f7f21 0x75168f1d
0xffb67c40  0x68239221 0x75218d21 0x79248a23 0x6d248b23
0xffb67c50  0x7b1f8e21 0x851a8b32 0x7a5a876f 0x78848588
0xffb67c60  0x7b89828b 0x7e8a828d 0x7d8b8189 0x7e8a828a
0xffb67c70  0x7c8a828a 0x79898486 0x7a88828a 0x7c878187
0xffb67c80  0x881a7e1b 0x82248020 0x85278124 0x82298328
0xffb67c90  0x77288525 0x742b8527 0x7f297e27 0x83247e28
0xffb67ca0  0x85278127 0x92287729 0x8a317c5e 0x7b748289
0xffb67cb0  0x8286815c 0x875e7f76 0x7c898289 0x85618a45
0xffb67cc0  0x963a873d 0x8a33893b 0x8e3c873a 0x9140843d
0xffb67cd0  0x933b8843 0x9242883a 0x8c3c8941 0x8c3a8b44
0xffb67ce0  0x8b40893d 0x8c3d883c 0x863e8b38 0x803e8c41
0xffb67cf0  0x833a8b3f 0x823c8c3b 0x88438a3b 0x903d8846
0xffb67d00  0x8e3e873e 0x8d40883f 0x8a418b3d 0x8643893d
0xffb67d10  0x8541853f 0x88478741 0x92478945 0x86498a3a
0xffb67d20  0x7d458746 0x8a468647 0x91478548 0x9148844b
0xffb67d30  0x9648834e 0x9747804e 0x934d824b 0x9f508151
0xffb67d40  0xa04e7f4b 0x9b4b864f 0xa34e864f 0xa54e7f4c
0xffb67d50  0xa34b7f4c 0x98478047 0x9a4a7f4e 0xa1468341
0xffb67d60  0x9d428939 0x903c883c 0x8e3d863c 0x8e3d823a
0xffb67d70  0x8b3e8136 0x8c3e8139 0x8735803d 0x8c3d8138
0xffb67d80  0x8e3c8138 0x89358336 0x87398736 0x89348635
0xffb67d90  0x8a3a862e 0x8d378636 0x89368640 0x853e8644
0xffb67da0  0x8c458349 0x9446824b 0x934c804d 0x844f814d
0xffb67db0  0x8354834e 0x88528350 0x82518353 0x8a538252
0xffb67dc0  0x8f538154 0x92557e55 0x8e547f52 0x87548152
0xffb67dd0  0x85578353 0x86578258 0x87587e5b 0x895b7f5c
0xffb67de0  0x8f5d8058 0x8e5c8058 0x87598158 0x89578256
0xffb67df0  0x8d538050 0x92527b4e 0x9350794b 0x924a7f47
0xffb67e00  0x9148843e 0x8c44863e 0x8937863c 0x8d368538
0xffb67e10  0x8a358730 0x80348b2d 0x83308732 0x8c338235
0xffb67e20  0x8c2c812b 0x8e2e8333 0x9231822a 0x8d308332
0xffb67e30  0x892e8435 0x8c368437 0x8e3a8638 0x9133853d
0xffb67e40  0x8e398335 0x81318436 0x8237812d 0x872d802a
0xffb67e50  0x882c8131 0x84338439 0x8233832f 0x81298221
0xffb67e60  0x811b8419 0x87198417 0x8813831b 0x7d187f10
0xffb67e70  0x77187c1d 0x831b7f1d 0x871e811c 0x8627801f
0xffb67e80  0x8c257f22 0x8d197e20 0x8e19801c 0x840f7f10
0xffb67e90  0x87117811 0x8412831b 0x7d4b8568 0x7d768282
0xffb67ea0  0x7c848188 0x7e888085 0x7b848183 0x7b868282
0xffb67eb0  0x7d828074 0x825f7f4b 0x8d2d811c 0x77188b1e
0xffb67ec0  0x72218f23 0x76239023 0x6f238f20 0x66248c20
0xffb67ed0  0x7c258d1f 0x8e258930 0x7c5e886e 0x797e858a
0xffb67ee0  0x7d8a8288 0x7e8c818d 0x7d85828c 0x7e8a8289
0xffb67ef0  0x7c878389 0x7b8a8586 0x7c8a8386 0x7a878386
0xffb67f00  0x811d811f 0x81238024 0x8326812a 0x81238128
0xffb67f10  0x7527822a 0x722b8324 0x7c2b7f28 0x7f287927
0xffb67f20  0x7d258024 0x8e2a7926 0x89347c5a 0x7c77828b
0xffb67f30  0x82877f59 0x82618078 0x7b8b828a 0x86628843
0xffb67f40  0x923a8843 0x893a8b3a 0x8e3a8441 0x8f3e803f
0xffb67f50  0x913e8642 0x8c3f8746 0x853e8740 0x883a8b42
0xffb67f60  0x843e8c3a 0x853e8c3b 0x853a8b41 0x823c893d
0xffb67f70  0x863d8b3d 0x87388f3c 0x87448d3e 0x8b408743
0xffb67f80  0x8b41883e 0x8a418c3f 0x8a418b3f 0x89418843
0xffb67f90  0x843e8647 0x84438940 0x8c488947 0x87458846
0xffb67fa0  0x83488642 0x89468648 0x8f49854b 0x9347804e
0xffb67fb0  0x9947824d 0x9c4a814b 0x9c4e7d4d 0xa0527c4d
0xffb67fc0  0x9e4f7d4b 0x9a4c864a 0x9e4d874f 0xa14c804c
0xffb67fd0  0xa24c7c48 0x9a4e8045 0x9a4b7e46 0x9d3f8042
0xffb67fe0  0x98398c44 0x8d3c8c3c 0x8641883a 0x8d41823c
0xffb67ff0  0x8d3a7c3b 0x8b397e36 0x883a823b 0x8836863a
0xffb68000  0x8a3e8437 0x8a328339 0x8a348435 0x8d368537
0xffb68010  0x8e338535 0x8c368535 0x8a328739 0x883d863b
0xffb68020  0x8d418343 0x8d3f8646 0x8c45874c 0x8950824d
0xffb68030  0x8953814c 0x88558251 0x8751814f 0x8a518651
0xffb68040  0x85518752 0x8b557b58 0x8f577952 0x8c567f53
0xffb68050  0x8a548157 0x87587e59 0x86597c59 0x87578158
0xffb68060  0x8c598359 0x89598159 0x86557f59 0x87538055
0xffb68070  0x8d507f50 0x90537b4e 0x8f4c7b4a 0x8f4a8041
0xffb68080  0x9044843c 0x8a40863a 0x893e8636 0x8f3b8439
0xffb68090  0x8a31892f 0x85338b39 0x882f8530 0x8d35802f
0xffb680a0  0x8a348028 0x8d327f31 0x932c822e 0x9032812f
0xffb680b0  0x89328231 0x8c358637 0x8c388938 0x8c3a8638
0xffb680c0  0x8b368436 0x84388630 0x80348430 0x822e8228
0xffb680d0  0x832d832f 0x8136843a 0x8136812d 0x852c7d23
0xffb680e0  0x7f198118 0x79178316 0x7d198113 0x82187f1a
0xffb680f0  0x7f1b791a 0x861a801b 0x87198321 0x85267c29
0xffb68100  0x83247c21 0x7c1e7f21 0x85197e1b 0x88167813
0xffb68110  0x89117313 0x86118313 0x76498562 0x78748280
0xffb68120  0x7b848284 0x7e868184 0x7c878183 0x7d848282
0xffb68130  0x7d818174 0x80657f4b 0x882c7f21 0x7a20831f
0xffb68140  0x6f1d8c21 0x69219220 0x6b239225 0x6f218c1f
0xffb68150  0x7a238a21 0x831d892a 0x7a558773 0x7a7d8687
0xffb68160  0x7d8a828c 0x7d8b8189 0x7b89838a 0x7e89838a
0xffb68170  0x7b89838b 0x78868488 0x798c8482 0x79868486
0xffb68180  0x7b1a841f 0x81258225 0x85298129 0x80248129
0xffb68190  0x75288226 0x73298328 0x7b288022 0x7b2d7d26
0xffb681a0  0x73228026 0x8a297829 0x89387c63 0x7d7a818c
0xffb681b0  0x82847f58 0x7d60817b 0x798a868a 0x885c8c3e
0xffb681c0  0x913e863b 0x8c3d883c 0x8c39873c 0x8f3d8438
0xffb681d0  0x913c8641 0x8840843c 0x7e40883f 0x84418d3d
0xffb681e0  0x7f3c8c3a 0x813c8842 0x883c8740 0x843a8943
0xffb681f0  0x8b3d8a3e 0x8e3e8c3b 0x88418c3a 0x843f8940
0xffb68200  0x88408941 0x89438a3d 0x8943893c 0x8b408844
0xffb68210  0x8142873b 0x804a8741 0x86488842 0x87478b47
0xffb68220  0x89478b43 0x88478847 0x9048864b 0x964c854b
0xffb68230  0x9c4b844c 0xa24d804b 0xa24f7e4e 0xa04c7e4f
0xffb68240  0x9b4c7f4b 0x9a4b8550 0x994d8546 0x9a4b814c
0xffb68250  0xa048824d 0x9d49844a 0x9b4a8348 0x9744833c
0xffb68260  0x95478644 0x8e3f873e 0x8239853c 0x8c3a833b
0xffb68270  0x8f3c8036 0x8b3c8036 0x8a3c8338 0x883a8339
0xffb68280  0x8836833c 0x8c378636 0x8f368336 0x92378235
0xffb68290  0x93388332 0x8d338234 0x8d368436 0x8d36863c
0xffb682a0  0x90388641 0x863d8741 0x88458848 0x904d844c
0xffb682b0  0x8e4b824f 0x894f824f 0x8d518351 0x8d4d8651
0xffb682c0  0x804f8454 0x84547f56 0x8f587c55 0x92567d54
0xffb682d0  0x90547f58 0x8a588154 0x855c815a 0x855b8257
0xffb682e0  0x895c825a 0x86597f55 0x86567e53 0x87527f4f
0xffb682f0  0x8e508350 0x8d4c834c 0x8943834d 0x8e448343
0xffb68300  0x8e398343 0x8937843b 0x8a34843f 0x9136863b
0xffb68310  0x8b2e8834 0x8d348633 0x91308232 0x912f802e
0xffb68320  0x892e802c 0x8c347f2f 0x9532852e 0x9235852c
0xffb68330  0x8b33832c 0x8d358339 0x8e33853a 0x89368736
0xffb68340  0x88368738 0x85338734 0x8133842c 0x7f2a8427
0xffb68350  0x802f8230 0x7f34843b 0x8233822f 0x872d7f1f
0xffb68360  0x7f1d8315 0x6c178416 0x7615831d 0x87178317
0xffb68370  0x851d8119 0x8a208319 0x891d8321 0x84237d26
0xffb68380  0x7a227a1d 0x6d1d7e1f 0x7f1a821b 0x8b167d12
0xffb68390  0x8a12780b 0x8810811f 0x70458360 0x7073837e
0xffb683a0  0x7a838486 0x7e868285 0x7e818084 0x80808083
0xffb683b0  0x80828072 0x81627f4e 0x852a7d1d 0x7c158121
0xffb683c0  0x6d218e22 0x5d219522 0x6a239124 0x76258e20
0xffb683d0  0x79218f1f 0x79218a2b 0x78578770 0x7b7e8787
0xffb683e0  0x7d8b828d 0x7c8a828b 0x7b8b828b 0x7e88838a
0xffb683f0  0x7a878386 0x75898487 0x76888486 0x79878386
0xffb68400  0x7c1d871b 0x7c258429 0x83237f28 0x7c2a7f25
0xffb68410  0x73288125 0x772a8126 0x7c288022 0x7a2b7e27
0xffb68420  0x7a237e29 0x8c277829 0x88357d65 0x7c7a808e
0xffb68430  0x82847e5a 0x7f64817d 0x798b8889 0x875c8f47
0xffb68440  0x9341833b 0x90398439 0x8d3a8a38 0x893d893f
0xffb68450  0x8d3b853f 0x8946813e 0x80408744 0x83368d42
0xffb68460  0x833e8941 0x853a843e 0x863e8438 0x833d8840
0xffb68470  0x8c3e893b 0x8c3b8842 0x893d8b3e 0x853e8a3d
0xffb68480  0x863f8b3e 0x8942883f 0x89418641 0x88408744
0xffb68490  0x84408742 0x85448542 0x8440854a 0x87428b45
0xffb684a0  0x8c448e46 0x8d438b4a 0x914a884b 0x914b874b
0xffb684b0  0x954b854b 0xa1487e50 0xa2497e4c 0x9f4d7e4b
0xffb684c0  0x9a507f4c 0x9b47824d 0x9e4d814a 0x9e4b8049
0xffb684d0  0x9b488545 0x9d4a8747 0x9f438944 0x9a468547
0xffb684e0  0x9342803f 0x8e3e813e 0x883b813c 0x8c3f8138
0xffb684f0  0x8a348340 0x863a833a 0x8b308639 0x8e3a8139
0xffb68500  0x8d388039 0x8c338638 0x913c8032 0x95367e35
0xffb68510  0x91368133 0x8d347f37 0x8f357f34 0x8e378538
0xffb68520  0x93398839 0x8d408643 0x8b408644 0x9044844a
0xffb68530  0x8c4b8247 0x8a51834c 0x8a4f854b 0x884d864f
0xffb68540  0x83508151 0x83558152 0x89597e54 0x90577a53
0xffb68550  0x8d537c57 0x865a845a 0x895a845c 0x8757835a
0xffb68560  0x8a588058 0x89577c56 0x85507b52 0x874f7d4f
0xffb68570  0x894d874a 0x874a8a4b 0x8a4a8845 0x92428641
0xffb68580  0x8f3e833c 0x8b3a8136 0x8a3b8238 0x88358831
0xffb68590  0x84388734 0x8a32832f 0x91357f32 0x8f327f30
0xffb685a0  0x862e7f31 0x88307f2d 0x9030862e 0x8f2e8633
0xffb685b0  0x8c2f8333 0x8d32803b 0x8d378135 0x8a3d8833
0xffb685c0  0x8a358b35 0x86358634 0x8131862f 0x812d8729
0xffb685d0  0x7c2f8230 0x79328233 0x81358230 0x882a8022
0xffb685e0  0x7b1e8216 0x761c8115 0x7d188218 0x811b8415
0xffb685f0  0x7e1d8519 0x821c861b 0x851e821f 0x80257d23
0xffb68600  0x7b24761f 0x761b7b1c 0x81198416 0x86148114
0xffb68610  0x7f107b11 0x820e7f13 0x7749815f 0x7571847d
0xffb68620  0x7a838584 0x7e848281 0x7f848082 0x7e7f7e81
0xffb68630  0x7e817e75 0x80627f4a 0x86317c20 0x821c7e1b
0xffb68640  0x6f1f9021 0x68219421 0x71218e24 0x6f1d8f22
0xffb68650  0x73219321 0x7d1c8b2d 0x7755866e 0x777c8783
0xffb68660  0x7b8d828a 0x7e8a818a 0x7e8b828b 0x7f86828b
0xffb68670  0x7c858386 0x79888587 0x78868386 0x79868285
0xffb68680  0x801c861d 0x7a238526 0x832b8226 0x7a278224
0xffb68690  0x7125832a 0x7c268227 0x7d268226 0x78278327
0xffb686a0  0x80278127 0x8f297926 0x883c7c67 0x7c7c808c
0xffb686b0  0x82837f57 0x82698180 0x7a8e8685 0x88568d41
0xffb686c0  0x933d8638 0x933f853a 0x913b8835 0x863c883d
0xffb686d0  0x893d8340 0x87418643 0x833f8643 0x853e873f
0xffb686e0  0x883e863e 0x893d863e 0x843c873c 0x853a893f
0xffb686f0  0x8c438939 0x8b3e893f 0x8c3e8642 0x863c873f
0xffb68700  0x85408b43 0x8b3f8940 0x8d448741 0x87438a40
0xffb68710  0x88438948 0x88438844 0x833f8947 0x8a418b46
0xffb68720  0x90458a46 0x934a8645 0x944a844b 0x8f4b864a
0xffb68730  0x8d47864e 0x9f4c824b 0xa34b7f4c 0x9f4c7d4b
0xffb68740  0x9b4e7f4b 0x9b4a834e 0xa54d7f4b 0xa34b8149
0xffb68750  0x973c8446 0x9f4b8447 0xa741854c 0x9f418445
0xffb68760  0x91407f3c 0x9040803c 0x8e39843e 0x8b3c8639
0xffb68770  0x87378639 0x84378339 0x8e3e8539 0x93378436
0xffb68780  0x90388337 0x8d3a8539 0x93368038 0x99357e35
0xffb68790  0x90368030 0x8d348138 0x8f368136 0x8f368637
0xffb687a0  0x97398738 0x943b853f 0x8e3e8442 0x90478640
0xffb687b0  0x8b458545 0x8d4d834c 0x8849844d 0x844e874f
0xffb687c0  0x854e834d 0x82538255 0x87588157 0x8f567b57
0xffb687d0  0x8a567b57 0x86598059 0x8f5d805c 0x8a588356
0xffb687e0  0x895a8356 0x8c53834e 0x844b8251 0x874a814a
0xffb687f0  0x844b8548 0x8045894a 0x8b408641 0x983f833d
0xffb68800  0x92358139 0x8a34823d 0x8a31863a 0x81338734
0xffb68810  0x80348432 0x89338131 0x8f33802d 0x8d33852c
0xffb68820  0x842f812c 0x86317e2e 0x8d318230 0x8e308433
0xffb68830  0x8f2f8434 0x8e328331 0x8c3a8637 0x8c368b33
0xffb68840  0x8e388a38 0x87328632 0x8232842f 0x852e8628
0xffb68850  0x772b832d 0x73368539 0x82348231 0x8b297e22
0xffb68860  0x7a188118 0x7f168419 0x85188715 0x7d168619
0xffb68870  0x7b208214 0x7d1c861d 0x821b8322 0x7f248025
0xffb68880  0x7c1f7e1b 0x811e7f1a 0x841b8217 0x82158211
0xffb68890  0x780f8010 0x7e128417 0x7e45835d 0x7b70827c
0xffb688a0  0x7c828385 0x7f818282 0x7f817f80 0x7d827f7c
0xffb688b0  0x7c7e7f74 0x81637f4e 0x882b7e20 0x861c871b
0xffb688c0  0x7323941d 0x74219428 0x79228f22 0x6a209023
0xffb688d0  0x70229420 0x821f8c2a 0x7754876c 0x747a8786
0xffb688e0  0x7989828a 0x818f8186 0x8087838b 0x7f898488
0xffb688f0  0x8085828b 0x7d868488 0x7a858386 0x7a858284
0xffb68900  0x811f831f 0x80238325 0x89258528 0x80288423
0xffb68910  0x75278428 0x7f298127 0x84278127 0x81268523
0xffb68920  0x84268228 0x91247a2a 0x853d7b62 0x7c7d808c
0xffb68930  0x837c7f5a 0x80687f80 0x798d8481 0x86548b43
0xffb68940  0x913e893a 0x8e3a8639 0x8e3a863a 0x8c3d8441
0xffb68950  0x913f8143 0x8b3e8847 0x84458546 0x833e803b
0xffb68960  0x8440833d 0x8c3c8640 0x8a3c893e 0x853d893f
0xffb68970  0x893b8b3f 0x8840883c 0x894a813d 0x8b3c833e
0xffb68980  0x8c3f8a40 0x8b3f8a3f 0x893f893f 0x86418c41
0xffb68990  0x86438b44 0x82448a3f 0x80458c44 0x8b458940
0xffb689a0  0x93488649 0x9641804b 0x95497f4b 0x9548854a
0xffb689b0  0x944c864b 0x9e4f814c 0xa04e8049 0x9d507c4c
0xffb689c0  0x9a4a7f4c 0x984d824d 0x9d4b7c4d 0xa0487f40
0xffb689d0  0x9b4b8246 0x9b477f46 0xa2478047 0x9f438344
0xffb689e0  0x92428043 0x8e417f3b 0x903c863e 0x923c883b
0xffb689f0  0x8e3d863b 0x893b8138 0x893c8233 0x8e388639
0xffb68a00  0x903e8336 0x8e3b8237 0x93377f3a 0x96357d32
0xffb68a10  0x8e397f35 0x8a2e8337 0x8e368335 0x8f368535
0xffb68a20  0x91378637 0x8b3b823c 0x8a3a8240 0x8f3d863e
0xffb68a30  0x8b3e8842 0x8d458247 0x8a4c834a 0x884d884c
0xffb68a40  0x8551864f 0x84508251 0x8a558155 0x8e587c58
0xffb68a50  0x8a5c7958 0x885a7b5c 0x8b5c7c5a 0x845b8358
0xffb68a60  0x80568556 0x854f8a4e 0x80488b48 0x834a8443
0xffb68a70  0x89478240 0x89418544 0x8a3d833f 0x8f388038
0xffb68a80  0x8c3a7f38 0x89388335 0x89348936 0x863b8432
0xffb68a90  0x84328132 0x89337d32 0x8b308230 0x8a2f8a2d
0xffb68aa0  0x87348433 0x8a2c7d2f 0x8e2d7d30 0x8e30802c
0xffb68ab0  0x8f2e8532 0x90328634 0x8c348a35 0x88388c36
0xffb68ac0  0x8b368936 0x89358337 0x85358031 0x7f2b842b
0xffb68ad0  0x772e842f 0x762e843a 0x7f35802e 0x8a2a7b23
0xffb68ae0  0x7e187f18 0x81198615 0x7f188c17 0x7a1a861d
0xffb68af0  0x7c237d19 0x821a8518 0x86198422 0x7b248123
0xffb68b00  0x7521851c 0x781c821f 0x7f1c7f18 0x8418810f
0xffb68b10  0x800b8213 0x8411890f 0x823d875d 0x7c6f807c
0xffb68b20  0x7a818281 0x7d828382 0x7d827f7f 0x7c7e7f7f
0xffb68b30  0x7d7d8076 0x7f60804f 0x8733811f 0x85148f1f
0xffb68b40  0x71209621 0x72229321 0x74239123 0x70219222
0xffb68b50  0x7121951f 0x7f1e8f24 0x78528769 0x757b8681
0xffb68b60  0x788b828a 0x808a8288 0x80898488 0x7e888687
0xffb68b70  0x7f878284 0x7b888383 0x7a878387 0x7c848484
0xffb68b80  0x85178220 0x89248026 0x90288327 0x89268329
0xffb68b90  0x7c278423 0x82288028 0x8b248023 0x8b2a8324
0xffb68ba0  0x8a268424 0x94297d2c 0x82417d63 0x7c7f7f8b
0xffb68bb0  0x867a8056 0x7e6a7f82 0x798e8282 0x864f893c
0xffb68bc0  0x8f3a883a 0x8c3c8638 0x8e3b863e 0x9239853d
0xffb68bd0  0x96438443 0x90438649 0x84448544 0x7f44843d
0xffb68be0  0x833e843d 0x8e428840 0x8f3f8a38 0x863d8a3f
0xffb68bf0  0x883f8b42 0x87428b40 0x8645863e 0x8f408342
0xffb68c00  0x923a8842 0x8d408939 0x87418841 0x89438842
0xffb68c10  0x85428741 0x7d458944 0x80408b44 0x8c458944
0xffb68c20  0x94448848 0x9647834a 0x954b824b 0x9c4b834b
0xffb68c30  0x9c4c834d 0x9f4f814c 0x9d4c7f48 0x9b507d4a
0xffb68c40  0x994b814a 0x954c854c 0x944c824a 0x9d498049
0xffb68c50  0xa0468048 0x98428045 0x9c4b8147 0xa0458243
0xffb68c60  0x9440813c 0x8d407f3f 0x943d853c 0x983c893f
0xffb68c70  0x973b8437 0x8d398138 0x853e8431 0x8a3b873e
0xffb68c80  0x90358539 0x903a823b 0x92398236 0x93368236
0xffb68c90  0x8d358333 0x882e843a 0x8f358435 0x90338635
0xffb68ca0  0x8c358637 0x81348439 0x843b853a 0x8f3c873a
0xffb68cb0  0x8f3e8541 0x8f3b8046 0x8f478249 0x8d4b8a4b
0xffb68cc0  0x864c894f 0x8651834e 0x8e578255 0x8c527e57
0xffb68cd0  0x8c587b59 0x895b7d5a 0x865c7e5d 0x7d5c835b
0xffb68ce0  0x78568652 0x7f528848 0x7f478742 0x813e8341
0xffb68cf0  0x9045813d 0x943d823b 0x89398339 0x85338336
0xffb68d00  0x8837803a 0x88378332 0x8b3a8632 0x8b378537
0xffb68d10  0x87308432 0x8a318130 0x88328232 0x88328733
0xffb68d20  0x8c30862c 0x8e308132 0x8f307f2d 0x8e2c8134
0xffb68d30  0x912c8431 0x93348533 0x8e338832 0x87398932
0xffb68d40  0x88378735 0x8d378533 0x8935822d 0x7a258328
0xffb68d50  0x7a2d8231 0x7b2e8439 0x7b35822f 0x872a7d21
0xffb68d60  0x87198018 0x84198713 0x7c198816 0x7b1c821e
0xffb68d70  0x7f1a7c14 0x8b18831e 0x8917831b 0x781f7f23
0xffb68d80  0x71208215 0x721a821f 0x7d1a821b 0x88148012
0xffb68d90  0x8a118111 0x8c118816 0x883f835d 0x7c6f817a
0xffb68da0  0x78808284 0x7d828181 0x7c808081 0x7b7e807e
0xffb68db0  0x7e7d7f74 0x7f617f4f 0x8a2d8021 0x871b8f1b
0xffb68dc0  0x731f9523 0x7426901e 0x74218e22 0x79218f1f
0xffb68dd0  0x7520931f 0x7e218e2b 0x7a4e886b 0x767a8582
0xffb68de0  0x778a838a 0x7f87828a 0x81878489 0x7f888586
0xffb68df0  0x7e878487 0x78848586 0x79868587 0x7e838586
0xffb68e00  0x86207e1f 0x85297a25 0x8d278026 0x87268425
0xffb68e10  0x7b278227 0x80257d28 0x84267e26 0x84278226
0xffb68e20  0x89268427 0x93298028 0x833e7f6a 0x7e7f8089
0xffb68e30  0x86728058 0x7e707f82 0x798d827d 0x844c8742
0xffb68e40  0x8e3d883d 0x8938863c 0x893e8537 0x9141853a
0xffb68e50  0x9143853f 0x8d488349 0x8f4b8441 0x89468647
0xffb68e60  0x82408540 0x883a883e 0x8d408b3b 0x873e8a41
0xffb68e70  0x83428b3f 0x85428f43 0x89448942 0x8e43813d
0xffb68e80  0x8f3b873d 0x8b40893f 0x883f8642 0x8b458342
0xffb68e90  0x8b42833e 0x83428644 0x823f8944 0x8e458843
0xffb68ea0  0x9a498743 0x994a854e 0x974a844d 0x994c8049
0xffb68eb0  0x9a4b7e4a 0x9d48814d 0x9e4c7d4b 0x9e4b7e4c
0xffb68ec0  0x9e4a834c 0x9a4b874b 0x9949884c 0xa24a8049
0xffb68ed0  0xa0477c47 0x94418241 0x99477f45 0x9f477f3e
0xffb68ee0  0x9a46823f 0x923f7e44 0x9238833b 0x943f883c
0xffb68ef0  0x963f823b 0x943c813c 0x923b853b 0x9139863c
0xffb68f00  0x8e3a853d 0x903f803c 0x943d8235 0x92388538
0xffb68f10  0x90348537 0x8e358534 0x8f398633 0x8f378534
0xffb68f20  0x8b368436 0x84388535 0x8736873a 0x8e3a853b
0xffb68f30  0x8b3c813c 0x8c427e3c 0x8f448044 0x8b488b46
0xffb68f40  0x854c8c4f 0x85508451 0x8a528354 0x8d587f55
0xffb68f50  0x8b557e59 0x885b7f60 0x8559815e 0x805c825d
0xffb68f60  0x7d578553 0x7f4f8646 0x8147833f 0x883e823a
0xffb68f70  0x92407d3b 0x933a7f38 0x89378434 0x80358532
0xffb68f80  0x8633803a 0x8d318136 0x92388234 0x8e31853a
0xffb68f90  0x872f8734 0x8b308232 0x892e8335 0x86338433
0xffb68fa0  0x8d2d882b 0x9130862f 0x8e307f2f 0x8e2d7f30
0xffb68fb0  0x8e2f8132 0x8c30842d 0x8c388632 0x8a348535
0xffb68fc0  0x8b368435 0x8d318631 0x89328331 0x7d2c8128
0xffb68fd0  0x7f2d802d 0x7d318332 0x7735832e 0x7f2a7c20
0xffb68fe0  0x841d7c14 0x84188418 0x7f18821d 0x7f1b7e1c
0xffb68ff0  0x831d7a18 0x87158117 0x881d811d 0x7b227b20
0xffb69000  0x78207c1b 0x7d17801b 0x7d1d8218 0x7c167f12
0xffb69010  0x840f8013 0x890c8516 0x8439805a 0x796d8178
0xffb69020  0x787f8183 0x7e827f81 0x7e7d817f 0x7d7e817d
0xffb69030  0x7b7f7f73 0x7c617d51 0x89327f1e 0x7e1b8f19
0xffb69040  0x731f9421 0x7a258d22 0x74218923 0x74218b1f
0xffb69050  0x75219020 0x7c1f8d23 0x76518764 0x76788483
0xffb69060  0x7886858a 0x7e888389 0x7f8b8088 0x7e848385
0xffb69070  0x7c868886 0x76868784 0x77858683 0x7c868784
0xffb69080  0x881c7b1f 0x81237c24 0x88288029 0x86278325
0xffb69090  0x7a278520 0x7e2a8028 0x7f247e24 0x7d26832a
0xffb690a0  0x8a278427 0x93277e2f 0x85447e6b 0x80837f88
0xffb690b0  0x87717f54 0x7f737f82 0x788f827b 0x834f8741
0xffb690c0  0x903b883b 0x883b8839 0x85368642 0x8f3c8745
0xffb690d0  0x8d418844 0x8b448549 0x984a844f 0x93498542
0xffb690e0  0x80458744 0x81408a40 0x8c408842 0x8942863c
0xffb690f0  0x8241893f 0x86428b42 0x8d41863f 0x8c42863d
0xffb69100  0x8c3b8842 0x8c418441 0x883f8447 0x8c418547
0xffb69110  0x923f8543 0x883d8744 0x84408a46 0x91438a49
0xffb69120  0x9e458948 0x9e4b864b 0x9b4a854d 0x974b8249
0xffb69130  0x994b814c 0x9d4c8245 0x9f4f814d 0xa04c804d
0xffb69140  0xa34c844e 0xa0448650 0xa148844a 0xa8488149
0xffb69150  0x9e448144 0x92458042 0x964d7f43 0x9e418149
0xffb69160  0xa1458440 0x963d823c 0x903f8441 0x91418640
0xffb69170  0x963c8043 0x9b3b7f3c 0x9e3d843e 0x983f8536
0xffb69180  0x8c3b853e 0x8f3d8340 0x9638813e 0x92378338
0xffb69190  0x94388738 0x95368636 0x91378431 0x8f388330
0xffb691a0  0x8a358432 0x89358634 0x8c358735 0x8e3a843a
0xffb691b0  0x86368438 0x893b833e 0x8e418341 0x8a48874e
0xffb691c0  0x864a8950 0x844e8552 0x89508453 0x8f548156
0xffb691d0  0x8a568055 0x87588157 0x875c805c 0x8459815f
0xffb691e0  0x815a8651 0x7f548445 0x8545813c 0x8f3c823c
0xffb691f0  0x93378139 0x933b8435 0x8b318637 0x7e2d8532
0xffb69200  0x8533822f 0x93368136 0x98338033 0x92358333
0xffb69210  0x8931862d 0x8d348033 0x8a338331 0x85328637
0xffb69220  0x91348531 0x95308432 0x8e2d8030 0x8f2f8132
0xffb69230  0x8a2f832d 0x87308232 0x8c338335 0x8c368334
0xffb69240  0x8f358435 0x90368536 0x89308133 0x812f822a
0xffb69250  0x8432842e 0x80348236 0x73338229 0x772a8020
0xffb69260  0x821d7e15 0x86188119 0x851b7d17 0x851b7c1a
0xffb69270  0x87187d16 0x84178117 0x871c801b 0x7f1f7f1b
0xffb69280  0x811d7e1f 0x881a8022 0x7d1b8214 0x74157d12
0xffb69290  0x810f7f13 0x8a0d8117 0x7f39805c 0x776c8378
0xffb692a0  0x79828280 0x7f848080 0x80808280 0x7e7c827d
0xffb692b0  0x787b8273 0x79618050 0x88347f1f 0x78198d19
0xffb692c0  0x7721921f 0x7e239023 0x731d8e21 0x6f218d1f
0xffb692d0  0x75218e21 0x79218e22 0x72508b63 0x77788584
0xffb692e0  0x7b888389 0x7d8a8286 0x7c898289 0x7d888488
0xffb692f0  0x7b878683 0x76868585 0x75868584 0x7a848685
0xffb69300  0x851c7623 0x84227c26 0x88277e29 0x7f258223
0xffb69310  0x72268727 0x7a258328 0x7f2b7d23 0x77288326
0xffb69320  0x80298426 0x942a7c2a 0x88497d6b 0x817f7f8a
0xffb69330  0x83697e5c 0x7d6f8086 0x7c8f8377 0x8b4b8843
0xffb69340  0x8c39893f 0x853a893b 0x8538873f 0x8c3e893e
0xffb69350  0x8b46893d 0x8744864b 0x9149834b 0x8e498449
0xffb69360  0x82458943 0x81448c3e 0x863e8744 0x8443823a
0xffb69370  0x8446863e 0x8b408647 0x8a418240 0x863d893c
0xffb69380  0x8a408840 0x8d41813e 0x8944833e 0x86458642
0xffb69390  0x88468640 0x87418742 0x8b418940 0x8f448c41
0xffb693a0  0x97488a4a 0x964d874b 0x954d854d 0x984b834b
0xffb693b0  0x9a4a844a 0x9d4b8446 0x9a4a824b 0x9c4c814d
0xffb693c0  0xa14d854d 0x9f478450 0x9e4d7f41 0xa0458047
0xffb693d0  0x9f488344 0x9b467f45 0x9e497d43 0x9f418442
0xffb693e0  0x9e458739 0x99448540 0x913e8543 0x91428244
0xffb693f0  0x9a3c7c46 0x9f3e7f3f 0x9d3e8141 0x9a418339
0xffb69400  0x9641843c 0x973d863c 0x9a437e42 0x943e7e35
0xffb69410  0x93398739 0x973b8539 0x973a8036 0x96378036
0xffb69420  0x8f348335 0x8e358532 0x92358538 0x91378236
0xffb69430  0x8c378638 0x8c38883d 0x8b3d863d 0x8b468445
0xffb69440  0x8a49854d 0x854c8550 0x87508551 0x8e528351
0xffb69450  0x89558253 0x85558159 0x86597f5a 0x835c805b
0xffb69460  0x81598556 0x8253824f 0x854a7e3f 0x883d8137
0xffb69470  0x8a388438 0x8a378735 0x86368833 0x83348437
0xffb69480  0x8a2c8337 0x942f8134 0x97347e33 0x8f338230
0xffb69490  0x8b328432 0x8c337f38 0x89308433 0x88338634
0xffb694a0  0x8e36812f 0x9031812f 0x902f8033 0x922f8232
0xffb694b0  0x8c2d8236 0x8b2d7f31 0x902f812f 0x8e368334
0xffb694c0  0x8d358333 0x90358132 0x89337e38 0x7e378240
0xffb694d0  0x7f3f873c 0x7d39803c 0x78317f2d 0x7a298121
0xffb694e0  0x821d7e17 0x87187b18 0x871d7617 0x7f1a7a15
0xffb694f0  0x7c168017 0x80177f1a 0x88197d1b 0x7f1f821b
0xffb69500  0x7d1b7e1b 0x831b7f1e 0x801e8119 0x80157913
0xffb69510  0x8011790d 0x870d7d13 0x7f378052 0x776d8475
0xffb69520  0x797f827f 0x7d80827c 0x7c7f847c 0x7b7d847c
0xffb69530  0x767d8474 0x77638254 0x87327e21 0x7b198b1c
0xffb69540  0x6f1f8e21 0x7121911a 0x71219224 0x71208d24
0xffb69550  0x78208b22 0x7a1e8e1d 0x6f4b8d68 0x78758682
0xffb69560  0x7b8c8287 0x7b8a818b 0x78898286 0x7b87848a
0xffb69570  0x7c868487 0x7a858384 0x78848384 0x79838584
0xffb69580  0x821d8021 0x85237f29 0x87277d27 0x78248327
0xffb69590  0x6b238627 0x78268026 0x802a7d26 0x74238328
0xffb695a0  0x78288529 0x93297b2c 0x8a507e6f 0x81837f88
0xffb695b0  0x80647e58 0x7c788086 0x7f908476 0x934b8b3a
0xffb695c0  0x893f853e 0x84388643 0x883a863b 0x8a3e8841
0xffb695d0  0x8a40863b 0x8644844a 0x8b498443 0x894a8448
0xffb695e0  0x864a8940 0x80488d39 0x8042893f 0x7f3f863c
0xffb695f0  0x8540873f 0x9043853f 0x883f833f 0x82408938
0xffb69600  0x88408a42 0x8c42853a 0x8c438444 0x82438440
0xffb69610  0x80428446 0x873f8744 0x91458945 0x8e458a3f
0xffb69620  0x904b8a4c 0x924b8448 0x924e834b 0x994b824c
0xffb69630  0x9d4c7f49 0x9e4a8447 0x964b8749 0x994d834e
0xffb69640  0xa14d814e 0xa14c7f47 0x994a7f48 0x98448045
0xffb69650  0xa1488149 0xa4458247 0xa5477e44 0xa045813f
0xffb69660  0x9b43853f 0x9d3f8340 0x9442813b 0x923e8147
0xffb69670  0x9e3c824b 0xa2428142 0x9d418342 0x9b40873d
0xffb69680  0x9e418841 0x9f41873f 0x9d3c8241 0x963b823e
0xffb69690  0x923e8238 0x97408438 0x9a3e8334 0x9e3b7e37
0xffb696a0  0x96368230 0x94398536 0x99388436 0x9533843a
0xffb696b0  0x92358339 0x903b8540 0x8a37863e 0x89418442
0xffb696c0  0x8e4b814a 0x874d814f 0x8850844e 0x8f53854d
0xffb696d0  0x8a53814e 0x85537e55 0x85568054 0x8356835c
0xffb696e0  0x82578557 0x85518251 0x884a7e48 0x8238803a
0xffb696f0  0x82398237 0x83368434 0x8538852c 0x8a368233
0xffb69700  0x90318132 0x9734822f 0x96348031 0x8d2f8330
0xffb69710  0x8c34862e 0x8a358233 0x8a338333 0x8d398430
0xffb69720  0x8a338334 0x8c2f8232 0x9430822f 0x952f8330
0xffb69730  0x912b832f 0x9033812f 0x93328035 0x912e8234
0xffb69740  0x8e348431 0x8f338534 0x873a8242 0x7e40814f
0xffb69750  0x7d4a8349 0x7a417f3c 0x7f357d2d 0x7f297f1f
0xffb69760  0x831c7e18 0x8b197d18 0x891b7a18 0x7a137e17
0xffb69770  0x73198115 0x7d177d19 0x88197e1b 0x801b841d
0xffb69780  0x7b17821a 0x7f1b8022 0x861d8419 0x8b137e11
0xffb69790  0x83107c0d 0x83117f13 0x7f398456 0x786b8575
0xffb697a0  0x797e847f 0x7b7f837d 0x7a7d837e 0x7a7a827d
0xffb697b0  0x77798373 0x7461824e 0x8737811f 0x7f1c891b
0xffb697c0  0x69208c1b 0x62209320 0x72249421 0x75219020
0xffb697d0  0x7a1f8e20 0x7d228e20 0x6f478c69 0x79788583
0xffb697e0  0x7b868489 0x78898387 0x768a8385 0x798b8586
0xffb697f0  0x7d848589 0x7d848486 0x7c868481 0x79838482
0xffb69800  0x881f861d 0x83288025 0x81277b29 0x7b248226
0xffb69810  0x71278326 0x7c267c28 0x82267c25 0x77268326
0xffb69820  0x83258425 0x9428792f 0x834e7e6e 0x7f818189
0xffb69830  0x83647e58 0x7e777f87 0x7e8f8571 0x8c4c8c47
0xffb69840  0x8a45813d 0x883a823f 0x8939843f 0x853c883c
0xffb69850  0x88418441 0x87458143 0x8941834b 0x8b458349
0xffb69860  0x88448744 0x833f8d42 0x80428c41 0x7f42883f
0xffb69870  0x87408640 0x90438242 0x90418340 0x8a3d883c
0xffb69880  0x873f8b3f 0x89408941 0x8a428344 0x86488043
0xffb69890  0x85478143 0x89438644 0x8f448845 0x90458845
0xffb698a0  0x93468846 0x964c824e 0x994c8248 0x9e4e7e48
0xffb698b0  0xa04e7a46 0x9d498346 0x97498a4b 0x9b4d844e
0xffb698c0  0xa04e7c4d 0x9d4e7a4b 0x9f4c7f48 0xa2447e47
0xffb698d0  0xa2467e47 0xa1408346 0xa3437f44 0xa1447e42
0xffb698e0  0x9e3f8143 0x9e418042 0x99417d43 0x99408144
0xffb698f0  0xa1448642 0xa5428342 0x9f448340 0x973b8a43
0xffb69900  0x9a448a43 0x9f468642 0x9d418540 0x9a408241
0xffb69910  0x98437e3c 0x9a3e8338 0x9d3f833c 0x9c3f7e35
0xffb69920  0x98368337 0x97358339 0x98358237 0x9333853a
0xffb69930  0x90397f3e 0x92398037 0x8f3f8537 0x8b3e8343
0xffb69940  0x8e427c4c 0x8b4d7b4b 0x884c824c 0x8c4d864c
0xffb69950  0x894f7e54 0x86507c51 0x87528153 0x86558553
0xffb69960  0x85558454 0x8954814f 0x88497e46 0x85427d38
0xffb69970  0x87387e35 0x84377e31 0x86358132 0x8a328130
0xffb69980  0x8b328130 0x90308332 0x962e8231 0x8f30832e
0xffb69990  0x89328731 0x8930862f 0x8e30813c 0x8f308032
0xffb699a0  0x8b318236 0x89308231 0x90318330 0x8f318231
0xffb699b0  0x8c34832e 0x8e32832d 0x90308132 0x8c318132
0xffb699c0  0x8b338330 0x8b378634 0x843f8446 0x7d4e8058
0xffb699d0  0x7d547f50 0x7b4d7e45 0x7f39792d 0x83267a1f
0xffb699e0  0x811b7c13 0x831b7e13 0x861f7d17 0x82157f15
0xffb699f0  0x7e137e16 0x85177a19 0x8e177d19 0x841b851d
0xffb69a00  0x7c1a8416 0x80228119 0x841b8419 0x87168111
0xffb69a10  0x820f7c11 0x8011820f 0x79348753 0x76648674
0xffb69a20  0x797d857b 0x7b7b847d 0x7c7d827a 0x7d7e827c
0xffb69a30  0x797b8172 0x78638352 0x89348321 0x8b1c841c
0xffb69a40  0x76218a1d 0x661d9422 0x6b239621 0x75219222
0xffb69a50  0x7b1f9023 0x7a1f8e1f 0x6e478b63 0x7679857d
0xffb69a60  0x7a878588 0x7b878586 0x79888587 0x7a888686
0xffb69a70  0x7d868685 0x7f878484 0x7e848381 0x7b868283
0xffb69a80  0x901f8320 0x82248024 0x7c237f2a 0x7e268424
0xffb69a90  0x75268623 0x7e268028 0x85287e24 0x7c258227
0xffb69aa0  0x8e278427 0x962b7d2e 0x7d548270 0x7c848187
0xffb69ab0  0x87657d5d 0x827b8089 0x7c8f8570 0x88448941
0xffb69ac0  0x893d833e 0x8d468537 0x893e8639 0x813d8640
0xffb69ad0  0x873b8342 0x8a418045 0x863e8444 0x8e478445
0xffb69ae0  0x8c438442 0x89428742 0x8541863c 0x843d8745
0xffb69af0  0x8b3d893f 0x903f8543 0x953c8643 0x9344843a
0xffb69b00  0x893c843f 0x8a408943 0x89448644 0x89418447
0xffb69b10  0x8c418746 0x8b448741 0x8d448645 0x92438647
0xffb69b20  0x964c8548 0x9a4a844a 0xa24c844b 0xa24a804c
0xffb69b30  0xa04b7d4c 0x9d4b824b 0x9b4a854a 0x9f49844d
0xffb69b40  0x9d4e814b 0x9a4a7f4c 0xa44a814a 0xab487f43
0xffb69b50  0xa5477e42 0x9d42824b 0xa3458342 0xa1438141
0xffb69b60  0xa1437f44 0xa1447d40 0x9c3d7f47 0xa0428345
0xffb69b70  0xa5448648 0xa7488643 0xa045844a 0x944d894f
0xffb69b80  0x97558758 0x9c508156 0x9e4c844b 0x9e4c8642
0xffb69b90  0x9c3d8043 0x9c42843f 0xa142863b 0x9e40833b
0xffb69ba0  0x9c398439 0x9c3b8138 0x97358243 0x9333863a
0xffb69bb0  0x8e3b8239 0x9240813f 0x9438873f 0x8e388540
0xffb69bc0  0x8c418046 0x8d48804b 0x894c834e 0x8b4d844e
0xffb69bd0  0x8b4d7e4a 0x88517e4b 0x8b508050 0x884e8455
0xffb69be0  0x89508850 0x8d52824d 0x8a4a7d47 0x893e7e3d
0xffb69bf0  0x8b367f36 0x86328134 0x882f8232 0x8a318230
0xffb69c00  0x88308133 0x8c328131 0x98378331 0x922c832e
0xffb69c10  0x87328432 0x89328333 0x93368033 0x92307d30
0xffb69c20  0x8d367e34 0x8832822d 0x8d398433 0x8a2f8331
0xffb69c30  0x88328431 0x8d308333 0x8d30822f 0x88327f35
0xffb69c40  0x8a317f33 0x8a318338 0x8541814a 0x7c587f67
0xffb69c50  0x7d61825e 0x7d538247 0x7f3e7f2f 0x84277e20
0xffb69c60  0x7e197b17 0x7c167f17 0x85188017 0x8a178113
0xffb69c70  0x87158117 0x8c168014 0x94198218 0x8a15841b
0xffb69c80  0x7f13811b 0x821f801b 0x841d8117 0x85148013
0xffb69c90  0x820d7f10 0x7f118612 0x74348553 0x75668476
0xffb69ca0  0x7a7c857d 0x7b7d847a 0x7e7f8078 0x807d8078
0xffb69cb0  0x7c788073 0x7c61834d 0x8d328323 0x961d8519
0xffb69cc0  0x841e8c1f 0x6e22911e 0x67219221 0x77218f25
0xffb69cd0  0x7e1e911e 0x7a219223 0x6d468c63 0x73748582
0xffb69ce0  0x7a86858a 0x7f868686 0x7e898685 0x7a848686
0xffb69cf0  0x7e888586 0x82848484 0x81848484 0x7d848283
0xffb69d00  0x8e197c23 0x81227e29 0x7d228326 0x83268829
0xffb69d10  0x7c238926 0x7926832a 0x7f277d26 0x79267f26
0xffb69d20  0x88248223 0x9329812f 0x7f518373 0x7d858088
0xffb69d30  0x85647b5d 0x8078818b 0x7d8d8569 0x8a4c8547
0xffb69d40  0x873d843d 0x893e883e 0x8b3e883a 0x87428441
0xffb69d50  0x893b813d 0x8e40803f 0x8a41843d 0x87458545
0xffb69d60  0x85437e43 0x88437f3a 0x8849803d 0x86428341
0xffb69d70  0x87398a40 0x8d438840 0x8c408940 0x8c40813d
0xffb69d80  0x89417d3f 0x88398841 0x88418844 0x88488840
0xffb69d90  0x8a478c42 0x89468749 0x8e448546 0x964b8447
0xffb69da0  0x9c498045 0x9a4b854a 0x9e4b854f 0xa248814d
0xffb69db0  0xa04c814c 0x9f4b804b 0x9d4b7e4d 0x9d488247
0xffb69dc0  0x9d4a854e 0x9a4c824a 0xa0438249 0xa64a7e3e
0xffb69dd0  0xa2467d44 0xa2438244 0xa4438745 0xa0448344
0xffb69de0  0x9f437c45 0xa0487c3c 0x9d438143 0x9d418447
0xffb69df0  0x974d844f 0x9553855a 0x93588760 0x8c68866a
0xffb69e00  0x896b836f 0x8c6e7e6c 0x8d68816a 0x8f5f8862
0xffb69e10  0x965c8250 0x984b8549 0x99448740 0x9440873f
0xffb69e20  0x913e8536 0x983f7f3b 0x9b38833b 0x973b853c
0xffb69e30  0x923e823d 0x953f833f 0x933e883b 0x903f8440
0xffb69e40  0x8f428148 0x904a844b 0x9047834b 0x8d4b8149
0xffb69e50  0x894c7f48 0x8c4e7f4e 0x8f4f7d50 0x8b4e844c
0xffb69e60  0x874e8a4d 0x894e814e 0x8a4c7c47 0x873e7f3b
0xffb69e70  0x883b7e32 0x83348232 0x852e8431 0x8934822f
0xffb69e80  0x88337e35 0x8c31802c 0x9333852f 0x90318333
0xffb69e90  0x8a338133 0x8c348334 0x91347e33 0x8f377b2f
0xffb69ea0  0x8f357b34 0x8d2e8430 0x8d358636 0x8c2f8234
0xffb69eb0  0x8b2f8432 0x8e308334 0x8e32812d 0x8a347d32
0xffb69ec0  0x88367c32 0x86327f35 0x81487e53 0x7a5f7f6d
0xffb69ed0  0x786d835b 0x7553844b 0x7d3b832f 0x82278122
0xffb69ee0  0x801a7918 0x7d187f17 0x83137f1a 0x86158010
0xffb69ef0  0x81138314 0x82198219 0x8e158319 0x83178416
0xffb69f00  0x7b1b7e1d 0x7f1c7a22 0x82198019 0x85117e14
0xffb69f10  0x83147e0d 0x8311870d 0x782d8354 0x78658173
0xffb69f20  0x7b77847c 0x7c7a8380 0x7f7c7f79 0x7f7a7f79
0xffb69f30  0x7c7b7f73 0x7b618354 0x88368122 0x881c8319
0xffb69f40  0x74208b21 0x69218e1f 0x6a238d24 0x731e8c23
0xffb69f50  0x7c20921e 0x7f219320 0x6d3f8c61 0x74758480
0xffb69f60  0x7b858587 0x7e878485 0x7d868685 0x7b848786
0xffb69f70  0x7b868484 0x7b868482 0x7b848484 0x7d868281
0xffb69f80  0x8c1c7e20 0x84237d25 0x8224812a 0x8b278524
0xffb69f90  0x85268726 0x77218724 0x78228028 0x79247e26
0xffb69fa0  0x84267c27 0x942c7b35 0x83578076 0x7d887f84
0xffb69fb0  0x85607d60 0x7f7c828a 0x7c8c8568 0x8a47893d
0xffb69fc0  0x853e863e 0x853e883f 0x8d3e893e 0x8b3f883c
0xffb69fd0  0x893d853c 0x92408342 0x8e3e853e 0x7f438740
0xffb69fe0  0x7b408541 0x8748843c 0x8b44823e 0x89448441
0xffb69ff0  0x863a8841 0x8b40883f 0x833e893b 0x84448541
0xffb6a000  0x863c8040 0x87418540 0x88448642 0x8a3f8848
0xffb6a010  0x89488b41 0x89458649 0x8f4a8442 0x9b4c8248
0xffb6a020  0xa2498147 0x9c45854d 0x9c478349 0xa24d824c
0xffb6a030  0xa249824c 0xa24a814b 0x9f4b814a 0x9f4c7f49
0xffb6a040  0x9e4b834b 0x9c4b8448 0x9d468049 0x9f477d43
0xffb6a050  0xa1467f45 0xa7478345 0xa7458341 0xa1477e3e
0xffb6a060  0x9d467f44 0x9f447e44 0xa0498149 0x984e825a
0xffb6a070  0x8c618168 0x8b6e816d 0x8c778176 0x87778379
0xffb6a080  0x837a807d 0x857e7e7c 0x867b8278 0x87788373
0xffb6a090  0x8f71816d 0x93668263 0x925a8456 0x8c478548
0xffb6a0a0  0x883d8441 0x963c823f 0xa03c823c 0x9a3b8239
0xffb6a0b0  0x993c7f3a 0x9a40823c 0x953b8640 0x933a8440
0xffb6a0c0  0x93428444 0x96458547 0x974b824b 0x9046804b
0xffb6a0d0  0x874a8148 0x914e844e 0x9450844a 0x8e4e874f
0xffb6a0e0  0x8648874d 0x854b7e47 0x8a477f45 0x883d8237
0xffb6a0f0  0x8437822f 0x80328532 0x842e8432 0x89328233
0xffb6a100  0x892a8234 0x8d328032 0x90338334 0x8e338337
0xffb6a110  0x8c328133 0x90348134 0x8f2f8033 0x8c318133
0xffb6a120  0x90357f35 0x92348434 0x8d35852f 0x8d328335
0xffb6a130  0x90328336 0x93328133 0x93348230 0x8d327f33
0xffb6a140  0x86317f33 0x82328233 0x7d478150 0x7c54825d
0xffb6a150  0x76608557 0x72528346 0x7e38832f 0x82278421
0xffb6a160  0x801c8117 0x7f178016 0x82157e14 0x7f167e13
0xffb6a170  0x7c188113 0x7c157f1b 0x8a18811d 0x7e137f17
0xffb6a180  0x76167d22 0x7f197c1e 0x811b7f1a 0x86138011
0xffb6a190  0x89138209 0x8e138412 0x7d2c8253 0x7b678372
0xffb6a1a0  0x7c7a8577 0x7d7c847b 0x8079817d 0x7f7a807a
0xffb6a1b0  0x7c7a8171 0x7b638253 0x84338020 0x791c8519
0xffb6a1c0  0x611b9021 0x641f9322 0x6f26911f 0x70228f23
0xffb6a1d0  0x791d9325 0x861e9121 0x6f3d895f 0x73738580
0xffb6a1e0  0x7c868588 0x7e868286 0x7d878586 0x7c858684
0xffb6a1f0  0x79838485 0x74828486 0x76838482 0x7c818286
0xffb6a200  0x8b207d21 0x86267b25 0x85237e28 0x85278026
0xffb6a210  0x7f268423 0x78268a26 0x79248228 0x78267c28
0xffb6a220  0x8820752a 0x90267535 0x80557c75 0x7e887e83
0xffb6a230  0x855d8064 0x8079838c 0x7e8b8565 0x8d458b46
0xffb6a240  0x873f883f 0x893f8737 0x8a458a3d 0x863b8c40
0xffb6a250  0x8642883d 0x8b40873d 0x8c41863f 0x8442873f
0xffb6a260  0x803e8941 0x8241883c 0x83438542 0x8440843e
0xffb6a270  0x853d8541 0x86428643 0x83408940 0x873d893e
0xffb6a280  0x8742833e 0x85428142 0x83448443 0x86458942
0xffb6a290  0x8a43884a 0x8d458442 0x914a824a 0x974b7f47
0xffb6a2a0  0x9a4b834b 0x994b844b 0x9c4b8047 0x9e4f834a
0xffb6a2b0  0x9f48824e 0xa14b8248 0x9e49834b 0x9f4d7d49
0xffb6a2c0  0xa44a814b 0xa24a824a 0x9e487f4a 0xa0407d4a
0xffb6a2d0  0xa2428142 0xa3448244 0xa4418049 0xa5447c46
0xffb6a2e0  0x9f477f40 0x9a4c7f4f 0x91507f5f 0x8b66816c
0xffb6a2f0  0x87738177 0x85807e7d 0x86837e84 0x82848189
0xffb6a300  0x808b7f8a 0x818e7f88 0x81898387 0x84868284
0xffb6a310  0x87828179 0x87788177 0x866e816b 0x8966835a
0xffb6a320  0x8d53804a 0x96418243 0x9d3d813c 0x9b3e7d3e
0xffb6a330  0x9b427b3d 0x9b36803d 0x973b8341 0x9638833f
0xffb6a340  0x96418743 0x97468546 0x974c804a 0x8f457f4d
0xffb6a350  0x8a4a8149 0x8c4a864a 0x8a47894b 0x8a4c894b
0xffb6a360  0x8a4c8346 0x864a7c45 0x8944803d 0x893c853d
0xffb6a370  0x86318632 0x86328832 0x87328231 0x8b2e8332
0xffb6a380  0x8e2e8435 0x91328032 0x8e368232 0x88358232
0xffb6a390  0x87388134 0x8c348034 0x8d36822f 0x89308536
0xffb6a3a0  0x8c368235 0x91338333 0x8d348237 0x89308234
0xffb6a3b0  0x8c338133 0x93347d36 0x922f8136 0x8b318238
0xffb6a3c0  0x86348232 0x87358436 0x833a814e 0x7d548450
0xffb6a3d0  0x765a8750 0x754e823e 0x7c36812d 0x83258626
0xffb6a3e0  0x851a8716 0x82198011 0x80177c12 0x7e177c13
0xffb6a3f0  0x7f167c13 0x83197c12 0x871c7b16 0x7d18791d
0xffb6a400  0x771c791d 0x7d1c7b1c 0x80177b17 0x84178011
0xffb6a410  0x850a8510 0x8c0f7f13 0x7d2a7f4d 0x7865856c
0xffb6a420  0x7976857b 0x7c7b847a 0x8079827c 0x7d7c8278
0xffb6a430  0x787a8273 0x7b658051 0x87397c25 0x851b841a
0xffb6a440  0x701c9122 0x6a1f9721 0x6f209425 0x6d23911d
0xffb6a450  0x7620951f 0x7f208d20 0x70388861 0x7371867b
0xffb6a460  0x7b858384 0x7f887f87 0x7d848484 0x7a868585
0xffb6a470  0x78848385 0x76838485 0x79818484 0x7c7f8382
0xffb6a480  0x8f1b7d21 0x8b247c26 0x8b267f26 0x83258224
0xffb6a490  0x7b248627 0x7b218729 0x7d21832a 0x7b218125
0xffb6a4a0  0x8a277c28 0x8b277635 0x7d5a7e78 0x7f8a7f7d
0xffb6a4b0  0x875c7f61 0x81818389 0x80898662 0x91468a43
0xffb6a4c0  0x8b378545 0x8d3e873e 0x883f8c3b 0x833f8c3d
0xffb6a4d0  0x8540893b 0x87438640 0x893d883e 0x8b418a41
0xffb6a4e0  0x85398a45 0x7e3e883e 0x7c43863f 0x8044843c
0xffb6a4f0  0x84428541 0x813f873f 0x84488744 0x8d43883b
0xffb6a500  0x8a3f8642 0x84428640 0x80428546 0x84448944
0xffb6a510  0x8b488a3c 0x92498645 0x9347824b 0x94497f4b
0xffb6a520  0x944b7f4a 0x9649804b 0x9c49814a 0x9b4c864a
0xffb6a530  0x9d4d8347 0x9f49824e 0x9e4b844a 0xa0487f4c
0xffb6a540  0xa74d804a 0xa648844a 0xa0458048 0xa24c7e48
0xffb6a550  0xa2488444 0xa0468342 0xa2437e41 0xa8467d47
0xffb6a560  0xa145824a 0x9555855d 0x8968806e 0x86787e81
0xffb6a570  0x85818086 0x8188808f 0x808f8093 0x80908096
0xffb6a580  0x7f958094 0x7f948195 0x7f948196 0x81938192
0xffb6a590  0x81908288 0x83888283 0x827b827b 0x8675816e
0xffb6a5a0  0x8c69845f 0x9555854f 0x9b46823e 0x9a3e8241
0xffb6a5b0  0x9b3b843e 0x9c3b813a 0x9b3c813e 0x9a3d8244
0xffb6a5c0  0x9a3c8643 0x98418444 0x98448245 0x8e458041
0xffb6a5d0  0x8c47824a 0x89488649 0x80498548 0x884a844c
0xffb6a5e0  0x8e4b8344 0x89468038 0x8943843e 0x8a398234
0xffb6a5f0  0x8b398233 0x8f308630 0x8d318331 0x8e31822d
0xffb6a600  0x9430832f 0x9737822e 0x902f8133 0x84318135
0xffb6a610  0x83368236 0x8a318432 0x8f33852d 0x8b338531
0xffb6a620  0x8a348133 0x8f348134 0x8c328236 0x84328337
0xffb6a630  0x89358231 0x93358135 0x9236832e 0x8a348333
0xffb6a640  0x86328535 0x8d368335 0x8b328548 0x7e4c884d
0xffb6a650  0x7a4e8549 0x793f8238 0x79318233 0x84268421
0xffb6a660  0x8f1c8618 0x84168314 0x7e147e13 0x7e1b7f13
0xffb6a670  0x83148017 0x8c167b19 0x84147c17 0x78157f1b
0xffb6a680  0x76167c1d 0x7b207b18 0x801c7e18 0x83177f0f
0xffb6a690  0x84117f0d 0x8a128411 0x7e2b8252 0x77628270
0xffb6a6a0  0x7877837c 0x7d7b837a 0x807e837a 0x7b778279
0xffb6a6b0  0x74778174 0x7c668052 0x8a387e25 0x9019871b
0xffb6a6c0  0x7c1e931d 0x761e9329 0x731b9222 0x6d21931d
0xffb6a6d0  0x77209221 0x7a1f8d1d 0x7239895d 0x7370857e
0xffb6a6e0  0x79838584 0x7f878486 0x7d878584 0x79848385
0xffb6a6f0  0x77848284 0x79848283 0x7c828483 0x7b818382
0xffb6a700  0x8f1d7b20 0x862a7c23 0x82267f25 0x7e258325
0xffb6a710  0x7a268724 0x7a268224 0x79248226 0x79268527
0xffb6a720  0x8a268128 0x8d297838 0x7c5c7f74 0x7c87817e
0xffb6a730  0x86547e68 0x807a828d 0x7c85865f 0x8d458745
0xffb6a740  0x8a3f823e 0x8c3f863f 0x89378c42 0x873e8b42
0xffb6a750  0x843e8841 0x86408742 0x893f8a3d 0x883f8d40
0xffb6a760  0x82408a3d 0x7f40853f 0x7e41853e 0x7f3f853f
0xffb6a770  0x873e863e 0x8744863d 0x8a478446 0x8e3c8746
0xffb6a780  0x873e8b42 0x83408a42 0x84458743 0x84488840
0xffb6a790  0x87448c43 0x8e438843 0x92488248 0x994d7f47
0xffb6a7a0  0x9a4b7b4d 0x9d487b49 0x9d4a834a 0x9c478748
0xffb6a7b0  0x9d4d834a 0x9e4b8148 0x9e4c854d 0x9e48814a
0xffb6a7c0  0xa34d7f45 0xa14a844b 0xa045804c 0xa44a7e45
0xffb6a7d0  0xa03c8749 0x9e408245 0xa2457b42 0xa0477e4a
0xffb6a7e0  0x934e825e 0x8965866e 0x8379807e 0x80867c89
0xffb6a7f0  0x808d8093 0x80948195 0x80988195 0x80978096
0xffb6a800  0x7f988091 0x7f958295 0x7f998196 0x7f97819a
0xffb6a810  0x80958197 0x80938292 0x818c8289 0x8583807e
0xffb6a820  0x87778471 0x8c6c8661 0x9658804d 0x983f873c
0xffb6a830  0x9b3b8a40 0x993f823b 0x9a3b7d3c 0x9a3e803a
0xffb6a840  0x9a41833d 0x9b428340 0x97448245 0x8b438247
0xffb6a850  0x8445824a 0x84448546 0x884b7f46 0x8e477d48
0xffb6a860  0x8c498145 0x814a843b 0x873f863a 0x8e3d7d36
0xffb6a870  0x8d387f2c 0x8c308231 0x8a2e822f 0x8d368030
0xffb6a880  0x932e8230 0x91318335 0x8e2f7f32 0x89337e35
0xffb6a890  0x85318435 0x89308733 0x8f2e8731 0x90338433
0xffb6a8a0  0x8f337f33 0x8f307e35 0x8b368035 0x86348235
0xffb6a8b0  0x87338234 0x8a35852a 0x8c3b8533 0x8e33842f
0xffb6a8c0  0x8b338732 0x88388436 0x81318837 0x7d3c8c40
0xffb6a8d0  0x7d3d8235 0x7b368134 0x7d33832d 0x852b8120
0xffb6a8e0  0x8a1c8317 0x85148617 0x82177e14 0x7f148113
0xffb6a8f0  0x8216830e 0x89187919 0x86197c13 0x7816831d
0xffb6a900  0x741d7f19 0x7c1c7b1a 0x811c8016 0x831b7d15
0xffb6a910  0x8313780f 0x88128804 0x7c2b834e 0x76647e6c
0xffb6a920  0x78768079 0x7d7a827a 0x7f798377 0x7c7b8279
0xffb6a930  0x78788074 0x7f637f55 0x8c388023 0x8b1d891d
0xffb6a940  0x751e931e 0x731d8e25 0x6f228f1f 0x6620941e
0xffb6a950  0x76208e1f 0x7a218c1b 0x7632895c 0x796c8479
0xffb6a960  0x78848886 0x78858884 0x7c858584 0x7b868185
0xffb6a970  0x79847f84 0x7c838083 0x7d7f8382 0x7b82837e
0xffb6a980  0x901d8120 0x81237f24 0x7c248226 0x7b278323
0xffb6a990  0x7a268424 0x7a268427 0x78268123 0x79268127
0xffb6a9a0  0x8b297e2a 0x90287839 0x7b647f79 0x7b887f7f
0xffb6a9b0  0x855b7e69 0x7f84828b 0x7885865c 0x87438a41
0xffb6a9c0  0x893e833c 0x8c3e833f 0x8e3b8942 0x8d448b3e
0xffb6a9d0  0x85428943 0x883e8641 0x8b418b3a 0x883f8a3e
0xffb6a9e0  0x823f863c 0x8143843b 0x7f3f873f 0x7f3d8741
0xffb6a9f0  0x8b41883f 0x8f438840 0x90438441 0x91478544
0xffb6aa00  0x8841883e 0x844a893d 0x8a478646 0x87418742
0xffb6aa10  0x85448943 0x8a438842 0x924b8147 0x9e497d4b
0xffb6aa20  0xa04b7f4b 0xa149834e 0x9f478748 0x9e4a8749
0xffb6aa30  0x9d4b8145 0x9d4d8349 0x9f4b874a 0x9e49844a
0xffb6aa40  0x9d4c824b 0x9c478548 0xa14b844b 0xa6478047
0xffb6aa50  0xa2418445 0x9c448345 0xa1478043 0x994d805a
0xffb6aa60  0x8a62826c 0x8374827e 0x81848089 0x7f8f7f91
0xffb6aa70  0x7e948195 0x7f958194 0x81988196 0x80938094
0xffb6aa80  0x80958096 0x80968297 0x7f948197 0x7e978198
0xffb6aa90  0x7f9a8196 0x80988296 0x81998191 0x8190828b
0xffb6aaa0  0x8785827e 0x887c8070 0x8e697f5d 0x9750874a
0xffb6aab0  0x9d438a39 0x963a813d 0x993a7e40 0x9c3c813e
0xffb6aac0  0x99398542 0x9e3e823b 0x983f823f 0x893d8441
0xffb6aad0  0x7e438546 0x80478645 0x8f478444 0x94448147
0xffb6aae0  0x8a498142 0x7d408447 0x883b8340 0x91397e36
0xffb6aaf0  0x8e328133 0x892f8331 0x8a30812f 0x8d367f2b
0xffb6ab00  0x91328230 0x8c2b8430 0x8c308132 0x8e327f34
0xffb6ab10  0x8835832f 0x8937842f 0x91368232 0x9733822e
0xffb6ab20  0x942e8033 0x8f347f2e 0x8b378133 0x892f823d
0xffb6ab30  0x86308431 0x82338533 0x8934832e 0x93378335
0xffb6ab40  0x92338535 0x84358530 0x7a37852f 0x7d2e8731
0xffb6ab50  0x812e822e 0x7c318235 0x8036852e 0x842a8422
0xffb6ab60  0x861c8418 0x8b138314 0x85178213 0x7e118314
0xffb6ab70  0x8214820d 0x881a7d15 0x88188115 0x791a851a
0xffb6ab80  0x7417821d 0x7b1b831e 0x7f1e851f 0x82177e16
0xffb6ab90  0x820f7910 0x8c118316 0x7d25804c 0x7360816e
0xffb6aba0  0x7878837a 0x7c7b8278 0x7e7a8178 0x7e768077
0xffb6abb0  0x7d787f72 0x82628152 0x8c3d8322 0x871d8917
0xffb6abc0  0x6f19911f 0x71218e21 0x6c218e21 0x6221941d
0xffb6abd0  0x76209020 0x7c208b19 0x7a378b5a 0x7f6e867f
0xffb6abe0  0x78838684 0x74858584 0x7a878485 0x7b858384
0xffb6abf0  0x7b848184 0x7e848283 0x7c828484 0x7c818582
0xffb6ac00  0x881c8424 0x7d248126 0x7d238427 0x7d278220
0xffb6ac10  0x7e2b8223 0x7c268326 0x7b267d27 0x7b267a24
0xffb6ac20  0x8a267a27 0x92297839 0x81617e7c 0x7f877f78
0xffb6ac30  0x845a7d6e 0x7c82828e 0x7b848758 0x8c478b3f
0xffb6ac40  0x8943833d 0x8942803c 0x853f873d 0x83418b44
0xffb6ac50  0x83408743 0x87408545 0x893b8b3b 0x88438740
0xffb6ac60  0x873d8139 0x873e813e 0x843c883b 0x843e8943
0xffb6ac70  0x8b3b8841 0x8e3a8645 0x8e428342 0x8f408147
0xffb6ac80  0x8a42853d 0x8a438741 0x8b438744 0x86448544
0xffb6ac90  0x87428543 0x8b408740 0x944b8141 0xa24c7c48
0xffb6aca0  0xa547834b 0x9f4b894a 0x9c488949 0x9f4c844d
0xffb6acb0  0xa0477f4b 0x9f4a8448 0x9e4b8a48 0x9a4c874a
0xffb6acc0  0x9c4a844a 0x9e4a844a 0x9e4a8749 0xa4478343
0xffb6acd0  0xa7447f47 0x9f418347 0x98488352 0x8f5d8269
0xffb6ace0  0x886f8177 0x83818087 0x818d808f 0x7f918190
0xffb6acf0  0x7e948094 0x7f928194 0x80928094 0x80938093
0xffb6ad00  0x81958094 0x80958195 0x7f958297 0x7f988199
0xffb6ad10  0x7f988293 0x7f968297 0x80988197 0x80958192
0xffb6ad20  0x8194808f 0x84867d81 0x867c7e70 0x91658558
0xffb6ad30  0x9c4b883f 0x9b3d813f 0x9d3b7d39 0x9b3b8237
0xffb6ad40  0x9a3e853b 0x9f40813d 0x9a3c803e 0x8b38853c
0xffb6ad50  0x853c8741 0x8545863d 0x8a43893e 0x8f458542
0xffb6ad60  0x8b4a8042 0x82448440 0x8b418141 0x8e377e36
0xffb6ad70  0x88328333 0x8d32822e 0x902d8030 0x8d307f32
0xffb6ad80  0x902f832c 0x8d2f842e 0x8b2f8331 0x8d2f8130
0xffb6ad90  0x8832822e 0x8b308031 0x92337c32 0x90328031
0xffb6ada0  0x8c32812f 0x8c387f31 0x8a347f33 0x89338032
0xffb6adb0  0x892e8430 0x86328532 0x8b348235 0x8f328130
0xffb6adc0  0x8a358337 0x83388533 0x81388435 0x852e812d
0xffb6add0  0x7e2e832b 0x7a2f8432 0x8133872f 0x842c8723
0xffb6ade0  0x8020821a 0x84187e19 0x85118617 0x80138412
0xffb6adf0  0x82147f16 0x851a7e17 0x8912841a 0x801c851b
0xffb6ae00  0x721c8517 0x72178c1c 0x7b1f8a18 0x7f197e1a
0xffb6ae10  0x7d0f790f 0x890f7d14 0x80267c4c 0x785f8368
0xffb6ae20  0x7a768577 0x7c7b8276 0x7c7a7f77 0x7d777f73
0xffb6ae30  0x7b767f74 0x7f658453 0x893b852a 0x8317881c
0xffb6ae40  0x711b8e23 0x73218d21 0x70258b20 0x6620921d
0xffb6ae50  0x711f911b 0x7f23891d 0x7d2e8c5a 0x7a658779
0xffb6ae60  0x76848484 0x77848284 0x7c848386 0x7b838486
0xffb6ae70  0x7b858280 0x7c838482 0x7b828484 0x7a7f8580
0xffb6ae80  0x831d8221 0x7d247f28 0x80288226 0x7f228325
0xffb6ae90  0x832a8124 0x83288123 0x7f277f23 0x7b287a23
0xffb6aea0  0x88277a2a 0x932a7a42 0x85667e7c 0x84897f75
0xffb6aeb0  0x815d7d6e 0x7a858190 0x7e838856 0x943f8b44
0xffb6aec0  0x8a3b863c 0x853c843d 0x7e40843b 0x7c40884b
0xffb6aed0  0x81468844 0x853f873e 0x893f893c 0x883b8743
0xffb6aee0  0x8a3a8347 0x8938853f 0x8b3c8a3e 0x883d8b38
0xffb6aef0  0x8c3b8945 0x8f3f853b 0x8c488640 0x8a42863b
0xffb6af00  0x8c468641 0x9146853f 0x8d458842 0x873a8a47
0xffb6af10  0x88408643 0x903c8546 0x98438146 0xa74d7f47
0xffb6af20  0xaa4a8148 0x9f4c854a 0x9a4c883f 0xa04e8449
0xffb6af30  0xa34b8245 0xa14b844a 0x9f4b8546 0x9b48834b
0xffb6af40  0x9c4a8249 0xa04a8348 0x9d478248 0xa346814a
0xffb6af50  0xac3f7f49 0xa244824c 0x9052845e 0x8b6e8375
0xffb6af60  0x89808481 0x8188838b 0x818b808d 0x808d818b
0xffb6af70  0x7e90808d 0x7f908092 0x7f928090 0x80938096
0xffb6af80  0x82958194 0x81958196 0x7f968196 0x80988194
0xffb6af90  0x7f988196 0x7e978299 0x7f978195 0x7f958194
0xffb6afa0  0x7f968196 0x7f91808b 0x83867f7d 0x8c738168
0xffb6afb0  0x9a5e8550 0xa243823f 0xa13f8139 0x9b3b8438
0xffb6afc0  0x9c3f8237 0xa23d803d 0x9b3a8034 0x8e3a8139
0xffb6afd0  0x8e3c853f 0x8a408642 0x863c8943 0x8a448642
0xffb6afe0  0x8b448340 0x8a44853e 0x8f408042 0x8c377f37
0xffb6aff0  0x84338431 0x91348531 0x962f8330 0x8d2d8330
0xffb6b000  0x8f30852c 0x8f2f832f 0x8d2c8231 0x8c2c8130
0xffb6b010  0x862c822e 0x8a36822f 0x91337d2d 0x8b337f2f
0xffb6b020  0x86308233 0x89357f32 0x8a318134 0x89308133
0xffb6b030  0x8e358231 0x8b2d8333 0x8f328132 0x8e338330
0xffb6b040  0x84358434 0x833b8431 0x8b3c8334 0x8b2b822c
0xffb6b050  0x7f2b8027 0x7b348133 0x8335832f 0x862d8420
0xffb6b060  0x7d208117 0x7c1a7e1c 0x85168414 0x80148412
0xffb6b070  0x82148014 0x83177e15 0x8a1a831b 0x89198519
0xffb6b080  0x72198818 0x6a1a8c1a 0x781c8618 0x7b137e13
0xffb6b090  0x77117c10 0x8714820d 0x8226824c 0x7e5c836e
0xffb6b0a0  0x7f748478 0x7a778373 0x77768178 0x7b768076
0xffb6b0b0  0x79748070 0x7d668551 0x85398526 0x831a851c
0xffb6b0c0  0x761b8d23 0x76209021 0x73239021 0x6c1c9323
0xffb6b0d0  0x701c931f 0x82208f1f 0x80338e5b 0x766b8778
0xffb6b0e0  0x75838787 0x79848587 0x7f868285 0x7d838286
0xffb6b0f0  0x7c808382 0x7c808584 0x7b838480 0x79818480
0xffb6b100  0x831d7e20 0x81297e27 0x81247e26 0x7f248226
0xffb6b110  0x7d258027 0x7c277f24 0x7b238126 0x7d297a26
0xffb6b120  0x8d237829 0x91267a3d 0x81697f7b 0x81887f75
0xffb6b130  0x845a7c73 0x7c848190 0x7c7e8a54 0x91468a43
0xffb6b140  0x8a3d883c 0x833e863e 0x833e833f 0x80438446
0xffb6b150  0x80468747 0x8441893c 0x8643893d 0x863f893b
0xffb6b160  0x8840853e 0x893e883a 0x8a418c3c 0x883d8b3f
0xffb6b170  0x8c3a8943 0x8e3d8343 0x8b3e873f 0x8a3d8b47
0xffb6b180  0x87438540 0x8a448144 0x8940883e 0x84408c41
0xffb6b190  0x8a42863f 0x8e438144 0x91428042 0x9b4a8240
0xffb6b1a0  0x9f4b7f4e 0x9d4b804a 0x9e48864d 0xa1488248
0xffb6b1b0  0xa0488643 0x9f4e8448 0xa0487f4e 0x9e4a7f48
0xffb6b1c0  0x9d4a814b 0x9c4b8247 0x9b487f49 0xa3497e42
0xffb6b1d0  0xa6417e47 0x984b8252 0x89608271 0x8476827a
0xffb6b1e0  0x81868784 0x7f8a8488 0x828a8288 0x8288828a
0xffb6b1f0  0x808a818e 0x8090808e 0x7f8f8093 0x7f938092
0xffb6b200  0x81958197 0x80968197 0x7f998197 0x7f978099
0xffb6b210  0x7f978097 0x7f948298 0x7f998296 0x7f978195
0xffb6b220  0x7f968195 0x7f968193 0x7f907f8a 0x86827e78
0xffb6b230  0x8d6d8162 0x95548249 0x9b3e843e 0x9b39853c
0xffb6b240  0x9b3d803d 0x9d397e3a 0x993b8039 0x91397e37
0xffb6b250  0x913c833a 0x9142863d 0x8e418839 0x8d448641
0xffb6b260  0x8b3f8642 0x893e8541 0x893e803d 0x8a407e34
0xffb6b270  0x87368533 0x8e2f8633 0x92308330 0x8d2f862e
0xffb6b280  0x8f2e862f 0x9131802e 0x8c2f802e 0x8e2f802d
0xffb6b290  0x8c2d8232 0x88308334 0x8e2f7e31 0x8f307d2e
0xffb6b2a0  0x8d328033 0x8d377d35 0x8b33802e 0x8b308133
0xffb6b2b0  0x8f328130 0x8c328132 0x8d307f31 0x8c338331
0xffb6b2c0  0x89348532 0x8a3a8333 0x8f378131 0x8a2c812d
0xffb6b2d0  0x7e2d7d2d 0x79327d33 0x81357f30 0x862f7e1f
0xffb6b2e0  0x82227f19 0x7f1e7c15 0x80158116 0x8417820f
0xffb6b2f0  0x84157e17 0x85197d12 0x871b8118 0x85198218
0xffb6b300  0x79188918 0x75148b1a 0x7e177f19 0x7b117c13
0xffb6b310  0x79127d0b 0x83118610 0x7e218849 0x795c8469
0xffb6b320  0x7d738477 0x7d778376 0x7b788277 0x7b748175
0xffb6b330  0x78758272 0x7d648752 0x853d8628 0x861b801d
0xffb6b340  0x751f8b1d 0x74209320 0x77209222 0x711d9220
0xffb6b350  0x6f1e941d 0x8120921d 0x7e2b8c56 0x776b8778
0xffb6b360  0x76818884 0x79838886 0x7d878187 0x7d827f84
0xffb6b370  0x7c818380 0x7b818581 0x7b83857e 0x7c818280
0xffb6b380  0x841c8022 0x85298023 0x83267e24 0x82268224
0xffb6b390  0x79248021 0x75267f25 0x78258124 0x80267d26
0xffb6b3a0  0x92257a29 0x8f217d47 0x7d68807c 0x7e897f6f
0xffb6b3b0  0x865d7c76 0x7d898191 0x7b7d884f 0x8f448841
0xffb6b3c0  0x8d3c853f 0x833f863b 0x8740863f 0x85418544
0xffb6b3d0  0x81498744 0x8342873f 0x843b863e 0x873e863e
0xffb6b3e0  0x863d863d 0x8a3c8741 0x8a3d8a39 0x883f8940
0xffb6b3f0  0x8e3c883e 0x8d3b863e 0x8e3f8641 0x8d408644
0xffb6b400  0x83408543 0x823f8543 0x86468a3e 0x8543883e
0xffb6b410  0x8e448343 0x8b3f8146 0x883d8246 0x90498347
0xffb6b420  0x93457f4a 0x9a4f804d 0xa34a834e 0xa2468349
0xffb6b430  0x9e46864a 0x9e48824b 0xa04b8145 0x9f4d8047
0xffb6b440  0x9f4a7e48 0x9a4b8242 0x984b8143 0xa14a7e44
0xffb6b450  0xa2477c47 0x915b7e64 0x866f8175 0x7f818382
0xffb6b460  0x7a8a8687 0x7c858384 0x81858083 0x84848187
0xffb6b470  0x818a818b 0x8090808f 0x7f908093 0x7f908095
0xffb6b480  0x80978095 0x7f968198 0x7f9a8196 0x7f978199
0xffb6b490  0x80978197 0x7f958199 0x7e958196 0x7e958198
0xffb6b4a0  0x7f958195 0x7f948197 0x7f918092 0x82908183
0xffb6b4b0  0x867c826f 0x8b628352 0x974c8742 0x9c3c8438
0xffb6b4c0  0x9a3d7f3a 0x98367f39 0x9737833d 0x93338137
0xffb6b4d0  0x953b813b 0x993c803c 0x973e823f 0x913a833f
0xffb6b4e0  0x8e3c8540 0x893d8542 0x853e8142 0x883e7f39
0xffb6b4f0  0x8c378137 0x8e338036 0x9036802b 0x8f328530
0xffb6b500  0x9032862f 0x9532812d 0x8d2f812e 0x912d802f
0xffb6b510  0x932f812e 0x87308229 0x8a338131 0x92308131
0xffb6b520  0x93348030 0x91328034 0x8e377f2e 0x8c318138
0xffb6b530  0x90308133 0x8c307f2e 0x8c337f35 0x8d2f8430
0xffb6b540  0x8f368635 0x91368234 0x92368033 0x89288029
0xffb6b550  0x7e2b7e2f 0x76327d31 0x7d387f35 0x872d8220
0xffb6b560  0x89218321 0x841b7f1a 0x7f197d15 0x89167e13
0xffb6b570  0x8a118017 0x8a147d17 0x871b811a 0x83178518
0xffb6b580  0x84178718 0x84158417 0x82187e14 0x7c127d14
0xffb6b590  0x7d127e0e 0x81108110 0x7b248447 0x745e836b
0xffb6b5a0  0x7a738377 0x81768278 0x7f738175 0x7b768272
0xffb6b5b0  0x7775836e 0x7e698553 0x883e8424 0x8919871a
0xffb6b5c0  0x741d9019 0x75259120 0x7f209020 0x751f9120
0xffb6b5d0  0x711f951f 0x82209222 0x7d2a8c55 0x786c8777
0xffb6b5e0  0x79818884 0x7a838784 0x7a848483 0x7b848282
0xffb6b5f0  0x7b84837f 0x7b838582 0x7c7f857f 0x7e7f837e
0xffb6b600  0x871f8225 0x81238127 0x7e247e27 0x83267f26
0xffb6b610  0x79267f23 0x76267f25 0x7a267f26 0x80267e25
0xffb6b620  0x8b277b26 0x89297e43 0x7e68817c 0x81867f6e
0xffb6b630  0x85587d73 0x7d878192 0x7e788553 0x93478540
0xffb6b640  0x8c3d8143 0x863b8639 0x853f873e 0x84408646
0xffb6b650  0x84488745 0x85468540 0x8341823b 0x8841813c
0xffb6b660  0x873e853b 0x893e8640 0x8b3c873e 0x863e873e
0xffb6b670  0x873e863e 0x853c8942 0x873e843f 0x8e3f823d
0xffb6b680  0x88418544 0x80428841 0x80418a39 0x81458340
0xffb6b690  0x88407e41 0x87428245 0x85448541 0x8b478344
0xffb6b6a0  0x8c49804a 0x9548804b 0x9b4a804a 0x9a4a8447
0xffb6b6b0  0xa0488546 0xa34d7d4a 0x9f498148 0x9e4d7f4b
0xffb6b6c0  0x9c487b4c 0x9d498047 0x9b47824c 0x9b467f43
0xffb6b6d0  0x984a7a56 0x8a627c6f 0x8176807f 0x7d848583
0xffb6b6e0  0x7f848682 0x8283827f 0x847e7e82 0x84847f83
0xffb6b6f0  0x818a818b 0x8090818e 0x80938092 0x80937f94
0xffb6b700  0x80958097 0x7e988197 0x7e978198 0x7f978197
0xffb6b710  0x7f958199 0x80988098 0x7f998095 0x7e978196
0xffb6b720  0x7f988197 0x7e938195 0x7f958195 0x7e968189
0xffb6b730  0x8089827d 0x86738367 0x9258884d 0x984a8238
0xffb6b740  0x9e407d3a 0x9c3e7f36 0x9a378538 0x963a8237
0xffb6b750  0x953d7f38 0x983e7b3f 0x963f7d3e 0x94407e3f
0xffb6b760  0x903b823f 0x893c8343 0x873e8041 0x8b397e3d
0xffb6b770  0x8f377b37 0x91397b33 0x95317e35 0x8f30822d
0xffb6b780  0x8f30842d 0x9334822b 0x902e842c 0x8f2f8133
0xffb6b790  0x8e2c7e2f 0x8c308032 0x8c318331 0x8d308233
0xffb6b7a0  0x91338030 0x902f8034 0x8a337f38 0x862f8032
0xffb6b7b0  0x8d348132 0x8e337d31 0x91327d32 0x912e8330
0xffb6b7c0  0x8f32842e 0x8b3c7f36 0x88388032 0x852f8029
0xffb6b7d0  0x812e7d2f 0x7b317d38 0x7a357f35 0x7b2c842b
0xffb6b7e0  0x7f258521 0x851e7f1d 0x841d7713 0x84177a13
0xffb6b7f0  0x86118014 0x88167c18 0x801a7f17 0x7a178713
0xffb6b800  0x84158219 0x87197d14 0x83167b15 0x7b117a14
0xffb6b810  0x7d0c7b11 0x85107a0b 0x83218046 0x7a588269
0xffb6b820  0x7a728278 0x7e768176 0x7e768177 0x7c758271
0xffb6b830  0x7a758573 0x7d658258 0x853e8326 0x861e8d16
0xffb6b840  0x721d9320 0x74218e21 0x7c208a1f 0x791f8f20
0xffb6b850  0x731f9220 0x7d1f901d 0x76298d51 0x746b8777
0xffb6b860  0x7a7d8886 0x7c848683 0x7b868680 0x7a848584
0xffb6b870  0x7c848281 0x7a828380 0x7b808580 0x7e7f847e
0xffb6b880  0x8c1d8027 0x80257e23 0x7d237e29 0x85268125
0xffb6b890  0x7c228121 0x7b247f26 0x7f267d22 0x7f267e26
0xffb6b8a0  0x84267e23 0x8129804a 0x806c817c 0x84878065
0xffb6b8b0  0x845b7e78 0x7d86818f 0x8178864c 0x95448541
0xffb6b8c0  0x8c3a8042 0x893d853c 0x853f873b 0x853d8547
0xffb6b8d0  0x87428642 0x8645863f 0x823e843b 0x873c843f
0xffb6b8e0  0x893d863e 0x88388743 0x8b3e873a 0x843d853b
0xffb6b8f0  0x813c873d 0x803c8940 0x813c8442 0x8f3f8541
0xffb6b900  0x8e42873d 0x81448741 0x7a3c8a40 0x7d428645
0xffb6b910  0x82407f42 0x84418044 0x83458449 0x86478447
0xffb6b920  0x86478047 0x904c814f 0x934b8244 0x9548834a
0xffb6b930  0xa34b864a 0xa54b8245 0x9f4a814b 0x9d487f4b
0xffb6b940  0x9a4a7c45 0xa14b7c4e 0xa04c8147 0x964b8448
0xffb6b950  0x90568062 0x836a7f78 0x7d82807f 0x7c828680
0xffb6b960  0x857f867b 0x887b807b 0x867e7f7f 0x85838084
0xffb6b970  0x808a818c 0x80908191 0x80928096 0x808f8095
0xffb6b980  0x80958196 0x7d958299 0x7e968299 0x7f978196
0xffb6b990  0x7f968199 0x809a8198 0x80978199 0x7e978197
0xffb6b9a0  0x7e968197 0x7f938199 0x7e938195 0x7e948094
0xffb6b9b0  0x7d928289 0x847e8177 0x8d69855a 0x964e8344
0xffb6b9c0  0xa23a7e3d 0xa1398032 0x9f38833c 0x9b388136
0xffb6b9d0  0x94387f3b 0x963c7f3e 0x933d7f40 0x96418042
0xffb6b9e0  0x933f823b 0x8a3f8341 0x89407e40 0x8c417f3e
0xffb6b9f0  0x8e3b7d39 0x92397c35 0x9a348035 0x9030832e
0xffb6ba00  0x8e31812d 0x94307e27 0x9433812b 0x8e34832e
0xffb6ba10  0x88298132 0x8e2f822e 0x8f308332 0x89308430
0xffb6ba20  0x8c37832f 0x90328035 0x87308034 0x82318034
0xffb6ba30  0x8b318137 0x9132802b 0x98327b35 0x962f8133
0xffb6ba40  0x8f2c8538 0x8435823a 0x7e358132 0x842b8032
0xffb6ba50  0x862c7e2e 0x8035803b 0x773b8431 0x7332832c
0xffb6ba60  0x7b278223 0x8922801c 0x891d7b13 0x7e157d15
0xffb6ba70  0x81187e17 0x87157e1b 0x7a198313 0x731d8513
0xffb6ba80  0x8615831a 0x8c158116 0x85137d16 0x7e127c0f
0xffb6ba90  0x7e127e10 0x8a0f8315 0x8a1b8248 0x7f5d8364
0xffb6baa0  0x79748375 0x7c778276 0x7c768171 0x7d758278
0xffb6bab0  0x7e738371 0x7c668251 0x84448223 0x861e8c15
0xffb6bac0  0x761f931d 0x74208d20 0x79208b22 0x7d208f21
0xffb6bad0  0x761d9120 0x791d901f 0x72288b55 0x72668579
0xffb6bae0  0x7a808585 0x7f858485 0x7c828483 0x7b848485
0xffb6baf0  0x7b828482 0x7a828580 0x7a808582 0x7e7c847e
0xffb6bb00  0x8b1d7b26 0x80257a25 0x7d257b24 0x81247f24
0xffb6bb10  0x7d248222 0x80277e27 0x80287a26 0x7e257d25
0xffb6bb20  0x8c258126 0x8626804e 0x7f6e817b 0x83858262
0xffb6bb30  0x83608079 0x7c868192 0x82718651 0x92438340
0xffb6bb40  0x8a3f7e40 0x8c3c833a 0x8b3d883a 0x8743853e
0xffb6bb50  0x86428741 0x8545863e 0x883e853e 0x8b3e873b
0xffb6bb60  0x8743873b 0x853c8843 0x8a398341 0x8a3d813d
0xffb6bb70  0x8440873a 0x833e8a40 0x8743843a 0x8a3e8540
0xffb6bb80  0x8b3e8843 0x8a3f8443 0x8243883b 0x803e8841
0xffb6bb90  0x84457e40 0x82447b44 0x82488141 0x82478449
0xffb6bba0  0x84458046 0x8e458247 0x94488346 0x9a4b8248
0xffb6bbb0  0xa2498648 0xa24a864c 0x9d4b8248 0x9d4c8047
0xffb6bbc0  0x9b4b7c4a 0x9a537954 0x9b557f50 0x984d8751
0xffb6bbd0  0x8b5e836b 0x80737f80 0x7e838281 0x81788774
0xffb6bbe0  0x85778677 0x877a7e7a 0x85797f80 0x83818188
0xffb6bbf0  0x808a808b 0x7f938192 0x80938093 0x7f948095
0xffb6bc00  0x7f968193 0x7e968197 0x7f9a8195 0x7f988097
0xffb6bc10  0x7f9a8096 0x80958196 0x7f998195 0x7f968195
0xffb6bc20  0x7f968199 0x7f958095 0x7e938197 0x7f948095
0xffb6bc30  0x7d908195 0x7d8b8282 0x8673826d 0x975a814c
0xffb6bc40  0xa0407f3b 0x9d398036 0x9e37813a 0x9e3b7f39
0xffb6bc50  0x963d7f3c 0x9839823b 0x993e8241 0x9842803f
0xffb6bc60  0x9742823d 0x9041823f 0x91407c3f 0x8f3f7d3e
0xffb6bc70  0x8e3d7e3c 0x913a7d3a 0x93368034 0x8e33832d
0xffb6bc80  0x8e377e2f 0x942e7a30 0x93337d29 0x8f308330
0xffb6bc90  0x8d31822c 0x8c32822d 0x89318330 0x86328631
0xffb6bca0  0x8b328430 0x8e387d31 0x88337f32 0x85357f31
0xffb6bcb0  0x8a30802f 0x90328033 0x94387830 0x8f327c2f
0xffb6bcc0  0x8c30862d 0x8739833a 0x7f388035 0x81328031
0xffb6bcd0  0x832f7f35 0x7b398437 0x77388642 0x7d357f2d
0xffb6bce0  0x7c297e28 0x7d227f1b 0x7e1b7d16 0x7b157d14
0xffb6bcf0  0x7f147a19 0x86187e19 0x7e138519 0x7b197f15
0xffb6bd00  0x85118113 0x84158411 0x82158017 0x82147d11
0xffb6bd10  0x840f810f 0x850f890d 0x801b8446 0x7a548268
0xffb6bd20  0x78708475 0x78778376 0x7a768273 0x7d748173
0xffb6bd30  0x7d738270 0x7e678056 0x833e8027 0x811d8a1a
0xffb6bd40  0x7519901f 0x72218e20 0x76208c23 0x7c1e901b
0xffb6bd50  0x7522901d 0x7a1e8f1c 0x7b278a50 0x77688377
0xffb6bd60  0x7a80827f 0x7d848383 0x7c868183 0x7c818283
0xffb6bd70  0x7b838582 0x7a818682 0x79808481 0x7c7c847e
0xffb6bd80  0x871f8124 0x80227d28 0x7f267c24 0x80247e25
0xffb6bd90  0x81288123 0x86237f2b 0x82237c23 0x7d247f28
0xffb6bda0  0x92287d28 0x8c2c7f4d 0x7e6c827b 0x83848261
0xffb6bdb0  0x825d817c 0x7a88838e 0x8375874a 0x8f408540
0xffb6bdc0  0x85398340 0x903c873d 0x93398841 0x8839873f
0xffb6bdd0  0x853e8846 0x863f863f 0x8f418640 0x933c8839
0xffb6bde0  0x863c8637 0x833e843f 0x893d843c 0x8e3a833d
0xffb6bdf0  0x873f873c 0x8740883e 0x8c41863d 0x88408540
0xffb6be00  0x8a3f8641 0x92418743 0x8c3e8940 0x86448740
0xffb6be10  0x86448041 0x7f3d7e45 0x814b7f48 0x7e4a8244
0xffb6be20  0x81418046 0x8c478245 0x9647834b 0xa045824c
0xffb6be30  0xa24a864a 0xa24b8648 0x9e4a8146 0x9e4a7d4f
0xffb6be40  0x9b517c50 0x945d7b63 0x975c8064 0x985f855d
0xffb6be50  0x89668272 0x7f77827a 0x7f7c847b 0x8772896d
0xffb6be60  0x87718674 0x84768179 0x84798281 0x81848284
0xffb6be70  0x808f818e 0x7f938192 0x7f8f8196 0x7e928192
0xffb6be80  0x7f958199 0x7f958195 0x80998196 0x7f968196
0xffb6be90  0x7e978099 0x7f978197 0x7f968199 0x7f968295
0xffb6bea0  0x80998295 0x7f978193 0x7e958095 0x7f948094
0xffb6beb0  0x7e948191 0x78928289 0x82868174 0x94678259
0xffb6bec0  0x9e4a823f 0x9931803a 0x9f3a7f3b 0xa23f7e37
0xffb6bed0  0x9a3d7f3d 0x9d368145 0xa03e7e3e 0x9c3a7e44
0xffb6bee0  0x9d447f3d 0x97407e3e 0x983f7b3f 0x923e8036
0xffb6bef0  0x8e3e7f41 0x903b7f36 0x8c328238 0x8c308335
0xffb6bf00  0x8f30812f 0x932f8032 0x912b8331 0x8e31822e
0xffb6bf10  0x9231802f 0x8b30822f 0x8431842f 0x84338531
0xffb6bf20  0x8a2e8431 0x8d317f30 0x8a2d8139 0x892c7f37
0xffb6bf30  0x8b307f2f 0x9137802f 0x90327c31 0x89327e2d
0xffb6bf40  0x8a358430 0x8a318339 0x82388136 0x80347f30
0xffb6bf50  0x81307f35 0x7739853a 0x793a863b 0x8436812e
0xffb6bf60  0x7e2d7e28 0x74218323 0x711c8415 0x78158017
0xffb6bf70  0x7f137f16 0x8617821c 0x85168213 0x80157f14
0xffb6bf80  0x86197f13 0x80148415 0x80158414 0x86138515
0xffb6bf90  0x8d0f830e 0x8410840b 0x761f8243 0x7558826b
0xffb6bfa0  0x78728375 0x74758277 0x79758274 0x7d748072
0xffb6bfb0  0x7c728173 0x80698153 0x813f8226 0x7d1a851b
0xffb6bfc0  0x76198e1e 0x72208f1d 0x74208d21 0x7d228e1c
0xffb6bfd0  0x73218d1b 0x7d1d8f1d 0x842c8b51 0x79678474
0xffb6bfe0  0x79828281 0x7d898284 0x7c828184 0x7b838382
0xffb6bff0  0x7c838683 0x7b808581 0x7a80837e 0x7b7f847f
0xffb6c000  0x81198326 0x7c258021 0x7b277b28 0x7e267b25
0xffb6c010  0x83247e26 0x82257f22 0x81257c25 0x81287e25
0xffb6c020  0x94247b29 0x8d2a7c50 0x7e69827c 0x847f8360
0xffb6c030  0x835f8179 0x7b8a858d 0x8270884e 0x90438441
0xffb6c040  0x883d883d 0x8c3c893d 0x8d3c883d 0x833e8a3f
0xffb6c050  0x82418942 0x8a3d863f 0x8a40863c 0x883c893e
0xffb6c060  0x853b8442 0x863f8037 0x8a3c853e 0x8b3d8542
0xffb6c070  0x843a8739 0x8643873a 0x8b46863a 0x8b428445
0xffb6c080  0x8b3e853d 0x8e408941 0x8b3f8842 0x86458442
0xffb6c090  0x81428342 0x7f468045 0x81427d4b 0x80497f47
0xffb6c0a0  0x85447e49 0x8b447f3f 0x8d4b8147 0x95498246
0xffb6c0b0  0x9e4a8649 0xa245854a 0xa04b814a 0x9a517a57
0xffb6c0c0  0x8f5c7961 0x8a6c7e6d 0x8c688064 0x8e688168
0xffb6c0d0  0x87708173 0x7f778477 0x8273896a 0x8865896b
0xffb6c0e0  0x866e8770 0x85758478 0x837d857f 0x80848388
0xffb6c0f0  0x808a8090 0x7f8e828f 0x7e948192 0x7e978195
0xffb6c100  0x7f948297 0x7f968195 0x7f958197 0x7f948198
0xffb6c110  0x7f958196 0x7f978194 0x7f978197 0x7f968295
0xffb6c120  0x7f968395 0x7f978298 0x7f978095 0x7e978095
0xffb6c130  0x7f928297 0x7d968194 0x7f8d7f84 0x8b748065
0xffb6c140  0x99578542 0x9f3c803b 0xa0367c39 0xa03b7b3a
0xffb6c150  0x9b3d7f3a 0x9c3c7e42 0x9e41793c 0x9f427c3e
0xffb6c160  0x9b3d7c45 0x973a7a41 0x97417a41 0x923d803b
0xffb6c170  0x91407e3a 0x913b7f36 0x8f368236 0x91368231
0xffb6c180  0x8d308434 0x8f308434 0x8f2d862f 0x8e338030
0xffb6c190  0x8d347e30 0x892d8231 0x89308232 0x8732832f
0xffb6c1a0  0x8a2e8230 0x8f348030 0x8b2a8331 0x89347f31
0xffb6c1b0  0x8a317f2d 0x8c35802f 0x89327f30 0x88347f30
0xffb6c1c0  0x89308230 0x882d843e 0x83398138 0x82367e33
0xffb6c1d0  0x81317f35 0x7c35843b 0x7f3c873b 0x83328434
0xffb6c1e0  0x7c327f2a 0x75258421 0x761c8718 0x78168215
0xffb6c1f0  0x76118616 0x7d158519 0x851a7e13 0x84147d15
0xffb6c200  0x82147c15 0x79118215 0x78158915 0x7f118a15
0xffb6c210  0x8411840f 0x83117e0d 0x781c7f40 0x76558367
0xffb6c220  0x7a718075 0x77758175 0x7b738173 0x7c728073
0xffb6c230  0x7c708074 0x7e638157 0x8041822a 0x81207f17
0xffb6c240  0x7919891c 0x731f8f1d 0x72208d21 0x791d8a1f
0xffb6c250  0x701f8b1c 0x7b1b8e1a 0x8224894e 0x7c638574
0xffb6c260  0x7a7d8282 0x7b848084 0x7d848184 0x7b828582
0xffb6c270  0x7a808781 0x7b808381 0x7e7f827d 0x7d7f847e
0xffb6c280  0x7d178325 0x7a22852b 0x78248224 0x7d258027
0xffb6c290  0x862b8121 0x81238024 0x80247e25 0x83248225
0xffb6c2a0  0x96287a24 0x8f337a4d 0x8070807d 0x847c7f61
0xffb6c2b0  0x855e817f 0x7e87848c 0x846e8649 0x923e833f
0xffb6c2c0  0x8c3f863f 0x8d3b8642 0x8738863e 0x7f3c863c
0xffb6c2d0  0x813f8544 0x8e448539 0x88438639 0x7e3d873e
0xffb6c2e0  0x843c853e 0x883c833b 0x8b3b873e 0x893d853c
0xffb6c2f0  0x833c853d 0x8643853d 0x8a418640 0x8e438640
0xffb6c300  0x8d3d8441 0x8d418439 0x8b44873f 0x86398743
0xffb6c310  0x803b8442 0x7f428343 0x80448245 0x83467f48
0xffb6c320  0x89487e47 0x8b487e4a 0x87437c4a 0x8c477d4a
0xffb6c330  0x9c4a804d 0xa44d8147 0xa3467c50 0x96587a5f
0xffb6c340  0x89687b71 0x84757e76 0x866f806d 0x886e806d
0xffb6c350  0x83708074 0x8173846e 0x87668663 0x89638668
0xffb6c360  0x86698772 0x8779837a 0x837a8482 0x81888386
0xffb6c370  0x818b8191 0x7f8f828e 0x7f928194 0x7f938193
0xffb6c380  0x7f988293 0x7f938195 0x7f968195 0x7f978194
0xffb6c390  0x80968195 0x80978094 0x7f968296 0x7f998298
0xffb6c3a0  0x7e938298 0x8095819a 0x7f938197 0x7e948093
0xffb6c3b0  0x7f988294 0x7f958190 0x7f94808e 0x857c8070
0xffb6c3c0  0x95638352 0xa441823b 0xa3397b3a 0x9d407c3c
0xffb6c3d0  0x9c3b7f42 0x9b3b7e40 0x9c3b7a3f 0xa241793e
0xffb6c3e0  0x9c3e7b3a 0x99407b40 0x98417b40 0x933d7e40
0xffb6c3f0  0x953e7e3e 0x94367f37 0x94388136 0x97348032
0xffb6c400  0x8e36812b 0x8e348034 0x902e8033 0x8e318130
0xffb6c410  0x8934832f 0x87308330 0x8f37812b 0x8b308330
0xffb6c420  0x8d31812e 0x91337e31 0x8f317f2e 0x8b328132
0xffb6c430  0x88338532 0x86328432 0x85318032 0x89327c30
0xffb6c440  0x89338130 0x8734843a 0x86388137 0x84337d32
0xffb6c450  0x822e7d37 0x8439813c 0x873c843b 0x8434842f
0xffb6c460  0x7c348428 0x7c258323 0x7e1c8319 0x7a178014
0xffb6c470  0x73198313 0x76188618 0x85148117 0x87157b11
0xffb6c480  0x7e157c14 0x72138514 0x77188a12 0x7b148713
0xffb6c490  0x7b0c8010 0x86147f0f 0x7a197f3a 0x7a598167
0xffb6c4a0  0x7b728174 0x7a748175 0x7d748072 0x7d708175
0xffb6c4b0  0x7b738270 0x7d678158 0x803d8129 0x851b831b
0xffb6c4c0  0x7f16901e 0x75239320 0x731d9020 0x75208e20
0xffb6c4d0  0x70178d1f 0x7b19931b 0x80278d4d 0x7f628475
0xffb6c4e0  0x7b7f827e 0x7a838284 0x7e838382 0x7c818682
0xffb6c4f0  0x7880887f 0x7c7f8480 0x8382827f 0x817c8380
0xffb6c500  0x7d208220 0x77258826 0x73288825 0x7a228324
0xffb6c510  0x7d278128 0x7b1d812b 0x80257f29 0x811b8526
0xffb6c520  0x8f26782a 0x8a2c7753 0x806e7e7c 0x857e7c5d
0xffb6c530  0x835e817c 0x7d8d838b 0x8867854e 0x96468140
0xffb6c540  0x8d38853e 0x8943833a 0x853c813d 0x873e8040
0xffb6c550  0x8a408040 0x8e3e833f 0x893f843d 0x7f3b873a
0xffb6c560  0x7f45853a 0x8140853d 0x863c883c 0x873c863e
0xffb6c570  0x8540823f 0x87408139 0x8843843b 0x8b41893e
0xffb6c580  0x8d428343 0x8e3f7f40 0x8b3e843e 0x84418940
0xffb6c590  0x81408643 0x883f863f 0x87448744 0x7f498047
0xffb6c5a0  0x824a7e48 0x874a7b4b 0x874b774a 0x8d46784d
0xffb6c5b0  0x9a4a7c47 0xa04a7c4a 0x9f4b7554 0x95607a64
0xffb6c5c0  0x8a6f7c72 0x86737e70 0x88718172 0x896d7e6c
0xffb6c5d0  0x846e7e73 0x84678164 0x8f5d825a 0x8b5f8560
0xffb6c5e0  0x85678772 0x8577837b 0x847f8285 0x82848289
0xffb6c5f0  0x808e818a 0x7f91818f 0x7f918192 0x7f958194
0xffb6c600  0x7f928195 0x7f948195 0x7f938294 0x7f988298
0xffb6c610  0x7f978096 0x7f968094 0x7f978294 0x7f958198
0xffb6c620  0x7f948096 0x7f948198 0x7f948196 0x7e978194
0xffb6c630  0x7f948194 0x7f938195 0x7f938193 0x8288807b
0xffb6c640  0x8a71825a 0x9d4d8442 0xa33e7a38 0x9c3a7d3c
0xffb6c650  0x9f407e3d 0x9c3f7c3b 0x993e7a3d 0x9e37773f
0xffb6c660  0x9b46783d 0x97387e42 0x96407c41 0x94437a3f
0xffb6c670  0x93407c38 0x8f3e7d3a 0x93387d3c 0x94387e30
0xffb6c680  0x8b357d34 0x89337b32 0x8c2e7c33 0x8c338230
0xffb6c690  0x8a2f8635 0x8c2e8431 0x8e2f8132 0x89308230
0xffb6c6a0  0x8d307f30 0x8f347b32 0x8b2d7931 0x862f822c
0xffb6c6b0  0x872d8a2e 0x88338630 0x89328032 0x8938792e
0xffb6c6c0  0x882e7d30 0x87328236 0x863a8332 0x843a7b30
0xffb6c6d0  0x82317b32 0x803a7e38 0x7e3c813f 0x7f368533
0xffb6c6e0  0x7f2e882a 0x7e288022 0x7e1b7e18 0x84167e16
0xffb6c6f0  0x7c157d14 0x74168316 0x7d128117 0x87147717
0xffb6c700  0x80177a0f 0x79118514 0x79158814 0x77158211
0xffb6c710  0x7e117b12 0x870f810b 0x7f17803f 0x78537f67
0xffb6c720  0x776f8174 0x77748272 0x7b737f73 0x7b70806f
0xffb6c730  0x7c728375 0x80678156 0x81447f2c 0x801d851d
0xffb6c740  0x7715951a 0x7323941f 0x721e941e 0x751f8f1e
0xffb6c750  0x791e8d19 0x7e1b961b 0x80209047 0x80638473
0xffb6c760  0x7c7e827f 0x78838582 0x7c838583 0x7c81877f
0xffb6c770  0x7983887f 0x7b818481 0x8082827b 0x7e7f837d
0xffb6c780  0x7d1f8023 0x7b248223 0x75288324 0x77248423
0xffb6c790  0x73258528 0x78248129 0x82248124 0x81248428
0xffb6c7a0  0x89257a28 0x84317b55 0x7f6f7e7f 0x847b7e5c
0xffb6c7b0  0x8266817f 0x7d8e828b 0x8c6a8545 0x9a428241
0xffb6c7c0  0x8f3d833f 0x853f823d 0x833d8239 0x8e418344
0xffb6c7d0  0x903d8440 0x8e418842 0x8a3b873f 0x8142853b
0xffb6c7e0  0x7c428247 0x7c3e823f 0x833e843e 0x863a843e
0xffb6c7f0  0x883c8144 0x883b813e 0x883e8243 0x883e8643
0xffb6c800  0x8e41843f 0x9144813e 0x8b40863e 0x8440893e
0xffb6c810  0x8543843c 0x93458444 0x90438744 0x7c428543
0xffb6c820  0x7a45824b 0x83487d50 0x864a794b 0x8c4e794a
0xffb6c830  0x974e7c4b 0x9c4a7c4b 0x9a4f7956 0x945f8066
0xffb6c840  0x8b6b8070 0x88717f6a 0x8b69806b 0x8b647f6b
0xffb6c850  0x866c7f69 0x8c5d805e 0x97558159 0x8f5c8861
0xffb6c860  0x866c8770 0x8479847d 0x83838486 0x80898389
0xffb6c870  0x818f818d 0x7f8f818d 0x7d938291 0x7f8f8196
0xffb6c880  0x7f938292 0x7f958296 0x7f958298 0x7f978196
0xffb6c890  0x7f958096 0x7f948198 0x7f948299 0x7f968193
0xffb6c8a0  0x7f968196 0x7f958198 0x7f948196 0x7e948197
0xffb6c8b0  0x7e938196 0x7f948193 0x7f928193 0x808e8086
0xffb6c8c0  0x8675806a 0x97578149 0xa13a7d39 0x9b338041
0xffb6c8d0  0xa03f8043 0x9d3d803b 0x973d7e3b 0x9a3c793c
0xffb6c8e0  0x9b41773a 0x973d7d3f 0x953b7b44 0x97437b40
0xffb6c8f0  0x943e7c3b 0x8d3c7d3b 0x93357e3d 0x9536802f
0xffb6c900  0x8a348132 0x84317e30 0x87358030 0x8c388430
0xffb6c910  0x8e328432 0x91348331 0x8d348232 0x8b2d8131
0xffb6c920  0x8e338131 0x8d317e2c 0x87337d30 0x842f8030
0xffb6c930  0x87318430 0x8a2e8831 0x8d358433 0x88317e2b
0xffb6c940  0x85307e32 0x882f8038 0x8a378238 0x84318030
0xffb6c950  0x82328033 0x7c37813a 0x77388039 0x7d3c8233
0xffb6c960  0x842e832d 0x80238120 0x7c157e1f 0x8e167d16
0xffb6c970  0x84147e18 0x73148214 0x74158316 0x85147d14
0xffb6c980  0x82137e15 0x81118319 0x7d178515 0x720f8411
0xffb6c990  0x82107a13 0x8b0f7e0f 0x8519823f 0x77588164
0xffb6c9a0  0x74728273 0x7474826f 0x78728174 0x7a6f7f70
0xffb6c9b0  0x7e77816c 0x846b8054 0x83417e2b 0x801a851d
0xffb6c9c0  0x75188e1e 0x72219119 0x73219422 0x771d8e1e
0xffb6c9d0  0x851f8c1c 0x861d9317 0x83258f48 0x82618574
0xffb6c9e0  0x7c7c8382 0x78828481 0x7c828384 0x7d828581
0xffb6c9f0  0x7b7f8581 0x7a7e857e 0x7b808580 0x7a7d847c
0xffb6ca00  0x811d7e24 0x7f287a26 0x7d227e23 0x7c268521
0xffb6ca10  0x78278626 0x7b25802a 0x80228225 0x84248325
0xffb6ca20  0x8e267b24 0x84317d5c 0x7c6f7f7b 0x82798054
0xffb6ca30  0x81688080 0x7f8c8188 0x90658647 0x9d458241
0xffb6ca40  0x93418041 0x933f803f 0x8d3f833b 0x893e8341
0xffb6ca50  0x8b3e873f 0x8c418b3f 0x8841883e 0x7f468349
0xffb6ca60  0x78447e49 0x79497c4a 0x7f3f7f41 0x8144813d
0xffb6ca70  0x843e803c 0x86408039 0x8547813f 0x87428441
0xffb6ca80  0x8e43843d 0x8e40813e 0x8a3c853f 0x853c873f
0xffb6ca90  0x8745813f 0x92418142 0x92428645 0x87458747
0xffb6caa0  0x854a844a 0x894e7d4b 0x854c794f 0x834b794b
0xffb6cab0  0x8f4b7d4d 0x9b467d50 0x9a507c55 0x975e8462
0xffb6cac0  0x8d6a8369 0x89658262 0x8d617f5c 0x8b607e63
0xffb6cad0  0x8b647f5f 0x95597c54 0x99517f53 0x8f578c60
0xffb6cae0  0x836b8772 0x8076847e 0x81828686 0x7e878388
0xffb6caf0  0x7e91818d 0x7e8e8194 0x7d8f8291 0x7f948194
0xffb6cb00  0x7f968193 0x7e978298 0x7f958193 0x7f998196
0xffb6cb10  0x7f958196 0x7f988296 0x80998294 0x80988297
0xffb6cb20  0x7f968198 0x7f958196 0x7e988195 0x7e958293
0xffb6cb30  0x7e958294 0x7f968192 0x7f948195 0x7f95808d
0xffb6cb40  0x84837f74 0x96657e52 0xa4407f37 0x9e3e823b
0xffb6cb50  0x9a3d823f 0x9a3f8440 0x993e823d 0x9d3d7a40
0xffb6cb60  0x9c3e753d 0x9840793d 0x9940783e 0x983f7a43
0xffb6cb70  0x93407a3e 0x8e3f7a38 0x8f387f3c 0x8e358336
0xffb6cb80  0x882f8336 0x87358032 0x89318232 0x8a328531
0xffb6cb90  0x8c368133 0x8e358132 0x8b34822e 0x88347f32
0xffb6cba0  0x8c2c8233 0x8b2f812d 0x86347f2d 0x86317f2f
0xffb6cbb0  0x88307f30 0x8b2d8731 0x8a308930 0x84318134
0xffb6cbc0  0x86317d2e 0x87317e3a 0x84328233 0x82328432
0xffb6cbd0  0x842d8532 0x7d36823b 0x793f7d3b 0x82377e31
0xffb6cbe0  0x84347e28 0x7e267f21 0x7a1d7b19 0x7f1b7b11
0xffb6cbf0  0x7f157e19 0x75157e14 0x74118214 0x81198210
0xffb6cc00  0x7e138215 0x7f167f16 0x7f168210 0x79108317
0xffb6cc10  0x7f0e770f 0x850e7c10 0x8315843d 0x79528367
0xffb6cc20  0x786f8371 0x7972836e 0x7871836e 0x7b727e73
0xffb6cc30  0x7f717e70 0x7f6a7d58 0x81487c2b 0x861f831c
0xffb6cc40  0x7b178722 0x781e8b1a 0x771e921b 0x7a208d20
0xffb6cc50  0x7e19881c 0x801b8f18 0x821f8c45 0x8060866f
0xffb6cc60  0x7b7c8480 0x7a838381 0x7c818280 0x7d7d8184
0xffb6cc70  0x7b7e827d 0x787e857d 0x7a7e8680 0x7b7e857f
0xffb6cc80  0x87228020 0x83267c24 0x86257c27 0x82228223
0xffb6cc90  0x7f268224 0x80267f26 0x7f238327 0x87258121
0xffb6cca0  0x922b7c24 0x85357f58 0x7972807d 0x80788058
0xffb6ccb0  0x806b827e 0x818f8387 0x975f854a 0xa044813f
0xffb6ccc0  0x973e8243 0x9e418342 0x9741823e 0x843d8442
0xffb6ccd0  0x86408642 0x8a3e883f 0x86428541 0x7c4a844c
0xffb6cce0  0x764e7e4e 0x784c7a4d 0x7e457e4b 0x7b41843f
0xffb6ccf0  0x7f418441 0x85398243 0x833f843d 0x84418742
0xffb6cd00  0x8f418442 0x8e3f7f3e 0x89438641 0x87418a3c
0xffb6cd10  0x8a46833c 0x924a8242 0x94428549 0x9341824a
0xffb6cd20  0x914b7d46 0x8c4d7e49 0x83497d4d 0x79497d50
0xffb6cd30  0x87508150 0x994e7e4e 0x9b547c52 0x995c815d
0xffb6cd40  0x93608457 0x90538258 0x92597f59 0x8e577d62
0xffb6cd50  0x955d7d5d 0x9e517d4e 0x9b4e8155 0x905a885e
0xffb6cd60  0x8065886f 0x7e788579 0x7f818680 0x7b868388
0xffb6cd70  0x7b8d818e 0x7e8f8190 0x7f92818f 0x7e928194
0xffb6cd80  0x7e918297 0x7e938298 0x7e948198 0x7e958197
0xffb6cd90  0x7f9a8196 0x7f988195 0x7f968294 0x80968197
0xffb6cda0  0x7f938196 0x7f968197 0x7f958197 0x7e958195
0xffb6cdb0  0x7f958194 0x7f948194 0x7f948195 0x7f938192
0xffb6cdc0  0x838a7f7b 0x9270805b 0xa64c833b 0xa13a8036
0xffb6cdd0  0x96418038 0x963e8244 0x9e417e3b 0x9f3f7a3d
0xffb6cde0  0x9e3e783f 0x9a407c3f 0x9c437d41 0x9b407f41
0xffb6cdf0  0x943c7d3f 0x903b7c40 0x8d3a7f3c 0x893a8233
0xffb6ce00  0x89388434 0x8c35822f 0x8d34802f 0x8c327f31
0xffb6ce10  0x8a357e35 0x8c327f32 0x8c327f2f 0x8832812f
0xffb6ce20  0x8b338430 0x8a30842e 0x8631832d 0x892f7f2d
0xffb6ce30  0x8a31812d 0x8e328632 0x8a2f8531 0x82328231
0xffb6ce40  0x88307e30 0x86357e36 0x7d338437 0x81328530
0xffb6ce50  0x8731852e 0x7e3b8435 0x7b417f44 0x84388232
0xffb6ce60  0x842e8329 0x7d288520 0x77218319 0x70168319
0xffb6ce70  0x79178517 0x77158215 0x7513801a 0x7f0f8016
0xffb6ce80  0x7c128112 0x7e128016 0x80188111 0x82157e0c
0xffb6ce90  0x8012740f 0x80107d10 0x831b843a 0x7c568464
0xffb6cea0  0x7b6d8473 0x7e6f8570 0x7870856e 0x7a718173
0xffb6ceb0  0x80737f70 0x7b687d56 0x80457c2a 0x8c208716
0xffb6cec0  0x7d1b8e1b 0x7d1f8f25 0x7f1a901f 0x7d1e8b1b
0xffb6ced0  0x781d8a15 0x7c1b8e1f 0x83218c48 0x7f5e866f
0xffb6cee0  0x7c7d847f 0x7c828582 0x7a808580 0x7b84847d
0xffb6cef0  0x7a81837d 0x757d847e 0x7b7e857f 0x7c7e8479
0xffb6cf00  0x84208123 0x7f247e22 0x83277b24 0x83257e23
0xffb6cf10  0x83277c28 0x81267e26 0x80268226 0x83267d25
0xffb6cf20  0x8e287922 0x89368157 0x7e738080 0x826f8159
0xffb6cf30  0x7f6a827d 0x7e8f8484 0x955e844e 0xa0457f44
0xffb6cf40  0x94428641 0x9a418545 0x98438142 0x8e3f8442
0xffb6cf50  0x89438440 0x8841833e 0x85438149 0x784c834e
0xffb6cf60  0x75547e54 0x7b52794f 0x7b4c7c4a 0x77488642
0xffb6cf70  0x7b438744 0x7f418444 0x7e40853f 0x823d8a41
0xffb6cf80  0x87428443 0x87427e42 0x873f873e 0x87418b40
0xffb6cf90  0x8c448643 0x94438247 0x96408449 0x94487e4c
0xffb6cfa0  0x944a774c 0x8d497e49 0x874b804e 0x854f7f4d
0xffb6cfb0  0x894f8250 0x944f7e55 0x99567a59 0x99567e57
0xffb6cfc0  0x9851824c 0x9a518151 0x974c7f59 0x915b7e56
0xffb6cfd0  0x975b7c53 0x9c4d7f51 0x984f814f 0x8e5a8459
0xffb6cfe0  0x81668969 0x80718776 0x7f7b8680 0x7b84858a
0xffb6cff0  0x798c818b 0x7d90808e 0x7f91808e 0x7f908195
0xffb6d000  0x7f908194 0x7f978292 0x7f978196 0x7e978194
0xffb6d010  0x7e978198 0x7f958196 0x80958297 0x80968295
0xffb6d020  0x7f958297 0x7e978195 0x7f958095 0x7f978096
0xffb6d030  0x7f958093 0x7f938192 0x7f948191 0x7f988191
0xffb6d040  0x7e908086 0x89738067 0x9f528645 0xa13d7e3d
0xffb6d050  0x98417c39 0x993f7e3f 0x9a417a40 0x9f3a773c
0xffb6d060  0xa03c793e 0x993c803b 0x9c3f8241 0x993c8043
0xffb6d070  0x9140803f 0x90417d3b 0x8f407d3b 0x893e8135
0xffb6d080  0x88368335 0x8c318433 0x8e327c2f 0x90357930
0xffb6d090  0x8a357b33 0x8b357c35 0x8d317a30 0x8733812c
0xffb6d0a0  0x882f8630 0x8a308831 0x8a30862f 0x89357f2d
0xffb6d0b0  0x8830832c 0x8f318433 0x8f2f8133 0x86378031
0xffb6d0c0  0x88337d34 0x86367d38 0x82358537 0x842f8631
0xffb6d0d0  0x8333852e 0x7f38853c 0x7e448238 0x80378632
0xffb6d0e0  0x7e29882e 0x7a248721 0x791e8a1f 0x7c138916
0xffb6d0f0  0x811c8b10 0x7f148317 0x790f7c19 0x77118014
0xffb6d100  0x78138114 0x79128013 0x7d167f15 0x85147610
0xffb6d110  0x8714700d 0x830b7c09 0x82188534 0x7d528366
0xffb6d120  0x786e8570 0x7a70886f 0x7c6f8773 0x7c718372
0xffb6d130  0x7d718171 0x7b6b7d58 0x854b7d2d 0x8a1b8b1a
0xffb6d140  0x7b1b941e 0x7c1d9021 0x801f8c22 0x7b168b21
0xffb6d150  0x751c8b1a 0x7e198d1c 0x83218a38 0x7d5c856e
0xffb6d160  0x7a79827f 0x7a818582 0x7b81887f 0x7d828682
0xffb6d170  0x7a7c847e 0x7780837e 0x7b7e827e 0x7d7e837c
0xffb6d180  0x85218123 0x7c258125 0x7e267f29 0x82228426
0xffb6d190  0x85268423 0x832a8020 0x82267e25 0x7f257d27
0xffb6d1a0  0x89277b28 0x8e3a7c61 0x84727d7f 0x85707e56
0xffb6d1b0  0x7e6d8180 0x7d8d8184 0x955f8047 0x9f428044
0xffb6d1c0  0x9344843e 0x97478243 0x9a467f42 0x97438244
0xffb6d1d0  0x8d43813e 0x87448244 0x84418446 0x74528357
0xffb6d1e0  0x74577d5c 0x7d557a53 0x7a507c4b 0x7649804d
0xffb6d1f0  0x79478144 0x7a438342 0x7c41873f 0x82418846
0xffb6d200  0x813d8741 0x813e8443 0x8840863f 0x8a408743
0xffb6d210  0x90408642 0x98428547 0x97458644 0x964a814a
0xffb6d220  0x974b7a4a 0x914a7d4a 0x8c47814e 0x904f804c
0xffb6d230  0x8f4f7f51 0x8f507c54 0x94577c58 0x9a5b7e54
0xffb6d240  0xa14c814d 0xa5518351 0x9b507f55 0x95547e57
0xffb6d250  0x9a537e4e 0x9c547f4f 0x97517f4a 0x8b578357
0xffb6d260  0x85638668 0x846c8774 0x81778681 0x7c828485
0xffb6d270  0x78898189 0x7c90818e 0x7e8c8190 0x7f8f8193
0xffb6d280  0x7f8f8194 0x7f938294 0x7f958197 0x7e968094
0xffb6d290  0x7e968193 0x7f988195 0x80978195 0x7f978195
0xffb6d2a0  0x7e968196 0x7f968193 0x7f978197 0x80958196
0xffb6d2b0  0x80958196 0x7f8f8196 0x7f958192 0x7f968192
0xffb6d2c0  0x7b90808a 0x827f806d 0x9a5f844d 0xa13e803b
0xffb6d2d0  0x9b3c7e3c 0x9b3c7d40 0x95367b3e 0x9d3c7d3d
0xffb6d2e0  0xa23a7c3c 0x9a3c7f3b 0x9f3f803d 0x9841803c
0xffb6d2f0  0x8f43823f 0x93437d40 0x94417c38 0x8a397e38
0xffb6d300  0x87368336 0x8d358335 0x8f2d7f33 0x94397c34
0xffb6d310  0x8a327d32 0x8b377b33 0x8e317d2f 0x8732812d
0xffb6d320  0x8735842f 0x8c308331 0x90328031 0x8c327f31
0xffb6d330  0x892c8330 0x9036842c 0x93338032 0x8b2f8033
0xffb6d340  0x87358133 0x86358034 0x88398034 0x862f8432
0xffb6d350  0x7f2f8535 0x8238843e 0x85428136 0x7e388331
0xffb6d360  0x7c2a872b 0x79238823 0x801e8319 0x8b1b8118
0xffb6d370  0x8b178718 0x8a128315 0x7e107c15 0x75127912
0xffb6d380  0x79137d13 0x76138213 0x79158213 0x85127c12
0xffb6d390  0x8a13770d 0x880f7c12 0x8310813b 0x7e518365
0xffb6d3a0  0x766d846f 0x78718472 0x8072846f 0x80708273
0xffb6d3b0  0x7c707f6e 0x7c6b7d5a 0x8b437f2e 0x8c19841a
0xffb6d3c0  0x7c1b901f 0x7f209220 0x841e8d1d 0x7c1f8a1b
0xffb6d3d0  0x7719891a 0x841d8c1c 0x841f8c3d 0x7c5f886d
0xffb6d3e0  0x787a857e 0x7a828584 0x7e7d8683 0x7e7f867e
0xffb6d3f0  0x7b7f857b 0x787c847e 0x7a7f847a 0x7b7f857a
0xffb6d400  0x811f7f1e 0x7f268324 0x83278326 0x7e258827
0xffb6d410  0x76248b24 0x7e288228 0x82267a24 0x80267c27
0xffb6d420  0x8c257a27 0x8a3e775e 0x80737a7d 0x836f7c55
0xffb6d430  0x7f707e7f 0x808f7d82 0x96577b46 0xa0467f45
0xffb6d440  0x963f8242 0x9a467d48 0x993e7e43 0x9a498146
0xffb6d450  0x96457e46 0x8f448143 0x874b8641 0x78528358
0xffb6d460  0x745f795b 0x73527b56 0x75517c48 0x784f794a
0xffb6d470  0x7d497b44 0x7b448345 0x793d863d 0x82428641
0xffb6d480  0x82408a40 0x7e438844 0x84408443 0x87448341
0xffb6d490  0x8a43843f 0x8f428641 0x96468844 0x994a834a
0xffb6d4a0  0x994b7d4c 0x954c7e4d 0x9245824c 0x934b824f
0xffb6d4b0  0x95507a4f 0x94577958 0x945c7c56 0x9c587f56
0xffb6d4c0  0xa250824e 0xa5528352 0x9e577f51 0x99537e50
0xffb6d4d0  0x9b4f7f54 0x984a7f4f 0x96517f55 0x8f51815b
0xffb6d4e0  0x865c8564 0x846e876f 0x8374847a 0x7e7c8384
0xffb6d4f0  0x7a848188 0x7b8a8187 0x7f8a818f 0x808b818f
0xffb6d500  0x7f92818f 0x7f928192 0x7f938194 0x7f978094
0xffb6d510  0x7f967f95 0x7f928195 0x80968196 0x7f968197
0xffb6d520  0x7e958197 0x7e958195 0x7f968196 0x80928294
0xffb6d530  0x80928194 0x80948293 0x7f938294 0x7f948193
0xffb6d540  0x7c968091 0x80847f75 0x91688355 0xa0488340
0xffb6d550  0xa03d7f35 0x9f3e7c3c 0x9a3a7b3b 0x9a398136
0xffb6d560  0x9f3b7f3d 0x9b3b7e38 0x9b3c7f41 0x993f7f41
0xffb6d570  0x9241833f 0x8f427f41 0x903f783e 0x8b3b7b37
0xffb6d580  0x8b378136 0x91398234 0x8f328035 0x8f377d36
0xffb6d590  0x8a337d36 0x89347b34 0x8c2c802e 0x88318235
0xffb6d5a0  0x8b2f8132 0x8b337e31 0x8c347b31 0x8b357f30
0xffb6d5b0  0x88308330 0x8a318431 0x8c398131 0x8b338034
0xffb6d5c0  0x8834862f 0x833c813c 0x84387a3a 0x82358030
0xffb6d5d0  0x7c308634 0x7e398340 0x803b823d 0x7e3b8132
0xffb6d5e0  0x7e2e8425 0x7e228923 0x841d7e22 0x861a7913
0xffb6d5f0  0x80168315 0x82158115 0x7c137a15 0x78147215
0xffb6d600  0x81117711 0x7e158213 0x7f158415 0x860d8115
0xffb6d610  0x87127e10 0x870f7e0d 0x83157f37 0x7d4c8263
0xffb6d620  0x796c8370 0x7b708073 0x7e717f6e 0x80738072
0xffb6d630  0x7f737c74 0x7d677d5a 0x8449802d 0x88207d1d
0xffb6d640  0x7e158b1c 0x75219120 0x7d1d8b1f 0x781c881b
0xffb6d650  0x761b8617 0x82198a1a 0x7e1f8c3b 0x76568a6e
0xffb6d660  0x787a867c 0x7a808682 0x7c828481 0x7c7e8680
0xffb6d670  0x7a7f857d 0x797e837d 0x7b7a867e 0x7a78867a
0xffb6d680  0x7e217f24 0x85288321 0x89278424 0x7c268826
0xffb6d690  0x69228a25 0x7a268228 0x82277e24 0x82237d2a
0xffb6d6a0  0x9026782d 0x833e7b60 0x7b747e7d 0x806d7e56
0xffb6d6b0  0x81708084 0x828c8080 0x96588049 0xa0457d44
0xffb6d6c0  0x9b458042 0x9c468043 0x98477f43 0x9d458148
0xffb6d6d0  0x9e4b8342 0x96468344 0x8c48834b 0x7d4f8056
0xffb6d6e0  0x745c7b5a 0x6b587e53 0x71527e50 0x774d7f4a
0xffb6d6f0  0x804b814a 0x7d428442 0x773e8742 0x8347873f
0xffb6d700  0x8641873d 0x7f458439 0x81438242 0x8344843c
0xffb6d710  0x83418444 0x87458544 0x94458549 0xa04c7f4a
0xffb6d720  0x9c467c49 0x9b4c7f4b 0x9a4b834c 0x974a824c
0xffb6d730  0x99507d55 0x98517a5c 0x955c7d5e 0x9e577f55
0xffb6d740  0xa4527f50 0xa44f8251 0xa0518152 0x9d4f8151
0xffb6d750  0x9a4f844a 0x944e844b 0x964f7f51 0x93518055
0xffb6d760  0x85598460 0x8468846d 0x85718477 0x8179847f
0xffb6d770  0x7c838384 0x7d878484 0x818a828a 0x808b818b
0xffb6d780  0x7e8e828b 0x7d91818e 0x7f908192 0x80988192
0xffb6d790  0x7f968094 0x80948197 0x80948195 0x7f978195
0xffb6d7a0  0x7e948195 0x7e978195 0x7f958296 0x80958295
0xffb6d7b0  0x819a8194 0x80948194 0x80938295 0x7f948193
0xffb6d7c0  0x7e938096 0x7e8b7f7e 0x8970805c 0x9f4e8244
0xffb6d7d0  0xa73c7e3c 0xa33b7b36 0x9d3d7c3a 0x9833803e
0xffb6d7e0  0x9d3b803b 0x9d3a7f39 0x963d7f3e 0x98408143
0xffb6d7f0  0x95418342 0x8c3e7f3a 0x8e3c7b40 0x8d397e3b
0xffb6d800  0x91387f37 0x973a8039 0x90338032 0x8c347f33
0xffb6d810  0x89378130 0x88327f32 0x8c2f7f30 0x8c318133
0xffb6d820  0x8f308032 0x8a31812c 0x86348133 0x8b2f7f36
0xffb6d830  0x8a31802f 0x8831832e 0x87328134 0x8c338135
0xffb6d840  0x8d368336 0x83378139 0x803a7d33 0x7f37802b
0xffb6d850  0x7c2e8138 0x7b37823d 0x7d3e8340 0x7f358232
0xffb6d860  0x842d8226 0x86258422 0x851b8019 0x801b7c17
0xffb6d870  0x75137f16 0x7b157b14 0x7b147512 0x7b127312
0xffb6d880  0x85157913 0x85138315 0x87178317 0x8a0f7f11
0xffb6d890  0x87138009 0x87107d11 0x82187f32 0x7a4e8464
0xffb6d8a0  0x7a6d8271 0x7d748172 0x7c718272 0x80718273
0xffb6d8b0  0x82717f6f 0x7e6b7d55 0x7e4a7f2c 0x84208319
0xffb6d8c0  0x7e1d8d1a 0x6b1d901e 0x75218c1d 0x771d8a1b
0xffb6d8d0  0x761b8a1b 0x801a8b1d 0x7c1a8b3c 0x735c886e
0xffb6d8e0  0x78748682 0x7a828681 0x7a818482 0x7a808381
0xffb6d8f0  0x797c837f 0x7b7f847e 0x7c7c857b 0x7a7b867a
0xffb6d900  0x721f8027 0x79228124 0x84268423 0x7b268722
0xffb6d910  0x72298824 0x78268327 0x79247f25 0x82277c28
0xffb6d920  0x8b287626 0x80417d61 0x7c74807e 0x82697f59
0xffb6d930  0x82728184 0x818e837d 0x95578449 0xa0467b49
0xffb6d940  0x9b427d45 0x9946823f 0x9b497e47 0x9f418046
0xffb6d950  0x9e448746 0x9a478549 0x93448049 0x80507c57
0xffb6d960  0x725b7c5e 0x71587f57 0x73527f4f 0x724c834a
0xffb6d970  0x7d4a8843 0x82488442 0x7d3f853f 0x8641873c
0xffb6d980  0x88428341 0x82417e44 0x8144803b 0x84418442
0xffb6d990  0x864a8440 0x8b438345 0x90457f46 0x99487b4a
0xffb6d9a0  0x9a4b7949 0x994c804c 0x9e49844b 0x9b4f824b
0xffb6d9b0  0x994b7f58 0x96597a5a 0x965c7d5b 0x9d5a7f4f
0xffb6d9c0  0xa2577b51 0xa2518050 0x9d508353 0x964d824c
0xffb6d9d0  0x9349884d 0x8e4b884e 0x914e7f4d 0x93507d51
0xffb6d9e0  0x8b56815f 0x8760816d 0x86708175 0x837a837c
0xffb6d9f0  0x7f828481 0x7e848486 0x7f85828d 0x7e89818c
0xffb6da00  0x7e8b8190 0x7f8e8190 0x7f928192 0x7f968193
0xffb6da10  0x7e928195 0x7f958193 0x80948196 0x80958195
0xffb6da20  0x7f948198 0x7e958195 0x7f948295 0x80958295
0xffb6da30  0x81968194 0x80948193 0x7f938194 0x7f948095
0xffb6da40  0x7f948090 0x7c917f84 0x85797e67 0x9d568144
0xffb6da50  0xa73e7d3b 0x9f3b7c39 0x9f377d3a 0x9d3b7e39
0xffb6da60  0x9d37813b 0x9b37803b 0x973d7c3d 0x9d3c8041
0xffb6da70  0x9a448141 0x8c417e3d 0x8a427e35 0x8b3d803b
0xffb6da80  0x903a7b3a 0x92347b37 0x8e377e35 0x90338233
0xffb6da90  0x8a338633 0x87338131 0x8c327d2e 0x8b327d2c
0xffb6daa0  0x8f317d2f 0x8c2d8231 0x8532842f 0x8a357e32
0xffb6dab0  0x90357b2d 0x902f8030 0x8a338134 0x86348034
0xffb6dac0  0x88358031 0x853f7f3b 0x82368138 0x7f378032
0xffb6dad0  0x7b2e7d38 0x7a367f37 0x7c408339 0x7d358331
0xffb6dae0  0x842b7f2a 0x83247f22 0x7a1f8320 0x7c1a7d1b
0xffb6daf0  0x7d167a17 0x81177315 0x7f126f13 0x75147413
0xffb6db00  0x7b127b11 0x84148311 0x88178113 0x87197c0f
0xffb6db10  0x840f810a 0x82147f0e 0x7e127e2f 0x7d4b8462
0xffb6db20  0x7c688372 0x7d738273 0x79718472 0x78728471
0xffb6db30  0x7e748171 0x80697c5d 0x7d477f30 0x81208718
0xffb6db40  0x771a8d1c 0x671e8c1e 0x711f891e 0x7a198b1c
0xffb6db50  0x791a8b1a 0x781d8b17 0x7a1c8835 0x7458856c
0xffb6db60  0x7a76857c 0x7c838780 0x7b818384 0x7a818081
0xffb6db70  0x7b82827a 0x7b7e837f 0x7b7b837b 0x7a79857b
0xffb6db80  0x67207e1e 0x6c2a7d25 0x82278029 0x7b218424
0xffb6db90  0x7c268825 0x78228325 0x72268028 0x82277f27
0xffb6dba0  0x86287925 0x7f497e64 0x7e767e7d 0x85677d5b
0xffb6dbb0  0x83748189 0x8390827c 0x9450844a 0xa0457c45
0xffb6dbc0  0x9d477e46 0x98478247 0xa0487d48 0xa1487e43
0xffb6dbd0  0x9f4a8647 0xa0468444 0x99488049 0x824f7e51
0xffb6dbe0  0x74587b5f 0x785b7c55 0x77537e4b 0x6e4f8149
0xffb6dbf0  0x7d4d8348 0x8b4a8141 0x85428441 0x8b46873d
0xffb6dc00  0x8b45843b 0x82408241 0x8143833f 0x86438742
0xffb6dc10  0x8a448843 0x90478445 0x8d468144 0x92477f4b
0xffb6dc20  0x97487c4e 0x9b4d7f4f 0xa34b814f 0x9f497f4f
0xffb6dc30  0x994b7e58 0x96587b5c 0x965f7d5c 0x9c577c5b
0xffb6dc40  0xa1567b4e 0xa2527e50 0x99507f4a 0x914f7f4d
0xffb6dc50  0x8f4a844c 0x894b874a 0x8d4c854c 0x954d8451
0xffb6dc60  0x8f56835d 0x8a66836d 0x87718274 0x847a847d
0xffb6dc70  0x8180857e 0x7f858484 0x7d8a8287 0x7c8d828e
0xffb6dc80  0x7e8f818e 0x808e8190 0x80938190 0x7f938193
0xffb6dc90  0x7e938095 0x7e958092 0x80978195 0x81948192
0xffb6dca0  0x80958197 0x7f958196 0x7f988295 0x80958295
0xffb6dcb0  0x81958192 0x8096818f 0x7f948193 0x7f938095
0xffb6dcc0  0x7f948193 0x7b91818b 0x807b7f73 0x9a60814c
0xffb6dcd0  0xa6417d3c 0x9c357c36 0xa13c7e3b 0xa33e7e34
0xffb6dce0  0x9d3a7f39 0x9a3b7f3a 0x99387b40 0xa2417e40
0xffb6dcf0  0x9f3e803b 0x913f7c39 0x873e7d3b 0x8a377e38
0xffb6dd00  0x8f397d38 0x8d3a7f36 0x8e357d36 0x95388136
0xffb6dd10  0x8b32842d 0x872e7e30 0x8d337b2d 0x8b317f2f
0xffb6dd20  0x902e7f2e 0x9031842c 0x862e8730 0x89308330
0xffb6dd30  0x95387e2e 0x982f7f2e 0x8e338035 0x812d7f37
0xffb6dd40  0x86387f38 0x8a3b803f 0x8637823a 0x7f33842f
0xffb6dd50  0x79318235 0x7b38803d 0x7c3e853b 0x7c36852e
0xffb6dd60  0x852b8128 0x81248021 0x711e851b 0x7b1a8019
0xffb6dd70  0x87157914 0x85157812 0x80127a0f 0x71157d10
0xffb6dd80  0x76137e14 0x88178019 0x8c158117 0x860d7e13
0xffb6dd90  0x8213850d 0x7b0f820f 0x7b11812e 0x814f8461
0xffb6dda0  0x7f6e8371 0x7e738173 0x78738471 0x736f8370
0xffb6ddb0  0x7c728173 0x80677f59 0x7e487f2e 0x801f8519
0xffb6ddc0  0x721b9017 0x641c8e1e 0x6f1d8b1f 0x7d1c8d1b
0xffb6ddd0  0x7b1c8e19 0x6e188d19 0x781e8937 0x765b846a
0xffb6dde0  0x7c76837e 0x7f848681 0x7b7d8580 0x7880837e
0xffb6ddf0  0x7b7f8480 0x7c7e837b 0x7b7b837a 0x7a7b8579
0xffb6de00  0x71217d24 0x75277723 0x82257b24 0x7f268025
0xffb6de10  0x7f238629 0x7c268224 0x76268026 0x81238129
0xffb6de20  0x88297c2a 0x7c447e63 0x7d737d80 0x85627c5b
0xffb6de30  0x81748086 0x828d827b 0x9551824a 0x9f4b7c44
0xffb6de40  0x9e467e44 0x9c43814b 0xa4447b48 0xa3467b44
0xffb6de50  0xa0478442 0x9e48834a 0x95477f4b 0x824c7f55
0xffb6de60  0x755c795d 0x775b7859 0x79557d50 0x73507e53
0xffb6de70  0x7c497d48 0x8b487e43 0x8a428340 0x89458541
0xffb6de80  0x88418340 0x84408442 0x82428543 0x81448a3f
0xffb6de90  0x84428c43 0x884b843f 0x8b438147 0x95468149
0xffb6dea0  0x9f497e4d 0xa04c7c46 0xa34b7d4c 0x9f507d4d
0xffb6deb0  0x9d547e57 0x9b5b7c5d 0x995d7b5a 0xa05a7957
0xffb6dec0  0xa3557a53 0xa34e7d51 0x9f517b4e 0x984d7c4a
0xffb6ded0  0x924e814e 0x8f4e854c 0x8f468b49 0x91498a50
0xffb6dee0  0x9251855c 0x8c618466 0x84728276 0x8077857d
0xffb6def0  0x807e8683 0x7f838487 0x7f8a818d 0x7d8c828f
0xffb6df00  0x7f90828f 0x808f828f 0x80928193 0x7f988091
0xffb6df10  0x7f968095 0x7f948094 0x80948192 0x80928191
0xffb6df20  0x80958195 0x7f968194 0x7f968295 0x80988192
0xffb6df30  0x80978094 0x80918194 0x7f958194 0x7f948193
0xffb6df40  0x80948194 0x7d91818e 0x7f887f74 0x94688056
0xffb6df50  0xa2457e3c 0x9d397e37 0xa03e8035 0xa23a7e40
0xffb6df60  0x9e337e3c 0x9b337d3f 0x9a3e793e 0x9f3c7e3b
0xffb6df70  0x9e3e7e41 0x943f793c 0x903c7b37 0x903a7a3b
0xffb6df80  0x8d367f31 0x8c37813e 0x8f387d34 0x92348132
0xffb6df90  0x88338232 0x8a317a31 0x922e782f 0x902c7f2e
0xffb6dfa0  0x922e7f2f 0x912f842a 0x88308930 0x882f8735
0xffb6dfb0  0x92318030 0x932f7d33 0x8b347d35 0x86327e36
0xffb6dfc0  0x87387e3a 0x8c3d8040 0x8b3b833a 0x8039872f
0xffb6dfd0  0x79368433 0x7b3a803e 0x7b39863b 0x7c398430
0xffb6dfe0  0x7d2b8025 0x78298023 0x7421831b 0x7e1a8118
0xffb6dff0  0x86157816 0x80127c10 0x7c148213 0x760f8413
0xffb6e000  0x75127e15 0x83137d16 0x87177e15 0x80117d10
0xffb6e010  0x8210840f 0x8411820c 0x7d10822b 0x804c835c
0xffb6e020  0x7f6d8272 0x7e738174 0x7a708472 0x78748373
0xffb6e030  0x7c6c8071 0x7d6a8159 0x81467f38 0x881f8316
0xffb6e040  0x78199317 0x6320911f 0x691f8e1d 0x791e8f1c
0xffb6e050  0x7c17901f 0x7517901a 0x771f8930 0x75588366
0xffb6e060  0x7c74827f 0x7e7f847e 0x7d7f867f 0x7b7e867e
0xffb6e070  0x7a7e857f 0x7b7f837f 0x7b7a837b 0x7679857a
0xffb6e080  0x7b207f23 0x7c257d25 0x82267f26 0x82258223
0xffb6e090  0x82278223 0x82257c25 0x7e237e28 0x82277f24
0xffb6e0a0  0x8b2a7e2b 0x794b8167 0x79728080 0x87627d5c
0xffb6e0b0  0x80787f86 0x818f8277 0x96518446 0x9f498045
0xffb6e0c0  0xa04c8044 0xa04b8141 0xa84d7e48 0xa5477e45
0xffb6e0d0  0xa24b8445 0x9d48844b 0x92428343 0x84507e4e
0xffb6e0e0  0x78597b5a 0x755e7d58 0x7a577d54 0x79507f4d
0xffb6e0f0  0x7d4e7f4d 0x8d4d7d49 0x91458143 0x8a44813e
0xffb6e100  0x87458241 0x89498443 0x844a8543 0x803f8747
0xffb6e110  0x84468643 0x81468247 0x89417f4c 0x9b4a7f4a
0xffb6e120  0xa54b7e4e 0xa44e7a4e 0xa24d784d 0x9e4b7a54
0xffb6e130  0xa2567b5d 0x9f5d7b5e 0x9b5c7c5a 0xa359795b
0xffb6e140  0xa4537b4f 0xa5527e53 0xa54b7c51 0xa04c7e4d
0xffb6e150  0x954c824b 0x944c854d 0x93468548 0x9148864e
0xffb6e160  0x9653865e 0x8d658468 0x82718477 0x7d77857f
0xffb6e170  0x7f848484 0x8087848a 0x808d8292 0x7f8d8190
0xffb6e180  0x7f958191 0x80908290 0x80928193 0x7f928094
0xffb6e190  0x7f968194 0x7f968192 0x7f938092 0x7f938094
0xffb6e1a0  0x80948096 0x7f8f8197 0x7f948196 0x7f938196
0xffb6e1b0  0x80968092 0x80948193 0x7f948193 0x7f938194
0xffb6e1c0  0x80948196 0x7f908191 0x7e8c807c 0x8e708059
0xffb6e1d0  0xa04d7d40 0x9f397f33 0xa1407f3d 0xa3397a39
0xffb6e1e0  0xa03d7b39 0x9c3c7d3b 0x9a3e7c41 0x9d367d43
0xffb6e1f0  0x9a397a3d 0x973c7a3b 0x9a3a7d3d 0x96327a37
0xffb6e200  0x8e327c36 0x8c388036 0x90357e38 0x90358033
0xffb6e210  0x862f8230 0x8c32812f 0x95358132 0x942d7f30
0xffb6e220  0x952f7b30 0x942e802e 0x8d31842b 0x8a348430
0xffb6e230  0x90318134 0x8f328131 0x8a338136 0x89378334
0xffb6e240  0x88388338 0x8e41823d 0x93408236 0x8232842f
0xffb6e250  0x7d358235 0x7b36823f 0x7a40833c 0x7b368231
0xffb6e260  0x74297f2b 0x70238223 0x7922861f 0x83167f1b
0xffb6e270  0x86137815 0x7b157f0d 0x7c148414 0x81128011
0xffb6e280  0x79147d12 0x82157d1b 0x86147e14 0x7c147c13
0xffb6e290  0x880e8212 0x900a8012 0x8210822b 0x804d8460
0xffb6e2a0  0x7e6e8372 0x7d708277 0x7e748172 0x7e708173
0xffb6e2b0  0x7d70816e 0x7b6a825a 0x83498032 0x8f1f8016
0xffb6e2c0  0x831e8f15 0x661b911c 0x661b901f 0x771f8f1b
0xffb6e2d0  0x7f1b8c1b 0x801e8d15 0x791f8a38 0x74558866
0xffb6e2e0  0x7b74837c 0x7d80857e 0x7f7d857d 0x7f7d847e
0xffb6e2f0  0x797c857e 0x7b7e857d 0x7b7b8378 0x747a8579
0xffb6e300  0x80228221 0x81298126 0x84248024 0x7c268326
0xffb6e310  0x7c277c2d 0x831e772a 0x80267a22 0x83267d23
0xffb6e320  0x8b287f29 0x7d4c8464 0x7e76837a 0x865f7d60
0xffb6e330  0x7f797d87 0x818f8173 0x9a528447 0x9f4d8449
0xffb6e340  0x9d4a804b 0x9d4a7e47 0xa0428048 0xa24a8148
0xffb6e350  0xa247834a 0x9c48844a 0x924a8546 0x884d7c52
0xffb6e360  0x7a557b56 0x71628256 0x785c7e58 0x78547f53
0xffb6e370  0x7d4c7f4b 0x8f4a7d47 0x974a7e48 0x96447d48
0xffb6e380  0x91448045 0x8d44854a 0x8b4b844e 0x8a488240
0xffb6e390  0x86468145 0x82438142 0x87487e41 0x934b7d4b
0xffb6e3a0  0xa04b7d4f 0xa450774c 0xa44e734d 0x9d4f7853
0xffb6e3b0  0x9d58795e 0x9b60785e 0x9b5e7b5b 0xa35a7758
0xffb6e3c0  0xa2537b53 0xa1527d53 0xa14f7d50 0x99507e50
0xffb6e3d0  0x924e824a 0x924c8346 0x934a8047 0x8f498250
0xffb6e3e0  0x9155855e 0x8965846c 0x81738473 0x7f7e847d
0xffb6e3f0  0x80838382 0x7e898287 0x7e908291 0x7f8e8193
0xffb6e400  0x7f94808f 0x7f938193 0x7f918194 0x7f9a8192
0xffb6e410  0x7f958295 0x7f948194 0x7f938097 0x7f948092
0xffb6e420  0x80938097 0x80958196 0x7f968194 0x7f948196
0xffb6e430  0x80968091 0x80968091 0x7e948195 0x7f948094
0xffb6e440  0x80948192 0x7f928194 0x7d90827e 0x8b758065
0xffb6e450  0xa0517c3f 0xa13d7f3c 0xa13d7d3b 0xa13b763e
0xffb6e460  0x9c3d7735 0x9a3c7c40 0x983f7e3f 0x9b3e7c42
0xffb6e470  0x9b3c773c 0x963d7a37 0x95388038 0x933a7c35
0xffb6e480  0x91387b37 0x92377d33 0x93377e35 0x91317f33
0xffb6e490  0x8c2e8232 0x8e2b8731 0x902a8836 0x93317f33
0xffb6e4a0  0x94317830 0x902c7c2f 0x8c2f8030 0x8b328232
0xffb6e4b0  0x8e34822e 0x8f308332 0x8d328438 0x893a8834
0xffb6e4c0  0x853b873e 0x863b8343 0x853a813e 0x7f378033
0xffb6e4d0  0x7e378131 0x7a3b823a 0x773d813f 0x7b347e32
0xffb6e4e0  0x7e2e7c25 0x79258323 0x771d861e 0x85187a1b
0xffb6e4f0  0x8b157610 0x84158113 0x830e8512 0x82167b11
0xffb6e500  0x7b177a0f 0x84197c16 0x89177b13 0x83177912
0xffb6e510  0x850f7e0b 0x8a117d0e 0x8311822a 0x8146845d
0xffb6e520  0x7c698371 0x7c728276 0x80717e71 0x7f737f6e
0xffb6e530  0x7c6f8273 0x7667835c 0x7e4a7f37 0x88237b16
0xffb6e540  0x7a1b8819 0x691e8f1f 0x6a1c9219 0x781f8e20
0xffb6e550  0x7d19891a 0x81198a1b 0x78188b2d 0x764e8c66
0xffb6e560  0x7a75847a 0x7b80857a 0x7f7e847f 0x8080827b
0xffb6e570  0x797e857b 0x797e867c 0x7b7c837a 0x7a7a847a
0xffb6e580  0x86208023 0x87258025 0x88268123 0x7a208429
0xffb6e590  0x76248025 0x82267e28 0x84277d22 0x862a7a23
0xffb6e5a0  0x8c297b2d 0x83507e68 0x83768179 0x84607e5e
0xffb6e5b0  0x7d7a7f8b 0x828b8273 0x9e4f834a 0xa1488146
0xffb6e5c0  0x9c488048 0x9a4b804b 0x9b4b7f45 0xa14f7f48
0xffb6e5d0  0xa3497f46 0x9d477f4b 0x92478144 0x8c4a7e4d
0xffb6e5e0  0x7e537d59 0x6f5a7d5c 0x765b7d58 0x7b587d50
0xffb6e5f0  0x7f4e7c50 0x934c7d4d 0x9e487f49 0xa14c7d41
0xffb6e600  0x9c487e44 0x914b834a 0x924d814b 0x92518143
0xffb6e610  0x89468143 0x834a8041 0x84448347 0x8c488349
0xffb6e620  0x9b4c7e50 0xa34e794e 0xa44a7951 0x9c4f7a55
0xffb6e630  0x99597660 0x9862765c 0x9b607b5d 0xa45a7b57
0xffb6e640  0xa2567a51 0x9f537a56 0x9d507a4f 0x934e7d54
0xffb6e650  0x8f47824f 0x904d8347 0x92458548 0x8d4a854c
0xffb6e660  0x8c57865f 0x85648570 0x80738476 0x817a847e
0xffb6e670  0x82818284 0x7b858389 0x7b8c8291 0x7f918194
0xffb6e680  0x7e928190 0x7e938196 0x7f938198 0x7f958195
0xffb6e690  0x7f968194 0x80958197 0x7f948094 0x7f978094
0xffb6e6a0  0x80958195 0x81938195 0x7f968194 0x7e938197
0xffb6e6b0  0x80948193 0x7f928193 0x7d938193 0x7e918197
0xffb6e6c0  0x80938191 0x7f958190 0x7d908288 0x88767e68
0xffb6e6d0  0xa1587d45 0xa23b7f3d 0xa23f7b3b 0xa03c773a
0xffb6e6e0  0x993c7a3d 0x993e7b3f 0x98407c3e 0x9b417e46
0xffb6e6f0  0x9d3d793c 0x973f7c32 0x8f3c7f39 0x8f357b37
0xffb6e700  0x943c7937 0x96377d36 0x96388337 0x92348135
0xffb6e710  0x93308031 0x92308332 0x902f8330 0x9433802e
0xffb6e720  0x91307d2f 0x8b2f7e31 0x8b317f31 0x8c338135
0xffb6e730  0x8d328332 0x92328232 0x93338135 0x8e368339
0xffb6e740  0x8433843c 0x7e3f8244 0x783c823a 0x7b388136
0xffb6e750  0x7f358235 0x793d813b 0x7340823c 0x7d3a8231
0xffb6e760  0x872e8128 0x83268323 0x7a1f821a 0x89167917
0xffb6e770  0x92127912 0x8e148312 0x8c138517 0x83117c11
0xffb6e780  0x7b127a14 0x85167e19 0x8e167d16 0x89127c13
0xffb6e790  0x8213820d 0x860e7e0f 0x860f822a 0x814c875f
0xffb6e7a0  0x796a8571 0x79748473 0x81768272 0x80718071
0xffb6e7b0  0x7a6e8170 0x716c855c 0x78498034 0x82237a15
0xffb6e7c0  0x751e871b 0x6d1e8d1d 0x731f8b1b 0x791f8c1b
0xffb6e7d0  0x79198c1a 0x811e8e18 0x7b1d882e 0x79518967
0xffb6e7e0  0x7a74857a 0x7a7f847e 0x8082827d 0x7f7a827e
0xffb6e7f0  0x797c847c 0x7779837a 0x7c7d817b 0x7f7b8279
0xffb6e800  0x81247f24 0x84247e26 0x88217e28 0x81238126
0xffb6e810  0x7d268228 0x84248320 0x86287e29 0x8d277625
0xffb6e820  0x90257731 0x844f796e 0x81747d7b 0x825c7e61
0xffb6e830  0x7d7d8089 0x808c836f 0x9b548249 0x994b7c44
0xffb6e840  0x9c477f48 0x9f43834a 0x9b487f4e 0x9f467c48
0xffb6e850  0xa34c7b4a 0x9c4b784b 0x95487b49 0x93437e4f
0xffb6e860  0x824d7d56 0x725d765e 0x765d7a57 0x7d577b55
0xffb6e870  0x8651784a 0x954c7e4c 0x9f49804a 0xa54d7e45
0xffb6e880  0x9f477d46 0x914b7f4e 0x914e7d53 0x9145804c
0xffb6e890  0x8e487f45 0x88477f47 0x85458640 0x8a468848
0xffb6e8a0  0x99507e4c 0xa44d7b50 0xa54e7e4f 0x9c547958
0xffb6e8b0  0x9b5a725f 0x9c61725e 0x9f587a5a 0xa3597e53
0xffb6e8c0  0x9f537952 0x9e517650 0x9e4e7750 0x98507c4d
0xffb6e8d0  0x954d804c 0x934e8146 0x93458841 0x8c4c874f
0xffb6e8e0  0x8754865c 0x8465866a 0x83718673 0x8378837c
0xffb6e8f0  0x847f8181 0x7e858486 0x7a8b828e 0x7d90828d
0xffb6e900  0x7f928195 0x7f928192 0x7f958297 0x7f998196
0xffb6e910  0x7f968095 0x7f978095 0x7f948195 0x7f958195
0xffb6e920  0x80938196 0x80968095 0x7f928195 0x7f958194
0xffb6e930  0x81948192 0x80938290 0x7f968193 0x7f928193
0xffb6e940  0x80928295 0x7f928294 0x7891828c 0x827e7d6b
0xffb6e950  0x9b5c7d47 0xa0407f3c 0xa23e7941 0xa23c7639
0xffb6e960  0x9c3c7c39 0x9c407a3f 0x9a427b42 0x9a3e7f40
0xffb6e970  0x9a457b3c 0x933e7c3c 0x8c3b7f3b 0x8f397b3a
0xffb6e980  0x973d7737 0x94387b38 0x90338738 0x8e378339
0xffb6e990  0x8d387d30 0x8f32802f 0x8f357e2e 0x91308033
0xffb6e9a0  0x902c8234 0x8d307f30 0x89337c32 0x8a337e30
0xffb6e9b0  0x8c348231 0x8d328138 0x8f327d36 0x8f348039
0xffb6e9c0  0x8a3b8138 0x84487f3b 0x7d447f3b 0x7a398236
0xffb6e9d0  0x7f338337 0x803b8041 0x7e408139 0x7c388635
0xffb6e9e0  0x7c2a852d 0x7f278225 0x84207b1a 0x8b187515
0xffb6e9f0  0x8d147912 0x8b118312 0x8416830e 0x7c197d0f
0xffb6ea00  0x78187c0f 0x83167e19 0x8c117e15 0x84177e0f
0xffb6ea10  0x7c0e840f 0x830d7f11 0x820f8122 0x7c4a895b
0xffb6ea20  0x7a678872 0x7a748572 0x7e738472 0x7d728171
0xffb6ea30  0x79787f6d 0x756a8561 0x7b4c8236 0x8325791b
0xffb6ea40  0x7615861b 0x751c8a1b 0x791d831c 0x721d8919
0xffb6ea50  0x721c8e1a 0x7f198f19 0x8019832f 0x7b4d8561
0xffb6ea60  0x7870867b 0x7b7d827f 0x827f8079 0x7f81827c
0xffb6ea70  0x7a7b827e 0x797c807c 0x7d7a7e7c 0x807a8077
0xffb6ea80  0x7d228225 0x7f248424 0x89258427 0x87228424
0xffb6ea90  0x84268224 0x87258327 0x88268226 0x91267b27
0xffb6eaa0  0x91297a32 0x82547f6f 0x7d747f79 0x815a8061
0xffb6eab0  0x7d818288 0x7f888371 0x9749834a 0x93437b48
0xffb6eac0  0x9c4c7c48 0xa64a7f48 0x9c437e4a 0x9d487948
0xffb6ead0  0xa44b7d4b 0x9c4a7c4b 0x984a7d41 0x9a4b814b
0xffb6eae0  0x864c7e4e 0x7557765e 0x77607859 0x81587b54
0xffb6eaf0  0x8f517b4e 0x974a7c4c 0xa14a7e4b 0xa74a7c4b
0xffb6eb00  0xa24c7b4b 0x9248804e 0x8f50814d 0x904c814c
0xffb6eb10  0x924a7e47 0x8d448045 0x8a448443 0x8b438549
0xffb6eb20  0x974a7f4b 0xa74e7a4a 0xa74b7a4a 0x9d4e7757
0xffb6eb30  0x9d59745d 0x9f5a735a 0xa2537855 0xa2517c4d
0xffb6eb40  0x9d507951 0x9d4d7753 0x9f507c50 0x9d51814e
0xffb6eb50  0x9b4f814d 0x97438145 0x93468444 0x8d488651
0xffb6eb60  0x82518a5f 0x8565876c 0x876c8570 0x85748579
0xffb6eb70  0x857b847d 0x807e8487 0x7a86828b 0x7c8b828e
0xffb6eb80  0x7f938190 0x80918195 0x7f958194 0x7f978195
0xffb6eb90  0x7f978093 0x7e958097 0x7f958199 0x80958198
0xffb6eba0  0x7f948195 0x7f958192 0x80988196 0x80918092
0xffb6ebb0  0x81948190 0x81938290 0x80948192 0x7f908093
0xffb6ebc0  0x80948194 0x8096818f 0x7690828c 0x7b7b8174
0xffb6ebd0  0x965f7e4a 0xa03d7c3f 0xa23a7a3d 0xa43b783b
0xffb6ebe0  0xa33c793b 0x9f447a3f 0x9b417e40 0x9a45803d
0xffb6ebf0  0x96477d39 0x8d418135 0x8a41813c 0x8f377d3a
0xffb6ec00  0x993e7b3e 0x91317e38 0x8b388537 0x8b3f8239
0xffb6ec10  0x873b8044 0x8a4b8342 0x8e3d8539 0x9035832f
0xffb6ec20  0x902e8033 0x8e327f31 0x872c7f35 0x88358130
0xffb6ec30  0x8b348132 0x8a327e2b 0x8b397e35 0x9036803d
0xffb6ec40  0x8f3c8140 0x8c417f3d 0x823f7f3b 0x7b358035
0xffb6ec50  0x82378138 0x87388243 0x89428337 0x80398532
0xffb6ec60  0x7327832a 0x7c278123 0x8c1f7e1a 0x8d167913
0xffb6ec70  0x89147b11 0x8915810f 0x7e0f8212 0x78128214
0xffb6ec80  0x75168416 0x81168417 0x8a178114 0x80128211
0xffb6ec90  0x790e800e 0x82107c0f 0x81118025 0x7947845c
0xffb6eca0  0x7c688572 0x7e738472 0x7d748473 0x7a738271
0xffb6ecb0  0x7973826e 0x7c6f8359 0x804d8232 0x8423811b
0xffb6ecc0  0x7a178a19 0x7b228a1d 0x7c1c8719 0x6d1e8917
0xffb6ecd0  0x701d8c1b 0x801b8e1b 0x861f8826 0x7c528962
0xffb6ece0  0x76718579 0x7c7f8280 0x827f817d 0x7e7a827e
0xffb6ecf0  0x7c7b807e 0x7a7b827a 0x7d79817a 0x827a827a
0xffb6ed00  0x7a238521 0x7d288723 0x84258724 0x83248524
0xffb6ed10  0x7e238227 0x80238225 0x81248625 0x9023802a
0xffb6ed20  0x93277b33 0x80548169 0x7d788175 0x83598263
0xffb6ed30  0x7c7c828d 0x7e87826c 0x9346834c 0x8f497b47
0xffb6ed40  0x944a7843 0x9b467b49 0x99487b48 0x9948774b
0xffb6ed50  0x9d497d41 0x9d4f804b 0x9b4a7f48 0x96488147
0xffb6ed60  0x844c7e53 0x79577659 0x7b5c765c 0x83527c52
0xffb6ed70  0x904f7f4c 0x9b4b7c4a 0xa44a7b47 0xa84d784a
0xffb6ed80  0xa3497947 0x984b8049 0x964e844d 0x9748824a
0xffb6ed90  0x98477d44 0x93427f48 0x903e8041 0x90428040
0xffb6eda0  0x99467f42 0xa747784a 0xa640764b 0xa04d7652
0xffb6edb0  0x9d557553 0x9f597454 0xa3577556 0xa1507952
0xffb6edc0  0x9e4c7855 0xa050774d 0x9f4b8150 0x9b50844e
0xffb6edd0  0x9851804a 0x98478145 0x9644804a 0x8c49844e
0xffb6ede0  0x82538d5d 0x8764866a 0x886d8270 0x86718678
0xffb6edf0  0x8376877b 0x7d808582 0x7a838387 0x7c89828a
0xffb6ee00  0x808d8190 0x80928193 0x7f928193 0x7f958194
0xffb6ee10  0x7f958096 0x7f968194 0x80998194 0x80958197
0xffb6ee20  0x7f978195 0x7f968191 0x80998093 0x80938093
0xffb6ee30  0x80918093 0x818f8193 0x80928192 0x80968094
0xffb6ee40  0x80938094 0x7f958193 0x7891828d 0x7f7f8370
0xffb6ee50  0x98657d50 0x9e42773d 0xa03e7b3c 0xa33a793b
0xffb6ee60  0x9d417638 0x9a3e7a3f 0x9b407f42 0x9a417e42
0xffb6ee70  0x95427e3f 0x8d3e843d 0x8b3c843c 0x8f3d8037
0xffb6ee80  0x943b803a 0x8f3a8038 0x8f39833a 0x8e428041
0xffb6ee90  0x87428141 0x88408739 0x8d448b44 0x8b458637
0xffb6eea0  0x8d3b7e2d 0x8e2e8033 0x8b2d8135 0x882e8233
0xffb6eeb0  0x8c377e2e 0x90377c30 0x8b3a7e2e 0x8a3b8038
0xffb6eec0  0x8d368141 0x87407e41 0x823d7e3a 0x7f3d7e32
0xffb6eed0  0x81357f33 0x813d843d 0x7f3b863f 0x7c3d822b
0xffb6eee0  0x7a337f2b 0x82257e1f 0x871d7f1b 0x871a7b14
0xffb6eef0  0x88157912 0x84147d11 0x79117f14 0x7318830f
0xffb6ef00  0x72148d14 0x7d168917 0x7f168216 0x7d128212
0xffb6ef10  0x7f117c15 0x8c0d790d 0x82107e22 0x7643805a
0xffb6ef20  0x7b68816f 0x7d758272 0x7f748270 0x7d738470
0xffb6ef30  0x7c728270 0x7d6d8060 0x834c8137 0x8521891c
0xffb6ef40  0x751a8d1a 0x781c8b1f 0x7319871d 0x631d8719
0xffb6ef50  0x691a8919 0x78198b1c 0x7c178d24 0x7a4c8b64
0xffb6ef60  0x796e8577 0x7c80817e 0x817d827c 0x7e79837f
0xffb6ef70  0x7c7c7f79 0x7b788379 0x7b798479 0x7e788378
0xffb6ef80  0x7a218226 0x7e268026 0x81208226 0x80278220
0xffb6ef90  0x79248326 0x79258522 0x7d248726 0x9128832d
0xffb6efa0  0x92257d32 0x7f5a806e 0x7d788074 0x845a8167
0xffb6efb0  0x7b7f8389 0x7b878366 0x8f4c8544 0x8b417f45
0xffb6efc0  0x8d477e44 0x91458047 0x96477d49 0x96477947
0xffb6efd0  0x97447e4d 0xa1477f4d 0x9f497d4b 0x91488144
0xffb6efe0  0x844c7b4d 0x7c517758 0x7f557a57 0x87547b4f
0xffb6eff0  0x944e7d4a 0xa0487d48 0xa6427b49 0xa8447846
0xffb6f000  0xa4457b41 0x9e498149 0x9e458147 0xa2497d49
0xffb6f010  0x9f417f49 0x9841833f 0x94438246 0x9242813e
0xffb6f020  0x9b4a8249 0xa8497947 0xa74b7647 0xa34f7855
0xffb6f030  0x9f53765a 0xa0547256 0xa5567654 0xa04f784e
0xffb6f040  0xa0507851 0xa450794f 0xa14f814f 0x984d864e
0xffb6f050  0x944c8643 0x9946843f 0x9945824c 0x8b4f8657
0xffb6f060  0x84588a60 0x8968866a 0x89708373 0x87758579
0xffb6f070  0x827a857a 0x797f857c 0x78838587 0x7d85828a
0xffb6f080  0x808c8190 0x7f8e8192 0x7f938194 0x7f918095
0xffb6f090  0x7f948195 0x7f988294 0x80998191 0x80988196
0xffb6f0a0  0x7f968195 0x7f958196 0x80958092 0x7f958092
0xffb6f0b0  0x7f91818f 0x80938192 0x81918193 0x81938195
0xffb6f0c0  0x7f928194 0x7e918194 0x7a91828c 0x827f8374
0xffb6f0d0  0x9a607e4e 0x9d42783c 0x9e3f7c3d 0xa13f7b3a
0xffb6f0e0  0x993a773c 0x983e773f 0x9c427f46 0x9c417f48
0xffb6f0f0  0x96427e3b 0x8f40813a 0x8d398340 0x91378044
0xffb6f100  0x90387d41 0x8d397f41 0x933a833a 0x91428045
0xffb6f110  0x8744803f 0x8840843d 0x8f3a8838 0x893b8545
0xffb6f120  0x8c377d33 0x92317b2e 0x9138802a 0x8a358130
0xffb6f130  0x8f317d35 0x972e7a34 0x8c317c30 0x84378037
0xffb6f140  0x8b3b813c 0x843f7d3b 0x84417d3d 0x85387d32
0xffb6f150  0x81357f37 0x7d39813c 0x7842803c 0x79388136
0xffb6f160  0x812e7f29 0x87247e21 0x811d7f1c 0x81167f14
0xffb6f170  0x86138313 0x80118413 0x76118212 0x73138016
0xffb6f180  0x77178618 0x7f178317 0x79138218 0x7913810f
0xffb6f190  0x86107c10 0x960f7b10 0x87118122 0x7443835a
0xffb6f1a0  0x7a678270 0x7c718376 0x80748371 0x80708371
0xffb6f1b0  0x7e72826f 0x7e6a8161 0x884b8037 0x89218518
0xffb6f1c0  0x75168c17 0x771d8d1d 0x69198b19 0x59198c1b
0xffb6f1d0  0x641b8c1b 0x721c8b1b 0x72158c2a 0x794f8a63
0xffb6f1e0  0x7c6e857a 0x7c7d827e 0x807c827c 0x7f7b847a
0xffb6f1f0  0x7c7b8178 0x7c7a827d 0x78768478 0x7b798479
0xffb6f200  0x7d227e26 0x85277929 0x7e237924 0x75227d25
0xffb6f210  0x7224851e 0x77278824 0x7d268525 0x8e278327
0xffb6f220  0x8f248037 0x805b7e6b 0x7f7a7f6f 0x825b8265
0xffb6f230  0x797f838a 0x7a868562 0x8b4c8649 0x873f8445
0xffb6f240  0x8a438340 0x8e448346 0x91467f46 0x94487c44
0xffb6f250  0x96457e47 0x9d497d47 0x9e477c48 0x97458046
0xffb6f260  0x8b49794e 0x824c764f 0x89517b4e 0x914c7b4b
0xffb6f270  0x94467d45 0x9c437e42 0xa0497b40 0xa447783d
0xffb6f280  0xa3447c43 0x9c418147 0x9f4a7d42 0xa1487a48
0xffb6f290  0x9f408043 0x9d438644 0x98448248 0x96438244
0xffb6f2a0  0x9e448047 0xa7497947 0xa5487550 0xa2517953
0xffb6f2b0  0x9f54765f 0x9f587157 0xa0547853 0xa1517751
0xffb6f2c0  0xa2507650 0xa44c794c 0xa04b7e4a 0x9a52874a
0xffb6f2d0  0x994a8b49 0x9c43873e 0x974c844c 0x8b598a5a
0xffb6f2e0  0x8466876d 0x846e8670 0x80768478 0x827c837d
0xffb6f2f0  0x817e8381 0x7b7e877f 0x7b838785 0x7f84848c
0xffb6f300  0x8088828e 0x80908191 0x8092808f 0x7f928095
0xffb6f310  0x7f908193 0x7f948296 0x7f928297 0x7f978196
0xffb6f320  0x7e958096 0x7f958095 0x80958095 0x80948091
0xffb6f330  0x7e918191 0x7f928192 0x81928190 0x81948093
0xffb6f340  0x7f938195 0x7d928293 0x788e828c 0x7f828371
0xffb6f350  0x96677d52 0x9d457a3f 0x9d3b7d41 0x9e3b7d3a
0xffb6f360  0x9a3e7941 0x9c3e733c 0x9c3d7d41 0x9d438047
0xffb6f370  0x993f7c44 0x903c7f3b 0x9140803a 0x8f3e7d3c
0xffb6f380  0x8d3c7a3f 0x903b7c3a 0x9038823e 0x8b447f48
0xffb6f390  0x85497d45 0x8944813e 0x8d34833a 0x8537833d
0xffb6f3a0  0x8c437b38 0x98377532 0x932e7d33 0x8b337f34
0xffb6f3b0  0x8c2e7b35 0x91317731 0x8a327b32 0x86358038
0xffb6f3c0  0x86338142 0x843e7c3f 0x84407b3c 0x84397c35
0xffb6f3d0  0x80337e30 0x7f3b7b3e 0x7c41793c 0x76367f32
0xffb6f3e0  0x7a307d29 0x84247d21 0x821f7d19 0x801b820f
0xffb6f3f0  0x7e128a12 0x7c108a11 0x74128412 0x72147d16
0xffb6f400  0x79157d16 0x7e177e15 0x7d157f15 0x7c117d13
0xffb6f410  0x820f7a0b 0x8c0f7d11 0x840d8220 0x753e8554
0xffb6f420  0x796a836e 0x7c738474 0x7f738472 0x7d748271
0xffb6f430  0x7c708370 0x7d6c825e 0x834d7e3b 0x88267f1c
0xffb6f440  0x7914891a 0x74188e1d 0x711c8e1c 0x661c8f17
0xffb6f450  0x691d8c19 0x731a8817 0x77158c25 0x7b488960
0xffb6f460  0x7b6e8575 0x797d837d 0x7a7d827b 0x7c7b8579
0xffb6f470  0x7d7b827a 0x7d7a8277 0x7c7b8377 0x7b778577
0xffb6f480  0x80287d20 0x8b277924 0x7d287d21 0x6a258024
0xffb6f490  0x6e268522 0x7a258524 0x7f258325 0x8c277d25
0xffb6f4a0  0x8c287c38 0x825b7f6e 0x8278806d 0x82538068
0xffb6f4b0  0x787f828b 0x7985855f 0x873f8443 0x8443813e
0xffb6f4c0  0x8c437e41 0x8d417d41 0x8d427d42 0x923e7d41
0xffb6f4d0  0x943b7d41 0x993f7b48 0x9d427940 0x9e427e44
0xffb6f4e0  0x91447f40 0x894b7c4a 0x964a7d51 0x9b447d48
0xffb6f4f0  0x97487f42 0x9a427f41 0x9b417e42 0xa0407d44
0xffb6f500  0xa3477b3f 0x9b417c45 0x9f4b7c40 0x9f487b45
0xffb6f510  0xa1447e48 0xa3497f47 0x9c4a8042 0x9a467f48
0xffb6f520  0xa1447e46 0xa7477848 0xa3487150 0xa1557456
0xffb6f530  0x9f5d735d 0x9d5a775a 0x9c567954 0xa24e764e
0xffb6f540  0xa550784d 0xa54d7c4b 0x9f487f4e 0x9b4b834d
0xffb6f550  0xa14b8648 0xa145864c 0x974e8457 0x89608664
0xffb6f560  0x866f8870 0x7f748578 0x797a857f 0x7c838683
0xffb6f570  0x7f848584 0x7e848485 0x7e848584 0x82878387
0xffb6f580  0x808d828b 0x808f8191 0x81948190 0x7f928192
0xffb6f590  0x7f948193 0x7f928194 0x7f958294 0x7e948295
0xffb6f5a0  0x7e948195 0x80998191 0x80978094 0x80928194
0xffb6f5b0  0x7e928193 0x7e8f8094 0x80918194 0x81948193
0xffb6f5c0  0x80928194 0x7d918293 0x7691828a 0x7c828276
0xffb6f5d0  0x92657f56 0x9d3d7b3f 0x9e3e7c3e 0x9c3c7c37
0xffb6f5e0  0x9c3b773b 0xa13a743d 0x9f3d7a44 0xa13f7b45
0xffb6f5f0  0x9c417c39 0x913f803c 0x933e823c 0x8d3e7f3a
0xffb6f600  0x8a3f7d3c 0x923b813b 0x8f3c8537 0x8445814a
0xffb6f610  0x834b7d4a 0x8b4b8142 0x8a3a8738 0x8036873b
0xffb6f620  0x8c437f3f 0x9d3a7930 0x95347e2d 0x8c327e34
0xffb6f630  0x8a34792d 0x89337b2f 0x89338033 0x8834813a
0xffb6f640  0x8337803f 0x85447e3b 0x86437e3b 0x82347f33
0xffb6f650  0x7f338136 0x7f3b803e 0x7f43803b 0x73388234
0xffb6f660  0x722a7e2c 0x80247f21 0x811f8117 0x82188117
0xffb6f670  0x7d0e8512 0x7b12870f 0x76118613 0x72118416
0xffb6f680  0x791a8413 0x7f168218 0x83168019 0x80107c14
0xffb6f690  0x7e107b0f 0x840d7c10 0x82108222 0x773f8558
0xffb6f6a0  0x77648471 0x7d718377 0x7d738472 0x79708371
0xffb6f6b0  0x7a708370 0x7b6e835e 0x7e4e8035 0x88297d14
0xffb6f6c0  0x7e188a16 0x74169021 0x7c1b8c1d 0x7a158a19
0xffb6f6d0  0x71188a19 0x7719891a 0x7b208b21 0x7b4c8960
0xffb6f6e0  0x7a6d8576 0x767c837c 0x737b827e 0x7a7c857c
0xffb6f6f0  0x7f7e8379 0x7e778179 0x7e7a837a 0x7c768575
0xffb6f700  0x7e237a26 0x7f267a24 0x7d237e23 0x76248123
0xffb6f710  0x75248227 0x78228126 0x7a247f25 0x8f277725
0xffb6f720  0x8d2c7936 0x8157806b 0x8477806a 0x82547e6d
0xffb6f730  0x79837f8a 0x7d81855b 0x8f458241 0x8c3a7e3c
0xffb6f740  0x8d3b793c 0x8938773b 0x893a7b3b 0x8e3b7d3b
0xffb6f750  0x923a7c3c 0x973c7a40 0x993e773d 0x9b417b40
0xffb6f760  0x973f8347 0x8f3f8346 0x96468046 0x9d447d45
0xffb6f770  0x9d427f42 0xa0428141 0xa23f823c 0xa6428244
0xffb6f780  0xa4487942 0x9c4a7943 0xa044794a 0xa1427c42
0xffb6f790  0xa1457c48 0xa2457946 0xa0447d45 0x9e477d46
0xffb6f7a0  0xa2457d47 0xa545774a 0xa04f7055 0x9d566d5f
0xffb6f7b0  0x965d7061 0x965a7c5c 0x995b7a55 0xa050744f
0xffb6f7c0  0xa34c7a51 0xa2457e4a 0x9b4b7e4b 0x9a507f4c
0xffb6f7d0  0x9a478248 0x934a864b 0x8d59855e 0x8466856c
0xffb6f7e0  0x81738676 0x7d79877c 0x79848585 0x7c888684
0xffb6f7f0  0x7f8a848a 0x7d898289 0x7e8a828a 0x8189818c
0xffb6f800  0x808e8190 0x7f8d8191 0x80918193 0x7f8f8195
0xffb6f810  0x7e928194 0x7f958194 0x80928293 0x7f958197
0xffb6f820  0x7f968194 0x80948196 0x80948094 0x80938095
0xffb6f830  0x7f94808f 0x80948190 0x81908093 0x81918192
0xffb6f840  0x80958192 0x7d918292 0x7894828a 0x80848277
0xffb6f850  0x90698058 0x99477c44 0x9f3b7a3d 0x9e3e7839
0xffb6f860  0x9e42743a 0x9f3e7537 0x9e3f773e 0xa03f7740
0xffb6f870  0x9f437a3e 0x9341803b 0x8e3e823c 0x8d3c803b
0xffb6f880  0x8b427f38 0x8d3f8541 0x8b3c8641 0x853d804e
0xffb6f890  0x86517d4c 0x864d8145 0x863a8a39 0x88368a3b
0xffb6f8a0  0x8d3b8442 0x943e7d32 0x922f7e32 0x8c327b30
0xffb6f8b0  0x8830772f 0x8c337e2b 0x8d2f8332 0x8c338137
0xffb6f8c0  0x85367d3e 0x82417e42 0x8540803c 0x84398135
0xffb6f8d0  0x80338235 0x7c37843c 0x7b42853b 0x763d8433
0xffb6f8e0  0x7a2f7e29 0x81248023 0x7f1e8419 0x82188014
0xffb6f8f0  0x7f157e14 0x820d8215 0x80108714 0x74118a16
0xffb6f900  0x72198915 0x7e138717 0x85118017 0x84127910
0xffb6f910  0x7d0f7a0f 0x840f780f 0x860d7f1d 0x78408654
0xffb6f920  0x7766836f 0x7b748270 0x7a718473 0x78738373
0xffb6f930  0x796e8270 0x7a6e835f 0x82538039 0x88277a1d
0xffb6f940  0x7b158a13 0x6c1d901c 0x7a1a861b 0x7e1b8517
0xffb6f950  0x7a1b861c 0x7a188919 0x7b188a27 0x7c438a5c
0xffb6f960  0x796d8476 0x78788282 0x787a817c 0x797d8479
0xffb6f970  0x7d7b857c 0x7e798277 0x7c798377 0x79788578
0xffb6f980  0x7a257c23 0x71257f25 0x7d238126 0x81298121
0xffb6f990  0x7c248025 0x79257f23 0x76258025 0x91287429
0xffb6f9a0  0x9027773e 0x80597f6d 0x87777e68 0x85547c6b
0xffb6f9b0  0x7a80808c 0x817e8753 0x963d853e 0x93398034
0xffb6f9c0  0x8e377b3a 0x86387938 0x843d7e3b 0x8c3d7d3b
0xffb6f9d0  0x9239793d 0x973d7a3d 0x953e7e3f 0x983d8044
0xffb6f9e0  0x9d428240 0x99468041 0x98468042 0xa0437f48
0xffb6f9f0  0xa5447b42 0xa9467e42 0xab428242 0xac427f48
0xffb6fa00  0xa6477a3b 0x9d447b42 0xa14a7b47 0xa4457b4a
0xffb6fa10  0xa2487b46 0xa1487948 0xa3497a45 0xa4467847
0xffb6fa20  0xa5487942 0xa4497a48 0x9d507351 0x985c6e61
0xffb6fa30  0x90647066 0x8f667867 0x97597855 0x9f52754d
0xffb6fa40  0xa24d794c 0x9d437d4a 0x97487f4d 0x984c814b
0xffb6fa50  0x9345844d 0x874b8857 0x855e8763 0x816c8876
0xffb6fa60  0x7e75867c 0x7c7e8784 0x7a878587 0x7e8a838c
0xffb6fa70  0x808d828a 0x7e8c818d 0x808e818b 0x808e818d
0xffb6fa80  0x80928190 0x7f908192 0x7f918093 0x7e918090
0xffb6fa90  0x7d948296 0x7f958192 0x81968295 0x80928193
0xffb6faa0  0x80968196 0x80948190 0x80968096 0x80918094
0xffb6fab0  0x7f918092 0x81948193 0x8294818e 0x81938192
0xffb6fac0  0x80928092 0x7e928190 0x7a90828f 0x84868278
0xffb6fad0  0x8c688259 0x964a7d3e 0xa143793e 0xa03e773e
0xffb6fae0  0xa03d723c 0x9e3c743c 0x9d3c783a 0x9d427a3f
0xffb6faf0  0xa2437b3f 0x953d7e3a 0x893a8145 0x8f3d803f
0xffb6fb00  0x8e417f44 0x8b3b823e 0x873e823d 0x88398251
0xffb6fb10  0x87517f50 0x824f804a 0x84418738 0x933b8836
0xffb6fb20  0x9239873c 0x8b3f8235 0x90317f30 0x8b317e30
0xffb6fb30  0x87307e2b 0x91367f32 0x93328131 0x90328335
0xffb6fb40  0x873a813c 0x7f437f42 0x8442803a 0x873a8232
0xffb6fb50  0x83338234 0x7b36823f 0x7a3f833d 0x7c3a8132
0xffb6fb60  0x832e7f27 0x85237f22 0x7f218116 0x81187f14
0xffb6fb70  0x84157e0f 0x8913820f 0x8c178513 0x7e168415
0xffb6fb80  0x72178317 0x80178315 0x8a178114 0x89127d12
0xffb6fb90  0x81137c08 0x870f7b14 0x8a0c8521 0x7a408559
0xffb6fba0  0x7764836f 0x78728273 0x79738273 0x78718274
0xffb6fbb0  0x796e8271 0x7c6c8260 0x86528037 0x89217d1c
0xffb6fbc0  0x79198c15 0x62198f1c 0x741e8a1b 0x811a8818
0xffb6fbd0  0x8118871c 0x7d198a1b 0x7d178b1f 0x7d468a61
0xffb6fbe0  0x776c8575 0x797c847d 0x7a7d847b 0x797b857c
0xffb6fbf0  0x7d7b8479 0x7e79827a 0x76768477 0x77778579
0xffb6fc00  0x7f267c22 0x7b258024 0x7b228224 0x7e268021
0xffb6fc10  0x7d297c24 0x7b267c23 0x82227e25 0x94267027
0xffb6fc20  0x8e2a763b 0x81577d6a 0x87737c65 0x874f7b70
0xffb6fc30  0x7a7f8089 0x7b7c8853 0x91458640 0x93378339
0xffb6fc40  0x8e3e7d3c 0x89397a3d 0x86387f3a 0x88407c3c
0xffb6fc50  0x8d3d763d 0x903a7b3c 0x9037833d 0x963e843d
0xffb6fc60  0x95408241 0x91417d43 0x96457f41 0x9f3b7d48
0xffb6fc70  0x9f49783e 0xa0457943 0xa2448043 0xa9447c47
0xffb6fc80  0xa4447a43 0x9d477c46 0xa2477a4a 0xa24d7946
0xffb6fc90  0xa043794c 0xa24a7847 0xa3477645 0xa2497446
0xffb6fca0  0xa3487447 0xa53f7b4b 0xa24e7658 0x985a6e5e
0xffb6fcb0  0x8f6d7063 0x8e627368 0x985b7654 0xa34f754d
0xffb6fcc0  0xa5477948 0x9e457a47 0x9644804b 0x92458349
0xffb6fcd0  0x8b48864e 0x854e8a59 0x8266886b 0x806f8777
0xffb6fce0  0x807a887e 0x7f848784 0x7b8a8389 0x7e8b828d
0xffb6fcf0  0x808b818e 0x7f8b8192 0x7e8b818f 0x808e8091
0xffb6fd00  0x80908191 0x80908196 0x80938091 0x7f928095
0xffb6fd10  0x7e908290 0x7e948296 0x7f958094 0x7f948095
0xffb6fd20  0x7f948194 0x7f968192 0x80948194 0x80938094
0xffb6fd30  0x7f938095 0x80938190 0x818f8292 0x80948192
0xffb6fd40  0x80948092 0x7e918091 0x7b92828d 0x828a827c
0xffb6fd50  0x8b6a825c 0x994f7c40 0x9e3f793e 0x9d3c7345
0xffb6fd60  0xa0426e3e 0x9f39743e 0x9e3b7a3c 0x9b3f7d3e
0xffb6fd70  0x99407c3a 0x96417a45 0x90397d3f 0x8f3f8140
0xffb6fd80  0x8f438040 0x8c427e42 0x8b3d7e3f 0x8a3a824a
0xffb6fd90  0x83558251 0x80527e51 0x8840813b 0x91358736
0xffb6fda0  0x8b348b3b 0x883b8742 0x8c357f30 0x892e7f31
0xffb6fdb0  0x8831802f 0x8c347d31 0x8a357e30 0x8b318338
0xffb6fdc0  0x8535843f 0x7e467f41 0x813e803f 0x7f378333
0xffb6fdd0  0x7d338233 0x7e3e7e37 0x7e448040 0x803b7f39
0xffb6fde0  0x822e7f28 0x81267f25 0x7f1f7e17 0x7c1b7e16
0xffb6fdf0  0x81117c10 0x82128012 0x86118117 0x86187d14
0xffb6fe00  0x7a1b7c12 0x7f177d15 0x89158115 0x8a118014
0xffb6fe10  0x870e7c0f 0x8a107b0d 0x860f8917 0x793c8554
0xffb6fe20  0x7665826a 0x78728272 0x7c757f71 0x7c718070
0xffb6fe30  0x7a708170 0x7c6d825f 0x84537f40 0x85277f19
0xffb6fe40  0x76168d17 0x6e198f1a 0x731a8b17 0x7d198a1b
0xffb6fe50  0x80188519 0x7a1a891a 0x7d128c22 0x7d45875c
0xffb6fe60  0x766b8575 0x787a857d 0x7a7a887c 0x7a7a857b
0xffb6fe70  0x7d7c827a 0x7d798379 0x7c788476 0x7b7a8476
0xffb6fe80  0x86237f25 0x85257f23 0x7c257f23 0x7d248227
0xffb6fe90  0x7d238122 0x7e267e25 0x8c267e24 0x972b7623
0xffb6fea0  0x8c297a3a 0x835d8169 0x87717f60 0x89507c6e
0xffb6feb0  0x7c7f818b 0x75748656 0x903f843d 0x953e8136
0xffb6fec0  0x913b7e39 0x8e397d3b 0x893a7f3a 0x843b7937
0xffb6fed0  0x893c793b 0x89377f3b 0x8c3c853e 0x953b833e
0xffb6fee0  0x8c3f823c 0x863a8047 0x94437e41 0x9e467e42
0xffb6fef0  0x9a3d7a46 0x963f7c44 0x9a41804a 0xa3467f47
0xffb6ff00  0xa2487e41 0x9e457b49 0xa34a7947 0x9f477c45
0xffb6ff10  0x9f4a7946 0xa34a784a 0xa24a7848 0x9e427847
0xffb6ff20  0xa1497944 0xa846784d 0xa6557355 0x97597263
0xffb6ff30  0x8e687764 0x8c667763 0x995d7754 0xa852784a
0xffb6ff40  0xa8497847 0x9c3f7b43 0x9648814a 0x8d458546
0xffb6ff50  0x83448750 0x83568961 0x81698970 0x80708774
0xffb6ff60  0x847e8580 0x83818587 0x7d84858c 0x7c888488
0xffb6ff70  0x818b8289 0x808a828c 0x7d8c828c 0x7f8f818e
0xffb6ff80  0x808c8190 0x818e8190 0x818e818e 0x7f8f8192
0xffb6ff90  0x7f928196 0x7e948294 0x7e958294 0x7f938195
0xffb6ffa0  0x7f958193 0x7f958296 0x80938196 0x81958096
0xffb6ffb0  0x7f928094 0x7f948094 0x81928295 0x80918193
0xffb6ffc0  0x7f928095 0x7e918092 0x7d91818e 0x7f87837a
0xffb6ffd0  0x8b69835f 0x9f467942 0x9c407941 0x9b3e7941
0xffb6ffe0  0x9e43783a 0xa0427938 0xa03f7b44 0x9b3d7c3e
0xffb6fff0  0x93407b43 0x963e7a49 0x963c7d40 0x91427f43
0xffb70000  0x90417d44 0x8c447e43 0x8e3e7e3d 0x8c3c8149
0xffb70010  0x80567f51 0x7d567f50 0x8b4b8145 0x91358436
0xffb70020  0x87338839 0x863c8742 0x8b338131 0x892e8033
0xffb70030  0x8a317f35 0x88327c32 0x832d7d35 0x8936813a
0xffb70040  0x86378444 0x7f428242 0x803d823e 0x79338435
0xffb70050  0x7a348239 0x82397f3f 0x843d7e42 0x853c8132
0xffb70060  0x82328424 0x7f258125 0x7e207b1a 0x78167e14
0xffb70070  0x80138012 0x81137d11 0x82187f16 0x8d178116
0xffb70080  0x81168116 0x7d117f17 0x8b177e14 0x8d117e10
0xffb70090  0x8d0f800f 0x900e7b0b 0x8613841d 0x793a8653
0xffb700a0  0x7662836f 0x78738272 0x7e758071 0x7f738171
0xffb700b0  0x7b6f826f 0x7d6d8164 0x85518039 0x83268118
0xffb700c0  0x78178c17 0x7a198f1b 0x74198c17 0x78198e1d
0xffb700d0  0x7d1b8a17 0x7a198619 0x821a8726 0x7e398a5c
0xffb700e0  0x776b8674 0x787a857b 0x7b7e867b 0x7c79867b
0xffb700f0  0x7b79857b 0x7c76837b 0x8178827a 0x7f768375
0xffb70100  0x81228028 0x85267b23 0x81237b25 0x80238126
0xffb70110  0x7e208424 0x81277f24 0x87257e24 0x8f237a26
0xffb70120  0x852a7f3b 0x7f588465 0x8672815e 0x884d7e6d
0xffb70130  0x7e7e8187 0x7b798450 0x8e3c823f 0x8f3d7d3b
0xffb70140  0x8a3a7e3b 0x8c3b7f3b 0x8c3a7e3b 0x873b7941
0xffb70150  0x88377d3b 0x8a3c843e 0x8c35863d 0x8f3c833b
0xffb70160  0x8c448139 0x8b3d8045 0x933b7c3b 0x9b457d3a
0xffb70170  0x97417d41 0x95407c42 0x9a447e44 0x9e448245
0xffb70180  0x9c477f48 0x9b49784a 0xa14a774a 0xa0427c4a
0xffb70190  0xa34b794a 0xa3497746 0xa3487a45 0xa2497d49
0xffb701a0  0xa3417e4a 0xa84b754b 0xa3556f51 0x985d7562
0xffb701b0  0x8d647e64 0x8c677b60 0x9b577952 0xa64e7a48
0xffb701c0  0xa5477847 0x9c3f7c40 0x91448449 0x8a478445
0xffb701d0  0x8549874f 0x83508861 0x7e668a6d 0x7b708776
0xffb701e0  0x817b837f 0x80838485 0x7d878586 0x7d848486
0xffb701f0  0x7e858485 0x7e8a8587 0x7c868588 0x7e8a8488
0xffb70200  0x7f8b828d 0x8288828b 0x828b818b 0x7e8b828e
0xffb70210  0x7f938191 0x7e918293 0x7e948294 0x7f968295
0xffb70220  0x80998195 0x7f948295 0x7f968195 0x7f958194
0xffb70230  0x7f948095 0x7f928095 0x80958294 0x80948195
0xffb70240  0x7f938092 0x7f928092 0x7e937f8f 0x7e86827a
0xffb70250  0x8b6e835a 0x9e4c7744 0x9c45793e 0x9d3f7d41
0xffb70260  0x9e41813f 0x9a407e45 0x9b417b3c 0x9b467c40
0xffb70270  0x99447a46 0x9842793e 0x94457c3e 0x8f437d46
0xffb70280  0x93487a44 0x92477c41 0x94437d40 0x933d7d47
0xffb70290  0x85587d5c 0x7d587f58 0x894f8142 0x943a8035
0xffb702a0  0x8b338536 0x8738863d 0x8b398134 0x8a2e8031
0xffb702b0  0x8c347f30 0x88357a2e 0x85337b2d 0x89367e3c
0xffb702c0  0x8236813f 0x7e448442 0x7f438239 0x7d3a8235
0xffb702d0  0x7d31812f 0x7e387e43 0x7d417e40 0x7f398435
0xffb702e0  0x8430872c 0x83268227 0x82257519 0x7b187c13
0xffb702f0  0x7e118119 0x83107a17 0x7d147d13 0x85178515
0xffb70300  0x81178410 0x7d178016 0x88197914 0x8b137a11
0xffb70310  0x85098110 0x870f770f 0x83117e1a 0x78308756
0xffb70320  0x7761836d 0x78728174 0x7d738171 0x7e718270
0xffb70330  0x7b70826e 0x786e8262 0x82518140 0x85298017
0xffb70340  0x7a1a8a17 0x79168e1d 0x721b8d15 0x721b911a
0xffb70350  0x7a198e1a 0x791e831c 0x7d16851b 0x7c3f8b56
0xffb70360  0x77668877 0x7979857b 0x7e7b847a 0x7d7a8577
0xffb70370  0x787c8776 0x7a7c8378 0x7d788177 0x7d748274
0xffb70380  0x7c238226 0x84268125 0x85247f22 0x86247f24
0xffb70390  0x83248224 0x85248126 0x85267f22 0x89277924
0xffb703a0  0x82287e3e 0x7d5c836a 0x8571825a 0x89517f6f
0xffb703b0  0x81818083 0x8175844b 0x8f3d803d 0x8b367d41
0xffb703c0  0x8434803a 0x8a3b7f3d 0x913d803b 0x88387d3b
0xffb703d0  0x863b7f3f 0x8c3b833f 0x8d3c813a 0x8b3e7e3e
0xffb703e0  0x8c3c803d 0x8f40823b 0x93407e38 0x99447d3d
0xffb703f0  0x963f7c3e 0x953d7c42 0x9a477f3b 0x9a488140
0xffb70400  0x96458045 0x99447b4b 0x9f49794a 0xa347794a
0xffb70410  0xa84e7844 0xa34a794a 0xa44a7948 0xa74b7a48
0xffb70420  0xa7447b47 0xa94c754c 0x9f50705b 0x995a6f61
0xffb70430  0x9062735f 0x8d5f795c 0x9e56794e 0xa44f7a40
0xffb70440  0xa1467a43 0x9c417f40 0x8d458346 0x86438743
0xffb70450  0x8648894a 0x83538965 0x7c6b886d 0x77748672
0xffb70460  0x7e78837a 0x7f808484 0x7d828583 0x7f80837c
0xffb70470  0x7d7e847f 0x7e838481 0x7e7e857c 0x7f7d857c
0xffb70480  0x7e7c847c 0x7f7d857e 0x81838682 0x7b868588
0xffb70490  0x7d8f828e 0x7f948294 0x7f948199 0x80968199
0xffb704a0  0x80988193 0x7f938294 0x7f958195 0x7f938195
0xffb704b0  0x7f948193 0x7f958196 0x80918195 0x7f938191
0xffb704c0  0x7f928095 0x80938190 0x7f94808b 0x7e86827d
0xffb704d0  0x8c6c835b 0x9d4d7941 0x9c437b45 0xa0407c45
0xffb704e0  0xa0447c3f 0x953e7a47 0x96417a43 0x9e457a3e
0xffb704f0  0xa0487742 0x9c447a43 0x913f7c45 0x8f477f45
0xffb70500  0x96457d4b 0x964a7e47 0x98437c49 0x99417a47
0xffb70510  0x8a577d5e 0x7f5d7d5a 0x88557e46 0x973a8039
0xffb70520  0x8d2f8436 0x8a38853a 0x8a3c8330 0x8c2f8133
0xffb70530  0x8e347d2d 0x88327b34 0x8a317b34 0x8b337e38
0xffb70540  0x823a8140 0x7e438140 0x8042833b 0x84398330
0xffb70550  0x82328033 0x7b397f3c 0x77408143 0x7c3c8537
0xffb70560  0x8832842a 0x87257c25 0x851f781f 0x7f187e15
0xffb70570  0x7f0f8117 0x82138315 0x78148018 0x81157f16
0xffb70580  0x84168215 0x7e158016 0x82177d14 0x8b127c12
0xffb70590  0x820f7e0e 0x7d0b7c0f 0x7f107f1a 0x79398453
0xffb705a0  0x7a63826c 0x79718373 0x7b728273 0x7e718470
0xffb705b0  0x7c71826e 0x746a8060 0x82547f43 0x88258117
0xffb705c0  0x7f1a8618 0x7d198f1a 0x741a8d1a 0x761a8b19
0xffb705d0  0x7c1b8e18 0x79198a1b 0x791d861a 0x7d42885a
0xffb705e0  0x7a6b8673 0x7a78857f 0x807c847c 0x7e788578
0xffb705f0  0x75778677 0x777b8476 0x77748378 0x78758472
0xffb70600  0x81248323 0x84278722 0x81268428 0x83207c25
0xffb70610  0x7f247f22 0x7e258324 0x86257e2a 0x8f28761f
0xffb70620  0x852d7c43 0x7d5c8069 0x836e8259 0x85537f6d
0xffb70630  0x7c817f86 0x7d6f834d 0x90447d41 0x8e3c7b3b
0xffb70640  0x873b7f39 0x86417d3a 0x8937813e 0x8839813f
0xffb70650  0x873e8139 0x8a3e813e 0x8e407b3c 0x8c3c7b3d
0xffb70660  0x8b3f7e3c 0x8a3c8339 0x8c43813a 0x933c7d3b
0xffb70670  0x93397c3c 0x92457b3a 0x923b7d41 0x923e7f42
0xffb70680  0x923f803f 0x95487e4a 0xa13e7c49 0xa74a754b
0xffb70690  0xa8487845 0xa74d7a4a 0xa749774b 0xa546784a
0xffb706a0  0xa4487945 0xa84c734f 0xa2536f59 0x9b596a61
0xffb706b0  0x955d6c5f 0x935a7754 0x9e50794e 0xa5487948
0xffb706c0  0xa0467c42 0x99418145 0x8a488446 0x8643883b
0xffb706d0  0x87468a4f 0x81578966 0x7e6e866d 0x7d6f866f
0xffb706e0  0x7f6d8375 0x7f7a837f 0x7f7e847b 0x81778373
0xffb706f0  0x7e74846d 0x7d75866f 0x7b6f886a 0x7c6d896f
0xffb70700  0x7b6f8872 0x7b748874 0x7f7a8879 0x7c848782
0xffb70710  0x78848686 0x7c8a828b 0x7f948195 0x80968094
0xffb70720  0x7f948195 0x7e928196 0x7e928294 0x7f958294
0xffb70730  0x7f948294 0x80958196 0x7f948195 0x7e8f8292
0xffb70740  0x7f968192 0x8090818f 0x7e91818e 0x7e88807a
0xffb70750  0x896e825c 0x9a4f7c49 0x9d3f7b42 0x9f457946
0xffb70760  0x9e447645 0x99437745 0x99417843 0x9b457843
0xffb70770  0x9d497443 0x9d457740 0x97487d43 0x93418043
0xffb70780  0x944a7e49 0x9a447f48 0x9f4b7b49 0x973f774c
0xffb70790  0x85597c5a 0x7e647b5c 0x89587b4a 0x973b8232
0xffb707a0  0x8d3c8332 0x8835843b 0x8c3c8233 0x8c338233
0xffb707b0  0x87357c35 0x83327c31 0x88357c32 0x88327e2f
0xffb707c0  0x803d7f45 0x82427d3f 0x833e843b 0x84368235
0xffb707d0  0x82337f31 0x7b39813c 0x753f853e 0x7c3a8637
0xffb707e0  0x8531802b 0x852c7826 0x841b7c1c 0x82148014
0xffb707f0  0x7f167f0e 0x7d108915 0x7d168215 0x80167816
0xffb70800  0x7a177e13 0x7a167e15 0x7f177e13 0x85127c11
0xffb70810  0x840f780e 0x810d7d0b 0x820d801f 0x7836804c
0xffb70820  0x7561816c 0x796f8272 0x7b738470 0x7d6e8672
0xffb70830  0x7b6d8170 0x77707d62 0x82527e41 0x8a27801d
0xffb70840  0x821b8216 0x76168d1b 0x6f178e1c 0x77178321
0xffb70850  0x7c168a19 0x7b178d1a 0x7c1c8617 0x7a38855a
0xffb70860  0x75678574 0x7777857b 0x7d7b8579 0x7c7a857a
0xffb70870  0x78788578 0x7a778477 0x7b778373 0x7b758574
0xffb70880  0x88248126 0x87248424 0x80238325 0x80258022
0xffb70890  0x7b258324 0x78258424 0x87298225 0x92287b24
0xffb708a0  0x87267d45 0x7d607f68 0x826d805c 0x82568070
0xffb708b0  0x767d8184 0x7770854e 0x91427e3c 0x8f3c7f3f
0xffb708c0  0x8c3a803a 0x853d7d3b 0x823f803e 0x8a3c813f
0xffb708d0  0x8b3b813a 0x893c7f3f 0x8c3d7d40 0x8d3e7d3f
0xffb708e0  0x893d7e3e 0x873d813c 0x873c803c 0x8c3f7e3a
0xffb708f0  0x8f3f7f3c 0x8c387e3f 0x89427c39 0x8b3c7d40
0xffb70900  0x8f408041 0x903f7e44 0xa44e7b47 0xac497847
0xffb70910  0xa844774e 0xac49774b 0xaa47774a 0xa444764d
0xffb70920  0xa346764b 0xa84c734f 0xa5536e5a 0x9d5c6d5d
0xffb70930  0x99586f5e 0x99587551 0x9e4e784c 0xa5477b4b
0xffb70940  0xa2447d44 0x9748844d 0x86478a47 0x83478d46
0xffb70950  0x884f8d55 0x7f61866b 0x8171866e 0x836b876a
0xffb70960  0x8169856e 0x81748279 0x82768472 0x866a8561
0xffb70970  0x815f8860 0x7b638b5c 0x755b8e5e 0x775b8d5f
0xffb70980  0x74618965 0x7665896c 0x7c708773 0x7e7d8781
0xffb70990  0x77818786 0x7884838a 0x808c818d 0x808f8192
0xffb709a0  0x7f948093 0x7e948194 0x7b8f8291 0x7f938192
0xffb709b0  0x80958291 0x80958194 0x7e918194 0x7c928293
0xffb709c0  0x7e948193 0x808f8194 0x7e8c8190 0x7e878480
0xffb709d0  0x896f8361 0x99517c46 0x9e447a44 0x9f457946
0xffb709e0  0x9b437645 0x9c477a44 0x9c437e42 0x99467a42
0xffb709f0  0x9c4a7646 0x9f477945 0x9e467d42 0x98437f42
0xffb70a00  0x944a7b45 0x9d4e7d48 0xa44b7e43 0x93497a4a
0xffb70a10  0x80577c61 0x7c5f7d5e 0x8a5b7b52 0x983d7e36
0xffb70a20  0x8c368335 0x85378638 0x8d3b8331 0x8d367d31
0xffb70a30  0x82327b32 0x7f307e33 0x89387e2f 0x87327d3b
0xffb70a40  0x81387f43 0x86428040 0x87418037 0x85348034
0xffb70a50  0x852f7f31 0x7d398238 0x763d863e 0x7c3b8537
0xffb70a60  0x8430802c 0x81287f23 0x80248018 0x84197f14
0xffb70a70  0x7f118011 0x7b128511 0x84198117 0x80167913
0xffb70a80  0x70157e19 0x78178115 0x7d128015 0x80157a10
0xffb70a90  0x890f7911 0x850d7e10 0x850f8119 0x76358152
0xffb70aa0  0x725d826c 0x7b728276 0x7d708270 0x7d73856e
0xffb70ab0  0x7a70836b 0x766d8061 0x8155833e 0x8c26831d
0xffb70ac0  0x84138418 0x72128d1b 0x6d178f1d 0x761a861a
0xffb70ad0  0x7d1a891a 0x7f1a8a17 0x811b861c 0x783b8753
0xffb70ae0  0x6d658673 0x7478847f 0x7a7a847b 0x7a7c8576
0xffb70af0  0x7b798578 0x7e768379 0x7f738377 0x7f778573
0xffb70b00  0x82227f26 0x87258121 0x83238124 0x82258324
0xffb70b10  0x7d248724 0x7f258424 0x84248322 0x8b247e25
0xffb70b20  0x85307d46 0x7c5e7e6a 0x826e7f54 0x82578174
0xffb70b30  0x797d8385 0x7a6b864f 0x8e437d3c 0x8e45803d
0xffb70b40  0x8b3c7f3c 0x843e7c3a 0x863f7f3e 0x8a3e8141
0xffb70b50  0x8739833a 0x87407f3e 0x8a3f7e3f 0x8c3c813f
0xffb70b60  0x8a3f7f40 0x8a3e7b3d 0x883c7f3f 0x893d7e40
0xffb70b70  0x8b3c813b 0x86388240 0x873c7b40 0x8a3d793f
0xffb70b80  0x8a3a7f3f 0x8f417e42 0x9e457942 0xa5457846
0xffb70b90  0xa34b754b 0xa74c7249 0xa74a744a 0xa449754c
0xffb70ba0  0xa44a7448 0xa64b7152 0xa2576e5a 0x9e5f7057
0xffb70bb0  0x9c5e7255 0x9e54724f 0xa349784c 0xa7487d4a
0xffb70bc0  0xa0447f47 0x954a864d 0x86548d51 0x83508f4e
0xffb70bd0  0x81549064 0x7c668770 0x816f846b 0x886a895e
0xffb70be0  0x885e8466 0x856e8176 0x8571846c 0x88618a56
0xffb70bf0  0x80529156 0x7d58954e 0x7b4b9246 0x7d488a4a
0xffb70c00  0x7d498b4d 0x78548a5b 0x7e63846b 0x7f70877e
0xffb70c10  0x79828686 0x78848587 0x7c848786 0x7d87838a
0xffb70c20  0x7f8e808f 0x7b8e808e 0x778a828f 0x7d8f818d
0xffb70c30  0x808d8195 0x80938193 0x7e948196 0x7e918193
0xffb70c40  0x7f938195 0x7f92818d 0x7d90828d 0x7b8a867f
0xffb70c50  0x8674846a 0x9c587a4b 0x9e457841 0x9a477746
0xffb70c60  0x9c467745 0x9a447d40 0x98408244 0x97417d4a
0xffb70c70  0x9948764b 0x9b467a47 0x9a447e48 0x98437c42
0xffb70c80  0x964c784a 0x994b7b46 0x9a498049 0x91487e4c
0xffb70c90  0x86587c63 0x7f5f7d5e 0x8a5b7d52 0x98447936
0xffb70ca0  0x9134823a 0x8c388836 0x8e3a8338 0x92337630
0xffb70cb0  0x8c367830 0x84337f34 0x85318035 0x88397a36
0xffb70cc0  0x8739803b 0x873f8241 0x86417d3a 0x84347d32
0xffb70cd0  0x82307f30 0x7d35803b 0x783a8640 0x7a398535
0xffb70ce0  0x8230812f 0x84298321 0x85248320 0x89197e17
0xffb70cf0  0x820d8217 0x7f118114 0x80177d15 0x7e167918
0xffb70d00  0x79187d17 0x76128419 0x7c138119 0x83137a11
0xffb70d10  0x8413790f 0x7c0c7e10 0x84137e19 0x7d2f814e
0xffb70d20  0x74608268 0x78708173 0x7a737f71 0x7a71826d
0xffb70d30  0x7a6f8571 0x786e8364 0x83568644 0x8f2c8720
0xffb70d40  0x89158617 0x781d8b16 0x701a8e17 0x701f8716
0xffb70d50  0x74188719 0x7f198717 0x841a8519 0x79348751
0xffb70d60  0x75648572 0x78768379 0x7b7c8375 0x7a78857c
0xffb70d70  0x7c74857b 0x7d738377 0x7e758373 0x7d768571
0xffb70d80  0x7b22842a 0x83248722 0x85248526 0x86248222
0xffb70d90  0x80238322 0x862a8322 0x82238228 0x82207b29
0xffb70da0  0x85287b4e 0x7d5e7f6b 0x816e7f54 0x825c8173
0xffb70db0  0x7b818384 0x7f6c8749 0x8c418142 0x8e3b8141
0xffb70dc0  0x8a3c8238 0x843f803f 0x893e8241 0x89368242
0xffb70dd0  0x863f803e 0x873d7d3f 0x883f7e40 0x8c407f41
0xffb70de0  0x8b447e44 0x8c3d7f3a 0x8a41813e 0x873d803c
0xffb70df0  0x873e813a 0x823e833e 0x863d7b3e 0x893d7940
0xffb70e00  0x863c7d3c 0x8e3e7d42 0x9a3f7d46 0x9b437b42
0xffb70e10  0x9c467647 0xa147754b 0xa64d764a 0xa44d7649
0xffb70e20  0xa645764e 0xa44c7053 0xa0576e5d 0x9f5e725c
0xffb70e30  0x9f57745b 0xa254714c 0xa84e7b4c 0xa847824b
0xffb70e40  0x9e428345 0x954c884d 0x884e8e50 0x83558f59
0xffb70e50  0x7d5a8c63 0x7a678869 0x82698663 0x935d8757
0xffb70e60  0x9654825f 0x8a6a826f 0x886e856a 0x895e8d54
0xffb70e70  0x814e8f52 0x83538f4f 0x82398c33 0x8433883e
0xffb70e80  0x87428b46 0x7d478c4f 0x7e58876c 0x8173877c
0xffb70e90  0x7b848881 0x7882877f 0x797c8779 0x7c828584
0xffb70ea0  0x82818285 0x7d83837e 0x7a828482 0x7c848388
0xffb70eb0  0x808a818f 0x7f928190 0x7e8e8194 0x7f958192
0xffb70ec0  0x80968190 0x7f928292 0x7d8f828e 0x79898782
0xffb70ed0  0x8477866c 0x9d5c7e4c 0x9e497847 0x96427a48
0xffb70ee0  0x9d46784a 0x9c457a42 0x98447d41 0x98457a46
0xffb70ef0  0x97487746 0x98487947 0x99467c4a 0x98477c4b
0xffb70f00  0x994a7a49 0x964a7b48 0x92487c4a 0x90497b4b
0xffb70f10  0x8d577b61 0x825d7b5d 0x895c7c4f 0x974f7a32
0xffb70f20  0x963b7e3a 0x953c8337 0x903a8037 0x9534792f
0xffb70f30  0x94367a35 0x8b317e32 0x85337e34 0x8a347b35
0xffb70f40  0x8e3f8139 0x8a41833f 0x85387e3f 0x84367c33
0xffb70f50  0x81317e2f 0x7d357f39 0x7b3d823e 0x7b398436
0xffb70f60  0x82317f2c 0x8a2d8226 0x8c228319 0x91197f18
0xffb70f70  0x870c8013 0x84137f17 0x7f167f13 0x7c167e1a
0xffb70f80  0x821c7d15 0x7a118116 0x82148214 0x85128010
0xffb70f90  0x8110800e 0x760d7b0f 0x84118018 0x83368351
0xffb70fa0  0x785c836d 0x7670826f 0x75738070 0x76718170
0xffb70fb0  0x7b6f8471 0x7d6a8263 0x87558740 0x9327881e
0xffb70fc0  0x8e148218 0x811a8816 0x77198c19 0x71158916
0xffb70fd0  0x6d1b8a14 0x8117881f 0x871a881b 0x7a358857
0xffb70fe0  0x7b648570 0x7b758478 0x7b798478 0x7c768577
0xffb70ff0  0x7d798474 0x7d778378 0x7d748377 0x7a738474
0xffb71000  0x7a26881f 0x80258c24 0x81228724 0x83277e23
0xffb71010  0x82297b24 0x82228022 0x7f267f25 0x8a257829
0xffb71020  0x872b794d 0x7e617f6f 0x826f7f55 0x805c8076
0xffb71030  0x7b828383 0x866d8748 0x9143823f 0x8a42823d
0xffb71040  0x8640843f 0x823f8341 0x833e8440 0x88438241
0xffb71050  0x8d447c3f 0x8b417a44 0x8a407d3e 0x8d417a42
0xffb71060  0x89427b42 0x8a428341 0x8e40823e 0x8c44803e
0xffb71070  0x8839813e 0x843e823e 0x8b3c7b3f 0x8a3e7940
0xffb71080  0x853a7b3a 0x893f7d40 0x913d803d 0x97497e41
0xffb71090  0x994a7748 0x9a467844 0x9d517643 0x9f4b774b
0xffb710a0  0xa64d7648 0xa54f6f55 0xa05b6e5c 0x9f5f745a
0xffb710b0  0xa0587458 0xa3526f51 0xa5487b4c 0xa3498548
0xffb710c0  0x9e488646 0x95498a4e 0x884d8e50 0x7f518f5c
0xffb710d0  0x7d5b8a64 0x7a658a66 0x825e8c5d 0x95518447
0xffb710e0  0x96537e58 0x8867826b 0x836c8765 0x805d8f51
0xffb710f0  0x7b528d4e 0x814b874d 0x873d8536 0x84338431
0xffb71100  0x84358a33 0x823d8f43 0x80448e60 0x7e6d877a
0xffb71110  0x78818886 0x7882887c 0x7a718672 0x7e6f8573
0xffb71120  0x7e778675 0x7a778673 0x79718576 0x7c79857b
0xffb71130  0x7e828286 0x7e89818b 0x7d8e828e 0x7f938196
0xffb71140  0x7f928193 0x7f94828f 0x7b8e828b 0x76888887
0xffb71150  0x7f788670 0x96618254 0x9c497745 0x99467c43
0xffb71160  0x9d497a49 0x9e427842 0x9e437946 0x9b477747
0xffb71170  0x99477748 0x984a774a 0x994a7a48 0x9a4a7b48
0xffb71180  0x974a7a47 0x974b7a4a 0x974a7848 0x9249774b
0xffb71190  0x8956795e 0x8362785d 0x8b5b7b4f 0x984b7a41
0xffb711a0  0x993f7a3c 0x91387e3b 0x913e7d33 0x92357b36
0xffb711b0  0x8c2f7d37 0x89357e34 0x87317e33 0x8c347e34
0xffb711c0  0x8839823d 0x81418242 0x833b7e38 0x86337c32
0xffb711d0  0x83337d2c 0x7b317e39 0x7a3f7f38 0x7a398136
0xffb711e0  0x7f347d28 0x822b7f24 0x8023811e 0x86197f15
0xffb711f0  0x88137e17 0x80137d11 0x77198111 0x7a198313
0xffb71200  0x7e167d16 0x7d197d14 0x7f118213 0x7a188510
0xffb71210  0x760b8712 0x790e790e 0x87118012 0x822f864d
0xffb71220  0x765f8368 0x75708372 0x78748071 0x7a737f71
0xffb71230  0x7d6b8270 0x806e8265 0x82528644 0x862c881f
0xffb71240  0x88187e1b 0x7b188318 0x71178a1b 0x721a8b17
0xffb71250  0x761d8e17 0x81188a1f 0x86148a19 0x79348752
0xffb71260  0x79628470 0x7b748479 0x7d78857a 0x7e798378
0xffb71270  0x7f798276 0x7d778275 0x7b778273 0x7d768172
0xffb71280  0x80278425 0x82248624 0x82228227 0x82247f23
0xffb71290  0x82268124 0x7d228226 0x7f257f24 0x8f277722
0xffb712a0  0x8a3a794f 0x7f637f72 0x84688158 0x7f638077
0xffb712b0  0x7b858284 0x8c668646 0x9845813b 0x88418240
0xffb712c0  0x823c853d 0x8343853d 0x7f3b843b 0x8a407f40
0xffb712d0  0x94407a43 0x90427b43 0x8b3b7f43 0x8c417d46
0xffb712e0  0x893c7d44 0x8e41803d 0x96458044 0x933d7e42
0xffb712f0  0x8a3f813e 0x88408139 0x913d7b46 0x8d3c7a3a
0xffb71300  0x843f7c3c 0x833b7e45 0x893d8148 0x95447e44
0xffb71310  0x96497c40 0x93497d48 0x93487a44 0x9a4c7a4c
0xffb71320  0xa74b764d 0xa7517057 0x9f5b6e5d 0x9f62705b
0xffb71330  0xa1566f58 0xa450724f 0xa44d7c4b 0xa04b824a
0xffb71340  0x9e498447 0x9841884a 0x894e8e4b 0x7c528d5c
0xffb71350  0x7e608b62 0x7e658d5c 0x84558c4a 0x9742833e
0xffb71360  0x964b8056 0x86628466 0x806c8768 0x79628d5d
0xffb71370  0x765a8e54 0x7e518c4a 0x893f8c3a 0x85348a31
0xffb71380  0x81308b33 0x87318e32 0x84438f58 0x79688979
0xffb71390  0x76848986 0x7887887b 0x7c72896b 0x8260865c
0xffb713a0  0x78648868 0x74648863 0x7a5f866a 0x7b718475
0xffb713b0  0x7c7c8582 0x7f838483 0x7e86838a 0x7e8c818d
0xffb713c0  0x7f908192 0x7f908291 0x7a8c8289 0x758a8886
0xffb713d0  0x7c7b8671 0x90658257 0x99457944 0x9e4b7b48
0xffb713e0  0x9e417944 0x9f447847 0xa3477847 0x9e427744
0xffb713f0  0x9d4b7647 0x9a48764a 0x9a4c774c 0x9c48784d
0xffb71400  0x964b7a48 0x974a794a 0x9e497749 0x9648774a
0xffb71410  0x87567a5d 0x83607a5c 0x8d5c7951 0x984c7a42
0xffb71420  0x9c3e7f3f 0x8f367f40 0x94397c3c 0x8f317b33
0xffb71430  0x812f7e39 0x86358038 0x89367f34 0x8f337d36
0xffb71440  0x843b7e39 0x783d8041 0x803c7f37 0x89357b34
0xffb71450  0x842e7e30 0x7a2f8136 0x7a418037 0x79398034
0xffb71460  0x7c337e2a 0x7b277e23 0x7620831f 0x7d188515
0xffb71470  0x89178111 0x7f178111 0x73178216 0x7b178115
0xffb71480  0x7d158116 0x7b188417 0x79178612 0x6f0f8613
0xffb71490  0x710e8110 0x7f0c7a13 0x8d118017 0x8332844a
0xffb714a0  0x745d8467 0x74708372 0x7d738073 0x7f6e7f71
0xffb714b0  0x7f6f836e 0x81708367 0x7e518443 0x7b2b851b
0xffb714c0  0x821a8116 0x75188519 0x6e1a8918 0x781a8a1a
0xffb714d0  0x83198c19 0x841b8918 0x86158c1f 0x78328951
0xffb714e0  0x75648570 0x7c778477 0x7f768379 0x807a8375
0xffb714f0  0x80788378 0x7b748573 0x79768475 0x7e748374
0xffb71500  0x7e267e26 0x83207e28 0x81267a26 0x7a227e25
0xffb71510  0x7c248522 0x83248224 0x89267e24 0x8f267725
0xffb71520  0x85347851 0x7d657f70 0x836b8254 0x7f66807a
0xffb71530  0x7a868084 0x8862834a 0x9542803f 0x8a438140
0xffb71540  0x843e853f 0x8442863e 0x83428142 0x8b3d7a43
0xffb71550  0x90417843 0x8a427a41 0x8843813b 0x8c418141
0xffb71560  0x8e447d42 0x8b3e7e43 0x8e437d3e 0x91417f3f
0xffb71570  0x8c3f803e 0x8c407f3e 0x8f417b41 0x8f417a41
0xffb71580  0x8b417c40 0x8b447f3f 0x90448042 0x934c7d45
0xffb71590  0x95478047 0x97458047 0x934c7f41 0x954d7c4b
0xffb715a0  0xa348764d 0xa3516f58 0x9d5b6e60 0x9d5f6d59
0xffb715b0  0xa4576b55 0xa451744b 0xa24b7b4d 0xa14a7c4a
0xffb715c0  0x994a8244 0x90428740 0x88428d4a 0x7e528a58
0xffb715d0  0x7d5b895e 0x815c8b4a 0x89438b3c 0x983b803d
0xffb715e0  0x9946844e 0x8d5d8864 0x8469866c 0x7c64895f
0xffb715f0  0x7a608f5f 0x7d5f9059 0x844e9347 0x83438f37
0xffb71600  0x80368b2f 0x823b8c40 0x84488f4f 0x7a678c76
0xffb71610  0x7583888f 0x7886877c 0x7d728867 0x825a874f
0xffb71620  0x7f528952 0x7e528a54 0x7f508461 0x7e678372
0xffb71630  0x7b76877b 0x7e7b867b 0x7f7e8383 0x7e84848a
0xffb71640  0x7f8a818f 0x7e90818c 0x798e8284 0x7486878a
0xffb71650  0x7a808673 0x8e6c8258 0x984c7a47 0x9c437a49
0xffb71660  0xa2497641 0xa1477842 0x9f477848 0x9d437643
0xffb71670  0x9a4b7444 0x994b744a 0x9a4d744d 0x944c734e
0xffb71680  0x924c794a 0x9949784d 0x99497447 0x934b754e
0xffb71690  0x8d537b58 0x87637b5c 0x8f5b7751 0x9a4b7a42
0xffb716a0  0x9b3d833b 0x903f7f40 0x92387a34 0x8f387a31
0xffb716b0  0x89378032 0x89368138 0x89358131 0x89347d36
0xffb716c0  0x853c793b 0x83417e42 0x833e8038 0x84397b30
0xffb716d0  0x82307d30 0x7e308336 0x7c3e813c 0x793c7f34
0xffb716e0  0x7f367c2a 0x80287b21 0x7d21821b 0x7c1a8813
0xffb716f0  0x82178213 0x78148213 0x74198014 0x7e127e16
0xffb71700  0x79168313 0x77168817 0x79158714 0x7b138512
0xffb71710  0x7f127710 0x8510780c 0x8a0f8111 0x80318447
0xffb71720  0x77588566 0x77718470 0x7c718071 0x80717f71
0xffb71730  0x8070836e 0x7d6d8467 0x7c558246 0x822f821d
0xffb71740  0x831b8317 0x7b18881a 0x6f1a8818 0x711a881a
0xffb71750  0x7c188915 0x7a188919 0x81138d1a 0x76318a4e
0xffb71760  0x70618770 0x7973837a 0x7f7a8177 0x7f758277
0xffb71770  0x7e778476 0x7a768673 0x7a778577 0x7d758572
0xffb71780  0x7f267d27 0x88287c26 0x84237c2a 0x73208324
0xffb71790  0x78278624 0x8a278225 0x92248026 0x8f267c28
0xffb717a0  0x7d2e7d54 0x7d687d6f 0x846c7f54 0x7f66807b
0xffb717b0  0x79848283 0x84658548 0x933e7f41 0x8b408141
0xffb717c0  0x893f8140 0x8842813f 0x873e8044 0x8a397d45
0xffb717d0  0x89417a3e 0x85407b41 0x89417c45 0x8e407d40
0xffb717e0  0x92438041 0x8842823f 0x87407f41 0x90467f40
0xffb717f0  0x8f408243 0x8f42803f 0x8d427d40 0x92467b3f
0xffb71800  0x94447a42 0x93467c47 0x96467d48 0x92477c4c
0xffb71810  0x964a7c49 0x9e4a7b4a 0x96477a49 0x924a7b4e
0xffb71820  0xa04d784f 0xa0507457 0x995c7062 0x9c5f6e5d
0xffb71830  0xa6596f50 0xa352784c 0xa04e7e4e 0xa34d7e4b
0xffb71840  0x95478341 0x873e8a3f 0x84408e45 0x82488952
0xffb71850  0x7c508854 0x844e8b45 0x8e3c8834 0x983b7e3b
0xffb71860  0x9e46844c 0x945a8963 0x87638666 0x80628b5f
0xffb71870  0x7e63905d 0x7f60925b 0x815a9252 0x8152914a
0xffb71880  0x80439038 0x7c3c923c 0x844c9256 0x7e678b79
0xffb71890  0x7582888a 0x7788887e 0x7f6e8762 0x81518747
0xffb718a0  0x8644894e 0x88408b43 0x864e895b 0x8165846b
0xffb718b0  0x7a758574 0x7c738573 0x80718376 0x827d8383
0xffb718c0  0x7f88828d 0x7c8e828d 0x788c8387 0x73888788
0xffb718d0  0x7a828673 0x8d6f8259 0x97487848 0x99457744
0xffb718e0  0xa5457949 0xa349793f 0x9b467a42 0x9c477a49
0xffb718f0  0x98437648 0x984b764e 0x9b4c744c 0x8c4b744e
0xffb71900  0x8f4c774d 0x9b48764e 0x96497849 0x92447950
0xffb71910  0x9257785e 0x8c5e765d 0x915a7451 0x9d4b7645
0xffb71920  0x9b3f7f38 0x9240803e 0x903a7b36 0x91367c39
0xffb71930  0x91348131 0x8d358035 0x8b357e31 0x843b7b33
0xffb71940  0x853c7b42 0x8e407e42 0x873a8137 0x7f347e33
0xffb71950  0x802c7d2f 0x85358136 0x7f3a8239 0x78378136
0xffb71960  0x8033802c 0x87287e21 0x86218119 0x7f168613
0xffb71970  0x7b148314 0x73158213 0x76158017 0x80148113
0xffb71980  0x7a158114 0x7a178314 0x7a158516 0x88188412
0xffb71990  0x8d137d0c 0x8c117c0d 0x87118614 0x7d29864a
0xffb719a0  0x7d5d8568 0x7b6e8473 0x7b708272 0x8273826f
0xffb719b0  0x8273846e 0x786e8368 0x7957814a 0x86298020
0xffb719c0  0x86178117 0x82198719 0x6f1a8a1a 0x6b178919
0xffb719d0  0x761c8619 0x70188619 0x7d198c1b 0x75308b4c
0xffb719e0  0x6c60866e 0x7774857a 0x7d788479 0x7e7a8376
0xffb719f0  0x7d758376 0x7b778573 0x7c778575 0x7f768374
0xffb71a00  0x81257c27 0x84237724 0x80247e21 0x77248824
0xffb71a10  0x76248523 0x7f248125 0x8a248022 0x8b277e22
0xffb71a20  0x7c387f52 0x7d6a7c72 0x83677d53 0x7d687f7a
0xffb71a30  0x798a8280 0x8261874d 0x8b487e41 0x85437e3d
0xffb71a40  0x85417d45 0x883e7b41 0x8a457d3e 0x8a407f3e
0xffb71a50  0x8c3f7d40 0x87447b41 0x833e7944 0x8942793e
0xffb71a60  0x8a40843d 0x873e8741 0x89427f45 0x8c407f42
0xffb71a70  0x89428343 0x8c418345 0x91467d42 0x96427d48
0xffb71a80  0x99467946 0x9743794d 0x96497a4c 0x94497a4f
0xffb71a90  0x984b774b 0x9b4f7649 0x994a744b 0x984e7a44
0xffb71aa0  0xa14d7b4e 0x9f517757 0x995e7261 0x9b5e6f59
0xffb71ab0  0xa45a734f 0xa2517b4d 0xa0527f4d 0x9e4a814c
0xffb71ac0  0x9645843f 0x893d8b3d 0x853a8c43 0x83438749
0xffb71ad0  0x7b4f884d 0x8045893e 0x8a3c8433 0x943a7d3a
0xffb71ae0  0x993b8346 0x9052895a 0x84638661 0x7d638c60
0xffb71af0  0x7d62925d 0x7d5a9067 0x76628d65 0x74609153
0xffb71b00  0x764f9642 0x7e3f9642 0x824b9458 0x7d6b8a74
0xffb71b10  0x7684878a 0x768d8986 0x7d738666 0x8451873e
0xffb71b20  0x89448643 0x8b3a893c 0x82448c55 0x7e618568
0xffb71b30  0x7c6c856e 0x806b8469 0x8669826b 0x8472817a
0xffb71b40  0x81808288 0x7c8b828c 0x79898488 0x78888889
0xffb71b50  0x7c828677 0x8d6f815b 0x9b4d7448 0x984b7446
0xffb71b60  0x9f457848 0x9f467b47 0x9d467b42 0x9d457b49
0xffb71b70  0x98457747 0x9548784a 0x934a7450 0x904d764b
0xffb71b80  0x954c754f 0x9b4f724d 0x94427d4d 0x8f497c51
0xffb71b90  0x8e57735d 0x8863705e 0x8d596f54 0x9c4d7341
0xffb71ba0  0x9d3c7b40 0x923f803f 0x90397b38 0x903b7b31
0xffb71bb0  0x8e348133 0x89377f36 0x8a36793a 0x8637773b
0xffb71bc0  0x84417c3e 0x8a3e7e46 0x863d7f38 0x7e367f33
0xffb71bd0  0x802f7c2f 0x83367e36 0x7d3d823b 0x78398334
0xffb71be0  0x7e31842a 0x88278025 0x88227f1a 0x81138117
0xffb71bf0  0x75128113 0x70178017 0x7d107e17 0x85138116
0xffb71c00  0x80157e17 0x7d147d14 0x7e148213 0x7d108513
0xffb71c10  0x8010820f 0x880f800e 0x840e8b11 0x7c298847
0xffb71c20  0x7b5b8365 0x796e8471 0x7a728473 0x82708472
0xffb71c30  0x816e8470 0x776f8266 0x7756814a 0x822f8020
0xffb71c40  0x84157f18 0x7f1e8415 0x731b8c14 0x6d208b19
0xffb71c50  0x73178217 0x741b8119 0x7c158a1d 0x7529894f
0xffb71c60  0x725e846e 0x78738577 0x7b75867b 0x7c778378
0xffb71c70  0x7d788278 0x7b758274 0x7b778271 0x7c768273
0xffb71c80  0x85258124 0x81267f24 0x7e257f26 0x7e258528
0xffb71c90  0x73228726 0x71238124 0x81267e22 0x88267b23
0xffb71ca0  0x7c377d58 0x7d667b73 0x83667c52 0x7b6a7f7d
0xffb71cb0  0x7b898180 0x82618743 0x82428441 0x7e3e813f
0xffb71cc0  0x7e3c8043 0x86407f43 0x8d447e3d 0x8b438142
0xffb71cd0  0x8f408041 0x88427e3e 0x7e3d7e45 0x84417e42
0xffb71ce0  0x84398145 0x87428543 0x8c418140 0x8a437e41
0xffb71cf0  0x86428142 0x8c427e42 0x96447c4a 0x9d497a42
0xffb71d00  0xa04a7a4a 0x9c4c7a49 0x964e774d 0x974d784d
0xffb71d10  0x994e774e 0x994e764e 0x9b46764d 0x9e4b784e
0xffb71d20  0xa24e774f 0xa054755b 0x98596f5f 0x9a5e6d5a
0xffb71d30  0xa1557452 0xa3507a51 0xa04b7c50 0x9c4a814a
0xffb71d40  0x9a478442 0x8e3a883e 0x86398a3e 0x8242893e
0xffb71d50  0x78458a3f 0x7c428839 0x8638863a 0x8e36833b
0xffb71d60  0x94438746 0x8c568b5f 0x8063886e 0x7b6d8a6e
0xffb71d70  0x7e698e65 0x7c688f69 0x6f6e8e6c 0x6763935b
0xffb71d80  0x70509444 0x84429448 0x8250975b 0x7c6e8a77
0xffb71d90  0x78878689 0x76908588 0x7a798768 0x85588944
0xffb71da0  0x8b3a893b 0x8b3d873a 0x7f418c50 0x795c8a66
0xffb71db0  0x7e688769 0x84658767 0x8d628360 0x8867816e
0xffb71dc0  0x827a8385 0x7d86828f 0x7c8a838a 0x7d8a8789
0xffb71dd0  0x7e848476 0x8d6d7e5d 0xa04e7442 0x96467a46
0xffb71de0  0x9a477c4a 0x9c447944 0x9e47794a 0x9e447a49
0xffb71df0  0x9a42774b 0x93467748 0x8d4d7649 0x9551784b
0xffb71e00  0x9b4c784f 0x9a4d794b 0x944d7d45 0x8e4f7a50
0xffb71e10  0x895b7559 0x8360735e 0x855b764e 0x9b547549
0xffb71e20  0x9f3b7c41 0x933c7d38 0x923b7937 0x91367a36
0xffb71e30  0x8e367b36 0x85317d36 0x8b387c38 0x883f7b39
0xffb71e40  0x83437d44 0x873e7f41 0x86417f37 0x83357e2f
0xffb71e50  0x812f7e2e 0x7f378035 0x7b40823a 0x793a8435
0xffb71e60  0x7e32842c 0x8b288223 0x8b1f821a 0x83188116
0xffb71e70  0x7016810f 0x70177e17 0x83187c15 0x8b158012
0xffb71e80  0x84147c13 0x7f158014 0x82158213 0x750f810f
0xffb71e90  0x74107f0f 0x830e7e0e 0x850e8413 0x7d2e8641
0xffb71ea0  0x7a5c8563 0x776c856f 0x7a718372 0x83718471
0xffb71eb0  0x8170846e 0x766c8263 0x76568044 0x802e7e27
0xffb71ec0  0x84158217 0x7f18881a 0x79198d16 0x731b8917
0xffb71ed0  0x73208513 0x75198819 0x7d188d1a 0x782a8b4e
0xffb71ee0  0x7860856c 0x7a748576 0x7a778576 0x7c768377
0xffb71ef0  0x7c7a8373 0x79748475 0x79758475 0x78708374
0xffb71f00  0x78238523 0x7a278521 0x7c277f24 0x78268326
0xffb71f10  0x79248623 0x7a257f26 0x80217a26 0x89277628
0xffb71f20  0x80387a58 0x7f667a71 0x86637a54 0x7f6d7e7d
0xffb71f30  0x7c887f7c 0x885d8642 0x8b438946 0x853e8240
0xffb71f40  0x853d8142 0x863d823d 0x89468044 0x883e8148
0xffb71f50  0x893f8342 0x88428245 0x82418341 0x803f833f
0xffb71f60  0x81407f42 0x853c843f 0x8a428243 0x8b447c41
0xffb71f70  0x8a477c43 0x91477b45 0x9a437847 0xa14b7744
0xffb71f80  0xa44c7a4b 0x9e4a794d 0x9b50724e 0x9d4c7451
0xffb71f90  0x9e4f7750 0x9a4e774e 0x9b4d764d 0xa04f744d
0xffb71fa0  0xa44c7350 0xa252725a 0x9a5a6a61 0x9b5c6c55
0xffb71fb0  0xa2567350 0xa150784d 0x9e517a47 0x9a4b814b
0xffb71fc0  0x98458241 0x8d378639 0x863f893b 0x84388a39
0xffb71fd0  0x7c3d8b37 0x7e378838 0x81378836 0x883c893c
0xffb71fe0  0x8f3c8b4b 0x87578e62 0x7f698b6e 0x7d6d896b
0xffb71ff0  0x7d628c63 0x7a6b906d 0x6e6d8f6f 0x6a65945a
0xffb72000  0x784d9346 0x83379141 0x7f469a60 0x7a6c8b7b
0xffb72010  0x7585848b 0x7490838c 0x7981866f 0x8063894a
0xffb72020  0x86388b3f 0x89418535 0x7d3b8c4f 0x78568e5f
0xffb72030  0x80688964 0x8a5f8e5e 0x925f8259 0x89598163
0xffb72040  0x7f71847f 0x7b86828b 0x7a8a828a 0x788c8588
0xffb72050  0x7d848375 0x8f6f7b5b 0xa1527145 0x9c467d3f
0xffb72060  0x9c477f49 0x9c4c7546 0xa0427847 0xa1487844
0xffb72070  0x9c47774a 0x974b754b 0x974c764b 0x994d784b
0xffb72080  0x974b7a4d 0x984b7f4d 0x964d7d4c 0x92517854
0xffb72090  0x8b58765e 0x88617660 0x8a577b51 0x97517947
0xffb720a0  0x9d447a40 0x993f7b3b 0x9b41763a 0x94327936
0xffb720b0  0x8f3c7536 0x8b357a37 0x8c367e3b 0x8c3e7f3d
0xffb720c0  0x85487d40 0x84417f42 0x863d7f39 0x83387c30
0xffb720d0  0x81307f32 0x81348237 0x7d41813d 0x7c3b8537
0xffb720e0  0x8133842a 0x87258021 0x89218215 0x861a8015
0xffb720f0  0x7a128115 0x79157a15 0x85147910 0x88147c15
0xffb72100  0x83147a14 0x7e158013 0x7f148014 0x7c137c0d
0xffb72110  0x7f137a10 0x8a0c7c0f 0x8b0e7c10 0x7e2e8143
0xffb72120  0x75538766 0x766e8470 0x7c6f8371 0x83708371
0xffb72130  0x806f836b 0x756e8366 0x785d7e45 0x832d7d20
0xffb72140  0x84178415 0x7e178b18 0x7a198c19 0x7618851b
0xffb72150  0x75158519 0x79198e1b 0x7a17901d 0x75298b4c
0xffb72160  0x765d866c 0x7b738477 0x7c77837a 0x7c758276
0xffb72170  0x7c768473 0x7a778674 0x7a768575 0x7b738573
0xffb72180  0x6d208625 0x77268825 0x79248428 0x71238424
0xffb72190  0x7f258524 0x83258223 0x7f247f26 0x8b23792a
0xffb721a0  0x843d795d 0x81637b72 0x8a657d57 0x816f7f82
0xffb721b0  0x7d86817d 0x8e5d8847 0x983d823f 0x8f3f8043
0xffb721c0  0x8d3e803e 0x8a418041 0x843c8040 0x85498042
0xffb721d0  0x84428143 0x88417f44 0x8843813c 0x7f42843e
0xffb721e0  0x7e40823c 0x85428246 0x8b417e40 0x8b457945
0xffb721f0  0x8e457c44 0x97437a4b 0xa0497948 0xa647764b
0xffb72200  0xa84b734c 0xa146764d 0xa04f7550 0xa24f764f
0xffb72210  0xa255774e 0x9d50744e 0x9d4c7452 0xa34d764e
0xffb72220  0xa74f7550 0xa4507259 0x9c5a6c60 0x9c5d6e5b
0xffb72230  0xa3547454 0xa0507850 0x9c4f7a4d 0x99497d4a
0xffb72240  0x95468138 0x8c3e883c 0x863b8c39 0x87378a35
0xffb72250  0x82358b33 0x80318c3e 0x7e308a39 0x84348c40
0xffb72260  0x8c438e47 0x82528f5d 0x7f648c6e 0x7f6c8b6d
0xffb72270  0x7d698e69 0x7b6e8f6c 0x706a8f69 0x6f649456
0xffb72280  0x7f4a9136 0x8337933d 0x7f51985b 0x796b8a7c
0xffb72290  0x73888389 0x7392848d 0x78878878 0x7b698f59
0xffb722a0  0x81479041 0x863f8b41 0x7d408e4c 0x78528d5d
0xffb722b0  0x835e8f61 0x905a8c56 0x96528251 0x914f845b
0xffb722c0  0x7d668476 0x7a828386 0x798c838a 0x738b8388
0xffb722d0  0x7d81837a 0x916f7e5b 0xa24a744a 0xa34a7b45
0xffb722e0  0x9f4a7b46 0x9d467547 0xa547794a 0xa547794a
0xffb722f0  0x9d497848 0x9c45794e 0xa14b784a 0x9e4c764a
0xffb72300  0x95477646 0x99527c4e 0x974a794f 0x95547756
0xffb72310  0x8b5d765b 0x8c64755f 0x93587a50 0x97517b46
0xffb72320  0x99447742 0xa03e783d 0xa33b773c 0x96327b37
0xffb72330  0x8f357932 0x923b7838 0x8f377c3d 0x90427e46
0xffb72340  0x893f7b40 0x82427c42 0x87407e39 0x85357c30
0xffb72350  0x822f812c 0x833a8237 0x7d3a813c 0x803e8336
0xffb72360  0x852f842d 0x85237f21 0x891f7c19 0x8b177d16
0xffb72370  0x85148214 0x80147e12 0x85167d12 0x83118117
0xffb72380  0x83138016 0x80168111 0x7b128215 0x83157e12
0xffb72390  0x880d7c11 0x8d0d810d 0x8e0d8013 0x80288449
0xffb723a0  0x72558666 0x766e8470 0x7f718470 0x84708270
0xffb723b0  0x8171826e 0x76698368 0x7a5a8246 0x88307d22
0xffb723c0  0x89158218 0x81188a17 0x7c1a8a17 0x791a8518
0xffb723d0  0x78188617 0x7f1d8b1d 0x7b118d1b 0x74298949
0xffb723e0  0x765f856c 0x7c738476 0x7f768377 0x7d788276
0xffb723f0  0x7c748375 0x7c738573 0x7e748376 0x81718473
0xffb72400  0x7a228622 0x7c248925 0x7e278520 0x79298222
0xffb72410  0x7f248326 0x82228526 0x83268126 0x8c267c24
0xffb72420  0x8440795b 0x816a7a6e 0x87618057 0x80707f84
0xffb72430  0x7c8a8276 0x88588948 0x93497c43 0x883c7e44
0xffb72440  0x8c3e7d3b 0x8d407d41 0x893b7f43 0x8a417f48
0xffb72450  0x89457e44 0x8a407b45 0x88478039 0x84408546
0xffb72460  0x85458241 0x8b428143 0x8d3f7a49 0x8f457745
0xffb72470  0x94437c46 0x9b477949 0xa3467849 0xa54a734b
0xffb72480  0xa64f6c4d 0xa24d724b 0x9e4d7753 0x9e4c794d
0xffb72490  0xa1507751 0x9f516f52 0x9e4e714f 0xa24f774d
0xffb724a0  0xa54f7651 0xa24f735e 0x9c556e60 0x9e5b7154
0xffb724b0  0xa3587450 0xa351774c 0xa351794e 0x9e4f7947
0xffb724c0  0x95487e45 0x8b39883b 0x83388e3a 0x81388936
0xffb724d0  0x803a8a2d 0x81358d38 0x803e8b3c 0x82458f49
0xffb724e0  0x834a9158 0x7e608e66 0x7c708d76 0x78788c77
0xffb724f0  0x77728d70 0x7a6e8d6f 0x726a8e67 0x745f904d
0xffb72500  0x803e8e32 0x84359539 0x7d4b955a 0x776c887b
0xffb72510  0x7484838f 0x748d838f 0x778e887e 0x74708d64
0xffb72520  0x7855934b 0x80448f42 0x7f428f4a 0x7d528b4f
0xffb72530  0x83558d57 0x8e548b4f 0x98518248 0x9347854c
0xffb72540  0x7f5c8572 0x7c798482 0x7a86828c 0x7887838c
0xffb72550  0x7e838275 0x916d805c 0xa2517547 0xa0477642
0xffb72560  0x9f4f7545 0xa24a7448 0xa2487949 0x9c437948
0xffb72570  0x984a794a 0x9a487b44 0x9f4f7849 0x9d4a7248
0xffb72580  0x9b4a7244 0x984b784c 0x934c7551 0x93547555
0xffb72590  0x8b5c7460 0x8a607162 0x8f527b51 0x944f7d4a
0xffb725a0  0x9a427544 0xa03e743c 0x9f397742 0x98347e34
0xffb725b0  0x8f367c3b 0x90397536 0x8e3f783e 0x8a407c41
0xffb725c0  0x80437a44 0x80427a40 0x883e7d38 0x83377d2c
0xffb725d0  0x812d8232 0x8430843b 0x7d3d7f3e 0x7d3c823a
0xffb725e0  0x832e842c 0x82277e21 0x7e1d771a 0x82187a16
0xffb725f0  0x81138215 0x82158214 0x86128012 0x81148414
0xffb72600  0x81158414 0x82157f16 0x7d128213 0x80157d13
0xffb72610  0x810f7a11 0x880a820f 0x8a088414 0x7c258440
0xffb72620  0x77548366 0x796b846e 0x7e71846f 0x83718170
0xffb72630  0x826e826e 0x7a6b8367 0x7857834a 0x83307e21
0xffb72640  0x8915801b 0x7f158814 0x781b8719 0x77188518
0xffb72650  0x761b8518 0x7b17881d 0x76198715 0x78278647
0xffb72660  0x795d826b 0x7c718375 0x7f748377 0x7e738075
0xffb72670  0x7b738273 0x79728376 0x7b748074 0x7b718374
0xffb72680  0x85288223 0x85278524 0x87258224 0x82228123
0xffb72690  0x80278320 0x83268224 0x8a267e24 0x8e267a28
0xffb726a0  0x833e7c5e 0x82677c71 0x86647f5a 0x7f757f84
0xffb726b0  0x7b888177 0x85548742 0x8c467e3c 0x7f3d823e
0xffb726c0  0x8b487e3e 0x8f447c3e 0x8d427e42 0x8e427e44
0xffb726d0  0x8e447f45 0x8a467e3e 0x8a477f43 0x8c458043
0xffb726e0  0x8e48804d 0x90408143 0x8f467d44 0x93437a4a
0xffb726f0  0x9b4b7b47 0xa24d784a 0xa54b744c 0xa54b714d
0xffb72700  0xa34b714d 0xa14c734f 0x9d53734c 0x9b4e7857
0xffb72710  0xa14f7851 0xa1507452 0xa052744e 0xa24d7353
0xffb72720  0xa54d724e 0xa1537356 0x9d586f5e 0xa05c7156
0xffb72730  0xa3597550 0xa7517750 0xa94f7850 0xa14a7a46
0xffb72740  0x93478143 0x8b36893c 0x7f3d8c38 0x7c36893a
0xffb72750  0x7f3c8b33 0x8238903e 0x803f8f47 0x7f558f5d
0xffb72760  0x7e628c6a 0x7c738a7a 0x7b7a8a7e 0x757b8a7b
0xffb72770  0x73768a72 0x79718e6d 0x7664935d 0x79519543
0xffb72780  0x81309133 0x8930933c 0x7c49985a 0x726d8c7a
0xffb72790  0x7488858b 0x768f838e 0x768d8882 0x73758b67
0xffb727a0  0x725b9152 0x7d448d45 0x803f9245 0x814c904a
0xffb727b0  0x85548c4d 0x904e884d 0x9a4a8343 0x98468546
0xffb727c0  0x83538467 0x7d76857c 0x7d898587 0x7c898387
0xffb727d0  0x7f818076 0x91687e5d 0xa24a794a 0x9b497746
0xffb727e0  0x9f46774b 0xa84a7649 0x9f487943 0x92477b4c
0xffb727f0  0x934b774c 0x984c774c 0x9d4b7744 0x9b4d7644
0xffb72800  0x9f4c7648 0x984c794a 0x90477855 0x924f7659
0xffb72810  0x8d5c735e 0x875d735f 0x8d587951 0x944e7846
0xffb72820  0x9c447446 0x9e3e7839 0x9c3c7b3e 0x9b3a7e36
0xffb72830  0x913a7e35 0x8d367939 0x8d3e773c 0x84447a44
0xffb72840  0x79417b45 0x80427c43 0x89447d37 0x82347d2f
0xffb72850  0x822d822d 0x88338439 0x7e38813c 0x7b3b7e37
0xffb72860  0x82338127 0x7c278422 0x711a831b 0x7a188017
0xffb72870  0x7f118315 0x87168313 0x89178314 0x81118513
0xffb72880  0x82168715 0x8515830e 0x81148715 0x82118210
0xffb72890  0x7d107b13 0x860d8112 0x890a8211 0x7c248244
0xffb728a0  0x7b528466 0x7d668670 0x7e708570 0x82708271
0xffb728b0  0x826e836b 0x7e6f8166 0x7754804d 0x7d2d8126
0xffb728c0  0x8915831b 0x80188711 0x74188619 0x79198516
0xffb728d0  0x771d8619 0x771d8919 0x71178b18 0x7c278a49
0xffb728e0  0x7b5d856c 0x7b708479 0x80798473 0x80768276
0xffb728f0  0x78708375 0x76738372 0x77758270 0x76718374
0xffb72900  0x82237e24 0x82237f24 0x80267d24 0x83267e21
0xffb72910  0x81238324 0x7d238129 0x89247925 0x8b277828
0xffb72920  0x80487e58 0x83687e72 0x8a5f7e5c 0x80747f87
0xffb72930  0x788a8073 0x8154834a 0x8a42803e 0x823b8542
0xffb72940  0x8b457d42 0x8c427b3d 0x88417c44 0x8a427b40
0xffb72950  0x8c458146 0x86488245 0x86417e45 0x8a437b4b
0xffb72960  0x8c497e4c 0x8f4d7f43 0x91468146 0x96487d4b
0xffb72970  0x9b4c7a4b 0x9e477751 0xa34a6f52 0xa3476e4f
0xffb72980  0xa34c744c 0xa14e7451 0x9d507053 0x9e4b7752
0xffb72990  0xa24e7954 0xa153774c 0xa054774f 0xa0516e52
0xffb729a0  0xa44e6c4e 0xa1527352 0x9f5d6d5c 0xa05d7056
0xffb729b0  0xa2517555 0xa4547353 0xa54e774e 0x9f4c7a4c
0xffb729c0  0x93468342 0x8c418a42 0x823b8b3b 0x7f388939
0xffb729d0  0x82378b39 0x803b903b 0x7a478f57 0x7a608b6a
0xffb729e0  0x7d738976 0x7c7e8980 0x79838a82 0x7582887c
0xffb729f0  0x747b8874 0x746d9068 0x7361975b 0x774b953f
0xffb72a00  0x8037923a 0x8935913a 0x7a459a5b 0x6f6d907b
0xffb72a10  0x7384888d 0x788c838f 0x768c8688 0x76798970
0xffb72a20  0x79658f5a 0x7c4b8c47 0x8140903f 0x803e9349
0xffb72a30  0x884a8a4b 0x91458445 0x93428243 0x96418242
0xffb72a40  0x8c4f8660 0x81708679 0x7c828786 0x7a898288
0xffb72a50  0x7f807f74 0x91687d57 0xa04d7b4a 0x9b4a774a
0xffb72a60  0x9e4b7846 0xa246774b 0x9c4c7946 0x97467d4c
0xffb72a70  0x974e7749 0x9a4c734b 0x9f4e7546 0xa0497749
0xffb72a80  0x9c4a7a45 0x944a784c 0x934b7950 0x93547756
0xffb72a90  0x8d5a725f 0x885a745c 0x8c597652 0x974d744f
0xffb72aa0  0x9c417341 0x9d417934 0x97407c3a 0x963a7d3b
0xffb72ab0  0x903b8036 0x883b7a3b 0x8a3e7441 0x88457746
0xffb72ac0  0x82437b45 0x81477f40 0x863d7d3d 0x83357e2b
0xffb72ad0  0x822f832a 0x84318536 0x7e3a823f 0x7e3e7b35
0xffb72ae0  0x802e7c2b 0x7724881d 0x741b8d1a 0x801d8610
0xffb72af0  0x80148315 0x82148211 0x8917820f 0x82118417
0xffb72b00  0x7b0e881b 0x7d148513 0x7c13880e 0x7c158313
0xffb72b10  0x820f780f 0x890e7d0d 0x8c117f09 0x80237f40
0xffb72b20  0x7953865d 0x7b6a886e 0x7a70856f 0x7f70846e
0xffb72b30  0x816e836e 0x7d6e7f6a 0x7c597d49 0x85308421
0xffb72b40  0x891c8516 0x7f168617 0x7717851e 0x73178619
0xffb72b50  0x6a1d8717 0x6a1b8917 0x76198b1b 0x7e218b48
0xffb72b60  0x78598768 0x78738574 0x7c788573 0x7b738378
0xffb72b70  0x77738474 0x79748372 0x7c748371 0x7a748273
0xffb72b80  0x81227c27 0x80257c23 0x7b257e24 0x85247f26
0xffb72b90  0x8427821f 0x78248527 0x89257f26 0x88267c28
0xffb72ba0  0x7c447f5f 0x846c7e71 0x8d607e5e 0x80768084
0xffb72bb0  0x75878374 0x7e53843e 0x8c477f3f 0x87428140
0xffb72bc0  0x8b418041 0x8a428042 0x82427d44 0x84457e43
0xffb72bd0  0x8a468244 0x85468342 0x83448044 0x87447e4a
0xffb72be0  0x8b4f804f 0x8f4d7e4a 0x964a7e4b 0x9d4b7b4c
0xffb72bf0  0x9c4d774a 0x9c4e744e 0xa14c6e4f 0xa24d6d4d
0xffb72c00  0xa44d704f 0xa04f734c 0x9b507351 0xa3537551
0xffb72c10  0xa3527550 0xa1537550 0xa1527951 0x9f4e714f
0xffb72c20  0xa34f7052 0xa3507456 0x9f5b7058 0xa15d7358
0xffb72c30  0xa1567753 0xa14e7851 0xa2507b4b 0x9e507d4b
0xffb72c40  0x94428341 0x8d448b43 0x843f8e39 0x833c8b39
0xffb72c50  0x843c8e3a 0x7f3d9344 0x7550925d 0x796d8873
0xffb72c60  0x7c818886 0x7b858788 0x78878885 0x73838983
0xffb72c70  0x747d8975 0x726a9163 0x6e5a9954 0x7644973e
0xffb72c80  0x803e943c 0x883b9842 0x7b51985c 0x6e718e7c
0xffb72c90  0x7386868f 0x788c8489 0x758a8885 0x7a7c8a76
0xffb72ca0  0x7c708d5e 0x7b598e4e 0x8148913b 0x833a8e3a
0xffb72cb0  0x8b408642 0x913d853d 0x8c3c863b 0x963e8441
0xffb72cc0  0x954b8760 0x866c877a 0x7c7c8884 0x78898384
0xffb72cd0  0x7f818072 0x91657d5b 0x9e4c774a 0x9a45764e
0xffb72ce0  0x9f48794a 0x9d4a7744 0x9b4c7949 0xa04c794a
0xffb72cf0  0x9c48744c 0x9b4c724a 0xa14c764e 0xa54a7849
0xffb72d00  0x9b47774c 0x9349754c 0x984d7750 0x95547857
0xffb72d10  0x8f57755d 0x8b5d735d 0x8c527455 0x994f7650
0xffb72d20  0x9e417742 0x9d417941 0x94417940 0x943d7a3f
0xffb72d30  0x90407d33 0x85407b3c 0x88457943 0x8d437a48
0xffb72d40  0x8a407945 0x85427a44 0x853e793d 0x87347c30
0xffb72d50  0x8330812a 0x80308438 0x7f39833b 0x803a8034
0xffb72d60  0x7e31802a 0x7725851f 0x801e8619 0x8d1b8115
0xffb72d70  0x87157e13 0x82148014 0x87148514 0x87118717
0xffb72d80  0x7a138515 0x7a148119 0x7913850f 0x79128511
0xffb72d90  0x86138010 0x8e0b8113 0x8f0c8113 0x84238140
0xffb72da0  0x79518561 0x7a6a8570 0x756f866d 0x7c708572
0xffb72db0  0x826e826c 0x7c6c7f69 0x81567d4d 0x8e328221
0xffb72dc0  0x89178413 0x81158419 0x7d178319 0x6f1a8415
0xffb72dd0  0x5f1b8917 0x5e198a1a 0x7a198b1b 0x82258946
0xffb72de0  0x785c8564 0x76748574 0x76768473 0x78768378
0xffb72df0  0x78748472 0x7c748472 0x83738375 0x7f6c8370
0xffb72e00  0x7d287a26 0x7f217a25 0x82257e23 0x84238024
0xffb72e10  0x7a248228 0x77228725 0x86268325 0x87257e2c
0xffb72e20  0x7f437f61 0x836a7f6e 0x895e7e61 0x7e778186
0xffb72e30  0x78888571 0x84528446 0x8d447d43 0x8c3f7c47
0xffb72e40  0x8940813d 0x86428344 0x87427d44 0x87448140
0xffb72e50  0x88448249 0x84418245 0x84438049 0x8944814a
0xffb72e60  0x8e4b8051 0x94507c4b 0x984a7a4b 0x9e4e774e
0xffb72e70  0x9e4f7350 0x9f546f4c 0xa14f6d4d 0xa14f6a4c
0xffb72e80  0xa2516a4f 0x9f4f6f50 0x9d4f7651 0xa1517253
0xffb72e90  0xa1506e51 0x9e527453 0xa14e7953 0xa350744d
0xffb72ea0  0xa2517351 0xa1517456 0xa15b725a 0xa25b7554
0xffb72eb0  0xa2537955 0xa0517b52 0x9f518050 0x9d4d7f4b
0xffb72ec0  0x95488344 0x8c418e3e 0x823f903e 0x823b8c38
0xffb72ed0  0x853e8f37 0x7e419545 0x77559064 0x7a70867e
0xffb72ee0  0x7984848a 0x798f828f 0x788b8388 0x73848981
0xffb72ef0  0x75778c6f 0x73679458 0x6d529b4b 0x7545983f
0xffb72f00  0x81439540 0x843d9d45 0x74569563 0x6f768c7e
0xffb72f10  0x7188858c 0x748b8587 0x748b8b84 0x78818a78
0xffb72f20  0x7a718d69 0x7b5a9157 0x824a8f41 0x873c883c
0xffb72f30  0x8c38813b 0x89378637 0x863d8a3c 0x903e853f
0xffb72f40  0x8f4a865c 0x826b8872 0x7b7c8985 0x7b888485
0xffb72f50  0x827b8274 0x94677b55 0xa352714d 0x9d4b7549
0xffb72f60  0x9d49774d 0x9d48774a 0x9a4b774c 0x9c49754c
0xffb72f70  0x9c4b6f4b 0x984d724b 0x9b4c774f 0xa14c764b
0xffb72f80  0x9a4a754c 0x954b724f 0x974f754c 0x93507955
0xffb72f90  0x8f567859 0x8e5e705d 0x8b587054 0x904e7a4c
0xffb72fa0  0x94487a4b 0x97407845 0x924a7744 0x8e417845
0xffb72fb0  0x8e3e7b41 0x87417a40 0x89407d42 0x8b4a7b44
0xffb72fc0  0x88487747 0x83437742 0x84467539 0x83367a32
0xffb72fd0  0x802c7f2f 0x80318136 0x7e39843c 0x7f398433
0xffb72fe0  0x7f318226 0x7c298121 0x811c7e1b 0x8a167916
0xffb72ff0  0x8a147714 0x84127b0e 0x8213860f 0x840f8619
0xffb73000  0x7d138017 0x7c147c10 0x7a138213 0x7b0e8610
0xffb73010  0x87118510 0x8a10830e 0x8a0f820e 0x8222823d
0xffb73020  0x7a52825d 0x7b6b836e 0x786f8670 0x7b6f8571
0xffb73030  0x7f6e7f6d 0x7d6d7e6a 0x805c7c4e 0x8b327e24
0xffb73040  0x88198116 0x8113821a 0x7e157f19 0x731b8217
0xffb73050  0x681a8819 0x681a8917 0x77208a15 0x7f248841
0xffb73060  0x77598369 0x766e8472 0x78758379 0x7a768175
0xffb73070  0x79718474 0x7a748473 0x80738370 0x8070836e
0xffb73080  0x78267c23 0x7e277d25 0x8a248025 0x85248224
0xffb73090  0x701f8225 0x79258326 0x85287e21 0x88247d32
0xffb730a0  0x834a805e 0x836b8070 0x845c7f60 0x7c798187
0xffb730b0  0x7d878372 0x8c508243 0x8f427d42 0x91417e42
0xffb730c0  0x8a418140 0x84428145 0x8d477b49 0x8b457c42
0xffb730d0  0x86448144 0x82448442 0x8744814c 0x8c457e4a
0xffb730e0  0x914c7d52 0x99507a4f 0x9c4b774c 0x9e4d7252
0xffb730f0  0xa04c7152 0xa251724f 0xa250714d 0xa04e6e51
0xffb73100  0xa14d6c52 0x9f53704c 0x9f557450 0xa3537254
0xffb73110  0xa0546e53 0x9c53714e 0xa1567451 0xa8507450
0xffb73120  0xa352734f 0x9f527157 0xa15c715a 0xa35a7354
0xffb73130  0xa3547551 0x9f547950 0x9d507d52 0x9e4e814f
0xffb73140  0x98448548 0x8e448c45 0x823f8d40 0x81388d42
0xffb73150  0x883d8e3c 0x8042944a 0x7a569065 0x7a75867e
0xffb73160  0x7685858d 0x788c838b 0x788a8784 0x77808879
0xffb73170  0x756e8e6a 0x745e954d 0x6d449741 0x7641963f
0xffb73180  0x84419746 0x84469a4c 0x705b926b 0x6f788c84
0xffb73190  0x6f89848a 0x708c858b 0x74848a86 0x77838b78
0xffb731a0  0x787a8b69 0x7b5f9353 0x83499247 0x8a3f8d3b
0xffb731b0  0x883a8b38 0x803a8c3d 0x813a8a3f 0x8938863b
0xffb731c0  0x8651875d 0x7d698871 0x7b7c8885 0x7f858484
0xffb731d0  0x86798170 0x97627a51 0xa54c744e 0xa14a7648
0xffb731e0  0x9d4b794b 0xa04c764c 0x9a4c724b 0x984d7650
0xffb731f0  0x9b50784e 0x944d764c 0x964b754d 0x9d4b744b
0xffb73200  0x994f744d 0x954e764c 0x954f794e 0x8f4e7a4f
0xffb73210  0x8f557757 0x9058755d 0x8b557453 0x8a527752
0xffb73220  0x8d4a7945 0x934b754b 0x91437748 0x8a477b43
0xffb73230  0x8a4a7d41 0x8a437c42 0x8a457b47 0x8a477a46
0xffb73240  0x85487a40 0x7f487b3f 0x82467933 0x7e377b2f
0xffb73250  0x7b2c802b 0x80328336 0x7e39833d 0x803b8136
0xffb73260  0x8132802b 0x81238120 0x831f7f19 0x87157d13
0xffb73270  0x8c157f15 0x87108112 0x81118211 0x84158215
0xffb73280  0x7d14820f 0x7d1b8015 0x790d8214 0x7d128413
0xffb73290  0x8c0e810e 0x890e810a 0x8811810f 0x8122823b
0xffb732a0  0x7b508361 0x7c6c826e 0x7c6f8370 0x7a6d846f
0xffb732b0  0x7c6f826c 0x7f6f8066 0x815a7e49 0x88378124
0xffb732c0  0x881b8312 0x83168419 0x80198418 0x76178715
0xffb732d0  0x7519881a 0x761b8612 0x771a8818 0x7c268945
0xffb732e0  0x76538567 0x786f8274 0x79748176 0x7b758275
0xffb732f0  0x7a738573 0x79738573 0x7d738470 0x81718372
0xffb73300  0x76257e23 0x78258027 0x84257e24 0x7d258225
0xffb73310  0x6f268026 0x7c247e25 0x8b267726 0x87227b32
0xffb73320  0x82478063 0x846a8070 0x84617f64 0x7e7b8284
0xffb73330  0x7f87826f 0x8e507d46 0x91437e43 0x8a467e3b
0xffb73340  0x86458044 0x82427f44 0x884a7842 0x8a477844
0xffb73350  0x83418142 0x82448746 0x87458144 0x8b4b7b4b
0xffb73360  0x90487a4d 0x99507750 0x9d4d724d 0xa0536d4f
0xffb73370  0x9f536e4f 0xa051724d 0xa251734f 0xa152714e
0xffb73380  0xa2516d50 0xa14f714f 0x9e527253 0xa1517154
0xffb73390  0xa1516e57 0x9d516c53 0x9e536e51 0xa252734f
0xffb733a0  0xa1507257 0xa0556e56 0xa25a6f5b 0xa05b7156
0xffb733b0  0xa0517152 0x9e4c7453 0x9e4e794d 0x9a4a814e
0xffb733c0  0x96468645 0x8e438943 0x87428b3e 0x85438c3d
0xffb733d0  0x843f8d42 0x80469249 0x795a8f64 0x796f867c
0xffb733e0  0x76858786 0x74868788 0x77848884 0x73778673
0xffb733f0  0x6e688e5f 0x77559441 0x7a419139 0x7a439242
0xffb73400  0x8343973b 0x864a974e 0x755a906d 0x747c8c87
0xffb73410  0x7388848b 0x758d8588 0x78848a89 0x78848a7e
0xffb73420  0x797c8978 0x7c699064 0x7f609355 0x81548e4e
0xffb73430  0x804c914e 0x7e4c8f4c 0x7e448a49 0x823e863b
0xffb73440  0x854c875c 0x7c628870 0x7a788682 0x7e838480
0xffb73450  0x86798071 0x97637854 0xa04b764b 0x9e4c784b
0xffb73460  0x9e4b7949 0x9c4f744b 0x964f6d4d 0x934b7751
0xffb73470  0x92528052 0x914f7b4f 0x984d734e 0x9f4d714c
0xffb73480  0x9c4d744c 0x994a794d 0x974d7c50 0x904e7951
0xffb73490  0x90537654 0x8f58785a 0x8d56785b 0x8b537450
0xffb734a0  0x884a764b 0x904b724b 0x8f477649 0x88497d42
0xffb734b0  0x834a7e3f 0x82497e40 0x87477a4c 0x88447847
0xffb734c0  0x84427c44 0x81457e41 0x7e407b3b 0x7f337c31
0xffb734d0  0x7f27812f 0x7d318535 0x7d3a8240 0x803d7c36
0xffb734e0  0x802b7c2d 0x80227d1b 0x7e167d18 0x80197f11
0xffb734f0  0x880f8613 0x80138417 0x7d0f7b12 0x84137c14
0xffb73500  0x7e148412 0x831b8112 0x82177f12 0x7d118213
0xffb73510  0x86107c0e 0x820f7c10 0x840d7e0f 0x7e1f823b
0xffb73520  0x794f825e 0x7d67806c 0x7e707f6d 0x7d6e826c
0xffb73530  0x7c70836f 0x7d69826b 0x805d7f4a 0x88398122
0xffb73540  0x83188318 0x7c14861b 0x7b158819 0x711a8b18
0xffb73550  0x72198617 0x7b1e8217 0x7d198516 0x7e20893e
0xffb73560  0x7b548863 0x7a707f74 0x79748174 0x7a708476
0xffb73570  0x78758571 0x7c738670 0x7f748370 0x7f718370
0xffb73580  0x77218028 0x74227f24 0x81268127 0x78248422
0xffb73590  0x73268322 0x80257f25 0x90297b24 0x88257b30
0xffb735a0  0x844e7b63 0x866f7f6d 0x855c7e67 0x807c8086
0xffb735b0  0x8085826b 0x904c7f4a 0x94427d3e 0x85427e42
0xffb735c0  0x833d8144 0x81447e45 0x83437a43 0x89477741
0xffb735d0  0x84457d43 0x85428144 0x89448149 0x8a497c45
0xffb735e0  0x90507a52 0x994e774f 0x9c4f7351 0xa14f6e51
0xffb735f0  0xa0516e4e 0x9f50714e 0xa4547350 0xa34f7352
0xffb73600  0xa2517152 0xa34f7152 0x9f527351 0x9f517057
0xffb73610  0xa2556f50 0x9f517256 0x9c52714f 0x9e527255
0xffb73620  0x9f507351 0xa355715a 0xa25b6f56 0x9c587055
0xffb73630  0x9c507450 0x9e4e7752 0x9d4e7c4d 0x964c8142
0xffb73640  0x964a853e 0x903e8941 0x8c3d8d43 0x8941903b
0xffb73650  0x803d903d 0x8048934c 0x79529062 0x7969867a
0xffb73660  0x767f8682 0x73838882 0x75808778 0x6d718c6b
0xffb73670  0x685b9255 0x7c4b8d38 0x86388d3a 0x8037913f
0xffb73680  0x86408f3d 0x8945964d 0x7b5d916d 0x797b8b84
0xffb73690  0x7788878a 0x7b8b8888 0x7c848c84 0x7a868b80
0xffb736a0  0x7c82897b 0x7c798b72 0x7d6f8b6a 0x7a678965
0xffb736b0  0x7a648965 0x7d638a5c 0x7b5b8850 0x7c47893e
0xffb736c0  0x84508957 0x7b5c8869 0x797b867e 0x7d808380
0xffb736d0  0x8678816d 0x985e7a51 0x9b4c7449 0x9b4a774d
0xffb736e0  0xa04a784c 0x994b7349 0x934e6d51 0x8f4e7651
0xffb736f0  0x8c4f7952 0x924e7555 0x9a48724c 0xa14e744d
0xffb73700  0x9f4b774e 0x9d4e774f 0x9c50764e 0x93487850
0xffb73710  0x90507853 0x905c7758 0x8f5a7a57 0x89537b4e
0xffb73720  0x854b7b4d 0x8e4b784e 0x8f47774e 0x87467c4a
0xffb73730  0x7f457e45 0x7c437e44 0x83447d4d 0x85407d42
0xffb73740  0x84448147 0x83447e42 0x7b407c3b 0x7f347e30
0xffb73750  0x822d8227 0x7c358435 0x7c398142 0x7f3b7f35
0xffb73760  0x7d2b8026 0x80227e19 0x7d177e0d 0x7d1b7e14
0xffb73770  0x87128510 0x7e15830d 0x7b137c11 0x83157d13
0xffb73780  0x7f148515 0x8c128315 0x8b148010 0x7e0c810f
0xffb73790  0x80157c0d 0x790a7b0e 0x830f7e10 0x7e268236
0xffb737a0  0x774e845d 0x7f69826f 0x8169816f 0x7f6d816d
0xffb737b0  0x7f6e826c 0x7d6b8267 0x805c814b 0x89398226
0xffb737c0  0x81148216 0x7813861b 0x79188c19 0x6f1a901c
0xffb737d0  0x70188b1d 0x7d198819 0x841b8618 0x8322893d
0xffb737e0  0x81578a65 0x7c6d8273 0x79728276 0x79728475
0xffb737f0  0x776f8575 0x80728673 0x81708470 0x7e6e8270
0xffb73800  0x5f759776 0x657a9878 0x7074967d 0x6c7b9778
0xffb73810  0x657d957b 0x677a9377 0x6c799579 0x6c7e9476
0xffb73820  0x6b7e9083 0x687f927d 0x61829584 0x647d977a
0xffb73830  0x6c779477 0x69799480 0x68879086 0x6a849183
0xffb73840  0x66839183 0x66889089 0x65829181 0x5f82947f
0xffb73850  0x667d957b 0x6b839284 0x69838e88 0x70888c87
0xffb73860  0x72878a8e 0x6b8b8a89 0x69868f7f 0x6c7f9084
0xffb73870  0x6d848e84 0x68858c8b 0x64898e8c 0x68849282
0xffb73880  0x677f9184 0x65889284 0x667f9481 0x6583928a
0xffb73890  0x65809084 0x65868e89 0x658d8c8b 0x67878b8a
0xffb738a0  0x6b90898d 0x6a8b888f 0x698e898c 0x68888d86
0xffb738b0  0x68868f8b 0x65868c8c 0x658b8c8a 0x668a8c8f
0xffb738c0  0x61898a8d 0x63918995 0x698d8790 0x69938793
0xffb738d0  0x658b888b 0x668b8a8e 0x698e8a8c 0x688a8e89
0xffb738e0  0x64878e8b 0x628e8990 0x6a918891 0x6d8d8891
0xffb738f0  0x6f8f8695 0x6f998695 0x68938893 0x658a8f83
0xffb73900  0x67848b90 0x68908890 0x678c8c89 0x66868c88
0xffb73910  0x6a8b888b 0x6e8c8887 0x6d8b8893 0x68998795
0xffb73920  0x688f8992 0x6d8a898c 0x6d8d8a8c 0x6d8e888e
0xffb73930  0x6f978794 0x70948692 0x6f948694 0x6e9b8691
0xffb73940  0x6992898d 0x688c8a87 0x6b8e8893 0x6d96878e
0xffb73950  0x6c8f888f 0x67968893 0x6890888f 0x6c908892
0xffb73960  0x6c92888d 0x6b878b87 0x6d8d8a90 0x6d898c87
0xffb73970  0x6d8a8c8b 0x6c878c89 0x688c8a8f 0x688c8a8b
0xffb73980  0x66888c86 0x66888c86 0x6b8a8891 0x6b968890
0xffb73990  0x68898d89 0x66899083 0x66898d88 0x668a8a89
0xffb739a0  0x688c888f 0x6d8c8a8c 0x6d8a898f 0x658d8e89
0xffb739b0  0x627a9869 0x755cac4c 0x784abe4b 0x774cc34d
0xffb739c0  0x744ec353 0x7153c152 0x7854c44f 0x7254c655
0xffb739d0  0x5e53c553 0x5d4ec352 0x684ac24d 0x6e4cbe51
0xffb739e0  0x6952bd4f 0x5e55c456 0x6056c557 0x675bc158
0xffb739f0  0x6457bf57 0x6356c059 0x665abc5c 0x655dbc55
0xffb73a00  0x6658bf5d 0x6a57be58 0x6d54be54 0x6c50bc50
0xffb73a10  0x6652bd47 0x6b4dbf48 0x7145ba48 0x6e3eb441
0xffb73a20  0x7045ae36 0x6e3aa833 0x6b32a32d 0x6a2fa033
0xffb73a30  0x6c38a639 0x7739a335 0x7a32992b 0x79289a2c
0xffb73a40  0x7e269d27 0x79299b27 0x74289c2b 0x76299a27
0xffb73a50  0x6a209721 0x67249520 0x76209221 0x7a20981b
0xffb73a60  0x751c9a20 0x7f209620 0x89229320 0x88219422
0xffb73a70  0x871f9825 0x7f219b23 0x84229725 0x871d9820
0xffb73a80  0x61759876 0x6a78977a 0x757d947e 0x71779478
0xffb73a90  0x6b75957c 0x6c7b947c 0x6f7c947a 0x6c7a957d
0xffb73aa0  0x69879187 0x6a84937d 0x6882967f 0x6a7e967a
0xffb73ab0  0x6f79947e 0x6a7e9480 0x6a809283 0x6d7f9284
0xffb73ac0  0x67809182 0x60849085 0x60869081 0x6086947c
0xffb73ad0  0x687e947e 0x67859185 0x68898e8a 0x6f908c87
0xffb73ae0  0x708d8a94 0x678f8b8c 0x63878f88 0x6b879187
0xffb73af0  0x6d839084 0x67888e86 0x67888f84 0x6f829184
0xffb73b00  0x6c848e8b 0x68859084 0x66839480 0x66869287
0xffb73b10  0x64818f7d 0x658b8f8a 0x6a838e84 0x6a8a8c8a
0xffb73b20  0x658d8a8d 0x658a8b89 0x63888b8d 0x62878b89
0xffb73b30  0x688a8d86 0x67878e85 0x68888d85 0x66898b87
0xffb73b40  0x5f8f8b8a 0x618d8a8f 0x698f898d 0x69948890
0xffb73b50  0x668d8a90 0x67888c8a 0x69898b8d 0x658b8b8b
0xffb73b60  0x638a8d89 0x65878b8f 0x6b93898f 0x6f88888f
0xffb73b70  0x72958796 0x719a8698 0x68948891 0x678b8c84
0xffb73b80  0x6d8d8993 0x6b958890 0x67878b85 0x67888a8a
0xffb73b90  0x6c8c8791 0x7097878f 0x6d908892 0x6790888f
0xffb73ba0  0x6b8c8990 0x6e8d898b 0x6f908990 0x708e8892
0xffb73bb0  0x708e8797 0x7191888e 0x6e918791 0x6c95878f
0xffb73bc0  0x688e898a 0x678b8a8a 0x698d8998 0x6c8f888f
0xffb73bd0  0x6d8e8890 0x6b928897 0x6a928890 0x6b918895
0xffb73be0  0x6c8e888b 0x6b8c888e 0x70978896 0x6f8a8988
0xffb73bf0  0x6d8c8b92 0x708e8c93 0x6a8b8a8b 0x688c898f
0xffb73c00  0x67878b88 0x6a8b8c8b 0x6b8b8890 0x6a92888c
0xffb73c10  0x6b8b8e89 0x64878e87 0x62848b8f 0x64928989
0xffb73c20  0x6c888890 0x71928991 0x6c8d898f 0x5d918e88
0xffb73c30  0x6079976e 0x8260ac53 0x7e4dbe4f 0x724fc251
0xffb73c40  0x7651c156 0x7252bf4f 0x6e56c15a 0x6657c559
0xffb73c50  0x5657c255 0x6256bd57 0x6e51bc54 0x6a4fb758
0xffb73c60  0x605bb259 0x5c5bb65e 0x635db95e 0x655dba5e
0xffb73c70  0x5d59bb56 0x5c5bbd58 0x595b5812 0xbe855a12
0xffb73c80  0x53135e82 0xc1145b13 0x5a865911 0xc40f637e
0xffb73c90  0x5e145c86 0xc3125b10 0x617e5311 0xc0134f81
0xffb73ca0  0x64124b13 0xbd824812 0x69124c82 0xb9124011
0x00000000
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\makesdk\dvdboilerplate\readme.txt ===
DVD-ROM Boilerplate video
-------------------------

The DVD-ROM boilerplate video is provided for developers producing DVD-ROM titles that contain no DVD-Video formatted data. A disc without a proper DVD-Video zone may behave unpredictably when placed in a standalone DVD-Video player, possibly ejecting the disc or locking up. This confusing situation can be avoided by adding the DVD-ROM boilerplate video to the disc. When the disc is inserted into a DVD-Video player it will display a message informing the user that the disc is designed to work in a DVD-ROM PC with Microsoft Windows. An autorun.inf file should be included on the disc so that Windows will launch the specified executable rather than automatically launching the DVD Player and displaying the boilerplate video message.

When creating the DVD-ROM image, copy the VIDEO_TS directory and its contents, and the AUDIO_TS directory (which is empty), to the root directory of the DVD-ROM image. (Don't copy this readme file.) Be sure to use image formatting software that properly recognizes the DVD-Video zone and places it at the physical beginning of the disc.

The DVD-ROM boilerplate video files may be used on any DVD-ROM title in accordance with the Distribution Requirements of the SDK End-User License Agreement.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\mfvideo\msmfcnt\bmplist.txt ===
IDR_STATIC_RECT             common\static.bmp
IDR_DOWN_RECT               common\down.bmp
IDR_STATIC_OVAL             windowed\static.bmp
IDR_DOWN_OVAL               windowed\down.bmp
IDR_FULLSTATIC_OVAL         fullscrn\static.bmp
IDR_FULLDOWN_OVAL           fullscrn\down.bmp

// Common buttons and sliders
IDR_STATIC_EXPAND          common\expand\static.bmp
IDR_STATIC_SHRINK          common\simple\static.bmp
IDR_STATIC_SP              common\subtitle\static.bmp
IDR_STATIC_LAN             common\audio\static.bmp
IDR_STATIC_ANGLE           common\angle\static.bmp
IDR_STATIC_UP              common\up\static.bmp
IDR_STATIC_DOWN            common\down\static.bmp
IDR_STATIC_HELP            common\help\static.bmp
IDR_STATIC_HELPB           common\helpb\static.bmp
IDR_STATIC_CLOSE           common\close\STATIC.bmp
IDR_STATIC_MAX             common\max\STATIC.bmp
IDR_STATIC_MIN             common\min\STATIC.bmp
IDR_STATIC_RESTORE         common\restore\STATIC.bmp
IDR_STATIC_OPT             common\options\static.bmp
IDR_STATIC_RIGHT           common\right\static.bmp
IDR_STATIC_LEFT            common\left\static.bmp
IDR_STATIC_TIMESLIDER      common\timeline\static.bmp
IDR_STATIC_TIMETHUMB       common\timeline\th.bmp
IDR_FULLSTATIC_TIMETHUMB   common\timeline\fullth.bmp
IDR_STATIC_ENCC            common\CC\static.bmp
IDR_STATIC_DICC            common\CC\static.bmp

IDR_HOVER_EXPAND          common\expand\HOVER.bmp
IDR_HOVER_SHRINK          common\simple\HOVER.bmp
IDR_HOVER_SP              common\subtitle\HOVER.bmp
IDR_HOVER_LAN             common\audio\HOVER.bmp
IDR_HOVER_ANGLE           common\angle\HOVER.bmp
IDR_HOVER_OPT             common\options\HOVER.bmp
IDR_HOVER_RIGHT           common\right\HOVER.bmp
IDR_HOVER_LEFT            common\left\HOVER.bmp
IDR_HOVER_UP              common\up\HOVER.bmp
IDR_HOVER_DOWN            common\down\HOVER.bmp
IDR_HOVER_HELP            common\help\HOVER.bmp
IDR_HOVER_HELPB           common\helpb\HOVER.bmp
IDR_HOVER_CLOSE           common\close\HOVER.bmp
IDR_HOVER_MAX             common\max\HOVER.bmp
IDR_HOVER_MIN             common\min\HOVER.bmp
IDR_HOVER_RESTORE         common\restore\HOVER.bmp
IDR_HOVER_ENCC            common\CC\HOVER.bmp
IDR_HOVER_DICC            common\CC\HOVER.bmp

IDR_DOWN_EXPAND          common\expand\DOWN.bmp
IDR_DOWN_SHRINK          common\simple\DOWN.bmp
IDR_DOWN_SP              common\subtitle\DOWN.bmp
IDR_DOWN_LAN             common\audio\DOWN.bmp
IDR_DOWN_ANGLE           common\angle\DOWN.bmp
IDR_DOWN_OPT             common\options\DOWN.bmp
IDR_DOWN_RIGHT           common\right\DOWN.bmp
IDR_DOWN_LEFT            common\left\DOWN.bmp
IDR_DOWN_UP              common\up\DOWN.bmp
IDR_DOWN_DOWN            common\down\DOWN.bmp
IDR_DOWN_HELP            common\help\DOWN.bmp
IDR_DOWN_HELPB           common\helpb\DOWN.bmp
IDR_DOWN_CLOSE           common\close\DOWN.bmp
IDR_DOWN_MAX             common\max\DOWN.bmp
IDR_DOWN_MIN             common\min\DOWN.bmp
IDR_DOWN_RESTORE         common\restore\DOWN.bmp
IDR_DOWN_ENCC            common\CC\DOWN.bmp
IDR_DOWN_DICC            common\CC\DOWN.bmp

IDR_DISABLED_EXPAND          common\expand\DISABLED.bmp
IDR_DISABLED_SHRINK          common\simple\DISABLED.bmp
IDR_DISABLED_SP              common\subtitle\DISABLED.bmp
IDR_DISABLED_LAN             common\audio\DISABLED.bmp
IDR_DISABLED_ANGLE           common\angle\DISABLED.bmp
IDR_DISABLED_OPT             common\options\DISABLED.bmp
IDR_DISABLED_RIGHT           common\right\DISABLED.bmp
IDR_DISABLED_LEFT            common\left\DISABLED.bmp
IDR_DISABLED_TIMESLIDER      common\timeline\disabled.bmp
IDR_DISABLED_TIMETHUMB       common\timeline\disabledth.bmp
IDR_DISABLED_UP              common\up\DISABLED.bmp
IDR_DISABLED_DOWN            common\down\DISABLED.bmp
IDR_DISABLED_HELP            common\help\DISABLED.bmp
IDR_DISABLED_HELPB           common\helpb\DISABLED.bmp
IDR_DISABLED_CLOSE           common\close\DISABLED.bmp
IDR_DISABLED_MAX             common\max\DISABLED.bmp
IDR_DISABLED_MIN             common\min\DISABLED.bmp
IDR_DISABLED_RESTORE         common\restore\DISABLED.bmp
IDR_DISABLED_ENCC            common\CC\DISABLED.bmp
IDR_DISABLED_DICC            common\CC\DISABLED.bmp

IDR_ACTIVE_EXPAND          common\expand\ACTIVE.bmp
IDR_ACTIVE_SHRINK          common\simple\ACTIVE.bmp
IDR_ACTIVE_SP              common\subtitle\ACTIVE.bmp
IDR_ACTIVE_LAN             common\audio\ACTIVE.bmp
IDR_ACTIVE_ANGLE           common\angle\ACTIVE.bmp
IDR_ACTIVE_OPT             common\options\ACTIVE.bmp
IDR_ACTIVE_RIGHT           common\right\ACTIVE.bmp
IDR_ACTIVE_LEFT            common\left\ACTIVE.bmp
IDR_ACTIVE_UP              common\up\ACTIVE.bmp
IDR_ACTIVE_DOWN            common\down\ACTIVE.bmp
IDR_ACTIVE_HELP            common\help\ACTIVE.bmp
IDR_ACTIVE_HELPB           common\helpb\ACTIVE.bmp
IDR_ACTIVE_CLOSE           common\close\ACTIVE.bmp
IDR_ACTIVE_MAX             common\max\ACTIVE.bmp
IDR_ACTIVE_MIN             common\min\ACTIVE.bmp
IDR_ACTIVE_RESTORE         common\restore\ACTIVE.bmp
IDR_ACTIVE_ENCC            common\CC\ACTIVE.bmp
IDR_ACTIVE_DICC            common\CC\ACTIVE.bmp

// Windowed buttons
IDR_STATIC_PAUSE           windowed\pause\static.bmp
IDR_STATIC_PLAY            windowed\play\static.bmp
IDR_STATIC_FF              windowed\fastfwd\static.bmp
IDR_STATIC_RW              windowed\fastrev\static.bmp
IDR_STATIC_MUTE            windowed\mute\static.bmp
IDR_STATIC_SOUND           windowed\sound\static.bmp
IDR_STATIC_MENU            windowed\menu\static.bmp
IDR_STATIC_RESUME          windowed\resume\static.bmp
IDR_STATIC_PREV            windowed\prev\static.bmp
IDR_STATIC_NEXT            windowed\next\static.bmp
IDR_STATIC_ZOOMIN          windowed\zoomin\STATIC.bmp
IDR_STATIC_ZOOMOUT         windowed\zoomout\STATIC.bmp
IDR_STATIC_CAPTURE         windowed\capture\STATIC.bmp
IDR_STATIC_NEXTFRAME       windowed\nextframe\STATIC.bmp
IDR_STATIC_PREVFRAME       windowed\prevframe\STATIC.bmp
IDR_STATIC_EJECT           windowed\eject\STATIC.bmp
IDR_STATIC_STOP            windowed\stop\STATIC.bmp
IDR_STATIC_ENTER           windowed\enter\static.bmp
IDR_STATIC_TITLEMENU       windowed\title\static.bmp
IDR_STATIC_VOLSLIDER       windowed\volume\static.bmp
IDR_STATIC_VOLTHUMB        windowed\volume\th.bmp
IDR_STATIC_SPEEDSLIDER     windowed\playspeed\static.bmp
IDR_STATIC_SPEEDTHUMB      windowed\playspeed\th.bmp


IDR_HOVER_PAUSE           windowed\pause\HOVER.bmp
IDR_HOVER_PLAY            windowed\play\HOVER.bmp
IDR_HOVER_FF              windowed\fastfwd\HOVER.bmp
IDR_HOVER_RW              windowed\fastrev\HOVER.bmp
IDR_HOVER_MUTE            windowed\mute\HOVER.bmp
IDR_HOVER_SOUND           windowed\sound\HOVER.bmp
IDR_HOVER_MENU            windowed\menu\HOVER.bmp
IDR_HOVER_RESUME          windowed\resume\HOVER.bmp
IDR_HOVER_PREV            windowed\prev\HOVER.bmp
IDR_HOVER_NEXT            windowed\next\HOVER.bmp
IDR_HOVER_ENTER           windowed\enter\HOVER.bmp
IDR_HOVER_ZOOMIN          windowed\zoomin\HOVER.bmp
IDR_HOVER_ZOOMOUT         windowed\zoomout\HOVER.bmp
IDR_HOVER_CAPTURE         windowed\capture\HOVER.bmp
IDR_HOVER_NEXTFRAME       windowed\nextframe\HOVER.bmp
IDR_HOVER_PREVFRAME       windowed\prevframe\HOVER.bmp
IDR_HOVER_EJECT           windowed\eject\HOVER.bmp
IDR_HOVER_STOP            windowed\stop\HOVER.bmp
IDR_HOVER_TITLEMENU       windowed\title\HOVER.bmp

IDR_DOWN_PAUSE           windowed\pause\DOWN.bmp
IDR_DOWN_PLAY            windowed\play\DOWN.bmp
IDR_DOWN_FF              windowed\fastfwd\DOWN.bmp
IDR_DOWN_RW              windowed\fastrev\DOWN.bmp
IDR_DOWN_MUTE            windowed\mute\DOWN.bmp
IDR_DOWN_SOUND           windowed\sound\DOWN.bmp
IDR_DOWN_MENU            windowed\menu\DOWN.bmp
IDR_DOWN_RESUME          windowed\resume\DOWN.bmp
IDR_DOWN_PREV            windowed\prev\DOWN.bmp
IDR_DOWN_NEXT            windowed\next\DOWN.bmp
IDR_DOWN_ENTER           windowed\enter\DOWN.bmp
IDR_DOWN_ZOOMIN          windowed\zoomin\DOWN.bmp
IDR_DOWN_ZOOMOUT         windowed\zoomout\DOWN.bmp
IDR_DOWN_CAPTURE         windowed\capture\DOWN.bmp
IDR_DOWN_NEXTFRAME       windowed\nextframe\DOWN.bmp
IDR_DOWN_PREVFRAME       windowed\prevframe\DOWN.bmp
IDR_DOWN_EJECT           windowed\eject\DOWN.bmp
IDR_DOWN_STOP            windowed\stop\DOWN.bmp
IDR_DOWN_TITLEMENU       windowed\title\DOWN.bmp

IDR_DISABLED_PAUSE           windowed\pause\DISABLED.bmp
IDR_DISABLED_PLAY            windowed\play\DISABLED.bmp
IDR_DISABLED_FF              windowed\fastfwd\DISABLED.bmp
IDR_DISABLED_RW              windowed\fastrev\DISABLED.bmp
IDR_DISABLED_MUTE            windowed\mute\DISABLED.bmp
IDR_DISABLED_SOUND           windowed\sound\DISABLED.bmp
IDR_DISABLED_MENU            windowed\menu\DISABLED.bmp
IDR_DISABLED_RESUME          windowed\resume\DISABLED.bmp
IDR_DISABLED_PREV            windowed\prev\DISABLED.bmp
IDR_DISABLED_NEXT            windowed\next\DISABLED.bmp
IDR_DISABLED_ENTER           windowed\enter\DISABLED.bmp
IDR_DISABLED_ZOOMIN          windowed\zoomin\DISABLED.bmp
IDR_DISABLED_ZOOMOUT         windowed\zoomout\DISABLED.bmp
IDR_DISABLED_CAPTURE         windowed\capture\DISABLED.bmp
IDR_DISABLED_NEXTFRAME       windowed\nextframe\DISABLED.bmp
IDR_DISABLED_PREVFRAME       windowed\prevframe\DISABLED.bmp
IDR_DISABLED_EJECT           windowed\eject\DISABLED.bmp
IDR_DISABLED_STOP            windowed\stop\DISABLED.bmp
IDR_DISABLED_TITLEMENU       windowed\title\DISABLED.bmp
IDR_DISABLED_VOLSLIDER       windowed\volume\disabled.bmp
IDR_DISABLED_VOLTHUMB        windowed\volume\disabledth.bmp
IDR_DISABLED_SPEEDSLIDER     windowed\playspeed\disabled.bmp
IDR_DISABLED_SPEEDTHUMB      windowed\playspeed\disabledth.bmp


IDR_ACTIVE_PAUSE           windowed\pause\ACTIVE.bmp
IDR_ACTIVE_PLAY            windowed\play\ACTIVE.bmp
IDR_ACTIVE_FF              windowed\fastfwd\ACTIVE.bmp
IDR_ACTIVE_RW              windowed\fastrev\ACTIVE.bmp
IDR_ACTIVE_MUTE            windowed\mute\ACTIVE.bmp
IDR_ACTIVE_SOUND           windowed\sound\ACTIVE.bmp
IDR_ACTIVE_MENU            windowed\menu\ACTIVE.bmp
IDR_ACTIVE_RESUME          windowed\resume\ACTIVE.bmp
IDR_ACTIVE_PREV            windowed\prev\ACTIVE.bmp
IDR_ACTIVE_NEXT            windowed\next\ACTIVE.bmp
IDR_ACTIVE_ENTER           windowed\enter\ACTIVE.bmp
IDR_ACTIVE_ZOOMIN          windowed\zoomin\ACTIVE.bmp
IDR_ACTIVE_ZOOMOUT         windowed\zoomout\ACTIVE.bmp
IDR_ACTIVE_CAPTURE         windowed\capture\ACTIVE.bmp
IDR_ACTIVE_NEXTFRAME       windowed\nextframe\ACTIVE.bmp
IDR_ACTIVE_PREVFRAME       windowed\prevframe\ACTIVE.bmp
IDR_ACTIVE_EJECT           windowed\eject\ACTIVE.bmp
IDR_ACTIVE_STOP            windowed\stop\ACTIVE.bmp
IDR_ACTIVE_TITLEMENU       windowed\title\ACTIVE.bmp

// Full screen buttons
IDR_FULLSTATIC_PAUSE           fullscrn\pause\static.bmp
IDR_FULLSTATIC_PLAY            fullscrn\play\static.bmp
IDR_FULLSTATIC_FF              fullscrn\fastfwd\static.bmp
IDR_FULLSTATIC_RW              fullscrn\fastrev\static.bmp
IDR_FULLSTATIC_MUTE            fullscrn\mute\static.bmp
IDR_FULLSTATIC_SOUND           fullscrn\sound\static.bmp
IDR_FULLSTATIC_MENU            fullscrn\menu\static.bmp
IDR_FULLSTATIC_RESUME          fullscrn\resume\static.bmp
IDR_FULLSTATIC_PREV            fullscrn\prev\static.bmp
IDR_FULLSTATIC_NEXT            fullscrn\next\static.bmp
IDR_FULLSTATIC_ZOOMIN          fullscrn\zoomin\STATIC.bmp
IDR_FULLSTATIC_ZOOMOUT         fullscrn\zoomout\STATIC.bmp
IDR_FULLSTATIC_CAPTURE         fullscrn\capture\STATIC.bmp
IDR_FULLSTATIC_NEXTFRAME       fullscrn\nextframe\STATIC.bmp
IDR_FULLSTATIC_PREVFRAME       fullscrn\prevframe\STATIC.bmp
IDR_FULLSTATIC_EJECT           fullscrn\eject\STATIC.bmp
IDR_FULLSTATIC_STOP            fullscrn\stop\STATIC.bmp
IDR_FULLSTATIC_UP              common\up\fullstatic.bmp
IDR_FULLSTATIC_DOWN            common\down\fullstatic.bmp
IDR_FULLSTATIC_LEFT            common\left\fullstatic.bmp
IDR_FULLSTATIC_RIGHT           common\right\fullstatic.bmp
IDR_FULLSTATIC_ENTER           fullscrn\enter\static.bmp
IDR_FULLSTATIC_TITLEMENU       fullscrn\title\static.bmp
IDR_FULLSTATIC_VOLSLIDER       fullscrn\volume\static.bmp
IDR_FULLSTATIC_VOLTHUMB        fullscrn\volume\th.bmp
IDR_FULLSTATIC_SPEEDSLIDER     fullscrn\playspeed\static.bmp
IDR_FULLSTATIC_SPEEDTHUMB      fullscrn\playspeed\th.bmp


IDR_FULLHOVER_PAUSE           fullscrn\pause\HOVER.bmp
IDR_FULLHOVER_PLAY            fullscrn\play\HOVER.bmp
IDR_FULLHOVER_FF              fullscrn\fastfwd\HOVER.bmp
IDR_FULLHOVER_RW              fullscrn\fastrev\HOVER.bmp
IDR_FULLHOVER_MUTE            fullscrn\mute\HOVER.bmp
IDR_FULLHOVER_SOUND           fullscrn\sound\HOVER.bmp
IDR_FULLHOVER_MENU            fullscrn\menu\HOVER.bmp
IDR_FULLHOVER_RESUME          fullscrn\resume\HOVER.bmp
IDR_FULLHOVER_PREV            fullscrn\prev\HOVER.bmp
IDR_FULLHOVER_NEXT            fullscrn\next\HOVER.bmp
IDR_FULLHOVER_ENTER           fullscrn\enter\HOVER.bmp
IDR_FULLHOVER_ZOOMIN          fullscrn\zoomin\HOVER.bmp
IDR_FULLHOVER_ZOOMOUT         fullscrn\zoomout\HOVER.bmp
IDR_FULLHOVER_CAPTURE         fullscrn\capture\HOVER.bmp
IDR_FULLHOVER_NEXTFRAME       fullscrn\nextframe\HOVER.bmp
IDR_FULLHOVER_PREVFRAME       fullscrn\prevframe\HOVER.bmp
IDR_FULLHOVER_EJECT           fullscrn\eject\HOVER.bmp
IDR_FULLHOVER_STOP            fullscrn\stop\HOVER.bmp
IDR_FULLHOVER_TITLEMENU       fullscrn\title\HOVER.bmp

IDR_FULLDOWN_PAUSE           fullscrn\pause\DOWN.bmp
IDR_FULLDOWN_PLAY            fullscrn\play\DOWN.bmp
IDR_FULLDOWN_FF              fullscrn\fastfwd\DOWN.bmp
IDR_FULLDOWN_RW              fullscrn\fastrev\DOWN.bmp
IDR_FULLDOWN_MUTE            fullscrn\mute\DOWN.bmp
IDR_FULLDOWN_SOUND           fullscrn\sound\DOWN.bmp
IDR_FULLDOWN_MENU            fullscrn\menu\DOWN.bmp
IDR_FULLDOWN_RESUME          fullscrn\resume\DOWN.bmp
IDR_FULLDOWN_PREV            fullscrn\prev\DOWN.bmp
IDR_FULLDOWN_NEXT            fullscrn\next\DOWN.bmp
IDR_FULLDOWN_ENTER           fullscrn\enter\DOWN.bmp
IDR_FULLDOWN_ZOOMIN          fullscrn\zoomin\DOWN.bmp
IDR_FULLDOWN_ZOOMOUT         fullscrn\zoomout\DOWN.bmp
IDR_FULLDOWN_CAPTURE         fullscrn\capture\DOWN.bmp
IDR_FULLDOWN_NEXTFRAME       fullscrn\nextframe\DOWN.bmp
IDR_FULLDOWN_PREVFRAME       fullscrn\prevframe\DOWN.bmp
IDR_FULLDOWN_EJECT           fullscrn\eject\DOWN.bmp
IDR_FULLDOWN_STOP            fullscrn\stop\DOWN.bmp
IDR_FULLDOWN_TITLEMENU       fullscrn\title\DOWN.bmp

IDR_FULLDISABLED_PAUSE           fullscrn\pause\DISABLED.bmp
IDR_FULLDISABLED_PLAY            fullscrn\play\DISABLED.bmp
IDR_FULLDISABLED_FF              fullscrn\fastfwd\DISABLED.bmp
IDR_FULLDISABLED_RW              fullscrn\fastrev\DISABLED.bmp
IDR_FULLDISABLED_MUTE            fullscrn\mute\DISABLED.bmp
IDR_FULLDISABLED_SOUND           fullscrn\sound\DISABLED.bmp
IDR_FULLDISABLED_MENU            fullscrn\menu\DISABLED.bmp
IDR_FULLDISABLED_RESUME          fullscrn\resume\DISABLED.bmp
IDR_FULLDISABLED_PREV            fullscrn\prev\DISABLED.bmp
IDR_FULLDISABLED_NEXT            fullscrn\next\DISABLED.bmp
IDR_FULLDISABLED_ENTER           fullscrn\enter\DISABLED.bmp
IDR_FULLDISABLED_ZOOMIN          fullscrn\zoomin\DISABLED.bmp
IDR_FULLDISABLED_ZOOMOUT         fullscrn\zoomout\DISABLED.bmp
IDR_FULLDISABLED_CAPTURE         fullscrn\capture\DISABLED.bmp
IDR_FULLDISABLED_NEXTFRAME       fullscrn\nextframe\DISABLED.bmp
IDR_FULLDISABLED_PREVFRAME       fullscrn\prevframe\DISABLED.bmp
IDR_FULLDISABLED_EJECT           fullscrn\eject\DISABLED.bmp
IDR_FULLDISABLED_STOP            fullscrn\stop\DISABLED.bmp
IDR_FULLDISABLED_TITLEMENU       fullscrn\title\DISABLED.bmp
IDR_FULLDISABLED_VOLSLIDER       fullscrn\volume\disabled.bmp
IDR_FULLDISABLED_VOLTHUMB        fullscrn\volume\disabledth.bmp
IDR_FULLDISABLED_SPEEDSLIDER     fullscrn\playspeed\disabled.bmp
IDR_FULLDISABLED_SPEEDTHUMB      fullscrn\playspeed\disabledth.bmp


IDR_FULLACTIVE_PAUSE           fullscrn\pause\ACTIVE.bmp
IDR_FULLACTIVE_PLAY            fullscrn\play\ACTIVE.bmp
IDR_FULLACTIVE_FF              fullscrn\fastfwd\ACTIVE.bmp
IDR_FULLACTIVE_RW              fullscrn\fastrev\ACTIVE.bmp
IDR_FULLACTIVE_MUTE            fullscrn\mute\ACTIVE.bmp
IDR_FULLACTIVE_SOUND           fullscrn\sound\ACTIVE.bmp
IDR_FULLACTIVE_MENU            fullscrn\menu\ACTIVE.bmp
IDR_FULLACTIVE_RESUME          fullscrn\resume\ACTIVE.bmp
IDR_FULLACTIVE_PREV            fullscrn\prev\ACTIVE.bmp
IDR_FULLACTIVE_NEXT            fullscrn\next\ACTIVE.bmp
IDR_FULLACTIVE_ENTER           fullscrn\enter\ACTIVE.bmp
IDR_FULLACTIVE_ZOOMIN          fullscrn\zoomin\ACTIVE.bmp
IDR_FULLACTIVE_ZOOMOUT         fullscrn\zoomout\ACTIVE.bmp
IDR_FULLACTIVE_CAPTURE         fullscrn\capture\ACTIVE.bmp
IDR_FULLACTIVE_NEXTFRAME       fullscrn\nextframe\ACTIVE.bmp
IDR_FULLACTIVE_PREVFRAME       fullscrn\prevframe\ACTIVE.bmp
IDR_FULLACTIVE_EJECT           fullscrn\eject\ACTIVE.bmp
IDR_FULLACTIVE_STOP            fullscrn\stop\ACTIVE.bmp
IDR_FULLACTIVE_TITLEMENU       fullscrn\title\ACTIVE.bmp
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\mfvideo\mswebdvd\docs\web dvd scriptable api.doc ===
Microsoft Word Document MSWordDoc Word.Document.8The Microsoft Corporation Web DVD Scriptable API Title _PID_HLINKSWeb DVD Scriptable API David Janecek Normal.dot a-tedyo Microsoft Word 9.0bjbjU WebDVD Scriptable API General Restrictions Fully Automation Compatible, the API can be used by any automation compatible programming language, such as VB, VB Script, JScript, C++, J++, etc Support for Dual interfaces, supports IDispatch as well as custom interface Synchronous API- all the calls return after the underlying operation is completed. In case of PlayChaptersAutoStop the API returns when the requested chapter starts playing, similar to Play API, not when the specified chapter finished its callback. Based On IDVDControl2 and IDVDInfo2, the WebDVD API is simplified version of the above interfaces. The naming of the API should be the same. The parameters and use of properties is employed to simplify the API. The existing WMP API is documented under   HYPERLINK http://dxmdoc/dxmedia/help/mmp_sdk/overview/Using_DVD.htm  http://dxmdoc/dxmedia/help/mmp_sdk/overview/Using_DVD.htm  and can be used for details on what the old WMP property., method and or event should do. Works only when IDVDInfo2 and IDVDControl2 interfaces are present; reports unique error message and error description if these interfaces are not present. Error Codes error codes will bubble up from the underlying DVDNav implementation. This will be true in most cases, besides boundary checking, pointer validity checking, and or unexpected behavior before submitting execution to DVDNav; in these cases standard error codes such as E_UNEXPECTED, E_INVALIDARG (used for boundary checking) and E_POINTER (for NULL pointers) will be used. Multiple Instances there is nothing in control implementation, which would preclude multiple instances of the control. However, there the limit of having one control per machine is due to Dshow limitation. When DShow removes this limitation you should be able to have multiple instances of the control. Formatting Conventions I have used bookmarks to denote some of the characteristics of the API calls. I used for property(, for the API to wait for FP_DOM to finish( . I have marked new APIs that are different from WMP APIs in RED color. Generic Control APIs (might be hidden when used as WMP plug-in and exposed via default WMP mechanism) HRESULT Render([in, defaultvalue(0)] long lRender) Initializes DVDGraph. This API does not have to be called before play or any other API. It s reason for existence is for developers to control the initialization of the graph to improve the smoothness of their presentation and take a graph creation hit while doing some other initialization. Variable lRender is not currently used and is reserved for future use. HRESULT Play(); Starts to play DVD title, takes it out of pause, stop, rewind or fast forward state if needed and transitions into the play state (with 1.0 speed). HRESULT Pause(); Puts the graph into pause state from play or fast forward or rewind mode. HRESULT Stop(); Puts the graph into stop state from the above states. If the graph is not initialized this API will not try to auto-initialize the graph. HRESULT FullScreenMode([out, retval] VARIANT_BOOL *pVal);(  Gets the current full-screen state. HRESULT FullScreenMode([in] VARIANT_BOOL newVal); ( Sets current full-screen mode.  HRESULT PlayState([out, retval] DVDFilterState *pVal); ( Gets current play state. The states are uninitialized, play, pause, still, stopped, see Dshow PlayState for more information on dshow states. This method does not automatically initializes graph. HRESULT ReadyState([out, retval] long *pVal);( Signals the control ready states. See IE documentation for more details. This property does not automatically initializes graph. Flow Control / Rate API HRESULT PlayBackwards(double dSpeed);(  Searches backward through the current disc at the specified speed. HRESULT PlayForwards(double dSpeed); ( Searches forward through the current disc at the specified speed. HRESULT PlayNextChapter();( Halts playback of the current program and starts playback from the next program within the program chain (PGC). HRESULT PlayPrevChapter();( Halts playback of the current program and starts playback from the previous program within the program chain (PGC). HRESULT ReplayChapter();( Halts playback of the current program and restarts playback of the current program within the program chain (PGC). HRESULT Return();( Halts playback of the current media file and starts playback of the designated previous program chain (PGC). (Goes back to the parent level of the menu. If not in a menu, the Resume() command is executed.) HRESULT StillOff(); Resumes playback, canceling still mode. Menu Related API HRESULT Resume(); Returns to playing back a title from a menu. HRESULT ShowMenu(DVDMenuIDConstants MenuID); ( Displays the specified menu on the screen. HRESULT SelectUpperButton (); Selects the upper directional button from the displayed menu. HRESULT SelectLowerButton (); Selects the lower directional button from the displayed menu. HRESULT SelectLeftButton (); Selects the left directional button from the displayed menu. HRESULT SelectRightButton (); Selects the right directional button from the displayed menu. HRESULT ActivateButton (); Activates the selected button. HRESULT SelectAndActivateButton (long lButton); Selects and activates the specified button. HRESULT CurrentButton([out, retval] long *pVal); ( Retrieves a value specifying the number of the currently selected button. HRESULT ButtonsAvailable([out, retval] long *pVal); ( Retrieves a value specifying the number of available buttons. HRESULT DisableAutoMouseProcessing([out, retval] VARIANT_BOOL* fDisabled) ( Retrieves the status of mouse handling. HRESULT DisableAutoMouseProcessing([in] VARIANT_BOOL fDisable) ( Sets the way we are handling the mouse. Default is FALSE, meaning the mouse events get handled by this control. True means the user of this control will handle the mouse. HRESULT ActivateAtPosition([in] long xPos, [in] long yPos) Activates a highlight at specific position. HRESULT SelectAtPosition([in] long xPos, [in] long yPos) Selects a highlight at specific position. HRESULT GetButtonAtPosition([in] long xPos, [in] long yPos, [out,retval] long* plButton) Returns a button number at specific coordinates without selecting it or activating it. HRESULT GetButtonRect([in] long lButton, [out,retval]IDVDRect** ppRect) Returns a rect for the specified button. . (Needs to be added to DVDNav) HRESULT GetDVDScreenInMouseCoordinates([out,retval]IDVDRect** ppRect ) Gets the size of the DVD screen in mouse coordinates. . (Needs to be added to DVDNav) HRESULT SetDVDScreenInMouseCoordinates([in]IDVDRect* pRect) Sets the new coordinates system for mouse. . (Needs to be added to DVDNav) Video Resizing Functionality Control APIs HRESULT GetVideoSize([out, retval]IDVDRect** ppRect)  Gets the native video size of the movie HRESULT GetClipVideoRect([out, retval]IDVDRect** ppRect)  Gets the current clipped video react. By default it is the same as the native video size of the movie HRESULT SetClipVideoRect([in]IDVDRect* pRect)  Sets the current clipped video react. It is in the same coordinate system as the movie is. Parental Control APIs HRESULT GetPlayerParentalLevel([out] long *plParentalLevel); Returns the current parental level and the country code set in the player. The plParentalLevel  contains for parental level .  HRESULT GetPlayerParentalCountry( [out] long *plCountryCode); Returns the current country asociated with parental level code. The plCountryCode contains the country code (ISO 3166 Alpha-2 Code) HRESULT GetTitleParentalLevels([in] long lTitle, [out, retval] long *plParentalLevels) Returns the parental levels that are defined for the given title The lTitle is a title number for which the defined parental levels are requested and plParentalLevels - returns Parental levels for the title. HRESULT SelectParentalLevel([in]long lParentalLevel) Set the specified parental level for subsequent playback. In the case we are selecting higher parental level UI gets automatically created to verify such a change. We hope to use IE parental level control which is yet to be defined. Level   Rating   -1      Disable Parental Level G        3       PG       4       PG13 5     6       R        7       NC17 ?? Unrated ?? HRESULT SelectParentalCountry([in] long lCountry) Set the specified parental country for subsequent playback. The wCountry - country specified using the Alpha-2 code of the ISO-3166 standard. (wCountry is little endian, encoded as "toupper(code[0]) | toupper(code[1])<<8") HRESULT NotifyParentalLevelChange ( [in] VARIANT_BOOL fEnable )  Enables or disables the 'EC_DVD_PARENTAL_LEVEL_CHANGE and associated mechanisms to handle temporary parental notification. HRESULT AcceptParentalLevelChange ( [in] VARIANT_BOOL bAccept ) This should be executed after EC_DVD_PARENTAL_LEVEL_CHANGE event has being received. The script can put up dialog if temporary adjust to this new rating.  UI will automatically gets created to verify this information depending on system settings. We hope to use IE parental level control.  Advanced DVD Navigation API  HRESULT PlayTitle (LONG lTitle); ( Plays back specific tytle specified by the title index. HRESULT GetNumberOfChapters(long lTitle, [out, retval] long *pVal); Retrieves the number of chapters defined for the specified title. HRESULT PlayChapterInTitle ([in]LONG lTitle,[in]LONG lChapter); ( Plays the media file with the specified title index and chapter value. HRESULT PlayChaptersAutoStop(LONG strTitle, LONG strChapter, LONG strChapterCount); ( Instructs the digital video disc (DVD) player to start playing at the specified chapter within the specified title and to play the number of chapters specified. HRESULT PlayChapter (LONG lChapter); ( Halts playback of the current chapter and starts playback from the specified chapter within the same title. HRESULT PlayAtTime(BSTR strTime); ( Starts the playback in the current title in specific time. HRESULT PlayAtTimeInTitle(long lTitle, BSTR strTime); ( Plays the media file with the specified title index, starting at the specified time. HRESULT PlayPeriodInTitleAutoStop(long lTitle, BSTR strStartTime, BSTR strEndTime); ( Plays a segment in the title for strStartTime to .strEndTime. HRESULT CurrentTitle([out, retval] long *pVal); (( Retrieves a value specifying the title number currently being played. HRESULT CurrentChapter([out, retval] long *pVal); (( Retrieves a value specifying the chapter number currently being played. HRESULT CurrentTime([out, retval] BSTR *pVal); ( Retrieves a value specifying the current playback time. HRESULT TotalTitleTime([out, retval] BSTR *pVal); ( Retrieves a value specifying the total playback time for the current title. DVD Language/Angle/Subpicture/ClosedCaption API HRESULT GetAudioLanguage(LONG lStream,[out, retval] BSTR* strAudioLang); ( HRESULT CurrentSubpictureStream([out, retval] long *pVal); (( HRESULT CurrentSubpictureStream([in] long newVal); (( HRESULT SubpictureOn([out, retval] VARIANT_BOOL *pVal); (( HRESULT SubpictureOn([in] VARIANT_BOOL newVal); (( HRESULT SubpictureStreamsAvailable([out, retval] long *pVal); (( HRESULT CurrentCCService([out, retval] long *pVal); (( HRESULT CurrentCCService([in] long newVal); (( HRESULT CCActive([out, retval] VARIANT_BOOL *pVal); (( HRESULT CCActive([in] VARIANT_BOOL newVal); (( HRESULT CurrentAngle([out, retval] long *pVal); (( HRESULT CurrentAngle([in] long newVal); (( HRESULT AnglesAvailable([out, retval] long *pVal); (( HRESULT AudioStreamsAvailable([out, retval] long *pVal); (( HRESULT CurrentAudioStream([out, retval] long *pVal); (( HRESULT CurrentAudioStream([in] long newVal); (( HRESULT GetSubpictureLanguage(LONG lStream, [out, retval]BSTR* strLanguage); ( Miscelanious API HRESULT FramesPerSecond([out, retval] long *pVal); ( Retrieves a value specifying the number of frames per second used by the DVD title. HRESULT DVDDirectory([out, retval] BSTR *pVal); ( HRESULT DVDDirectory([in] BSTR newVal); ( Sets or retrieves a value specifying the directory that contains the DVD volume. HRESULT CurrentDomain([out, retval] long *pVal); ( Retrieves a value specifying the current DVD domain of the DVD player. HRESULT CurrentDiscSide([out, retval] long *pVal); ( Retrieves a value specifying the current disc side. HRESULT CurrentVolume([out, retval] long *pVal); ( Retrieves a value specifying the volume number for the current root directory. HRESULT VolumesAvailable([out, retval] long *pVal); ( Retrieves a value specifying the number of volumes in the volume set. HRESULT TitlesAvailable([out, retval] long *pVal); ( Retrieves a value specifying the number of titles available in the current volume. HRESULT ColorKey([out, retval] long *pVal); ( HRESULT ColorKey([in] long newVal); ( Sets or retrieves the color key being used by the DVD playback. HRESULT UOPValid(long lUOP, [out, retval] VARIANT_BOOL * pfValid); Retrieves a value that indicates whether the specified user operation is currently valid. HRESULT GetGPRM([in]long lGPRMIndex, ,[out, retval] short *sGPRM); Retrieves the general parameter registers specified by the index. HRESULT GetSPRM([in]long lSPRMIndex , [out, retval] short *sSPRM); Retrieves the system parameter register specifed by the index. HRESULT DVDUniqueID([out, retval] BSTR *pVal); ( Gets unique ID for the DVD in the drive. HRESULT HWND([out, retval] long *pHWND); ( Gets the window of the control. HRESULT EnableResetOnStop([in]VARIANT_BOOL fEnable); Disables the restart on stop. HRESULT EnableResetOnStop([out, retval]VARIANT_BOOL fEnabled); Gets the state of the flag, which gets executed in the transition from stop to play state and/or when set. HRESULT Eject(); Ejects or inserts the drive. HRESULT SetGPRM([in] long lInxed, [in] short sValue); Sets specified GPRM. DVD Audio Info: HRESULT CurrentAudioMultichannelExt([out, retval] VARIANT_BOOL* fOn) Lets us know if the audio multichannel extension is active. HRESULT CurrentAudioAttributeForMultichannel([out, retval] long* lAttrib) Lower 24 bits contain VTS_MU_AST_ATRT (VI4-54), only valid if the CurrentAdioMultichannelExt is TRUE. HRESULT CurrentNumberOfAudioChannels([out, retval] long* lNumber) Returns the number of audio  extended  channels (VI4-51) Text Info HRESULT GetDVDTextNumberOfLanguages( [out,retval] LONG * plNumOfLangs); ( Returns the number of text languages for the current DVD directory.  HRESULT GetDVDTextNumberOfStrings( [in] LONG lLangIndex,  [out, retval] LONG* plNumOfStrings); ( Returns the text languages number of strings depending on on the lLnagIndex. HRESULT GetDVDTextString ([in] LONG lLangIndex,  [in] LONG lStringIndex, [out, retval] BSTR* str); ( Returns the text string in for the specified language index.and string index. HRESULT GetDVDTextStringType([in] LONG lLangIndex,  [in] LONG lStringIndex, [out] enum DVD_TextStringType* pType); ( Returns what string at specified index and language represents via DVD_TextStrtingType enum. DVDNotify([in]long lEventCode, [in] long lParam, [in] long lParam2).  LEvantCode is a generic DVD and/or DShow event. See the existing DShow implementation, for details . Events passed through: EC_DVD_DOMAIN_CHANGE EC_DVD_TITLE_CHANGE EC_DVD_CHAPTER_START EC_DVD_AUDIO_STREAM_CHANGE EC_DVD_SUBPICTURE_STREAM_CHANGE EC_DVD_ANGLE_CHANGE  EC_DVD_BUTTON_CHANGE  EC_DVD_VALID_UOPS_CHANGE   EC_DVD_STILL_ON EC_DVD_STILL_OFF EC_DVD_CURRENT_TIME EC_DVD_ERROR EC_DVD_WARNING EC_DVD_CHAPTER_AUTOSTOP EC_DVD_NO_FP_PGC EC_DVD_PLAYBACK_RATE_CHANGE EC_DVD_PLAYBACK_STOPPED EC_DVD_ANGLES_AVAILABLE EC_DVD_PLAYPERIOD_AUTOSTOP Sent when the PlayPeriodInTitle completes or is cancelled EC_DVD_BUTTON_AUTO_ACTIVATED Fired when a button command is about to be executed. In lParam1 sends button number. EC_DVD_CMD_START Sent when a command begins. EC_DVD_CMD_END Sent when a command ends. EC_DVD_DISC_EJECTED Sent when the nav detects that a disc was ejected. EC_DVD_DISC_INSERTED Sent when the nav detects that a disc was inserted. EC_DVD_PLAYING  Fired when we transition into play state from stop or pause states. EC_DVD_PARENTAL_LEVEL_CHANGE Fired when the parental level needs to be changed temporarily. EC_DVD_NEW_MULTICHANNEL_EXTENSION Fired whenever playback of a new audio channel with multichannel extension starts. PlayAtTimeInTitle([in] VARIANT_BOOL bEnabled)  Invoked when PlayAtTimeInTitle gets enabled or disabled. PlayAtTime([in] VARIANT_BOOL bEnabled) Invoked when PlayAtTime gets enabled or disabled. PlayChapterInTitle ([in] VARIANT_BOOL bEnabled) Invoked when PlayChapterInTitle gets enabled or disabled. PlayChapter ([in] VARIANT_BOOL bEnabled) Invoked when PlayChapter gets enabled or disabled. Stop([in] VARIANT_BOOL bEnabled) Invoked when Stop gets enabled or disabled. GoUp([in] VARIANT_BOOL bEnabled) Invoked when GoUp gets enabled or disabled. PrevOrTopPGSerach([in] VARIANT_BOOL bEnabled) Invoked when PrevPGSerach gets enabled or disabled. Invoked when TopPGSearch gets enabled or disabled. NextPGSerach([in] VARIANT_BOOL bEnabled) Invoked when NextPGSearch gets enabled or disabled. PlayForwards([in] VARIANT_BOOL bEnabled) Invoked when PlayForwards gets enabled or disabled. PlayBackwards([in] VARIANT_BOOL bEnabled) Invoked when PlayBackwards gets enabled or disabled. ShowMenu([in] VARIANT_BOOL bEnabled, [in] DVDMenuIDConstants MenuType ) Invoked when ShowMenu gets enabled or disabled. Resume([in] VARIANT_BOOL bEnabled) Invoked when Resume gets enabled or disabled. SelectOrActivatButtons([in] VARIANT_BOOL bEnabled) Invoked when SelectRightButton gets enabled or disabled. Invoked when SelectLeftButton gets enabled or disabled. Invoked when SelectLowerButton gets enabled or disabled. Invoked when SelectUpperButton gets enabled or disabled. Invoked when ActivateButton gets enabled or disabled. Invoked when SelectAndActivateButton gets enabled or disabled. StillOff([in] VARIANT_BOOL bEnabled) Invoked when StillOff gets enabled or disabled. Pause([in] VARIANT_BOOL bEnabled) Invoked when pause gets enabled or disabled. ChangeCurrentAudioStream([in] VARIANT_BOOL bEnabled) Invoked when setting CurrentAudioStream gets enabled or disabled. ChangeCurrentSubpictureStream([in] VARIANT_BOOL bEnabled) Invoked when setting CurrentSubpictureStream gets enabled or disabled. ChangeCurrentAngle([in] VARIANT_BOOL bEnabled) Invoked when setting CurrentAngle gets enabled or disabled. Enums used with the scriptable API typedef enum dvdMenu_Title= 2, dvdMenu_Root= dvdMenu_Title + 1, dvdMenu_Subpicture= dvdMenu_Root + 1, dvdMenu_Audio= dvdMenu_Subpicture + 1, dvdMenu_Angle= dvdMenu_Audio + 1, dvdMenu_Chapter= dvdMenu_Angle + 1 }DVDMenuIDConstants; typedef enum      {       dvdState_Unitialized = -1,    dvdState_Stopped   = 0,    dvdState_Paused    = dvdState_Stopped + 1,    dvdState_Running   = dvdState_Paused + 1,     dvdState_Still    = dvdState_Running + 1 }  DVDFilterState; enum DVD_TextStringType {     // disc structure (0x00..0x0f)     DVD_Struct_Volume               = 0x01,      DVD_Struct_Title                = 0x02,      DVD_Struct_ParentalID           = 0x03,     DVD_Struct_PartOfTitle          = 0x04,     DVD_Struct_Cell                 = 0x05,     // stream (0x10..0x1f)     DVD_Stream_Audio                = 0x10,     DVD_Stream_Subpicture           = 0x11,     DVD_Stream_Angle                = 0x12,     // channel in stream (0x20..0x2f)     DVD_Channel_Audio               = 0x20,     // Application information     // General (0x30..0x37)     DVD_General_Name                = 0x30,     DVD_General_Comments            = 0x31,     // Title (0x38..0x3f)     DVD_Title_Series                = 0x38,     DVD_Title_Movie                 = 0x39,     DVD_Title_Video                 = 0x3a,     DVD_Title_Album                 = 0x3b,     DVD_Title_Song                  = 0x3c,     DVD_Title_Other                 = 0x3f,     // Title (sub) (0x40..0x47)     DVD_Title_Sub_Series            = 0x40,     DVD_Title_Sub_Movie             = 0x41,     DVD_Title_Sub_Video             = 0x42,     DVD_Title_Sub_Album             = 0x43,     DVD_Title_Sub_Song              = 0x44,     DVD_Title_Sub_Other             = 0x47,     // Title (original) (0x48..0x4f)     DVD_Title_Orig_Series           = 0x48,     DVD_Title_Orig_Movie            = 0x49,     DVD_Title_Orig_Video            = 0x4a,     DVD_Title_Orig_Album            = 0x4b,     DVD_Title_Orig_Song             = 0x4c,     DVD_Title_Orig_Other            = 0x4f,     // Other info (0x50..0x57)     DVD_Other_Scene                 = 0x50,     DVD_Other_Cut                   = 0x51,     DVD_Other_Take                  = 0x52,     // Language     0x58..0x5b     // Work         0x5c..0x6b     // Character    0x6c..0x8f     // Data         0x90..0x93     // Karaoke      0x94..0x9b     // Category     0x9c..0x9f     // Lyrics       0xa0..0xa3     // Document     0xa4..0xa7     // Others       0xa8..0xab     // Reserved     0xac..0xaf     // Admin        0xb0..0xb7     // more admin   0xb8..0xc0     // Reserved     0xd0..0xdf     // vendor       0xe0..0xef     // extension    0xf0..0xf7     // reserved     0xf8..0xff ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property ( Property ( Property ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property ( Property ( Property ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. ( Property ( Property ( Property ( Property ( Property ( Property ( Property ( Property ( Property ( Property ( Property ( Property (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command. (  When this API is invoked FP_DOM and the operation is disabled by UOP and or is not valid in FP_DOM, the API waits till transition into next domain happens and then issues the command.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\streams\build\readme.txt ===
This directory is TEMPORARY!  Don't panic -- It will be removed when Quartz.Dll
is finally built with VC5.  For now, Ralph Lipe (email: RalphL) is responsible
for building the binaries daily and checking them in here.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\timecode\tc.txt ===
32767
32767
32767
32767
32653
32653
31848
31848
29979
29979
26101
26101
22981
22981
16985
16985
6522
6522
-22295
-22295
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31995
-31995
-29736
-29736
-27426
-27426
-24179
-24179
-19305
-19305
-12241
-12241
6864
6864
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32183
32183
31322
31322
28530
28530
25354
25354
21459
21459
14617
14617
1405
1405
-29219
-29219
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31179
-31179
-29401
-29401
-26160
-26160
-22593
-22593
-17477
-17477
-8764
-8764
17993
17993
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
31812
31812
30886
30886
27976
27976
24520
24520
19276
19276
11708
11708
-10528
-10528
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32400
-32400
-29886
-29886
-27697
-27697
-24833
-24833
-21066
-21066
-14516
-14516
-1912
-1912
29350
29350
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32387
32387
31873
31873
29156
29156
25968
25968
22943
22943
16915
16915
7499
7499
-19268
-19268
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31977
-31977
-29973
-29973
-28278
-28278
-24602
-24602
-20440
-20440
-13732
-13732
1348
1348
32446
32446
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32430
32430
31313
31313
28981
28981
26235
26235
22755
22755
16113
16113
6136
6136
-22590
-22590
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31406
-31406
-29675
-29675
-27583
-27583
-23809
-23809
-19177
-19177
-12424
-12424
5236
5236
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32363
32363
31380
31380
29173
29173
26235
26235
22274
22274
15175
15175
2547
2547
-27742
-27742
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32580
-32580
-29959
-29959
-27681
-27681
-24332
-24332
-19725
-19725
-12700
-12700
7320
7320
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
25191
25191
6792
6792
-29333
-29333
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-26248
-26248
-17843
-17843
-5386
-5386
27308
27308
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
27445
27445
16018
16018
-16169
-16169
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30737
-30737
-21796
-21796
-13533
-13533
11410
11410
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
30831
30831
21111
21111
-85
-85
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-27320
-27320
-18475
-18475
-4123
-4123
29867
29867
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
24578
24578
10788
10788
-23839
-23839
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31188
-31188
-21678
-21678
-12455
-12455
17662
17662
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
27281
27281
16979
16979
-11408
-11408
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32662
-32662
-24463
-24463
-16279
-16279
6252
6252
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
29002
29002
19370
19370
-2879
-2879
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-28726
-28726
-19248
-19248
-3026
-3026
31448
31448
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
31532
31532
22568
22568
8281
8281
-26040
-26040
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32212
-32212
-22578
-22578
-12971
-12971
17232
17232
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
25931
25931
15687
15687
-12231
-12231
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-26862
-26862
-17380
-17380
3692
3692
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
29094
29094
19544
19544
488
488
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30650
-30650
-20955
-20955
-7738
-7738
26875
26875
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32122
32122
23087
23087
9846
9846
-23348
-23348
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-24155
-24155
-14827
-14827
13336
13336
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
26948
26948
17042
17042
-8236
-8236
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-29189
-29189
-19545
-19545
-2644
-2644
32436
32436
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
31363
31363
22094
22094
6592
6592
-27916
-27916
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31207
-31207
-21198
-21198
-10697
-10697
20017
20017
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32534
32534
31617
31617
31095
31095
28474
28474
25993
25993
24046
24046
20805
20805
15421
15421
7998
7998
-14226
-14226
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-29893
-29893
-13593
-13593
24077
24077
32767
32767
32767
32767
32767
32767
31845
31845
29796
29796
21831
21831
13350
13350
-5270
-5270
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-25698
-25698
-5491
-5491
31467
31467
32767
32767
32767
32767
32767
32767
32224
32224
29949
29949
22562
22562
13991
13991
-5452
-5452
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32745
-32745
-30692
-30692
-28582
-28582
-25334
-25334
-22314
-22314
-16221
-16221
-6665
-6665
22093
22093
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
31383
31383
20803
20803
-7660
-7660
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-28958
-28958
-21411
-21411
-13026
-13026
7965
7965
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32184
32184
30655
30655
28187
28187
25322
25322
21693
21693
14786
14786
818
818
-29918
-29918
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30183
-30183
-27701
-27701
-24520
-24520
-18695
-18695
-10329
-10329
15583
15583
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32132
32132
30742
30742
28063
28063
25172
25172
20302
20302
13361
13361
-4429
-4429
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31567
-31567
-29742
-29742
-26809
-26809
-23070
-23070
-16918
-16918
-8016
-8016
19933
19933
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32110
32110
30931
30931
28256
28256
25010
25010
19771
19771
12058
12058
-8420
-8420
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31011
-31011
-28710
-28710
-25753
-25753
-22274
-22274
-16249
-16249
-5417
-5417
24771
24771
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32684
32684
32007
32007
29917
29917
26846
26846
23780
23780
18217
18217
9683
9683
-15625
-15625
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32688
-32688
-30132
-30132
-27905
-27905
-25013
-25013
-20525
-20525
-13487
-13487
1975
1975
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32637
32637
31640
31640
29473
29473
26341
26341
22932
22932
16276
16276
5103
5103
-24337
-24337
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31258
-31258
-29724
-29724
-27251
-27251
-23690
-23690
-18835
-18835
-11455
-11455
8972
8972
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32309
32309
31488
31488
28661
28661
25512
25512
21901
21901
14982
14982
707
707
-29780
-29780
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32737
-32737
-30670
-30670
-28395
-28395
-25429
-25429
-22649
-22649
-16727
-16727
-8707
-8707
13545
13545
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32092
32092
30995
30995
28199
28199
24404
24404
19989
19989
12845
12845
-2491
-2491
-31597
-31597
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32144
-32144
-30004
-30004
-27843
-27843
-24483
-24483
-21206
-21206
-15831
-15831
-6313
-6313
17149
17149
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32526
32526
31718
31718
30245
30245
27057
27057
23541
23541
18033
18033
9808
9808
-8622
-8622
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30981
-30981
-29044
-29044
-26709
-26709
-23500
-23500
-19237
-19237
-12850
-12850
-2389
-2389
22900
22900
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32237
32237
31059
31059
28549
28549
25814
25814
22187
22187
15929
15929
6554
6554
-12910
-12910
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31986
-31986
-29892
-29892
-28075
-28075
-25016
-25016
-21558
-21558
-17718
-17718
-10610
-10610
1904
1904
27126
27126
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32726
32726
31796
31796
29889
29889
27239
27239
24052
24052
19543
19543
13156
13156
2956
2956
-19666
-19666
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31525
-31525
-29139
-29139
-26801
-26801
-24296
-24296
-20045
-20045
-15130
-15130
-7273
-7273
8609
8609
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32289
32289
31289
31289
28773
28773
26248
26248
23118
23118
19000
19000
11784
11784
165
165
-23805
-23805
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-25172
-25172
-14334
-14334
6639
6639
32767
32767
32767
32767
32767
32767
32767
32767
29039
29039
23287
23287
16001
16001
5973
5973
-13862
-13862
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32690
-32690
-30589
-30589
-28532
-28532
-26745
-26745
-24159
-24159
-20688
-20688
-16711
-16711
-9430
-9430
2958
2958
26954
26954
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
24084
24084
10710
10710
-14664
-14664
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-27067
-27067
-22103
-22103
-14570
-14570
-4484
-4484
16879
16879
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
27166
27166
16629
16629
-2800
-2800
-30601
-30601
-32768
-32768
-32768
-32768
-32768
-32768
-31149
-31149
-25172
-25172
-18130
-18130
-9438
-9438
6190
6190
31970
31970
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32630
32630
32047
32047
30280
30280
27753
27753
25405
25405
21651
21651
17581
17581
10323
10323
-2782
-2782
-27624
-27624
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30285
-30285
-28337
-28337
-25687
-25687
-21612
-21612
-15841
-15841
-7065
-7065
13646
13646
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32183
32183
31178
31178
28821
28821
25497
25497
21707
21707
16509
16509
8324
8324
-11333
-11333
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32543
-32543
-30413
-30413
-28220
-28220
-24976
-24976
-20741
-20741
-14043
-14043
-2314
-2314
26308
26308
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
26976
26976
14634
14634
-14326
-14326
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32228
-32228
-26906
-26906
-18931
-18931
-9913
-9913
14314
14314
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32216
32216
31313
31313
29154
29154
26903
26903
24000
24000
19657
19657
12700
12700
-4561
-4561
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-29806
-29806
-17317
-17317
16138
16138
32767
32767
32767
32767
32767
32767
32767
32767
32054
32054
26878
26878
18444
18444
8158
8158
-22029
-22029
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30658
-30658
-28944
-28944
-26333
-26333
-23461
-23461
-18564
-18564
-11623
-11623
9041
9041
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32691
32691
31632
31632
29882
29882
26458
26458
22727
22727
15992
15992
2381
2381
-29634
-29634
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30967
-30967
-29598
-29598
-26658
-26658
-23988
-23988
-18788
-18788
-11372
-11372
12185
12185
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32236
32236
31537
31537
29349
29349
26196
26196
22259
22259
15486
15486
5
5
-31422
-31422
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30970
-30970
-28992
-28992
-26556
-26556
-23701
-23701
-17579
-17579
-9062
-9062
19376
19376
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
31857
31857
30808
30808
27931
27931
24598
24598
19724
19724
12186
12186
-10760
-10760
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30909
-30909
-29144
-29144
-26013
-26013
-22201
-22201
-15560
-15560
-4126
-4126
27568
27568
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32515
32515
31745
31745
30918
30918
27586
27586
23977
23977
18339
18339
9181
9181
-17441
-17441
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30590
-30590
-28322
-28322
-25024
-25024
-21167
-21167
-14440
-14440
837
837
32523
32523
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32311
32311
31542
31542
29506
29506
26434
26434
22714
22714
15991
15991
5166
5166
-24155
-24155
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32195
-32195
-30055
-30055
-28055
-28055
-24687
-24687
-19833
-19833
-12344
-12344
6540
6540
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32161
32161
31366
31366
29019
29019
25726
25726
21937
21937
15035
15035
419
419
-30336
-30336
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31203
-31203
-29083
-29083
-26279
-26279
-23262
-23262
-17599
-17599
-9511
-9511
15196
15196
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
31984
31984
31096
31096
28039
28039
24862
24862
19629
19629
12511
12511
-7599
-7599
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32419
-32419
-30202
-30202
-28569
-28569
-25039
-25039
-21522
-21522
-14854
-14854
-4083
-4083
26014
26014
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
31797
31797
30815
30815
27801
27801
24139
24139
18651
18651
9374
9374
-16770
-16770
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31751
-31751
-29745
-29745
-27760
-27760
-24584
-24584
-20765
-20765
-13447
-13447
943
943
31989
31989
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32564
32564
31956
31956
29997
29997
26395
26395
23241
23241
16841
16841
7422
7422
-19521
-19521
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32227
-32227
-29707
-29707
-27648
-27648
-24578
-24578
-20066
-20066
-12945
-12945
4861
4861
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32252
32252
31751
31751
29997
29997
26373
26373
22349
22349
15641
15641
4201
4201
-26648
-26648
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31551
-31551
-29836
-29836
-27171
-27171
-23571
-23571
-18694
-18694
-11026
-11026
10896
10896
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32326
32326
31294
31294
28505
28505
25763
25763
21731
21731
14194
14194
-2580
-2580
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30629
-30629
-28988
-28988
-25990
-25990
-22164
-22164
-15992
-15992
-6086
-6086
22956
22956
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
31925
31925
30830
30830
27933
27933
24540
24540
18555
18555
10785
10785
-12704
-12704
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32160
-32160
-29946
-29946
-28005
-28005
-24729
-24729
-21084
-21084
-14303
-14303
-2291
-2291
28383
28383
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32254
32254
31631
31631
29566
29566
26584
26584
23290
23290
17297
17297
8920
8920
-16659
-16659
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32572
-32572
-30224
-30224
-28269
-28269
-24705
-24705
-21120
-21120
-14505
-14505
-1301
-1301
30095
30095
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32418
32418
31555
31555
29440
29440
26504
26504
22858
22858
16950
16950
8218
8218
-17639
-17639
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32099
-32099
-30143
-30143
-28292
-28292
-25188
-25188
-20983
-20983
-13972
-13972
276
276
31841
31841
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32333
32333
31765
31765
29580
29580
26175
26175
22814
22814
16521
16521
6667
6667
-21613
-21613
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30456
-30456
-27880
-27880
-24794
-24794
-21140
-21140
-14447
-14447
2358
2358
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
26493
26493
11396
11396
-24565
-24565
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-27988
-27988
-19180
-19180
-8536
-8536
22529
22529
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
28707
28707
17042
17042
-13594
-13594
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31104
-31104
-22587
-22587
-14626
-14626
8782
8782
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
31134
31134
21490
21490
961
961
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-28010
-28010
-18461
-18461
-4509
-4509
29466
29466
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
24198
24198
11230
11230
-23149
-23149
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32118
-32118
-22804
-22804
-12992
-12992
17394
17394
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
26746
26746
17087
17087
-11215
-11215
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-26256
-26256
-17077
-17077
4309
4309
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
29325
29325
20005
20005
-944
-944
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30100
-30100
-20384
-20384
-6034
-6034
28845
28845
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32523
32523
23566
23566
10175
10175
-24328
-24328
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-24185
-24185
-13826
-13826
15924
15924
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
26133
26133
16044
16044
-11201
-11201
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-28858
-28858
-18933
-18933
-958
-958
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
30808
30808
21359
21359
6243
6243
-27561
-27561
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32276
-32276
-23643
-23643
-13849
-13849
16186
16186
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
26338
26338
16535
16535
-11162
-11162
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-28013
-28013
-18396
-18396
1910
1910
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
30174
30174
20501
20501
2385
2385
-32008
-32008
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31074
-31074
-20993
-20993
-9264
-9264
24367
24367
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32738
32738
24144
24144
12336
12336
-19313
-19313
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32513
-32513
-23533
-23533
-13701
-13701
12496
12496
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32569
32569
31788
31788
30704
30704
28979
28979
26586
26586
24095
24095
21465
21465
17229
17229
9751
9751
-9176
-9176
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32050
-32050
-17500
-17500
18372
18372
32767
32767
32767
32767
32767
32767
32242
32242
29244
29244
23700
23700
14861
14861
2397
2397
-27555
-27555
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31016
-31016
-28464
-28464
-25021
-25021
-19206
-19206
-11154
-11154
14554
14554
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
31256
31256
21280
21280
-3335
-3335
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31166
-31166
-23704
-23704
-16272
-16272
2294
2294
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
24622
24622
8688
8688
-26884
-26884
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-28537
-28537
-18855
-18855
-8070
-8070
23003
23003
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32511
32511
31812
31812
30752
30752
28128
28128
25243
25243
22233
22233
16851
16851
9235
9235
-13874
-13874
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32635
-32635
-30233
-30233
-27326
-27326
-23109
-23109
-16513
-16513
-2768
-2768
29286
29286
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32142
32142
31366
31366
29133
29133
26084
26084
22812
22812
16572
16572
7521
7521
-19498
-19498
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30820
-30820
-28404
-28404
-25241
-25241
-21100
-21100
-14134
-14134
733
733
32668
32668
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32376
32376
31687
31687
29294
29294
25773
25773
22980
22980
16860
16860
6338
6338
-22625
-22625
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31841
-31841
-29790
-29790
-27400
-27400
-24267
-24267
-19470
-19470
-12133
-12133
6733
6733
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32198
32198
31358
31358
29183
29183
26321
26321
22086
22086
15298
15298
2574
2574
-28088
-28088
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31938
-31938
-29881
-29881
-26881
-26881
-23537
-23537
-18615
-18615
-10403
-10403
12982
12982
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32260
32260
31158
31158
28304
28304
25238
25238
21189
21189
14010
14010
-1685
-1685
-32032
-32032
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31248
-31248
-29109
-29109
-25971
-25971
-23267
-23267
-17923
-17923
-9326
-9326
16011
16011
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32380
32380
31378
31378
28629
28629
25308
25308
20775
20775
13158
13158
-5846
-5846
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30901
-30901
-29417
-29417
-25918
-25918
-22653
-22653
-16641
-16641
-6990
-6990
22174
22174
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32229
32229
31067
31067
27848
27848
25075
25075
19575
19575
11673
11673
-11648
-11648
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32539
-32539
-30401
-30401
-28374
-28374
-25301
-25301
-21423
-21423
-14890
-14890
-2862
-2862
28473
28473
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
31982
31982
30675
30675
27161
27161
24434
24434
17577
17577
7268
7268
-21926
-21926
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31480
-31480
-29518
-29518
-27251
-27251
-23894
-23894
-19385
-19385
-12087
-12087
7450
7450
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32373
32373
31680
31680
29560
29560
26215
26215
22201
22201
15513
15513
1710
1710
-29289
-29289
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31613
-31613
-29678
-29678
-27069
-27069
-23764
-23764
-18869
-18869
-10813
-10813
13043
13043
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32275
32275
31397
31397
28978
28978
25079
25079
20962
20962
14261
14261
-2139
-2139
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30797
-30797
-29042
-29042
-26467
-26467
-22964
-22964
-16782
-16782
-8096
-8096
19154
19154
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32188
32188
31260
31260
28103
28103
25182
25182
20334
20334
12750
12750
-8084
-8084
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-26508
-26508
-10830
-10830
25542
25542
32767
32767
32767
32767
32767
32767
32767
32767
31978
31978
25747
25747
16870
16870
3068
3068
-28376
-28376
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32302
-32302
-30080
-30080
-28484
-28484
-26043
-26043
-23705
-23705
-18558
-18558
-11573
-11573
9099
9099
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
26168
26168
7609
7609
-29400
-29400
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30970
-30970
-23939
-23939
-16521
-16521
-3679
-3679
28771
28771
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
28257
28257
15207
15207
-18805
-18805
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-28520
-28520
-19416
-19416
-10182
-10182
18171
18171
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
31954
31954
31248
31248
28986
28986
26398
26398
23422
23422
18559
18559
11348
11348
-10064
-10064
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32129
-32129
-29813
-29813
-27184
-27184
-23102
-23102
-16686
-16686
-5975
-5975
24619
24619
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32075
32075
31551
31551
29508
29508
26165
26165
23196
23196
17546
17546
9356
9356
-16791
-16791
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32137
-32137
-29438
-29438
-26278
-26278
-22380
-22380
-15065
-15065
803
803
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
26992
26992
12149
12149
-22967
-22967
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32576
-32576
-27152
-27152
-18735
-18735
-8828
-8828
20181
20181
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32062
32062
31550
31550
29137
29137
26553
26553
24015
24015
18160
18160
10739
10739
-11078
-11078
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-27546
-27546
-12114
-12114
23787
23787
32767
32767
32767
32767
32767
32767
32767
32767
31456
31456
24778
24778
15749
15749
2884
2884
-27944
-27944
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30950
-30950
-29114
-29114
-26316
-26316
-23143
-23143
-17802
-17802
-10664
-10664
11628
11628
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32131
32131
31555
31555
29590
29590
25788
25788
21468
21468
14487
14487
-840
-840
-31332
-31332
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30811
-30811
-28979
-28979
-25994
-25994
-22873
-22873
-17354
-17354
-9171
-9171
15688
15688
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32476
32476
31276
31276
29050
29050
25787
25787
21297
21297
14124
14124
-2372
-2372
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31110
-31110
-29370
-29370
-26343
-26343
-23311
-23311
-17489
-17489
-8804
-8804
16743
16743
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32239
32239
31118
31118
28130
28130
25086
25086
20316
20316
13206
13206
-6288
-6288
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30603
-30603
-29013
-29013
-25976
-25976
-22344
-22344
-16217
-16217
-5957
-5957
24302
24302
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32264
32264
31358
31358
28578
28578
25401
25401
19613
19613
11641
11641
-12596
-12596
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30744
-30744
-28149
-28149
-25432
-25432
-21921
-21921
-14940
-14940
-2990
-2990
28131
28131
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32083
32083
31209
31209
27970
27970
24695
24695
18095
18095
9304
9304
-17840
-17840
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30723
-30723
-28787
-28787
-25584
-25584
-21486
-21486
-14305
-14305
514
514
32550
32550
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32719
32719
31912
31912
30650
30650
26942
26942
23590
23590
17645
17645
7476
7476
-22336
-22336
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32598
-32598
-30360
-30360
-28213
-28213
-24973
-24973
-20247
-20247
-13467
-13467
2920
2920
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32527
32527
31893
31893
30282
30282
26702
26702
23480
23480
16601
16601
6404
6404
-23412
-23412
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32291
-32291
-29949
-29949
-27343
-27343
-24459
-24459
-19632
-19632
-12376
-12376
6559
6559
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32279
32279
31470
31470
29099
29099
26316
26316
22221
22221
15582
15582
2837
2837
-28168
-28168
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31739
-31739
-29753
-29753
-27196
-27196
-23693
-23693
-19020
-19020
-11964
-11964
9690
9690
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32050
32050
31337
31337
29017
29017
25721
25721
21550
21550
14756
14756
1413
1413
-29756
-29756
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31344
-31344
-28974
-28974
-26961
-26961
-23748
-23748
-17974
-17974
-10184
-10184
14633
14633
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32298
32298
31772
31772
29306
29306
25810
25810
21221
21221
14027
14027
-3720
-3720
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31365
-31365
-29469
-29469
-26719
-26719
-23130
-23130
-17582
-17582
-9018
-9018
17287
17287
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
31985
31985
31287
31287
28234
28234
25187
25187
20836
20836
13478
13478
-4867
-4867
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31210
-31210
-28930
-28930
-25411
-25411
-22022
-22022
-16143
-16143
-5687
-5687
24119
24119
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32608
32608
31628
31628
30232
30232
27280
27280
24028
24028
18603
18603
10545
10545
-14250
-14250
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32752
-32752
-30695
-30695
-28612
-28612
-24669
-24669
-21233
-21233
-14639
-14639
-780
-780
30991
30991
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32463
32463
31758
31758
29670
29670
26364
26364
23292
23292
16891
16891
7554
7554
-19891
-19891
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32282
-32282
-30030
-30030
-28182
-28182
-24693
-24693
-20143
-20143
-13754
-13754
3307
3307
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32257
32257
31312
31312
29124
29124
25580
25580
22147
22147
15580
15580
3910
3910
-27116
-27116
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31331
-31331
-29277
-29277
-27210
-27210
-24322
-24322
-19002
-19002
-11393
-11393
10334
10334
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32357
32357
31230
31230
28565
28565
25666
25666
22031
22031
15155
15155
1415
1415
-30002
-30002
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32201
-32201
-30379
-30379
-28268
-28268
-24900
-24900
-20246
-20246
-13046
-13046
7123
7123
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
25255
25255
8688
8688
-27867
-27867
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32652
-32652
-26617
-26617
-18789
-18789
-8092
-8092
24625
24625
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
28739
28739
17893
17893
-12967
-12967
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31833
-31833
-23058
-23058
-16058
-16058
6424
6424
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32130
32130
22947
22947
4416
4416
-31219
-31219
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-29883
-29883
-20361
-20361
-8740
-8740
25253
25253
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
26808
26808
15840
15840
-16022
-16022
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32671
-32671
-24611
-24611
-16569
-16569
7863
7863
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
30398
30398
20875
20875
-1185
-1185
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-29438
-29438
-19754
-19754
-4167
-4167
31043
31043
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32471
32471
23198
23198
8931
8931
-26390
-26390
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32190
-32190
-22625
-22625
-13012
-13012
18923
18923
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
26443
26443
15925
15925
-13753
-13753
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-27798
-27798
-17857
-17857
4444
4444
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
29388
29388
19666
19666
-1040
-1040
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31396
-31396
-21542
-21542
-8368
-8368
26744
26744
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
23585
23585
11348
11348
-21474
-21474
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-26142
-26142
-16309
-16309
9426
9426
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
27543
27543
18303
18303
-4706
-4706
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30745
-30745
-20631
-20631
-5482
-5482
30136
30136
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
31528
31528
22495
22495
8610
8610
-25384
-25384
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32664
-32664
-24057
-24057
-14028
-14028
15069
15069
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
26641
26641
17015
17015
-10931
-10931
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-26224
-26224
-16859
-16859
4004
4004
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32667
32667
31868
31868
30935
30935
28754
28754
26819
26819
24448
24448
22129
22129
18615
18615
12084
12084
-1100
-1100
-30833
-30833
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-22229
-22229
7741
7741
32767
32767
32767
32767
32767
32767
32767
32767
30734
30734
26378
26378
18272
18272
9663
9663
-16068
-16068
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-25294
-25294
-5357
-5357
32095
32095
32767
32767
32767
32767
32767
32767
32767
32767
31321
31321
24340
24340
16188
16188
-2193
-2193
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-27488
-27488
-14939
-14939
18410
18410
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
30030
30030
21480
21480
11281
11281
-18865
-18865
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30967
-30967
-20886
-20886
1121
1121
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
25790
25790
16920
16920
-2629
-2629
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31362
-31362
-29618
-29618
-27788
-27788
-25905
-25905
-23401
-23401
-19980
-19980
-13697
-13697
-3670
-3670
24311
24311
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32100
32100
30109
30109
26383
26383
21632
21632
13739
13739
-8406
-8406
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31623
-31623
-29886
-29886
-28901
-28901
-26174
-26174
-23000
-23000
-19725
-19725
-12972
-12972
-227
-227
29542
29542
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32381
32381
31568
31568
28059
28059
24701
24701
19255
19255
10384
10384
-15974
-15974
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32474
-32474
-30444
-30444
-28688
-28688
-26337
-26337
-23804
-23804
-19242
-19242
-13088
-13088
1987
1987
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32619
32619
31772
31772
30125
30125
26918
26918
23221
23221
16741
16741
6517
6517
-23060
-23060
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30909
-30909
-29471
-29471
-26633
-26633
-23631
-23631
-18543
-18543
-11328
-11328
9286
9286
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32373
32373
31758
31758
28955
28955
25492
25492
21843
21843
14464
14464
-315
-315
-31236
-31236
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32764
-32764
-30661
-30661
-29349
-29349
-25611
-25611
-22690
-22690
-17156
-17156
-9065
-9065
16855
16855
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32204
32204
31216
31216
28666
28666
25494
25494
20613
20613
13597
13597
-5552
-5552
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32362
-32362
-29899
-29899
-28290
-28290
-25173
-25173
-21904
-21904
-15137
-15137
-4319
-4319
25084
25084
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32471
32471
31535
31535
29726
29726
27006
27006
23791
23791
18016
18016
10118
10118
-14378
-14378
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31209
-31209
-29592
-29592
-27392
-27392
-24508
-24508
-20815
-20815
-13783
-13783
128
128
30924
30924
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32327
32327
31773
31773
29461
29461
26106
26106
22732
22732
16221
16221
6460
6460
-21772
-21772
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30851
-30851
-29142
-29142
-26719
-26719
-23613
-23613
-18932
-18932
-11438
-11438
7318
7318
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32129
32129
31145
31145
28700
28700
25454
25454
21377
21377
14716
14716
548
548
-29520
-29520
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30914
-30914
-28950
-28950
-25749
-25749
-22873
-22873
-17773
-17773
-9517
-9517
15190
15190
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32203
32203
30995
30995
27821
27821
24917
24917
20350
20350
13275
13275
-5834
-5834
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32678
-32678
-30063
-30063
-28424
-28424
-25939
-25939
-22262
-22262
-15764
-15764
-6017
-6017
23450
23450
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32743
32743
31923
31923
31298
31298
28082
28082
24335
24335
18903
18903
11355
11355
-12808
-12808
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31020
-31020
-28848
-28848
-26011
-26011
-22657
-22657
-16273
-16273
-3648
-3648
28433
28433
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
29048
29048
17116
17116
-15808
-15808
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-29239
-29239
-20469
-20469
-12053
-12053
14129
14129
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32428
32428
31701
31701
30757
30757
28063
28063
25240
25240
21112
21112
14335
14335
-1795
-1795
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30767
-30767
-18343
-18343
14548
14548
32767
32767
32767
32767
32767
32767
32767
32767
31877
31877
27541
27541
18416
18416
8630
8630
-20480
-20480
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31593
-31593
-29572
-29572
-27190
-27190
-24035
-24035
-19672
-19672
-13293
-13293
3965
3965
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32015
32015
30222
30222
27179
27179
23680
23680
16969
16969
4796
4796
-26875
-26875
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31630
-31630
-29074
-29074
-26859
-26859
-24247
-24247
-18629
-18629
-11512
-11512
12001
12001
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32326
32326
31665
31665
29032
29032
25573
25573
21243
21243
13894
13894
-3943
-3943
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31393
-31393
-29474
-29474
-26485
-26485
-23040
-23040
-16900
-16900
-7161
-7161
23883
23883
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
31344
31344
20685
20685
-10239
-10239
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-28889
-28889
-20508
-20508
-12363
-12363
10893
10893
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
31951
31951
30761
30761
27748
27748
24987
24987
21615
21615
15058
15058
-324
-324
-31717
-31717
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31253
-31253
-20213
-20213
11034
11034
32767
32767
32767
32767
32767
32767
32767
32767
32423
32423
28807
28807
19741
19741
10992
10992
-16681
-16681
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32109
-32109
-29760
-29760
-27420
-27420
-24546
-24546
-20544
-20544
-13917
-13917
1382
1382
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32046
32046
30436
30436
27201
27201
23771
23771
17369
17369
8199
8199
-20769
-20769
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32070
-32070
-29845
-29845
-27939
-27939
-24712
-24712
-20242
-20242
-13510
-13510
3279
3279
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32595
32595
31807
31807
30171
30171
26646
26646
22725
22725
16116
16116
4600
4600
-26053
-26053
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32270
-32270
-29938
-29938
-27702
-27702
-24490
-24490
-19556
-19556
-12197
-12197
9705
9705
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32153
32153
31224
31224
28860
28860
25503
25503
21208
21208
14851
14851
-1717
-1717
-32555
-32555
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31590
-31590
-29403
-29403
-26363
-26363
-23360
-23360
-17530
-17530
-8469
-8469
19040
19040
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32229
32229
31144
31144
27869
27869
24538
24538
19759
19759
12887
12887
-8776
-8776
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30993
-30993
-29178
-29178
-26782
-26782
-22521
-22521
-15623
-15623
-3673
-3673
27576
27576
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32118
32118
30699
30699
27473
27473
24370
24370
18353
18353
9502
9502
-17008
-17008
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30643
-30643
-28567
-28567
-25549
-25549
-21551
-21551
-14418
-14418
281
281
32495
32495
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32698
32698
32134
32134
30490
30490
26547
26547
23491
23491
17401
17401
6368
6368
-24481
-24481
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32297
-32297
-30213
-30213
-27405
-27405
-24218
-24218
-20073
-20073
-12372
-12372
8214
8214
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32313
32313
31686
31686
29268
29268
26308
26308
21929
21929
15309
15309
1755
1755
-29609
-29609
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31681
-31681
-29583
-29583
-27071
-27071
-23908
-23908
-17896
-17896
-9983
-9983
16578
16578
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
31996
31996
31264
31264
28578
28578
24813
24813
20031
20031
13481
13481
-6207
-6207
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30794
-30794
-29180
-29180
-25221
-25221
-21884
-21884
-15502
-15502
-4291
-4291
26516
26516
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32705
32705
31820
31820
30699
30699
27290
27290
23738
23738
18564
18564
10311
10311
-15726
-15726
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32542
-32542
-30402
-30402
-28141
-28141
-25020
-25020
-21443
-21443
-14173
-14173
1187
1187
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32714
32714
31991
31991
30705
30705
27337
27337
23868
23868
17279
17279
6987
6987
-22602
-22602
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32171
-32171
-29672
-29672
-28205
-28205
-25141
-25141
-20011
-20011
-13227
-13227
6243
6243
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32558
32558
31673
31673
29626
29626
26310
26310
22164
22164
15592
15592
790
790
-30628
-30628
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31910
-31910
-29489
-29489
-27212
-27212
-24435
-24435
-18682
-18682
-10695
-10695
14352
14352
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32469
32469
31531
31531
28783
28783
25633
25633
21372
21372
14610
14610
-3089
-3089
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31197
-31197
-29118
-29118
-26396
-26396
-23019
-23019
-17039
-17039
-8551
-8551
20468
20468
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32365
32365
31417
31417
28106
28106
24814
24814
20294
20294
13125
13125
-8273
-8273
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30855
-30855
-29049
-29049
-25753
-25753
-22609
-22609
-16162
-16162
-5165
-5165
26136
26136
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32755
32755
31824
31824
29922
29922
27174
27174
24439
24439
18561
18561
10726
10726
-15234
-15234
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32436
-32436
-30254
-30254
-28215
-28215
-25463
-25463
-21368
-21368
-14724
-14724
-520
-520
31960
31960
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32430
32430
31779
31779
29503
29503
26263
26263
23261
23261
16986
16986
6676
6676
-22800
-22800
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32259
-32259
-30119
-30119
-27938
-27938
-24878
-24878
-21136
-21136
-14430
-14430
3105
3105
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
26414
26414
10971
10971
-25505
-25505
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-27028
-27028
-19032
-19032
-8867
-8867
22536
22536
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
28622
28622
18319
18319
-12344
-12344
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30933
-30933
-22546
-22546
-14890
-14890
8160
8160
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
30771
30771
21892
21892
2244
2244
-32752
-32752
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-27721
-27721
-19213
-19213
-6779
-6779
27150
27150
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
24562
24562
13050
13050
-19468
-19468
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31804
-31804
-23224
-23224
-14706
-14706
11651
11651
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
27662
27662
18453
18453
-5729
-5729
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-26357
-26357
-17776
-17776
154
154
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
29877
29877
20714
20714
3138
3138
-30992
-30992
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-29848
-29848
-19932
-19932
-8016
-8016
26052
26052
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32211
32211
23199
23199
11137
11137
-20960
-20960
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32564
-32564
-23800
-23800
-14565
-14565
13215
13215
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
25801
25801
16625
16625
-9107
-9107
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-27310
-27310
-18167
-18167
-42
-42
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
29472
29472
20325
20325
3564
3564
-30410
-30410
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30956
-30956
-21515
-21515
-10470
-10470
22208
22208
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32159
32159
23912
23912
13015
13015
-17855
-17855
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-25133
-25133
-15336
-15336
8773
8773
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
27110
27110
18110
18110
-4831
-4831
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-29334
-29334
-19177
-19177
-3489
-3489
30853
30853
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
31162
31162
22165
22165
7494
7494
-26818
-26818
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31683
-31683
-21686
-21686
-10804
-10804
19832
19832
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32263
32263
31471
31471
29774
29774
27864
27864
25877
25877
23631
23631
21301
21301
16243
16243
9018
9018
-12618
-12618
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-30189
-30189
-15088
-15088
21663
21663
32767
32767
32767
32767
32767
32767
31965
31965
29516
29516
23577
23577
14825
14825
783
783
-29276
-29276
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32608
-32608
-30375
-30375
-27791
-27791
-24414
-24414
-18674
-18674
-10756
-10756
12885
12885
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32632
32632
31961
31961
30726
30726
27609
27609
24352
24352
19522
19522
12427
12427
-5897
-5897
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32109
-32109
-29211
-29211
-26643
-26643
-23863
-23863
-17531
-17531
-7562
-7562
22301
22301
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
30928
30928
20332
20332
-8790
-8790
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-29724
-29724
-20780
-20780
-13109
-13109
9862
9862
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32767
32509
32509
31833
31833
30375
30375
27059
27059
24480
24480
20171
20171
13245
13245
-5310
-5310
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-32768
-31843
-31843
-29640
-29640
-26638
-26638
-22850
-22850
-17047
-17047
-7108
-7108
23041
23041
32767
32767
32767
32767
32767
32767
32767
32767
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\tools\dmotest\dshowmediaobj\buildd.err ===
d:\testtree\multimedia\testsrc\inc\module98.h(133) : error C2664: 'lstrlenW' : cannot convert parameter 1 from 'char *__ptr64 ' to 'const unsigned short *__ptr64 '
d:\testtree\multimedia\testsrc\inc\module98.h(143) : error C2664: 'lstrcpyW' : cannot convert parameter 1 from 'char *__ptr64 ' to 'unsigned short *__ptr64 '
d:\testtree\multimedia\testsrc\inc\module98.h(183) : error C2664: 'lstrlenW' : cannot convert parameter 1 from 'char *__ptr64 ' to 'const unsigned short *__ptr64 '
d:\testtree\multimedia\testsrc\inc\module98.h(201) : error C2664: 'lstrcpyW' : cannot convert parameter 2 from 'char *__ptr64 ' to 'const unsigned short *__ptr64 '
d:\testtree\multimedia\testsrc\inc\module98.h(214) : error C2664: 'lstrlenW' : cannot convert parameter 1 from 'char *__ptr64 ' to 'const unsigned short *__ptr64 '
d:\testtree\multimedia\testsrc\inc\module98.h(227) : error C2664: 'lstrcpyW' : cannot convert parameter 2 from 'char *__ptr64 ' to 'const unsigned short *__ptr64 '
test\testapp\error.h(20) : error C2664: 'printf' : cannot convert parameter 1 from 'unsigned short [2000]' to 'const char *__ptr64 '
test\testapp\error.h(31) : error C2664: 'printf' : cannot convert parameter 1 from 'unsigned short [2000]' to 'const char *__ptr64 '
test\testapp\testobj.cpp(14) : error C1083: Cannot open include file: 'wmsdkidl.h': No such file or directory
d:\testtree\multimedia\testsrc\inc\module98.h(133) : error C2664: 'lstrlenW' : cannot convert parameter 1 from 'char *__ptr64 ' to 'const unsigned short *__ptr64 '
d:\testtree\multimedia\testsrc\inc\module98.h(143) : error C2664: 'lstrcpyW' : cannot convert parameter 1 from 'char *__ptr64 ' to 'unsigned short *__ptr64 '
d:\testtree\multimedia\testsrc\inc\module98.h(183) : error C2664: 'lstrlenW' : cannot convert parameter 1 from 'char *__ptr64 ' to 'const unsigned short *__ptr64 '
d:\testtree\multimedia\testsrc\inc\module98.h(201) : error C2664: 'lstrcpyW' : cannot convert parameter 2 from 'char *__ptr64 ' to 'const unsigned short *__ptr64 '
d:\testtree\multimedia\testsrc\inc\module98.h(214) : error C2664: 'lstrlenW' : cannot convert parameter 1 from 'char *__ptr64 ' to 'const unsigned short *__ptr64 '
d:\testtree\multimedia\testsrc\inc\module98.h(227) : error C2664: 'lstrcpyW' : cannot convert parameter 2 from 'char *__ptr64 ' to 'const unsigned short *__ptr64 '
test\testapp\error.h(20) : error C2664: 'printf' : cannot convert parameter 1 from 'unsigned short [2000]' to 'const char *__ptr64 '
test\testapp\error.h(31) : error C2664: 'printf' : cannot convert parameter 1 from 'unsigned short [2000]' to 'const char *__ptr64 '
NMAKE :  U1058: terminated by user
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\tools\dmotest\dshowmediaobj\todo.txt ===
Code we probably will not need for a while:
1. Implement input queue in wrapper filter
2. Implement topology
3. Enqueue discontinuities in wrapper filter
7. Implement NewSegment in wrapper filter
11. Pay attention to 'keyed' flag in DMOEnum
15. Implement Unregister in dsreg.dll
16. Implement Unregister in dmo com base
18. Find out what synclock is for and fix stuff
23. Find out what other moniker code is necessary
32. Free existing format block in CStream::GetType?
33. Check success in CStream::GetCurrentType
40. Implement Get/SetInputMaxLatency
47. Decide if DShow registration should be separate
48. Implement CEnumDMOCLSID::Clone
51. Implement CDMOEnumMoniker::Clone

Code that will be needed for some sample DMOs:
4. Is discontinuity code in base class complete ?
5. Aggregate the object in wrapper filter
6. Reset EOS flags on EndFlush in wrapper filter (?)
12. Expose DMO interfaces on wrapper filter pins
24. Decide how to avoid minimuim buffer size hack
34. Compare format blocks in CStream::CheckType ?
35. Allow ATL based DMOs to override methods
53. Support non-44100/2/16 audio in gargle
54. Find a better place to initialize vars in gargle
59. Investigate why gargle won't stop on EOS
	Fixed
60. Investigate why gargle deadlocks with MP3 decoder
61. Synchronize flushes/discontinuieties with input queues

Code needed to be more GraphEdt-friendly
8. Populate DMO registry keys with object info
9. Use supplied media types in DMORegister
10. Supply mediatypes to DMORegister in sample DMOs
21. Moniker should return a readable DMO name
22. Make graphs with DMOs realoadable (persistence?)
	Fixed (mostly)
44. DMORegister needs a name parameter !
50. Present each DMO category as its own DShow category
61. Make error codes numerically equivalent to AM errors

Code reuse within DMO source tree:

13. Merge media buffer base class (app & filter)
	done

14. Merge COM CLSID regkey code (dsreg & dmocom)
	superseded by 52

17. Move buffer pre/post processing code to pins
        done

41. Merge CreateInput/OutputStreams code (base class)
	can't do

49. Put CAutoHKey in a common private header
	done

52. Use dmocom instead of DShow combase in dshowreg
	done

Other source tree cleanup:
19. Decide which assert macro to use in base class
20. Implement some debug logging facility for DMOs
25. Pull obsolete proppage code from wrapper filter
	punt - keep for reuse as a skeleton

26. Move gargle-specific xform.idl out of include\
31. Figure out what to do with include files
	dmo.h

37. Remove unused GetData() function from base class
	done

38. Add some debug logs to base class
39. Add some debug logs to wrapper filter
42. Remove g_amPlatform and g_osInfo from dmocom
	done

43. Rename CUnknown and INDUnknown in dmocom
	done

45. cpp_quute("#include") mediaerr.h in mediaobj.idl
	superseded by 31

46. Use consistent naming convention for filenames
56. Pull unused IsEqualObject
	done

57. Remove obsolete functions from base class
	done

58. Remove obsolete functions from wrapper filter
	done
	

Sample issues:
27. Sample app ignores alignment
28. Remove comment about in-place from sample app
29. Reuse CMediaBuffer objects in sample app
30. Remove comment in front of GetInputData decl.
36. Speicify when output buffer can be NULL (spec)
55. Use DMO enumeration API in sample
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\tools\dmotest\dshowmediaobj\doc\mediaobj.ppt ===
DirectShow Media Objects Preliminary Proposal Tuesday, July 06, 1999 Media Objects - Why we need them Apps can utilize DSHOW component capabilities without Graphs ISVs have asked for this Useful for audio effects DSHOW filter development is simplified Passive - no threads No allocators No pins Less code  Elements of Media Objects Stream Enumeration Determines inputs/outputs Use DSHOW AM_MEDIA_TYPE Format/Type Enumeration Similar to existing DSHOW mechanisms Uniform Data Processing model Design Goals of Media Objects Wrapped by a single DSHOW Wrapper Filter Consistent models for codecs, effects May extend to parsers and (async) renderers, ... Hopefully consolidate other models DXXforms DX Plugins IMediaObject interface HRESULT StreamsInfo(long *plNumberOfInputStreams, long *plNumberOfOutputStreams) HRESULT InputStreamInfo(long lInputStreamIndex, unsigned long *pdwFlags) HRESULT OutputStreamInfo(long lOutputStreamIndex, unsigned long *pdwFlags) HRESULT InputGetType(long lInputStreamIndex, long lTypeIndex, AM_MEDIA_TYPE *pmt) HRESULT OutputGetType(long lOutputStreamIndex, long lTypeIndex, AM_MEDIA_TYPE *pmt) HRESULT InputCheckType(long lInputStreamIndex, const AM_MEDIA_TYPE *pmt, DWORD dwFlags) HRESULT OutputCheckType(long lOutputStreamIndex, const AM_MEDIA_TYPE *pmt, DWORD dwFlags) HRESULT InputSetType(long lInputStreamIndex, const AM_MEDIA_TYPE *pmt) HRESULT OutputSetType(long lOutputStreamIndex, const AM_MEDIA_TYPE *pmt) HRESULT InputGetCurrentType(long lInputStreamIndex, AM_MEDIA_TYPE *pmt) HRESULT OutputGetCurrentType(long lOutputStreamIndex, AM_MEDIA_TYPE *pmt) HRESULT InputSizeInfo(long lInputStreamIndex, long *plSize, long *plAlignment) HRESULT OutputSizeInfo(long lOutputStreamIndex, long *plSize, long *plAlignment) Using a Media Object 1. CoCreateInstance to create the object 2. InputSetType(AM_MEDIA_TYPE) 3. OutputSetType(AM_MEDIA_TYPE)  4. InputSizeInfo() - get buffer size 5. OutputSizeInfo() 6. Process (in a loop) Click to edit Master title style Click to edit Master text styles Second level Third level Fourth level Fifth level Click to edit Master text styles Second level Third level Fourth level Fifth level DirectShow Plugin Objects bIlL pARrY R C B Speed Microsoft PowerPoint Times New Roman Microsoft Confidential Times New Roman DirectShow  Media Objects Times New Roman Preliminary Proposal Tuesday, July 06, 1999 "System On-screen Show Times New Roman Arial Default Design DirectShow Media Objects Media Objects - Why we need them Elements of Media Objects Design Goals of Media Objects IMediaObject interface Using a Media Object Fonts Used Design Template Slide Titles _PID_GUID R C B Speed
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\tools\dmotest\dshowmediaobj\doc\medparam.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft TitleBrian Marshall DShowSpec.dot Brian Marshall Microsoft Word 9.0I-,R, e?6N. BX)zf uc=~m.\ 5B-jl ~3R~_i Mg~ 5 nn9nsMicrosoft Word Picture MSWordDoc Word.Picture.8Microsoft Word Times New Roman SymbolTitle _PID_GUIDSoraya Bittencourt Normal.dot Soraya Bittencourt Microsoft Word 8.0$N:*' ?(?FB *`)N+ $!.q"P0Z _2 N?)<, 1);H3 ?c?FB  N:m" 2<0=0*1 36)A4,& 4!#/5#!/5 =j'w= 37.J2 /6&J/P#  R>R!9A Fw@lD D9A(F8? M7-gMj) L8'`L J1/dI ?h?FB Iw3ZJ /=041 +(36)04,& 4!#75#!75 ;?='<?='<?=U< @GCC Elite 600 v1.1 \\morph\lp PSCRIPT GCC Elite 600 v1.1 GCC Elite 600 v1.1 Custom page 1 Custom page 2 Custom page 3 GCC Elite 600 v1.1 Custom page 1 Custom page 2 Custom page 3symbol 226 \f "Symbol"bjbjU nF+Ql  EMBED Word.Picture.6   Media Object Parameter Interfaces Last Revised:   SAVEDATE  \* MERGEFORMAT  9/10/1999 3:08 PM Microsoft does not make any representation or warranty regarding this specification or any product or item developed based on this specification.  Microsoft disclaims all express and implied warranties, including but not limited to the implied warranties of merchantability, fitness for a particular purpose and freedom from infringement.  Without limiting the generality of the foregoing, Microsoft does not make any warranty of any kind that any item developed based on this specification, or any portion of it, will not infringe any copyright, patent, trade secret or other intellectual property right of any person or entity in any country.  It is your responsibility to seek licenses for such intellectual property rights where appropriate.  Microsoft shall not be liable for any damages arising out of or in connection with the use of this specification, including liability for lost profit, business interruption, or any other damages whatsoever.  Some states do not allow the exclusion or limitation of liability for consequential or incidental damages; the above limitation may not apply to you. No part of this document may be reproduced or transmitted in any form or by any means, electronic or mechanical, including photocopying and recording, for any purpose without the express written permission of Microsoft Corporation. Microsoft, Windows and the Win32 are registered trademarks; Windows NT, DirectX and DirectShow are trademarks of Microsoft Corporation. Other brands and names are the property of their respective owners. Copyright (1999-2000 Microsoft Corporation. All Rights Reserved. Summary The IMediaObject interface is a generic COM interface for creating objects that perform data transformation on media streams. The IMediaParams interfaces provide a standard way of manipulating the run-time parameters of these objects, and any other object. Since Media Objects are often associated with transforms that vary rapidly during runtime, the automation interfaces are focused on high-performance methods of changing these parameters in a predictable, repeatable method. The ability to specify envelopes that change the parameter value over time is included. For other properties such as strings that are typically not performance bound, standard IDispatch dual interfaces can be used. Table of Contents  TOC \o "1-3"  Summary  PAGEREF _Toc461610328 \h  Table of Contents  PAGEREF _Toc461610329 \h  Design Goals and Justification  PAGEREF _Toc461610330 \h  Scenarios  PAGEREF _Toc461610331 \h  Sweetening the Mix  PAGEREF _Toc461610332 \h  Mixing it up  PAGEREF _Toc461610333 \h  Architecture  PAGEREF _Toc461610334 \h  Value Curves  PAGEREF _Toc461610335 \h  Feature Specificaiton  PAGEREF _Toc461610336 \h  Types and Constants  PAGEREF _Toc461610337 \h  MP_TYPE  PAGEREF _Toc461610338 \h  tParams  PAGEREF _Toc461610339 \h  Method  PAGEREF _Toc461610340 \h  IMediaObjectParamsRecord  PAGEREF _Toc461610341 \h  IInterface  PAGEREF _Toc461610342 \h  Method  PAGEREF _Toc461610343 \h  Other Information  PAGEREF _Toc461610344 \h  Dependencies  PAGEREF _Toc461610345 \h  International/Worldwide  PAGEREF _Toc461610346 \h  Related Links  PAGEREF _Toc461610347 \h   PAGEREF _Toc461610348 \h  Revision History  PAGEREF _Toc461610349 \h  Design Goals and Justification Media Objects are generic interfaces for building streaming transforms. Several classes of transforms require parameters to be modified at run-time with predictable results. Currently the only way to change properties on a Media Object is to use IDispatch, which introduces translation overhead and does not allow feedback to the client application. This makes is almost impossible for the app to change the value over time with predictable results. Doing this is a key requirement for audio effects such as reverb or digital delay, which have common musical scenerios where the parameter values much change over time in a reproducible way.  This capability is already available in the plug-in effects architecture known as  , from Steinberg. If Media Objects are to be used as a standard transform mechanism, they must have a defined way to manipulate time-varying parameters.  Scenarios Sweetening the Mix BandX is in the studio, recording their new album on a digital multi-track system based on the Windows operating system. Once all the baseline tracks are recorded, the mix engineer determines that the sound needs to be sweetened for the chorus sections of the track. In the multi-track editing tool, a reverb effect is added through the UI. To do this, the application instantiates a Media Object based effect.  The requirement is that at time t1, some point just before the chorus, the reverb must move from a mix of 0%wet, 100%dry signal to a value ot 100%wet, 0%dry at t2, the start of the chours. IDispatch does not have the granularity to do this, so the IMediaObjectParams interface is used to specify the exact time and value at each point t1 and t2, and the curve used to move the value between those times. An abrupt shift from 0% to 100% will create audible artifacts, so by allowing a curve the listener is not jolted by the abrupt transition. Furthermore, in subsequent playbacks of the file, the exact same performance characteristics can be achieved since the exact same parameter curve can be followed. If this is not the case, then each time the song is played it will sound different, a scenario not codusive to high-end audio production. Mixing it up Another vital part of audio production is mixing audio and effects feeds to produce the final mix. Typically, this work is done by a sound engineer, manipulating a mixing board to change effects mixes and effects during mixdown to fine-tune the final production. Unless the results of each mix-down are saved, the same manipulation must be done each time the mix-down is performed, which becomes tedious. In the ideal case, the actions of the engineer could be recorded and stored as part of the performance, and then played back later. The IMediaObjectParamsRecord interface is used to record the individual motions of the engineer during the mix-down. On subsequent mix-downs, these actions can be played back using IMediaObjectParams to ensure that the same end result occurs. This allows the engineer to manipulate one section of the mix, record the results, and then move on to other sections knowing that their work will be stored and reapplied to the mix on subsequent playback or mix-downs. The repeatable behavior of IMediaObjectParams ensures that the final mix will be identical to the results achieved by the engineer while they were actively using the UI with IMediaObjectParamsRecord. Interfaces IMediaParams Interface IMediaParams and its associated interfaces provide a method of creating timestamp-based envelope following for parameter values in DMOs. In order to reduce runtime overhead, parameter values are restricted to 32-bit values and are addressed by index. Parameter names, type information and display text can be retrieved using the IMediaParamInfo interface. HRESULT GetParam (DWORD dwParamIndex, MP_DATA *pValue) Returns the current value of the parameter with index dwParamIndex. If the parameter is currently in the middle of an envelope segment, then the value of the parameter at the last sample processed will be returned. The mapping of parameters to indices is determined using the IMediaParamInfo interface. Parameters dwParamIndex Index of the parameter value to retrieve pValue Filled with the requested parameter value Return Values Success, a value was returned E_POINTER The pointer given as pValue was invalid E_INVALIDARG The index in dwParamIndex is not a valid parameter index HRESULT SetParam (DWORD dwParamIndex, MP_DATA value) Sets the value of the parameter with index dwParamIndex. If the parameter is in the middle of an envelope segment, then the envelope segment will overwrite the value set by SetParam. The mapping of parameters to indices is determined using the IMediaParamInfo interface Parameters dwParamIndex Index of the parameter value to retrieve value Filled with the requested parameter value Return Values Success, a value was returned E_INVALIDARG Either the index was not valid or the value was out of range. HRESULT AddEnvelope (DWORD dwParamIndex, DWORD cSegments,     MP_ENVELOPE_SEGMENTS *pEnvelopeSegments) Sets the value of the parameter with index dwParamIndex. If the parameter is in the middle of an envelope segment, then the envelope segment will overwrite the value set by SetParam. The mapping of parameters to indices is determined using the IMediaParamInfo interface.  <TODO   OVERLAPPING REF TIMES > Parameters dwParamIndex Index of the parameter to add envelopes to cSegments Number of envelope segments to add pEnvelopeSegments Pointer to an array of envelope segments of length cSegments Return Values Success, a value was returned E_POINTER Pointer value was invalid E_OUTOFMEMORY Not enough memory to add envlopes HRESULT FlushEnvelope (DWORD dwParamIndex, REFERENCE_TIME refTimeStart, REFERERNCE_TIME refTimeEnd) Flush all of the envelope data for the given parameter that has a reference time between refTimeStart and refTimeEnd. There are a few special cases to consider here: <TODO   FLUSH SEMANTICS WHEN ENVELOPE OVER FLUSH TIMES> Parameters dwParamIndex Index of the parameter to add envelopes to cSegments Number of envelope segments to add pEnvelopeSegments Pointer to an array of envelope segments of length cSegments Return Values Success, a value was returned E_POINTER Pointer value was invalid E_OUTOFMEMORY Not enough memory to add envlopes HRESULT SetTimeFormat (GUID guidTimeFormat, MP_TIMEDATA mpTimeData) There are a number of predefined time formats that DMOs can choose to support. The only format that must be supported is  Reference Time , in which each tick of the clock corresponds to a 100ns increment. The others are optional. For most of the optional formats, the mpTimeData is used to specify further detail on the time format. The defined formats are: Format mpTimeData Reference Time (1 tick = 100 nanoseconds) GUID_TIME_REFERENCE ignored Music Time GUID_TIME_MUSIC Parts / Quarter Note Samples per Second GUID_TIME_SAMPLES Samples / Sec  It is up to the application using the DMO to ensure that the timestamps in the Media Type and the timestamp set using SetTimeFormat match. When SetTimeFormat is called, the application should also call FlushEnvelopes on all envelope segments that have been set using the old time format to avoid mismatched timestamp types. Parameters guidTimeFormat GUID which indicates the timestamp mpTimeData Timestamp-format defined data Return Values Success, a value was returned E_DMO_TIMESTAMPFORMAT Format not supported IMediaParams IDL portions still to be documented //------------------------------------------------------------------------------ // Define the semantic type to be used for each parameter. All values passed // into this interface are 32-bit floats, but the interface can specify that // the values must be integer, or booleans or enumerated types //------------------------------------------------------------------------------ typedef float MP_DATA; // All data is 32-bit floats typedef enum _MP_Type {    MPT_INT,  // data is signed 23 bit integer (mantissa)    MPT_FLOAT, // data is 32bit IEEE float    MPT_BOOL, // data is true or false (using ANSI C++ definition)    MPT_ENUM, // data is a set (represented by consecutive integers)    MPT_MAX, } MP_TYPE; const MP_DATA MPBOOL_TRUE = 1.0; // Value of true const MP_DATA MPBOOL_FALSE = 0.0; // Value of false //------------------------------------------------------------------------------ // Define the types of curves which are supported //------------------------------------------------------------------------------ typedef enum _MP_CURVE_TYPE { MP_CURVE_JUMP    = 0x0001, // No interpolation, just jump to next point MP_CURVE_LINEAR    = 0x0002, // Linear interpolation (y follows x from 0.0 to 1.0) MP_CURVE_SQUARE    = 0x0004, // y follow x^2 from 0.0 to 1.0 MP_CURVE_INVSQUARE = 0x0008, // y follows 1-(x^2) from 0.0 to 1.0 MP_CURVE_SINE    = 0x0010, // y follows sin(x) from -pi/2 to pi/2 } MP_CURVE_TYPE; //------------------------------------------------------------------------------ // Capability bits. Used by the object to specify what capabilities it has. //------------------------------------------------------------------------------ typedef DWORD MP_CAPS; // Curve capabilities - If the cap bit is set, that type of curve is supported const MP_CAPS MP_CAPS_CURVE_JUMP = MP_CURVE_JUMP; const MP_CAPS MP_CAPS_CURVE_LINEAR = MP_CURVE_LINEAR; const MP_CAPS MP_CAPS_CURVE_SQUARE = MP_CURVE_SQUARE; const MP_CAPS MP_CAPS_CURVE_INVSQUARE = MP_CURVE_INVSQUARE; const MP_CAPS MP_CAPS_CURVE_SINE = MP_CURVE_SINE; //------------------------------------------------------------------------------ // Structure used to return information about the type and limits of a parameter //------------------------------------------------------------------------------ typedef struct _MP_PARAMINFO {    MP_TYPE mpType; // One of MP_TYPE_xxx codes    MP_CAPS mopCaps; // A collection of MP_CAPS flags    // Minimum and maximum values    MP_DATA mpdMinValue; // minimum legal value    MP_DATA mpdMaxValue; // maximum legal value    MP_DATA mpdNeutralValue; // default or 'center' value    // Defualt Unit and Label text. These strings will ALWAYS be English    // strings in the UNICODE character set. For international text    // use the GetParamText member function    WCHAR    szUnitText[32]; // units of the parameter    WCHAR    szLabel[32];  // name of the parameter } MP_PARAMINFO; //------------------------------------------------------------------------------ // Parameter Index types //------------------------------------------------------------------------------ typedef DWORD DWORD; const DWORD DWORD_ALLPARAMS = -1; // Apply this operation to all params //------------------------------------------------------------------------------ // Defined list of timestamp types //------------------------------------------------------------------------------ typedef DWORD MP_TIMEDATA; // Extra data to further define type // REFERENCE_TIME (1 tick = 100 nanoseconds, MP_TIMEDATA ignored)  cpp_quote("DEFINE_GUID(GUID_TIME_REFERNCE,")  cpp_quote("0x93ad712b, 0xdaa0, 0x4ffe, 0xbc, 0x81, 0xb0, 0xce, 0x50, 0xf, 0xcd, 0xd9);") // Music Time (MP_TIMEDATA = parts/quarter note) cpp_quote("DEFINE_GUID(GUID_TIME_MUSIC,") cpp_quote("0x574c49d, 0x5b04, 0x4b15, 0xa5, 0x42, 0xae, 0x28, 0x20, 0x30, 0x11, 0x7b);") // Time is measures in samples. MP_TIMEDATA = Samples/sec) cpp_quote("DEFINE_GUID(GUID_TIME_SAMPLES,") cpp_quote("0xa8593d05, 0xc43, 0x4984, 0x9a, 0x63, 0x97, 0xaf, 0x9e, 0x2, 0xc4, 0xc0);") //------------------------------------------------------------------------------ // The value of a given parameter at a specific point in time //------------------------------------------------------------------------------ typedef DWORD MP_FLAGS; const MP_FLAGS MPF_ENVLP_STANDARD         = 0x0000; // Use all data provided const MP_FLAGS MPF_ENVLP_BEGIN_CURRENTVAL = 0x0001; // Ignore the valStart value, use the current value as the staring point typedef struct _MP_ENVELOPE_SEGMENT {    REFERENCE_TIME  rtStart; // Start time in current time format    REFERENCE_TIME  rtEnd;     // End time in current time format    MP_DATA         valStart; // Initial Value    MP_DATA        valEnd; // Final Value    MP_CURVE_TYPE   iCurve; // One of MP_CURVE_TYPE codes    MP_FLAGS        flags; // Special cases } MP_ENVELOPE_SEGMENT; //------------------------------------------------------------------------------ // Define flags for Punch-in timing //------------------------------------------------------------------------------ const MP_FLAGS MPF_PUNCHIN_REFTIME = 0; // Use the reference time as the PI time const MP_FLAGS MPF_PUNCHIN_NOW = 0x0001; // Punch in at the current clock time //------------------------------------------------------------------------------ // IMediaParamInfo - Interface used to determine the names, data types and // units of the parameters which are exposed by the object. This interface // is used at discovery time, and is not required during run-time since the  // objects parameters are a fixed set and this data can be cached by the  // calling applicaiton //------------------------------------------------------------------------------ object, uuid(6d6cbb60-a223-44aa-842f-a2f06750be6d), version(1.0) interface IMediaParamInfo : IUnknown HRESULT GetParamCount ( [out] DWORD * pdwParams HRESULT GetParamsInfo ( [in] DWORD dwParamIndex, [out] MP_PARAMINFO * pInfo // returns a series of null terminated strings. strings are in the // following order: // Param Label, Units Text, 1st Enum Text, 2nd Enum Text, etc... HRESULT GetParamText ( [in] DWORD dwParamIndex, // which param to get text for [out] WCHAR **ppwchText     // returns ptr to CoTaskMemAlloc'd string // Returns the number of diffrent time formats this object understands HRESULT GetNumTimeFormats ( [out] DWORD * pdwNumTimeFormats // Returns the GUID for the ith supported time format HRESULT GetSupportedTimeFormat( [in] DWORD dwFormatIndex, [out] GUID *pguidTimeFormat // Returns the current time format HRESULT GetCurrentTimeFormat ( [out] GUID *pguidTimeFormat, [out] MP_TIMEDATA *pTimeData ///////////////////////////////////////////////////////////////////////////// // IMediaParamsRecordNotify - This is a callback mechanism that allows the // client applicaiton to track parameter changes in the object. While the // object is recording (punch-in state), ParamChanged() messages will  // be sent to this interface to allow the app to react to the changes made // within the object itself. ///////////////////////////////////////////////////////////////////////////// object, uuid(fea74878-4e39-4267-8a17-6aaf0536ff7c), version(1.0) interface IMediaParamsRecordNotify : IUnknown // Notification to initialize recording state HRESULT InitRecording (void); // Recording has begun, ParamChanged messages may be coming soon HRESULT PunchedIn (void); // Recording has puased, ParamChanged messages have stopped HRESULT PunchedOut (void); // Recording has ceased entirely, clean up HRESULT EndRecording (void); // ParamChanged - Notification message sent when a parameter has changed HRESULT ParamChanged (   [in] DWORD dwIndex,   [in] DWORD cNumSegments,   [in] MP_ENVELOPE_SEGMENT * pEnvelopeSegments ///////////////////////////////////////////////////////////////////////////// // IMediaParamsRecord - If the object support IMediaParamsRecord, then it // can send it's parameter change notificaitons to the client. The client // applicaiton calls InitRecodring() to specify the callback it wishes to // be notified on.  ///////////////////////////////////////////////////////////////////////////// object, uuid(21b64d1a-8e24-40f6-8797-44cc021b2a0a), version(1.0) interface IMediaParamsRecord : IUnknown // Pass in the interface for the callbacks HRESULT InitRecording ( [in] IMediaParamsRecordNotify *pINotify // Specify the time at which punch-in should occur HRESULT PunchIn ( [in] REFERENCE_TIME refTimeStart, [in] MP_FLAGS flags // Specify the time at which punch out should occur HRESULT PunchOut ( [in] REFERENCE_TIME refTimeStopped // Indicate to the object it should release the callback interface HRESULT EndRecording (void); Other Information Dependencies What specific components or work do you depend on from other teams (not just relationships, but real code that puts us at risk)? International/Worldwide This is a client-side implemented interface. What is required is a way for the client to provide different parameter text string names for a variety of languages. Open Issue: How do we handle multiple languages..   Related Links This is a good place for links to other specs, other groups websites, competitive products & information, etc.  Nothing has been cut from this spec at this time Revision History Modified By Description of Changes 7/14/1999 BrianMar Initial Document Creation 8/12/1999 BrianMar Insert latest IDL and drill down 9/9/1999 BrianMar Update with multi-Get/Set 1/31/2000 BrianMar Document interfaces, update IDL Media Object Parameter Interfaces Microsoft Confidential Page   PAGE   NUMPAGES  Microsoft Confidential  TIME \@ "M/d/yy h:mm am/pm"  7/14/99 11:10 AM Microsoft Confidential
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\tools\dmotest\dshowmediaobj\doc\mediaobj.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Title _PID_HLINKSNormal R C B Speed Microsoft Word 9.0I-,R, e?6N. BX)zf uc=~m.\ 5B-jl ~3R~_i Mg~ 5 nn9nsMicrosoft Word Picture MSWordDoc Word.Picture.8Microsoft Word Times New Roman SymbolTitle _PID_GUIDSoraya Bittencourt Normal.dot Soraya Bittencourt Microsoft Word 8.0$N:*' ?(?FB *`)N+ $!.q"P0Z _2 N?)<, 1);H3 ?c?FB  N:m" 2<0=0*1 36)A4,& 4!#/5#!/5 =j'w= 37.J2 /6&J/P#  R>R!9A Fw@lD D9A(F8? M7-gMj) L8'`L J1/dI ?h?FB Iw3ZJ /=041 +(36)04,& 4!#75#!75 ;?='<?='<?=U< @GCC Elite 600 v1.1 \\morph\lp PSCRIPT GCC Elite 600 v1.1 GCC Elite 600 v1.1 Custom page 1 Custom page 2 Custom page 3 GCC Elite 600 v1.1 Custom page 1 Custom page 2 Custom page 3symbol 226 \f "Symbol"bjbjU  EMBED Word.Picture.6   DirectX Media Objects Last Revised:   DATE  \* MERGEFORMAT  3/17/2000 Microsoft does not make any representation or warranty regarding this specification or any product or item developed based on this specification.  Microsoft disclaims all express and implied warranties, including but not limited to the implied warranties of merchantability, fitness for a particular purpose and freedom from infringement.  Without limiting the generality of the foregoing, Microsoft does not make any warranty of any kind that any item developed based on this specification, or any portion of it, will not infringe any copyright, patent, trade secret or other intellectual property right of any person or entity in any country.  It is your responsibility to seek licenses for such intellectual property rights where appropriate.  Microsoft shall not be liable for any damages arising out of or in connection with the use of this specification, including liability for lost profit, business interruption, or any other damages whatsoever.  Some states do not allow the exclusion or limitation of liability for consequential or incidental damages; the above limitation may not apply to you. No part of this document may be reproduced or transmitted in any form or by any means, electronic or mechanical, including photocopying and recording, for any purpose without the express written permission of Microsoft Corporation. Microsoft, Windows and the Win32 are registered trademarks; Windows NT, DirectX and DirectShow are trademarks of Microsoft Corporation. Other brands and names are the property of their respective owners. Copyright (1999-2000 Microsoft Corporation. All Rights Reserved. Table of Contents  TOC \o "1-3"  Table of Contents  PAGEREF _Toc477941343 \h  Overview  PAGEREF _Toc477941344 \h  Motivation  PAGEREF _Toc477941345 \h  Interfaces  PAGEREF _Toc477941346 \h  IMediaObject interface  PAGEREF _Toc477941347 \h  Media types  PAGEREF _Toc477941348 \h  Data flow  PAGEREF _Toc477941349 \h  IMediaObject methods and structures  PAGEREF _Toc477941350 \h  IMediaObjectInPlace Interface  PAGEREF _Toc477941351 \h  IMediaBuffer Interface  PAGEREF _Toc477941352 \h  IMediaBufferDeferred Interface  PAGEREF _Toc477941353 \h  Registration APIs  PAGEREF _Toc477941354 \h  Media Type Helpers  PAGEREF _Toc477941355 \h  Appendices  PAGEREF _Toc477941356 \h  Suggested Future Additions  PAGEREF _Toc477941357 \h  Other interfaces  PAGEREF _Toc4779413 rred to as  Media Objects ) are COM objects which process multimedia data and support the IMediaObject interface. Media Objects will be built for the following types of multimedia processing: Audio and video effects Audio and video compressors Audio and video decompressors Motivation Media Objects implement low level streaming functionality. A Media Object should be implemented whenever possible instead of either a DirectShow filter or a VCM (Video Compression Manager) or ACM (Audio Compression Manager) codec. Media objects are preferred to DirectShow filters because: They can be used without DirectShow filter graphs, which means they re available to more applications. They are generally smaller because they don t have to implement all the DirectShow interfaces. They are more testable because their behavior is synchronous and simpler than a general DirectShow filter. Media objects are preferred to ACM and VCM codecs because: They are COM-based hence can take advantage of the extensibility features of COM via QueryInterface They can implement a more general streaming model allowing 0 or more input buffers for every 0 or more output buffers. They have superior registration by type, which ACM lacked. Interfaces The central interface on which all Media objects are based in the IMediaObject interface. This interface provides all of the necessary functions for querying the input and output types of the media object, setting up the input streams, and processing the data in the object. All Media Objects must support the IMediaObject interface. Media Objects use a standard reference-counted object to represent each buffer of data entering or leaving the object. These objects are accessed using the IMediaBuffer interface. This allows Media Objects to share buffers, reducing the amount of data copying required in the system. IMediaBuffer is mandatory and must be supported by the object implementing the data buffer. The optional IMediaBufferDeferred interface can also be supported. This interface extends IMediaBuffer by allowing the Media Object or application to determine if the entire contents of the buffer are a constant value. This can provide major performance gains to causes like silence in an audio buffer. This is described more fully below. If a Media Object wishes to persist its current state so it can be saved and then reloaded at a later time, then the Media Object must support the IPersistStream interface. This is a standard COM interface, and documentation for this interface is not included in this document. If a Media Object supports a set of static properties that do not vary over time, then these properties should be set and queried using the standard IPropertyBag2 interface. This allows the user to query the properties, their types, and set them through a standard interface. If the Media Object wishes to provide property pages for use by other applications, it does this by implementing the ISpecifyPropertyPages interface. IMediaObjectParams is a new interface that provides support for run-time varying properties. For example, audio effects filters often require that properties such as volume or wet/dry mix vary over time following a precise curve. By specifying the starting and ending times and values of a property and the curve to follow between these points, the filter can perform sample-accurate settings of the parameter. This interface is documented below. There is a class of Media Objects, including most audio processing effects, in which the size of the input and output buffers is exactly the same. In such case, the Media Object can support the IMediaObjectInPlace interface. This interface is a simplified version of IMediaObject, since the number of input and output buffers is fixed at one. Note that the semantics of IMediaBuffer reference counting change when using the in-place interface. Any Media Object implementing IMediaObjectInPlace must also implement IMediaObject. IMediaObject interface All Media Objects support the IMediaObject interface. The IMediaObject interface models the Media Object as a set of input streams and a set of output streams each identified by a 0-based index. The application can enumerate the types of data that each stream can process and select the type of data it wishes to use on each stream.  The DMO_MEDIA_TYPE structure is used to identify all types of multimedia data.   The IMediaObject::ProcessInput() method passes in input buffers.  The IMediaObject::ProcessOutput() method passes in output buffers and invokes the Media Object's processing. Return code testing All methods in the IMediaObject interface return an HRESULT.    Applications should use the SUCCEEDED() and FAILED() macros for testing return codes unless they are checking for specific docoumented success codes.  This will allow some small amount of expansion of informative success codes in the future. Media types The media types which an input stream will accept are enumerated with the GetInputType() method.  Generally GetInputType() will return a Media Type with a NULL format block.  SetInputType()  can be called to test if an media type can be processed by an input stream and SetInputType() sets the type for a stream.  Once the input types for all input streams are setT the same process is followed for output streams using GetOutputType(), and SetOutputType().  Some streams may not enumerate any types until other streams have had their type set - for instance, often a decoder with one input stream and one output stream might only enumerate types for its output stream when the type for its input stream has been set by calling SetInputType(). GetInputType() and GetOutputType() return types in preference order with the most preferred type first. The set of types enumerated by GetInputType()  and GetOutputType() and the types which can be set by SetInputType() and SetOutputType() for a given stream index can vary depending on the types already defined for other streams.  SetInputType() and SetOutputType() will only succeed if the type specified as acceptable along with types already set for other streams and the type being set if consistent with any unflushed data held by the Media Object.  Generally the application will set the input type for a decoder first and the output type for an encoder first and then either pick a suitable type from the enumerated types on the other stream or try to set its preferred type. The type for a given input or output stream can be cleared by setting the DMO_SET_TYPEF_CLEAR flag for the SetInputType()/SetOutputType() call.  This allows, for example, new types to be set which are incompatible with the types set on other input or output streams. A Media Object will not process data if types are not set for all its non-optional streams. Data flow The application supplies data to a Media Object in the ProcessInput() method.  An object may actually process some data in this call if it does not need an output buffer.   If the Media Object needs to hold on to the data in order to generate output in the next call to ProcessOutput() the Media Object calls AddRef on the IMediaBuffer passed in and saves any additional data.  This is the normal case. When the Media Object is done with an input buffer it calls Release(). Media objects generate output data in the ProcessOutput() call.  The ProcessOutput() call is synchronous, all output which can be generated from the input data currently held by the object and which fits in the output buffers passed in must be generated by the time the media object returns from ProcessOutput().  For Media types which require complete samples to be generated the output buffer may not be filled if there is not room for another complete sample, even if more input can be processed. Each output buffer is a structure that contains a pointer to an IMediaBuffer interface  optionally a timestamp optionally a time length   Data flow flags The IMediaBuffer interface encapsulates each data buffer.  It is used to manage lifetime of input buffers and output. Objects can call AddRef() on the IMediaBuffer interface to hold an input buffer after returning from the call to ProcessInput().    Generally this is done for one of 2 reasons: Not all the input can be processed with the current set of output buffers so the object saves a pointer to the buffer rather than taking an internal copy. The Media Object has special requirements for lookahead using the raw data. Media objects keep the flow of data going either by generating more output from the input they've already received or by accepting more input (or both).  Thus whenever ProcessOutput() is called either at least one input stream has the DMO_INPUT_STATUSF_ACCEPT_DATA flag set at least one output stream has the DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE flag set or both. An input stream which does not implement lookahead(see   REF _Ref457961712 \h  Lookahead ) should Release the media buffer for an input stream once that stream can accept input again.  In particular for a Media Object with a single input stream which does not implement lookahead if no output stream indicates DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE then the input stream should have released any media buffer it was holding. Output Buffer handling Data can be inserted in output media buffers by adding the current length to the current buffer position and inserting data between that position and the maximum length of the buffer. Media Objects notify the application of data delivered in output buffers by calling IMediaBuffer::SetLength() inside the ProcessOutput() method to set the length to the total length of data in the buffer. Buffer sizes Input and output buffer size requirements for a given Media Object can be queried by calling GetInputSizeInfo()  and GetOutputSizeInfo().  These calls return the minimum buffer size required to guarantee that some data is processed.  These methods should be called after the media type has been set for all streams to allow the correct sizes to be returned for the types set. For some media types the input buffer is defined to contain a single sample - for example: Uncompressed video Some compressed video formats For some media types the input buffer is defined to contain complete audio samples - for example Uncompressed audio Some compressed audio formats When the input cannot be guaranteed to hold sufficient data to process a sample the media object should buffer data internally until it has sufficient data to generate output data.  For fixed bitrate content the media object may also be able to set a minimum buffer size consistent with latency requirements to generate output data but generally for variable bitrate content the Media Object should implement the buffering strategy. Incomplete status If a call to ProcessOutput() results in the Media Object being unable to generate all the output data for the associated input data the Media Object sets the 'incomplete' status (DMO_OUTPUT_DATA_BUFFER_INCOMPLETE) in the buffer headers associated with any output streams that need extra buffers. The application should generally call ProcessOutput()until no output buffer has the 'incomplete' status before calling ProcessInput() again.  A special case arises with video effect and mixer objects.  In order to correctly interleave multiple streams without having to buffer frames internally the mixer/effect should only complete the input buffer(s) with the earliest stop time in the ProcessOutput() call. Discontinuities Some Media Objects need to output extra data when the input data comes to an end or there is a logical break in the input data.  This includes some audio encoders which can generate partial samples, encoders which perform lookahead and some decoders which defer reference frames (so the first frame decode generates no output and the last frame decode forces out the last reference frame).  In this case the Discontinuity method is called for the input stream. For Media Objects which buffer data internally or generate partial samples only at the end of the data the Media Object must pay attention to the Discontinuity() method.   The meaning of the Discontinuity() method for the media object is that all input must be processed as far as possible given that no more input will be received on the stream(s) on which the Discontinuity() method has been called. When the application using a Media Object uses the Discontinuity() method ProcessOutput() must be called repeatedly until all output data has been generated without passing in more data for that input stream. Processing of a discontinuity for an input stream is defined to be complete when the input stream can return DMO_INPUT_STATUSF_ ACCEPT_DATA from the GetInputStatus() method. Lookahead In some rare cases objects will want to hold on to multiple input buffers.  In this case the media object sets the DMO_INPUT_STREAM_INFOF_HOLDS_BUFFERS flag in its GetInputStreamInfo().  In addition the object sets the pcbMaxLookahead output value from GetInputSizeInfo() so that the application knows in advance how much of its data can be held at a time. When a discontinuity occurs on an input stream which implements lookahead and all output has been processed for that stream all the samples held by that stream must be released. Serialization Media Objects should perform their own serialization.  Media buffers are assumed to only ever have one owner so can assume they will never be called from more than one thread simulataneously except possibly for calls to AddRef() and Release() which should be MultiThread safe. Timestamps In general it is not required to supply timestamps for input buffers.  However, if timestamps are supplied for input buffers a DMO should generate them where appropriate (ie on sample boundaries) on output buffers. Optional Streams and Discarding Data An output stream may be labeled as optional by returning the DMO_OUTPUT_STREAMF_OPTIONAL flag from GetOutputStreamInfo() for that stream. An output stream may be labeled as discardable by returning the DMO_OUTPUT_STREAMF_DISCARDABLE  flag from GetOutputStreamInfo() for that stream. Optional streams are Discardable. An Optional stream is generally a secondary stream which contains extra information or data not needed for all applications.  An application environment can use the Optional property to ignore a stream when doing default processing.  The media type does not have to set for an Optional stream if the application does not  process data for that stream. A Discardable stream is a stream which may be partially or wholly discarded by the application. Data is discarded from Optional and Discardable streams by calling ProcessOutput() with the DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER set and additionally setting the pBuffer member of the output buffers parameter to NULL.   Note: A DMO can discard data for an output stream in ProcessOutput() when the DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER flag is set and the corresponding pBuffer is NULLThis even when the stream is neither Discardable nor Optional but the DMO is not in this case required to discard data. Video Decoders should generally only discard one frame (or 0 if none are available) for every ProcessOutput() call when discarding. Discarding data can be used either to completely ingnore a stream or, for example for video decoders, to optimize the processing of preroll or other ignored output. IMediaObject methods and structures Data buffers are wrapped inside an IMediaBuffer interface, a pointer to which is stored in each of the below structures.  The IMediaBuffer interface contains a few simple methods to access the data pointer and the buffer s length: interface IMediaBuffer : IUnknown     HRESULT SetLength(        [in] DWORD cbLength     );     HRESULT GetMaxLength(        [out] DWORD *pcbMaxLength     );     HRESULT GetBufferAndLength(        [out] BYTE **ppBuffer,  // not filled if NULL        [out] DWORD *pcbLength // not filled if NULL     ); The value returned in *pcbLength is the number of bytes of valid data currently held by the buffer, NOT the allocation size of the buffer.  The allocation size of the buffer can be obtained by calling GetMaxLength().   GetBufferAndLength() must place 0 in *pcbLength if SetLength() has not yet been called. DMO_MEDIA_TYPE GUID     majortype; GUID     subtype; BOOL     bFixedSizeSamples; BOOL     bTemporalCompression; ULONG    lSampleSize; GUID     formattype; IUnknown *pUnk; ULONG    cbFormat; BYTE *pbFormat; This defines the media type structure.  This structure exactly matches the DirectShow AM_MEDIA_TYPE structure and is given here for reference. majortype  Major type of the media sample.  subtype  Subtype of the media sample.  bFixedSizeSamples  If TRUE, samples are of a fixed size. This field is informational only. For audio, it is generally set to TRUE. For video, it is usually TRUE for uncompressed video and FALSE for compressed video.  bTemporalCompression  If TRUE, samples are compressed using temporal (interframe) compression. (A value of TRUE indicates that not all frames are key frames.) This field is informational only.  lSampleSize  Size of the sample in bytes. For compressed data, the value can be zero..  formattype  Guid specifying the format type. The pbFormat member points to the corresponding format structure. Format types include the following:  Format type Structure pointed to FORMAT_MPEGVideo  HYPERLINK "http://dxmdoc/dshow/ds/ref/structs/struct_MPEG1VIDEOINFO.htm"  MPEG1VIDEOINFO FORMAT_VideoInfo  HYPERLINK "http://dxmdoc/dshow/ds/ref/structs/struct_VIDEOINFOHEADER.htm"  VIDEOINFOHEADER FORMAT_WaveFormatEx  HYPERLINK "http://dxmdoc/dshow/ds/filtdev/DV_Data_AVI_File_Format.htm" \l "WAVEFORMATEX_AVI"  WAVEFORMATEX FORMAT_MPEG2Video   HYPERLINK "http://dxmdoc/dshow/ds/ref/structs/struct_MPEG2VIDEOINFO.htm"  MPEG2VIDEOINFO FORMAT_VideoInfo2   HYPERLINK "http://dxmdoc/dshow/ds/ref/structs/struct_VIDEOINFOHEADER2.htm"  VIDEOINFOHEADER2 pUnk  Not used.  cbFormat  Size of the format block of the media type.  pbFormat  Pointer to the type of format structure specified in the formattype member.  Note that if formattype is not GUID_NULL or FORMAT_None (both mean no format block) then pbFormat cannot be NULL and cbFormat should not be 0. DMO_OUTPUT_DATA_BUFFER IMediaByffer *pBuffer; DWORD dwFlags; REFERENCE_TIME rtTimeStamp; REFERENCE_TIME rtTimeLength; pBuffer Pointer to buffer wrapper interface Can be NULL dwFlags (out) This must be a combination of the following flag values (or 0) DMO_OUTPUT_DATA_BUFFERF_TIME rtTimestamp is valid DMO_OUTPUT_DATA_BUFFERF_TIMELENGTH rtTimeLength is valid DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE Another buffer is required to continue process the input DMO_OUTPUT_DATA_BUFFERF_SYNCPOINT Syncpoint at the beginning of the data rtTimestamp Start time rtTimelength Length HRESULT GetStreamCount(DWORD *pcInputStreams, DWORD *pcOutputStreams) Returns the number of each type of stream.  It is possible for objects to have no input streams or no output streams. Parameters pcInputStreams Number of input streams pcOutputStreams Number of output streams Return Values Success E_POINTER One of the parameters was NULL Failure code Some other failure HRESULT GetInputStreamInfo(DWORD dwInputStreamIndex, DWORD *pdwFlags) Returns information about an input stream.  This information does not change for the lifetime of this stream. Parameters dwInputStreamIndex Zero based index of input stream pdwFlags DMO_INPUT_INFOF_HOLDS_BUFFERS The Media Object may hold on to multiple input buffers for this stream Return Values Success E_POINTER pdwFlags  was NULL DMO_E_INVALID_STREAM Stream index out of range Failure code Some other failure HRESULT GetOutputStreamInfo(DWORD dwOutputStreamIndex, DWORD *pdwFlags) Returns information about an output stream.  This information does not change for the lifetime of this stream. Parameters dwOutputStreamIndex Zero based index of output stream pdwFlags DMO_OUTPUT_STREAMF_WHOLE_SAMPLES Output contains complete samples             DMO_OUTPUT_STREAMF_SINGLE_SAMPLE Output contains 1 sample DMO_OUTPUT_STREAMF_FIXED_SAMPLE_SIZE Output samples are fixed size DMO_OUTPUT_STREAMF_DISCARDABLE Output can be discarded in ProcessOutput DMO_OUTPUT_STREAMF_OPTIONAL Processing this stream is optional Return Values Success E_POINTER pdwFlags  was NULL DMO_E_INVALID_STREAM Stream index out of range Failure code Some other failure HRESULT GetInputType(DWORD dwInputStreamIndex, DWORD dwTypeIndex, DMO_MEDIA_TYPE *pmt) Get the dwTypeIndex type for the input stream dwInputStreamIndex.  The Media Type returned in pmt will be overwritten if the method is successful.  The format block of the Media Type must be freed by calling MoFreeMediaType() on the DMO_MEDIA_TYPE structure.  Often input types will contain a NULL format block. The types are enumerated in preference order with the most preferred type corresponding to a type index of 0. If the call is successful the caller should free the output media type by calling MoFreeMediaType() when it's done. For convenience of implementation it's possible that some types will be enumerated which will fail when used in SetOutputType(). GetInputType() may return a partial type indicating a range of preferred types.  When the format block is not specified the formattype GUID is set to GUID_NULL.  Parameters dwInputStreamIndex Zero based input stream index dwTypeIndex Zero based type index Pointer to Media type to return This can be NULL in which case the return value is S_OK if the dwTypeIndex is in range and S_FALSE if the dwTypeIndex is out of range. Return Values Success S_FALSE Type index out of range DMO_E_INVALID_STREAM Stream index out of range E_OUTOFMEMORY Could not allocate format block or some other memory failure Failure code Some other failure HRESULT GetOutputType(DWORD dwOutputStreamIndex, DWORD dwTypeIndex, DMO_MEDIA_TYPE *pmt) Get the dwTypeIndex type for the output stream dwOutputStreamIndex.  The Media Type returned in pmt will be overwritten if the method is successful.  The format block of the Media Type must be freed by calling MoFreeMediaType() on the DMO_MEDIA_TYPE structure. The types are enumerated in preference order with the most preferred type corresponding to a type index of 0. If the input type is not set for some input stream this call may fail or return a type with a NULL format block. If the call is successful the caller should free the output media type by calling MoFreeMediaType() when it's done. For convenience of implementation it's possible that some types will be enumerated which will fail when used in SetOutputType(). GetOutputType() may return a partial type indicating a range of preferred types.  When the format block is not specified the formattype GUID is set to GUID_NULL. Parameters dwOutputStreamIndex Zero based output stream index dwTypeIndex Zero based type index Pointer to Media type to return This can be NULL in which case the return value is S_OK if the dwTypeIndex is in range and S_FALSE if the dwTypeIndex is out of range. Return Values Success S_FALSE Type index out of range DMO_E_INVALID_STREAM Stream index out of range E_OUTOFMEMORY Could not allocate format block or some other memory failure Failure code Some other failure HRESULT SetInputType(DWORD dwInputStreamIndex, const DMO_MEDIA_TYPE *pmt, DWORD dwFlags) Set a Media Type for an input stream.  This call is processed in the context of the types currently set for other streams (both input and output). If the DMO_SET_TYPEF_TEST_ONLY flag is set the type for this stream is not set or changed. If the DMO_SET_TYPEF_CLEAR flag is set then pmt should NULL and the type for this stream is removed. At most one of DMO_SET_TYPEF_TEST_ONLY and DMO_SET_TYPEF_CLEAR can be set. Parameters dwInputStreamIndex Zero based input stream index Type to set dwFlags This must be a combination of the following flag values (or 0) DMO_SET_TYPEF_TEST_ONLY Just check if this type can be set, do not set it DMO_SET_TYPEF_CLEAR Clears the type so that no type is set for this stream Return Values Type was set S_FALSE Type cannot be set DMO_E_TYPE_NOT_ACCEPTED Type is not acceptable Failure code Some other failure E_INVALIDARG Invalid argument HRESULT SetOutputType(DWORD dwOutputStreamIndex, const DMO_MEDIA_TYPE *pmt, DWORD dwFlags) Set a Media Type for an output stream.  This call is processed in the context of the types currently set for other streams (both input and output). If the DMO_SET_TYPEF_TEST_ONLY flag is set the type for this stream is not set or changed. If the DMO_SET_TYPEF_CLEAR flag is set then pmt should NULL and the type for this stream is removed. At most one of DMO_SET_TYPEF_TEST_ONLY and DMO_SET_TYPEF_CLEAR can be set. Parameters dwOutputStreamIndex Zero based output stream index Type to set dwFlags This must be a combination of the following flag values (or 0) DMO_SET_TYPEF_TEST_ONLY Just check if this type can be set, do not set it DMO_SET_TYPEF_CLEAR Clears the type so that no type is set for this stream Return Values Type can be set S_FALSE Type cannot be set DMO_E_TYPE_NOT_ACCEPTED Type is not acceptable Failure code Some other failure HRESULT GetInputCurrentType(DWORD dwInputStreamIndex, DMO_MEDIA_TYPE *pmt) Get the Media Type for an input stream.  If the call is successful the caller should free the output media type by calling MoFreeMediaType() when it's done. Parameters dwInputStreamIndex Zero based input stream index Type returned here The type must be freed by calling MoFreeMediaType() if this call was successful Return Values Type was returned DMO_E_TYPE_NOT_SET Type is not set E_OUTOFMEMORY Format block could not be allocated Failure code Some other failure HRESULT GetOutputCurrentType(DWORD dwOutputStreamIndex, DMO_MEDIA_TYPE *pmt) Get the Media Type for an output stream.  If the call is successful the caller should free the output media type by calling MoFreeMediaType() when it's done. Parameters dwOutputStreamIndex Zero based output stream index Type returned here The type must be freed by calling MoFreeMediaType() if this call was successful Return Values Type was be set DMO_E_TYPE_NOT_SET Type is not set E_OUTOFMEMORY Format block could not be allocated Failure code Some other failure HRESULT GetInputSizeInfo(DWORD dwInputStreamIndex, DWORD *pcbSize, DWORD *pcbMaxLookahead, DWORD *pdwAlignment) Get buffer size and alignment requirements for a given input stream. This method should be called after the types of all streams have been set using SetInputType() and SetOutputType(). pcbMaxLookahead is only used for objects which hold on to multiple input buffers for lookahead.  In that case the application must allow for enough buffers so that this amount can be retained by the object in order to generate output.  For example, if the application decides on a fixed buffer size of dwBufferSize then it should be prepared to allocate up to at least: (*pcbMaxLookahead + 2 * (dwBufferSize - 1)) / dwBufferSize buffers of that size to avoid running out of buffers.  This number may be reduced if there are alignment requirements in the data. Parameters dwInputStreamIndex Zero based input stream index pcbSize Returns buffer size This is at least the minimum size required for processing pcbMaxLookahead Maximum size of data held by this object if it AddRefs multiple input buffers Or 0. pdwAlignment Returns buffer alignment.  1 means no alignment requirement. Return Values Call successful E_POINTER NULL pointer passed in Failure code Other failure HRESULT GetOutputSizeInfo(DWORD dwOutputStreamIndex, DWORD *pcbSize, DWORD *pdwAlignment) Get buffer size and alignment requirements for a given output stream. This method should be called after the types of all streams have been set using SetInputType() and SetOutputType(). Parameters dwOutputStreamIndex Zero based output stream index pcbSize Returns buffer size pdwAlignment Returns buffer alignment.  1 means no alignment requirement. Return Values Call successful E_POINTER NULL pointer passed in Failure code Other failure HRESULT Discontinuity(DWORD dwInputStreamIndex) Informs the Media Object that the data is discontinuous on input stream dwInputStreamIndex.  This can occur (for example) because there is a large gap in the data, because no more data is expected, or because the format of the data is changing. The Media Object should generate all output which can be generated from the data already received in calls to ProcessInput() on this stream before accepting more data on this stream. Calling Discontinuity() more than once without intermediates call to ProcessInput() is equivalent to calling Discontinuity() once. If the Discontinuity() method has been called on all input streams for a Media Object and all output has been processed from all the output streams by calls to ProcessOutput() then the Media Object is in the equivalent state to the flushed state.  In this state all buffers must be released and no more output can be generated until ProcessInput() is called again.  Also in this state calling Flush() has no effect. Parameters dwInputStreamIndex 0-based input stream index Return Values Call was successful HRESULT Flush() Flush internally buffered data and reset any streaming state.  Media types and other parameters such as latency are not changed. All Media Buffers held by all streams must be released on return from this call. Any incomplete processing of a discontiuity for any input stream is cancelled. All streams should accept input after a Flush() call. Parameters Return Values Successful Failure code Failure HRESULT AllocateStreamingResources() Hint to allocate any resources necessary for processing.  This method may not be called before the first call to ProcessOutput() and it is not required to support this method. Parameters Return Values Successful.  Return this if the call is not implemented. Failure code Some failure occurred HRESULT FreeStreamingResources() Hint to free any resources necessary for processing. Parameters Return Values Successful.  Return this if the call is not implemented. Failure code Some failure occurred HRESULT GetInputStatus(DWORD dwInputStreamIndex, DWORD *pdwFlags) Return input stream status. Parameters dwInputStreamIndex 0-based input stream index pdwFlags DMO_INPUT_STATUSF_ACCEPT_DATA This stream is ready to accept data The setting of this flag can only change as the result of one of the following calls: ProcessOutput() Discontinuity() ProcessInput() Flush() Return Values HRESULT ProcessInput(DWORD dwInputStreamIndex, IMediaBuffer *pBuffer, DWORD dwFlags, REFERENCE_TIME rtTimeStamp, REFERENCE_TIME rtTimeLength) Deliver an input buffer for a stream.  The Media Object should either process all the data inside this method or call IMediaBuffer::AddRef() to hold the buffer waiting for calls to ProcessOutput().  When the Media Object has generated all the output it can from this buffer it should call IMediaBuffer::Release() unless it needs the buffer for lookahead. If the Media Object calls IMediaBuffer::AddRef() the appication should not reuse a buffer until the matching IMediaBuffer::Release() is called. ProcessInput() can return S_FALSE to indicate there is no output (and therefore ProcessOutput() does not need to be called).  This can save the application needlessly allocating buffers before output is available.  It is not an error if ProcessInput() returns S_OK and there is no output data. Parameters dwInputStreamIndex Zero based input stream index pBuffer Buffer containing data Cannot be NULL dwFlags Must be a combination of the following flag valus (or 0) DMO_INPUT_DATA_BUFFERF_TIME rtTimestamp is valid DMO_INPUT_DATA_BUFFERF_TIMELENGTH rtTimeLength is valid DMO_INPUT_DATA_BUFFERF_SYNCPOINT Syncpoint at the beginning of the data rtTimeStamp Start timestamp in 100ns units rtTimeLength Length in 100ns units Return Values Processed normally S_FALSE No output.  DMO_E_NOTACCEPTING Data cannot be accepted until previous output has been processed by calling ProcessOutput() HRESULT ProcessOutput(DWORD dwFlags, DWORD cOutputBufferCount, DMO_OUTPUT_DATA_BUFFER *pOutputDataBuffers, DWORD *pdwStatus) Generate outputs from current input data.  The status fields in the output data buffers are updated as a result of this call. The IMediaBuffer pointers in the DMO_OUTPUT_DATA_BUFFER structures should not be held by AddRef after return from this call (ie their reference counts should be the same on exit as on entry).  ProcessOutput() places output starting at the end of the current data in the buffer.  This means that if GetBufferAndLength returns a pointer pv and a length l the output will start l bytes beyond pv. Output buffer status fields are undefined if this call returns a failure code. After calling ProcessOutput() the application should check all output streams for the DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE flag.  It is possible, for instance, when there are multiple output streams, for a stream which did not report DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE previously to report it after a subsequent call to ProcessOutput(). If the pBuffer member of a member of pOutputDataBuffers is NULL then depending on dwFlags: If the DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER flag is set in dwFlags then discard output data if possible.  If the GetOutputStreamInfo() method for this stream returns either or both of the DMO_OUTPUT_STREAMF_DISCARD or the DMO_OUTPUT_STREAMF_OPTIONAL flags then some data must be discarded if there is any data available.  If neither of these flags is returned by GetOutputStreamInfo() for this stream then it is legal to discard no data and behave as if the DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER is not set, but better to discard if possible. If the DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER flag is not set then no data is output for this stream. In both cases the output dwFlags member of the corresponding method of pOutputDataBuffers is updated to correctly reflect whether there is still data to output on this stream by setting the DMO_OUTPUT_DATA_BUFFERF_INCOMPLETE flag appropriately. Parameters dwFlags DMO_PROCESS_OUTPUT_DISCARD_WHEN_NO_BUFFER If the pBuffer member of one of the output buffer structures is NULL discard output data. cOutputBufferCount Count of input buffers - this should be the same as the number of output streams. pOutputDataBuffers Array of output data buffers of size cOutputBufferCount. pdwStatus The Media Object should return 0 here. Return Values Processing was successful Failure code Failure in processing HRESULT GetInputMaxLatency(DWORD dwInputStreamIndex, REFERENCE_TIME *prtMaxLatency) Returns the maximum latency in time between input on the stream and the corresponding output timestamps.  Thus, for example, if input timestamped at time T generates output for time T-Delta then this value is the maximum possible value of Delta for the media types defined.  This value does not take into account input buffer size. Parameters dwInputStreamIndex 0-based input stream index prtMaxLatency Latency Return Values E_NOTIMPL Not implemented.  Assume 0 latency Failure code Failure HRESULT SetInputMaxLatency(DWORD dwInputStreamIndex, REFERENCE_TIME rtMaxLatency) Sets the maximum latency in time between input on the stream and the corresponding output timestamps.  Thus, for example, if input timestamped at time T generates output for time T-Delta then this bounds the maximum possible value of Delta for the media types defined.  This value does not take into account input buffer size. Parameters dwInputStreamIndex 0-based input stream index prtMaxLatency Latency Return Values E_NOTIMPL Not implemented.  Latency cannot be set. E_FAIL Latency cannot be set HRESULT Lock(LONG lLock) Acquire a lock so that multiple operations can be performed while keeping the Media Object serialized. Parameters lLock TRUE   lock FALSE - unlock prtMaxLatency Latency Return Values E_FAIL Cannot lock IMediaObjectInPlace Interface For DMOs which are processing data with one input and one output, where the media types of the input and output are the same, and the processing can be done in place, the IMediaObjectInPlace interface can be used. This is a much simplified version of IMediaObject, requiring only the Process() call.. IMediaObjectInPlace is an optional interface provided for optimization only, all DMOs which support this interface must also support IMediaObject in order to support clients which do not use the optimized interfaces. HRESULT Process(ULONG ulSize, BYTE *pData, DWORD dwFlags) Performs an in-place processing on the ulSize bytes of data pointed to by pData. If dwFlags is set to DMO_INPLACE_NORMAL, then the input buffer is processed, and the DMO fills the buffer with the output data. If the DMO has an effect tail (for example, a reverb will continue to output data after the input data has reached silence), then S_FALSE is returned from the Process() command. The calling application should continue to call Process() until it s input data is exhausted. At that point, if Process() returns S_FALSE the application should call Process() again, but with the input buffer zeroed appropriately for the media type and with dwFlags set to DMO_INPLACE_ZERO. This indicates to the Process() call that the buffer can be filled with tail data, ignoring the input buffer s data. These calls should continue until Process() returns S_TRUE, indicating the DMO has finished processing the data. If the DMO has no tail, then Process() will always return S_TRUE. Parameters ulSize Size of the data buffer pData Buffer to be processed dwFlags Buffer data flags Return Values S_FALSE Process was successful, and there is still data in the effect to be processed. S_TRUE Process was successful, and there is no data remaining to be processed. E_FAIL Unable to process the buffer. dwFlag Value DMO_INPLACE_NORMAL The buffer being passed in is data to be processed by the DMO DMO_INPLACE_ZERO The buffer being passed has its data zeroed. Any effects tail information will be stored in the buffer. HRESULT Clone(IMediaObjectInPlace **ppMediaObject) This method creates a new Media Object with the same state as the current objects and returns a pointer to the newly created object. This allows an application that needs multiple copies of the same object type to create them with minimal overhead. Parameters ppMediaObject Pointer to the newly created object. Return Values E_OUTOFMEMORY Insufficient memory for creating the new object E_INVALIDARG ppMediaObject is invalid or NULL HRESULT GetLatency(REFERENCE_TIME*prtLatency) Returns a REFERENCE_TIME value (1 tick = 100ns) that corresponds to the latency time required for the processing of the input buffer. Note that any changes to the parameters of the media object can affect this time, and it is up to the application to query the latency each time parameters change. Parameters prtLatency Current latency, in REFERENCE_TIME Return Values E_ INVALIDARG prtLatency is an invalid pointer or NULL IMediaBuffer Interface IMediaBuffer is the standard interface for data buffers passed into and out of Media Objects. All data buffers used for DMOs must support this interface. HRESULT SetLength (DWORD cbLength) This method allocates cbLength worth of bytes for use by the buffer. This sets the maximum number of bytes that the buffer can access. This method must be called before the buffer can be used, before this method is called the maximum length of the buffer must be 0. <TODO   Should we provide guidelines on block allocations or force usage of the actual value?> Parameters cbLength New length of buffer Return Values <TODO   Update return values> Success Failure code Some other failure HRESULT GetMaxLength (DWORD * pcbMaxLength) Returns the maximum number of bytes the buffer can hold. This is set by SetLength(). If SetLength() has not been called, this method must return 0. Parameters pcbMaxLength Maximum length which the buffer can have Return Values <TODO   Update return values> Success Failure code Some other failure HRESULT GetBufferAndLength (BYTE **ppBuffer, DWORD *pcbLength) The value returned in *pcbLength is the number of bytes of valid data currently held by the buffer, NOT the allocation size of the buffer.  The allocation size of the buffer can be obtained by calling GetMaxLength().   GetBufferAndLength() must place 0 in *pcbLength if SetLength() has not yet been called. Parameters ppBuffer Pointer to media buffer (not filled if NULL) pcbLength Current data in buffer (not filled if NULL) Return Values <TODO   Update return values> Success Failure code Some other failure IMediaBufferDeferred Interface The IMediaBufferDeferred interface inherits directly from the IMediaBuffer interface, but adds one new method to allow deferred writes to the buffer. To illustrate how this would be used, consider the example of an 8k buffer of audio data that is entirely of value 0, which is common in audio mixing where many inputs may be silenced at various times during the mixdown. Using IMediaBuffer, the DMO would have to write 8k of 0 data into the buffer during the Process() call. If the buffer object supports IMediaBufferDeferred, however, this write can be delayed and possibly avoided.  If the application (or the next DMO to receive the buffer) QI s the buffer for IMediaBufferDeferred, it can use the IsConstant() method to determine if the buffer s content is entirely made up of a single value. If it is, then one call to GetBufferAndLength(NULL, &cbLength) provides the length of the buffer, and the entire contents of the buffer is now known without having to make the 8k write. If IMediaBufferDeferred is not supported by the next DMO or the app, then the call to GetBufferAndLength() with a non-NULL buffer pointer will cause the buffer to do the deferred write and pass on the data in a standard buffer. This allows for optimized data paths for constant buffers, while allowing safe interaction with all non-deferred buffer clients. HRESULT IsConstant (DWORD *pdwValue) The return value of IsConstant() is either S_TRUE if the buffer s content is one constant value, or S_FALSE otherwise. If the buffer is of constant value, then pdwValue will be filled with the value. Note that this value is a DWORD, while not all Media Types use DWORD values. It is up to the caller to know the Media Type of the buffer and hence the actual size of the data. If the constant value cannot be represented in a single DWORD then IsConstant() must return S_FALSE and deferred buffer writes cannot be used. Parameters pdwValue Set to constant value if buffer is constant Return Values S_TRUE All values in buffer are a constant value Failure code Buffer contains non-constant data Registration APIs DMO_PARTIAL_MEDIATYPE GUID type; GUID subtype; Major type for matching corresponding media types GUID_NULL means match any type subtype Subtype for matching corresponding media types GUID_NULL means match any subtype HRESULT DMORegister(LPCWSTR szName, REFCLSID rclsidDMO, REFGUID rguidCategory, DWORD dwFlags, DWORD cInTypes, const DMO_PARTIAL_MEDIATYPE *pInTypes, DWORD cOutTypes, const DMO_PARTIAL_MEDIATYPE *pOutTypes) Register a new object,its category and the media types it supports. Parameters szName Registration name for this DMO. Names longer than 79 characters may be truncated. rclsidDMO Class ID the corresponding COM object for the DMO is registered under. rguidCategory Category of this object dwFlags This must be a combination of the following flag values (or 0). DMO_REGISTERF_IS_KEYED Object use is restricted to by key cInTypes Number of input types to register pInTypes Input types cOutTypes Number of output types to register pOutTypes Output types Return Values HRESULT DMOUnregister(REFCLSID rclsidDMO, REFGUID rguidCategory) Unregister a media object from one or all categories. Parameters rclsidDMO Class ID of the DMO rguidCategory Remove from this category If this is GUID_NULL unregister this object from all categories Return Values HRESULT DMOEnum(REFGUID rguidCategory, DWORD dwFlags, DWORD cInTypes, const DMO_PARTIAL_MEDIA_TYPE *pInTypes, DWORD cOutTypes, const DMO_PARTIAL_MEDIA_TYPE *pOutTypes) Enumerate Media Objects by category and/or by media type.  GUID_NULL means match any GUID. Parameters rclsidDMO Class ID the corresponding COM object for the DMO is registered under. rguidCategory Category of this object dwFlags This must be a combination of the following flag values (or 0). DMO_REGISTERF_INCLUDE_KEYED Include keyed objects cInTypes Number of input types to match pInTypes Input types cOutTypes Number of output types to match pOutTypes Output types Return Values HRESULT DMOGetTypes(REFCLSID rclsidDMO, DWORD cInTypesRequested, DWORD pdwInTypesSupplied, DMO_PARTIAL_MEDIATYPE *pInTypes, DWORD cOutTypesRequested, DWORD *pdwOutTypesSupplied, DMO_PARTIAL_MEDIATYPE *pOutTypes) Retrieve all mediatypes registered for the DMO  This method returns only those types supplied by the DMO to DMORegister; the DMO may expose additional types through GetInputType()/GetOutputType(). Parameters rclsidDMO Class ID of the DMO cInTypesRequested The number of structures pointed to by pInTypes pdwInTypesSupplied The number of structures at pInTypes actually filled in by the function pInTypes Points to an array of cInTypesRequested DMO_PARTIAL_MEDIATYPE structures cOutTypesRequested The number of structures pointed to by pOutTypes pdwOutTypesSupplied The number of structures at pOutTypes actually filled in by the function pOutTypes Points to an array of cOutTypesRequested DMO_PARTIAL_MEDIATYPE structures Return Values Success.  This value is returned even if the object did not register any types (*pdwInTypesSupplied and *pdwOutTypesSupplied are set to 0 in that case). S_FALSE Not enough room to return all registered mediatypes.  Either pInTypes or pOutTypes was filled completely. E_FAIL DMO registration information for this CLSID could not be found  HRESULT DMOGetName (REFCLSID rclsidDMO, WCHAR szName[80]) Retrieve the DMO s registration name.  This is the name that the DMO passed to DMORegister. Parameters rclsidDMO Class ID of the DMO szName Caller-supplied array of 80 Unicode characters.  If the registered name is longer than 79 characters, it is truncated. Return Values Success, a name was returned.  This value is returned even if the name had to be truncated. S_FALSE No name could be found for this DMO (or the name was 0-length).  szName[0] was initialized to   by this function. E_FAIL DMO Registration information for this CLSID could not be found. Media Type Helpers Use these functions to manipulate media types. Media types initialized with MoInitMediaType must be freed with MoFreeMediaType. Media types created with MoCreateMediaType must be freed with MoDeleteMediaType. Media types copied using MoCopyMediaType must be freed using MoFreeMediaType. Media types duplicated using MoDuplicateMediaType must be freed using MoDeleteMediaType. HRESULT MoInitMediaType(DMO_MEDIA_TYPE *pmt, DWORD cbFormat) Initialize a media type with a given size format block.  pmt is assumed uninitialized on input and no attempt is made to free any media type previously in pmt. Parameters Where to initialize the media type cbFormat Size of format block to create Return Values E_OUTOFMEMORY HRESULT MoFreeMediaType(DMO_MEDIA_TYPE *pmt) Free a media type previously initialized by MoInitMediaType. On return the pbFormat field will be 0. Parameters Media type to free Return Values HRESULT MoCopyMediaType(DMO_MEDIA_TYPE *pmtDest, const DMO_MEDIA_TYPE *pmtSource) Copy media types. Parameters pmtDest Destination Media Type pmtSource Source Media Type Return Values E_OUTOFMEMORY Could not allocate memory HRESULT MoCreateMediaType(DMO_MEDIA_TYPE **ppmt, DWORD cbFormat) Create a new media type structure. Parameters Where to allocate the new media type cbFormat Size of format block Return Values E_OUTOFMEMORY HRESULT MoDeleteMediaType(DMO_MEDIA_TYPE *pmt) Delete a media type allocated by MoCreateMediaType or MoDupicateMediaType() or returned by pointer from an API or interface method. Parameters Media type to delete Return Values HRESULT MoDupliateMediaType(DMO_MEDIA_TYPE **ppmtDest, const DMO_MEDIA_TYPE *pmtSrc) Duplicate a media type. Parameters ppmtDest New type pmtSrc Source Return Values E_OUTOFMEMORY Appendices Suggested Future Additions A method to get the object s maximum latency.  Latency here is defined as the  timestamp latency  between an input stream and the corresponding output stream for the same ProcessOutput() call.  That is, it is simply an indication of how much data the object can buffer up, and does not take into account any wall clock processing time required by ProcessOutput(). At the very minimum, objects would support an object-global GetMaxLatency method, which would report the largest latency that exists in the object for any input-output path: HRESULT GetMaxObjectLatency(REFERENCE_TIME *prtLatency) To handle the more general case, it would be helpful to also be able to query the maximum expected latency between any two streams, e. g., HRESULT GetMaxStreamLatency(DWORD dwInputStreamIndex, DWORD dwOutputStreamIndex, REFERENCE_TIME *prtLatency) Would return the maximum expected latency from input stream dwInputStreamIndex to output stream lOutputStreamIndex. Other interfaces IDMOQualityControl The IDMOQualityControl interface is used to instruct a DMO to skip output samples in order to keep up with the media sink (renderer). interface IDMOQualityControl : IUnknown {     HRESULT SetNow(         [in] REFERENCE_TIME rtNow     );     HRESULT SetStatus(         [in] DWORD dwFlags     );     HRESULT GetStatus(         [out] DWORD *pdwFlags     ); The rtNow parameter of the SetNow() method indicates the earliest data the application wishes to retrieve.  The Media Object should strive to deliver data to be displayed at or beyond this time as quickly as possible.  If the Media Object detects that it is getting further and further behind it should try skipping more data to catch up The following pseudocode sketches one possible quality control implementation.  Note that the rtNow value is timestamped in SetNow() in an attempt to keep the value reasonably valid over time. SetNow (rtNow){ Query some wall clock timer, such as QueryPerformanceCounter() Store the value returned by the wall clock timer; Store the rtNow value; ProcessOutput { CurrentWallClockValue = Query the same wall clock timer as in SetNow(); OldWallClockValue = wall clock value stored by SetNow(); rtNow = rtNow value stored by SetNow(); rtTimeStamp = the timestamp of the sample we are about to produce; if (rtTimeStamp <     rtNow + CurrentWallClockValue   OldWallClockValue + ProcessingDelay) Do not produce this output sample Produce this output sample Even if ProcessOutput() decides not to produce the current output sample, it must maintain enough information about the state of the stream to be prepared to produce the next sample .  This means that with some types of data (e.g, MPEG2 video) the DMO may  still need to do some processing even if it is not going to produce the current output sample. SetStatus() / GetStatus() are used to enable/disable the DMO s quality control code.  Only one flag is defined: DMO_QUALITY_STATUS_ENABLED. When a DMO is created, its quality control status should default to disabled. A DMO that supports this interface should always pay attention to SetNow() calls and remember the most recent rtNow value, even when quality control is disabled.  I.e., the DMO must must always be prepared to perform quality control in case quality control is suddenly enabled without a new SetNow() notification.   In other words, SetStatus() should mainly affect the operation of ProcessOutput(), not the operation of SetNow(). IDMOVideoOutputOptimizations This interface, when implemented by a DMO,  is used to negotiate DMO code optimizations that require caller side support.  One such optimization occurs when a video decoder generates an output frame by applying deltas to the previous frame.  Obviously such optimizations can only be made if the caller agrees to play by certain rules (in this case the caller has to be willing to supply an output buffer filled with the previous frame s data).  This interface provides a mechanism to negotiate such features.  DMOs must not assume any such features unless they have been specifically negotiated via this interface. interface IDMOVideoOutputOptimizations { HRESULT QueryOperationModePreferences ( ULONG ulOutputStreamIndex, DWORD *pdwRequestedCapabilities HRESULT SetOperationMode ( ULONG ulOutputStreamIndex, DWORD dwEnabledFeatures HRESULT GetCurrentOperationMode ( ULONG ulOutputStreamIndex, DWORD dwEnabledFeatures HRESULT GetCurrentSampleRequirements ( ULONG ulOutputStreamIndex, DWORD *pdwRequestedFeatures All dwXxx and *pdwXxx parameters are flag masks and use exactly the same set of flags, DMO_VOSF_XXX, where VOSF stands for "Video Output Stream Flags". The only flag currently defined by this specification is DMO_VOSF_NEEDS_PREVIOUS_SAMPLE.  By passing this to SetOperationMode the caller that every output buffer passed to ProcessOutput() for this output stream will contain the data generated by the DMO in the previous ProcessOutput() call (except when the DMO explicitly agreed to wave the requirement this particular sample - see GetCurrentSampleRequirements). All features are nogitiated on a per-stream basis.  Hence every method in this interface has a ulOutputStreamIndex parameter (0-based).  This interface is for output streams only. QueryOperationModePreferences   called to find out which capabilities the DMO is interested in.  The DMO places any capabilities it is interested in in the *pdwRequestedCapabilities bitmask. HRESULT QueryOperationModePreferences ( ULONG ulOutputStreamIndex, DWORD *pdwRequestedCapabilities SetOperationMode - called after QueryOperationModePreferences to notify the DMO which features have been enabled on the caller side.  The DMO should not assume that the features it requested in QueryOperationModePreferences will be honored until they have been confirmed via SetOperationMode. HRESULT SetOperationMode ( ULONG ulOutputStreamIndex, DWORD dwEnabledFeatures SetOperationMode can be called more than once before streaming starts, but only the most recent call counts.  So if an application wants to enable multiple features it must do so in one call. SetOperationMode cannot be called during streaming (but it can be called after flushing). GetCurrentOperationMode - return the set of flags supplied in the latest SetOperationMode call (or 0).  Normally redundant, but useful if multiple things are talking to the same DMO. HRESULT GetCurrentOperationMode ( ULONG ulOutputStreamIndex, DWORD dwEnabledFeatures GetCurrentSampleRequirements.  For some caller-supported features, it makes sense to turn the feature on/off on a per-sample basis.  GetCurrentSampleRequirements allows this. HRESULT GetCurrentSampleRequirements ( ULONG ulOutputStreamIndex, DWORD *pdwRequestedFeatures pdwRequestedFeatues is filled by the DMO and can only contain flags already agreed on by SetOperationMode.  That is, this method cannot be used to dynamically enable features that were not already agreed on at connection time. The results of a GetCurrentSampleRequirements call apply to (and only to) the output sample used in the first ProcessOutput call after GetCurrentSampleRequirements.  Thus if there was no GetCurrentSampleRequirements call between the last ProcessOutput and the current ProcessOutput, the DMO may assume that all of the features indicated by the last SetOperationMode call are being honored for the current ProcessOutput call. An example of using this interface follows.  An application that supports the reuse-same-output-buffer feature would execute something like this. IMediaObject pDMO; . . . // Must set output type before negotiating video optimizations pDMO->SetInputType(0, ...); pDMO->SetOutputType(0,...); // Find out of the DMO is interested in getting the same buffer every time BOOL bWantsPreviousBuffer = FALSE; IDMOVideoOutputOptimizations* pv; HRESULT hr = pDMO->QueryInterface(IID_IDMOVideoOutputOptimizations, (void*)&pv); if (SUCCEEDED(hr) && pv) { DWORD dwFlags; pv->QueryOperationModePreferences(0,&dwFlags); if (dwFlags & DMO_VOSF_NEEDS_PREVIOUS_SAMPLE) { bWantsPreviousBuffer = TRUE; pv->SetOperationMode(0, DMO_VOSF_NEEDS_PREVIOUS_SAMPLE); // processing loop ProcessInput(0,...); // Assume we will proceed as agreed in SetOperationMode BOOL bWantsPreviousBufferForThisPaticularSample = bWantsPreviousBuffer; // This part is optional.  If the caller is perfectly happy honoring the requirement // for this particular ProcessOutput call, it does not need to call // GetCurrentSampleRequirements - the DMO will automatically assume the // requirement is being honored.  The caller needs to call GetCurrentSampleRequirements // only if it is hoping to get out of the requirement for this particular sample // (there is no guarantee that the DMO will agree, however). if (bWantsPreviousBuffer) { // Ask the DMO if it is interested in receiving the previous buffer // for this particular sample DWORD dwFlags; pv->GetCurrentSampleRequierements(0, dwFlags); if (!(dwFlags & DMO_VOSF_NEEDS_PREVIOUS_SAMPLE)) { bWantsPreviousBufferForThisPaticularSample = FALSE; if (bWantsPreviousBufferForThisParticularSample) pDMO->ProcessOutput(0, ... /* same buffer as last time */  ) else { pDMO->ProcessOutput(0, ... /* new buffer OR same buffer as last time */  ) The DMO's code might look something like the following. Constructor { m_bCallerWillGiveUsTheSameBufferEveryTime = FALSE; StartStreaming / Init { m_bInsideGOP = FALSE; HRESULT QueryOperationModePreferences(ULONG ulStream, DWORD *pdwFlags) { *pdwFlags = DMO_VOSF_NEEDS_PREVIOUS_SAMPLE; return NOERROR; HRESULT SetOperationMode(ULONG ulStream, DWORD dwFlags) { if (dwFlags & DMO_VOSF_NEEDS_PREVIOUS_SAMPLE) m_bCallerWillGiveUsTheSameBufferEveryTime = TRUE; return NOERROR; HRESULT GetCurrentSampleRequirements(ULONG ulStream, DWORD* pdwFlags) { *pdwFlags = 0; if (m_bInsideGOP) *pdwFlags |= DMO_VOSF_NEEDS_PREVIOUS_SAMPLE; return NOERROR; HRESULT ProcessOutput() { . . . if (m_bInsideGOP && m_bCallerWillGiveUsTheSameBufferEveryTime) { // assume we have the previous output buffer and do a simple delta else { // assume the output buffer is initially garbage and do a full decode . . . if (/* the frame we just decoded completes the GOP */) m_bInsideGOP = FALSE; m_bInsideGOP = TRUE; in the DMO s class id registry key in HKEY_CLASSES_ROOT\CLSID by adding a DWORD value named Merit to be used as the merit for the DMO wrapped as a DirectShow filter by the wrapper filter.  This is useful for defining the merit of a DMO solution vs other DirectShow filters which may be implementing the same functionality. nkFilter; HRESULT hr = CoCreateInstance(CLSID_DMOWrapperFilter, NULL,                                CLSCTX_INPROC, IID_IBaseFilter,                                (void **)&pUnkFilter); if (SUCCEEDED(hr)) { IDMOWrapperFilter *pWrapper; hr = pUnkFilter->QueryInterface(IID_IDMOWrapperFilter,                                  (void **)&pWrapper); if (SUCCEEDED(hr)) { //  The wrapper filter will create the DMO and //  aggregate it so it can expose the DMOs interfaces //  The wrapper filter records the DMOs category hr = pWrapper->Init(CLSID_MyDMO, CLSID_MyDMOsCategory); pWrapper->Release(); if (SUCCEEDED(hr)) { hr = pGraph->AddFilter(pUnkFilter); pUnkFilter->Release(); The IDMOWrapperFilter interface one method (in addition to the IUnknown methods) : HRESULT Init(REFCLSID clsidDMO, REFCLSID catDMO) Initialize a media type with a given size format block.  pmt is assumed uninitialized on input and no attempt is made to free any media type previously in pmt. Parameters ClsidDMO The CLSID of the DMO CatDMO h Media Object author should generate test data and a method for initializing their object for streaming. A simple test package will then perform a set of stress tests using the test data: Simple start to end Looping Invalid/random data 0 size buffers Check stream/flush/stream generates identical output Minimum size buffers Check error cases, invalid call sequences etc. Monitor releases to ensure that object doesn't hold on to more buffers than it promised. Invalid parameters. INCOMPLETE should not be signalled if the output buffer has the required min space left. Test for more data after INCOMPLETE not set. Check consistency of Can accept data flag (GetInputStatus) and ProcessInput. Check invalid flags are rejected. Issues In-place See previous frame for decoders Dynamic type change rules Dexter requirements DShow filter registration Locking Revision History Modified By Description of Changes 7/29/99 RobinSp Split Process, multiple small changes and clarifications.  Add registration and Mo... calls. 8/3/99 RobinSp Numerous renamings and clarifiations. 10/21/99 SergeS Remove references to CoTaskMemFree, add a   parameter to DMORegister, add DMOGetTypes and DMOGetName. 11/24/99 SergeS Explain the IMediaBuffer length fields, add a note about what ProcessOutput should do with data already in the buffer, add two new interfaces: IDMOQualityControl and IDMOVideoOutputOptimizations. 1/19/2000 BrianMar Added property interfaces, IMediaParams, formatting changes 1/31/2000 BrianMar IMediaObjectInPlace, clean-up 2/2/2000 RobinSp Added a section on timestamp rules.   Added notes to GetInputType and GetOutputType that they may return partial types. 2/10/2000 RobinSp Allow NULL format blocks for GetInputType and GetOutputType 3/15/2000 RobinSp Add optional and discardable streams 3/16/2000 RobinSp ProcessInput() can return S_FALSE 3/17/2000 RobinSp Document IDMOWrapperFilter Document DMO_MEDIA_TYPE (copy DShow docs). Document return code testing. 3/17/2000 RobinSp pbFormat cannot be NULL if there is a format 3/17/2000 BrianMar Update InPlace interfaces 4/2/00 RobinSp Clarify type setting and introduce DMO_SET_TYPEF_CLEAR  Implicit syncpoints (e.g., regularly occurring syncpoints in an audio stream) must be reflected by this flag.  In addition, audio buffers must always begin at a syncpoint.  The DMO is allowed to use its own judgement about what the phrase  next sample  means in this context.  A DMO may notice (based on the most recent rtNow) that not only is the current sample late , but so are the next N samples after it.  In this situation it is perfectly reasonable for the DMO to assume that it will never need to decode those next few samples.   For example, if an MPEG2 decoder detects that the key frame it is about to produce is so late that all of the frames in its GOP are also already late, it is ok for the decoder to discard the key frame because the entire GOP will be omitted anyway.  One implication of this is that if the caller tries to turn the clock back by calling SetNow() with a smaller value than the previous one, the DMO may erroneously skip some frames because it has already discarded information necessary to produce those frames on the assumption that they would all be late anyway (which was a valid assumption given the rtNow value the DMO had access to at the time). DirectX Media Objects Microsoft Confidential Page   PAGE   NUMPAGES  Microsoft Confidential  TIME \@ "M/d/yy h:mm am/pm"  1/31/00 2:46 PM Microsoft Confidential zvszvs
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\tools\dmotest\dshowmediaobj\buildd.log ===
BUILD: Computing Include file dependencies:
BUILD: Examining d:\testtree\multimedia\testsrc\streaming\dshow\dmotest\mediaobj directory tree for files to compile.
BUILD: d:\testtree\multimedia\testsrc\streaming\dshow\dmotest\mediaobj\test\testapp\gtstidx.cpp: d:\testtree\public\sdk\inc\olectl.h: cannot find include file <macocidl.h>
Compiling d:\testtree\multimedia\testsrc\streaming\dshow\dmotest\mediaobj\test\testapp directory ********************
'nmake.exe /c BUILDMSG=Stop. -i NTTEST= UMTEST= NOLINK=1 NOPASS0=1 IA64=1'
cl -nologo -Iia64\ -I. -I..\include -ID:\testtree\public\sdk\inc\atl30 -ID:\testtree\Multimedia\testsrc\INC -ID:\testtree\public\sdk\amovie\inc -Id:\testtree\multimedia\testsrc\streaming\dshow\dmotest\mediaobj\h -Iobjd\ia64 -ID:\testtree\MultiMedia\inc -ID:\testtree\MultiMedia\inc\objd\ia64 -ID:\testtree\public\internal\MultiMedia\inc -ID:\testtree\public\oak\inc -ID:\testtree\public\sdk\inc -ID:\testtree\public\sdk\inc\crt -D_WIN64 -D_IA64_=1 -DIA64=1 -D_GAMBIT_=1 -DNO_HW_DETECT -D_MSC_EXTENSIONS   -DCONDITION_HANDLING=1 -DNT_UP=1  -DNT_INST=0 -DWIN32=100 -D_NT1X_=100 -DWINNT=1 -D_WIN32_WINNT=0x0500 /DWINVER=0x0500 -D_WIN32_IE=0x0400    -D_MERCED_A0_=1 -DDBG=1 -DDEVL=1 -D__BUILDMACHINE__=main(wendyliu) -DFPO=0  -DNDEBUG -D_DLL=1 -D_MT=1 -DUNICODE -D_UNICODE  -DSTRICT -DWINVER=0x0500 -DNT_BUILD -DDIRECTDRAW_VERSION=0x0300 -DDIRECTSOUND_VERSION=0x0700 -DFINAL=1 -DOFFICIAL=1 -DDEBUG     /c /Zel /Zp8 /Gy  /W3 /Wp64 /WX /Gz   /Gi- /GX-  /GR- /GF -Z7 /Oxs /QIA64_fr32 /Oy-   -FID:\testtree\public\sdk\inc\warning.h     .\testobj.cpp .\tests.cpp .\dmoapitst.cpp .\ivstrm.cpp .\tstgsi.cpp .\gtivst.cpp .\error.cpp .\nptst.cpp 
testobj.cpp
d:\testtree\multimedia\testsrc\inc\module98.h(133) : error C2664: 'lstrlenW' : cannot convert parameter 1 from 'char *__ptr64 ' to 'const unsigned short *__ptr64 '
        Types pointed to are unrelated; conversion requires reinterpret_cast, C-style cast or function-style cast
d:\testtree\multimedia\testsrc\inc\module98.h(143) : error C2664: 'lstrcpyW' : cannot convert parameter 1 from 'char *__ptr64 ' to 'unsigned short *__ptr64 '
        Types pointed to are unrelated; conversion requires reinterpret_cast, C-style cast or function-style cast
d:\testtree\multimedia\testsrc\inc\module98.h(183) : error C2664: 'lstrlenW' : cannot convert parameter 1 from 'char *__ptr64 ' to 'const unsigned short *__ptr64 '
        Types pointed to are unrelated; conversion requires reinterpret_cast, C-style cast or function-style cast
d:\testtree\multimedia\testsrc\inc\module98.h(201) : error C2664: 'lstrcpyW' : cannot convert parameter 2 from 'char *__ptr64 ' to 'const unsigned short *__ptr64 '
        Types pointed to are unrelated; conversion requires reinterpret_cast, C-style cast or function-style cast
d:\testtree\multimedia\testsrc\inc\module98.h(214) : error C2664: 'lstrlenW' : cannot convert parameter 1 from 'char *__ptr64 ' to 'const unsigned short *__ptr64 '
        Types pointed to are unrelated; conversion requires reinterpret_cast, C-style cast or function-style cast
d:\testtree\multimedia\testsrc\inc\module98.h(227) : error C2664: 'lstrcpyW' : cannot convert parameter 2 from 'char *__ptr64 ' to 'const unsigned short *__ptr64 '
        Types pointed to are unrelated; conversion requires reinterpret_cast, C-style cast or function-style cast
d:\testtree\multimedia\testsrc\streaming\DShow\dmotest\MediaObj\test\testapp\error.h(20) : error C2664: 'printf' : cannot convert parameter 1 from 'unsigned short [2000]' to 'const char *__ptr64 '
        Types pointed to are unrelated; conversion requires reinterpret_cast, C-style cast or function-style cast
d:\testtree\multimedia\testsrc\streaming\DShow\dmotest\MediaObj\test\testapp\error.h(31) : error C2664: 'printf' : cannot convert parameter 1 from 'unsigned short [2000]' to 'const char *__ptr64 '
        Types pointed to are unrelated; conversion requires reinterpret_cast, C-style cast or function-style cast
d:\testtree\multimedia\testsrc\streaming\DShow\dmotest\MediaObj\test\testapp\testobj.cpp(14) : fatal error C1083: Cannot open include file: 'wmsdkidl.h': No such file or directory
tests.cpp
d:\testtree\multimedia\testsrc\inc\module98.h(133) : error C2664: 'lstrlenW' : cannot convert parameter 1 from 'char *__ptr64 ' to 'const unsigned short *__ptr64 '
        Types pointed to are unrelated; conversion requires reinterpret_cast, C-style cast or func
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\tools\dmotest\dshowmediaobj\doc\billv.ppt ===
[h\UpN *FmAR "8(<L !mh,6D '<6D- uma]/ +n@y. [otfo Code size: gargle DMO vs gargle filter Using a DMO 1.  Instantiating a DMO IMediaObject* pDMO; CoCreateInstance(CLSID_DVDecDMO,                          NULL,                          CLSCTX_INPROC_SERVER,                          IID_IMediaObject,                          (void**) &pDMO)); 2.  Setting media types DMO_MEDIA_TYPE mt; MoInitMediaType(&mtIn, sizeof(WAVEFORMATEX)); mtIn.majortype = MEDIATYPE_Audio; mtIn.subtype = MEDIASUBTYPE_PCM; mtIn.formattype = FORMAT_WaveFormatEx; WAVEFORMATEX* pWaveFmt = (WAVEFORMATEX*) mtIn.pbFormat; pWaveFmt->wFormatTag = WAVE_FORMAT_PCM; pWaveFmt->nChannels = 2; pWaveFmt->nSamplesPerSec = 48000; pWaveFmt->nAvgBytesPerSec = 192000; pWaveFmt->nBlockAlign = 4; pWaveFmt->wBitsPerSamle = 16; pWaveFmt->cbSize = 0; pDMO->SetInputType(0, &mt, 0); pWaveFmt->wFormatTag = WAVE_FORMAT_ADPCM; pWaveFmt->nAvgBytesPerSec = 48000; pWaveFmt->nBlockAlign = 1; pDMO->SetOutputType(0, &mt, 0); 3.  Processing loop BYTE pIn[10000]; GetInput(pIn, 10000); // app specific code CBaseMediaBuffer* pmbIn = new CBaseMediaBuffer(pIn, 10000, 10000); pDMO->ProcessInput(0,pmbIn,DMO_INPUT_DATA_BUFFERF_SYNCPOINT,0,0); pmbIn->Release(); BYTE pOut[2500]; CBaseMediaBuffer* pmbOut = new CBaseMediaBuffer(pOut, 2500, 0); DMO_OUTPUT_DATA_BUFFER OutputStruct; OutputStruct.pBuffer = pbmOut; DWORD dwStatus; pDMO->ProcessOutput(0,1,&OutputStruct,&dwStatus); ConsumeOutput(pOut, 2500); // app specific code } while(1); Click to edit Master title style Click to edit Master text styles Second level Third level Fourth level Fifth level Click to edit Master text styles Second level Third level Fourth level Fifth level Steps for using a simple audio codec: 1.  Call CoCreateInstance to create the DMO 2.  Set input/output media types 3.  Repeatedly call ProcessInput/ProcessOutput 4.  Release the DMO App talks directly to DMO App handles buffer allocation No flow control in simple cases 7Z-$Q !;Z&{ oA[+9 )G\o5: )LIhY' "s"Vq w2Nm} o}(iqw :Ps-V p_%l-1G 2OjmLS vBJ<' G6l(xlUR :/E!3 Using a DMO C:\Program Files\Microsoft Office\Templates\Blank Presentation.pot Microsoft PowerPoint Times New Roman Code size: gargle DMO ' gargle filter Times New Roman Times New Roman Times New Roman 10000 15000 20000 25000 30000 .cpp size (bytes)R dll size (bytes)e filter "System On-screen Show Times New Roman Arial Courier New Blank Presentation.pot Microsoft Graph 97 Chart Code size: gargle DMO vs gargle filter  Using a DMO 1.  Instantiating a DMO 2.  Setting media types  3.  Processing loop Fonts Used Design Template Embedded OLE Servers Slide Titles _PID_GUID
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\tools\dmotest\dshowmediaobj\doc\patdiscl.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Interfaces for passive streaming plugins Title _PID_GUID _PID_HLINKSInterfaces for passive streaming plugins R C B Speed Normal R C B Speed Microsoft Word 8.0Interfaces for passive streaming plugins Prior disclosure Prelim version shown to Sonic Foundry under NDA - Summer 1999. Introduction Inventors (in alphabetical order): Brian Crites - BrianCri Geoff Dunbar - GeoffDu Serge Smirnov - SergeS  Robin Speed - RobinSp This invention consists of interfaces for a piece of software which is used to process streamed multimedia data.  Common types of such software includes software to perform compression and decompression of audio and video data and software to create special effects on that data. The invention describes a single method for invoking such software. Throughout the rest of this document we refer to such software components as Media Objects. Movtivation Software to provide standard functionality for multimedia processing including compression, decompression and effects is generally written to a  set common  of APIs.  Generally the API set for each kind of task is very different, furthermore the API sets currently defined for these tasks have been overtaken by new standards for compression and streaming motivated by the broadcast industry and the requirements of streaming over the Internet. In particular many API sets for calling decompression software to decompress video data  make the assumption that data to decompress a single frame is supplied in a single API call and the decompressed data for that video frame is returned from that call by the decompression software.  Another problem which occurs is that API sets made the assumption that all data s cription of the Invention (please see attach document for a specification of the IMediaObject interface). The invention consists of an interface (API) which defines: A set of input streams and output streams a Media Object supports. A mechanism for defining the type of data the Media Object is to support. A state model which allows the user of the Media Object to determine when the Media Object has buffered data. A mechanism for passing data in to the Media Object.  A mechanism to allow the Media Object to retain data to assist in processing futher data (lookahead) A mechanism for extracting processed data from the Media Object. The way the previous two mechanisms allow all types of processing both in terms of multiple streams in and multiple steams out and for a single stream any number of output buffers (0 up) for any number of input buffers. A means of associating time stamps with data passed into and out of the Media Object. A definition of a stream discontinuity to allow synchronization points and incom This server is backed up by ITG. Also I have an earlier document on my PC dated 5/19/99 which was shown to a number of people internally.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\tools\dmotest\dshowmediaobj\doc\fbrwrap.rtf ===
{\rtf1\ansi\ansicpg1252\deff0\deflang1033\deflangfe1033{\fonttbl{\f0\fswiss\fprq2\fcharset0 Arial;}} \viewkind4\uc1\pard\nowidctlpar\f0\fs28 Base Class for Fixed Bitrate Content, 1-input 1-output DMOs\fs20\par Purpose: many streaming issues, such as discontinuities, timestamps, and incomplete flags, can be handled completely by the base class if the following assumptions are made:\par  - input and output data can each be considered a series of fixed-sized, byte-granular samples;\par  - sample sizes can be derived from mediatypes and never change while streaming;\par  - the size of the timestamp range that a given sample of data spans is the same for every input/output samples;\par  - there is a known upper bound on lookahead/lookbehind.\par With these assumtions, the following interface between the base class and a derived class is possible.  This interface is simpler than both the IMediaObject interface and our existing base class interface.\par Before streaming starts (but after both mediatypes have been set), the base class calls the following method implemented by the derived class:\par \tab HRESULT \b GetStreamingParams\b0 (\par \tab\tab DWORD *\b pdwInputSampleSize\b0 , // in bytes\par \tab\tab DWORD *\b pdwOutputSampleSize\b0 , // in bytes\par \tab\tab DWORD *\b pdwMaxLookahead\b0 , // in input samples, 0 means no lookahead\par \tab\tab DWORD *\b pdwMaxLookbehind\b0 , // in input samples, 0 means no lookbehind\par \tab\tab REFERENCE_TIME *\b prtSampleDuration\b0 , // same for input and output samples\par \tab\tab REFERENCE_TIME *\b prtDurationDenominator\b0  // optional, normally 1\par \tab );\par The purpose of \b prtDurationDenominator\b0  is to allow precise values of sample duration when it is not a whole number of REFERENCE_TIME units (e.g., 10000000 / 44100 should be expressed as 100000 / 441 rather than 227 / 1).  This is to prevent timestamp round-off errors from accumulating over time in the base class.\par After streaming starts, the base class first accumulates at least ((lookahead + lookbehind + 1) times *pdwInputSampleSize) bytes of input data to ensure adequate lookahead/lookbehind.  Only then does the base class start calling Process:\par \tab HRESULT \b FBRProcess\b0 ( // "Fixed Bitrate Process"\par \tab\tab DWORD \b cSamplesToProcess\b0 ,\par \tab\tab BYTE *\b pbInput\b0 , // points to \b cSamplesToProcess\b0  input samples plus lookahead/lookbehind\par \tab\tab BYTE *\b pbOutput\b0  // points to room for \b cSamplesToProcess\b0  output samples\par \tab );\par To ensure that the algorithm has sufficient lookahead/lookbehind, the base class takes a buffer of \b (lookbehind + cSamplesToProcess + lookahead)\b0  input samples and sets the \b pbInput\b0  pointer points to the \b (lookbehind + 1)th \b0 input sample.  This way for any of the cSamplesToProcess samples in the current input range, FBRProcess() is allowed to dereference samples in the input buffer up to lookahead positions ahead of the current sample and up to lookbehind positions back from the current sample, even if the current sample is at the very beginning or at the very end of the input range.  The base class makes there is valid data there.\par For the purposes of computing output timestamps, the base class assumes that the first output sample in the output buffer corresponds in time to the input sample pointed to by pbInput.\par Input buffers overlap by (lookahead + lookbehind) samples.  I.e., if either lookahead or lookbehind is non-zero, FBRProcess() will see some input samples more than once.  Thus FBRProcess itself does not need to remember any past input.\par Output buffers are always adjacent in time and do not overlap from one FBRProcess call to the next.  Thus if FBRProcess needs previous output samples to compute the current one (e.g., an IIR audio filter), it must store them internally.\par Processing efficiency increases with the number of output samples produced during each Process call, especially for objects that use lookahead or lookbehind.  Therefore the base class will attempt to invoke FBRProcess on as many output samples at a time as practical.\par \b Mediatype negotiation\b0  with this base class happens in much the same way as with the IMediaObject interface, except the function prototypes are slightly simpler due to the 1-input/1-output restriction, and the GetXXXType (code layering) methods are handled by the base class.\par Methods implemented by the derived class and called by the base class:\par \tab // enumeration\par \tab HRESULT GetInputType(DWORD dwTypeIndex, DMO_MEDIA_TYPE *pmt);\par \tab HRESULT GetOutputType(DWORD dwTypeIndex, DMO_MEDIA_TYPE *pmt);\par \tab // verification\par \tab HRESULT CheckInputType(const DMO_MEDIA_TYPE *pmt);\par \tab HRESULT CheckOutputType(const DMO_MEDIA_TYPE *pmt);\par Methods implemented by the base class and called by the derived class:\par \tab DMO_MEDIA_TYPE *InputType();\par \tab DMO_MEDIA_TYPE *OutputType();\par When a type is set, the base class stores the type on behalf of the DMO.  The derived class accesses the currently set types by calling InputType() and OutputType().  Each returns NULL if the type has not been set.  GetInputType() may be called from CheckOutputType() and vice versa if the object has input/output type dependencies.\par \b Other streaming methods\b0 : the base class provides the following overridables:\par     virtual HRESULT Init() = 0;\par     virtual HRESULT Discontinuity() = 0;\par \b Init()\b0  is intended as a hook to allow the derived class to initialize itself prior to streaming.  Init() is guaranteed to be called at least once before streaming starts.  However, \i Init() may be called more than once\i0 , so the derived class should check if it has already been initialized before performing any resource allocation.\par There is no corresponding Uninit method.  The derived class should perform clean up / free resources inside its destructor.\par \b Discontinuity()\b0  is called whenever the next buffer of input data is logically unrelated to the previous one.  This can happen due to a source change, dropped data, etc.  The derived class should reset any running streaming parameters inside this method.  Discontinuity() is guaranteed to be called at least once before streaming starts.\par
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\tools\dmotest\dshowmediaobj\doc\steps.rtf ===
{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;} {\f16\froman\fcharset238\fprq2 Times New Roman CE;}{\f17\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f19\froman\fcharset161\fprq2 Times New Roman Greek;}{\f20\froman\fcharset162\fprq2 Times New Roman Tur;} {\f21\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f22\fswiss\fcharset238\fprq2 Arial CE;}{\f23\fswiss\fcharset204\fprq2 Arial Cyr;}{\f25\fswiss\fcharset161\fprq2 Arial Greek;}{\f26\fswiss\fcharset162\fprq2 Arial Tur;} {\f27\fswiss\fcharset186\fprq2 Arial Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128; \red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}{\*\cs10 \additive  Default Paragraph Font;}{\s15\qc\nowidctlpar\adjustright \b\f1\fs48 \sbasedon0 \snext15 Body Text;}}{\info{\author serges}{\operator serges}{\creatim\yr1999\mo7\dy6\hr11\min16}{\revtim\yr1999\mo7\dy6\hr11\min19}{\version3}{\edmins2}{\nofpages1} {\nofwords35}{\nofchars203}{\*\company  }{\nofcharsws249}{\vern113}}\widowctrl\ftnbj\aenddoc\hyphcaps0\viewkind4\viewscale100 \fet0\sectd \linex0\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2 \pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6 \pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang {\pntxtb (}{\pntxta )}}\pard\plain \qc\nowidctlpar\adjustright \fs20\cgrid {\b\f1\fs48\cgrid0  \par }\pard\plain \s15\qc\nowidctlpar\adjustright \b\f1\fs48  \par Using a DirectShow Media Object from an application \par  \par \pard \s15\qc\nowidctlpar\adjustright  \par \pard\plain \nowidctlpar\adjustright \fs20\cgrid {\f1\fs48\cgrid0  \par 1. CoCreateInstance to create the object \par  \par 2. InputSetType(AM_MEDIA_TYPE) \par  \par 3. OutputSetType(AM_MEDIA_TYPE)  \par  \par 4. InputSizeInfo() - get buffer size \par  \par 5. OutputSizeInfo() \par  \par 6. Process (in a loop) \par }}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\tools\dmotest\dshowmediaobj\test\testapp\readme.txt ===
Instructions for the DMOTest.EXE

How to build the DMO TestApp (DMOTest.EXE) and DMO Data Dump Filter (DMODump.DLL)
1. Open a Razzle Window and type the following commands.
2. Mkdir MediaObj
3. cd MediaObj
4. enlist -s \\CPITGCFS19\CWDMedia\SLM -p MediaObj
5. ssync -r
6. cd test
7. set NTDEBUG=ntsdnodbg
8. Build -cCZ

How to create a test file for the DMO Test App
1. Build the DMO TestApp.  For more information, see "How to build the DMO TestApp (DMOTest.EXE) and DMO Data Dump Filter (DMODump.DLL)".
2. Register the DMO Data Dump filter using RegSvr32.EXE (usually DMODump.DLL is in MediaObj\Test\Filter\Obj\i386).  
3. Open Graph Edit.
4. Add the DMO Data Dump filter to the filter graph.  Graph Edit will prompt you for a file name.  This is the name of the test file which will be generated.
5. Add a source filter to the filter graph.
6. Add as many filters as you need to transform the source filter's data format into the format you want to store in the test file.  For example, Bouncing Ball filter's output format is RGB8 and you want RGB4 data in the test file.  You convert the Bouncing Ball output data into RGB4 by inserting a filter which converts the source data into a format you want.  Here is an example filter graph.
Bouncing Ball  ---> VGA 16 Color Ditherer ---> DMO Data Dump 

7. Connect the filters.  Make sure the DMO Data Dump is receiving data in the proper format (the format you want in the test file).
7. Press run.
8. Press stop when you have enough data.  You can also wait until the source filter runs out of data to process.
9. Close Graph Edit.

How to run the DMO Test App
1. Build the DMO TestApp.  For more information, see "How to build the DMO TestApp (DMOTest.EXE) and DMO Data Dump Filter (DMODump.DLL)".
2. Create a test file.  For more information, see "How to create a test file for the DMO Test App ".
3. Open a Razzle Window and type the following commands.
4. Go to the directory where build placed the compiled DMOTEST (usually this is MediaObj\Test\TestApp\Obj\i386).
5. Type DMOTEST CLSID TESTFILE where TESTFILE is the name of your test file and CLSID is a DMO's CLSID.  This will fail if
	1. The DMO is not registered.
	2. TESTFILE is not in the same directory as DMOTEST.
	3. The DMO's CLSID is not in registry format.  A CLSID's in registry format if it looks like this {XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX} where each X is a hexadecimal digit.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\tools\dmotest\dshowmediaobj\test\testapp\testnote.txt ===
DMO test issues - GetOutputType() and SetOutputType()

First issue:

Problem:
HRESULT GetOutputType(	DWORD dwOutputStreamIndex, 
			DWORD dwTypeIndex, 
			DMO_MEDIA_TYPE *pmt)
Get the dwTypeIndex type for the outputStream dwOutputStreamIndex. According to the DMO spec,
the media type returned in pmt may be a partial type indicating a range of preferred types.
Does this mean that some fields in the media type structure may be left blank after calling 
GetOutputType?

Currently, the DMO streaming test regarding SetOutputType() is implemented this way:
-----------------------------------------------------------------------
    do {
        hrGet = GetOutputType( 0, dwOutputTypeIndex, &mt );
        if( FAILED( hrGet ) && (DMO_E_NO_MORE_ITEMS != hrGet) ) {
            return hrGet;
        }

        if( DMO_E_NO_MORE_ITEMS != hrGet ) {
            hrSet = SetOutputType( 0, &mt, 0 );

            MoFreeMediaType(&mt);

            dwOutputTypeIndex++;
        }
    } while( (hrGet != DMO_E_NO_MORE_ITEMS) && FAILED( hrSet ) );
------------------------------------------------------------------------
The input media type to the SetOutputType() is the output media type from
GetOutputType(). If some fileds such as format type and format block is not
filled by GetOutputType(), SetoutputType() will fail. Please see DMO bug 150653,
150643 in Millennium db. 

Question:
Therefore, the DMO test app need to fill the media type structure fields before calling
SetOutputType(). The question is which fields has been filed by getOUtputType(), which fields
need to be filled by the test app. Do we need to allow the test tool to get output media type 
from the user. If so, we need to provide options for the user to choose, since the media type 
involves lots of low level details.

Second issue:
I read from the online DMO doc( http://mikewasson/dshow/dmo/oview/dmo_using.htm) that:
"...For a decoder, you would generally set the input type and then choose an output type. 
For an encoder, you would set the output type and then choose an input type...". Please
give more explanations. currently in DMO test code, encoder and decoder are tested the same
way (see above code snippet). 

Please educate me on the above issues.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\tools\dsperf\dsperf.ini ===
[info]
drivername=dsperf
symbolfile=dscounters.h

[languages]
009=English

[text]
DSHOWPERF_OBJ_009_NAME=Multimedia
DSHOWPERF_OBJ_009_HELP=Displays multimedia performance statistics.

DSHOWPERF_VIDEO_GLITCHES_009_NAME=Video glitches
DSHOWPERF_VIDEO_GLITCHES_009_HELP=Displays the cumulative number of video renderer glitches.

DSHOWPERF_VIDEO_GLITCHES_SEC_009_NAME=Video glitches/s
DSHOWPERF_VIDEO_GLITCHES_SEC_009_HELP=Displays the video renderer glitch rate.

DSHOWPERF_FRAME_RATE_009_NAME=Video frame rate
DSHOWPERF_FRAME_RATE_009_HELP=Displays the video frame rate in frames per second.

DSHOWPERF_JITTER_009_NAME=Video jitter
DSHOWPERF_JITTER_009_HELP=Displays the video jitter.

DSHOWPERF_DSOUND_GLITCHES_009_NAME=DirectSound glitches
DSHOWPERF_DSOUND_GLITCHES_009_HELP=Displays the cumulative number of DirectSound source starvation glitches.

DSHOWPERF_KMIXER_GLITCHES_009_NAME=KMixer glitches
DSHOWPERF_KMIXER_GLITCHES_009_HELP=Displays the cumulative number of KMixer source starvation glitches (WaveOut, RedBook, SwMidi sources).

DSHOWPERF_PORTCLS_GLITCHES_009_NAME=PortCls glitches
DSHOWPERF_PORTCLS_GLITCHES_009_HELP=Displays the cumulative number of PortCls source starvation glitches (i.e. KMixer starving PortCls of audio data).

DSHOWPERF_USBAUDIO_GLITCHES_009_NAME=UsbAudio glitches
DSHOWPERF_USBAUDIO_GLITCHES_009_HELP=Displays the cumulative number of UsbAudio source starvation glitches (i.e. KMixer starving UsbAudio of audio data).

=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\tools\dsperf\instrumentation documentation.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Microsoft Corp. A/V GLITCH INSTRUMENTATION TitleA/V GLITCH INSTRUMENTATION Arthur Zwiegincew Normal.dot Arthur Zwiegincew Microsoft Word 9.0H{6xA"bjbjU A/V GLITCH INSTRUMENTATION The following components are instrumented: Quartz.dll (VMR) Dsound.dll Kmixer.sys Usbaudio.sys Portcls.sys Instrumentation is done via WMI Event Tracing. It has both user-mode and kernel-mode interfaces. For user-mode, refer to multimedia\published\dxmdev\dshowdev\base\*perf*. Perflog.cpp exports a simple interface that VMR and Dsound use. For kernel-mode, refer to perf.c (or perf.cpp) in kmixer, usbaudio, and portcls sources. Grep for calls implemented in perf.c[pp] in the rest of the sources to see how instrumentation is implemented. For WMI Event Tracing information, contact Jee Fung Pang. There are two instrumentation clients (at the time of writing): DSTrace (multimedia\dshow\tools\dstrace). It s a simple console app that outputs glitch information (you can ignore the  type n  portion of the output dstrace parses that and prints the component name at the beginning of each line). Each line is terminated by a time reference, which is the result of GetTickCount(). It s useful as a template for writing other clients. It s not possible to see how long each glitch was, but some compenents (especially dsound) will tend to report longer glitches as more than one glitch. That s why it s important to look at timestamps on glitch events. DSPerf (multimedia\dshow\tools\dsperf). It exports glitch information as perf counters. It can also be used as a demo for getting the video frame rate and jitter (dstrace doesn t output that). To use the perf counters: Build dsperf.dll. Copy it to system32. From the source directory, install the .reg file, and execute lodctr dsperf.ini. Counters should be available under the DShow object. If counters aren t displayed in perfmon, try coping dsperf.dll to %windir%. Recent Whistler builds have been somewhat flaky, and this helped. If counters are displayed, but aren t working, make sure that dstrace works (the easiest way to check is to play video; dstrace will output a   for every frame rendered). It probably won t work, which means you re probably using a video renderer other than VMR. To fully instrument USB audio, you ll need an Intel hardware board that acts as a USB audio device, but also exports perf data to another computer via a serial cable. UsbGlitch (multimedia\dshow\tools\usbglitch) will export this serial information through WMI Event Tracing. If you have questions, contact ArthurZ.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\tools\graphedt\graphedt.doc ===
Microsoft Word 6.0 Document MSWordDoc Word.Document.6C:\WINWORD\TEMPLATE\Normal.dot John McAleely John McAleely Microsoft Word 6.0BoxNet Filter Graph Editor a.k.a. GraphEdt.exe What is GraphEdt? GraphEdt.exe is an editor for quartz filter graphs. It is intended to use the filter graph & mapper interfaces to provide a way of viewing and editing the graph created to perform multimedia tasks with quartz. These graphs will be serializable using an interface provided by the filtergraph. GraphEdt is not intended to be an end-user tool, but is instead a utility for developers to execute their filters and to prepare  canned  graphs for distribution. GraphEdt Supports: From IFilterGraph Add/Remove Filter Connect Disconnect Render RenderFile And adds: Disconnect All Render All From IMediaControl Play/Pause/Stop (forces legal state changes) Notification EC_COMPLETE Other Serializing Graphs using the FilterGraph Selection and display of the graph s clock Dump of performance log to file UI Principles It is an SDI app RenderFile via drag & drop & file:open Infinite scroll bars The display layout is not serialized. Boxes can be moved Box/link selection Modeless property sheets Media Type ( = New feature, not in BoxNet. Unresolved issues: Pass existing IFilterGraph as Graphedt launches? Install as  Graph Edit Support AddSourceFilter? Support Reconnect? Wish List undo/redo COM like display of filters (as a pref.) iconic filter display Preferences dialog Video renderer displays in filter box area Display layout serialization Author: John McAleely (t-jmcal) Location: \\sysuk1\quartz\tools\graphedt\graphedt.doc Binary location - SDK\bin; Quartz\bin Source location. Currently \quartz\tools\graphedt Normal Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Default Paragraph Font Body Text John McAleely-C:\quartz\sdk\samples\boxnet\Boxnet Specs.rtf John McAleely%C:\quartz\tools\graphedt\graphedt.doc John McAleely%C:\quartz\tools\GraphEdt\graphedt.doc John McAleely%C:\quartz\tools\GraphEdt\graphedt.doc @\\WESSEX\pscript1 Ne00: winspool HP LaserJet 4Si/4Si MX PS \\WESSEX\pscript1 PRIV`  N N N \\WESSEX\pscript1 PRIV`  N N N Times New Roman Symbol Arial ZapfDingbats John McAleely John McAleely
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\tools\graphedt\boxnet.doc ===
Microsoft Word 6.0 Document MSWordDoc Word.Document.6C:\WW6\TEMPLATE\NORMAL.DOT BoxNet Design Eric Ledoux Eric Ledoux Microsoft Word 6.0Microsoft Word 6.0 Picture MSWordDoc Word.Picture.6Microsoft Word Times New Roman Times New Roman Foo #1 Symbol  Foo #2: B  Foo #2: A Foo #2  Foo #1: B  Foo #1: AC:\WW6\TEMPLATE\NORMAL.DOT Eric Ledoux Eric Ledoux Microsoft Word 6.0Foo #1 A ( Foo #2: B B ( Foo #2: A Foo #2 A ( Foo #1: B B ( Foo #1: A Normal Default Paragraph Font @HP LaserJet IIISi PostScript LPT2: pscript HP LaserJet IIISi PostScript \foo.eps HP LaserJet IIISi PostScript \foo.eps Times New Roman Symbol Arial Eric Ledoux Eric LedouxMicrosoft Word 6.0 Picture MSWordDoc Word.Picture.6Microsoft Word Times New Roman Times New Roman Symbol  Foo: B  Blorg: R Blorg  Foo: C  Bar: B  Blorg: S  Bar: A  Blorg: QC:\WW6\TEMPLATE\NORMAL.DOT Eric Ledoux Eric Ledoux Microsoft Word 6.0A ( Foo: B B ( Blorg: R Blorg Q ( Foo: C R ( Bar: B A ( Blorg: S B ( Bar: A C ( Blorg: Q Normal Default Paragraph Font @HP LaserJet IIISi PostScript LPT2: pscript HP LaserJet IIISi PostScript \foo.eps HP LaserJet IIISi PostScript \foo.eps Times New Roman Symbol Arial Eric Ledoux Eric LedouxMicrosoft Word 6.0 Picture MSWordDoc Word.Picture.6Microsoft Word Times New Roman IDataObject Times New Roman due to call to IDataObject:: DAdvise due to call to IDataObject:: EnumFormatEtc copy-selection, drag/drop, etc. Standard OLE Advise Holder Standard IGOR FORMATETC Enumerator BoxNetGraphView or BoxNetListView (view object) BoxNet (data object) = selection snapshot (on clipboard/etc.) IEnumFormatEtc IOleAdviseHolder creates callsC:\WW6\TEMPLATE\NORMAL.DOT Eric Ledoux Eric Ledoux Microsoft Word 6.0IDataObject due to call to IDataObject:: DAdvise due to call to IDataObject:: EnumFormatEtc copy-selection, drag/drop, etc. Standard OLE Advise Holder Standard IGOR FORMATETC Enumerator BoxNetGraphView or BoxNetListView (view object) BoxNet (data object) = selection snapshot (on clipboard/etc.) IEnumFormatEtc IOleAdviseHolder creates calls Normal Default Paragraph Font @HP LaserJet IIISi PostScript LPT2: pscript HP LaserJet IIISi PostScript \foo.eps HP LaserJet IIISi PostScript \foo.eps Times New Roman Symbol Arial Eric Ledoux Eric LedouxMicrosoft Word 6.0 Picture MSWordDoc Word.Picture.6Microsoft Word Times New Roman command box site creates calls IPersistStorage, ICommandList  Times New Roman (passed down from edit context) IStorage, IBoxSite, IEditViewSite ICommand BoxNet (data object) Times New Roman BoxNetC:\WW6\TEMPLATE\NORMAL.DOT Eric Ledoux Eric Ledoux Microsoft Word 6.0BoxNet creates calls ICommandList (passed down from edit context) IPersistStorage, IBox IStorage, IBoxSite, IEditViewSite BoxNet (data object) command ICommand box site ~~~~~~~~~~~}~~~~~~}}}~}~}~~~~ }~}}}~}~}~}}}}}~}}}|}}}~}~}}}}}~}}}|}}}~~}}}~}~~~}~}~}~~~}~}~}~~~}~}~}~}~}~|~|~}~}~|~}~}~}~}~}~~~}~|~}~}~}~}~}~}~}~|~}~}~}~|~|~}~|~|}|}}}|}{}{}|}|}{}{}|}{}{}|}|}|}|}|}}}|}{}|}}}|}{}{}|}|}{}|}|}|}{}|}|}|}{~|~}~|~|~|~}~}~|~}~}~}~|~} }~|~|~|~|~{~|~}~|~|~|~}~|~|~|~}~}~|~}~}~}~|~|~}~}~|~|}}}|}|}|~}~|~|~|~}~}~|~}~}~|~|~|~}}}}|}}~~~}~|~}~}~}}|}}}}}}} Normal Default Paragraph Font @HP LaserJet IIISi PostScript LPT2: pscript HP LaserJet IIISi PostScript \foo.eps HP LaserJet IIISi PostScript \foo.eps Times New Roman Symbol Arial Eric Ledoux Eric LedouxMicrosoft Word 6.0 Picture MSWordDoc Word.Picture.6Microsoft Word Times New Roman command IGOR global command list (undo/redo) BoxNetGraphView or BoxNetListView (view object) BoxNet (data object) IGOR edit context (view site) IGOR edit context (data site) creates calls IDispatch, IPersistStorage, IDataObject, IEditDataObject ICommandList IStorage, IEditDataSite Times New Roman editing context BoxNet being edited ICommand IDispatch, IViewObject, IEditViewObject, IKeyboard, IMouse Times New Roman IEditViewSiteC:\WW6\TEMPLATE\NORMAL.DOT Eric Ledoux Eric Ledoux Microsoft Word 6.0creates calls editing context BoxNet being edited IDispatch, IPersistStorage, IDataObject, IEditDataObject IEditViewSite BoxNetGraphView or BoxNetListView (view object) IGOR global command list (undo/redo) IDispatch, IViewObject, IEditViewObject, IKeyboard, IMouse IStorage, IEditDataSite BoxNet (data object) ICommand command ICommandList IGOR edit context (view site) IGOR edit context (data site) cT!], Normal Default Paragraph Font @HP LaserJet IIISi PostScript LPT2: pscript HP LaserJet IIISi PostScript \foo.eps HP LaserJet IIISi PostScript \foo.eps Times New Roman Symbol Arial Eric Ledoux Eric LedouxMicrosoft Word 6.0 Picture MSWordDoc Word.Picture.6Microsoft Word Times New Roman 1Courier New Dim box As Box Dim socket As BoxSocket For Each box In BoxNet.Boxes Debug.Print "Box "; box.Label; " contains these sockets: " For Each socket In box.Sockets Debug.Print socket.Label Next socket Next box InboxC:\WW6\TEMPLATE\NORMAL.DOT Eric Ledoux Eric Ledoux Microsoft Word 6.0Dim box As Box Dim socket As BoxSocket For Each box In BoxNet.Boxes Debug.Print "Box "; box.Label; " contains these sockets: " For Each socket In box.Sockets Debug.Print socket.Label Next socket Next box Microsoft Word Times New Roman Normal Default Paragraph Font @HP LaserJet IIISi PostScript LPT2: pscript HP LaserJet IIISi PostScript \foo.eps HP LaserJet IIISi PostScript \foo.eps Times New Roman Symbol Arial Courier New Eric Ledoux Eric LedouxMicrosoft Word 6.0 Picture MSWordDoc Word.Picture.6Microsoft Word Times New Roman Times New Roman BlorgC:\WW6\TEMPLATE\NORMAL.DOT Eric Ledoux Eric Ledoux Microsoft Word 6.0Blorg Normal Default Paragraph Font @HP LaserJet IIISi PostScript LPT2: pscript HP LaserJet IIISi PostScript \foo.eps HP LaserJet IIISi PostScript \foo.eps Times New Roman Symbol Arial Eric Ledoux Eric LedouxMicrosoft Word 6.0 Picture MSWordDoc Word.Picture.6Microsoft Word Times New Roman 1Courier New Foo #1 (SimpleBox) ...A > Foo #2: B ...B < Foo #2: A Foo #2 (SimpleBox) ...A > Foo #1: B ...B < Foo #1: AC:\WW6\TEMPLATE\NORMAL.DOT Eric Ledoux Eric Ledoux Microsoft Word 6.0Foo #1 (SimpleBox) ...A > Foo #2: B ...B < Foo #2: A Foo #2 (SimpleBox) ...A > Foo #1: B ...B < Foo #1: A Normal Default Paragraph Font @HP LaserJet IIISi PostScript LPT2: pscript HP LaserJet IIISi PostScript \foo.eps HP LaserJet IIISi PostScript \foo.eps Times New Roman Symbol Arial Courier New Eric Ledoux Eric LedouxMicrosoft Word 6.0 Picture MSWordDoc Word.Picture.6Microsoft Word Times New Roman 1Courier New Bar (SimpleBox) ...A < Foo: B ...B > Blorg: R Blorg (SimpleBox) ...Q < Foo: C ...R < Bar: B Foo (SimpleBox) ...A < Blorg: S ...B > Bar: A ...C > Blorg: QC:\WW6\TEMPLATE\NORMAL.DOT Eric Ledoux Eric Ledoux Microsoft Word 6.0Bar (SimpleBox) ...A < Foo: B ...B > Blorg: R Blorg (SimpleBox) ...Q < Foo: C ...R < Bar: B Foo (SimpleBox) ...A < Blorg: S ...B > Bar: A ...C > Blorg: Q Normal Default Paragraph Font @HP LaserJet IIISi PostScript LPT2: pscript HP LaserJet IIISi PostScript \foo.eps HP LaserJet IIISi PostScript \foo.eps Times New Roman Symbol Arial Courier New Eric Ledoux Eric LedouxMicrosoft Word 6.0 Picture MSWordDoc Word.Picture.6Microsoft Word Times New Roman Symbol box-net-def box-def box-def box-info socket-info box-info box-name 1Courier New box-class socket-info socket-name link-info link-info link-direction box-name socket-name link-direction box-name string box-class string socket-name stringC:\WW6\TEMPLATE\NORMAL.DOT Eric Ledoux Eric Ledoux Microsoft Word 6.0(box-net-def( ( (box-def( ( (box-def( ( (box-info( (socket-info( ( (box-info( ( (box-name(   (box-class(  (socket-info( (   (socket-name( [(link-info(]  (link-info( ( (link-direction( (box-name(   (socket-name( (link-direction( (  (box-name( ( (string( (box-class( ( (string( (socket-name( ( (string( EDXMV/ <zsn* aFEwku0 =;:N- 1x\{: Normal Default Paragraph Font @HP LaserJet IIISi PostScript LPT2: pscript HP LaserJet IIISi PostScript \foo.eps HP LaserJet IIISi PostScript \foo.eps Times New Roman Symbol Arial Courier New Eric Ledoux Eric LedouxMicrosoft Word 6.0 Picture MSWordDoc Word.Picture.6Microsoft Word Times New Roman BoxSocket Times New Roman custom BoxNet SimpleBoxNet BoxSocketPos Times New Roman HeadSocket, TailSocket Boxes BoxLink BoxNet BoxLinks custom Box SimpleBox Property Object Returned by Property Object Type Subclass Subclass Abstract Class property name defaults to name of returned object class bold arrow means object at tail contains object at head; dashed arrow means object at head is a pseudo- object, created on demand dashed box represents a single object belonging to one subclass BoxSocketsC:\WW6\TEMPLATE\NORMAL.DOT Eric Ledoux Eric Ledoux Microsoft Word 6.0Subclass Subclass Abstract Class dashed box represents a single object belonging to one subclass bold arrow means object at tail contains object at head; dashed arrow means object at head is a pseudo-object, created on demand Property Object Returned by Property Object Type property name defaults to name of returned object class BoxSocket custom BoxNet SimpleBoxNet HeadSocket, TailSocket Boxes BoxLink BoxNet BoxLinks custom Box SimpleBox BoxSockets BoxSocketPos Normal Default Paragraph Font Caption @HP LaserJet IIISi PostScript LPT2: pscript HP LaserJet IIISi PostScript \foo.eps HP LaserJet IIISi PostScript \foo.eps Times New Roman Symbol Arial Eric Ledoux Eric LedouxTo do: search for  add introductions to all sections fill in all tables (e.g. interfaces, methods, etc.) all IGOR interfaces accounted for? update to   IGOR interfaces and standard commands, when they become available drag & drop support make styles for tables (e.g. standard widths?) BoxDraw functionality; caller-specifiable bitmaps? (or override via aggregation?) compare with CAT SDE design documents -- what s missing from this doc? go through all of boxnet source code, check for design doc completeness Parent  property and  _NewEnum()  and  Item()  methods to appropriate objects how are ICommandList, IEditViewSite, etc. passed down to lower-level objects? whatever happened to IBoxSite? shouldn t SimpleBoxNet support IBoxSite? all methods should have object parameters & return types (not Class * pointers) t boxes need names (in addition to labels) for VBA, like e.g.  Text1 ?  (how in IDispatch?) define event sets move-socket: move to IBox; need to advise BoxNet that socket moved BoxNet Design Eric Ledoux -- 2/24/94 (Printed   DATE  \l  2/24/94  TIME  10:36 AM Revision marks reflect major revisions since 2/9/94 version.  TOC \o "1-2"  1. Introduction  GOTOBUTTON _Toc286720369    PAGEREF _Toc286720369  1.1 Purpose Of This Document  GOTOBUTTON _Toc286720370    PAGEREF _Toc286720370  1.2 Abstract Concept  GOTOBUTTON _Toc286720371    PAGEREF _Toc286720371  1.3 Object Map  GOTOBUTTON _Toc286720372    PAGEREF _Toc286720372  1.4 BoxNet Architecture  GOTOBUTTON _Toc286720373    PAGEREF _Toc286720373  1.5 BoxNet-IGOR Communication  GOTOBUTTON _Toc286720374    PAGEREF _Toc286720374  1.6 BoxNet-Box Communication  GOTOBUTTON _Toc286720375    PAGEREF _Toc286720375  2. BoxNet Abstract Class  GOTOBUTTON _Toc286720376    PAGEREF _Toc286720376  2.1 State Information (BoxNet)  GOTOBUTTON _Toc286720377    PAGEREF _Toc286720377  2.2 Implemented Interfaces (BoxNet)  GOTOBUTTON _Toc286720378    PAGEREF _Toc286720378  2.3 IBoxNet Interface  GOTOBUTTON _Toc286720379    PAGEREF _Toc286720379  2.4 Commands (BoxNet)  GOTOBUTTON _Toc286720380    PAGEREF _Toc286720380  2.5 View Advise Messages (BoxNet)  GOTOBUTTON _Toc286720381    PAGEREF _Toc286720381  3. SimpleBoxNet Data Object  GOTOBUTTON _Toc286720382    PAGEREF _Toc286720382  3.1 State Information (SimpleBoxNet)  GOTOBUTTON _Toc286720383    PAGEREF _Toc286720383  3.2 Implemented Interfaces (SimpleBoxNet)  GOTOBUTTON _Toc286720384    PAGEREF _Toc286720384  3.3 ISimpleBoxNet Interface  GOTOBUTTON _Toc286720385    PAGEREF _Toc286720385  3.4 Clipboard Formats (SimpleBoxNet)  GOTOBUTTON _Toc286720386    PAGEREF _Toc286720386  3.5 Native Clipboard Format (SimpleBoxNet)  GOTOBUTTON _Toc286720387    PAGEREF _Toc286720387  3.6 Text Clipboard Format (SimpleBoxNet)  GOTOBUTTON _Toc286720388    PAGEREF _Toc286720388  4. BoxNetView Abstract Class  GOTOBUTTON _Toc286720389    PAGEREF _Toc286720389  5. BoxNetGraphView Object  GOTOBUTTON _Toc286720390    PAGEREF _Toc286720390  5.1 Graph View Visual Appearance  GOTOBUTTON _Toc286720391    PAGEREF _Toc286720391  5.2 State Information (BoxNetGraphView)  GOTOBUTTON _Toc286720392    PAGEREF _Toc286720392  5.3 Implemented Interfaces (BoxNetGraphView)  GOTOBUTTON _Toc286720393    PAGEREF _Toc286720393  5.4 IBoxNetGraphView Interface  GOTOBUTTON _Toc286720394    PAGEREF _Toc286720394  5.5 Persistent Modes (BoxNetGraphView)  GOTOBUTTON _Toc286720395    PAGEREF _Toc286720395  5.6 Transient Mouse-Initiated Modes (BoxNetGraphView)  GOTOBUTTON _Toc286720396    PAGEREF _Toc286720396  5.7 Transient  Utility Modes  (BoxNetGraphView)  GOTOBUTTON _Toc286720397    PAGEREF _Toc286720397  5.8 Commands (BoxNetGraphView)  GOTOBUTTON _Toc286720398    PAGEREF _Toc286720398  5.9 Tools (BoxNetGraphView)  GOTOBUTTON _Toc286720399    PAGEREF _Toc286720399  5.10 Clipboard Formats (BoxNetGraphView)  GOTOBUTTON _Toc286720400    PAGEREF _Toc286720400  6. BoxNetListView Object  GOTOBUTTON _Toc286720401    PAGEREF _Toc286720401  6.1 List View Visual Appearance  GOTOBUTTON _Toc286720402    PAGEREF _Toc286720402  6.2 State Information (BoxNetListView)  GOTOBUTTON _Toc286720403    PAGEREF _Toc286720403  6.3 Implemented Interfaces (BoxNetListView)  GOTOBUTTON _Toc286720404    PAGEREF _Toc286720404  6.4 IBoxNetListView Interface  GOTOBUTTON _Toc286720405    PAGEREF _Toc286720405  6.5 Modes (BoxNetListView)  GOTOBUTTON _Toc286720406    PAGEREF _Toc286720406  6.6 Commands (BoxNetListView)  GOTOBUTTON _Toc286720407    PAGEREF _Toc286720407  6.7 Tools (BoxNetListView)  GOTOBUTTON _Toc286720408    PAGEREF _Toc286720408  6.8 Clipboard Formats (BoxNetListView)  GOTOBUTTON _Toc286720409    PAGEREF _Toc286720409  7. Box Abstract Class  GOTOBUTTON _Toc286720410    PAGEREF _Toc286720410  7.1 IBox State Information  GOTOBUTTON _Toc286720411    PAGEREF _Toc286720411  7.2 Implemented Interfaces (Box)  GOTOBUTTON _Toc286720412    PAGEREF _Toc286720412  7.3 IBox Interface  GOTOBUTTON _Toc286720413    PAGEREF _Toc286720413  7.4 Commands (Box)  GOTOBUTTON _Toc286720414    PAGEREF _Toc286720414  8. SimpleBox Object  GOTOBUTTON _Toc286720415    PAGEREF _Toc286720415  8.1 State Information (SimpleBox)  GOTOBUTTON _Toc286720416    PAGEREF _Toc286720416  8.2 Implemented Interfaces (SimpleBox)  GOTOBUTTON _Toc286720417    PAGEREF _Toc286720417  8.3 ISimpleBox Interface  GOTOBUTTON _Toc286720418    PAGEREF _Toc286720418  8.4 Modes (SimpleBox)  GOTOBUTTON _Toc286720419    PAGEREF _Toc286720419  8.5 Commands (SimpleBox)  GOTOBUTTON _Toc286720420    PAGEREF _Toc286720420  8.6 Tools (SimpleBox)  GOTOBUTTON _Toc286720421    PAGEREF _Toc286720421  9. BoxLink Object  GOTOBUTTON _Toc286720422    PAGEREF _Toc286720422  9.1 State Information (BoxLink)  GOTOBUTTON _Toc286720423    PAGEREF _Toc286720423  9.2 Implemented Interfaces (BoxLink)  GOTOBUTTON _Toc286720424    PAGEREF _Toc286720424  9.3 IBoxLink Interface  GOTOBUTTON _Toc286720425    PAGEREF _Toc286720425  9.4 Commands (BoxLink)  GOTOBUTTON _Toc286720426    PAGEREF _Toc286720426  10. BoxSocket Object  GOTOBUTTON _Toc286720427    PAGEREF _Toc286720427  10.1 State Information (BoxSocket)  GOTOBUTTON _Toc286720428    PAGEREF _Toc286720428  10.2 Implemented Interfaces (BoxSocket)  GOTOBUTTON _Toc286720429    PAGEREF _Toc286720429  10.3 IBoxSocket Interface  GOTOBUTTON _Toc286720430    PAGEREF _Toc286720430  10.4 Commands (BoxSocket)  GOTOBUTTON _Toc286720431    PAGEREF _Toc286720431  11. BoxSocketPos Object, BoxEdge Type  GOTOBUTTON _Toc286720432    PAGEREF _Toc286720432  11.1 IBoxSocketPos Interface, State Information  GOTOBUTTON _Toc286720433    PAGEREF _Toc286720433  11.2 BoxEdge Enumerated Type  GOTOBUTTON _Toc286720434    PAGEREF _Toc286720434  12. BoxNet Collection And Enumeration Objects  GOTOBUTTON _Toc286720435    PAGEREF _Toc286720435  13. Common Objects: Point, Size, Offset, Rect  GOTOBUTTON _Toc286720436    PAGEREF _Toc286720436  Introduction Purpose Of This Document BoxNet is a collection of COM/MDA objects that implements a  network of boxes , as described in Section   REF _Ref285437618 \n  .  BoxNet might be used as part of an implementation of filter sheets, but initially BoxNet s primary purpose is as an example of a simple IGOR container object. This document describes the functional design of BoxNet, i.e. all high-level aspects of BoxNet that users of BoxNet would need to know.  Included is information about user interface, OLE Automation access to BoxNet, and C/C++ access to BoxNet.  This information would also be useful to people wanting to create a functional specification, user education materials, testing plans, etc. for BoxNet. Note that this document does not describe how BoxNet is implemented. See also: \\sierra\high\cat\current\catedit.doc and ...\terms.doc. Abstract Concept Conceptually, a BoxNet represents a  network of boxes , i.e. a collection of rectangles with directional links between pairs of rectangles, as illustrated in   REF _Ref284568173 \* MERGEFORMAT  Figure 1  EMBED Word.Picture.6   Figure   SEQ Figure \* ARABIC  .  BoxNet graph view Each large rectangle is a box; the text in the center is the box label.  Each small rectangle around the edge of a box is a socket; the text beside it is the socket label.  (The small rectangle itself is often called a socket tab.)  Socket labels and tabs belong to a box.  The arrows between two sockets are links.  Each link has a head (where the arrowhead is) and a tail.  A link may have one or more bends (e.g. the link between Blorg:S and Foo:A has 3 bends).  A socket may have at most one link connected to it.  REF _Ref284568173 \* MERGEFORMAT  Figure 1  shows a graph view of a box network.  See   REF _Ref284588419 \* MERGEFORMAT  Figure 10  for an alternate view, list view. Object Map A network of boxes is represented by a BoxNet, which is any object (such as an object of class SimpleBoxNet see below) that implements IBoxNet.  A BoxNet maintains a collection of BoxLink objects, each of which represents a link between two box sockets.  A BoxNet also maintains a collection of boxes; each box is represented by a Box object, which is any object (such as an object of class SimpleBox) that implements IBox.  A Box contains a collection of BoxSocket objects, each of which represents a box socket.  A BoxSocket contains a BoxSocketPos pseudo-object, which indicates the position of the socket tab on the box.  REF _Ref285280696 \* MERGEFORMAT  Figure 2  depicts an  object map , which shows how to get from one object to another (or, more precisely, how to obtain a pointer to a second object given a pointer to the first).  For example, accessing the  Boxes  property of a BoxNet or SimpleBoxNet object will give you a pointer to a Boxes collection object (see also section   REF _Ref285283217 \n  The bold arrows in   REF _Ref285280696 \* MERGEFORMAT  Figure 2  show containment relationships.  For example, a BoxSockets object contains zero or more BoxSocket objects, but a BoxLink doesn t contain a BoxSocket (the BoxLink merely points to related BoxSocket objects). Dashed arrows show pseudo-object relationships.  For example, a BoxSocket doesn t actually contain a BoxSocketPos object (for efficiency reasons), but, when requested, BoxSocket can create a temporary BoxSocketPos object that refers to the position of the socket.  EMBED Word.Picture.6   Figure   SEQ Figure \* ARABIC  .  BoxNet object map BoxNet Architecture BoxNet is an MDA container type.  To be more precise, BoxNet is the name for the relationship, loosely referred to as the  BoxNet architecture , among objects that implement the interfaces IBoxNet, IBox, IBoxLink, and IBoxSocket.  ( A BoxNet  is also used to refer to an object that implements IBoxNet.)  Implementations for some of these interfaces are supplied, as described in the following table: Interface Supplied Implementation Comments About Supplied Implementation IBoxNet SimpleBoxNet implements UI but no semantics; usually subclassed by a   implementation SimpleBox implements UI but no semantics; usually subclassed by a   implementation IBoxLink BoxLink usually sufficient for real applications IBoxSocket BoxSocket usually sufficient for real applications IBoxSocketPos BoxSocketPos usually sufficient for real applications SimpleBoxNet and SimpleBox are not very useful on their own, except perhaps as a  flow chart editor , since these objects don  anything: SimpleBoxNet lets you edit box networks (but applies no meaning to boxes and links), and SimpleBox displays and edits box labels and socket labels.  It s expected that SimpleBoxNet and SimpleBox would normally be aggregated into larger objects which would define other interfaces and specific semantics.  For example, an audio filter sheet could be implemented this way: a FilterSheetBoxNet object would connect audio streams among filter boxes such as an EchoFilterBox and a ReverbFilterBox. The methods shown are IDispatch-callable, and they have been chosen to be particularly useful when used with VBA.  For example, the VBA code shown in   REF _Ref285282063 \* MERGEFORMAT  Figure 3  will print the labels of all boxes and sockets.  EMBED Word.Picture.6   Figure   SEQ Figure \* ARABIC  .  Example of VBA code to traverse a BoxNet (VBA uses _NewEnum() in its implementation of  For Each .  _NewEnum() creates an enumerator object given a collection object.  An enumerator object maintains a pointer to the  current item  during an enumeration.) BoxNet-IGOR Communication BoxNet communicates with IGOR via the standard IGOR messages, as shown in   REF _Ref285102844 \* MERGEFORMAT  Figure 4  EMBED Word.Picture.6   Figure   SEQ Figure \* ARABIC  .  BoxNet-IGOR communication This is a high-level picture only see the individual object and interface descriptions for more information.  Note that, while it s assumed that the BoxNet data object will likely be subclassed to create a more useful implementation (e.g. an audio filter sheet), it s assumed that the two supplied view objects, BoxNetGraphView and BoxNetListView, can probably be used as-is, even with custom BoxNet implementations. Although IGOR only directly communcates with the BoxNet data and view objects, the IGOR-supplied interface implementations (IStorage, IEditDataSite, IEditViewSite, and ICommandList) are passed down to contained objects (boxes, links, etc.) so that they may access IGOR functionality such as displaying status bar text and issuing undo/redo-able commands. BoxNet-Box Communication IBox and IBoxSite are how boxes and a BoxNet data object communicate with each other, as shown in   REF _Ref285101429 \* MERGEFORMAT  Figure 5 .  Note that the BoxNet views take care of drawing boxes, so there are no  box view  objects.  A BoxNet also exposes an IStorage (passed to the box via IPersistStorage), IEditViewSite (so that the box can access IGOR services), and ICommandList (so that the box can queue commands in IGOR s global undo/redo stacks).  EMBED Word.Picture.6   Figure   SEQ Figure \* ARABIC  .  BoxNet-box communication BoxNet Abstract Class State Information (BoxNet) Any BoxNet data object (e.g. a SimpleBoxNet data object, as describe in Section   REF _Ref285283337 \n  ), maintains the following state information: a collection of box objects; a collection of boxes which are selected. Note that the current selection (of boxes) is a maintained by the data object, not by view objects. Implemented Interfaces (BoxNet) Any BoxNet data object needs to implement the following interfaces: Interface Implementation Information IBoxNet (Standard implementation.) IDataObject At a minimum, provide a native data representation. IDispatch At a minimum, support methods and properties from IBoxNet. IEditDataObject (Standard implementation.) IPersistStorage (Standard implementation.) IBoxNet Interface By definition, a BoxNet data object implements IBoxNet.  IBoxNet contains the following methods and properties, which are accessible via IDispatch: General Method/Property [r=read, w=write] Description (One method for each command listed in Section   REF _Ref285106279 \n  CreateGraphView() As BoxNetGraphView Create a BoxNetGraphView object that s a view onto this BoxNet data object. CreateListView() As BoxNetListView Create a BoxNetListView object that s a view onto this BoxNet data object. Boxes Method/Property [r=read, w=write] Description SelectBox(Box b) All other boxes (if any) are deselected, selected link (if any) is deselected, box b is selected. Mouse UI, graph view:  Left-down on box executes select-box(b) and begin move-box-selection-pending(b). Mouse/keyboard UI, list view:  List is a standard multi-select Windows list box; selecting box items selects the corresponding boxes.  Socket items cannot be selected. ToggleBoxSelection(Box b) If box b is selected, deselect it.  If not, select it. Mouse UI, graph view:  If box is initially selected: Sheft-left-down, then quickly release mouse button (else move-box-selection mode is entered and box remains selected).  If box is initially deselected: Shift-left down; box will be selected regardless of whether or not move-box-selection mode is entered. Mouse UI, list view:  See select-box mode. Links Method/Property [r=read, w=write] Description ReplaceLink(BoxLink l, BoxLink lNew) Replace link l with lNew.  Free l. Commands (BoxNet) Boxes Command Description insert-box(b) Add box b to the BoxNet (in the position specified inside b). UI:  See insert-box mode. move-box-selection(off) Move the box selection (including each link connected to a selected box) to a new location, offset off pixels from its original location. UI:  See move-box-selection mode. tab-to-next-box If one box is selected, select another box, such that repeatedly hitting executing this command will cycle through all boxes.  If more than one box is selected, do nothing. Links Command Description delete-box-selection Delete the box selection. delete-link(l) Delete link l. UI:  See delete-selected-link command. insert-link(l) Add link l (which already contains pointers to the two boxes it is to link together) to the BoxNet. Mouse UI (graph mode only):  Left-down on link (not on a bend) while in allow-edit-bends mode. Bends Command Description delete-bend(b) Delete link bend (b). Mouse UI (graph mode only):  Left-down on or near b while in allow-edit-bends mode. move-bend(b, pt) Move link bend b (may be head or tail) to point pt. UI:  See move-bend mode. View Advise Messages (BoxNet) The following messages are sent to BoxNet views (via IEditViewObject::OnUpdate, usually initiated by IEditDataSite::UpdateAllViews) to indicate that the view must be redrawn, or view state may need to be changed in some way. Message Description cancel-modes cancel any current modes; for example, before a link is deleted, this message (and/or cancel-view-select?) would be broadcast to all views so that, in case a view was holding a pointer to the soon-to-be-deleted link object, the pointer would be released, which would avoid later GP Faults etc. caused by indirecting a bad pointer cancel-view-select cancel any view-specific selection draw-all redraw entire view draw-box draw only specified box draw-box-and-links draw only specified box and connecte links draw-box-socket-tab draw only specified socket tab draw-link draw only specified link SimpleBoxNet Data Object SimpleBoxNet is a BoxNet data object implementation, meaning it implements IBoxNet.  SimpleBoxNet applies no  semantic meaning  to a BoxNet it simply acts as a container for boxes.  (Therefore, as described in Section   REF _Ref285283217 \n  s expected that SimpleBoxNet would probably be subclassed in  real life  use.) State Information (SimpleBoxNet) SimpleBoxNet maintains the following state information: See Section   REF _Ref285428232 \n  Implemented Interfaces (SimpleBoxNet) Interface Implementation Information IBoxNet (Standard implementation.) IDataObject See Section   REF _Ref285429296 \n  IDispatch Methods and properties from IBoxNet and ISimpleBoxNet. IEditDataObject (Standard implementation.) ISimpleBoxNet (Standard implementation) IPersistStorage (Standard implementation.) ISimpleBoxNet Interface ISimpleBoxNet contains methods and properties which are specific to the SimpleBoxNet object and which are exposed via IDispatch. Method/Property [r=read, w=write] Description (none currently) Clipboard Formats (SimpleBoxNet) SimpleBoxNet s IDataObject interface supports the following clipboard formats: Clipboard Format Description SimpleBoxNet Native format.  See Section   REF _Ref285429213 \n  SimpleBoxNetText ASCII translation of native format.  See Section   REF _Ref285429488 \n  Native Clipboard Format (SimpleBoxNet) SimpleBoxNet clipboard transfer and drag & drop via OLE uniform data transfer (IDataObject and associated interfaces).  In particular, cut-selection, copy-selection, drag/drop (from BoxNet), etc. are implemented by creating an invisible BoxNet data object that represents a snapshot of the data being copied, as shown in   REF _Ref285176144 \* MERGEFORMAT  Figure 6 .  This snapshot object creates a standard OLE advise holder (via the OLE API CreateOLEAdviseHolder) to handle IDataObject::DAdvise requests, and a standard IGOR FORMATETC enumerator object to handle IDataObject::EnumFormatEtc requests.  EMBED Word.Picture.6   Figure   SEQ Figure \* ARABIC  .  SimpleBoxNet support for uniform data transfer Text Clipboard Format (SimpleBoxNet) A text representation exported from a SimpleBoxNet and imported to a SimpleBoxNet, via the BoxNet s IDataObject interface.  The text representation (which looks very much like the list view of a BoxNet) is described by the BNF grammar shown in   REF _Ref285107461 \* MERGEFORMAT  Figure 7  EMBED Word.Picture.6   Figure   SEQ Figure \* ARABIC  .  BNF grammar of BoxNet text representation Tokens must be separated by white space (or by literal strings listed above).  A (string( is a sequence of letters, digits, and spaces; if any other characters are included the string must be contained in double quotation marks, and within the quotes a backslash is used to  escape  the following character (as in C strings). The sample BoxNet text representation shown in   REF _Ref285105732 \* MERGEFORMAT  Figure 8  corresponds to the BoxNet depicted in   REF _Ref284568173 \* MERGEFORMAT  Figure 1  EMBED Word.Picture.6   Figure   SEQ Figure \* ARABIC  .  Example of BoxNet text representation (corresponds to   REF _Ref284568173 \* MERGEFORMAT  Figure 1 If each (box-name( is not unique, the box labelling rules described in Section   REF _Ref285106728 \n   apply, as shown in   REF _Ref285105777 \* MERGEFORMAT  Figure 9 , which corresponds to the BoxNet depicted in   REF _Ref284634585 \* MERGEFORMAT  Figure 11  EMBED Word.Picture.6   Figure   SEQ Figure \* ARABIC  .  Example of BoxNet text represntation with duplicate box labels (corresponds to   REF _Ref284634585 \* MERGEFORMAT  Figure 11 BoxNetView Abstract Class TODO.  (Commands, interfaces, etc.?  What interfaces to all views need to support?) BoxNetGraphView Object A BoxNetGraphView object is a view object which represents a  graph view  (in the sense of  graph  meaning  linked collection of nodes ) of a BoxNet data object (such as a SimpleBoxNet object). Graph View Visual Appearance A BoxNet graph view object displays a BoxNet in a manner visually similar to   REF _Ref284568173 \* MERGEFORMAT  Figure 1 State Information (BoxNetGraphView) A BoxNetGraphView object maintains the following state information: Which link, if any, is selected. Only one link can be selected at a time, and no link can be selected when a box is selected (or vice versa).  Note that link selection is view object state, while box selection is data object state. Modes listed in Sections   REF _Ref285428435 \n   REF _Ref285428525 \n  Implemented Interfaces (BoxNetGraphView) Interface Implementation Information IBoxNetGraphView (Standard implementation.) IDataObject See Section   REF _Ref285429953 \n  IDispatch Methods and properties from IBoxNetGraphView, plus those of the BoxNet data object. IEditViewObject (Standard implementation.) IKeyboard (Standard implementation.) IMouse (Standard implementation.) IPersistStorage (Standard implementation.) IViewObject (Standard implementation.) IBoxNetGraphView Interface IBoxNetGraphView contains methods and properties which are specific to the BoxNetGraphView object and which are exposed via IDispatch. General Method/Property [r=read, w=write] Description (One method for each command listed in Section   REF _Ref285106188 \n  CanCopy As Boolean [r] query: can enable Copy tool? CanCut As Boolean [r] query: can enable Cut tool? CanDelete As Boolean [r] query: can enable Delete tool? CanPaste As Boolean [r] query: can enable Paste tool? Boxes And Sockets Method/Property [r=read, w=write] Description GhostBoxPosition As Point [r/w] location of ghost-box GhostBoxSelectionOffset As Offset [r/w] offset of ghost-box-selection from original position GhostSocketPosition As BoxSocketPos [r/w] location of ghost-socket InEditSocketPositionsMode As Boolean [r] query: in Edit Socket Positions mode? Links And Bends Method/Property [r=read, w=write] Description InEditLinkBendsMode As Boolean [r] query: in Edit Link Bends mode? MoveGhostLink(LinkBend b, Point pt) move bend b of the ghost link to be at position pt SelectLink(l) All boxes are deselected, selected link (if any) is deselected, link l is selected. Mouse UI (graph view only):  Left-down on l. Persistent Modes (BoxNetGraphView) These modes persist even while the mouse is not being dragged: Description allow-edit-bends Link bends can be added/deleted.  (Outside this mode, dragging on link bends moves them instead.) Mouse UI:  Left-double-click on any link. allow-move-socket In this mode, left-down in a socket begins move-socket mode.  Otherwise, left-down in an unoccupied socked begins insert-link mode, and left-down in an occupied socket begins move-link mode. insert-box(box-class) A ghost box b of class box-class is created and displayed (via ghost-box mode), and dragged until the user either left-clicks (causing the location of b to change to the location of the ghost, and an insert-box command to get executed) or hits Esc (causing b to be destroyed).  Transient Mouse-Initiated Modes (BoxNetGraphView) The following modes are initiated by pressing the left mouse button, and generally remain active until the mouse button is released.  These modes can be cancelled by hitting the Esc key, in which case no action is taken (or the cancel behavior is as specified for that mode).  To indicate that the action is cancellable, and to speed up display,  ghost  (xor d) versions of a clicked-on UI element (box, socket, link, etc.) is generally manipulated while the mouse is dragged, until mouse-up (at which time the editing operation either commits or aborts, depending on circumstances). General Description select-rectangle(pt) The user is drawing an xor d rectangle around a collection of boxes, from point pt to the current mouse location.  On mouse-up, all boxes that intersect the rectangle in any way are selected. Mouse UI:  Left-down at point pt outside any box or link. Boxes And Sockets Description move-box-selection(b) The user is dragging a ghost copy of the box selection. Mouse UI:  Left-down on a box see move-box-selection-pending mode. move-box-selection-pending(b) While in this mode, if the user waits long enough, or drags the mouse far enough, the user enters move-box-selection mode.  If not (i.e. if the user releases the mouse button quickly, without dragging far) then if the user shift-clicked on b then the b is deselected. Mouse UI:  Left-down on box b. move-socket(s) A ghost copy of socket s (and its connected link, if any) is dragged around the perimeter of the s s box.  (see ghost-socket and ghost-link modes.)  If the user drags off the permiter, the ghost socket  snaps  back to its original position, until the mouse re-enters the permiter.  On mouse-up, s moves to the position of the ghost socket. Mouse UI:  Left-down on s while in allow-move-socket mode. Links And Bends Description insert-bend(l, pt) Let the user insert a new bend in link l at the point in l closest to pt.  Execute lGhost = l.Clone(), bGhost = new Bend, lGhost.InsertBend(bGhost, pt), begin move-ghost-bend(l, lGhost, bGhost). Mouse UI:  Left-down on or near l while in allow-edit-bends mode. insert-link(s) The user is  drawing  a link from unoccupied socket s to another empty socket.  Execute lGhost = new BoxLink, begin ghost-link(lGhost).  If mouse-up happens anywhere except an empty socket, the mode is cancelled with no action taken, and lGhost is destroyed.  Otherwise lGhost is linked from s to the second socket. Mouse UI:  Left-down in s and drag while not in allow-move-socket mode. move-bend(l, b) Bend b on link l is dragged to a new position.  Execute lGhost = l.Clone, bGhost = where b is on lGhost, begin move-ghost-bend(l, lGhost, bGhost). Mouse UI: Left-down on b while not in allow-edit-bends mode.  Also called from insert-bed mode. move-link(l, s) A ghost copy of the end of link l that s in socket s is dragged to a new socket.  If mouse-up happens anywhere except an empty socket, the mode is cancelled with no action taken. Mouse UI:  Left-down on an occupied s (which contains one end of l) while not in allow-move-socket mode. Transient  Utility Modes  (BoxNetGraphView) The following are  utility modes , enabled by other modes: Boxes And Sockets Description ghost-box(bGhost) Box bGhost (which is not currently contained in the BoxNet data object) is displayed as a  ghost ghost-box-selection There is a ghost copy of the box selection, including all links connected to selected boxes.  The ghost selection offset by some offset from the original selection, and is the same size and shape as the original selection except that any link between a selected and an unselected box is shown in the ghost selection as still connected to the unselected box.  Used by move-box-selection mode.  See MoveGhostBoxSelection(). ghost-socket(sGhost) Socket sGhost (which is not currently contained in any box, i.e. no box points to it, though it may point to a parent box) is displayed as a  ghost socket-hilited(s) Socket s is shown  highlighted .  Used by insert-link, move-link, and move-socket modes, to provide visual feedback. Links And Bends Description ghost-link(lGhost) Link lGhost (which is not currently contained in the BoxNet data object, nor do any sockets point to it, though it may point to head and tail sockets) is displayed as a  ghost move-ghost-bend(l, lGhost, bGhost) Move bend bGhost on lGhost while the user is left-dragging.  On commit (left-up), boxnet.ReplaceLink(l, lGhost).  On abort (Esc), lGhost.Release. Commands (BoxNetGraphView) Standard Clipboard These are standard IGOR commands. Command Description copy-selection Copy whatever is selected to the clipboard, if possible.  See also IBoxNetGraphView::CanCopy. cut-selection Cut whatever is selected to the clipboard, if possible.  See also IBoxNetGraphView::CanCut. delete-selection Delete whatever is selected, if possible.  See also IBoxNetGraphView::CanDelete. paste-selection Paste whatever is on the clipboard, if possible.  See also IBoxNetGraphView::CanPaste. Links Command Description delete-selected-link Delete the selected link using the delete-link command. Tools (BoxNetGraphView) Menu: Item Toolbar Tool Kbd. Accel. Commands; {How To Update UI} (none) (none) tab-to-next-box Edit: Copy Ctrl+C, Ctrl+Ins copy-selection; {CanCopy} Edit: Cut Ctrl+X, Shift+Del cut-selection; {CanCut} Edit: Delete (none) delete-selection; {CanDelete} Edit: Edit Link Bends begin allow-edit-bends; {InEditLinkBendsMode} Edit: Edit Socket Positions begin allow-move-socket; {InEditSocketPositionsMode} Edit: Paste Ctrl+V, Shift+Ins paste-selection; {CanPaste} Insert: box-class box-class box-class b=box-class.NewBox(), begin insert-box(b). Clipboard Formats (BoxNetGraphView) BoxNetGraphView s IDataObject interface supports the following clipboard formats: Clipboard Format Description (data object formats) (all formats implemented by BoxNet data object) CF_METAFILEPICT Metafile rendition of graph view (similar to   REF _Ref284568173 \* MERGEFORMAT  Figure 1 BoxNetListView Object A BoxNetListView object is a view object which represents a  list of boxes and sockets  view of a BoxNet data object (such as a SimpleBoxNet object). List View Visual Appearance A BoxNetListView object displays a BoxNet as a list of boxes and sockets, as shown in   REF _Ref284588419 \* MERGEFORMAT  Figure 10  EMBED Word.Picture.6   Figure   SEQ Figure \* ARABIC  .  BoxNet list view (This box list view corresponds to the same data object shown in   REF _Ref284568173 \* MERGEFORMAT  Figure 1 .)  The list is ordered alphabetically, first by box label and then by socket label.  Each socket shows which socket of which box (if any) it s connected to. Note that box labels don t need to be unique; if  two boxes have the same label, the box list view would display with with  , etc. appended, as shown in   REF _Ref284634585 \* MERGEFORMAT  Figure 11  (which shows a box graph view and a corresponding box list view).  EMBED Word.Picture.6   Figure   SEQ Figure \* ARABIC  .  Displaying duplicate box labels in BoxNet list view State Information (BoxNetListView) A BoxNetListView object maintains the following state information: Modes listed in Section   REF _Ref285108320 \n  Implemented Interfaces (BoxNetListView) Interface Implementation Information IBoxNetListView (Standard implementation.) IDataObject See Section   REF _Ref285430345 \n  IDispatch Methods and properties from IBoxNetListView, plus those of the BoxNet data object. IEditViewObject (Standard implementation.) IKeyboard (Standard implementation.) IMouse (Standard implementation.) IPersistStorage (Standard implementation.) IViewObject (Standard implementation.) IBoxNetListView Interface IBoxNetListView contains methods and properties which are specific to the BoxNetListView object and which are exposed via IDispatch. General Method/Property [r=read, w=write] Description (One method for each command listed in Section   REF _Ref285108586 \n  Boolean IsOneBoxSelected query: is exactly one box selected? Clipboard Method/Property [r=read, w=write] Description Boolean CanCopy query: can enable Copy tool? Boolean CanCut query: can enable Cut tool? Boolean CanDelete query: can enable Delete tool? Boolean CanPaste query: can enable Paste tool? Modes (BoxNetListView) Description (none) Commands (BoxNetListView) Standard Clipboard These are standard IGOR commands. Command Description copy-selection Copy whatever is selected to the clipboard, if possible.  See also IBoxNetListView::CanCopy. cut-selection Cut whatever is selected to the clipboard, if possible.  See also IBoxNetListView::CanCut. delete-selection Delete whatever is selected, if possible.  See also IBoxNetListView::CanDelete. paste-selection Paste whatever is on the clipboard, if possible.  See also IBoxNetListView::CanPaste. Tools (BoxNetListView) Menu: Item Toolbar Tool Kbd. Accel. Commands; {How To Update UI} Edit: Copy Ctrl+C, Ctrl+Ins copy-selection; {CanCopy} Edit: Cut Ctrl+X, Shift+Del cut-selection; {CanCut} Edit: Delete (none) delete-selection; {CanDelete} Edit: Paste Ctrl+V, Shift+Ins paste-selection; {CanPaste} Clipboard Formats (BoxNetListView) BoxNetListView s IDataObject interface supports the following clipboard formats: Clipboard Format Description (data object formats) (all formats implemented by BoxNet data object) Box Abstract Class  is an object that implements IBox.  Conceptually, a box is an object contained in a box network. IBox State Information A box is contractually obligated to maintain the following information: a box label (any string, defined by the box implementation), a list of socket objects, each of which supports IBoxSocket. Implemented Interfaces (Box) Any box object needs to implement the following interfaces: Interface Implementation Information (Standard implementation.) IDispatch At a minimum, support methods and properties from IBox. IPersistStorage (Standard implementation.) IBox Interface IBox is defined as follows.  IBox is accessible from IDispatch. Method/Property [r=read, w=write] Description (One method for each command listed in Section   REF _Ref285335050 \n  enumerate sockets, Label As String [r/w] box label NOT SetLabel, since boxes don t *have* to be able to be given a label (see ISimpleBox -- it does SetLabel) Commands (Box) Command Description move-socket(s, pos) Move socket s to position pos on the perimeter of its box. UI:  See move-socket mode. SimpleBox Object The SimpleBox object is a simple box implementation (supporting IBox).  SimpleBox simply contains a box label and an arbitrary number of labelled sockets there is no other semantic meaning.  SimpleBox can be: used as-is, with BoxNetXXX objects, to create simple  flowcharts  which can be displayed but which don t do anything else; subclassed, used with subclassed implementation of BoxNetXXX objects, to create box network applications (such as a filter sheet with audio filters). State Information (SimpleBox) A SimpleBox maintains the following state information: See Section   REF _Ref285428702 \n  Implemented Interfaces (SimpleBox) Interface Implementation Information (Standard implementation.) IDispatch Methods and properties from IBox and ISimpleBox. ISimpleBox (Standard implementation.) IPersistStorage (Standard implementation.) ISimpleBox Interface ISimpleBox contains methods and properties which are specific to the SimpleBox object and which are exposed via IDispatch. Method/Property [r=read, w=write] Description (One method for each command listed in Section   REF _Ref285108651 \n  BoxLabel As String [r/w] enumerate sockets -- must be callable from VBA too NewBox() As Box (Class factory command)  Create a new box. Modes (SimpleBox) Description edit-box-attributes Displays a dialog box to let user change the box label and other attributes of the box.  If user selects OK, execute change-box-attributes(b, new-attributes). Mouse UI:  Left-double-click inside b. insert-socket Commands (SimpleBox) Command Description change-box-attributes(a) Change attributes of box to a. Tools (SimpleBox) Menu: Item Toolbar Tool Kbd. Accel. Commands; {How To Update UI} Edit: Box Properties... Alt+Enter copy-selection; {CanCopy} BoxLink Object A BoxLink is an object that represents a link between two boxes in a box network. State Information (BoxLink) A BoxLink maintains the following information: an IBoxSocket pointer to the socket that the head of the link connects to; an IBoxSocket pointer to the socket that the tail of the link connects to; a list of Point values indicating the location of each bend in the link. Implemented Interfaces (BoxLink) Interface Implementation Information IBoxLink (Standard implementation.) IDispatch Methods and properties from IBoxLink. IPersistStorage (Standard implementation.) IBoxLink Interface Method/Property [r=read, w=write] Description Clone() As BoxLink return a copy of link enumerate bends, etc. InsertBend(LinkBend b, Point pt) insert bend b into the link at the point closest to pt NewLink(BoxSocket h, BoxSocket t) As BoxLink (Class factory command)  Create a new link with no bends, with head pointing to socket h and tail pointing to socket t. Commands (BoxLink) Command Description delete-bend(b) Delete bend b. new-bend(pt) A new bend is inserted at the point on the link closest to point pt. BoxSocket Object A BoxSocket represents a point on a box that a link can be connected to. State Information (BoxSocket) A BoxSocket maintains the following information: a socket label (any string, defined by the socket implementation); a socket position of type BoxSocketPos; an IBox pointer to the box that contains the socket; an IBoxLink pointer to the link (if any) connected to the socket. Implemented Interfaces (BoxSocket) Interface Implementation Information IBoxSocket Interface IBoxSocket is defined as follows.  IBoxSocket is accessible from IDispatch. Method/Property [r=read, w=write] Description SocketLabel As String [r/w] socket label SocketPos As BoxSocketPos [r/w] socket position Commands (BoxSocket) Command Description BoxSocketPos Object, BoxEdge Type A value class BoxSocketPos object represents the position of a box socket   along the perimeter of a box.  (A box tab is the graphical representation of a box network socket.)  The position is represented as a fraction of the length of the edge, so that resizing the box will retain the tab s relative position.  A BoxEdge is an enumerated type which labels each of the four edges of a box. IBoxSocketPos Interface, State Information IBoxSocketPos is defined as follows.  IBoxSocketPos is accessible from IDispatch. Method/Property [r=read, w=write] Description Edge As BoxEdge [r/w] Which edge contains the socket tab. Extent As Single[r/w] The location of the socket tab along the edge specified by Edge.  This is a floating-point fractional value: 0.0 means left/top, 1.0 means right/bottom. BoxEdge Enumerated Type BoxEdge enumerated type values are as follows. Value Description BottomEdge Box socket tab is on the bottom edge of box. LeftEdge Box socket tab is on the left edge of box. RightEdge Box socket tab is on the right edge of box. TopEdge Box socket tab is on the top edge of box. BoxNet Collection And Enumeration Objects The BoxNet architecture defines several IDispatch-enabled collection and enumeration object classes which are useful for navigating BoxNet object graphs.  These classes are summarized in the following table: Base Object Collection Enumerator Item() Parameter box-class Boxes EnumBoxes box name BoxSocket BoxSockets EnumBoxSockets socket label BoxLink BoxLinks EnumBoxLinks index Base Object  column shows the object that s contained in the collection.  The  Collection  column gives the name of the collection class.  The  Enumerator  column gives the name of the enumerator class (which implements IEnumVariant); an object of this class is created when the _NewEnum() method is called on the correpsonding collection object.  The  Item() Parameter  specifies what s given as the parameter of the Item() method of the corresponding collection. Common Objects: Point, Size, Offset, Rect This document assumes the existence of these object classes: Class Properties (each of type  Point CX, CY Offset DY, DY Left, Top, Right, Bottom  STYLEREF "Heading 1" \n \* MERGEFORMAT  STYLEREF "Heading 1" \* MERGEFORMAT Box Abstract Class Page  numpages filename BOXNET.DOC 3/3024 6BoxNetListView Object17<BoxNet>, ...\terms.doc, and \\sierra\high\cat\catobj.doc.<>  See \\sierra\high\cat\catobj.doc for a definition of the angle-brackets notation. 1Introduction5 Normal Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Heading 7 Heading 8 Heading 9 Default Paragraph Font Body Text List Bullet Body Text Indent List Continue List Bullet 2 Body Text 3 TOC 1 TOC 2 TOC 3 TOC 4 TOC 5 TOC 6 TOC 7 TOC 8 TOC 9 Footer Header Normal Indent List 2 List Bullet 3 List Continue 2 Message Header Title Caption Page Number Footnote Text Footnote Reference Normal Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Heading 7 Heading 8 Heading 9 Default Paragraph Font Body Text List Bullet Body Text Indent List Continue List Bullet 2 Body Text 3 TOC 1 TOC 2 TOC 3 TOC 4 TOC 5 TOC 6 TOC 7 TOC 8 TOC 9 Footer Header Normal Indent List 2 List Bullet 3 List Continue 2 Message Header Title Caption Page Number Footnote Text Footnote Reference Unknown Eric Ledoux _Toc286720369 _Toc286720370 _Ref285437618 _Toc286720371 _Ref284568173 _Toc286720372 _Ref285280696 _Ref285283217 _Toc286720373 _Ref285282063 _Toc286720374 _Ref285102844 _Toc286720375 _Ref285101429 _Ref285181213 _Toc286720376 _Ref285428232 _Ref285428702 _Toc286720377 _Toc286720378 _Toc286720379 _Ref285106279 _Toc286720380 _Toc286720381 _Ref285283337 _Toc286720382 _Toc286720383 _Toc286720384 _Toc286720385 _Ref285429296 _Toc286720386 _Ref285429213 _Toc286720387 _Ref285176144 _Ref285429488 _Toc286720388 _Ref285107461 _Ref285105732 _Ref285105777 _Toc286720389 _Toc286720390 _Toc286720391 _Toc286720392 _Toc286720393 _Toc286720394 _Ref285428435 _Toc286720395 _Ref285108246 _Ref285108248 _Toc286720396 _Ref285428525 _Toc286720397 _Ref285106185 _Ref285106188 _Toc286720398 _Toc286720399 _Ref285429953 _Toc286720400 _Toc286720401 _Ref285106728 _Toc286720402 _Ref284588419 _Ref284634585 _Toc286720403 _Toc286720404 _Toc286720405 _Ref285108320 _Toc286720406 _Ref285108586 _Toc286720407 _Toc286720408 _Ref285430345 _Toc286720409 _Toc286720410 _Toc286720411 _Toc286720412 _Toc286720413 _Ref285335050 _Toc286720414 _Toc286720415 _Toc286720416 _Toc286720417 _Toc286720418 _Toc286720419 _Ref285108651 _Toc286720420 _Toc286720421 _Toc286720422 _Toc286720423 _Toc286720424 _Ref285108634 _Toc286720425 _Toc286720426 _Toc286720427 _Toc286720428 _Toc286720429 _Toc286720430 _Toc286720431 _Toc286720432 _Toc286720433 _Toc286720434 _Toc286720435 _Toc286720436G Eric Ledoux$\\SIERRA\HIGH\CAT\CURRENT\BOXNET.DOC Eric Ledoux$\\SIERRA\HIGH\CAT\CURRENT\BOXNET.DOC Eric Ledoux$\\SIERRA\HIGH\CAT\CURRENT\BOXNET.DOC Eric Ledoux$\\SIERRA\HIGH\CAT\CURRENT\BOXNET.DOC Eric Ledoux$\\SIERRA\HIGH\CAT\CURRENT\BOXNET.DOC Eric Ledoux$\\SIERRA\HIGH\CAT\CURRENT\BOXNET.DOC Eric Ledoux$\\SIERRA\HIGH\CAT\CURRENT\BOXNET.DOC Eric Ledoux$\\SIERRA\HIGH\CAT\CURRENT\BOXNET.DOC Eric Ledoux C:\ETC\BOXNET.DOC Eric Ledoux C:\ETC\BOXNET.DOC @HP LaserJet IIISi PostScript LPT2: pscript HP LaserJet IIISi PostScript \foo.eps HP LaserJet IIISi PostScript \foo.eps Times New Roman Symbol Arial Courier New BoxNet Design Eric Ledoux Eric Ledoux
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\tools\graphedt\graphedt\proppage.txt ===
I made quite a few changes to the implementation of IPropertyPageSite
in GraphEdt. This now reflects the protocol intended by OLE.

Refer to "\\ole\specs\draft\Interface Specification for OLE Controls.doc",
which is by far the best documentation I have found on this.

A few things I have noticed in existing property pages, which will break
with my new version.

IPropertyPage::TranslateAccelerator - should return E_NOTIMPL if it doesn't
        process any messages, S_FALSE if it doesn't use this message and
	S_OK if if this message was used.

IPropertyPage::SetObjects - If called with parameter 0 all
	addref'ed pointers from a previous SetObjects call should be released.

	SetObjects will be called twice. Once with the pointers, second time
	with 0 to release them.

	SetObjects should be for initialisation/clean up of the property
	page.

IPropertyPage::Show - can be used to show or hide the property page
	(when user is clicking between tabs). Only SW_SHOW, SW_SHOWNORMAL
	 and SW_HIDE are allowed as argument.

IPropertyPage::Activate - this can also be used to show and hide the property
	page and can therefore be used more than once during the lifetime
	of a property page. (it is actually the prefered mechanism to
	show/hide the pages, since memory is only needed for the visible
	page.

IPropertyPage::Deactivate - Destroys a window, but state of property
	page must be kept for next Activate call.

IPropertyPage::SetPageSite - This must addref the pointer given to it and
	release the pointer if the argument is NULL.

Please read the documentation from \\ole - it specifies which return codes
are allowed and which are not.

Jonathan has actually started (maybe even finished) to implement a class
which deals with most of these methods in order to make the property
pages easier and faster to create.



=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\vidctl\deletedfiles.txt ===
as part of the security push we've deleted the following files.  
if anyone wants them back they should do a full security review


elementbehaviorimpl.h
htmlpainterimpl.h
msvidctl\rbfactory.h

these were used as the beginning of an attempt to expose vidctl as a binary element behavior.  
but this was never completed, and to reduce our security footprint and not have to implement
zone checking/security manager awareness for this method of object instantiation, we're just
taking it out altogether.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\vidctl\readme.txt ===
this file provides a brief synopsis of the naming conventions, and purposes of other files in this directory.

dirs:
caman - conditional access manager
cagseg - conditional access graph segment.  eventually caman, cagseg should be the same object/project/dir.  ask
	 johnbrad for more details
atl - private versions of atl headers(see readme in that dir)
atlwin - copy of atlwin. this should eventually be replaced with public\sdk\inc\wtl
msvidctl - the actual core vidctl 
auxcfg - utility objects to support configuration of analog auxiliary input devices for s-video or composite.
         this is incomplete(as of 8/00) , but intended to be UI-less helper objects based on the win98
 	 webtv for windows config page and aux-in filter.

files:

w32extend.h

this file provides a set of utility classes that make various win32 api's and structs easier to use from c++.

fwdseq.h

this file is a generic template for turning any sort of com object with a reasonably standard enumerator into
an stl style container with an forward(restartable input) iterator.   its so complicated because its working
around a couple of compiler bugs and its flexible enough to handle most next method signatures and names.

ksextend.h

utility classes, templates for simplifying the use of ks from c++ client code.  this supports easy access to
ks medium structures. 

dsextend.h, .cpp
these files provide a set of extension classes for core dshow objects.  many of these utilize the services in 
the other *extend.h files.  this includes a set of templates for making graphs look like an stl collection
of filters, filters a collection of pins, pins a collection of media types, pins a collection of mediums, 
dshow device enumerators a collection of device monikers, and other utility functions.

XXXimpl.h
these files provide an atl style default implementation template for the interface IXXXX.

scalingrect.h
this files provides a utility class which auto scales rectangles via mapwindowpoints based on the associated
hwnd.

objreghelp.h
replacement helper macros for atl object registration.  this is still based on the underlying atl registration
mechanics, but it shares a common __declspec(selectany) string copy of the common .rgs with many other
macro substitutions besides %module%.  this simplifies object registration and reduces executable size.

odsstream.h
standard library iostream backed by outputdebugstring so that tracing can use standard c++ io(esp. manipulators).

filterenum.h
standard ole collection on stl vector based list of filters

stextend.h
utlity classes to provide additonal global operators for certain stl objects.

arity.h
generalize of stl unary and binary functor objects.  this allows(more or less)arbitrary function signatures
to be use with stl function application templates such as std::for_each and std::find_if.
this was done as an experiment with a more functional style programming paradigm.  i'm in the process of 
pulling all this out as time allows.  this seems to confuse people very badly and given the fact that the compiler
doesn't deduce arguments correctly much of the time, forcing explicitly typed instantiation, empirical evidence
suggests that this stuff negatively impacts readability.  i'm in the process of converting all the std::find_if
and std::for_each to explicit loops and then this won't be needed any more.

devseq.h
typedef def'd instantations of fwdseq for various type safe device collections

mtype.*
private copy of standard dshow base class.  we statically link with the crt to avoid a dependency on msvcp60.dll
strmbase.lib is built for use with msvcrt.dll instead of libc.lib.  due to dllimport definition differences, this
causes different name mangling for many imports, and is incompatible enough to be unlinkable.  therefore, since
we're a client and not a filter anway, we don't link with strmbase.  we only link with strmiids.lib.

errsupp.h
inline helper for rich ISupportErrorInfo type error message from XXXXimpl files.

seg.h
standard type safe support for various kinds of collections of device segments.

todo.txt
notes about future ideas for improvements or bug fixes needed in the code. also, notes about commonly made
mistakes that need to be frequently re-reviewed.

throw.h
internal exception hierarchy

trace.h, trace.cpp
internal tracing mechanism

tstring.h
internal string typedefs for providing independent tracing support that can be compile time switched between 
atlwin/wtl/mfc CString and c++ standard library std::basic_string.  unfortunately, std::basic_string is broken 
badly enough that this isn't tenable.  this file and its dependencies should eventually get removed.

vidrect.h
automation compliant com wrapper for scalingrect.h
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\vidctl\todo.txt ===
`Continuing Review:
- make sure there are no [out] parms.  must be [in, out] or [out, retval]
- don't use leading underscore on names(except new enum) use attrs instead
- com categories including safe for scripting on all classes w/ object factory
	check regbag and tuner classes for this too.
- assignment operators/copy ctors in all atl smart ptr derived classes
- #pragma once in headers
- check non-extensible, non-createable attrs on .idl
- don't use hungarian in .idl it looks weird in vb object browser
- examine all VariantChangeType calls and make sure we're not doing any inplace calls on
  Variant* that are [in] only.  they don't belong to us and we shoudln't write to them.
  for example, they may be using a different heap than we are.
- new enum, ienumVARIANT.  make sure no ienumunknown or other types
- review // undone:
- review // REV2: to see if any can be moved to this version
- review E_NOTIMPL
- review cat maps to be sure eveyone has appropriate safe for scripting, etc.
- standard dispids

todo:
- missing default args on IMPLs that inherit from IDispatch
- make tuning requests use VT_BYREF for tuning space object and modify atlcom
	so this qi's for imoniker and saves a registry moniker
- figure out which properties should respond on propertynotifysink
- better errors when custom composition segments fail.
- figure out why graph build is only connecting composite between ati xbar and 829 xbar
  and, why it works anyway.
- decide what to do if vidprot can't get a def tr or something goes wrong in
  graph build.  do we try to fallback to some other form even if it doesn't have
  video so that at least there's a control object associated with the object tag?
- test hw slice codec analog graph build
- investigate atltrace showing up in release version
- stock readystatechange event on top level vidctl, state property to return graph state
- we need to figure out what the bug is that causes std::hex io maniuplator on our outputdebugstring iostream 
      support to start outputting floating point format for integers.  note, this only happens on unicode. i'm
      pretty sure that we're either missing or have incorrect some kind of overload for wchar in that case.
- set a flag in the bind context that allows us to call the tv: prot and just get a parsed tune request back
  instead of a new vidctl instance.  we can then use this if we get a view call for a BSTR.
- missing events: 
	EC_VIDEO_SIZE_CHANGED source size changed from video renderer, ontune from bda tuner.
	source size changed from video renderer, ontune from bda tuner.
- cat maps override IObjectSafety.  go through all objects and remove catid_safeforxxx and replace
  with IObjectSafetyImpl everywhere.  this is more consistent and should be faster since it saves
  having to hit the registry as much.

tuning model:
- tune.h helpers for componenttypes, components, and dvb
- status method on ITuner
- ontunerchangedevent, bcast event

spec:
- reflect imediaposition, don't pass through object.  we don't want script clients to ever have direct pointers to
      the graph.  we want to reserve the right to cache and swap graphs around as devices change in order to 
      optimize performance.  as things get more complicated, there will be trade-offs between change the existing
      graph dynamically and swapping entire graphs quickly.  we don't know what those heuristics are going to 
      be yet.  as long as we maintain wrappers around the real graph, we can change it under the covers at will.
- doc frame stepping and other mods to IPlaybackimpl
- do we want a plugable protocol vid:string rep of anything vid can view
- investigate:  we should possibly do an object based representation of dvd track/title, etc. this would allow
      us to leverage the sub stream components for karaoke, subpic, etc.  we would then move the dvd: url
      parsing that philliplu did up into the pluggable protocol and create a dvd object at that point.  then we 
      can treat dvd: exactly like tv: in the vidctl.  we should also figure out the assocation between these 
      objects and dvd bookmarks.  the advantage of having the parser in the protocol rather than the segment is
      that it allows view to optimize the device search by qi'ing for interfaces a ruling out or restricting the
      search to entire categories of devices instead of having to pass a string to every single device.
- do more comparison to existing media player and mci
- update tuning model. phys chan, msbda abbreviation, other stuff???

--------- future revisions -----------

tuning model:
- need to put default max prop size in ts w/ hidden restricted put_ in order to
  size limit check all the bstr properties to prevent dnos attacks that fill up the disk/registry.
  currently its a hardcoded 4k.
- currently, persisted tune requests make a copy of the tuning space values.  we need a registry moniker
    so that we can put a reference to the tuning space in the tune request.  this way if the a tuning
    space property changes all the tune requests will automatically reflect that change.
- fix component types persistence to use property bag in addition to pb2 and store count as an explicit property
- fix components collection to be persistable like

tuning model fixes that should be back-propped to dx 8.X:
- tune request object factories replaced for de-persisting
- VT_BSTR_BLOB change
- atl base class fix to not persist VT_DISPATCH or VT_UNKNOWN with null pointer
- DVBS hierarchy change


vidctl:
- investigate IDispatchEX. should we use this instead?
- investigate updating enums to use atl enum on stl for possible code size saving
- figure out interface support needed for being an ie effects 'filter' object. ala dxtransform or be a behavior
- investigate vs7 stl and see what impact this will have on us ahead of time
- think about an arbitrary render file device
- fwdseq, iterator comparison is doing a valuetype compare.  this is semantically suspect.
  we should really keep a counter and state and compare numbers of calls to next and FAILED(hr) 
  instead of comparing returned values.
- investigate mouse wheel support.  might be cool for dvd menus.  might also be useful event to pass to clients
- go thru and remove all the atlwin stuff and replace it with references to wtl.
      this include deleting atlwin, fixing resulting compile errors, and taking out all the non-cstring support
      from tstring.h, we're commited to tstring now.
- go thru and see if we can fix our debug infrastructure to rely on dshow's.  we may need to add our iostream on
      outputdebugstring support.  on the other hand, this probably can't be done if it creates a dependency on
      msvcpxx.dll for dshow. 
- cleanup all the tstring stuff.  we're committed to cstring now and there's no need to try to keep the 
	ability to switch between cstring and std::string
- we should expose the ability to set the number of streams on the video renderer on IMSVidGraphSeg so that
  c++ apps can change the default from the current value of 4. although 4, should be sufficient 98% of the time
  video, subpic, cc, plus a spare.
- there's room for perf optimization by reducing the amount of work done repeatedly in every vrsegimpl VRConfig
  call.
- put_container should support moving to a different graph and caching the old graph so that if we go
  back to it that we can recover the previous state without an expensive rebuild
- currently we load both the dsound renderer and the wave-in device into the graph for the default audio renderer
  because we don't know if our source will be analog or digital.  we need to change this to use the ksproxied
  sys audio(wdm system audio renderer) which supports both as soon as the sysaudio proxy bugs are fixed and
  the clock rate matching resampling code has been moved from dsound renderer to sysaudio.
- we need a segment registration scheme instead of the hardcoded list we currently have in whistler
- outputs is completely untested since we don't have any yet.
- support dynamic graph building 
- props on video renderer to report back max stretch and decimation

perf optimizations:
- go through mswebdvd*.* and a bunch of throws can be changed to returns, with a try catch at outermost level thus
  removing a bunch of interior try/catch setups

private atl:
- propertybag_load case VT_CLSID
  in addition to VT_BSTR should also check for VT_CLSID and should attempt VariantChangeType 

event binder:
- now that we know the script engine is guaranteed to provide the script site via IObjectWithSite
  we should query back up into the dom and support using the event binder from createobject()
  as well as from an object tag.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\dshow\vidctl\atl\readme.txt ===
these are the headers that must be placed ahead of public\sdk in order
to utilize atl improvements that i've made

- my version actually includes vc6 sp3 fixes which the sdk\inc\atl30 doesn't yet(as of 8/00).
- modified atlbase smart ptr classes to enable use of a custom stl allocator to allow ccomptr, ccomqiptr, 
	ccombstr, etc. to be placed by value into stl containers without converting to the 
	inefficient CAdapt class that lacks the operator& and thus causes an extra copy ctor generated 
	addref/release on every assignment and function call into or out of an stl container/iterator.
- property map chaining to allow base class persisted members to be specified in the base class impl templates.
- ctor/assignment support for additional types in CComVariant
- property bag load/save support for several additional VT_XXX types
- thread safety in the property bag support
- one line support for aggregating the free threaded marshaller(END_COM_MAP_WITH_FTM)
- thread safety for for collection and com enumerator on stl container support classes
- ocsncpy support in atlconv
- improvements to their .rgs script parser to allow me to use it to create a property bag on the rgs script so
          that i can self register objects much more easily using the existing
	  property map load stuff
- an assortment of misc bug fixes
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\embedded\build\readme.txt ===
I'm going to use the example of our Shell__Core.SLD file for this discussion, but you can replace all instances of "ShellCore" below with "DirectMusic" or "DirectShow" quite easily.
 
1) Annotate hivecls.inx, hivesft.inx, hivedef.inx with "@*:;begin_sld_ShellCore"/"@*:;end_sld_ShellCore" around the registry entries you want to include.  Note that these are prodfilt comment lines, so they have no effect on the actual hivecls.inf, hivesft.inf, hivedef.inf files generated for the core product.
2) Create a special SLD build directory and add "SLDFILES = ShellCore" and add "MISCFILES = $(SLDFILES)" to your Sources file.
3) In your makefile, !INCLUDE "makefile.sld" in addition to makefile.def
4) Building in this directory will generate ShellCore_Generated_Regsettings.inf, ShellCore_Generated_Regsettings_ADS.inf (iff there are server-only settings), and ShellCore_Generated_Regsettings_PRO.inf (iff there are pro-only settings).
5) Take the generated inf files and use INF2SLD to convert them to .SLD files. (NOTE: once the new componentization tools are released this step can be automated -- eta 2 Sept.)
6) Check this ShellCore_Generated_Regsettings.inf.SLD in right next to the Shell__Core.SLD file.  Note: the first time you do this, you need to add a registry key raw dependency in Shell__Core.SLD to one of the registry keys in ShellCore_Generated_Regsettings.inf.SLD so you suck in the generated file whenever the original component is selected.


To get auto-build-machine support to let you know when someone changed a .inf line that requires you to update your .sld files, do this:
1) Copy the generated obj\i386\*.inf to .\*.inf and check them in.
2) Have your auto build machine build in the special SLD generation directory.
3) Whenever you get a build error, someone changed an .inf file without updating the .sld files.  Start at step 5 above.


Whenever you get a bug about a missin registry line from hiveXXX.inf, simply update your annotations and re-run the makefile.


Please let me know of any bugs you find with this process.


Thanks,

 
--MikeSh
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\avicap\readme.txt ===
*******************************************************************************
NOTE: This tree is no longer used; AVICAP32.DLL is built from the ..\AVICAP.IO
      tree instead.
      --R Jernigan, 6 Dec 1995
*******************************************************************************

Readme.txt 
for AVICap Window Class


Files provided:

\       avicap.dll      Capture Window Class library
        avicap.lib      Import library for avicap.dll
        avicap.h        Include file for the AVICap class
        avicapid.h      Include file for AVICap class status and error IDs

\docs   avicap.doc      Documentation for the window class in WinWord format

\testcap                Directory containing source code for 
                        a test application, Testcap.exe.
                        This application has most of Vidcap's functionality.


Beta Release  August 93 Changes:
================================
1. Added wChunkGranularity, dwIndexSize, fStepCaptureAt2x, and 
wStepCaptureAverageFrames fields to the CAPTUREPARMS structure.  

2. Added WM_CAP_FILE_SAVEDIB message to save the current frame as a
DIB.

3. Added WM_CAP_FILE_SET_INFOCHUNK message.  This allows you to embed
copyrights, keywords, etc. into your AVI file.


Alpha Release 18 May 93 Changes:
================================
1. CAPSTATUS structure has additional fields including:
        hPalCurrent     - The current palette used for capture
        fCapturingNow   - If TRUE, streaming capture in progress
        dwReturn        - Return status value at termination of capture

2. Renamed a few messages.  In particular, note a totally different
   use for capCaptureSingleFrame, vs. capGrabFrame.

3. Capture can now run as a separate task.  See updates to the
   WM_CAP_SEQUENCE and WM_CAP_SEQUENCE_NOFILE messages, or
   capCaptureSequence and capCaptureSequenceNoFile macro functions.

4. WM_CAP_SEQUENCE_STOP and WM_CAP_SEQUENCE_ABORT messages added to 
   terminate streaming capture if either yielding or running as a 
   separate task.

5. WM_CAP_PAL_MANUALCREATE message added.

6. WM_CAP_SINGLE_FRAME_OPEN... messages added to append individual
   frames to the capture file.

7. The WM_CAP_DLG_VIDEOCOMPRESSION message is not yet functional.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\avifile\avifile.txt ===
AVIFile: it's not just an API set, it's a way of life.

So, people are confused about how to approach the AVIFile APIs.
Let's try to help by making some things clear.


1.  AVIFile isn't just for AVI files.
Perhaps this would be clearer if these functions had some different
name, but let's live with AVIFile for now.  The important thing to
keep in mind is that we aren't talking about .AVI files, but about
some ideal time-based file format which supports the operations we'd
like it to support, like reading and writing from multiple
time-stamped streams.  If the APIs conform closely to what's actually
in .AVI files, it's just because I made up both the .AVI format and
the AVIFile APIs.

The guiding principle is that any other type of file containing this
time-stamped sort of data, be it a QuickTime file, an MPEG file, a
.WAV file, or whatever, should be accessible in one simple way.

2.  AVIFile isn't just for files.  
Having a uniform API to read these different sorts of files is
convenient, but we can go beyond that.  Once you have the abstract
concept of a "file" which is a bundle of "streams" (each of which has
a particular data type and format, along with a start time and
duration, and can be read from or written to at various points in
time), it is clear that not every "file" needs to correspond to an
actual disk file, and not every "stream" has to come from a "file" at
all.  

Useful kinds of streams to think about: 
Entirely synthetic streams, like the bouncing ball example; in this
case, a "stream" reduces to a function GiveMeVideoFrame(x).
Streams which are essentially filters applied to other streams; for
example, given a stream of video (that is, some abstract object that
can hand you frame 4 if you want it), you can build from that a
"compressed" stream, which is simply a stream that when asked for
frame 4 goes and asks the original stream for its frame 4, then
compresses it and hands it back to you, saying "here's frame 4, all
compressed like you wanted it." 

3.  AVIFile tries to conform to the Component Object model.
Since AVIFile is intended to be extensible to support additional file
formats, it has to have some way of transparently linking to DLLs
containing routines that understand those file formats.  In the past,
we in MMSys have done this sort of thing using installable drivers
and a message-based scheme.  (See MCI, ICM, and more....)  With the
release of OLE 2.0, we have a new standard for this sort of thing.
It's a little scary at first, requires either C++ or some C++-like
thinking, and involves header files you haven't seen before.  In any
case, we're all going to have to live with it.

4.  Don't be intimidated by talk of C++ and "objects".  

From a C point of view, all an "object pointer" like a PAVISTREAM is
is a pointer to a structure whose first member happens to be another
pointer to a table of functions.  This means that in addition to
carrying around data like "how long is this video sequence", the
structure also contains pointers to code that knows how to actually
get things done.  All C++ does for you is provide a nicer syntax for
doing this sort of thing.

You can make yourself a PAVISTREAM by hand.  All you have to do
is allocate room for a structure big enough to contain the pointer 
to the function table and any other data you need to keep around.
Then, you make a function table with the Read, Write, and other
functions to operate on your type of stream, and make sure your
structure points to your table.  Just like that, you have a bona fide
PAVISTREAM which you can pass to AVISave, AVIStreamRead, and so on.

5.  Luckily, you can usually ignore all of the "Component Object model"
stuff.
Unless you're doing something complicated, you should be able to just
call the various AVIFileXXXX and AVIStreamXXXX APIs and pretty much
ignore all of the talk of ISomethingOrOther and CLSID_Confusing.

If you are trying to make a DLL that will add support for reading and
writing a new file format, you will in fact have to learn something
about what a "class factory" is, but cross that bridge when you come
to it.

6.  AVISave() is just a helper function.
All the AVISave function does is copy some streams into a new file.
It doesn't do anything that you couldn't do yourself by calling the
AVIFileXXXX and AVIStreamXXXX APIs.  It does, however, make your life
easier by: calling AVIMakeCompressedStream for you according to the
options you pass in; calling AVIFileOpen and AVIFileCreateStream
appropriately to make the new streams in the new file you're making;
and finally, looping through all of the streams from start to end
copying the data from the old streams into the new file, and doing it
in the right order so that things come out nicely interleaved.

7.  AVIStreamReadData, AVIStreamWriteData, AVIFileReadData, and
AVIFileWriteData are not actually for reading and writing real data.
I know, these routines have bad names and they're just confusing
everybody.  

What they're not for: These routines are not what you use to read and
write audio samples and video frames and that sort of thing.  For
that, you must use AVIStreamRead and AVIStreamWrite.  (If you have a
PAVIFile, call AVIFileGetStream and then call AVIStreamRead.) 

What they're for: Reading and writing copyright information, the
author's name, and other stuff like that that's kept in INFO chunks
in RIFF files.

8.  AVIStreamGetFrame is just another helper function.
AVIStreamGetFrame (and AVIStreamGetFrameOpen/Close) are just
functions which handle the relatively simple task of getting a
decompressed video frame out of a stream.  This involves finding the
right ICM decompressor for the task at hand, figuring out where the
last key frame was, and decompressing frames as necessary.

Perhaps this should all be done automatically for you; perhaps you
should do this instead by opening a "decompressed" stream based on
the compressed stream you want to read.  It's not either of those
ways now, so use AVIStreamGetFrame.

8a. What in heck is AVIMakeCompressedStream() for?
AVIMakeCompressedStream makes a new stream pointer for you that acts
just like the old stream you already had, but is compressed or
decompressed.  That isn't very clear, so I'll try again: If you have
a PAVISTREAM which, when you read it, gives you back 8-bit RGB frames
of "Gone With the Wind", you can use AVIMakeCompressedStream to make
a stream that will return the same pictures, but compressed in, say,
CRAM format.  The reverse is also true: given a compressed stream,
AVIMakeCompressedStream can make you an uncompressed version of that
stream.

To use it, just fill out an AVICOMPRESSOPTIONS structure.  (Or pass
NULL, which will decompress.)

In theory, you can either read from the compressed stream or write to
it.  (Right now, this still doesn't work for audio compression....)
However, you can only do one at a time.



9.  What in the world is an HRESULT?  
For some reason, all OLE 2.0 functions return HRESULTs which could
potentially contain extra information about an error that occurred.
For now, they are essentially just the same as a plain error code.  
To convert one of the AVIERR_XXXX codes to an HRESULT, call 
ResultFromScode() on it.  To convert back, use GetScode()....

10.  In its current state, AVIFile is not finished.
Some things which are bad about the current AVIFile APIs:
AVISaveOptions() puts up a nasty big nested dialog which isn't
user-friendly. 
AVISave() doesn't handle palette changes correctly.
Almost nothing handles the concept of, say, a wave format changing
halfway through a stream.
T here is no way to find when the next palette change happens, short
of asking for the video format on every frame until you find a place
it changes.
Dealing with compressed and uncompressed streams is kind of screwy.
If you know exactly what you have and what you want, you can call
AVIMakeCompressedStream() to do what you need.
Right now, the handler for compressing streams only supports reading,
not writing.  There is no reason this should be true, and maybe I'll
fix it.
There are no status callbacks for anything.  If something takes a
really long time, you wait.
Error returns are generally bad, if they're there at all.
There is no way to find what a specific handler can do short of
trying to do it and seeing what works.
The documentation is still primitive.

11.  Miscellaneous hints:
Be sure to call AVIStreamInit() and AVIStreamExit().  If you don't,
the component object DLL won't get initialized and nothing will work.
Be sure the right information is in your registration database.  It
should all get put there automatically, but isn't too resistant to
tampering. 

Some functions take pointers to long variables which need to be initialized
to the size of your buffer before you call them.  You need to use code like:
cbSize = cbBuffer; AVIStreamReadFormat(pstream, 0, lpBuffer, &cbSize);
After this, cbSize will contain the actual correct size of the format, which 
you can then compare to the size you passed in to see if your buffer
was large enough.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\avifile\aviread.doc ===
ۥ- !@	  , -             9  z                 9                                   v ;  v ; ]v   ]v   ]v   ]v   ]v  kv t v  w   w   w   w  w  w   w S  x  6x   6x   6x   6x   6x   6x   6x   6x  8x   8x   8x   8x   8x   8x  az 4 z > Vx ]v         Vx   Vx                                                                   EMBED PBrush  \* mergeformat \s

NOTE:  The AVI read APIs are very preliminary and are totally unsupported by Microsoft Corp. at this time.   You are free to use the .lib and look at the sample code to figure out how to use these APIs to read data from AVI files.   We make no claims that this will be unchanged or become part of a final product.  






Reading AVI files

This document explains how to read and display frames of an AVI file from within an application.  There are functions to open up a certain stream of an AVI file, read frames of data from that stream, and get some information about the stream.  

You will come across the concept of streams many times when dealing with these API's.  Essentially, a video file can contain several different types of data, for instance a video sequence, an English soundtrack, and a French soundtrack.  For convenience, and to allow separate access to these components of a file, we refer to each of these as a separate stream, and when we open the file and get data from it, we tell it which stream we are interested in.

AVIVIEW.C  is a sample application that opens up every stream in an AVI file and displays the data for each stream in a window as a bunch of horizontal stripes of bitmaps (for a Video stream) and waveforms (for an Audio stream).  You can then scroll horizontally to see the data at any point in the file.

Opening a Stream in an AVI file

Once you know the filename of the AVI file, you open a stream with the AVIStreamOpen command:

PAVISTREAM AviStreamOpen(LPSTR szFile, DWORD fccType, LONG lParam, 						  PAVISTREAMHANDLER p)

szFile is the filename of the AVI file.  fccType is the type of stream.  The two choices for a regular AVI file are streamtypeVIDEO and streamtypeAUDIO.  An AVI file may also contain other types of streams.  The lParam is the number of the stream you want.  Zero is the first stream. If there is no type, the AVI handler will choose a stream for you.  If you specify a stream type, the AVI handler will give you a stream of that type.  The important thing to know is that you can call AviStreamOpen inside a loop with successively greater values for lParam, and open every stream in the file (or every stream of a given type).  As soon as the call returns NULL you have run out of streams.  If you are reading an ordinary AVI file, you can pass NULL for the PAVISTREAMHANDLER, to indicate that you want AVI to use its default handler.

If, however, you are opening a non-AVI file and wish to use these read APIs to access the data in that file even though it is not really an AVI file, you can... IF someone has written a stream handler for that type of file.  Ordinarily, you would pass NULL for the PAVISTREAMHANDLER for reading standard AVI files, but in this case you would pass a pointer to a handler that understood the type of file you were reading.  For information about writing a custom stream handler, see the document entitled "Using Custom Stream Handlers".  AVIVIEW.C uses these same APIs to read both AVI files (using the default handler) and to read an imaginary BALL file (using the custom stream handler "BALL" described in the document "Using Custom Stream Handlers").

AVIStreamOpen returns a pointer to a stream which you use in all subsequent calls to read data or get information or set options for that stream.

Here is the code fragment that AVIVIEW.C uses to open every stream (regardless of type) of the file "szFile" and remember the stream pointers returned by the Open function in an array:


gcpavi = 0;		//how many streams are opened

for (i = 0; i < MAXNUMSTREAMS; i++, gcpavi++) {
        gapavi[i] = AVIStreamOpen(szFile, 0L, i, NULL);
	if (gapavi[i] == NULL)
	    break;
    }


LONG AVIStreamAddRef(PAVISTREAM pavi)

This function increases the reference count of a stream pointer you have opened with AVIStreamOpen, if, for example, you are passing the pointer to a function that will be closing the stream, and you wish to keep the stream open.  You must call AVIStreamClose once for the AVIStreamOpen call, and once for every reference count increase you make with AVIStreamAddRef.




Closing a Stream

Once you are done reading from the stream, you close it by calling 

AVIStreamRelease(pavi);

You need to individually close every stream of the file that you opened.




Getting information about a Stream

Use the call:

LONG AVIStreamInfo(pavi, &avis, sizeof(avis))

to fill an AVIStreamHeader structure with information about a stream you have opened.  Use the stream pointer returned by the open call.  If you pass NULL for &avis, the function will return the size of the AVIStreamHeader structure.  Here is the information you get about a stream in an AVIStreamHeader:


typedef struct {
    DWORD               fccType;		// eg. streamtypeVIDEO
    DWORD               fccHandler; 
    DWORD               dwFlags;		// Contains AVITF_* flags
    DWORD               dwPriority;		
    DWORD               dwInitialFrames;
    DWORD               dwScale;        
    DWORD               dwRate; 		// dwRate / dwScale ==
								samples/second
    DWORD               dwStart;
    DWORD               dwLength;		// In units above...
    DWORD               dwSuggestedBufferSize;
    DWORD               dwQuality;
    DWORD               dwSampleSize;
    RECT                rcFrame;
    DWORD			dwEditCount;
    DWORD			dwFormatChangeCount;
    char			szName[64];
} AVISTREAMINFO;

For more information about the fields of this structure, see the Video for Windows Development Kit, chapter 4: AVI Files.  


Getting the Format of the Stream Data

LONG AVIStreamReadFormat(PAVISTREAM pavi, LONG lPos, 
				LPVOID lpFormat,  LONG cbFormat)

This function will return a format structure telling you about the data at a given position in the stream (a sample number for audio streams, or a frame number for video streams).  For a video stream, the buffer will be filled with an LPBI, with the palette information following it (if applicable) but NO DATA BITS.  For an audio stream, you will get a PCMWAVEFORMAT structure.  For a different type of stream, you will get whatever format data is associated with that type.

If you pass in a NULL buffer, the function will return the size of the buffer it needs to give you the format data.  The function always returns the number of bytes of information placed in the buffer.

For example, if you wanted to know the frame size or the bit depth or the palette being used by a given frame of the AVI's video stream, this function will return an LPBI that you could examine.  This function can also be used to determine the sample rate or quantization of the the audio.




Reading Data From a Stream

There are several ways to read data from a stream:

LONG AVIStreamRead(PAVISTREAM pavi, LONG lStart, LONG lSamples,
				LPVOID lpBuffer, LONG cbBuffer,
				LONG FAR * plBytes, LONG FAR * plSamples)


This function will read raw data from the stream into a buffer you supply.  You give the start sample (frame) and the number of samples (frames) to read.  The function can return the number of samples read, and also the number of bytes read (to store that many samples).

If you do not supply a buffer, the function will return the number of bytes required to store the sample data you request.

This function returns raw data.  For a video stream, this will be the bits that make up the image (that need to be placed after the LPBI returned by AVIStreamReadFormat to make up the DIB).  This image may be compressed and useless to you until you decompress the image into something you can display using the Image Compression Manager (ICM) described in the Video for Windows Development Kit, chapter 2: Using the Installable Compression Manager.  The type of compression will be indicated by the LPBI returned by the AVIStreamReadFormat call.  For a video stream, the length parameter lSamples is ignored, and the buffer is only filled with data for a single frame.

For an audio stream, the data returned will be actual wave samples.  These wave samples may also be compressed.  The compression type is indicated in the PCMWAVEFORMAT returned by the AVIStreamReadFormat call.


LPVOID AVIStreamGetFrame(PAVISTREAM pavi, LONG lPos)


If you don't want the hassle of reading the format and the data bits for a video stream and then handling the decompression yourself, the above call will do all of this for you.  If the frame of video you are reading depends on data in previous frames to make up its image, this function will also read all the data since the previous key frame up until the frame you specify to build up the entire image for the frame you request.  

AVIStreamGetFrame takes a pointer to a video stream, and a position (frame number) in the file and returns an LPBITMAPINFOHEADER which points to a valid uncompressed DIB that can be displayed using standard Windows calls, or using the DrawDib routines which handle images of different bit depths, and automatic dithering for displays that can't handle certain types of DIBS.  The DrawDib functions are described separately in the Video for Windows Development Kit, chapter 3: Using the DrawDib Functions.

LPVOID AVIStreamReadData(PAVISTREAM pavi, DWORD fcc, LPVOID lp,
					LONG cb)

Not implemented.  To be announced.



Finding Key Frames, Non-empty frames, or Format Changes in a Stream

AVIStreamFindSample(PAVISTREAM pavi, LONG lPos, LONG lFlags)

This function will start at the position in the file that you specify, and search forwards or backwards (depending on the flags set) for the nearest key frame, non-empty frame, or format change, and return that frame number.

The possible flags for search direction are FIND_PREV and FIND_NEXT.  Both of these flags will return lPos if the sample given qualifies.

The possible flags for search item are FIND_KEY, FIND_ANY, or FIND_FORMAT.


Positioning Within a Stream

LONG AVIStreamStart(PAVISTREAM pavi)

will return the sample (frame) number of the first sample in the stream.  Use this number with the read functions to access the first  sample of data.  (For instance, the frames of a movie may be counted starting at zero or one depending on the preference of the author).  This value can also be found in the AVISTREAMHEADER structure returned by the AVIStreamInfo call.

LONG AVIStreamLength(PAVISTREAM pavi)

will return the number of frames (or samples) in the stream.  This value can also be found in the AVISTREAMHEADER structure returned by the AVIStreamInfo call.

LONG AVIStreamSampleToTime(PAVISTREAM pavi, LONG lSample)

will take a sample (frame) number of an AVI stream, and return the time, in milliseconds, associated with that sample.  For a video frame, this will be the time, offset from zero for the start of the movie, that this frame will appear when the AVI is played at its proper speed.  For an audio sample number, this will be time that the particular sample will be heard.

LONG AVIStreamTimeToSample(PAVISTREAM pavi, LONG lTime)

is the opposite of AVIStreamSampleToTime.  It is more accurate to deal with the position of a file using its sample number, since the time in milliseconds is only an approximation of when an event is taking place.  These functions are not true inverses, as two consecutive samples of audio may both be heard in the same millisecond, and converting the time value back to a sample number may give a different sample number than the original one.



Helper Macros

There are also a number of macros available that combine the functionality of the above functions to make it easier for you to perform certain common tasks.  These macros are listed below, followed by the code they translate to, along with an explanation.


AVIStreamSampleToSample(pavi1, pavi2, lSample) :=
           AVIStreamTimeToSample(pavi1,AVIStreamSampleToTime(pavi2, lSample))

Given a sample in the stream pavi2, this will return the sample in pavi1 that occurs at the same time as the given sample.

AVIStreamNextSampleTime(pavi, t) :=
            AVIStreamSampleToTime(pavi, AVIStreamTimeToSample(pavi, t) + 1)

This macro will tell you when the sample occuring at the time you provide will change to the next sample.  Basically, it informs you of the next "interesting" time in the stream.

AVIStreamPrevSampleTime(pavi, t) :=
            AVIStreamSampleToTime(pavi, AVIStreamTimeToSample(pavi, t) - 1)

This macro is similar to AVIStreamNextSampleTime, but looks at the time for the sample that comes BEFORE the time you provide.






AVIStreamNextKeyFrameTime(pavi, t) :=
            AVIStreamSampleToTime(pavi,
		AVIStreamFindKeyFrame(pavi, AVIStreamTimeToSample(pavi, t), 			SEARCH_FORWARD))

This macro returns the time of the next key frame in the stream, starting at a given time that you provide.

AVIStreamPrevKeyFrameTime(pavi, t) :=
            AVIStreamSampleToTime(pavi,
		AVIStreamFindKeyFrame(pavi,AVIStreamTimeToSample(pavi, t), 			SEARCH_BACKWARD))

This macro returns the time of the most recent key frame that occured before the time that you provide.

AVIStreamStartTime(pavi) :=
            AVIStreamSampleToTime(pavi, AVIStreamStart(pavi))

This macro returns the starting time of the stream's first sample.

AVIStreamLengthTime(pavi) :=
            AVIStreamSampleToTime(pavi, AVIStreamLength(pavi))

This macro returns the length of the stream in time, not samples.

AVIStreamEnd(pavi) :=
            (AVIStreamStart(pavi) + AVIStreamLength(pavi))

This macro returns the sample number associated with the end of the stream.  This sample number is not a valid sample number to be read, but represents the end of the file.

AVIStreamEndTime(pavi) :=
            AVIStreamSampleToTime(pavi, AVIStreamEnd(pavi))

This macro returns the time representing the end of the stream.

AVIStreamSampleSize(pavi, lPos) :=
	    AVIStreamRead(pavi, lPos, 1, NULL, 0, NULL, NULL)

This macro returns the size of the buffer needed to store one sample of information from this stream (the sample at the position you provide)

.

AVIStreamFormatSize(pavi, lPos) :=
            AVIStreamReadFormat(pavi, lPos, NULL, 0)

This macro returns the size of the buffer needed to store the format information for the sample at the position that you provide.

Coe  :  w              &                       	  \2   2               z 2  A    z      z     (   z                                                     ʦ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    U                                                                                                                                                                                                                                         V                                                                                                                                                                                                                                        <                                                                                                                                                                                                                                                                                                                                                                                                                                                                                _                                                                                                                    W                                                                                                                    ^                                                                                                                    #                                                                                                                                                                                                                                  .                                                                                                             
I                                                                                                                                                                                                                    /y                                                                                                                                                                                                       &                                                                                                   $                                                                                                   U                                                                                                     |                                                                                                                                                                                                                 <D                                                                                                           "                                                                                                           x                                                                                                           N                                                                                                           f@                                                                                                         P                                                                                                           zz                                                                                                                                                                                                                     >                                                                                                          "                                                                                                          z                                                                                                          n2                                                                                                          )                                                                                                          f                                                                                                         a                                                                                                          `                                                                                                          f                                                                                                                                                                                                                  *                                                                                                          Vz                                                                                                             _c                                                                                                               B                                                                                                                                                                                                                                                                                                                                            g                                                                                                           Vl                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         `                                                                                                                                                                                                                  ,                                                                                                                                                                                                               `                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     `                                                                                                                                                                                                                  F                                                                                                                                                                                                                            `                                                                                                                                                                                                                                                                                                                                                                                                                                                       Wi                                                                                        g                                                                                                                                                                      VW                                                                                `                                                                              K                                                                            M                                                                                                                                                    _8                                                                          ̱                                                                                                            `                                                                                                                                                                                              u,                                                                                   V                                                                                                                                                                      $                                                                                                            n|                                                                                                                                                                                                                                                                                 V                                                                                                                                                                                                                                                                       n|                                                                                                        <                                                                    D                                                                                                                                                                                                       ?                                                                                                                                          `                                                                        4                                                                                                                                                 ut                                                                         ai                                                                       MS                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           l                                                                        `g                                                                        j1                                                                                                                                                `#                                                                                                                                        
c                                                              h                                                          `                                                      Hu                                           %`                                                                                                                                 l1                                                                                                                                 I                                           y                                                                                          (                                             t                                                                                            sd                                               p                                               
                                                                                                  ~                                                                                                                                                                                                                                                                 h                                                       m                                                         n                                                         N                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ?                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            -                                                  4       d`            PBrush        0 0 122 198  d  BMd      6  (   z            _                                   ʦ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            METAFILEPICT   d   wf 	  \2   2               z 2  A    z      z     (   z                                                     ʦ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    U                                                                                                                                                                                                                                         V                                                                                                                                                                                                                                        <                                                                                                                                                                                                                                                                                                                                                                                                                                                                                _                                                                                                                    W                                                                                                                    ^                                                                                                                    #                                                                                                                                                                                                                                  .                                                                                                             
I                                                                                                                                                                                                                    /y                                                                                                                                                                                                       &                                                                                                   $                                                                                                   U                                                                                                     |                                                                                                                                                                                                                 <D                                                                                                           "                                                                                                           x                                                                                                           N                                                                                                           f@                                                                                                         P                                                                                                           zz                                                                                                                                                                                                                     >                                                                                                          "                                                                                                          z                                                                                                          n2                                                                                                          )                                                                                                          f                                                                                                         a                                                                                                          `                                                                                                          f                                                                                                                                                                                                                  *                                                                                                          Vz                                                                                                             _c                                                                                                               B                                                                                                                                                                                                                                                                                                                                            g                                                                                                           Vl                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         `                                                                                                                                                                                                                  ,                                                                                                                                                                                                               `                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     `                                                                                                                                                                                                                  F                                                                                                                                                                                                                            `                                                                                                                                                                                                                                                                                                                                                                                                                                                       Wi                                                                                        g                                                                                                                                                                      VW                                                                                `                                                                              K                                                                            M                                                                                                                                                    _8                                                                          ̱                                                                                                            `                                                                                                                                                                                              u,                                                                                   V                                                                                                                                                                      $                                                                                                            n|                                                                                                                                                                                                                                                                                 V                                                                                                                                                                                                                                                                       n|                                                                                                        <                                                                    D                                                                                                                                                                                                       ?                                                                                                                                          `                                                                        4                                                                                                                                                 ut                                                                         ai                                                                       MS                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           l                                                                        `g                                                                        j1                                                                                                                                                `#                                                                                                                                        
c                                                              h                                                          `                                                      Hu                                           %`                                                                                                                                 l1                                                                                                                                 I                                           y                                                                                          (                                             t                                                                                            sd                                               p                                               
                                                                                                  ~                                                                                                                                                                                                                                                                 h                                                       m                                                         n                                                         N                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ?                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            -                                                  4       A(pavi, l) :=
	AVIStreamFindSample(pavi, l+1, FIND_NEXT | FIND_KEY)

This finds the next key frame, not including l.

APrev(pavi, l) :=
	AVIStreamFindSample(pavi, l-1, FIND_PREV | FIND_KEY)

This finds the previous key frame, not including l.

ANearest(pavi, l) :=
	AVIStreamFindSample(pavi, l, FIND_PREV | FIND_KEY)

This finds the previous key frame, including l.
ANext                                        X  g  l  {  p  5  9  b        6  M              A    ^          "  $        Q          :   !  %"  +"  e"  f"  %  %  %  *&  X&  &  &  '  '  '  (  w(  (  (  (  (  (                                            $                          :   
              L(  (  (  ]*  *  )+  f+  ,  -  .  .  /  r0  0  0  0  0  0  d1  2  2  3  3  *4  4  4  5  :5  5  5  B6  6  6  7  7  %8  8  9  y9  9  9  9  |h }h h h h h h h h &i 'i /i 3i Ai Ci vi xi zi {i i i i i i i i i i ;v Vv Wv [v ]v                                                                                                                       J                                                 (  *          l  n  p          !  .  5  7  9  `  b                4  6  O  Q                    	    =  ?  A  ߼߲߷              !    !     !     	!   !    !    !    !    !    !    !    !K             m1 0 DA  S          A  k          H  l          	                  $  &                        O  Q                x  z  !  !  !  !  !  '"  )"  +"  #  #  %  %  &  ,&  .&  R&  T&  V&  X&  &  &  &  &  '  '                 !K    !    !   !    !    !    !    !    !K    !     !    !  K'  N(  P(  (  (  (  (  (  (  (  [*  ]*  *  *  '+  )+  d+  f+  ,  ,  -  -  .  .  .  .  .  .  /  /  /  !0  p0  r0  0  0  1  b1  d1  2  2  ?2  2  2  3  3  3  3  3  3  3  A3  j3  3  3  ,4  .4  U4  ~4  4  4  <5  >5  [5  5  5  5  5   6  @6  B6  6  6  6  6  6  7  7  7  7  7  '8  )8  M8  8  8       !    !    !    !K    !     !     !   !; U8  9  9  9  9  A9  w9  y9  9  9  h h h h h 
i Ai Ci xi zi i i i i                                                                                                                                                                                                                                                                                                                                                                                       !    !     Code   F        	                     StreamTimeToSample(pavi, t))Prev))    9             o   (  0  6  9     )                                 1  1  1  1  2  2  B2  y2  {2  2  2  2  3  3  @3  B3  3  4  9  9   ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !  (  ]v     A  '  8  i     S  Times New Roman 	Symbol & Arial 
1 Courier 5 Courier New  CG Times (W1)         "   9  :    4  4     4      4      1  1  1  1  1  2  2   2  (2  ,2  42  ^2  _2  g2  k2  y2  2  2  2  2  2  2  2  2  2  2  3  3  @3  B3  C3  3  3  3  3  3  3  4  4  4  4  9  9       |h   3    }h   h   h   h   h   3    h   '3    h   &i   'i   /i   3i   Ai   vi   xi   zi   3    {i   '3    i   i   i   i   i   i    3    i    3    i   y3    ;v   3    Vv    3    Wv   4    [v    4     9    "       h    ѥ٥                      >   Using the AVI Read API's   DannyMiDanny Miller         
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\avifile\readme.txt ===
Things to do in AVIFile:

Need handlers for:
	Quicktime files
	Targa files
	JPEG files
	MPEG files

Improve streaming interface

Speed improvements:
	Use GlobalDosAlloc for buffers?
	Read several frames at one time?

Current bugs:
	Error returns are lousy.


More things to do:
	Automatically generate open/save filter strings.  This would 
	require that we put something in the regdb to indicate which 
	handlers supported writing....

	Should there be some way to pass AVIFileOpen an HMMIO?  An
	IStorage or IStream?

	It would be nice to have some way to be notified when the contents
	of a stream change....  Look at IAdviseHolder

	ReadData and WriteData need to be renamed, because they
	confuse everybody.  Also, need better method for accessing
	DISP and LIST `INFO' chunks.

	Stream names need to be better supported.

	During long operations, we need some kind of status callback.

	Should everything have version numbers?

	"capabilities": Additional information via AVIFile/StreamInfo
	about what the handler can do

	Do handlers need parameters somehow?  Some way to configure
	stuff for a particular file format?  Am I deluding myself into
	thinking I can get away without this stuff?

	More thought is needed about "non-seekable" streams.  For
	instance: can a video capture device be thought of as a
	stream? 

	Can making a stream handler be made easier?  One thought: a
	C++ base class for a stream handler which people could
	override only the methods they want....

	How can you change the rectangle for a stream?
	Do we need an AVIStreamSetInfo command?


	Can we make streams be named?  Instead of opening streams by type 
	and number, people could enumerate the streams in a file and open
	them by name....  Looks more and more like IStorage....


	Everything needs to be renamed.  Functions shouldn't all
	start with "AVI".

	We need a new interface to handle change notifications.  Copy
	OLE Advise Holders, Advise Sinks.


	Marshal the AVIFile reader in the following way:
	Right before reading from an HMMIO, check the current task.
	Re-open the file for each new HTASK....

	Some way of getting an error string from an error value would
	be good.


	I don't really use the IEditStream interface for everything.
	I should make Vtbls for the editstrm.c implementation, and allow
	other handlers to support the stuff.

	How can you use ReadData/WriteData to deal with more than one
	chunk with the same ID?  How about INFO chunks?


Old Stuff that's done:

	Does AVIStreamWrite need some way of returning how much of the
	data was actually written?  (Particularly in the case where
	it's doing ACM compression, it may only be able to write out 
	whole blocks of data....)


	EditStreamSetName
	EditStreamClone

	AVIStreamInfo could use a different structure than an
	AVIStreamHeader.  In particular, the structure could lose
	some useless fields and gain the stream name.  Same with
	AVIFileInfo. 

	During long operations, we need some kind of status callback.	


	Look at using IAVIFile, IAVIStream on the clipboard along with
	IDataObject.  This seems to require some work to "marshal"
	the interface from app to app....

	Given an open IAVIFile handle, retrieve its "file format", that
	is, some user-readable name for what kind of file it is....

	It would be nice to be able to write to the compression streams

	The options dialog doesn't make me happy....
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\avifile\usage.txt ===
Using AVIFile.


Initializing the AVIFile DLL:
Before using any of the APIs in AVIFILE.DLL, be sure to 
call AVIStreamInit.  After using them, call AVIStreamExit.
If you don't, bad things will happen.


Using AVIFile to read some kind of file: 

First, call AVIFileOpen with the OF_READ flag to open the file.
Then, you can call AVIFileInfo to find out how many streams are in
the file, and AVIFileGetStream to retrieve the streams you want.

Once you have a stream, you can can AVIStreamReadFormat to get the
bitmap format or wave format, and then call AVIStreamRead to actually
read the data you want.





AVIFile and the Component Object model:

The AVIFile APIs include two interfaces, IAVIFile and IAVIStream,
which work with the Component Object model which is part of OLE 2.0.

Class IDs
Each server or DLL that handles these interfaces needs to have a
Globally Unique ID (GUID), so that it can be distinguished from all
other handlers.  OLE uses 16-byte identifiers for this purpose.  If
you're making a new handler, you can run the UUIDGEN program to make
yourself a unique ID.

The Registration Database
The registration database is essentially just a replacement for .INI
files.  To look at what's going on in it, run "regedit -v".

DLLs which implement the IAVIFile and IAVIStream interfaces all need
to be listed in the registration database so that they can be found
when necessary.

Each DLL must be listed in the registration database by class ID,
with entries of the form:


HKEY_CLASSES_ROOT\Clsid\{00020003-0000-0000-C000-000000000046} = Wave File reader/writer
HKEY_CLASSES_ROOT\Clsid\{00020003-0000-0000-C000-000000000046}\InprocServer = wavefile.dll

where HKEY_CLASSES_ROOT is the root of the entire registration
database.  The InProcServer entry indicates that wavefile.dll can be
loaded within an application to implement the class in question.

The AVIFile library uses additional entries in the registration
database in order to know which handler to use by default to open a
given file.  If the file is a RIFF file, 

HKEY_CLASSES_ROOT\AVIFile\Extensions\WAV = {00020003-0000-0000-C000-000000000046}
HKEY_CLASSES_ROOT\AVIFile\RIFFHandlers\WAVE = {00020003-0000-0000-C000-000000000046}

You get a GUID by running the uuidgen.exe program that comes
with the SDK; it will spit out a 16-byte hex number for you.  You then
make a file with a .REG extension that looks like:
REGEDIT
HKEY_CLASSES_ROOT\Clsid\{5C2B8200-E2C8-1068-B1CA-6066188C6002} = JFIF (JPEG) Files 
HKEY_CLASSES_ROOT\Clsid\{5C2B8200-E2C8-1068-B1CA-6066188C6002}\InprocServer =jfiffile.dll
HKEY_CLASSES_ROOT\AVIFile\Extensions\JPG = {5C2B8200-E2C8-1068-B1CA-6066188C6002}

(Of course, use your GUID here.)  Then, on a user's machine, they can run
regedit -s whatever.reg and these definitions will get added to the 
registration database, allowing the system to find your DLL and know what
sorts of files it can load.



What are IAVIFile and IAVIStream?
(Note: you may just want to read the OLE 2 documentation here....)

These are examples of "interfaces".  An interface is a collection of 
"methods".





Implementing a handler DLL



IClassFactory
Obviously, it isn't enough for OLE to know the name of your DLL; some
standard entry point is required to establish communications.  The
method through which COMPOBJ.DLL does this isn't exactly
straightforward.  A handler DLL must export a DllGetClassObject
function; COMPOBJ calls that function to ask the DLL to return an
instance of the IClassFactory interface, which it then uses to
actually acquire an instance of the IAVIFile interface that we
actually care about.


Single-stream vs. Multi-stream
AVI files obviously support more than one stream of data in each
file.  Wave files, for example, are much simpler, in that they only
can have exactly one stream of audio.  This means that we only need
one stream object around, and we can make things even simpler by
having the same object support both the stream and file interfaces.

If you know that your handler will support, say, exactly one audio
and one video stream, things are also simpler than the completely
general case, because when you create your file object, you know that 
you will have to create exactly two stream objects.


Read-only vs. Read-write

A handler can be written which only supports reading or writing; you
can always return an error code from any method.  (One suggestion:
don't return unsupported from the FindSample function, but rather
just return that every frame is a key frame, every frame is non-empty, and 
that the only format change is frame 0)


Using C++
These handlers don't actually need to be implemented using C++; it
was just easier that way.


Installing your handler:
For your handler to be found, it needs to have the appropriate
entries in the registration database.
















Compression DLLs
When you call AVIMakeCompressedStream, you pass in a PAVISTREAM and
are returned another PAVISTREAM.  This new stream can be used in two
ways: either you can read from the stream, in which case you will
read data which is compressed from the original stream, or you can
write to the new stream, in which case the data you write will be
compressed and written to the original stream.

To use the "read" method, you would use the following sequence of
calls: (extra parameters left out because I can't remember them at
the moment)
AVIFileOpen(&pf, "foo.avi",...)
AVIFileGetStream(pf, &ps, ...)  
AVIMakeCompressedStream(ps, &psC, &options, ...)
AVIStreamReadFormat(psC, lpFormatC, &cbFormatC) // get compressed format
for (loop through frames)
	AVIStreamRead(psC, frame, ....)  // read compressed frames

To use the "write" method:
AVIFileOpen(&pf, "foo.avi", OF_CREATE | OF_WRITE...)
AVIFileCreateStream(pf, &ps, &strhdr, ....)
AVIMakeCompressedStream(ps, &psU, &options, ...)
AVIStreamSetFormat(psU, lpFormatU, cbFormatU) // set format of data
					// to compress
for (loop through frames)
	AVIStreamWrite(psU, frame, ....)  // write uncompressed frames,
					// which will be compressed and
					// written to the file





Using the Clipboard functions

The clipboard functions are easy.  To copy a bunch of streams to
the clipboard, call AVIMakeFileFromStreams to bundle them up into a
single PAVIFILE, then call AVIPutFileOnClipboard.  To get data off of
the clipboard, call AVIGetFromClipboard.  To see whether any data is
present on the clipboard, for enabling menus or such, you can just
call AVIGetFromClipboard to see if it returns anything, and release
any file it returns.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\avifile\aviview\aviview.txt ===
Things to do with AVIView:
	Make some way of selecting streams/frames
	Need some way to edit

	Make play work with no sound
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\avifile\aviview\aviball.doc ===
ۥ- !@	    -             k;  G                  9                                   F  @  F  @ @F    @F    @F    @F    @F   NF  f F    F    F    F    F  
 F   F    F  O )G    )G    )G    )G    )G    )G    )G    )G    )G   /G    /G    /G    /G    /G    /G   MG  4 G  6 MG    @F          MG    MG                                                                    Custom Stream Handlers

Overview

If you have a custom file format for a video file that you would like the AVI Read API's to be able to understand, you need to write a custom stream handler.  If an application wishes to read your file using the standard AVI API's, they simple give the name of your handler when opening the file, and the system will use your handler's functions instead of AVI's default functions to access the data in the file.  This way, your custom file format seems to be just like a standard AVI file to any application that wishes to read it.

You will come across the concept of streams many times when dealing with these API's.  Essentially, a video file can contain several different types of data, for instance a video sequence, an English soundtrack, and a French soundtrack.  For convenience, and to allow separate access to these components of a file, we refer to each of these as a separate stream, and when we open the file and get data from it, we tell it which stream we are interested in.

To write a stream handler, you must provide the following six functions:

	Open			Prepare to read information from one of the streams

	Close			Free any resources used when the stream was open

	Info			Fill an AVIStreamHeader structure with info about a stream

	GetKeyFrame	Finds the nearest keyframe in a stream

	ReadFormat		Gets format information for a certain location in a stream

	Read			Reads data from a stream from a certain location

AVIBALL.C is sample code that is a custom stream handler and provides these functions, demonstrating  how these routines must be implemented.  It is a simple handler that only deals with one stream - a video stream.  It doesn't read any actual disk files, but rather creates information for its video frames algorithmically.  This demonstrates how you can truly create a stream handler to work with any type of data you want.   Our AVIBall example generates a movie that shows a coloured ball bouncing around the frame and off the sides.

Registering Your Handler

The first thing you must do is provide an array of function pointers to your code.  You can name your functions anything you want, but they must appear in a certain order in an AVISTREAMHANDLER structure.  Here is what AVIBALL does.  Notice that there is no concept of key frames in our files, so we don't need to implement that function.  By default, the application will be returned the same frame number they passed as being a key frame (every frame will be a key frame).


static  LONG    CALLBACK AVIBallOpen         (PAVIBALL pball, LPSTR szFile, DWORD fccType,
LONG lParam);
static  LONG    CALLBACK AVIBallClose        (PAVIBALL pball);
static  LONG    CALLBACK AVIBallInfo         (PAVIBALL pball, AVIStreamHeader FAR * psi, LONG
lSize);
static  LONG    CALLBACK AVIBallReadFormat   (PAVIBALL pball, LONG lPos,LPVOID
lpFormat,LONG cbFormat);
static  LONG    CALLBACK AVIBallRead         (PAVIBALL pball, LONG lStart,LONG
lSamples,LPVOID lpBuffer,LONG cbBuffer,LONG FAR * plBytes,LONG FAR * plSamples);

AVISTREAMHANDLER AVIBallHandler = {
    AVIBallOpen,
    AVIBallClose,
    AVIBallInfo,
    NULL,       // we dont handle FindKeyFrame, because every frame is a key frame
    AVIBallReadFormat,
    AVIBallRead
};

/* TODD:  What other entries must we provide? */

Open

An application will call AVIStreamOpen to open up a stream.  If they use the address of the AVISTREAMHANDLER structure you filled in as the last parameter, all subsequent AVIStream calls (including that open) will be re-routed to your routines instead of the defaults.  In our case above, to open up the first stream in the file, an application would call AVIStreamOpen(NULL, 0L, 0, &AVIBallHandler);  Our handler doesn't take a filename, so the first parameter is NULL.  We don't care about the type of stream, so the second parameter is 0.  We want the first stream in the file (zero based) so the third parameter is 0.

Below is sample code for our AVIBallOpen function, and a description of what this routine must do.  If our Open routine gets passed a NULL pointer as instance data, the caller wants the size of our private structure.  Our open call will fill this structure with data, and other calls to read from the file, or get format or header information will pass us back the pointer so we have access to our data again to fullfil the request. Since our mini-handler only has one stream, if anyone asks for a stream number higher than 0, we will fail.  Also, if we are asked for any type of stream, we will give them video, since that is all we support.  Since we aren't using a filename, we can use the szFile parameter for anything we want... in this case, we will treat it as the length of the movie, so someone can specify they want a certain number of frames of ball bouncing.  Then we fill in our private structure with things we'll need to know for answering other requests, and we're done!  We should return 0 for success, and -1 for failure.  The AVIStreamOpen() function will return our pball pointer for us as the return value.

///////////////////////////////////////////////////////////////////////////
//
// This function is called to initialize an instance of the bouncing ball.
//
// When called, we look at the information possibly passed in <lParam>,
// and use it to set up our internal structures.
//
///////////////////////////////////////////////////////////////////////////
static LONG CALLBACK AVIBallOpen(PAVIBALL pball, LPSTR szFile, DWORD fccType, LONG
lParam)
{
    //
    // if our instance struct is NULL then return the size needed.
    //
    if (pball == NULL)
	return sizeof(AVIBALL);

    //
    // We only have one stream
    //
    if (lParam != 0)
	return -1;

    // !!! If they ask for ANY stream, and stream #0, we'll give them the video
    if (fccType == 0)
	fccType = streamtypeVIDEO;

    //
    // are they opening a audio/video/other stream
    //
    pball->fccType = fccType;

    //
    // instance data (info needed for creating the object) can
    // be passed in szFile
    //
    // for this example szFile is the length in frames of the stream.
    //
    if (szFile)
	pball->length = (int)(DWORD)szFile;
    else
	pball->length = DEFAULT_LENGTH;

    switch (fccType) {
	case streamtypeVIDEO:
	    pball->color  = DEFAULT_COLOR;
	    pball->width  = DEFAULT_WIDTH;
	    pball->height = DEFAULT_HEIGHT;
	    pball->size   = DEFAULT_SIZE;
	    return 0;           // success

	case streamtypeAUDIO:
	    return -1;          // we don't do an audio stream

	default:
	    return -1;          // we don't do anything else, either:
				// return error
    }
}


Close

This function gets called whenever AVIStreamClose is called with a stream pointer that was returned by your Open function.  Thus an application needs to call one AVIStreamClose() for every AVIStreamOpen().  Here, a handler should free any resources it was using during the life of the stream read.  In our case, there are none.  Once again, return 0 for success, -1 for failure, although I think AVIStreamClose is going to return 0 for you even if you try and fail.


static LONG CALLBACK AVIBallClose(PAVIBALL pball)
{
    // Free any data we're keeping around.

    // We don't have any.

    return 0;
}


Info

This function is called when an application calls AVIStreamInfo with a pointer you returned in your Open function.  This routine fills the AVIStreamHeader structure with information about this stream of the file.  If we get passed a NULL pointer, we must return the size of the AVIStreamHeader structure.  If the buffer we've been given is too small, we must fail by returning 0.  Otherwise, we fill the structure and return its size.  Many of the elements of this structure don't apply to our Ball handler, but some do.  We are a video type of stream, whose FOURCC is "Ball".  We are a 15 fps movie (Scale * Rate).  We return our length in frames, and the size of a bitmap in our movie.


static LONG CALLBACK AVIBallInfo(PAVIBALL pball, AVIStreamHeader FAR * psi, LONG lSize)
{
    if (psi == NULL)
	return sizeof(AVIStreamHeader);

    if (lSize < sizeof(AVIStreamHeader))
	return 0;

    // Fill out a stream header with information about us.
    psi->fccType                = pball->fccType;
    psi->fccHandler             = mmioFOURCC('B','a','l','l');
    psi->dwFlags                = 0;
    psi->dwPriority             = 0;
    psi->dwInitialFrames        = 0;
    psi->dwScale                = 1;
    psi->dwRate                 = 15;
    psi->dwStart                = 0;
    psi->dwLength               = pball->length;
    psi->dwSuggestedBufferSize  = pball->height * ALIGNULONG(pball->width);
    psi->dwQuality              = 0;
    psi->dwSampleSize           = 0;
    psi->rcFrame.left           = 0;
    psi->rcFrame.top            = 0;
    psi->rcFrame.right          = pball->width;
    psi->rcFrame.bottom         = pball->height;

    return sizeof(AVIStreamHeader);
}


Find Key Frame

In our example,  every frame is a key frame, so we do not need to implement this function.  By default, AVIStreamFindKeyFrame will indicate that every frame is a key frame if we don't provide this function, so we don't even need to make a short stub function.


Read Format

This routine is called whenever an application calls AVIStreamReadFormat with a pointer returned by our Open function.   This function should fill up a format structure of the type of data in the stream.  For a video stream, you should return an LPBI filled in, with the palette information following it (if applicable) but NO DATA BITS.  For an audio stream, you fill in a PCMWAVEFORMAT structure.  If you are a different type of stream, do whatever you please.

In our example, we fill in an LPBITMAPINFOHEADER since we are a video stream.  If we are passed an invalid pointer, we are supposed to return the size of buffer we need to store our format information.  Our images have a 2 colour palette, black and the ball colour, so this palette appears after the LPBI.


#define WIDTHBYTES(i)     ((unsigned)((i+31)&(~31))/8)  /* ULONG aligned ! */
#define DIBWIDTHBYTES(bi) (int)WIDTHBYTES((int)(bi).biWidth * (int)(bi).biBitCount)

///////////////////////////////////////////////////////////////////////////
//
// AVIBallReadFormat: needs to return the format of our data.
//
///////////////////////////////////////////////////////////////////////////
static LONG CALLBACK AVIBallReadFormat   (PAVIBALL pball, LONG lPos,LPVOID
lpFormat,LONG cbFormat)
{
    LPBITMAPINFO    lpbi = (LPBITMAPINFO) lpFormat;

    if (lpFormat == NULL || cbFormat == 0)
	return sizeof(BITMAPINFOHEADER) + 2 * sizeof(RGBQUAD);

    // This is a relatively silly example: we build up our
    // format from scratch every time.

    if (cbFormat < sizeof(BITMAPINFOHEADER) + 2 * sizeof(RGBQUAD))
	return 0;

    lpbi->bmiHeader.biSize              = sizeof(BITMAPINFOHEADER);
    lpbi->bmiHeader.biCompression       = BI_RGB;
    lpbi->bmiHeader.biWidth             = pball->width;
    lpbi->bmiHeader.biHeight            = pball->height;
    lpbi->bmiHeader.biBitCount          = 8;
    lpbi->bmiHeader.biPlanes            = 1;
    lpbi->bmiHeader.biClrUsed           = 2;
    lpbi->bmiHeader.biSizeImage         = pball->height * DIBWIDTHBYTES(lpbi->bmiHeader);

    lpbi->bmiColors[0].rgbRed           = 0;
    lpbi->bmiColors[0].rgbGreen         = 0;
    lpbi->bmiColors[0].rgbBlue          = 0;
    lpbi->bmiColors[1].rgbRed           = GetRValue(pball->color);
    lpbi->bmiColors[1].rgbGreen         = GetGValue(pball->color);
    lpbi->bmiColors[1].rgbBlue          = GetBValue(pball->color);

    return sizeof(BITMAPINFOHEADER) + 2 * sizeof(RGBQUAD);
}


Read

This function is called whenever an application executes an AVIStreamRead call using one of your pointers.  It is responsible for actually getting the data out of the stream.  You are given the position in the file (sample or frame number) to read from, a length, and a place to put the data (along with its length).  Also, you may be asked to provide the number of bytes and samples read (the last two pointers).  If we are passed an invalid buffer, they just want to know the size of our data (in bytes).

Our example doesn't actually read from a file, but algorithmically generates frames of a bouncing ball.


#define ALIGNULONG(i)     ((i+3)&(~3))                  /* ULONG aligned ! */

///////////////////////////////////////////////////////////////////////////
//
// AVIBallRead: needs to return the data for a particular frame.
//
///////////////////////////////////////////////////////////////////////////
static LONG CALLBACK AVIBallRead (PAVIBALL pball, LONG lStart,LONG lSamples,LPVOID
lpBuffer,LONG cbBuffer,LONG FAR * plBytes,LONG FAR * plSamples)
{
    LONG   lSize = pball->height * ALIGNULONG(pball->width); // size of frame
							     // in bytes
    int x, y;
    BYTE _huge *hp = lpBuffer;
    int xPos, yPos;

    // Reject out of range values
    if (lStart < 0 || lStart >= pball->length)
	return 0;

    // Did they just want to know the size of our data?
    if (lpBuffer == NULL || cbBuffer == 0)
	return lSize;

    // Will our frame fit in the buffer passed?
    if (lSize > cbBuffer)
	return 0;

    // Figure out the position of the ball.
    // It just bounces back and forth.

    xPos = 5 + XSPEED * (int) lStart;			    // x = x0 + vt
    xPos = xPos % ((pball->width - pball->size) * 2);	    // limit to 2xwidth
    if (xPos > (pball->width - pball->size))		    // reflect if
	xPos = 2 * (pball->width - pball->size) - xPos;   //   needed

    yPos = 5 + YSPEED * (int) lStart;
    yPos = yPos % ((pball->height - pball->size) * 2);
    if (yPos > (pball->height - pball->size))
	yPos = 2 * (pball->height - pball->size) - yPos;

    //
    // Build a DIB from scratch by writing in 1's where the ball is, 0's
    // where it isn't.
    //
    // Notice that we just build it in the buffer we've been passed.
    //
    // This is pretty ugly, I have to admit.
    //
    for (y = 0; y < pball->height; y++)
	{
	if (y >= yPos && y < yPos + pball->size)
	{
	    for (x = 0; x < pball->width; x++)
	    {
		*hp++ = (BYTE) ((x >= xPos && x < xPos + pball->size) ? 1 : 0);
	    }
	}
	else
	{
	    for (x = 0; x < pball->width; x++)
	    {
		*hp++ = 0;
	    }
	}
	
	hp += pball->width - ALIGNULONG(pball->width);
    }

    // We always return exactly one frame
    if (plSamples)
	*plSamples = 1;

    // Return the size of our frame
    if (plBytes)
	*plBytes = lSize;

    return 1;
}
; y++)
	{
	if (y >= yPos && y < yPos + pball->size)
	{
	    for (x = 0; x < pball->width; x++)
	    {
		*hp++ = (BYTE) ((x >= xPos && x < xPos             N  Z            "  s	  	  o    k  m                \  `  h  !  #%  '%  9%  B&  Q&  Z)  )   *  0  0  0  2  k;                                                                                                                                                                                                                                                                                      +                          P  R              T  V  q	  s	  	  	  k  m  o        y        <              @  X  i  m  o                      $  (  q        H  Q  T  \                  "  /  1                       !    !            !    !     !    ! W    %  e                ;  =  U  m          &  (  @  y  {                              +  -  H  J  Y  \  ^  `  f  h  !  !  !  v!  y!  !  !  !  !  !  !  '"  Z"  "  "  "  #  2#  Y#  #  #  #  $$  J$  p$  $  $  $  $   %  #%  %%  '%  7%  9%  >&  @&  B&  O&  Q&  !(  #(       !    !    !    !    !          Y#(  V)  X)  Z)  )  )   *  M*  Q*  *  *  *  -+  F+  I+  ~+  +  +  +  +  #,  K,  M,  ,  ,  ,  ,  -  P-  -  -  -  .  o.  q.  .  .  .  ?/  /  /  /  0  0  
0  0  0  0  2  2  {2  }2  2  2  2  3  !3  c3  g3  3  4  I4  L4  4  4  4  4  4  4  5  M5  Y5  [5  5  5  5  5  6  6  *6  ,6  Y6  6  6  6  7  O7  7  7  7       !    !    !             !    ! Y7  7  8  R8  T8  \8  8  8  8  9  9  B9  J9  s9  w9  9  9  9  9  :  ":  &:  -:  1:  Z:  b:  p:  x:  |:  :  :  :  :  :  :  
;  ;  1;  C;  W;  Y;  h;  k;                                                                                                                                                                                                                                                                                                         *  	  Code   F        	                          9       	  T  E  $  .  8  9                                   k;       #(  7  k;     ! " O  CG Times (W1) 	Symbol " Univers (W1)  Times New Roman 5 Courier New  CC   0  9     0      g*  "       h    ؛E؛E                       6   Custom Stream Handlers   DannyMiToddLa         
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\avifile.16\avifile.txt ===
AVIFile: it's not just an API set, it's a way of life.

So, people are confused about how to approach the AVIFile APIs.
Let's try to help by making some things clear.


1.  AVIFile isn't just for AVI files.
Perhaps this would be clearer if these functions had some different
name, but let's live with AVIFile for now.  The important thing to
keep in mind is that we aren't talking about .AVI files, but about
some ideal time-based file format which supports the operations we'd
like it to support, like reading and writing from multiple
time-stamped streams.  If the APIs conform closely to what's actually
in .AVI files, it's just because I made up both the .AVI format and
the AVIFile APIs.

The guiding principle is that any other type of file containing this
time-stamped sort of data, be it a QuickTime file, an MPEG file, a
.WAV file, or whatever, should be accessible in one simple way.

2.  AVIFile isn't just for files.  
Having a uniform API to read these different sorts of files is
convenient, but we can go beyond that.  Once you have the abstract
concept of a "file" which is a bundle of "streams" (each of which has
a particular data type and format, along with a start time and
duration, and can be read from or written to at various points in
time), it is clear that not every "file" needs to correspond to an
actual disk file, and not every "stream" has to come from a "file" at
all.  

Useful kinds of streams to think about: 
Entirely synthetic streams, like the bouncing ball example; in this
case, a "stream" reduces to a function GiveMeVideoFrame(x).
Streams which are essentially filters applied to other streams; for
example, given a stream of video (that is, some abstract object that
can hand you frame 4 if you want it), you can build from that a
"compressed" stream, which is simply a stream that when asked for
frame 4 goes and asks the original stream for its frame 4, then
compresses it and hands it back to you, saying "here's frame 4, all
compressed like you wanted it." 

3.  AVIFile tries to conform to the Component Object model.
Since AVIFile is intended to be extensible to support additional file
formats, it has to have some way of transparently linking to DLLs
containing routines that understand those file formats.  In the past,
we in MMSys have done this sort of thing using installable drivers
and a message-based scheme.  (See MCI, ICM, and more....)  With the
release of OLE 2.0, we have a new standard for this sort of thing.
It's a little scary at first, requires either C++ or some C++-like
thinking, and involves header files you haven't seen before.  In any
case, we're all going to have to live with it.

4.  Don't be intimidated by talk of C++ and "objects".  

From a C point of view, all an "object pointer" like a PAVISTREAM is
is a pointer to a structure whose first member happens to be another
pointer to a table of functions.  This means that in addition to
carrying around data like "how long is this video sequence", the
structure also contains pointers to code that knows how to actually
get things done.  All C++ does for you is provide a nicer syntax for
doing this sort of thing.

You can make yourself a PAVISTREAM by hand.  All you have to do
is allocate room for a structure big enough to contain the pointer 
to the function table and any other data you need to keep around.
Then, you make a function table with the Read, Write, and other
functions to operate on your type of stream, and make sure your
structure points to your table.  Just like that, you have a bona fide
PAVISTREAM which you can pass to AVISave, AVIStreamRead, and so on.

5.  Luckily, you can usually ignore all of the "Component Object model"
stuff.
Unless you're doing something complicated, you should be able to just
call the various AVIFileXXXX and AVIStreamXXXX APIs and pretty much
ignore all of the talk of ISomethingOrOther and CLSID_Confusing.

If you are trying to make a DLL that will add support for reading and
writing a new file format, you will in fact have to learn something
about what a "class factory" is, but cross that bridge when you come
to it.

6.  AVISave() is just a helper function.
All the AVISave function does is copy some streams into a new file.
It doesn't do anything that you couldn't do yourself by calling the
AVIFileXXXX and AVIStreamXXXX APIs.  It does, however, make your life
easier by: calling AVIMakeCompressedStream for you according to the
options you pass in; calling AVIFileOpen and AVIFileCreateStream
appropriately to make the new streams in the new file you're making;
and finally, looping through all of the streams from start to end
copying the data from the old streams into the new file, and doing it
in the right order so that things come out nicely interleaved.

7.  AVIStreamReadData, AVIStreamWriteData, AVIFileReadData, and
AVIFileWriteData are not actually for reading and writing real data.
I know, these routines have strange names and they're just confusing
everybody.  

What they're not for: These routines are not what you use to read and
write audio samples and video frames and that sort of thing.  For
that, you must use AVIStreamRead and AVIStreamWrite.  (If you have a
PAVIFile, call AVIFileGetStream and then call AVIStreamRead.) 

What they're for: Reading and writing copyright information, the
author's name, and other stuff like that that's kept in INFO chunks
in RIFF files.

8.  AVIStreamGetFrame is just another helper function.
AVIStreamGetFrame (and AVIStreamGetFrameOpen/Close) are just
functions which handle the relatively simple task of getting a
decompressed video frame out of a stream.  This involves finding the
right ICM decompressor for the task at hand, figuring out where the
last key frame was, and decompressing frames as necessary.

Perhaps this should all be done automatically for you; perhaps you
should do this instead by opening a "decompressed" stream based on
the compressed stream you want to read.  It's not either of those
ways now, so use AVIStreamGetFrame.

8a. What in heck is AVIMakeCompressedStream() for?
AVIMakeCompressedStream makes a new stream pointer for you that acts
just like the old stream you already had, but is compressed or
decompressed.  That isn't very clear, so I'll try again: If you have
a PAVISTREAM which, when you read it, gives you back 8-bit RGB frames
of "Gone With the Wind", you can use AVIMakeCompressedStream to make
a stream that will return the same pictures, but compressed in, say,
CRAM format.  The reverse is also true: given a compressed stream,
AVIMakeCompressedStream can make you an uncompressed version of that
stream.

To use it, just fill out an AVICOMPRESSOPTIONS structure.  (Or pass
NULL, which will decompress.)

In theory, you can either read from the compressed stream or write to
it.  (Right now, this still doesn't work for audio compression....)
However, you can only do one at a time.



9.  What in the world is an HRESULT?  
For some reason, all OLE 2.0 functions return HRESULTs which could
potentially contain extra information about an error that occurred.
For now, they are essentially just the same as a plain error code.  
To convert one of the AVIERR_XXXX codes to an HRESULT, call 
ResultFromScode() on it.  To convert back, use GetScode()....

10.  In its current state, AVIFile is not finished.
Some things which are bad about the current AVIFile APIs:
AVISaveOptions() puts up a nasty big nested dialog which isn't
user-friendly. 
AVISave() doesn't handle palette changes correctly.
Almost nothing handles the concept of, say, a wave format changing
halfway through a stream.
T here is no way to find when the next palette change happens, short
of asking for the video format on every frame until you find a place
it changes.
Dealing with compressed and uncompressed streams is kind of screwy.
If you know exactly what you have and what you want, you can call
AVIMakeCompressedStream() to do what you need.
Right now, the handler for compressing streams only supports reading,
not writing.  There is no reason this should be true, and maybe I'll
fix it.
There are no status callbacks for anything.  If something takes a
really long time, you wait.
Error returns are generally not good, if they're there at all.
There is no way to find what a specific handler can do short of
trying to do it and seeing what works.
The documentation is still primitive.

11.  Miscellaneous hints:
Be sure to call AVIStreamInit() and AVIStreamExit().  If you don't,
the component object DLL won't get initialized and nothing will work.
Be sure the right information is in your registration database.  It
should all get put there automatically, but isn't too resistant to
tampering. 

Some functions take pointers to long variables which need to be initialized
to the size of your buffer before you call them.  You need to use code like:
cbSize = cbBuffer; AVIStreamReadFormat(pstream, 0, lpBuffer, &cbSize);
After this, cbSize will contain the actual correct size of the format, which 
you can then compare to the size you passed in to see if your buffer
was large enough.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\avifile.16\aviread.doc ===
ۥ- !@	  , -             9  z                 9                                   v ;  v ; ]v   ]v   ]v   ]v   ]v  kv t v  w   w   w   w  w  w   w S  x  6x   6x   6x   6x   6x   6x   6x   6x  8x   8x   8x   8x   8x   8x  az 4 z > Vx ]v         Vx   Vx                                                                   EMBED PBrush  \* mergeformat \s

NOTE:  The AVI read APIs are very preliminary and are totally unsupported by Microsoft Corp. at this time.   You are free to use the .lib and look at the sample code to figure out how to use these APIs to read data from AVI files.   We make no claims that this will be unchanged or become part of a final product.  






Reading AVI files

This document explains how to read and display frames of an AVI file from within an application.  There are functions to open up a certain stream of an AVI file, read frames of data from that stream, and get some information about the stream.  

You will come across the concept of streams many times when dealing with these API's.  Essentially, a video file can contain several different types of data, for instance a video sequence, an English soundtrack, and a French soundtrack.  For convenience, and to allow separate access to these components of a file, we refer to each of these as a separate stream, and when we open the file and get data from it, we tell it which stream we are interested in.

AVIVIEW.C  is a sample application that opens up every stream in an AVI file and displays the data for each stream in a window as a bunch of horizontal stripes of bitmaps (for a Video stream) and waveforms (for an Audio stream).  You can then scroll horizontally to see the data at any point in the file.

Opening a Stream in an AVI file

Once you know the filename of the AVI file, you open a stream with the AVIStreamOpen command:

PAVISTREAM AviStreamOpen(LPSTR szFile, DWORD fccType, LONG lParam, 						  PAVISTREAMHANDLER p)

szFile is the filename of the AVI file.  fccType is the type of stream.  The two choices for a regular AVI file are streamtypeVIDEO and streamtypeAUDIO.  An AVI file may also contain other types of streams.  The lParam is the number of the stream you want.  Zero is the first stream. If there is no type, the AVI handler will choose a stream for you.  If you specify a stream type, the AVI handler will give you a stream of that type.  The important thing to know is that you can call AviStreamOpen inside a loop with successively greater values for lParam, and open every stream in the file (or every stream of a given type).  As soon as the call returns NULL you have run out of streams.  If you are reading an ordinary AVI file, you can pass NULL for the PAVISTREAMHANDLER, to indicate that you want AVI to use its default handler.

If, however, you are opening a non-AVI file and wish to use these read APIs to access the data in that file even though it is not really an AVI file, you can... IF someone has written a stream handler for that type of file.  Ordinarily, you would pass NULL for the PAVISTREAMHANDLER for reading standard AVI files, but in this case you would pass a pointer to a handler that understood the type of file you were reading.  For information about writing a custom stream handler, see the document entitled "Using Custom Stream Handlers".  AVIVIEW.C uses these same APIs to read both AVI files (using the default handler) and to read an imaginary BALL file (using the custom stream handler "BALL" described in the document "Using Custom Stream Handlers").

AVIStreamOpen returns a pointer to a stream which you use in all subsequent calls to read data or get information or set options for that stream.

Here is the code fragment that AVIVIEW.C uses to open every stream (regardless of type) of the file "szFile" and remember the stream pointers returned by the Open function in an array:


gcpavi = 0;		//how many streams are opened

for (i = 0; i < MAXNUMSTREAMS; i++, gcpavi++) {
        gapavi[i] = AVIStreamOpen(szFile, 0L, i, NULL);
	if (gapavi[i] == NULL)
	    break;
    }


LONG AVIStreamAddRef(PAVISTREAM pavi)

This function increases the reference count of a stream pointer you have opened with AVIStreamOpen, if, for example, you are passing the pointer to a function that will be closing the stream, and you wish to keep the stream open.  You must call AVIStreamClose once for the AVIStreamOpen call, and once for every reference count increase you make with AVIStreamAddRef.




Closing a Stream

Once you are done reading from the stream, you close it by calling 

AVIStreamRelease(pavi);

You need to individually close every stream of the file that you opened.




Getting information about a Stream

Use the call:

LONG AVIStreamInfo(pavi, &avis, sizeof(avis))

to fill an AVIStreamHeader structure with information about a stream you have opened.  Use the stream pointer returned by the open call.  If you pass NULL for &avis, the function will return the size of the AVIStreamHeader structure.  Here is the information you get about a stream in an AVIStreamHeader:


typedef struct {
    DWORD               fccType;		// eg. streamtypeVIDEO
    DWORD               fccHandler; 
    DWORD               dwFlags;		// Contains AVITF_* flags
    DWORD               dwPriority;		
    DWORD               dwInitialFrames;
    DWORD               dwScale;        
    DWORD               dwRate; 		// dwRate / dwScale ==
								samples/second
    DWORD               dwStart;
    DWORD               dwLength;		// In units above...
    DWORD               dwSuggestedBufferSize;
    DWORD               dwQuality;
    DWORD               dwSampleSize;
    RECT                rcFrame;
    DWORD			dwEditCount;
    DWORD			dwFormatChangeCount;
    char			szName[64];
} AVISTREAMINFO;

For more information about the fields of this structure, see the Video for Windows Development Kit, chapter 4: AVI Files.  


Getting the Format of the Stream Data

LONG AVIStreamReadFormat(PAVISTREAM pavi, LONG lPos, 
				LPVOID lpFormat,  LONG cbFormat)

This function will return a format structure telling you about the data at a given position in the stream (a sample number for audio streams, or a frame number for video streams).  For a video stream, the buffer will be filled with an LPBI, with the palette information following it (if applicable) but NO DATA BITS.  For an audio stream, you will get a PCMWAVEFORMAT structure.  For a different type of stream, you will get whatever format data is associated with that type.

If you pass in a NULL buffer, the function will return the size of the buffer it needs to give you the format data.  The function always returns the number of bytes of information placed in the buffer.

For example, if you wanted to know the frame size or the bit depth or the palette being used by a given frame of the AVI's video stream, this function will return an LPBI that you could examine.  This function can also be used to determine the sample rate or quantization of the the audio.




Reading Data From a Stream

There are several ways to read data from a stream:

LONG AVIStreamRead(PAVISTREAM pavi, LONG lStart, LONG lSamples,
				LPVOID lpBuffer, LONG cbBuffer,
				LONG FAR * plBytes, LONG FAR * plSamples)


This function will read raw data from the stream into a buffer you supply.  You give the start sample (frame) and the number of samples (frames) to read.  The function can return the number of samples read, and also the number of bytes read (to store that many samples).

If you do not supply a buffer, the function will return the number of bytes required to store the sample data you request.

This function returns raw data.  For a video stream, this will be the bits that make up the image (that need to be placed after the LPBI returned by AVIStreamReadFormat to make up the DIB).  This image may be compressed and useless to you until you decompress the image into something you can display using the Image Compression Manager (ICM) described in the Video for Windows Development Kit, chapter 2: Using the Installable Compression Manager.  The type of compression will be indicated by the LPBI returned by the AVIStreamReadFormat call.  For a video stream, the length parameter lSamples is ignored, and the buffer is only filled with data for a single frame.

For an audio stream, the data returned will be actual wave samples.  These wave samples may also be compressed.  The compression type is indicated in the PCMWAVEFORMAT returned by the AVIStreamReadFormat call.


LPVOID AVIStreamGetFrame(PAVISTREAM pavi, LONG lPos)


If you don't want the hassle of reading the format and the data bits for a video stream and then handling the decompression yourself, the above call will do all of this for you.  If the frame of video you are reading depends on data in previous frames to make up its image, this function will also read all the data since the previous key frame up until the frame you specify to build up the entire image for the frame you request.  

AVIStreamGetFrame takes a pointer to a video stream, and a position (frame number) in the file and returns an LPBITMAPINFOHEADER which points to a valid uncompressed DIB that can be displayed using standard Windows calls, or using the DrawDib routines which handle images of different bit depths, and automatic dithering for displays that can't handle certain types of DIBS.  The DrawDib functions are described separately in the Video for Windows Development Kit, chapter 3: Using the DrawDib Functions.

LPVOID AVIStreamReadData(PAVISTREAM pavi, DWORD fcc, LPVOID lp,
					LONG cb)

Not implemented.  To be announced.



Finding Key Frames, Non-empty frames, or Format Changes in a Stream

AVIStreamFindSample(PAVISTREAM pavi, LONG lPos, LONG lFlags)

This function will start at the position in the file that you specify, and search forwards or backwards (depending on the flags set) for the nearest key frame, non-empty frame, or format change, and return that frame number.

The possible flags for search direction are FIND_PREV and FIND_NEXT.  Both of these flags will return lPos if the sample given qualifies.

The possible flags for search item are FIND_KEY, FIND_ANY, or FIND_FORMAT.


Positioning Within a Stream

LONG AVIStreamStart(PAVISTREAM pavi)

will return the sample (frame) number of the first sample in the stream.  Use this number with the read functions to access the first  sample of data.  (For instance, the frames of a movie may be counted starting at zero or one depending on the preference of the author).  This value can also be found in the AVISTREAMHEADER structure returned by the AVIStreamInfo call.

LONG AVIStreamLength(PAVISTREAM pavi)

will return the number of frames (or samples) in the stream.  This value can also be found in the AVISTREAMHEADER structure returned by the AVIStreamInfo call.

LONG AVIStreamSampleToTime(PAVISTREAM pavi, LONG lSample)

will take a sample (frame) number of an AVI stream, and return the time, in milliseconds, associated with that sample.  For a video frame, this will be the time, offset from zero for the start of the movie, that this frame will appear when the AVI is played at its proper speed.  For an audio sample number, this will be time that the particular sample will be heard.

LONG AVIStreamTimeToSample(PAVISTREAM pavi, LONG lTime)

is the opposite of AVIStreamSampleToTime.  It is more accurate to deal with the position of a file using its sample number, since the time in milliseconds is only an approximation of when an event is taking place.  These functions are not true inverses, as two consecutive samples of audio may both be heard in the same millisecond, and converting the time value back to a sample number may give a different sample number than the original one.



Helper Macros

There are also a number of macros available that combine the functionality of the above functions to make it easier for you to perform certain common tasks.  These macros are listed below, followed by the code they translate to, along with an explanation.


AVIStreamSampleToSample(pavi1, pavi2, lSample) :=
           AVIStreamTimeToSample(pavi1,AVIStreamSampleToTime(pavi2, lSample))

Given a sample in the stream pavi2, this will return the sample in pavi1 that occurs at the same time as the given sample.

AVIStreamNextSampleTime(pavi, t) :=
            AVIStreamSampleToTime(pavi, AVIStreamTimeToSample(pavi, t) + 1)

This macro will tell you when the sample occuring at the time you provide will change to the next sample.  Basically, it informs you of the next "interesting" time in the stream.

AVIStreamPrevSampleTime(pavi, t) :=
            AVIStreamSampleToTime(pavi, AVIStreamTimeToSample(pavi, t) - 1)

This macro is similar to AVIStreamNextSampleTime, but looks at the time for the sample that comes BEFORE the time you provide.






AVIStreamNextKeyFrameTime(pavi, t) :=
            AVIStreamSampleToTime(pavi,
		AVIStreamFindKeyFrame(pavi, AVIStreamTimeToSample(pavi, t), 			SEARCH_FORWARD))

This macro returns the time of the next key frame in the stream, starting at a given time that you provide.

AVIStreamPrevKeyFrameTime(pavi, t) :=
            AVIStreamSampleToTime(pavi,
		AVIStreamFindKeyFrame(pavi,AVIStreamTimeToSample(pavi, t), 			SEARCH_BACKWARD))

This macro returns the time of the most recent key frame that occured before the time that you provide.

AVIStreamStartTime(pavi) :=
            AVIStreamSampleToTime(pavi, AVIStreamStart(pavi))

This macro returns the starting time of the stream's first sample.

AVIStreamLengthTime(pavi) :=
            AVIStreamSampleToTime(pavi, AVIStreamLength(pavi))

This macro returns the length of the stream in time, not samples.

AVIStreamEnd(pavi) :=
            (AVIStreamStart(pavi) + AVIStreamLength(pavi))

This macro returns the sample number associated with the end of the stream.  This sample number is not a valid sample number to be read, but represents the end of the file.

AVIStreamEndTime(pavi) :=
            AVIStreamSampleToTime(pavi, AVIStreamEnd(pavi))

This macro returns the time representing the end of the stream.

AVIStreamSampleSize(pavi, lPos) :=
	    AVIStreamRead(pavi, lPos, 1, NULL, 0, NULL, NULL)

This macro returns the size of the buffer needed to store one sample of information from this stream (the sample at the position you provide)

.

AVIStreamFormatSize(pavi, lPos) :=
            AVIStreamReadFormat(pavi, lPos, NULL, 0)

This macro returns the size of the buffer needed to store the format information for the sample at the position that you provide.

Coe  :  w              &                       	  \2   2               z 2  A    z      z     (   z                                                     ʦ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    U                                                                                                                                                                                                                                         V                                                                                                                                                                                                                                        <                                                                                                                                                                                                                                                                                                                                                                                                                                                                                _                                                                                                                    W                                                                                                                    ^                                                                                                                    #                                                                                                                                                                                                                                  .                                                                                                             
I                                                                                                                                                                                                                    /y                                                                                                                                                                                                       &                                                                                                   $                                                                                                   U                                                                                                     |                                                                                                                                                                                                                 <D                                                                                                           "                                                                                                           x                                                                                                           N                                                                                                           f@                                                                                                         P                                                                                                           zz                                                                                                                                                                                                                     >                                                                                                          "                                                                                                          z                                                                                                          n2                                                                                                          )                                                                                                          f                                                                                                         a                                                                                                          `                                                                                                          f                                                                                                                                                                                                                  *                                                                                                          Vz                                                                                                             _c                                                                                                               B                                                                                                                                                                                                                                                                                                                                            g                                                                                                           Vl                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         `                                                                                                                                                                                                                  ,                                                                                                                                                                                                               `                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     `                                                                                                                                                                                                                  F                                                                                                                                                                                                                            `                                                                                                                                                                                                                                                                                                                                                                                                                                                       Wi                                                                                        g                                                                                                                                                                      VW                                                                                `                                                                              K                                                                            M                                                                                                                                                    _8                                                                          ̱                                                                                                            `                                                                                                                                                                                              u,                                                                                   V                                                                                                                                                                      $                                                                                                            n|                                                                                                                                                                                                                                                                                 V                                                                                                                                                                                                                                                                       n|                                                                                                        <                                                                    D                                                                                                                                                                                                       ?                                                                                                                                          `                                                                        4                                                                                                                                                 ut                                                                         ai                                                                       MS                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           l                                                                        `g                                                                        j1                                                                                                                                                `#                                                                                                                                        
c                                                              h                                                          `                                                      Hu                                           %`                                                                                                                                 l1                                                                                                                                 I                                           y                                                                                          (                                             t                                                                                            sd                                               p                                               
                                                                                                  ~                                                                                                                                                                                                                                                                 h                                                       m                                                         n                                                         N                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ?                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            -                                                  4       d`            PBrush        0 0 122 198  d  BMd      6  (   z            _                                   ʦ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            METAFILEPICT   d   wf 	  \2   2               z 2  A    z      z     (   z                                                     ʦ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    U                                                                                                                                                                                                                                         V                                                                                                                                                                                                                                        <                                                                                                                                                                                                                                                                                                                                                                                                                                                                                _                                                                                                                    W                                                                                                                    ^                                                                                                                    #                                                                                                                                                                                                                                  .                                                                                                             
I                                                                                                                                                                                                                    /y                                                                                                                                                                                                       &                                                                                                   $                                                                                                   U                                                                                                     |                                                                                                                                                                                                                 <D                                                                                                           "                                                                                                           x                                                                                                           N                                                                                                           f@                                                                                                         P                                                                                                           zz                                                                                                                                                                                                                     >                                                                                                          "                                                                                                          z                                                                                                          n2                                                                                                          )                                                                                                          f                                                                                                         a                                                                                                          `                                                                                                          f                                                                                                                                                                                                                  *                                                                                                          Vz                                                                                                             _c                                                                                                               B                                                                                                                                                                                                                                                                                                                                            g                                                                                                           Vl                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         `                                                                                                                                                                                                                  ,                                                                                                                                                                                                               `                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     `                                                                                                                                                                                                                  F                                                                                                                                                                                                                            `                                                                                                                                                                                                                                                                                                                                                                                                                                                       Wi                                                                                        g                                                                                                                                                                      VW                                                                                `                                                                              K                                                                            M                                                                                                                                                    _8                                                                          ̱                                                                                                            `                                                                                                                                                                                              u,                                                                                   V                                                                                                                                                                      $                                                                                                            n|                                                                                                                                                                                                                                                                                 V                                                                                                                                                                                                                                                                       n|                                                                                                        <                                                                    D                                                                                                                                                                                                       ?                                                                                                                                          `                                                                        4                                                                                                                                                 ut                                                                         ai                                                                       MS                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           l                                                                        `g                                                                        j1                                                                                                                                                `#                                                                                                                                        
c                                                              h                                                          `                                                      Hu                                           %`                                                                                                                                 l1                                                                                                                                 I                                           y                                                                                          (                                             t                                                                                            sd                                               p                                               
                                                                                                  ~                                                                                                                                                                                                                                                                 h                                                       m                                                         n                                                         N                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ?                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            -                                                  4       A(pavi, l) :=
	AVIStreamFindSample(pavi, l+1, FIND_NEXT | FIND_KEY)

This finds the next key frame, not including l.

APrev(pavi, l) :=
	AVIStreamFindSample(pavi, l-1, FIND_PREV | FIND_KEY)

This finds the previous key frame, not including l.

ANearest(pavi, l) :=
	AVIStreamFindSample(pavi, l, FIND_PREV | FIND_KEY)

This finds the previous key frame, including l.
ANext                                        X  g  l  {  p  5  9  b        6  M              A    ^          "  $        Q          :   !  %"  +"  e"  f"  %  %  %  *&  X&  &  &  '  '  '  (  w(  (  (  (  (  (                                            $                          :   
              L(  (  (  ]*  *  )+  f+  ,  -  .  .  /  r0  0  0  0  0  0  d1  2  2  3  3  *4  4  4  5  :5  5  5  B6  6  6  7  7  %8  8  9  y9  9  9  9  |h }h h h h h h h h &i 'i /i 3i Ai Ci vi xi zi {i i i i i i i i i i ;v Vv Wv [v ]v                                                                                                                       J                                                 (  *          l  n  p          !  .  5  7  9  `  b                4  6  O  Q                    	    =  ?  A  ߼߲߷              !    !     !     	!   !    !    !    !    !    !    !    !K             m1 0 DA  S          A  k          H  l          	                  $  &                        O  Q                x  z  !  !  !  !  !  '"  )"  +"  #  #  %  %  &  ,&  .&  R&  T&  V&  X&  &  &  &  &  '  '                 !K    !    !   !    !    !    !    !    !K    !     !    !  K'  N(  P(  (  (  (  (  (  (  (  [*  ]*  *  *  '+  )+  d+  f+  ,  ,  -  -  .  .  .  .  .  .  /  /  /  !0  p0  r0  0  0  1  b1  d1  2  2  ?2  2  2  3  3  3  3  3  3  3  A3  j3  3  3  ,4  .4  U4  ~4  4  4  <5  >5  [5  5  5  5  5   6  @6  B6  6  6  6  6  6  7  7  7  7  7  '8  )8  M8  8  8       !    !    !    !K    !     !     !   !; U8  9  9  9  9  A9  w9  y9  9  9  h h h h h 
i Ai Ci xi zi i i i i                                                                                                                                                                                                                                                                                                                                                                                       !    !     Code   F        	                     StreamTimeToSample(pavi, t))Prev))    9             o   (  0  6  9     )                                 1  1  1  1  2  2  B2  y2  {2  2  2  2  3  3  @3  B3  3  4  9  9   ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! ! !  (  ]v     A  '  8  i     S  Times New Roman 	Symbol & Arial 
1 Courier 5 Courier New  CG Times (W1)         "   9  :    4  4     4      4      1  1  1  1  1  2  2   2  (2  ,2  42  ^2  _2  g2  k2  y2  2  2  2  2  2  2  2  2  2  2  3  3  @3  B3  C3  3  3  3  3  3  3  4  4  4  4  9  9       |h   3    }h   h   h   h   h   3    h   '3    h   &i   'i   /i   3i   Ai   vi   xi   zi   3    {i   '3    i   i   i   i   i   i    3    i    3    i   y3    ;v   3    Vv    3    Wv   4    [v    4     9    "       h    ѥ٥                      >   Using the AVI Read API's   DannyMiDanny Miller         
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\avifile.16\readme.txt ===
Things to do in AVIFile:

Need handlers for:
	Quicktime files
	Targa files
	JPEG files
	MPEG files

Improve streaming interface

Speed improvements:
	Use GlobalDosAlloc for buffers?
	Read several frames at one time?

Current bugs:
	Error returns are lousy.


More things to do:
	Automatically generate open/save filter strings.  This would 
	require that we put something in the regdb to indicate which 
	handlers supported writing....

	Should there be some way to pass AVIFileOpen an HMMIO?  An
	IStorage or IStream?

	It would be nice to have some way to be notified when the contents
	of a stream change....  Look at IAdviseHolder

	ReadData and WriteData need to be renamed, because they
	confuse everybody.  Also, need better method for accessing
	DISP and LIST `INFO' chunks.

	Stream names need to be better supported.

	During long operations, we need some kind of status callback.

	Should everything have version numbers?

	"capabilities": Additional information via AVIFile/StreamInfo
	about what the handler can do

	Do handlers need parameters somehow?  Some way to configure
	stuff for a particular file format?  Am I deluding myself into
	thinking I can get away without this stuff?

	More thought is needed about "non-seekable" streams.  For
	instance: can a video capture device be thought of as a
	stream? 

	Can making a stream handler be made easier?  One thought: a
	C++ base class for a stream handler which people could
	override only the methods they want....

	How can you change the rectangle for a stream?
	Do we need an AVIStreamSetInfo command?


	Can we make streams be named?  Instead of opening streams by type 
	and number, people could enumerate the streams in a file and open
	them by name....  Looks more and more like IStorage....


	Everything needs to be renamed.  Functions shouldn't all
	start with "AVI".

	We need a new interface to handle change notifications.  Copy
	OLE Advise Holders, Advise Sinks.


	Marshal the AVIFile reader in the following way:
	Right before reading from an HMMIO, check the current task.
	Re-open the file for each new HTASK....

	Some way of getting an error string from an error value would
	be good.


	I don't really use the IEditStream interface for everything.
	I should make Vtbls for the editstrm.c implementation, and allow
	other handlers to support the stuff.

	How can you use ReadData/WriteData to deal with more than one
	chunk with the same ID?  How about INFO chunks?


Old Stuff that's done:

	Does AVIStreamWrite need some way of returning how much of the
	data was actually written?  (Particularly in the case where
	it's doing ACM compression, it may only be able to write out 
	whole blocks of data....)


	EditStreamSetName
	EditStreamClone

	AVIStreamInfo could use a different structure than an
	AVIStreamHeader.  In particular, the structure could lose
	some useless fields and gain the stream name.  Same with
	AVIFileInfo. 

	During long operations, we need some kind of status callback.	


	Look at using IAVIFile, IAVIStream on the clipboard along with
	IDataObject.  This seems to require some work to "marshal"
	the interface from app to app....

	Given an open IAVIFile handle, retrieve its "file format", that
	is, some user-readable name for what kind of file it is....

	It would be nice to be able to write to the compression streams

	The options dialog doesn't make me happy....
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\avifile.16\usage.txt ===
Using AVIFile.


Initializing the AVIFile DLL:
Before using any of the APIs in AVIFILE.DLL, be sure to 
call AVIStreamInit.  After using them, call AVIStreamExit.
If you don't, bad things will happen.


Using AVIFile to read some kind of file: 

First, call AVIFileOpen with the OF_READ flag to open the file.
Then, you can call AVIFileInfo to find out how many streams are in
the file, and AVIFileGetStream to retrieve the streams you want.

Once you have a stream, you can can AVIStreamReadFormat to get the
bitmap format or wave format, and then call AVIStreamRead to actually
read the data you want.





AVIFile and the Component Object model:

The AVIFile APIs include two interfaces, IAVIFile and IAVIStream,
which work with the Component Object model which is part of OLE 2.0.

Class IDs
Each server or DLL that handles these interfaces needs to have a
Globally Unique ID (GUID), so that it can be distinguished from all
other handlers.  OLE uses 16-byte identifiers for this purpose.  If
you're making a new handler, you can run the UUIDGEN program to make
yourself a unique ID.

The Registration Database
The registration database is essentially just a replacement for .INI
files.  To look at what's going on in it, run "regedit -v".

DLLs which implement the IAVIFile and IAVIStream interfaces all need
to be listed in the registration database so that they can be found
when necessary.

Each DLL must be listed in the registration database by class ID,
with entries of the form:


HKEY_CLASSES_ROOT\Clsid\{00020003-0000-0000-C000-000000000046} = Wave File reader/writer
HKEY_CLASSES_ROOT\Clsid\{00020003-0000-0000-C000-000000000046}\InprocServer = wavefile.dll

where HKEY_CLASSES_ROOT is the root of the entire registration
database.  The InProcServer entry indicates that wavefile.dll can be
loaded within an application to implement the class in question.

The AVIFile library uses additional entries in the registration
database in order to know which handler to use by default to open a
given file.  If the file is a RIFF file, 

HKEY_CLASSES_ROOT\AVIFile\Extensions\WAV = {00020003-0000-0000-C000-000000000046}
HKEY_CLASSES_ROOT\AVIFile\RIFFHandlers\WAVE = {00020003-0000-0000-C000-000000000046}

You get a GUID by running the uuidgen.exe program that comes
with the SDK; it will spit out a 16-byte hex number for you.  You then
make a file with a .REG extension that looks like:
REGEDIT
HKEY_CLASSES_ROOT\Clsid\{5C2B8200-E2C8-1068-B1CA-6066188C6002} = JFIF (JPEG) Files 
HKEY_CLASSES_ROOT\Clsid\{5C2B8200-E2C8-1068-B1CA-6066188C6002}\InprocServer =jfiffile.dll
HKEY_CLASSES_ROOT\AVIFile\Extensions\JPG = {5C2B8200-E2C8-1068-B1CA-6066188C6002}

(Of course, use your GUID here.)  Then, on a user's machine, they can run
regedit -s whatever.reg and these definitions will get added to the 
registration database, allowing the system to find your DLL and know what
sorts of files it can load.



What are IAVIFile and IAVIStream?
(Note: you may just want to read the OLE 2 documentation here....)

These are examples of "interfaces".  An interface is a collection of 
"methods".





Implementing a handler DLL



IClassFactory
Obviously, it isn't enough for OLE to know the name of your DLL; some
standard entry point is required to establish communications.  The
method through which COMPOBJ.DLL does this isn't exactly
straightforward.  A handler DLL must export a DllGetClassObject
function; COMPOBJ calls that function to ask the DLL to return an
instance of the IClassFactory interface, which it then uses to
actually acquire an instance of the IAVIFile interface that we
actually care about.


Single-stream vs. Multi-stream
AVI files obviously support more than one stream of data in each
file.  Wave files, for example, are much simpler, in that they only
can have exactly one stream of audio.  This means that we only need
one stream object around, and we can make things even simpler by
having the same object support both the stream and file interfaces.

If you know that your handler will support, say, exactly one audio
and one video stream, things are also simpler than the completely
general case, because when you create your file object, you know that 
you will have to create exactly two stream objects.


Read-only vs. Read-write

A handler can be written which only supports reading or writing; you
can always return an error code from any method.  (One suggestion:
don't return unsupported from the FindSample function, but rather
just return that every frame is a key frame, every frame is non-empty, and 
that the only format change is frame 0)


Using C++
These handlers don't actually need to be implemented using C++; it
was just easier that way.


Installing your handler:
For your handler to be found, it needs to have the appropriate
entries in the registration database.
















Compression DLLs
When you call AVIMakeCompressedStream, you pass in a PAVISTREAM and
are returned another PAVISTREAM.  This new stream can be used in two
ways: either you can read from the stream, in which case you will
read data which is compressed from the original stream, or you can
write to the new stream, in which case the data you write will be
compressed and written to the original stream.

To use the "read" method, you would use the following sequence of
calls: (extra parameters left out because I can't remember them at
the moment)
AVIFileOpen(&pf, "foo.avi",...)
AVIFileGetStream(pf, &ps, ...)  
AVIMakeCompressedStream(ps, &psC, &options, ...)
AVIStreamReadFormat(psC, lpFormatC, &cbFormatC) // get compressed format
for (loop through frames)
	AVIStreamRead(psC, frame, ....)  // read compressed frames

To use the "write" method:
AVIFileOpen(&pf, "foo.avi", OF_CREATE | OF_WRITE...)
AVIFileCreateStream(pf, &ps, &strhdr, ....)
AVIMakeCompressedStream(ps, &psU, &options, ...)
AVIStreamSetFormat(psU, lpFormatU, cbFormatU) // set format of data
					// to compress
for (loop through frames)
	AVIStreamWrite(psU, frame, ....)  // write uncompressed frames,
					// which will be compressed and
					// written to the file





Using the Clipboard functions

The clipboard functions are easy.  To copy a bunch of streams to
the clipboard, call AVIMakeFileFromStreams to bundle them up into a
single PAVIFILE, then call AVIPutFileOnClipboard.  To get data off of
the clipboard, call AVIGetFromClipboard.  To see whether any data is
present on the clipboard, for enabling menus or such, you can just
call AVIGetFromClipboard to see if it returns anything, and release
any file it returns.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\bin.16\c1.err ===
4001	"nonstandard extension 'single line comment' was used"
4002	"too many actual parameters for macro '%s'"
4003	"not enough actual parameters for macro '%s'"
4004	"incorrect construction after 'defined'"
4005	"'%Fs' : macro redefinition"
4006	"#undef expected an identifier"
4007	"'%Fs' : must be '%Fs'"
4008	"'%Fs' : '%Fs' attribute ignored"
4009	"string too big; trailing characters truncated"
4010	"single-line comment contains line-continuation character"
4011	"'%Fs' : identifier was truncated to '%d' characters"
4012	"float constant in a cross compilation" 
4013	"'%Fs' undefined; assuming extern returning int"
4014	"concatenating mismatched wide strings"
4015	"'%Fs' : type of bit field must be integral"
4016	"'%s' : no function return type; using 'int' as default" 
4017	"cast of 'int' expression to far pointer"
4018	"'%Fs' : signed/unsigned mismatch"
4019	"empty statement at global scope"
4020	"'%Fs' : too many actual parameters"
4021	"'%Fs' : too few actual parameters"
4022	"'%Fs' : pointer mismatch for actual parameter %d"
4023	"'%Fs' : based pointer passed to unprototyped function : parameter %d"
4024	"'%Fs' : different types for formal and actual parameter %d"
4025	"'%Fs' : based pointer passed to function with variable arguments: parameter %d"
4026	"function declared with formal parameter list"
4027	"function declared without formal parameter list"
4028	"formal parameter %d different from declaration"
4029	"declared formal parameter list different from definition"
4030	"first formal parameter list longer than the second list"
4031	"second formal parameter list longer than the first list"
4032	"formal parameter %d has different type when promoted"
4033	"'%Fs' must return a value"
4034	"sizeof returns 0"
4035	"'%Fs' : no return value"
4036	"unnamed %Fs as actual parameter"
4037	"conflicting ambient class modifiers"
4038	"'%Fs' : illegal ambient class modifier"
4039	"ambient class modifier on reference ignored"
4040	"memory attribute on '%Fs' ignored"
4041	"compiler limit : terminating browser output"
4042	"'%Fs' : has bad storage class"
4043	"function specifier used more than once"
4044	"specifier __huge on '%Fs' ignored; can only be applied to array"
4045	"'%Fs' : array bounds overflow"
4046	"'%Fs' : unsized array treated as %Fs"
4047	"'%Fs' : '%Fs' differs in levels of indirection from '%Fs'"
4048	"different array subscripts : '%Fs' and '%Fs'"
4049	"compiler limit : terminating line number emission"
4050	"'%Fs' : '%Fs' differs in code attributes from '%Fs'"
4051	"type conversion; possible loss of data"
4052	"function declarations different; one contains variable arguments"
4053	"one void operand for '?:'"
4054	"'%Fs' : from function pointer '%Fs' to data pointer '%Fs'"
4055	"'%Fs' : from data pointer '%Fs' to function pointer '%Fs'"
4056	"overflow in floating-point constant arithmetic"
4057	"'%Fs' : '%Fs' differs in indirection to slightly different base types from '%Fs'"
4058	"unions are now aligned on alignment requirement, not size"
4059	"pascal string too big, length byte is length % 256"
4060	"switch statement contains no 'case' or 'default' labels"
4061	"enumerate '%Fs' in switch of enum '%Fs' is not explicitly handled by a case label"
4062	"enumerate '%Fs' in switch of enum '%Fs' is not handled"
4063	"case '%ld' is not a valid value for switch of enum '%Fs'"
4064	"switch of incomplete enum '%Fs'"
4065	"switch statement contains 'default' but no 'case' labels"
4066	"characters beyond first in wide-character constant ignored"
4067	"unexpected characters following '%Fs' directive - newline expected"
4068	"unknown pragma"
4069	"long double is the same precision as double"
4070	"return of a 'void' expression"
4071	"'%Fs' : no function prototype given"
4072	"'%Fs' : no function prototype on __fastcall function"
4073	"initializers put in library initialization area"
4074	"initializers put in compiler reserved initialization area"
4075	"initializers put in unrecognized initialization area"
4076	"'%Fs' : can be used on integral types only"
4077	"unknown check_stack option"
4078	"case constant '%ld' too big for the type of the switch expression"
4079	"unexpected token '%Fs'"
4080	"expected identifier for segment name; found '%Fs'"
4081	"expected a comma; found '%Fs'"
4082	"expected an identifier; found '%Fs'"
4083	"expected '('; found '%Fs'"
4084	"expected a pragma directive; found '%Fs'"
4085	"expected pragma parameter to be 'on' or 'off'"
4086	"expected pragma parameter to be '1', '2', '4', '8', or '16'"
4087	"'%Fs' : declared with 'void' parameter list"
4088	"'%Fs' : pointer mismatch in actual parameter %d, formal parameter %d"
4089	"'%Fs' : different types in actual parameter %d, formal parameter %d"
4090	"'%Fs' : different '%Fs' qualifiers"
4091	"no symbols were declared"
4092	"sizeof returns 'unsigned long'"
4093	"unescaped newline in character constant in inactive code"
4094	"untagged '%Fs' declared no symbols"
4095	"expected ')'; found '%Fs'"
4096	"'%Fs' must be used with '%Fs'"
4097	"nonstandard extension : typedef-name '%Fs' used as synonym for class-name '%Fs'"
4098	"'%Fs' : 'void' function returning a value"
4099	"'%Fs' : type name first seen using '%Fs' now seen using '%Fs'"
4100	"'%Fs' : unreferenced formal parameter"
4101	"'%Fs' : unreferenced local variable"
4102	"'%Fs' : unreferenced label"
4103	"'%Fs' : used #pragma pack to change alignment"
4104	"'%Fs' : near data in same_seg pragma; ignored"
4105	"'%Fs' : code modifiers only on function or pointer to function"
4106	"pragma requires an integer between 1 and 127"
4107	"pragma requires an integer between 15 and 255"
4108	"pragma requires an integer between 79 and 132"
4109	"unexpected identifier '%Fs'"
4110	"'%Fs' : unexpected token"

4112	"#line requires an integer between 1 and 32767"
4113	"'%Fs' differs in parameter lists from '%Fs'"
4114	"same type qualifier used more than once"
4115	"'%Fs' : named type definition in parentheses"
4116	"unnamed type definition in parentheses"
4117	"macro name '%Fs' is reserved, '%Fs' ignored"
4118	"pragma not supported during fast compile"
4119	"different bases '%Fs' and '%Fs' specified"
4120	"based/unbased mismatch"
4121	"'%Fs' : alignment of a member was sensitive to packing"
4122	"'%Fs' : alloc_text applicable only to functions with C linkage"
4123	"different base expressions specified"
4124	"__fastcall with stack checking is inefficient"
4125	"decimal digit terminates octal escape sequence"
4126	"'%c' : unknown memory-model command-line option"
4127	"conditional expression is constant"
4128	"storage-class specifier after type"
4129	"'%c' : unrecognized character escape sequence"
4130	"'%Fs' : logical operation on address of string constant"
4131	"'%Fs' : uses old-style declarator"
4132	"'%Fs' : const object should be initialized"
4133	"'%Fs' : incompatible types - from '%Fs' to '%Fs'"
4134	"conversion between pointers to members of same class"
4135	"conversion between different integral types"
4136	"conversion between different floating-point types"
4137	"'%Fs' : no return value from floating-point function"
4138	"'*/' found outside of comment"
4139	"'0x%lx' : hex escape sequence is out of range"
4140	"'%Fs' : redefined, preceding references may be invalid"  
4141	"'%Fs' : used more than once"
4142	"benign redefinition of type"
4143	"pragma 'same_seg' not supported; use __based allocation"
4144	"'%Fs' : relational expression as switch expression"
4145	"'%Fs' : relational expression as switch expression; possible confusion with '%Fs'"
4146	"unary minus operator applied to unsigned type, result still unsigned"
4147	"'%Fs' : '%Fs' ignored on pointer and reference declarations"
4148	"'%Fs' : DS != SS for '__near' '%Fs'"
4149	"'%Fs' : different ambient model than base class '%Fs'"
4150	"deletion of pointer to incomplete type '%Fs'; no destructor called"
4151	"'%Fs' : operator should be explicitly '%Fs'"
4152	"nonstandard extension, function/data pointer conversion in expression"
4153	"function/data pointer conversion in expression"
4154	"deletion of an array expression; conversion to pointer supplied"
4155	"deletion of an array expression without using the array form of 'delete'"
4156	"deletion of an array expression without using the array form of 'delete'; array form substituted"
4157	"pragma was ignored by C compiler"
4158	"assuming #pragma pointers_to_members(full_generality, %Fs_inheritance)"
4159	"#pragma pack(pop,...) : has popped previously pushed identifier '%Fs'"
4160	"#pragma pack(pop,...) : did not find previously pushed identifer '%Fs'"
4161	"#pragma pack(pop... : more pops than pushes"
4162	"'%Fs' : no function with C linkage found"
4163	"'%Fs' : not available as an intrinsic function"
4164	"'%Fs' : intrinsic function not declared"
4165	"%Fs function cannot take a variable number of arguments"
4166	"illegal calling convention for constructor/destructor"

4184	"near call to thunk for '%Fs' in a different segment"

4200	"nonstandard extension used : zero-sized array in struct/union"
4201	"nonstandard extension used : nameless struct/union"
4202	"nonstandard extension used : '...': prototype parameter in name list illegal"
4203	"nonstandard extension used : union with static member variable"
4204	"nonstandard extension used : non-constant aggregate initializer"
4205	"nonstandard extension used : static function declaration in function scope"
4206	"nonstandard extension used : translation unit is empty"
4207	"nonstandard extension used : extended initializer form"
4208	"nonstandard extension used : delete [exp] - exp evaluated but ignored"
4209	"nonstandard extension used : benign typedef redefinition"
4210	"nonstandard extension used : function given file scope"
4211	"nonstandard extension used : redefined extern to static"
4212	"nonstandard extension used : function declaration used ellipsis"
4213	"nonstandard extension used : cast on l-value"
4214	"nonstandard extension used : bit field types other than int"
4215	"nonstandard extension used : long float"
4216	"nonstandard extension used : float long"
4217	"nonstandard extension used : function declaration from a previous block"
4218	"nonstandard extension used : must specify at least a storage class or a type"
4219	"nonstandard extension used : trailing ',' used for variable argument list"
4220	"varargs matches remaining parameters"
4221	"nonstandard extension used : '%Fs' : cannot be initialized using address of automatic variable '%Fs'"
4222	"nonstandard extension used : '%Fs' : 'static' should not be used on member functions defined at file scope"
4223	"nonstandard extension used : non-lvalue array converted to pointer"
4224	"nonstandard extension used : formal parameter '%Fs' was previously defined as a type"
4225	"nonstandard extension used : left of '.%Fs' must be an lvalue"

4241	"'%Fs' : member access is restricted"

4243	"%Fs conversion from '%Fs' to '%Fs' exists, but is inaccessible"

4245	"'friend' specified for nonexistent function '%Fs'"

4247	"'%Fs' not accessible because '%Fs' uses '%Fs' to inherit from '%Fs'"
4248	"'%Fs' : cannot access %Fs %Fs declared in class '%Fs'"
4249	"'%Fs' : no path to %Fs %Fs declared in virtual base '%Fs'"
4250	"'%Fs' : inherits '%Fs::%Fs' via dominance"
4251	"'%Fs' : %Fs '%Fs' needs to have dll-interface to be used by clients of %Fs '%Fs'"
4252	"'%Fs' is not defined; cannot specify CodeView information"

4260	"no override, '%Fs::%Fs' has %Fs 'this' memory model whereas '%Fs::%Fs' has %Fs 'this' memory model"
4261	"no override, '%Fs::%Fs' has %Fs calling convention whereas '%Fs::%Fs' has %Fs calling convention"
4262	"no override, '%Fs::%Fs' has %Fs 'this' whereas '%Fs::%Fs' has %Fs 'this'"

4270	"'%Fs' : do not initialize a non-const '%Fs' with a non-lvalue '%Fs' function return"
4271	"'%Fs' : 'naked' functions cannot be 'inline'; inline expansion not performed"
4273	"'%Fs' : inconsistant dll linkage.  dllexport assumed."
4274	"__export not supported; use __declspec(dllexport) instead"
4275	"non dll-interface %Fs '%Fs' used as base for dll-interface %Fs '%Fs'"
4276	"'%Fs' : function address taken, no prototype provided; assumed no parameters"

4300	"conversion of pointer to nonintegral type"

4304	"'%Fs' : simple type cast conversion of no expression"
4305	"'%Fs' : truncation from '%Fs' to '%Fs'"
4306	"'%Fs' : conversion from '%Fs' to '%Fs' of greater size"
4307	"'%Fs' : integral constant overflow"
4308	"negative integral constant converted to unsigned type"
4309	"'%Fs' : truncation of constant value"
4310    "cast truncates constant value"

4340	"'%Fs' : value wrapped from positive to negative value"
4341	"'%Fs' : signed value is out of range for enum constant"
4342	"precision lost in initialization of enum constant"

4354	"'%Fs' : initialization of reference to member requires a temporary variable"
4355	"'this' : used in base member initializer list"

4385	"%Fs the '%Fs' in base '%Fs'"
4386	"%Fs to the '%Fs' in base '%Fs'"
4387	"'%Fs' : was considered"

4401	"'%Fs' : member is bit field"
4402	"must use PTR operator"
4403	"illegal PTR operator"
4404	"period on directive ignored"
4405	"'%Fs' : identifier is reserved word"
4406	"operand on directive ignored"

4409	"illegal instruction size"
4410	"illegal size for operand"
4411	"'%Fs' : symbol resolves to displacement register"

4414	"'%Fs' : short jump to function converted to near"

4500	"'%Fs' : class has private/protected data members; user-defined constructor advised"
4501	"'%Fs' : use of '::' unnecessary here"
4502	"'linkage' requires use of keyword 'extern'"

4504	"type still ambiguous after parsing %d tokens, assuming declaration"
4505	"'%Fs' : unreferenced local function has been removed"
4506	"no definition for inline function '%Fs'"
4507	"explicit linkage specified after default linkage was used"
4508	"'%Fs' : function should return a value; 'void' return type assumed"

4510	"'%Fs' : default constructor could not be generated"
4511	"'%Fs' : copy constructor could not be generated"
4512	"'%Fs' : assignment operator could not be generated"
4513	"'%Fs' : destructor could not be generated"

4520	"'%Fs' : multiple default constructors specified"
4521	"'%Fs' : multiple copy constructors specified"
4522	"'%Fs' : multiple assignment operators specified"
4523	"'%Fs' : multiple destructors specified"
4524	"'%Fs' : redundant use of 'friend' on destructor"
4525	"'%Fs' : redundant use of 'friend' on constructor"

4527	"instances of %Fs '%Fs' can never be destroyed - user-defined destructor required"
4528	"illegal 'pure' syntax, must be '= 0'"

4607	"'%Fs' : must be initialized in constructor base/member initializer list"

4610	"%Fs '%Fs' can never be instantiated - user defined constructor required"
4611	"'%Fs' does not support C++ object semantics"
4612	"bad #pragma syntax, pragma ignored"
4613	"'%Fs' : class of segment cannot be changed"
4614	"'%Fs' : varargs parameters with this type were promoted"	
4615	"#pragma warning : unknown user warning type"
4616	"#pragma warning : warning number '%d' out of range, must be between '%d' and '%d'"
4617	"#pragma warning : invalid warning number"

4620	"no postfix form of 'operator ++' found for type '%Fs', using prefix form"
4621	"no postfix form of 'operator --' found for type '%Fs', using prefix form"
4622	"overwriting debug information formed during creation of the precompiled header in object file: '%s'"

4630	"'%Fs' : '%Fs' storage-class specifier illegal on member definition"

4650	"debugging information not in precompiled header; only global symbols from the header will be available"
4651	"'/D%s' specified for precompiled header but not for current compile"
4652	"command-line option '%Fs' inconsistent with precompiled header; precompiled header option ignored"

4699	"Note: %Fs"

4706	"assignment within conditional expression" 

4710	"'%Fs' : function not expanded" 

4726	"'%c' : unknown memory model command-line option"
4727	"conditional expression is constant"

4741	"/Oq option ignored for __fastcall function '%Fs'"

4746	"'%Fs' : unsized array given size %Fs"

4756	"overflow in constant arithmetic"	

4758	"address of automatic (local) variable taken, DS != SS" 
4759	"segment lost in conversion"	
4760	"'%Fs' : segment lost in initialization"	

4761	"integral size mismatch in argument : conversion supplied"	
4762	"near/far mismatch in argument : conversion supplied"	

4769	"conversion of near pointer to long integer"	

4785	"near call to '%Fs' in different segment" 

4788	"'%Fs' : identifier was truncated to '%d' characters"

4793	"native code generated for p-code function '%Fs' with inline assembly"

4900	"intermediate language mismatch between '%s' version '%ld' and '%s' version '%ld'"

4000	"UNKNOWN WARNING\n\t\tContact Microsoft Product Support Services"
						

2001	"newline in constant"
2002	"invalid wide-character constant"
2003	"expected 'defined id'"
2004	"expected 'defined(id)'"
2005	"#line expected a line number, found '%Fs'"
2006	"#include expected a filename, found '%Fs'"
2007	"#define syntax"
2008	"'%c' : unexpected in macro definition"
2009	"reuse of macro formal '%Fs'"
2010	"'%c' : unexpected in macro formal parameter list"
2011	"'%Fs' : '%Fs' type redefinition"
2012	"missing name following '<'"
2013	"missing '>'"
2014	"preprocessor command must start as first nonwhite space"
2015	"too many characters in constant"
2016	"no closing single quotation mark"
2017	"illegal escape sequence"
2018	"unknown character '0x%x'"
2019	"expected preprocessor directive, found '%c'"
2020	"'%Fs' : '%Fs' member redefinition"
2021	"expected exponent value, not '%c'"
2022	"'%ld' : too big for character"
2023	"divide by 0"
2024	"mod by 0"
2025	"'%s' : enum/struct/union type redefinition"		
2026	"string too big, trailing characters truncated"
2027	"use of undefined type '%Fs'"
2028	"struct/union member must be inside a struct/union"
2029	"left of '%s' specifies undefined class/struct/union '%Fs'"
2030	"'%Fs' : struct/union member redefinition"		
2031	"'%Fs' : function cannot be struct/union member"	
2032	"'%Fs' : function cannot be member of %Fs '%Fs'"
2033	"'%Fs' : bit field cannot have indirection"
2034	"'%Fs' : type of bit field too small for number of bits"
2035	"struct/union '%Fs' : unknown size"			
2036	"'%Fs' : unknown size"
2037	"left of '%s' specifies undefined struct/union '%Fs'"
2038	"'%s' : not struct/union member"			
2039	"'%Fs' : is not a member of '%Fs'"
2040	"'%Fs' : '%Fs' differs in levels of indirection from '%Fs'"
2041	"illegal digit '%c' for base '%d'"
2042	"signed/unsigned keywords mutually exclusive"
2043	"illegal break"
2044	"illegal continue"
2045	"'%Fs' : label redefined"
2046	"illegal case"
2047	"illegal default"
2048	"more than one default"
2049	"case value '%ld' already used"
2050	"switch expression not integral"
2051	"case expression not constant"
2052	"case expression not integral"
2053	"'%Fs' : wide string mismatch"
2054	"expected '(' to follow '%Fs'"
2055	"expected formal parameter list, not a type list"
2056	"illegal expression"
2057	"expected constant expression"
2058	"constant expression is not integral"
2059	"syntax error : '%Fs'"
2060	"syntax error : end of file found"
2061	"syntax error : identifier '%Fs'"
2062	"type '%Fs' unexpected"
2063	"'%Fs' : not a function"
2064	"term does not evaluate to a function"
2065	"'%Fs' : undeclared identifier"
2066	"cast to function type is illegal"
2067	"cast to array type is illegal"
2068	"illegal cast from '%Fs' to '%Fs'"
2069	"cast of 'void' term to non-'void'"
2070	"illegal sizeof operand"
2071	"'%Fs' : illegal storage class"
2072	"'%Fs' : initialization of a function"
2073	"'%Fs' : partially initialized array requires a default constructor"
2074	"'%Fs' : '%Fs' initialization needs curly braces"
2075	"'%Fs' : array initialization needs curly braces"
2076	"'%Fs' : struct/union initialization needs curly braces" 
2077	"nonscalar field initializer '%Fs'"
2078	"too many initializers"
2079	"'%Fs' uses undefined class/struct/union '%Fs'"
2080	"illegal __far __fastcall function or __saveregs function"
2081	"'%Fs' : name in formal parameter list illegal"
2082	"redefinition of formal parameter '%Fs'"
2083	"%Fs comparison illegal"
2084	"function '%Fs' already has a body"
2085	"'%Fs' : not in formal parameter list"
2086	"'%Fs' : redefinition"
2087	"'%Fs' : missing subscript"
2088	"'%Fs' : illegal for %Fs"
2089	"'%Fs' : '%Fs' too large"
2090	"function returns array"
2091	"function returns function"
2092	"array element type cannot be function"
2093	"'%Fs' : cannot be initialized using address of automatic variable '%Fs'"
2094	"label '%Fs' was undefined"
2095	"'%Fs' : actual parameter has type 'void' : parameter %d"
2096	"struct/union comparison illegal"		
2097	"illegal initialization"
2098	"expression is not an address"
2099	"initializer is not a constant"
2100	"illegal indirection"
2101	"'%Fs' on constant"
2102	"'%Fs' requires l-value"
2103	"'%Fs' on register variable"
2104	"'%Fs' on bit field ignored"
2105	"'%Fs' needs l-value"
2106	"'%Fs' : left operand must be l-value"
2107	"illegal index, indirection not allowed"
2108	"subscript is not of integral type"
2109	"subscript requires array or pointer type"
2110	"cannot add two pointers"
2111	"pointer addition requires integral operand"
2112	"pointer subtraction requires integral or pointer operand"
2113	"pointer can only be subtracted from another pointer"
2114	"'%Fs' : pointer on left; needs integral value on right"
2115	"'%Fs' : incompatible types"
2116	"function parameter lists differed"
2117	"'%Fs' : array bounds overflow"
2118	"negative subscript or subscript is too large"
2119	"typedef types both define indirection"
2120	"'void' illegal with all types"
2121	"'%Fs' : bad %Fs operand"
2122	"'%Fs' : prototype parameter in name list illegal"
2123	"'%Fs' : cannot call __fastcall function '%Fs' from p-code"
2124	"divide or mod by zero"
2125	"'%Fs' : allocation exceeds 64K"	
2126	"'%Fs' : incorrect operand"
2127	"parameter allocation exceeds 32K"	
2128	"'%Fs' : alloc_text/same_seg applicable only to functions with C linkage"
2129	"static function '%Fs' declared but not defined"
2130	"#line expected a string containing the filename, found '%Fs'"
2131	"more than one memory attribute"
2132	"syntax error : unexpected identifier"
2133	"'%Fs' : unknown size"
2134	"'%Fs' : struct/union too large"	
2135	"'%Fs' : illegal bit field operation"
2136	"'%Fs' : prototype must have parameter types"
2137	"empty character constant"
2138	"illegal to define an enumeration without any members"
2139	"type following '%s' is illegal"
2140	"parameter cannot be function type"
2141	"value out of range for enum constant"
2142	"function declarations differ, variable parameters specified only in one of them"
2143	"syntax error : missing '%Fs' before '%Fs'"
2144	"syntax error : missing '%Fs' before type '%Fs'"
2145	"syntax error : missing '%Fs' before identifier"
2146	"syntax error : missing '%Fs' before identifier '%Fs'"
2147	"'%Fs' : const array must be fully initialized"
2148	"array too large"
2149	"'%Fs' : named bit field cannot have zero width"
2150	"'%Fs' : bit field must have type 'int', 'signed int', or 'unsigned int'"
2151	"more than one language attribute"
2152	"'%Fs' : pointers to functions with different attributes"
2153	"hex constants must have at least one hex digit"
2154	"'%Fs' : does not refer to a segment name"
2155	"'?' : invalid left operand, expected arithmetic or pointer type"
2156	"pragma must be outside function"
2157	"'%Fs' : must be declared before use in pragma list"
2158	"'%Fs' : is a function"
2159	"more than one storage class specified"
2160	"'##' cannot occur at the beginning of a macro definition"
2161	"'##' cannot occur at the end of a macro definition"
2162	"expected macro formal parameter"
2163	"'%Fs' : not available as an intrinsic function"
2164	"'%Fs' : intrinsic function not declared"
2165	"'%Fs' : cannot modify pointers to data"
2166	"l-value specifies const object"
2167	"'%Fs' : too many actual parameters for intrinsic function"
2168	"'%Fs' : too few actual parameters for intrinsic function"
2169	"'%Fs' : intrinsic function, cannot be defined"
2170	"'%Fs' : not declared as a function, cannot be intrinsic"
2171	"'%Fs' : illegal operand"
2172	"'%Fs' : actual parameter is not a pointer : parameter %d"
2173	"'%Fs' : actual parameter is not a pointer : parameter %d, parameter list %d"
2174	"'%Fs' : actual parameter has type 'void' : parameter %d, parameter list %d"
2175	"'%Fs' : invalid locale"
2176	"static huge data not supported by '%Fs'"	 
2177	"constant too big"
2178	"'%Fs' : storage class for same_seg variables must be extern"
2179	"'%Fs' : was used in same_seg, but storage class is no longer extern"
2180	"controlling expression has type 'void'"
2181	"illegal else without matching if"
2182	"'%Fs' : has type 'void'"
2183	"syntax error: translation unit is empty"
2184	"illegal return of a 'void' value"
2185	"'%Fs' : illegal based allocation"
2186	"'%Fs' : illegal operand of type 'void'"
2187	"cast of near function pointer to far function pointer"
2188	"'%ld' : too big for wide character"
2189	"#error : %Fs"
2190	"first parameter list longer than second"
2191	"second parameter list longer than first"
2192	"parameter '%d' declaration different"
2193	"'%Fs' : already in a segment"
2194	"'%Fs' : is a text segment"
2195	"'%Fs' : is a data segment"
2197	"'%Fs' : too many actual parameters"
2198	"'%Fs' : too few actual parameters"
2199	"syntax error : found '%Fs (' at global scope (was a declaration intended?)"
2200	"'%Fs' : function has already been defined"
2201	"'%Fs' : cannot export static declarations"
2202	"'%Fs' : not all control paths return a value"
2203	"delete operator cannot specify bounds for an array"
2204	"'%Fs' : type definition found within parentheses"
2205	"'%Fs' : cannot initialize extern variables with block scope"
2206	"'%Fs' : typedef cannot be used for function definition"
2207	"'%Fs' in struct/union '%Fs' has a zero-sized array"	
2208	"'%Fs' : no members defined using this type"
2209	"type cast in __based construct must be (__segment)"
2210	"'%Fs' : must be near/far data pointer"
2211	"(__segment) applied to function identifier '%Fs'"
2212	"'%Fs' : __based not available for pointers to functions"
2213	"'%Fs' : illegal argument to __based"
2214	"pointers based on 'void' require the use of :>"
2215	"':>' operator only for objects based on 'void'"
2216	"'%Fs' cannot be used with '%Fs'"
2217	"'%Fs' must be used with '%Fs'"
2218	"type in __based construct must be 'void'"
2219	"syntax error : type qualifier must be after '*'"
2220	"warning treated as error - no object file generated"
2221	"'.' : left operand points to class/struct/union, use '->'" 
2222	"'->' : left operand has struct/union type, use '.'"	
2223	"left of '->%Fs' must point to class/struct/union"
2224	"left of '.%Fs' must have class/struct/union type"
2225    "'%Fs' : function allocation must be in a named segment"
2226	"syntax error : unexpected type '%Fs'"
2227	"left of '->%Fs' must point to class/struct/union"
2228	"left of '.%Fs' must have class/struct/union type"
2229	"%Fs '%Fs' has an illegal zero-sized array"
2230	"'%Fs' : indirection to different types"
2231	"'.' : left operand points to '%Fs', use '->'"
2232	"'->' : left operand has '%Fs' type, use '.'"
2233	"'%Fs' : arrays of objects containing zero-size arrays are illegal"
2234	"arrays of references are illegal"
2235	"';' in formal parameter list"
2236	"unexpected '%Fs' '%Fs'"
2237	"unexpected %Fs '%Fs'"
2238	"unexpected token[s] preceding '%s'"
2239	"unexpected token '%Fs' following declaration of '%Fs'"
2240	"unexpected '%Fs' following formal list (only modifiers are allowed)"
2241	"'%Fs' : member access is restricted"
2242	"typedef name cannot follow class/struct/union"
2243	"%Fs conversion from '%Fs' to '%Fs' exists, but is inaccessible"
2244	"'%Fs' : unable to resolve function overload"
2245	"nonexistent function '%Fs' specified as friend"
2246	"'%Fs' : illegal static data member in locally defined class"
2247	"'%Fs' not accessible because '%Fs' uses '%Fs' to inherit from '%Fs'"
2248	"'%Fs' : cannot access %Fs %Fs declared in class '%Fs'"
2249	"'%Fs' : no accessible path to %Fs %Fs declared in virtual base '%Fs'"
2250	"'%Fs' : ambiguous inheritance of '%Fs::%Fs'"
2251	"'%Fs' : defined but not declared"
2252	"'%Fs' : pure specifier can only be specified for functions"
2253	"'%Fs' : pure specifier only applies to virtual function - specifier ignored"
2254	"'%Fs' : pure specifier not allowed on friend functions"
2255	"'%Fs' : a friend function can only be declared in a class"
2256	"illegal use of friend specifier on '%Fs'"
2257	"p-code generation pragma not allowed without /Oq"
2258	"illegal pure syntax, must be '= 0'"
2259	"'%Fs' : illegal attempt to instantiate abstract class"
2260	"function pointer cast to a data pointer"
2261	"data pointer cast to a function pointer"
2262	"'%Fs' : cannot be destroyed"
2263	"function returns pointer based on __self"
2264	"'%Fs' : error in function definition or declaration; function not called"
2265	"'%Fs' : reference to a zero-sized array is illegal"
2266	"'%Fs' : reference to a nonconstant bounded array is illegal"
2267	"'%Fs' : static functions with block scope are illegal"
2268	"'%Fs' : different '%Fs' qualifiers"
2269	"'%Fs' : different ambient model than base class '%Fs'"
2270	"'%Fs' : modifiers not allowed on nonmember functions"
2271	"'%Fs' : new/delete cannot have formal list modifiers"
2272	"'%Fs' : modifiers not allowed on static member functions"
2273	"'%Fs' : illegal as right side of '->' operator"
2274	"'%Fs' : illegal as right side of '.' operator"
2275	"'%Fs' : illegal use of this type as an expression"
2276	"'%Fs' : illegal operation on bound member function expression"
2277	"'%Fs' : cannot take address of this member function"
2278	"'%Fs' : no function with C linkage found"
2279	"cannot use braces to initialize default arguments"
2280	"missing '{' before identifier '%Fs'?"
2281	"'%Fs' : is not a function, but contains <function returning>; '%Fs' is unexpected"
2282	"'%Fs' is followed by '%Fs' (missing ','?)"
2283	"'%Fs' : pure specifier not allowed on unnamed %Fs"
2284	"unbalanced parenthesis found while processing a member function"
2285	"pointers to members representation has already been determined - pragma ignored"
2286	"pointers to members of '%Fs' representation is already set to %s inheritance - declaration ignored"
2287	"'%Fs': inheritance representation: '%Fs' is less general than the required '%Fs'"
2288	"typedef has a trailing __based which cannot be applied to the symbol's indirection"
2289	"same type qualifier used more than once"
2290	"C++ '%Fs' syntax is reserved for future use"
2291	"'%Fs' : illegal modifier '%Fs' for 'this' pointer"
2292	"'%Fs': best case inheritance representation: '%Fs' declared but '%Fs' required"
2293	"'%Fs': illegal to have a non-static member variable as a __based specifier"
2294	"'%Fs': illegal argument to intrinsic function, parameter %d"
2295	"escaped '%c' : is illegal in macro definition"
2296	"based32 : type mismatch"
2297	"':>': illegal on based32 pointers"
2298	"based32: illegal based specifier, must be one of 'void', 'segment variable' or 'segname(ARG)'"

2300	"'%Fs' : class does not have a destructor called '~%Fs'"
2301	"left of '->~%Fs' must point to class/struct/union"
2302	"left of '.~%Fs' must have class/struct/union type"
2303	"left of '.%Fs' must be an lvalue"

2340	"'%Fs' : illegal allocate specifier"

2350	"'%Fs' is not a static member"
2351	"obsolete C++ constructor initialization syntax"
2352	"'%Fs::%Fs' : illegal call of nonstatic member function"
2353	"'%Fs' : improper use of constructor initializers"
2354	"'%Fs' : initialization of reference member requires a temporary variable"
2355	"'this' : can only be referenced inside nonstatic member functions"
2356	"initialization segment must not change during translation unit"

2360	"initialization of '%Fs' is skipped by 'case' label"
2361	"initialization of '%Fs' is skipped by 'default' label"
2362	"initialization of '%Fs' is skipped by 'goto %Fs'"

2368	"'%Fs' : redefinition; different allocation specifiers"
2369	"'%Fs' : redefinition; different subscripts"
2370	"'%Fs' : redefinition; different storage class"
2371	"'%Fs' : redefinition; different basic types"
2372	"'%Fs' : redefinition; different types of indirection"
2373	"'%Fs' : redefinition; different type modifiers"
2374	"'%Fs' : redefinition; multiple initialization"
2375	"'%Fs' : redefinition; different linkage"
2376	"'%Fs' : redefinition; different based allocation"
2377	"'%Fs' : redefinition; typedef cannot be overloaded with any other symbol"
2378	"'%Fs' : redefinition; symbol cannot be overloaded with a typedef"
2379	"formal parameter %d has different type when promoted"
2380	"type[s] preceding '%Fs' (constructor with return type, or illegal redefinition of current class-name?)"

2385	"'%Fs::%Fs' is ambiguous"
2386	"ambiguous conversion from '%Fs*' to '%Fs*'"
2387	"ambiguous conversion from '%Fs&' to '%Fs&'"

2390	"'%Fs' : incorrect storage class '%Fs'"
2391	"'%Fs' : 'friend' cannot be used during type definition"

2400	"inline syntax error in '%Fs'; found '%Fs'"
2401	"'%Fs' : register must be base in '%Fs'"
2402	"'%Fs' : register must be index in '%Fs'"
2403	"'%Fs' : register must be base/index in '%Fs'"
2404	"'%Fs' : illegal register in '%Fs'"
2405	"illegal short forward reference with offset"
2406	"'%Fs' : name undefined in '%Fs'"
2407	"illegal 'float' register in '%Fs'"
2408	"illegal type on PTR operator in '%Fs'"
2409	"illegal type used as operator in '%s'"
2410	"'%Fs' : ambiguous member name in '%Fs'"
2411	"'%Fs' : illegal struct/union member in '%Fs'"
2412	"'%Fs' : case-insensitive label redefined"
2413	"'%Fs' : illegal align size"
2414	"illegal number of operands"
2415	"improper operand type"
2416	"'%Fs' : illegal opcode for processor"
2417	"divide by zero in '%Fs'"
2418	"'%Fs' : not in a register"
2419	"mod by zero in '%Fs'"
2420	"'%Fs' : illegal symbol in %Fs"
2421	"PTR operator used with register in '%Fs'"
2422	"illegal segment override in '%Fs'"
2423	"'%ld' : illegal scale"
2424	"'%Fs' : improper expression in '%Fs'"
2425	"'%Fs' : nonconstant expression in '%Fs'"
2426	"'%Fs' : illegal operator in '%Fs'"
2427	"'%Fs' : jump referencing label is out of range"	

2429	"'%Fs' : illegal far label reference"
2430	"more than one index register in '%Fs'"
2431	"illegal index register in '%Fs'"
2432	"illegal reference to 16-bit data in '%Fs'"
2433	"'%Fs' : '%Fs' not permitted on data declarations"
2434	"'%Fs' : cannot convert default argument from '%Fs' to '%Fs'"
2435	"'%Fs' : function called before default arguments were resolved"
2436	"'%Fs' : cannot initialize member functions"
2437	"'%Fs' : already initialized"
2438	"'%Fs' : cannot initialize static class data via constructor"
2439	"'%Fs' : member could not be initialized"
2440	"'%Fs' : cannot convert from '%Fs' to '%Fs'"
2441	"function call through pointer before default arguments were resolved"
2442	"p-code expression too complex for setjmp or Catch"
2443	"operand size conflict"
2444	"'%Fs' : does not use old style formal lists but is followed by a type. missing ';'?"

2446	"'%Fs' : no conversion from '%Fs' to '%Fs'"
2447	"missing function header (old-style formal list?)"
2448	"'%Fs' : function-style initializer appears to be a function definition"
2449	"found '{' at file scope (missing function header?)"
2450	"switch expression of type '%Fs' is illegal"
2451	"conditional expression of type '%Fs' is illegal"
2452	"array bound expression of type '%Fs' is illegal"
2453	"array bound expression uses function name"

2458	"'%Fs' : redefinition within definition"
2459	"'%Fs' : is being defined; cannot add as an anonymous member"
2460	"'%Fs' : uses '%Fs', which is being defined"
2461	"'%Fs' : constructor syntax missing formal parameters"
2462	"'%Fs' : cannot define a type in a 'new-expression'"
2463	"cannot define an anonymous type in a 'new-expression'"
2464	"'%Fs' : cannot use 'new' to allocate a reference"
2465	"cannot define an anonymous type inside parentheses"
2466	"cannot allocate an array of constant size 0"
2467	"illegal declaration of anonymous '%Fs'"
2468	"'new' : cannot allocate 'const'/'volatile' objects (type is '%Fs')"
2470	"cannot open database '%Fs'"
2471	"cannot update database '%Fs'"

2479	"'%Fs' : 'allocate( )' is only valid for data items of static extent"
2480	"'%Fs' : 'thread' is only valid for data items of static extent" 
2481	"'%Fs' : cannot be initialized using address of 'thread' variable '%Fs'"
2482	"'%Fs' : dynamic initialization of 'thread' data not allowed" 
2483	"'%Fs' : object with constructor cannot be declared 'thread'" 
2484	"'%Fs' : attribute '%Fs' doesn't match previous declaraion"
2485	"'%Fs' : unrecognized extended attribute" 
2486	"'__LOCAL_SIZE' only allowed in function with the 'naked' attribute"
2487	"'%Fs' : member of dll interface class may not be declared with dll interface"
2488	"'%Fs' : 'naked' can only be applied to function definitions"
2489	"'%Fs' : initialized auto or register variable not allowed at function scope in 'naked' function"
2490	"'%Fs' not allowed in function with 'naked' attribute"
2491	"'%Fs' : definition of dllimport %Fs not allowed"
2492	"'%Fs' : 'thread' data may not have dll interface"
2493	"illegal form of __based"
 
2500	"'%Fs' : '%Fs' is already a direct base class"
2501	"'%Fs' : missing decl-specifiers"
2502	"'%Fs' : too many access modifiers on the base class"
2503	"'%Fs' : base classes cannot contain zero-sized arrays"
2504	"'%Fs' : base class undefined"
2505	"'%Fs' : is not a legal base class"
2506	"'%Fs' : ambiguous"
2507	"'%Fs' : too many virtual modifiers on the base class"
2508	"'%Fs' : access denied"
2509	"'%Fs' : member function not declared in '%Fs'"
2510	"'%Fs' : left of '::' must be a class/struct/union"
2511	"'%Fs' : overloaded member function not found in '%Fs'"
2512	"'%Fs' : no appropriate default constructor available"
2513	"'%Fs' : decl-specifier is missing a declarator before '='"
2514	"'%Fs' : class has no constructors"
2515	"'%Fs' : not in class '%Fs'"

2517	"'%Fs' : right of '::' is undefined"

2519	"cannot convert '%Fs *' to '%Fs *'"

2523	"'%Fs::~%Fs' : destructor tag mismatch"
2524	"'%Fs' : destructors must have a 'void' formal parameter list"
2525	"'%Fs' : explicit destructor is named but not called"
2526	"'%Fs' : C linkage function cannot return C++ class '%Fs'"
2527	"'%Fs' : array of references must be fully initialized"
2528	"illegal pointer to reference"
2529	"illegal reference to a reference"
2530	"'%Fs' : references must be initialized"
2531	"'%Fs' : reference to a bit field illegal"
2532	"'%s' : cannot modify references"
2533	"'%Fs' : constructors not allowed a return type"
2534	"'%Fs' : constructor cannot return a value"
2535	"'%Fs' : member function already defined or declared"
2536	"'%Fs::%Fs' : cannot specify explicit initializer for arrays"
2537	"'%Fs' : illegal linkage specification"
2538	"new : cannot specify initializer for arrays"
2539	"new : '%Fs' no default constructor to initialize arrays of objects"
2540	"nonconstant expression as array bound"
2541	"delete : cannot delete objects that are not pointers"
2542	"'%Fs' : class object has no constructor for initialization"
2543	"expected ']' for operator '[]'"
2544	"expected ')' for operator '()'"
2545	"'%Fs' : unable to find overloaded operator"
2546	"'%Fs' : illegal mix of 'void' pointer with pointer to type"
2547	"illegal cast of overloaded function"
2548	"'%Fs' : missing default parameter for parameter %s"
2549	"user-defined conversion cannot specify a return type"
2550	"'%Fs' : constructor initializer lists are only allowed on constructor definitions"
2551	"'void *' type needs explicit cast"
2552	"'%Fs' : nonaggregates cannot be initialized with initializer list"
2553	"no legal conversion of return value to return type '%Fs'"
2555	"'%Fs::%Fs' : overriding virtual function differs from '%Fs::%Fs' only by return type or calling convention"
2556	"'%Fs' : overloaded functions only differ by return type"
2557	"'%Fs' : private and protected members cannot be initialized without a constructor"
2558	"'%Fs' : no copy constructor available"
2559	"'%Fs' : no match for specified operator"
2560	"'%Fs' : overloaded function differs only by calling convention/memory model"
2561	"'%Fs' : function must return a value"
2562	"'%Fs' : 'void' function returning a value"
2563	"mismatch in formal parameter list"

2565	"'::%Fs' was previously declared as a global function"
2566	"overloaded function in conditional expression"
2567	"'%Fs' : intrinsic function must have prototypes when using C++"
2568	"'%Fs' : unable to resolve function overload '%Fs'"
2569	"'%Fs' : union cannot be used as a base class"
2570	"'%Fs' : union cannot have base classes"
2571	"'%Fs' : union cannot have virtual function '%Fs'"
2572	"'%Fs' : redefinition of default parameter : parameter %s"

2574	"'%Fs' : illegal static destructor declaration"
2575	"'%Fs' : only member functions and bases can be virtual"
2576	"'%Fs' : virtual used for static member function"
2577	"'%Fs' : destructor cannot return a value"

2579	"'%Fs::%Fs(%s)' : parameter list not sufficiently different to '%Fs::%Fs(%s)'"
2580	"redefinition of class name '%Fs'"
2581	"'%Fs' : static 'operator =' function is illegal"
2582	"'%Fs' : 'operator =' function is unavailable"
2583	"'%Fs' : '%Fs' 'this' pointer is illegal for constructors/destructors"
2584	"'%Fs' : direct base '%Fs' is inaccessible; already a base of '%Fs'"
2585	"explicit conversion to '%Fs' is ambiguous"
2586	"incorrect user-defined conversion syntax : illegal indirections"
2587	"'%Fs' : illegal use of local variable as default parameter"
2588	"'::~%Fs' : illegal global destructor"
2589	"'%Fs' : illegal token on right side of '::'"
2590	"'%Fs' : ambiguous user-defined conversions in switch expression"
2591	"'%Fs' : ambiguous user-defined conversions in conditional expression"
2592	"no legal conversion of initialization expression to type '%Fs'"
2593	"'operator %Fs' is ambiguous"
2594	"'%Fs' : ambiguous conversions from '%Fs' to '%Fs'"
2595	"'%Fs' : qualified name already has a constructor"
2596	"'%Fs' : qualified name already has a destructor"
2597	"'%Fs' : does not specify an object"
2598	"linkage specification must be at global scope"
2599	"'%Fs' : local functions are not supported"
2601	"functions cannot be defined in local classes"
2602	"'%Fs::%Fs' is not a member of a base of '%Fs'"
2603	"illegal access declaration: '%Fs' is not a direct base of '%Fs'"
2604	"cannot declare %Fs access to %Fs member '%Fs::%Fs'"
2605	"overloaded functions '%Fs::%Fs' do not have same access"
2606	"'%Fs::%Fs': illegal private access declaration"
2607	"'%Fs' : cannot implicitly convert a '%Fs' to a '%Fs' that is not const"
2608	"illegal reference cast - operand not an l-value"
2609	"'%Fs' : cannot implicitly convert a non-lvalue '%Fs' function return to a '%Fs' that is not const"
2610	"%Fs '%Fs' can never be instantiated; user-defined constructor is required"
2611	"'%Fs' : illegal following '~' (expected identifier)"
2612	"trailing '%Fs' illegal in base/member initializer list"
2613	"trailing '%Fs' illegal in base class list"
2614	"'%Fs' : illegal member initialization: '%Fs' is not a base or member"
2615	"memory attribute must appear before class name in pointer to member"
2617	"'%Fs' : inconsistent return statement"
2618	"'%Fs' : inconsistent return statement"
2619	"union '%Fs' : cannot have static member variable '%Fs'"
2620	"union '%Fs' : member '%Fs' has default constructor"
2621	"union '%Fs' : member '%Fs' has copy constructor"
2622	"union '%Fs' : member '%Fs' has assignment operator"
2623	"union '%Fs' : member '%Fs' has destructor"
2624	"'%Fs' : references to 'void' are illegal"
2625	"anonymous union did not declare any data members"
2626	"anonymous union defines %Fs member '%Fs'"
2627	"member function defined in unnamed class"
2628	"'%Fs' followed by '%Fs' is illegal (did you forget a ';'?)"
2629	"unexpected '%s ('"
2630	"'%Fs' found in what should be a comma-separated list"
2631	"'%Fs' : destructors not allowed a return type"
2632	"'%Fs' followed by '%Fs' is illegal"
2633	"'%Fs' : 'inline' is the only legal storage class for constructors"
2634	"'&%Fs::%Fs' : pointer to reference member is illegal"
2635	"cannot convert a '%Fs*' to a '%Fs*'; conversion from a virtual base class is implied"
2636	"pointer to reference member is illegal"
2637	"'%s' : cannot modify pointers to data members"
2638	"'%Fs' : memory model modifier illegal on pointer to data member"
2639	"compiler generated %Fs required by unnamed class"

2641	"illegal pointer to member cast across virtual inheritance path"
2642	"cast to pointer to member must be from related pointer to member"
2643	"illegal cast from pointer to member"
2644	"basis class '%Fs' for pointer to member has not been defined"
2645	"no qualified name for pointer to member (found ':: *')"
2646	"global anonymous unions must be declared static"
2647	"'%Fs' : cannot dereference a '%Fs' on a '%Fs'"
2648	"'%Fs' : use of member as default parameter requires static member"
2649	"'%Fs' : is not a '%Fs'"
2650	"'%Fs' : cannot be a virtual function"

2652	"'%Fs' : illegal copy constructor: first parameter must not be a '%Fs'"
2653	"'%Fs' : is not a class name"
2654	"'%Fs' : attempt to access member outside a member function"
2655	"'%Fs' : definition or redeclaration illegal in current scope"
2656	"'%Fs' : function not allowed as a bit field"
2657	"'%Fs::*' found at the start of a statement (did you forget to specify a type?)"
2658	"multiple conversions : %Fs(%Fs) and %Fs::operator %Fs()"
2659	"'%Fs' : overloaded function as left operand"
2660	"'%Fs' : function does not take %d parameters"
2661	"'%Fs' : no overloaded function takes %d parameters"
2662	"'%Fs' : cannot convert 'this' pointer from '%Fs' to '%Fs'"
2663	"'%Fs' : %d overloads have no legal conversion for 'this' pointer"
2664	"'%Fs' : cannot convert parameter %d from '%Fs' to '%Fs'"
2665	"'%Fs' : none of the %d overloads can convert parameter %d from type '%Fs'"
2666	"'%Fs' : %d overloads have similar conversions"
2667	"'%Fs' : none of %d overload have a best conversion"
2668	"'%Fs' : ambiguous call to overloaded function"
2669	"illegal to overload member 'operator delete' with different number of formal arguments"

2671	"'%Fs' : static member functions do not have 'this' pointers"
2672	"'%Fs' : new/delete member functions do not have 'this' pointers"
2673	"'%Fs' : global functions do not have 'this' pointers"
2674	"'%Fs' : no acceptable conversions from '%Fs' to '%Fs'"
2675	"unary '%Fs' : '%Fs' does not define this operator or a conversion to a type acceptable to the predefined operator"
2676	"binary '%Fs' : '%Fs' does not define this operator or a conversion to a type acceptable to the predefined operator"
2677	"binary '%Fs' : no global operator defined which takes type '%Fs' (or there is no acceptable conversion)"

2702	" __except may not appear in termination block"	
2703	"illegal __leave statement"
2704	"'%Fs' : __va_start intrinsic only allowed in varargs"	
2705	"'%Fs' : illegal jump into __try scope"	

2707	"'%Fs' : bad context for intrinsic function"	
2708	"'%Fs' : actual parameters length in bytes differs from previous call or reference"
2709	"'%Fs' : formal parameters length in bytes differs from previous declaration"
2710	"cannot delete a pointer to a const object"
2711	"cannot delete a pointer to a function"

2720	"'%Fs' : '%Fs' storage-class specifier illegal on members"
2721	"'%Fs' : storage-class specifier illegal between operator keyword and type"
2722	"'::%Fs' : illegal following operator command; use 'operator %Fs'"
2723	"'%Fs' : '%Fs' storage-class specifier illegal on function definition"
2724	"'%Fs' : 'static' should not be used on member functions defined at file scope"

2730	"'%Fs' : cannot be a base class of itself"
2731	"'%Fs' : function cannot be overloaded"
2732	"linkage specification contradicts earlier specification for %Fs"
2733	"second C linkage of overloaded function '%Fs' not allowed"
2734	"'%Fs' : const object must be initialized if not extern"
2735	"'%Fs' keyword is not permitted in formal parameter type specifier"
2736	"'%Fs' keyword is not permitted in cast"
2737	"'%Fs' : base class '%Fs' must be exported"

2750	"'%Fs' : 'const T' to 'T' : '%Fs' to '%Fs'"
2751	"'%Fs' : 'volatile T' to 'T' : '%Fs' to '%Fs'"
2752	"'%Fs' : 'const T *' to 'T *' : '%Fs' to '%Fs'"
2753	"'%Fs' : 'volatile T *' to 'T *' : '%Fs' to '%Fs'"
2754	"'%Fs' : 'const T **' to 'T **' : '%Fs' to '%Fs'"
2755	"'%Fs' : 'volatile T **' to 'T **' : '%Fs' to '%Fs'"
2756	"'%Fs' : 'memory model mismatch' : '%Fs' to '%Fs'"
2757	"'%Fs' : 'language modifier mismatch: '%Fs' to '%Fs'"
2758	"'%Fs' : must be initialized in constructor base/member initializer list"

2800	"'operator %Fs' cannot be overloaded"
2801	"'operator %Fs' must be a %Fs member"
2802	"static member 'operator %Fs' has no formal parameters"
2803	"'operator %Fs' must have at least one formal parameter of class type"
2804	"binary 'operator %Fs' has too many parameters"
2805	"binary 'operator %Fs' has too few parameters"
2806	"'operator %Fs' has too many formal parameters"
2807	"the second formal parameter to postfix 'operator %Fs' must be 'int'"
2808	"unary 'operator %Fs' has too many formal parameters"
2809	"'operator %Fs' has no formal parameters"
2810	"second formal parameter for 'operator delete' must be 'unsigned int'"
2811	"too many formal parameters for based form of 'operator delete'"
2812	"second formal parameter required for based form of 'operator delete'"
2813	"too many formal parameters for 'operator delete'"
2814	"second actual parameter for based form of 'operator delete' must be '__based(void)*'"
2815	"first actual parameter for based form of 'operator delete' must be '__segment'"
2816	"alternative form of 'operator delete' must be a member"
2817	"return type for 'operator delete' must be 'void'"
2818	"incorrect return type for 'operator ->'"
2819	"recursive return type for 'operator ->'"
2820	"second formal parameter required for based form of 'operator new'"
2821	"first formal parameter to 'operator new' must be 'unsigned int'"
2822	"second formal parameter for huge form of 'operator new' must be 'unsigned int'"
2823	"return type for based form of 'operator new' must be 'void __based(void)*'"
2824	"return type for 'operator new' must be 'void *'"
2825	"first formal parameter for huge form of 'operator new' must be 'unsigned long'"
2826	"second formal parameter required for huge form of 'operator new'"
2827	"'operator %s' cannot be globally overridden with unary form"
2828	"'operator %s' cannot be globally overridden with binary form"
2829	"'operator %Fs' cannot have a variable parameter list"
2830	"only placement parameters to 'operator new' can have default values"
2831	"'operator %Fs' cannot have default parameters"
2832	"'%Fs' form of 'operator %Fs' cannot be a member"
2833	"'operator %Fs' is not a recognized operator or type"
2834	"'operator %Fs' must be globally qualified"
2835	"user-defined conversion '%Fs' takes no formal parameters"
2836	"cannot export '%Fs': a previous declaration did not export it"
2837	"'%Fs' : illegal local static variable in exported inline function"
2838	"illegal qualified name in member declaration"

2850	"#pragma hdrstop cannot be nested in a function or definition"
2851	"#pragma hdrstop required for /Yu command-line option without filename"
2852	"'%Fs' is not a valid precompiled header file"
2853	"'%Fs' is not a precompiled header file created with this compiler"
2854	"syntax error in #pragma hdrstop"
2855	"command-line option '%Fs' inconsistent with precompiled header"
2856	"#pragma hdrstop cannot be inside an #if block"
2857	"'#include' statement specified with the /Yc%Fs command-line option was not found in the source file"

2900	"'%Fs' : huge array cannot be aligned to segment boundary"

2910	"cannot call function from p-code with more than 255 bytes of arguments"
2911	"cannot define p-code function with more than 255 bytes of parameters"

2000	"UNKNOWN ERROR\n\t\tContact Microsoft Product Support Services"

		

1001	"internal compiler error\n\t\t(compiler file '%s', line %d)"

1003	"error count exceeds %d; stopping compilation"
1004	"unexpected end of file found"
1005	"string too big for buffer"
1006	"write error on compiler-generated file"
1007	"unrecognized flag '%Fs' in '%Fs'"
1008	"no input file specified"
1009	"compiler limit : macros nested too deeply"
1010	"unexpected end of file while looking for precompiled header directive"
1011	"compiler limit : '%Fs' : macro definition too big"
1012	"unmatched parenthesis : missing '%c'"
1013	"compiler limit : too many open parentheses"
1014	"too many include files : depth = %d"
1015	"compiler limit : too many segments"
1016	"#if[n]def expected an identifier"
1017	"invalid integer constant expression"
1018	"unexpected #elif"
1019	"unexpected #else"
1020	"unexpected #endif"
1021	"invalid preprocessor command '%Fs'"
1022	"expected #endif"
1023	"cannot open source file '%Fs'"
1024	"cannot open include file '%Fs'"
1025	"compiler terminated by user"	
1026	"parser stack overflow, program too complex"
1027	"DGROUP data allocation exceeds 64K"	
1028	"'%s' : segment allocation exceeds 64K" 
1029	"there are more than 512 bytes of arguments"
1030	"there are more than 512 bytes of local variables"
1031	"compiler limit : function calls nested too deeply"	
1032	"cannot open object code listing file '%s'"	

1034	"%Fs: no include path set"
1035	"expression too complex; simplify expression"	

1037	"cannot open object file '%s'"	
1038	"compiler limit : '%Fs' : control flow state too complex; simplify function"

1041	"cannot open compiler intermediate file - no more files"
1042	"cannot open compiler intermediate file - no such file or directory"
1043	"cannot open compiler intermediate file"
1044	"out of disk space for compiler intermediate file"
1045	"compiler limit : linkage specifications nested too deeply"
1046	"compiler limit : %Fs nested too deeply"
1047	"limit of %Fs exceeded at '%Fs'"
1048	"unknown option '%c' in '%s'"
1049	"invalid numerical argument '%s'"
1050	"'%Fs' : code segment too large"

1052	"compiler limit : #if or #ifdef blocks nested too deeply"
1053	"compiler limit : struct/union nested too deeply"	
1054	"compiler limit : initializers nested too deeply"
1055	"compiler limit : out of keys"
1056	"compiler limit : out of macro expansion space"
1057	"unexpected end of file in macro expansion"
1058	"compiler limit : too many formal arguments"
1059	"compiler is out of near heap space"
1060	"compiler is out of far heap space"
1061	"compiler limit : blocks nested too deeply"	
1062	"error while writing to preprocessor output file"
1063	"compiler limit : compiler stack overflow"
1064	"compiler limit : token overflowed internal buffer"
1065	"compiler limit : out of tags"
1066	"compiler limit : decorated name length exceeded"

1068	"cannot open file '%Fs'"
1069	"write error on file '%s'"	
1070	"mismatched #if/#endif pair in file '%Fs'"
1071	"unexpected end of file found in comment"
1072	"'%Fs' : cannot read file"

1082	"Cannot close %Fs file: '%Fs': %Fs (%Fs:%ld)"
1083	"Cannot open %Fs file: '%Fs': %Fs"
1084	"Cannot read %Fs file: '%Fs': %Fs"
1085	"Cannot write %Fs file: '%Fs': %Fs (%Fs:%ld)"
1086	"Cannot seek %Fs file: '%Fs': %Fs (%Fs:%ld)"
1087	"Cannot tell %Fs file: '%Fs': %Fs (%Fs:%ld)"
1088	"Cannot flush %Fs file: '%Fs': %Fs (%Fs:%ld)"

1090	"data allocation exceeds 64K"		

1126	"'%Fs' : automatic allocation exceeds %s" 
1127	"'%Fs' : segment redefinition"

1500	"'%Fs' : cannot open inline function definition file"
1501	"compiler limit : too many temporary variables"
1502	"inline member-function definition missing '}'"
1503	"default parameter definition missing ',' or ')'"
1504	"type still ambiguous after parsing %d tokens, unable to recover"
1505	"unrecoverable parser look-ahead error"
1506	"unrecoverable block scoping error"
1507	"previous user errors and subsequent error recovery halt further compilation"

1700	"%Fs compiler is out of far heap space" 

1852	"'%Fs' is not a valid precompiled header file"
1853	"'%Fs' is not a precompiled header file created with this compiler"
1855	 "command-line option '%Fs' inconsistent with precompiled header"

1900	"Il mismatch between '%s' version '%ld' and '%s' version '%ld'"
1000	"UNKNOWN FATAL ERROR\n\t\tContact Microsoft Product Support Services"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\bin.16\c23.err ===
/* fatals */

1001	"internal compiler error\n\t\t(compiler file '%s', line %d)"
1002	"compiler is out of heap space in pass 2"
1003	"error count exceeds %d; stopping compilation"
1004	"unexpected end-of-file found"
1005	"string too big for buffer"
1006	"write error on compiler intermediate file"
1007	"unrecognized flag '%s' in '%s'"
1013	"cannot open source file '%s'"
1015	"compiler limit : too many segments"
1027	"DGROUP data allocation exceeds 64K"
1029	"there are > 512 bytes of arguments"
1030	"there are > 512 bytes of local variables"
1032	"cannot open object listing file '%s'"
1033	"cannot open assembly language output file '%s'"
1035	"expression too complex, please simplify"
1036	"cannot open source listing file '%s'"
1037	"cannot open object file '%s'"
1039	"unrecoverable heap overflow in pass 3"
1040	"unexpected end-of-file in source file '%s'"
1041	"cannot open compiler intermediate file - no more files"
1042	"cannot open compiler intermediate file - no such file or directory"
1043	"cannot open compiler intermediate file"
1044	"out of disk space for compiler intermediate file"
1045	"floating-point overflow"
1048	"unknown option '%c' in '%s'"
1049	"invalid numerical argument '%s'"
1050	"'%s' : code segment too large"

1055	"compiler limit : out of keys"
1067	"intrinsic not implemented"
1073	"bad '%s' flag, would overwrite '%s' with '%s'"
1074	"too many '%s' flags, '%s'"
1083	"Cannot open %Fs file: '%Fs': %Fs"
1084	"Cannot read %Fs file: '%Fs': %Fs"
1085	"Cannot write %Fs file: '%Fs': %Fs"
1090	"'%s' data allocation exceeds 64K"
1126	"'%s' : automatic allocation exceeds %s"
1127	"'%s' : segment redefinition"
1900	"Il mismatch between '%s' version '%ld' and '%s' version '%ld'"
1000	"UNKNOWN FATAL ERROR\n\t\tContact Microsoft Product Support Services"

						/* errors */
	
2125	"'%s' : allocation exceeds 64K"
2127	"parameter allocation exceeds 32K"
2129	"static function '%s' not found"
2220	"warning treated as error - no object file generated"
2374    "'%s' redefinition; multiple initialization"
2418	"'%s' : not in a register"
2427	"'%s' : jump referencing label is out of range"
2900	"'%s' : huge array cannot be aligned to segment boundary"
2000	"UNKNOWN ERROR\n\t\tContact Microsoft Product Support Services"

						/* warnings */
	
4700	"local variable '%s' used without having been initialized"
4701	"local variable '%s' may be used without having been initialized"
4702	"unreachable code"
4703	"'%s' : function too large for global optimizations"
4704	"'%s' : in-line assembler precludes global optimizations"
4705	"statement has no effect"
4706	"assignment within conditional expression"
4707	"'%s' : function too large for global optimizations (%s)"  /* internal use */
4708	"ran out of heap at: %s"  /* internal use */
4709	"comma operator within array index expression"
4710	"function '%s' not expanded"
4711	"function '%s' selected for automatic inline expansion"
4712	"'%s' : used as register - loss of debugging information"
4713	"%s: internal compiler error; restarting\n\t\t(compiler file '%s', line %d)"
4723	"potential divide by 0"
4724	"potential mod by 0"
4726	"'%c' : unknown memory-model command-line option"
4727	"conditional expression is constant"
4746	"'%s' : unsized array treated as '%s'"
4756	"overflow in constant arithmetic"
4757	"overflow in constant multiplication"
4758	"address of automatic (local) variable taken, DS != SS"
4759	"segment lost in conversion"
4760	"'%Fs' : segment lost in initialization"
4761	"integral size mismatch in argument; conversion supplied"
4762	"near/far mismatch in argument : conversion supplied"
4763	"'%s' : function too large for post-optimizer"
4765	"recoverable heap overflow in post-optimizer - some optimizations may be missed"
4766	"local symbol table overflow - some local symbols may be missing in listings"
4769	"conversion of near pointer to long integer"
4772	"'%s' : too many debug entry points, maximum %d"
4773	"scoping too deep, deepest scoping merged when debugging"
4785	"near call to '%s' in different segment"
4786	"string too long - truncated to %d characters"
4787	"unprototyped function '%s' called in exception"
4788	"'%Fs' : identifier was truncated to '%d' characters"
4790	"insufficient memory to process debugging information"
4791	"loss of debugging information caused by optimization"
4792	"long double type not supported by alternate math library"
4900	"Il mismatch between '%s' version '%ld' and '%s' version '%ld'"

4000	"UNKNOWN WARNING\n\t\tContact Microsoft Product Support Services"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\bin.16\mc.txt ===
This document describes how messages will be input, stored and formatted
by a Win32 application.

1.  Message Input

    Messages are input as ASCII text in a text file.  The format of this
    file supports specifying multiple versions of the same message text,
    one for each language supported.  It also supports automatic assignment
    of code numbers to each message, along with the generation of a C
    language include file for use by the application for accessing the
    messages using symbolic constants.  The purpose of the message text
    file is to define all of the messages needed by an application, in a
    format that makes it easy to support multiple languages with the same
    image file.

    Message text files are converted into binary resource files by the
    MC program.  These binary resource files are then input to the RC
    compiler which will put them in the resource table for an
    application or DLL.

    The format of the message text file (default extension is .mc).
    Basic syntax is Keyword=Value, where spaces around the equal sign
    are ignored, and the value is delimited by white space from the next
    keyword=value pair.  Case is ignored when comparing against keyword
    names.  The value portion can either be a numeric integer constant,
    {NUMBER}, using C syntax; a symbol name, {NAME}, that follows the
    rules for C identifier names; or a file name that follows the
    rules for the FAT file system (8 characters or less, no periods).

    Comment lines are allowed in the message text file.  The comment
    syntax is the same as for WIN.INI, namely a semicolon begins a
    comment which is terminated by the end of the line.  Comments that
    exist by themselves on a line are copied as is to the output .h
    file, with the semicolon converted to the C end of line comment
    syntax (//).

    The overall structure of a message text file consists of a header
    section which contains zero or more of the following keywords:

        MessageIdTypedef={NAME}
        SeverityNames=({NAME}={NUMBER}:{NAME})
        FacilityNames=({NAME}={NUMBER}:{NAME})
        LanguageNames=({NAME}={NUMBER}:{FILENAME})

    These keywords have the following meaning:

        MessageIdTypedef - gives a symbolic name that is output as the
            typedef name for each numeric MessageId value.  The default
            value for this is NULL, which means there will be no type
            cast output when defining symbolic names for a MessageId.

        SeverityNames - defines the set of names that are allowed as the
            value of the Severity keyword in the message definition.
            The set is delimited by left and right parenthesis.
            Associated with each severity name is a number that, when
            shifted left by 30, gives the bit pattern to logically OR
            with the Facility value and MessageId to come up with the
            full 32-bit message code.  The default value of this keyword
            is:

                SeverityNames=(Success=0x0
                               Informational=0x1
                               Warning=0x2
                               Error=0x3
                              )

            Severity values occupy the high two bits of a 32-bit message
            code.  Any severity value that does not fit in two bits is
            an error.  The severity codes can be given symbolic names
            by following each value with :{NAME}

        FacilityNames - defines the set of names that are allowed as the
            value of the Facility keyword in the message definition.
            The set is delimited by left and right parenthesis.
            Associated with each facility name is a number that, when
            shift it left by 16 bits, gives the bit pattern to logically
            OR with the Severity value and MessageId to come up with the
            full 32-bit message code.  The default value of this keyword
            is:

                FacilityNames=(System=0x0FF
                               Application=0xFFF
                              )


            Facility codes occupy the low order 12 bits of the high
            order 16-bits of a 32-bit message code.  Any facility code
            that does not fit in 12 bits is an error.  This allows for
            4096 facility codes.  The first 256 are reserved for
            use by the system software.

            The facility codes can be given symbolic names by following
            each value with :{NAME}

        LanguageNames - defines the set of names that are allowed as the
            value of the Language keyword in the message definition.
            The set is delimited by left and right parenthesis.
            Associated with each language name is a number and a file
            name that will be used to name the binary output file that
            will contain all of the message text for that language.  The
            number corresponds to the Language Id tag to use in the
            resource table.  The number is separate from the file name
            with a colon.  The initial value of this keyword is:

                LanguageNames=(English=1:MSG00001)

            Any new names that an application defines in its .mc file
            which don't override any of the builtin names will be added
            to the list of valid languages.  This allows an application
            to support private languages with descriptive names.

    Following the header section are zero or more message definitions.
    Each message definition begins with one or more of the following
    keywords.

        MessageId={|{NUMBER}|+{NUMBER}}
        Severity={SEVERITY_NAME}
        Facility={FACILITY_NAME}
        SymbolicName={NAME}

    The MessageId keyword is required to mark the beginning of the
    message definition, although its value is optional.  If no value is
    specified, then the value used will be the last value used for the
    facility, plus one.  If the value is specified as +{NUMBER} then
    the value used will be the last value used for the facility, plus
    the number after the plus sign.  Otherwise if a numeric value is
    given, that will be value used.  Any MessageId value that does not
    fit in 16 bits is an error.

    Severity and Facility are optional keywords that can specify
    additional bits to OR into the final 32-bit message code.  If either
    of these are not specified they default to the value last specified
    for a message definition.  The initial values of these prior to
    processing the first message definition is:

        Severity=Success
        Facility=Application

    The value associated with these keywords must match one of the names
    given to the FacilityNames and SeverityNames keywords.  The SymbolicName
    keyword allows the ISV to associate a C symbolic constant name with the
    final 32-bit message code that is a result of ORing together the
    MessageId, Severity and Facility bits.  The constant definition is
    output to the generated .h file with the following format:

        //
        // {MESSAGETEXT}
        //

        #define CONSTANT_SYMBOL_NAME ((MessageIdTypedef) 0x12345678)

    where the comment before the definition is a copy of the message
    text for the first language specified in the message definition.
    The CONSTANT_SYMBOL_NAME is the value of the SymbolicName keyword.
    The MessageIdTypedef is not output if it is NULL, the default value.

    After the message definition keywords, comes one or more message text
    definitions.  Each message text definition begins with the Language
    keyword that identifies which binary output file this message text
    is to be output to.  Beginning on the very next line is the first
    line of the message text.  The message text is terminated by a line
    containing a single period at the beginning of the line, immediately
    followed by a new line.  No spaces allowed around keyword.  Within
    the message text, blank lines and white space are preserved as part
    of the message.

        Language={LANGUAGE_NAME}
        {MESSAGETEXT}
        .

    Within the message text, several escape sequences are supported for
    dynamically formatting the message.  The percent sign character (%)
    begins all escape sequences.


        %0 - This terminates a message text line without a trailing
             newline.  This can be used to build up long lines or to
             terminate the message itself without a trailing newline,
             which is useful for prompt messages.

        %n!printf format string!  - This identifies an insert.  The
             value of n can be between 1 and 99.  The printf format
             string must be bracketed by exclamation marks.  It is
             optional and defaults to !s! if not specified.

             The printf format string can contain the * specifier for
             either the precision or width components, and if so, they
             will consume inserts %n+1 and %n+2 for their values at run
             time.  MC will print a warning message if an explicit
             reference is made to these inserts elsewhere in the message
             text.

    Inserts must reference a parameter passed to the FormatMessage API
    call.  It will return an error if a message refers to an insert that
    was not passed to the FormatMessage API call.

    Any other character following a percent sign, other than a digit will
    be formatted in the output message without the percent sign.  Some
    examples:

        %% - will output a single percent sign in the formatted message text.

        %n - will output a hard line break when it occurs at the end of a
             a line.  Useful when FormatMessage is supplying normal line
             breaks so the message fits in a certain width.

        %r - will output a hard carriage return, without a trailing newline.

        %b - will output a space in the formatted message text.  This
             can be used to insure there are the appropriate number of
             trailing spaces in a message text line.

        %t - will output a tab in the formatted message text.

        %. - will output a single period in the formatted message text.
             This can be used to get a single period at the beginning of
             a line without terminating the message text definition.

        %! - will output a single exclamation point in the formatted
             message text.  This can be used to get an exclamation point
             immediately after an insert without it being mistaken for
             the beginning of a printf format string.

    Unicode support is not understood yet.  If the input file is ASCII
    text, do we need an escape sequence to allow input of Unicode values?
    Or do we just let them use DBCS in the text file, assuming they have
    a text editor that can do this.

2.  Message Compiler (MC)

    This program converts .mc message text files into binary files
    suitable for inclusion into a .RC file by the resource compiler.

    Command line syntax:

        MC [-v] [-w] [-s] [-h DirSpec] [-r DirSpec] filename[.mc] ...

    where:

        -v - generates verbose output to stderr.

        -w - generates a warning message whenever an insert escape
             sequence is seen that is a superset of the type supported
             by OS/2 mkmsgf (i.e.  anything other than %0 and %n).
             Useful for converting old OS/2 message files to this
             format.

        -s - Add an extra line to the beginning of each message that is
             the symbolic name associated with the message id.

        -h DirSpec - specifies the target directory of the generated
             .h file.  The file name is the name of the .mc file with a
             .h extension.

        -r DirSpec - specifies the target directory of the generated
             .rc file.  The file name is the name of the .mc file with a
             .rc extension.

        filename.mc - specifes one or more input message files that
                      will be compiled into one or more binary resource
                      files, one for each language that the message
                      files contain message text for.

    The message compiler reads the .mc file and generates a .h file
    containing all the symbolic name definitions.  For each LanguageId
    that was used to specify message text, it outputs a binary file
    containing a message table resource.  It also outputs a single .rc
    file that contains the appropriate RC syntax to include each binary
    file output as a resource with the appropriate name and type ids.

3.  Message Win32 API Calls

DWORD
APIENTRY
FormatMessage(
    DWORD dwFlags,
    LPVOID lpSource,
    DWORD dwMessageId,
    DWORD dwLanguageId,
    LPSTR lpBuffer,
    DWORD nSize,
    va_list Arguments
    )

Routine Description:

    This function formats a message string.  Input to this function is a
    message definition.  It can come from a buffer passed into this
    function.  It can come from a message table resource in a module
    already loaded.  Or the caller can ask this function to search the
    system message table resource(s) for the message.  This function
    finds the message definition based on the Message Id and the
    Language Id and copies the message text to the output buffer,
    processing any imbedded insert sequences if requested.

Arguments:

    dwFlags - Specifies options to the formatting process along with how
        to interpret the lpSource parameter.  The low order 16bits of
        this parameter are the maximum width of a line, in characters.
        Possible values are:

        FORMAT_MESSAGE_ALLOCATE_BUFFER - the lpBuffer is a PVOID * and
            nSize is the minimum size to allocate.  This function will
            then allocate a buffer large enought to hold the formatted
            message and store the pointer to the buffer in the location
            pointed to by lpBuffer.   Caller should free the buffer
            with LocalFree when they are done using it.

        FORMAT_MESSAGE_IGNORE_INSERTS - insert sequences in the message
            definition will be ignored and passed through to the output
            buffer as is.  Useful for fetching a message for later
            formatting.  If this flag is set, the lpArguments parameter
            is ignored.

        FORMAT_MESSAGE_FROM_STRING - lpSource is a pointer to a null
            terminated message definition.  It can contain insert
            sequences just as the message text in the .mc file can.

        FORMAT_MESSAGE_FROM_HMODULE - lpSource is a module handle that
            contains the message table resource(s) to search.  If this
            handle is NULL, then the current process's application
            image file will be searched.

        FORMAT_MESSAGE_FROM_SYSTEM - If the requested message was not
            found in lpSource or if lpSource was not examined (i.e. neither
            of the preceeding two flags was specified), then this function
            will search the system message table resource(s).

        FORMAT_MESSAGE_ARGUMENT_ARRAY - If set, specifies that the passed
            Arguments parameter is NOT a va_list structure but instead is
            just a pointer to an array of 32-bit values that represent
            the arguments.

        FORMAT_MESSAGE_MAX_WIDTH_MASK - The low order 8 bits specify the
            maximum width of each line formatted into the output buffer.
            A maximum width of zero, means that no restrictions are
            placed on the width, and only the line breaks in the message
            definition will be placed in the output buffer.  If a non-zero
            value is specified, then line breaks in the message definition
            text are ignored, and instead line breaks are calculated based
            on the maximum width, with white space delimited strings never
            being split across a line break.  Hard coded line breaks in
            the message definition text, that are identified by the %n
            escape sequence, are always output to the output buffer.

            If the width specified is FORMAT_MESSAGE_MAX_WIDTH_MASK, then
            line breaks in the message file are ignored and only hard coded
            line breaks are kept and none are generated.

    lpSource - specifies where to retrieve the message definition from.
        The type of this parameter depends upon the settings in the
        dwFlags parameter.

            FORMAT_MESSAGE_FROM_HMODULE - lpSource is an hModule of the
                module that contains the message table to search.

            FORMAT_MESSAGE_FROM_STRING - lpSource is an LPSTR that points
                to unformatted message text.  It will be scanned for
                inserts and formatted accordingly.

        If neither of these options is specified, then this parameter is
        ignored.

    dwMessageId - specifices the 32-bit message identifier that identifies
        the message being requested.  This parameter is ignored if the
        FORMAT_MESSAGE_FROM_STRING flag is specified.

    dwLanguageId - specifices the 32-bit language identifier that
        identifies the language of the message being requested.  This
        parameter is ignored if the FORMAT_MESSAGE_FROM_STRING flag is
        specified.

    lpBuffer - specifies a pointer to a buffer where the formatted message
        is to be written.  A terminating null byte will also be written.
        If the FORMAT_MESSAGE_ALLOCATE_BUFFER flag was specified, then
        this parameter points to a 32-bit pointer value that is filled in
        by this call with a pointer allocated via LocalAlloc to contain
        the text of the message.

    nSize - specifies the maximum number of bytes that can be stored in
        the output buffer.  This parameter is ignore if the
        FORMAT_MESSAGE_ALLOCATE_BUFFER flag is set.

    Arguments - specifies a pointer to variable number of arguments.
        These arguments are used to satisfy insert requests in the
        format string.  Thus %1 in the format string specifies the
        first argument in the variable number of arguments described
        by the Arguments parameter; %3 would specify the third, etc.

        The interpretation of each 32-bit arguments value depends upon
        the formatting information associated with the insert in the
        message definition.  The default is to treat each pointer as a
        pointer to a null terminated string.

        By default the Arguments parameter is of type va_list, which is
        a language and implementation specific data type for describing
        a variable number of arguments.  If you do not have a pointer of
        type va_list, then specify the FORMAT_MESSAGE_ARGUMENT_ARRAY
        flag and pass a pointer to an array of 32-bit values that are
        are input to the message formatted as the insert values.
Return Value:

    DwORD - Returns the number of bytes actually stored in the output
        buffer, excluding the terminating null character.  Returns 0 if
        an error occurred.  Extended error status is available via the
        GetLastError API.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\bin.16\cl.err ===
/* error messages */

2001	"too many symbols predefined with /D"
2002    "memory-model conflict"
2003    "missing source filename"
2005    "%s requires /vmg"
2008	"limit of %s exceeded at '%s'"
2011	"only one floating-point option allowed"
2012	"too many linker arguments"
2013    "incomplete model specification"
2016    "%s and %s command-line options are incompatible"
2018	"cannot create linker response file"
2019	"cannot overwrite source or object file '%s'"
2020	"%s option requires extended keywords to be enabled (/Ze)"
2021	"invalid numeric argument '%s'"
2022	"cannot open '%s'"
2023    "invalid model specification - flat model only"
2027	"cannot execute '%s'"
2028    "too many open files; cannot redirect '%s'"
2030	"internal compiler error in '%s'"
2031    "too many command-line options"
2000	"unknown command-line error"

				/* warning messages */

4001	"listing overrides assembly output"
4002	"ignoring unknown option '%s'"
4003	"processor-option conflict"
4004	"/G3 only available in optimizing compiler; assuming /G2"
4005	"cannot find '%s';\nPlease enter new filename (full path) or CTRL+C to quit: "
4007	"'%s' requires '%s'; option ignored"
4009	"threshold only for far or huge data; ignored"
4011	"preprocessing overrides source listing"
4012	"function declarations override source listing"
4013	"combined listing overrides object listing"
4014	"invalid value '%d' for '%s'; assuming '%d'"
4018	".DEF files supported for segmented executable files only"
4019	"string too long; truncated to %d characters"
4020    "'%s' : missing argument; option ignored"
4021    "no action performed"
4022	"option '%s' invalid for %d-bit target"
4023	"option '%s' forces use of optimizing compiler"
4000	"unknown command-line warning"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\bin.16\ml.err ===
FATAL
cannot open file
I/O error closing file
I/O error writing file
I/O error reading file
out of far memory
assembler limit : macro parameter name table full
invalid command-line option
nesting level too deep
unmatched macro nesting
line too long
unmatched block nesting
directive must be in control block
error count exceeds 100; stopping assembly
invalid numerical command-line argument
too many arguments
statement too complex
out of virtual memory
out of near memory
missing source filename
invocation failed : retry command line with /VM option
SEVERE
memory operand not allowed in context
immediate operand not allowed
cannot have more than one ELSE clause per IF block
extra characters after statement
symbol type conflict
symbol redefinition
undefined symbol
non-benign record redefinition
syntax error
syntax error in expression
invalid type expression
distance invalid for word size of current segment
PROC, MACRO, or macro repeat directive must precede LOCAL
.MODEL must precede this directive
cannot define as public or external
segment attributes cannot change
expression expected
operator expected
invalid use of external symbol
operand must be RECORD type or field
identifier not a record
record constants may not span line breaks
instruction operands must be the same size
instruction operand must have size
invalid operand size for instruction
operands must be in same segment
constant expected
operand must be a memory expression
expression must be a code address
multiple base registers not allowed
multiple index registers not allowed
must be index or base register
invalid use of register
invalid INVOKE argument
must be in segment block
DUP too complex
too many initial values for structure
statement not allowed inside structure definition
missing operand for macro operator
line too long
segment register not allowed in context
string or text literal too long
statement too complex
identifier too long
invalid character in file
missing angle bracket or brace in literal
missing single or double quotation mark in string
empty (null) string
nondigit in number
syntax error in floating-point constant
real or BCD number not allowed
text item required
forced error
forced error : value equal to 0
forced error : value not equal to 0
forced error : symbol not defined
forced error : symbol defined
forced error : string blank
forced error : string not blank
forced error : strings equal
forced error : strings not equal
[ELSE]IF2/.ERR2 not allowed : single-pass assembler
expression too complex for .UNTILCXZ
can ALIGN only to power of 2
structure alignment must be 1, 2, or 4
expected
incompatable CPU mode and segment size
LOCK must be followed by a memory operation
instruction prefix not allowed
no operands allowed for this instruction
invalid instruction operands
initializer magnitude too large for specified size
cannot access symbol in given segment or group
operands have different frames
cannot access label through segment registers
jump destination too far
jump destination must specify a label
instruction does not allow NEAR indirect addressing
instruction does not allow FAR indirect addressing
instruction does not allow FAR direct addressing
jump distance not possible in current CPU mode
missing operand after unary operator
cannot mix 16- and 32-bit registers
invalid scale value
constant value too large
instruction or register not accepted in current CPU mode
reserved word expected
instruction form requires 80386/486
END directive required at end of file
too many bits in RECORD
positive value expected
index value past end of string
count must be positive or zero
count value too large
operand must be relocatable
constant or relocatable label expected
segment, group, or segment register expected
segment expected
invalid operand for OFFSET
invalid use of external absolute
segment or group not allowed
cannot add two relocatable labels
cannot add memory expression and code label
segment exceeds 64K limit
invalid type for a data declaration
HIGH and LOW require immediate operands
N/A
cannot have implicit far jump or call to near label
use of register assumed to ERROR
only white space or comment can follow backslash
COMMENT delimiter expected
conflicting parameter definition
PROC and prototype calling conventions conflict
invalid radix tag
INVOKE argument type mismatch : argument
invalid coprocessor register
instructions and initialized data not allowed in AT segments
/AT switch requires the TINY memory model
cannot have segment address references with TINY model
language type must be specified
PROLOGUE must be macro function
EPILOGUE must be macro procedure
alternate identifier not allowed with EXTERNDEF
text macro nesting level too deep
N/A
missing macro argument
EXITM used inconsistently
macro function argument list too long
N/A
VARARG parameter must be last parameter
VARARG parameter not allowed with LOCAL
VARARG parameter requires C calling convention
ORG needs a constant or local offset
register value overwritten by INVOKE
structure too large to pass with INVOKE : argument
not overriding private proc as public
too many arguments to INVOKE
too few arguments to INVOKE
invalid data initializer
N/A
RET operand too large
too many operands to instruction
cannot have more than one .ELSE clause per .IF block
expected data label
cannot nest procedures
EXPORT must be FAR
procedure declared with two visibility attributes
macro label not defined
invalid symbol type in expression
byte register cannot be first operand
word register cannot be first operand
special register cannot be first operand
coprocessor register cannot be first operand
cannot change size of expression computations
syntax error in control-flow directive
cannot use 16-bit register with a 32-bit address
constant value out of range
missing right parenthesis
type is wrong size for register
structure cannot be instanced
non-benign structure redefinition: label incorrect
non-benign structure redefinition: too few labels
OLDSTRUCTS/NOOLDSTRUCTS state cannot be changed
non-benign structure redefinition: incorrect initializers
non-benign structure redefinition: too few initializers
non-benign structure redefinition: label has incorrect offset
structure field expected
unexpected literal found in expression
N/A
divide by zero in expression
directive must appear inside a macro
cannot expand macro function
too few bits in RECORD
macro function cannot redefine itself
N/A
invalid qualified type
floating-point initializer on an integer variable
nested structure improperly initialized
invalid use of FLAT
structure improperly initialized
improper list initialization
initializer must be a string or single item
initializer must be a single item
initializer must be a single byte
improper use of list initializer
improper literal initialization
extra characters in literal initialization
must use floating-point initializer
cannot use .EXIT for OS_OS2 with .8086
invalid combination with segment alignment
INVOKE requires prototype for procedure
cannot include structure in self
symbol language attribute conflict
non-benign COMM redefinition
COMM variable exceeds 64K
parameter or local cannot have void type
cannot use TINY model with OS_OS2
expression size must be 32 bits
.EXIT does not work with 32-bit segments
.STARTUP does not work with 32-bit segments
ORG directive not allowed in unions
D/T
illegal use of segment register
cannot declare scoped code label as PUBLIC
.MSFLOAT directive is obsolete : .MSFLOAT ignored
ESC instruction is obsolete : ESC ignored
LEVEL 1
cannot modify READONLY segment
N/A
non-unique STRUCT/UNION field used without qualification
start address on END directive ignored with .STARTUP
cannot ASSUME CS
unknown default prologue argument
too many arguments in macro call
option untranslated, directive required
invalid command-line option value, default is used
virtual memory not available : /VM ignored
insufficent memory for /EP : /EP ignored
expected '>' on text literal
multiple .MODEL directives found : .MODEL ignored
line number information for segment without class 'CODE'
instructions and initialized data not supported in AT segments
/VM ignored in enhanced memory configurations; Use MLX if for extra capacity
LEVEL 2
@@: label defined but not referenced
expression expected, assume value 0
EXTERNDEF previously assumed to be external
length of symbol previously assumed to be different
symbol previously assumed to not be in a group
types are different
LEVEL 3
N/A
no return from procedure
N/A
conditional jump lengthened
procedure argument or local not referenced
IF condition may be pass-dependent
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\compman\compman.txt ===
DOC file for AVI Installable compressors
ToddLa
----------------------------------------------------------------------------

This document covers what happens (from the drivers point of
view) when AVI loads, saves, edits, and plays a AVI file.


FORMAT OF A AVI FILE -------------------------------------------------------

AVI files are RIFF files with the following structure:

    RIFF('AVI'
        LIST('hdrl'
            avih(<MainAVIHeader>)
            LIST ('strl'
                strh(<Stream header>)
                strf(<Stream format>)
                strd(<Stream data>)
            )
        )
        LIST('movi'
	    00??(<driver Data>)
            .
            .
            .
	    00??(<driver Data>)
        )
        indx(<AVIIndex>)
    )

OPENING a file for decompression -------------------------------------------

this is what the driver see's when a AVI file is opened for playback
or editing.


    1.	The AVI runtime driver gets the FOURCC driver name from the stream
	header and tries to open the named driver.  drivers are
	listed in SYSTEM.INI

	    [Installable Compressors]
		VIDC.SAMP = icsample.drv

	This example lists a video driver ('VIDC') with the name 'SAMP'.

	The first message a device driver receives is DRV_OPEN. Your 
        device driver should allocate any instance data it uses when 
        it processes this message. (Your driver will receive DRV_OPEN 
        each time it is opened.)

    2.	If a 'strd' chunk exists for this stream, the AVI runtime driver 
        will send your driver an ICM_SETSTATE message. The <MI>lParam1<D> 
        parameter will contain a pointer to the data from 
	the file.

    3.	Depending on how the AVI runtime driver will use the decompressed 
        data, it will send either ICM_DECOMPRESS_GET_FORMAT
	or ICM_DECOMPRESS_QUERY to determine the decompression format.

	ICM_DECOMPRESS_GET_FORMAT:

	    When your driver gets ICM_DECOMPRESS_GET_FORMAT, 
	    <MI>lParam1<D> points to the 'strf' data, and <MI>lParam2<D> 
            points to a <B>BITMAPINFOHEADER<D> structure.

	    Your driver should fill in the <B>BITMAPINFOHEADER<D> with 
            information about the format it will use for decompressing 
            the data.

	    If your device driver cannot handle the input format, or 
            the input format 'strf' is incorrect, your driver 
            should return ICMERR_BADFORMAT to fail the message.

	ICM_DECOMPRESS_QUERY:

	    When your driver gets ICM_DECOMPRESS_QUERY, 
	    <MI>lParam1<D> points to the 'strf' data, and <MI>lParam2<D> 
            points to a <B>BITMAPINFOHEADER<D> structure. For this message, 
            the AVI runtime driver filled the structure with a 
            description of the output format it wants to use.

	    The sugested format will be the native or best format
	    for the decompressed data.  For example, 
            if playback is on an  8-bit device, the AVI runtime driver 
            will suggest an 8-bit DIB.

	    Your driver does not have to accept the suggested format. 
            If you fail the message, the AVI runtime driver will 
            suggest alternate formats until your driver accepts one. 
            If your driver exhausts the list of formats normally used, 
            the AVI runtime driver will request a format with 
            ICM_DECOMPRESS_GET_FORMAT.

    4.	When the AVI runtime driver is ready, it sends the 
        ICM_DECOMPRESS_BEGIN message to the device driver. The AVI runtime 
        driver sets <MI>lParam1<D> to the input format ('strf' data) 
        and <MI>lParam2<D> to the decompressed format of the DIB.
	If either of the formats is incorrect, your device driver 
        should return ICERR_BADFORMAT.

    5.	The AVI runtime driver sends ICM_DECOMPRESS each time 
        it has an image to decompress. The <B>ICDECOMPRESS<D> 
        structure specified in <MI>lParam1<D> contains the 
        decompression parameters. The AVI runtime driver 
        uses the flags in the AVI index to ensure decompression 
        will start on key frame boundries, 

    6.	Your device driver receives ICM_DECOMPRESS_END when 
        the AVI runtime driver no longer needs data decompressed.
        When the device driver is no longer needed the system will 
        close it by sending DRV_CLOSE.


COMPRESSING a file ------------------------------------------------------

This is the sequence of messages that occur for compressing video data.

NOTE: When an AVI file is recompressed, each frame is decompressed to 
a full frame and passed to the decompressor.


    1.  The first message a device driver receives is DRV_OPEN. Your 
        device driver should allocate any instance data it uses when 
        it processes this message. (Your driver will receive DRV_OPEN 
        each time it is opened.)


    2.	The AVI runtime driver restores the device driver state 
        by sending ICM_SET_STATE. (The state is recalled from the 
        strd data chunk of the AVI file. The state information was 
        obtained with the ICM_GET_STATE message.)

    3.	The AVI runtime driver determines the size of the buffer needed to 
        hold the compressed data format by sending ICM_COMPRESS_GET_FORMAT. 
        When requesting the buffer size, the AVI runtime driver uses 
        <MI>lParam1<D> to point to a <B>BITMAPINFOHEADER<D> structure 
        and sets <MI>lParam2<D> to NULL. Your device driver should 
        return the size of the buffer in bytes.

    4.	The AVI runtime driver requests the output format by sending 
        ICM_COMPRESS_GET_FORMAT with valid pointers in 
        both <MI>lParam1<D> and <MI>lParam2<D>. For this case, 
        your device driver should return the output format in 
        the buffer pointed to by <MI>lParam2<D>. 

	This data becomes the <B>strf<D> chunk in the AVI file.
	The data must start out like a <B>BITMAPINFOHEADER<D> data 
        structure. A color table (if used) follows this information. 
	The last part of the data is any additional information 
	required to decompress the file.

    5.	When the AVI runtime driver is ready to start compressing data 
        it sends the ICM_COMPRESS_BEGIN message. 
        The AVI runtime driver uses <MI>lParam1<D> to point to the 
        format of the data being compressed, and uses <MI>lParam2<D> 
        to point to format for the compressed data. If your device 
        driver cannot handle the formats, or if they are incorrect, 
        your driver should return ICERR_BADFORMAT to fail the message.

    6.	Before the AVI runtime driver starts compressing data, it sends 
        ICM_COMPRESS_GET_SIZE. For this message the AVI runtime driver 
        uses <MI>lParam1<D> to point to the input format and uses 
        <MI>lParam2<D> to point to the output format.

	Your driver should return the worst case size (in bytes) that any
	frame can compress to.  The AVI runtime driver uses this size 
        value when it allocates buffers for the compression.

    7.	The AVI runtime driver sends ICM_COMPRESS for each frame it 
        wants compressed. It uses <MI>lParam1<D> to point 
        to an <B>ICCOMPRESS<D> structure containing the parameters 
        used for compression.

	Your driver uses the buffers pointed to by the fields of 
        <B>ICCOMPRESS<D> for returning information 
        about the compressed data. 

        Your driver returns the actual size of the compressed data in the
	<B>biSizeImage<D> field in the <B>BITMAPINFO<D> data structure 
        pointed to by the <B>lpbiOutput<D> field of <B>ICCOMPRESS<D>.

        Your driver returns the chunk ID 
        in the buffer specified in the <B>lpckid<D> that it 
        assigns to the data.

	Your driver also returns a DWORD of flags in the buffer pointed 
        to by <B>lpdwFlags<D>. The flags will be placed	in the AVI 
        index for this chunk. The following flags are defined:

	    AVIIF_TWOCC 	Specifies ckid is a TWOCC.

	    AVIIF_KEYFRAME	Specifies this frame is a key frame.

	Your driver can define its own flags but they must be set in the high
	word only.

	If your driver handles temporal compression (that is, the compression 
        is based on the difference between two frames), it needs to save the
	previous frame(s) for temporal compresssion.

    8.	Your device driver receives ICM_DECOMPRESS_END when 
        the AVI runtime driver no longer needs data compressed, or when 
        the AVI runtime driver is changing the format or palette.
        If the AVI runtime driver will continue compressing data, it 
        will start the sequence by sending ICM_COMPRESS_BEGIN.
        When the device driver is no longer needed the system will 
        close it by sending DRV_CLOSE.


      The driver might also receive a ICM_COMPRESS_QUERY message 
      to determine if it supports the input or output format.

COMPRESSING A BUNCH OF FRAMES -------------------------------------------

    TBD
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\bin.16\rcpp.err ===
/* SCCSWHAT( "@(#)c1.err	2.29 88/02/25 18:18:00	" ) */
						/* fatals */

1001	"Internal Compiler Error\n\t\t(compiler file '%s', line %d)\n\t\tContact Microsoft Technical Support"
1002	"out of heap space"
1003	"error count exceeds %d; stopping compilation"
1004	"unexpected EOF"
1005	"string too big for buffer"
1006	"write error on compiler intermediate file"
1007	"unrecognized flag '%s' in '%s'"
1008	"no input file specified"
1009	"compiler limit : macros too deeply nested"
1010	"compiler limit : macro expansion too big"
1012	"bad parenthesis nesting - missing '%c'"
1013	"cannot open source file '%s'"
1014	"too many include files"
1015	"cannot open include file '%s'"
1016	"#if[n]def expected an identifier"
1017	"invalid integer constant expression"
1018	"unexpected '#elif'"
1019	"unexpected '#else'"
1020	"unexpected '#endif'"
1021	"bad preprocessor command '%s'"
1022	"expected '#endif'"
1023	"no int size specified"
1024	"no ptr size specified"
1025	"no function size specified"
1026	"parser stack overflow, please simplify your program"
1027	"DGROUP data allocation exceeds 64K"	/* QC, c23 */
1028	"%s segment allocation exceeds 64K"	/* QC */
1031	"compiler limit : function calls too deeply nested"	/* QC, c23 */
1032	"cannot open object listing file '%s'"			/* QC, c23 */
1035	"expression too complex, please simplify"		/* QC, c23 */
1037	"cannot open object file '%s'"					/* QC, c23 */
1041	"cannot open compiler intermediate file - no more files"
1042	"cannot open compiler intermediate file - no such file or directory"
1043	"cannot open compiler intermediate file"
1044	"out of disk space for compiler intermediate file"
1045	"floating point overflow"
1047	"too many %s flags, '%s'"
1048	"unknown option '%c' in '%s'"
1049	"invalid numerical argument '%s'"
1052	"too many #if/#ifdef's"
1053	"compiler limit : struct/union nesting"
1054	"compiler limit : initializers too deeply nested"
1055	"compiler limit : out of keys"
1056	"compiler limit : out of macro expansion space"
1057	"unexpected EOF in macro expansion (missing ')'?)"
1059	"out of near heap space"
1060	"out of far heap space"
1061	"compiler limit : blocks too deeply nested"	/* QC */
1062	"error writing to preprocessor output file"
1063	"compiler limit : compiler stack overflow"	/* QC */
1064	"compiler limit : identifier overflowed internal buffer"
1065	"compiler limit : declarator too complex"
1000	"UNKNOWN FATAL ERROR\n\t\tContact Microsoft Technical Support"

						/* errors */
	
2001	"newline in constant"
2002	"out of macro actual parameter space"
2003	"expected 'defined id'"
2004	"expected 'defined(id)'"
2005	"#line expected a line number, found '%s'"
2006	"#include expected a file name, found '%s'"
2007	"#define syntax"
2008	"'%c' : unexpected in macro definition"
2009	"reuse of macro formal '%s'"
2010	"'%c' : unexpected in formal list"
2011	"'%s' : definition too big"
2012	"missing name following '<'"
2013	"missing '>'"
2014	"preprocessor command must start as first non-whitespace"
2015	"too many chars in constant"
2016	"no closing single quote"
2017	"illegal escape sequence"
2018	"unknown character '0x%x'"
2019	"expected preprocessor command, found '%c'"
2020	"bad octal number '%c'"
2021	"expected exponent value, not '%c'"
2022	"'%ld' : too big for char"
2023	"divide by 0"
2024	"mod by 0"
2025	"'%s' : enum/struct/union type redefinition"
2026	"'%s' : member of enum redefinition"
2028	"struct/union member needs to be inside a struct/union"
2029	"'%Fs' : bit-fields only allowed in structs"
2030	"'%Fs' : struct/union member redefinition"
2031	"'%Fs' : function cannot be struct/union member"
2032	"'%Fs' : base type with near/far/huge not allowed"
2033	"'%Fs' : bit-field cannot have indirection"
2034	"'%Fs' : bit-field type too small for number of bits"
2035	"enum/struct/union '%Fs' : unknown size"
2036	"left of '%s%s' must have a struct/union type"
2037	"left of '%s' specifies undefined struct/union '%Fs'"
2038	"'%s' : not struct/union member"
2039	"'->' requires struct/union pointer"
2040	"'.' requires struct/union name"
2042	"signed/unsigned keywords mutually exclusive"
2043	"illegal break"
2044	"illegal continue"
2045	"'%s' : label redefined"
2046	"illegal case"
2047	"illegal default"
2048	"more than one default"
2050	"non-integral switch expression"
2051	"case expression not constant"
2052	"case expression not integral"
2053	"case value %d already used"
2054	"expected '(' to follow '%Fs'"
2055	"expected formal parameter list, not a type list"
2056	"illegal expression"
2057	"expected constant expression"
2058	"constant expression is not integral"
2059	"syntax error : '%s'"
2060	"syntax error : EOF"
2061	"syntax error : identifier '%s'"
2062	"type '%s' unexpected"
2063	"'%s' : not a function"
2064	"term does not evaluate to a function"
2065	"'%s' : undefined"
2066	"cast to function returning . . . is illegal"
2067	"cast to array type is illegal"
2068	"illegal cast"
2069	"cast of 'void' term to non-void"
2070	"illegal sizeof operand"
2071	"'%Fs' : bad storage class"
2072	"'%Fs' : initialization of a function"
2073	"'%Fs' : cannot initialize array in function"
2074	"'%Fs' : cannot initialize struct/union in function"
2075	"'%Fs' : array initialization needs curly braces"
2076	"'%Fs' : struct/union initialization needs curly braces"
2077	"non-integral field initializer '%Fs'"
2078	"too many initializers"
2079	"'%Fs' uses undefined struct/union '%Fs'"
2082	"redefinition of formal parameter '%Fs'"
2083	"array '%Fs' already has a size"
2084	"function '%Fs' already has a body"
2085	"'%Fs' : not in formal parameter list"
2086	"'%Fs' : redefinition"
2087	"'%Fs' : missing subscript"
2088	"use of undefined enum/struct/union '%s'"
2089	"typedef specifies a near/far function"
2090	"function returns array"
2091	"function returns function"
2092	"array element type cannot be function"
2093	"cannot initialize a static or struct with address of automatic vars"
2094	"label '%Fs' was undefined"
2095	"'%Fs' : actual has type void : parameter %d"
2096	"struct/union comparison illegal"
2097	"illegal initialization"
2098	"non-address expression"
2099	"non-constant offset"
2100	"illegal indirection"
2101	"'&' on constant"
2102	"'&' requires lvalue"
2103	"'&' on register variable"
2104	"'&' on bit-field ignored"
2105	"'%s' needs lvalue"
2106	"'%s' : left operand must be lvalue"
2107	"illegal index, indirection not allowed"
2108	"non-integral index"
2109	"subscript on non-array"
2110	"'+' : 2 pointers"
2111	"pointer + non-integral value"
2112	"illegal pointer subtraction"
2113	"'-' : right operand pointer"
2114	"'%s' : pointer on left; needs integral right"
2115	"'%s' : incompatible types"
2116	"'%s' : bad %s operand"
2117	"'%s' : illegal for struct/union"
2118	"negative subscript"
2119	"'typedefs' both define indirection"
2120	"'void' illegal with all types"
2121	"typedef specifies different enum"
2122	"typedef specifies different struct"
2123	"typedef specifies different union"
2125	"%Fs : allocation exceeds 64K"		/* QC, c23 */
2126	"%Fs : auto allocation exceeds %s"	/* QC, c23 */
2127	"parameter allocation exceeds 32K"	/* QC, c23 */
2130	"#line expected a string containing the file name, found '%s'"
2131	"attributes specify more than one near/far/huge"
2132	"syntax error : unexpected identifier"
2133	"array '%Fs' : unknown size"
2134	"'%Fs' : struct/union too large"
2135	"missing ')' in macro expansion"
2137	"empty character constant"
2138	"unmatched close comment '*/'"
2139	"type following '%s' is illegal"
2140	"argument type cannot be function returning . . ."
2141	"value out of range for enum constant"
2142	"ellipsis requires three periods"
2143	"syntax error : missing '%s' before '%s'"
2144	"syntax error : missing '%s' before type '%Fs'"
2145	"syntax error : missing '%s' before identifier"
2146	"syntax error : missing '%s' before identifier '%s'"
2147	"unknown size"
2148	"array too large"
2149	"'%Fs' : named bit-field cannot have 0 width"
2150	"'%Fs' : bit-field must have type int, signed int, or unsigned int"
2151	"more than one cdecl/fortran/pascal attribute specified"
2152	"'%s' : pointers to functions with different attributes"
2153	"hex constants must have at least 1 hex digit"
2154	"'%s' : does not refer to a segment"
2155	"'%s' : already in a segment"
2156	"pragma must be at outer level"
2157	"'%s' : must be declared before use in pragma list"
2158	"'%s' : is a function"
2159	"more than one storage class specified"
2160	"## cannot occur at the beginning of a macro definition"
2161	"## cannot occur at the end of a macro definition"
2162	"expected macro formal parameter"
2163	"'%s' : not available as an intrinsic"
2164	"'%s' : intrinsic was not declared"
2165	"'%s' : cannot modify pointers to data"
2166	"lval specifies 'const' object"
2167	"'%Fs' : too many actual parameters for intrinsic"
2168	"'%Fs' : too few actual parameters for intrinsic"
2169	"'%Fs' : is an intrinsic, it cannot be defined"
2170	"'%s' : intrinsic not declared as a function"
2171	"'%s' : bad operand"
2172	"'%Fs' : actual is not a pointer : parameter %d"
2173	"'%Fs' : actual is not a pointer : parameter %d, parameter list %d"
2174	"'%Fs' : actual has type void : parameter %d, parameter list %d"
2175	"'%Fs' : unresolved external"	/* QC */
2176	"static far data not supported"	/* QC */
2177	"constant too big"
2178	"'%s' : storage class for same_seg variables must be 'extern'"
2179	"'%Fs' : was used in same_seg, but storage class is no longer 'extern'"
2180	"controlling expression has type 'void'"
2181	"pragma requires command line option '%s'"	/* QC */
2182	"'%Fs' : 'void' on variable"
2183	"'%Fs' : 'interrupt' function must be 'far'"
2184	"'%Fs' : '%s' function cannot be 'pascal/fortran'"
2186	"'%Fs' : 'saveregs/interrupt' modifiers mutually exclusive"
2187	"cast of near function pointer to far function pointer"
2188	"#error : %s"
2190	"'%s' : is a text segment"
2191	"'%s' : is a data segment"
2192	"'%s' : function has already been defined"
2000	"UNKNOWN ERROR\n\t\tContact Microsoft Technical Support"

						/* warnings */
	
4001	"macro '%s' requires parameters"
4002	"too many actual parameters for macro '%s'"
4003	"not enough actual parameters for macro '%s'"
4004	"missing close parenthesis after 'defined'"
4005	"'%s' : redefinition"
4006	"#undef expected an identifier"
4009	"string too big, trailing chars truncated"
4011	"identifier truncated to '%s'"
4012	"float constant in a cross compilation"
4013	"constant too big"
4014	"'%Fs' : bit-field type must be unsigned"
4015	"'%Fs' : bit-field type must be integral"
4016	"'%s' : no function return type, using 'int' as default"
4017	"cast of int expression to far pointer"
4020	"'%Fs' : too many actual parameters"
4021	"'%Fs' : too few actual parameters"
4022	"'%Fs' : pointer mismatch : parameter %d"
4024	"'%Fs' : different types : parameter %d"
4025	"function declaration specified variable argument list"
4026	"function was declared with formal argument list"
4027	"function was declared without formal argument list"
4028	"parameter %d declaration different"
4029	"declared parameter list different from definition"
4030	"first parameter list is longer than the second"
4031	"second parameter list is longer than the first"
4032	"unnamed struct/union as parameter"
4033	"function must return a value"
4034	"sizeof returns 0"
4035	"'%Fs' : no return value"
4036	"unexpected formal parameter list"
4037	"'%Fs' : formal parameters ignored"
4038	"'%Fs' : formal parameter has bad storage class"
4039	"'%Fs' : function used as an argument"
4040	"near/far/huge on '%Fs' ignored"
4041	"formal parameter '%s' is redefined"
4042	"'%Fs' : has bad storage class"
4044	"huge on '%Fs' ignored, must be an array"
4045	"'%s' : array bounds overflow"
4046	"'&' on function/array, ignored"
4047	"'%s' : different levels of indirection"
4048	"array's declared subscripts different"
4049	"'%s' : indirection to different types"
4051	"data conversion"
4052	"different enum types"
4053	"at least one void operand"
4060	"conversion of long address to short address"	/* QC, c23 */
4061	"long/short mismatch in argument : conversion supplied"	/* QC, c23 */
4062	"near/far mismatch in argument : conversion supplied"	/* QC, c23 */
4067	"unexpected characters following '%s' directive - newline expected"
4068	"unknown pragma"
4071	"'%Fs' : no function prototype given"
4074	"non standard extension used - '%s'"
4075	"size of switch expression or case constant too large - converted to int"
4076	"'%s' : may be used on integral types only"
4077	"unknown check_stack option"
4079	"unexpected token '%s'"
4080	"expected 'identifier' for segment name, found '%s'"
4081	"expected a comma, found '%s'"
4082	"expected an identifier, found '%s'"
4083	"expected '(', found '%s'"
4084	"expected a pragma keyword, found '%s'"
4085	"expected [on | off]"
4086	"expected [1 | 2 | 4]"
4087	"'%Fs' : declared with 'void' parameter list"
4088	"'%Fs' : pointer mismatch : parameter %d, parameter list %d"
4089	"'%Fs' : different types : parameter %d, parameter list %d"
4090	"different 'const' attributes"
4091	"no symbols were declared"
4092	"untagged enum/struct/union declared no symbols"
4093	"unescaped newline in character constant in non-active code"
4094	"unexpected newline"
4095	"expected ')', found '%s'"
4096	"huge treated as far"		/* QC */
4098	"void function returning a value"
4099	"expected ')', (too many arguments?)"
4100	"'%Fs' : unreferenced formal parameter"
4101	"'%Fs' : unreferenced local variable"
4102	"'%Fs' : unreferenced label"
4103	"'%Fs' : function definition used as prototype"
4104	"'%s' : near data in same_seg pragma, ignored"
4105	"'%Fs' : code modifiers only on function or pointer to function"
4106	"pragma requires integer between 1 and 127"
4107	"pragma requires integer between 15 and 255"
4108	"pragma requires integer between 79 and 132"
4109	"unexpected identifier '%s'"
4110	"unexpected token 'int constant'"
4111	"unexpected token 'string'"
4112	"macro name '%s' is reserved, %s ignored"
4113	"function parameter lists differed"
4000	"UNKNOWN WARNING\n\t\tContact Microsoft Technical Support"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\compman.16\compman.txt ===
DOC file for AVI Installable compressors
ToddLa
----------------------------------------------------------------------------

This document covers what happens (from the drivers point of
view) when AVI loads, saves, edits, and plays a AVI file.


FORMAT OF A AVI FILE -------------------------------------------------------

AVI files are RIFF files with the following structure:

    RIFF('AVI'
        LIST('hdrl'
            avih(<MainAVIHeader>)
            LIST ('strl'
                strh(<Stream header>)
                strf(<Stream format>)
                strd(<Stream data>)
            )
        )
        LIST('movi'
	    00??(<driver Data>)
            .
            .
            .
	    00??(<driver Data>)
        )
        indx(<AVIIndex>)
    )

OPENING a file for decompression -------------------------------------------

this is what the driver see's when a AVI file is opened for playback
or editing.


    1.	The AVI runtime driver gets the FOURCC driver name from the stream
	header and tries to open the named driver.  drivers are
	listed in SYSTEM.INI

	    [Installable Compressors]
		VIDC.SAMP = icsample.drv

	This example lists a video driver ('VIDC') with the name 'SAMP'.

	The first message a device driver receives is DRV_OPEN. Your 
        device driver should allocate any instance data it uses when 
        it processes this message. (Your driver will receive DRV_OPEN 
        each time it is opened.)

    2.	If a 'strd' chunk exists for this stream, the AVI runtime driver 
        will send your driver an ICM_SETSTATE message. The <MI>lParam1<D> 
        parameter will contain a pointer to the data from 
	the file.

    3.	Depending on how the AVI runtime driver will use the decompressed 
        data, it will send either ICM_DECOMPRESS_GET_FORMAT
	or ICM_DECOMPRESS_QUERY to determine the decompression format.

	ICM_DECOMPRESS_GET_FORMAT:

	    When your driver gets ICM_DECOMPRESS_GET_FORMAT, 
	    <MI>lParam1<D> points to the 'strf' data, and <MI>lParam2<D> 
            points to a <B>BITMAPINFOHEADER<D> structure.

	    Your driver should fill in the <B>BITMAPINFOHEADER<D> with 
            information about the format it will use for decompressing 
            the data.

	    If your device driver cannot handle the input format, or 
            the input format 'strf' is incorrect, your driver 
            should return ICMERR_BADFORMAT to fail the message.

	ICM_DECOMPRESS_QUERY:

	    When your driver gets ICM_DECOMPRESS_QUERY, 
	    <MI>lParam1<D> points to the 'strf' data, and <MI>lParam2<D> 
            points to a <B>BITMAPINFOHEADER<D> structure. For this message, 
            the AVI runtime driver filled the structure with a 
            description of the output format it wants to use.

	    The sugested format will be the native or best format
	    for the decompressed data.  For example, 
            if playback is on an  8-bit device, the AVI runtime driver 
            will suggest an 8-bit DIB.

	    Your driver does not have to accept the suggested format. 
            If you fail the message, the AVI runtime driver will 
            suggest alternate formats until your driver accepts one. 
            If your driver exhausts the list of formats normally used, 
            the AVI runtime driver will request a format with 
            ICM_DECOMPRESS_GET_FORMAT.

    4.	When the AVI runtime driver is ready, it sends the 
        ICM_DECOMPRESS_BEGIN message to the device driver. The AVI runtime 
        driver sets <MI>lParam1<D> to the input format ('strf' data) 
        and <MI>lParam2<D> to the decompressed format of the DIB.
	If either of the formats is incorrect, your device driver 
        should return ICERR_BADFORMAT.

    5.	The AVI runtime driver sends ICM_DECOMPRESS each time 
        it has an image to decompress. The <B>ICDECOMPRESS<D> 
        structure specified in <MI>lParam1<D> contains the 
        decompression parameters. The AVI runtime driver 
        uses the flags in the AVI index to ensure decompression 
        will start on key frame boundries, 

    6.	Your device driver receives ICM_DECOMPRESS_END when 
        the AVI runtime driver no longer needs data decompressed.
        When the device driver is no longer needed the system will 
        close it by sending DRV_CLOSE.


COMPRESSING a file ------------------------------------------------------

This is the sequence of messages that occur for compressing video data.

NOTE: When an AVI file is recompressed, each frame is decompressed to 
a full frame and passed to the decompressor.


    1.  The first message a device driver receives is DRV_OPEN. Your 
        device driver should allocate any instance data it uses when 
        it processes this message. (Your driver will receive DRV_OPEN 
        each time it is opened.)


    2.	The AVI runtime driver restores the device driver state 
        by sending ICM_SET_STATE. (The state is recalled from the 
        strd data chunk of the AVI file. The state information was 
        obtained with the ICM_GET_STATE message.)

    3.	The AVI runtime driver determines the size of the buffer needed to 
        hold the compressed data format by sending ICM_COMPRESS_GET_FORMAT. 
        When requesting the buffer size, the AVI runtime driver uses 
        <MI>lParam1<D> to point to a <B>BITMAPINFOHEADER<D> structure 
        and sets <MI>lParam2<D> to NULL. Your device driver should 
        return the size of the buffer in bytes.

    4.	The AVI runtime driver requests the output format by sending 
        ICM_COMPRESS_GET_FORMAT with valid pointers in 
        both <MI>lParam1<D> and <MI>lParam2<D>. For this case, 
        your device driver should return the output format in 
        the buffer pointed to by <MI>lParam2<D>. 

	This data becomes the <B>strf<D> chunk in the AVI file.
	The data must start out like a <B>BITMAPINFOHEADER<D> data 
        structure. A color table (if used) follows this information. 
	The last part of the data is any additional information 
	required to decompress the file.

    5.	When the AVI runtime driver is ready to start compressing data 
        it sends the ICM_COMPRESS_BEGIN message. 
        The AVI runtime driver uses <MI>lParam1<D> to point to the 
        format of the data being compressed, and uses <MI>lParam2<D> 
        to point to format for the compressed data. If your device 
        driver cannot handle the formats, or if they are incorrect, 
        your driver should return ICERR_BADFORMAT to fail the message.

    6.	Before the AVI runtime driver starts compressing data, it sends 
        ICM_COMPRESS_GET_SIZE. For this message the AVI runtime driver 
        uses <MI>lParam1<D> to point to the input format and uses 
        <MI>lParam2<D> to point to the output format.

	Your driver should return the worst case size (in bytes) that any
	frame can compress to.  The AVI runtime driver uses this size 
        value when it allocates buffers for the compression.

    7.	The AVI runtime driver sends ICM_COMPRESS for each frame it 
        wants compressed. It uses <MI>lParam1<D> to point 
        to an <B>ICCOMPRESS<D> structure containing the parameters 
        used for compression.

	Your driver uses the buffers pointed to by the fields of 
        <B>ICCOMPRESS<D> for returning information 
        about the compressed data. 

        Your driver returns the actual size of the compressed data in the
	<B>biSizeImage<D> field in the <B>BITMAPINFO<D> data structure 
        pointed to by the <B>lpbiOutput<D> field of <B>ICCOMPRESS<D>.

        Your driver returns the chunk ID 
        in the buffer specified in the <B>lpckid<D> that it 
        assigns to the data.

	Your driver also returns a DWORD of flags in the buffer pointed 
        to by <B>lpdwFlags<D>. The flags will be placed	in the AVI 
        index for this chunk. The following flags are defined:

	    AVIIF_TWOCC 	Specifies ckid is a TWOCC.

	    AVIIF_KEYFRAME	Specifies this frame is a key frame.

	Your driver can define its own flags but they must be set in the high
	word only.

	If your driver handles temporal compression (that is, the compression 
        is based on the difference between two frames), it needs to save the
	previous frame(s) for temporal compresssion.

    8.	Your device driver receives ICM_DECOMPRESS_END when 
        the AVI runtime driver no longer needs data compressed, or when 
        the AVI runtime driver is changing the format or palette.
        If the AVI runtime driver will continue compressing data, it 
        will start the sequence by sending ICM_COMPRESS_BEGIN.
        When the device driver is no longer needed the system will 
        close it by sending DRV_CLOSE.


      The driver might also receive a ICM_COMPRESS_QUERY message 
      to determine if it supports the input or output format.

COMPRESSING A BUNCH OF FRAMES -------------------------------------------

    TBD
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\drawdib.16\dcilib\readme.txt ===
This directory is the DVA code from VFW 1.1

what this directory builds is a static link library (DVA.LIB) that contains
one API DVAGetSurface.

DVAGetSurface() first checks the DISPLAY driver (via a escape) and if that
fails it has built in support for SVGAs and some other cards built in.

what this builds:

        DVA.LIB         statis link
        DVA.H           header for lib (a DVA client would use this)
        DVADDI.H        defines structures and constants common to
                        DVA clients and DVA providers.

        TEST\DVATST.EXE Test app to make sure all works.

files:
        dva.h               - public header(s)
        dvaddi.h
        dvaddi.inc

        makefile            - builds DVA.LIB and DVATST.EXE

        dva.c               - DVAGetSurfaceCode has other routines
                              used to verify a surface is valid.

        lockbm.c            - Internal utility functions
        lockbm.h

        dvavga.c            - support for SVGAs
        vflat.asm

        dvaati.c            - support for ATI Mach32

        dvathun.c           - support for SuperMac Thunder/24

        dvavlb.c            - support for Viper VLB

        dvadib.c            - support for *Beta* Chicago display driver
        dibeng.inc

        dvaclip.c           - unused/unfinished/undone code.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\inc.16\penapi.txt ===
'====================================================================='
'=    PENAPI.TXT      Windows for Pens - Visual Basic Declarations   ='
'=                                                                   ='
'=                    Copyright (c) 1992-94, Microsoft Corp.         ='
'=                    All rights reserved.                           ='
'=                                                                   ='
'====================================================================='

'====================================================================='
'=   Register Pen Applications                                       ='
'====================================================================='
Declare Function RegisterPenApps Lib "penwin.dll" (ByVal wFlags As Integer, ByVal fRegister As Integer) As Integer
Declare Function IsPenAware Lib "penwin.dll" () As Integer
Declare Function GetVersionPenWin Lib "penwin.dll" () As Integer

'====================================================================='
'=   ALC CODES                                                       ='
'====================================================================='
    ' These constants are used when defining the
    ' CharSet property of HEdits and BEdits
Global Const ALC_ALL = &H43FF
Global Const ALC_DEFAULT = &H0
Global Const ALC_LCALPHA = &H1
Global Const ALC_UCALPHA = &H2
Global Const ALC_ALPHA = &H3
Global Const ALC_NUMERIC = &H4
Global Const ALC_ALPHANUMERIC = &H7
Global Const ALC_PUNC = &H8
Global Const ALC_MATH = &H10
Global Const ALC_MONETARY = &H20
Global Const ALC_OTHER = &H40
Global Const ALC_WHITE = &H100
Global Const ALC_NONPRINT = &H200
Global Const ALC_GESTURE = &H4000
Global Const ALC_USEBITMAP = &H8000
Global Const ALC_DBCS = &H400
Global Const ALC_HIRAGANA = &H100000
Global Const ALC_KATAKANA = &H200000
Global Const ALC_KANJI = &H40000
Global Const ALC_OEM = &HFF80000
Global Const ALC_RESERVED = &H43FF
Global Const ALC_NONPRIORITY = &H0
Global Const ALC_SYSMINIMUM = (ALC_ALPHANUMERIC Or ALC_WHITE Or ALC_GESTURE)

'====================================================================='
'=   Point and Rectangle Structures                                  ='
'====================================================================='
Type POINTSHORT
    x As Integer
    y As Integer
End Type

Type RECTSHORT
    left As Integer
    top As Integer
    right As Integer
    bottom As Integer
End Type

'====================================================================='
'=   Maniplating Pen Data                                            ='
'====================================================================='
Type PENDATAHEADER
    wVersion As Integer         ' Pen Data format Version
    cbSizeUsed As Integer       ' Size of Pen data memory block
    cStrokes As Integer         ' Number of strokes
    cPnt As Integer             ' Total number of points
    cPntStrokeMax As Integer    ' Length of longest stroke in points
    rectBound As RECTSHORT      ' Coordinates of bounding rectangle
    wPndts As Integer           ' State of various PDTS_??? bits
    nInkWidth As Integer        ' Ink Width
    rgbInk As Long              ' Ink Color
End Type

Global Const PDTS_LOMETRIC = &H0        ' Each logical unit is mapped to 0.01mm. Positive X to right; Positive Y down.
Global Const PDTS_HIMETRIC = &H1        ' Logical mapped to 0.001mm. X+ to right; Y+ down
Global Const PDTS_HIENGLISH = &H2       ' Logical mapped to 0.001 inch. X+ to right; y+ is down
Global Const PDTS_SCALEMAX = &H3        ' Maximum scaling allowed
Global Const PDTS_DISPLAY = &H4         ' Logical mapped to display pixel.  X+ to right; Y+ is down
Global Const PDTS_ARBITRARY = &H5       ' Arbitrary scale, application dependent
Global Const PDTS_SCALEMASK = &HF       ' Mask for bits of scale
Global Const PDTS_STANDARDSCALE = PDTS_HIENGLISH

Global Const PDTS_NOPENINFO = &H100         ' No PENINFO structure
Global Const PDTS_NOUPPOINTS = &H200        ' The data points on pen up have been removed
Global Const PDTS_NOOEMDATA = &H400         ' No OEM data present
Global Const PDTS_NOCOLINEAR = &H800
Global Const PDTS_COMPRESSED = &H8000       ' The data is compressed
Global Const PDTS_COMPRESSMETHOD = &HF0     ' Bits have been saved to encode which compression scheme was used
Global Const PDTS_COMPRESS2NDDERIV = &H10   ' The second derivative betwen points is stored

Global Const PDTT_DEFAULT = &H0                 ' reallocates memory block to fit data.  Should be run before GlobalSize(hpendata) is taken
Global Const PDTT_PENINFO = PDTS_NOPENINFO      ' removes PenInfo from the header
Global Const PDTT_UPPOINTS = PDTS_NOUPPOINTS    ' Throws away all data from points collected when pen is not in contact with the tablet.
Global Const PDTT_OEMDATA = PDTS_NOOEMDATA      ' Removes All OEM Data that is not x,y (such as presure and angle)
Global Const PDTT_COLINEAR = PDTS_NOCOLINEAR    ' Removes successive idetical points and colinear points from pendata
Global Const PDTT_COMPRESS = PDTS_COMPRESSED    ' Compresses data without loss of any information.
Global Const PDTT_DECOMPRESS = &H4000           ' Decompresses Data.  Cannot be used in conjunction with other timing options.
Global Const PDTT_ALL = (PDTT_PENINFO Or PDTT_UPPOINTS Or PDTT_OEMDATA Or PDTT_COLINEAR)

Global Const MAXOEMDATAWORDS = 6

Type STROKEINFO
    cPnts As Integer        ' Count of points in stroke
    cbPnts As Integer       ' Count of bytes used for stroke
    wPdk As Integer         ' State of stroke
    dwTick As Long          ' Time of stroke
End Type

Type OEMPENINFO
    wPdts As Integer
    wValMax As Integer
    wDistinct As Integer
End Type

Type PENINFO
    cxRawWidth As Integer           ' Max x & width of tablet in 0.01 of inch
    cyRawHeight As Integer          ' Max y & height of tablet " " " "
    wDistinctWidth As Integer       ' Num of distinct X values returned by tablet
    wDistinctHieght As Integer      ' Num of distinct Y values returned by tablet
    nSamplingRate As Integer        ' Samples/second
    nSamplingDist As Integer        ' Minimum distance moved in either direction
    lPdc As Long                    ' Pen Device capabilities
    cbOemData As Integer            ' Width of OEM Packet
    rgoempeninfo(1 To MAXOEMDATAWORDS) As OEMPENINFO
    rgwReserved(1 To 8) As Integer
End Type

Global Const PDT_NULL = 0
Global Const PDT_PRESSURE = 1
Global Const PDT_HEIGHT = 2
Global Const PDT_ANGLEXY = 3
Global Const PDT_ANGLEZ = 4
Global Const PDT_BARRELROTATION = 5
Global Const PDT_OEMSPECIFIC = 16

Global Const PDC_INTEGRATED = &H1
Global Const PDC_PROXIMITY = &H2
Global Const PDC_RANGE = &H4
Global Const PDC_INVERT = &H8
Global Const PDC_RELATIVE = &H10
Global Const PDC_BARREL1 = &H20
Global Const PDC_BARREL2 = &H40
Global Const PDC_BARREL3 = &H80

Declare Function DuplicatePenData Lib "penwin.dll" (ByVal hPenData As Integer, ByVal gMemFlags As Integer) As Integer
Declare Function CompactPenData Lib "penwin.dll" (ByVal hPenData As Integer, ByVal wTrimOptions As Integer) As Integer
Declare Function BeginEnumStrokes Lib "penwin.dll" (ByVal hPenData As Integer) As Long
Declare Function GetPenDataInfo Lib "penwin.dll" (ByVal hPenData As Integer, lppendataheader As PENDATAHEADER, lppeninfo As Any, ByVal dwReserve As Long) As Integer
Declare Function GetPenDataStroke Lib "penwin.dll" (ByVal lppendata As Long, ByVal wStroke As Integer, lplpPoint As Any, lplpvOem As Any, lpsi As STROKEINFO) As Integer
Declare Function GetPointsFromPenData Lib "penwin.dll" (ByVal hPenData As Integer, ByVal wStroke As Integer, ByVal wPnts As Integer, ByVal cPnts As Integer, lppoint As Any) As Integer
Declare Function AddPointsPenData Lib "penwin.dll" (ByVal hPenData As Integer, lpPnt As Any, lpvOemData As Any, lpsiNew As Any) As Integer

'====================================================================='
'=   Symbol Graph Structures                                         ='
'====================================================================='
Global Const MAXHOTSPOT = 8

'=== Symbol Character array =========================================='
Type SYC
    wStrokeFirst As Integer
    wPntFirst As Integer
    wStrokeLast As Integer
    wPntLast As Integer
    fLastSyc As Integer
End Type

'=== Symbol Graph element ============================================'
Type SYG
    rgpntHotSpotsArray(1 To MAXHOTSPOT) As POINTSHORT
    cHotSpot As Integer
    nFirstBox As Integer
    lRecogVal As Long
    lpSye As Long
    cSye As Integer
    lpSyc As Long
    cSyc As Integer
End Type

'=== Symbol Element =================================================='
Type SYE
    Syv As Long
    lRecogVal As Long
    cl As Integer
    iSyc As Integer
End Type

'=== SYV values with special meanings to Windows For Pens
Global Const SYV_NULL = &H0
Global Const SYV_UNKNOWN = &H1
Global Const SYV_EMPTY = &H3
Global Const SYV_BEGINOR = &H10
Global Const SYV_ENDOR = &H11
Global Const SYV_OR = &H12
Global Const SYV_SOFTNEWLINE = &H20
Global Const SYV_SPACENULL = &H10000

'=== SYV values for gestures
Global Const SYV_CLEAR = &H2FFD5
Global Const SYV_EXTENDSELECT = &H2FFD8
Global Const SYV_UNDO = &H2FFD9
Global Const SYV_COPY = &H2FFDA
Global Const SYV_CUT = &H2FFDB
Global Const SYV_PASTE = &H2FFDC
Global Const SYV_CLEARWORD = &H2FFDD
Global Const SYV_USER = &H2FFDE
Global Const SYV_CORRECT = &H2FFDF
Global Const SYV_BACKSPACE = &H20008
Global Const SYV_TAB = &H20009
Global Const SYV_RETURN = &H2000D
Global Const SYV_SPACE = &H20020

'=== Application Specific gestures circle a-z and circle A-Z
Global Const SYV_APPGESTUREMASK = &H20000
Global Const SYV_CIRCLEUPA = &H224B6
Global Const SYV_CIRCLEUPZ = &H224CF
Global Const SYV_CIRCLELOA = &H224D0
Global Const SYV_CIRCLELOZ = &H224E9

'=== SYV for Shapes (if recognizer installed)
Global Const SYV_SHAPELINE = &H40001
Global Const SYV_SHAPEELLIPSE = &H40002
Global Const SYV_SHAPERECT = &H40003
Global Const SYV_SHAPEMIN = SYV_SHAPELINE
Global Const SYV_SHAPEMAX = SYV_SHAPERECT

'=== To detect if SYV is a particular type, let SyvHi=(syv\&H10000)
'=== Compare SyvHi with below
Global Const SYVHI_SPECIAL = 0
Global Const SYVHI_ANSI = 1
Global Const SYVHI_GESTURE = 2
Global Const SYVHI_KANJI = 3
Global Const SYVHI_SHAPE = 4
Global Const SYVHI_UNICODE = 5
Global Const SYVHI_VKEY = 6

'====================================================================='
'=   RcResult Structures                                             ='
'====================================================================='
Type RCRESULT
    SYGraph As SYG
    wResultsType As Integer
    cSyv As Integer
    lpsyv As Long
    hSyv As Integer
    nBaseLine As Integer
    nMidLine As Integer
    hPenData As Integer
    rectboundink As RECTSHORT
    pntEnd As POINTSHORT
    lprc As Long
End Type

Global Const RCRT_DEFAULT = &H0
Global Const RCRT_UNIDENTIFIED = &H1
Global Const RCRT_GESTURE = &H2
Global Const RCRT_NOSYMBOLMATCH = &H3
Global Const RCRT_PRIVATE = &H4000
Global Const RCRT_NORECOG = &H8000
Global Const RCRT_ALREADYPROCESSED = &H8
Global Const RCRT_GESTURETRANSLATED = &H10
Global Const RCRT_GESTURETOKEYS = &H20

Declare Function GetSymbolMaxLength Lib "penwin.dll" (lpsyg As Any) As Integer
Declare Function GetSymbolCount Lib "penwin.dll" (lpsyg As Any) As Integer
Declare Function SymbolToCharacter Lib "penwin.dll" (lpsyv As Any, ByVal cSyv As Any, ByVal lpstr As String, lpnCnvt As Any)

'====================================================================='
'=   RC (Recognition Context) Definitions                            ='
'====================================================================='
Global Const CL_NULL = 0
Global Const CL_MINIMUM = 1
Global Const CL_MAXIMUM = 100
Global Const INKWIDTH_MINIMUM = 0
Global Const INKWIDTH_MAXIMUM = 15
Global Const ENUM_MINIMUM = 1
Global Const ENUM_MAXIMUM = 4096
Global Const MAXDICTIONARIES = 16

Type GUIDE
    xOrigin As Integer
    yOrigin As Integer
    cxBox As Integer
    cyBox As Integer
    cxBase  As Integer
    cyBase As Integer
    cHorzBox  As Integer
    cVertBox  As Integer
    cyMid As Integer
End Type

Global Const cbRcLanguageMax = 44
Global Const cbRcUserMax = 32
Global Const cbRcrgbfAlcMax = 32
Global Const cwRcReservedMax = 8

Type RC              ' Provided for Backward Compatibility Only
    hRec As Integer
    hWnd As Integer
    wEventRef As Integer
    wRcPreferences As Integer
    lRcOptions As Long
    lpfnYield As Long
    lpUser As String * cbRcUserMax
    wCountry As Integer
    wIntlPreferences As Integer
    lpLanguage As String * cbRcLanguageMax
    rglpdf(1 To MAXDICTIONARIES) As Long
    wTryDictinary As Integer
    clErrorLevel As Integer
    alc As Long
    alcPriority As Long
    rgbfAlc As String * cbRcrgbfAlcMax
    wResultMode As Integer
    wTimeOut As Integer
    lPcm As Long
    rectBound As RECTSHORT
    rectExclude As RECTSHORT
    guid As GUIDE
    wRcOrient As Integer
    wRcDirect As Integer
    nInkWidth As Integer
    rgbInk As Long
    dwAppParam As Long
    dwDictParam As Long
    dwRecognizer As Long
    rgwReserved(1 To cwRcReservedMax) As Integer
End Type

Declare Function InitRc Lib "penwin.dll" (ByVal hWnd As Integer, lpSrc As RC) As Integer
Declare Function InstallRecognizer Lib "penwin.dll" (ByVal lpszRecogName As String) As Integer
Declare Function UnInstallRecognizer Lib "penwin.dll" (ByVal hRec As Integer) As Integer
Declare Function GetGlobalRC Lib "penwin.dll" (lprc As Any, ByVal lpDefRecog As String, ByVal lpDefRecog As String, ByVal cbDefDictMax As Integer) As Integer
Declare Function SetGlobalRC Lib "penwin.dll" (lprc As Any, ByVal lpDefRecog As String, ByVal lpDefDict As String) As Integer

Global Const GGRC_OK = 0
Global Const GGRC_DICTBUFTOOSMALL = 1
Global Const GGRC_PARAMERROR = 2
Global Const SGRC_OK = &H0
Global Const SGRC_USER = &H1
Global Const SGRC_PARAMERROR = &H2
Global Const SGRC_RC = &H4
Global Const SGRC_RECOGNIZER = &H8
Global Const SGRC_DICTIONARY = &H10
Global Const SGRC_INIFILE = &H20

'====================================================================='
'=   Training And Correcting                                         ='
'====================================================================='
Declare Function TrainInk Lib "penwin.dll" (lprc As RC, ByVal hPenData As Integer, lpsyv As Any) As Integer
Declare Function TrainContext Lib "penwin.dll" (lprcResult As RC, lpSye As Any, ByVal cSye As Integer, lpSyc As Any, ByVal cSyc As Integer) As Integer
Declare Function CorrectWriting Lib "penwin.dll" (ByVal hWnd As Integer, ByVal lpstr As String, ByVal cBuf As Integer, lprc As RC, ByVal dwCwrFlags As Any, ByVal dwReserved As Any) As Integer

Global Const CWR_STRIPCR = &H1
Global Const CWR_STRIPLF = &H2
Global Const CWR_STRIPTAB = &H4
Global Const CWR_SINGLELINEEDIT = &H7
Global Const CWR_TITLE = &H10

'====================================================================='
'=   Other Windows For Pens API's                                    ='
'====================================================================='
Declare Function BoundingRectFromPoints Lib "penwin.dll" (lpPnt As Any, ByVal cPnt, lprectBound As RECTSHORT) As Integer
Declare Function TPtoDP Lib "penwin.dll" (lpPnts As Any, ByVal cPnts As Integer) As Integer
Declare Function DPtoTP Lib "penwin.dll" (lpPnts As Any, ByVal cPnts As Integer) As Integer
Declare Function DrawPenData Lib "penwin.dll" (ByVal hDC As Integer, lpRect As RECTSHORT, ByVal hPenData As Integer) As Integer
Declare Function MetricScalePenData Lib "penwin.dll" (ByVal hPenData As Integer, ByVal wPdts) As Integer
Declare Function OffsetPenData Lib "penwin.dll" (ByVal hPenData As Integer, ByVal dx As Integer, ByVal dy As Integer) As Integer
Declare Function RecognizePenData Lib "penwin.dll" (lprc As RC, ByVal hPenData As Integer) As Integer
Declare Function CreatePenData Lib "penwin.dll" (lppenifo As PENINFO, ByVal cbOemData As Integer, ByVal wPdtScal As Integer, ByVal gMemFlags As Integer) As Integer
Declare Function ExecuteGesture Lib "penwin.dll" (ByVal hWnd As Integer, ByVal Syv As Long, lprcResult As RC)

'=== Message Routines Constants ======================================'
Global Const WM_PENWINFIRST = &H380                'Main Offset for Pen messages
Global Const WM_RCRESULT = WM_PENWINFIRST + 1
Global Const WM_HOOKRCRESULT = WM_PENWINFIRST + 2
Global Const WM_GLOBALRCCHANGE = WM_PENWINFIRST + 3
Global Const WM_SKB = WM_PENWINFIRST + 4
Global Const WM_HEDITCTL = WM_PENWINFIRST + 5      'Configures HEdits and BEdits

'== The constants below are used as wParam with WM_HEDITCTL message
Global Const HE_GETRC = 3
Global Const HE_SETRC = 4
Global Const HE_GETINFLATE = 5
Global Const HE_SETINFLATE = 6
Global Const HE_GETUNDERLINE = 7
Global Const HE_SETUNDERLINE = 8
Global Const HE_GETINKHANDLE = 9
Global Const HE_SETINKMODE = 10
Global Const HE_STOPINKMODE = 11
Global Const HE_GETRCRESULTCODE = 12
Global Const HE_DEFAULTFONT = 13
Global Const HE_CHARPOSITION = 14
Global Const HE_CHAROFFSET = 15
Global Const HE_GETRCRESULT = 22

'====================================================================='
'=   END WINDOWS FOR PENS API                                        ='
'====================================================================='

'====================================================================='
'=  PENCNTRL.VBX Constants and Function Declarations                 ='
'====================================================================='

'==  Property Settings  =============================================='
' AutoSize Property: IEdit control
Global Const PEN_AUTOSIZE_NONE = 0           ' No AutoSizing occurs
Global Const PEN_AUTOSIZE_STRETCHBITMAP = 1  ' Stretch Bitmap to fit Window
Global Const PEN_AUTOSIZE_SIZEWINDOW = 2     ' Size Window to fit Bitmap
Global Const PEN_AUTOSIZE_TILE = 3           ' Tile Bitmap
Global Const PEN_AUTOSIZE_CENTER = 4         ' Center Bitmap

' BorderStyle Property: BEdit, HEdit, and IEdit controls
Global Const PEN_BORDERSTYLE_NONE = 0      ' No Border
Global Const PEN_BORDERSTYLE_SINGLE = 1    ' Single Line Border
Global Const PEN_BORDERSTYLE_UNDERLINE = 2 ' Underline: Valid for HEdit only

' BoxCross Property: BEdit control only
Global Const PEN_BOXCROSS_OFF = 0          ' BoxCross not displayed
Global Const PEN_BOXCROSS_ON = 1           ' BoxCross displayed

' CombStyle Property: BEdit control only
Global Const PEN_COMBSTYLE_COMB = 0        ' Comb Style
Global Const PEN_COMBSTYLE_BOX = 1         ' Box Style

' FormatAttrb Property: IEdit control only
Global Const PEN_FORMATATTRB_COLOR = 0     ' Set Stroke Color
Global Const PEN_FORMATATTRB_WIDTH = 1     ' Set Stroke Width
Global Const PEN_FORMATATTRB_BOTH = 2      ' Set both Stroke Color & Width

' FormatItem Property: IEdit control only
Global Const PEN_FORMATITEM_ALL = 0        ' Set Attributes for All Strokes
Global Const PEN_FORMATITEM_SELECTION = 1  ' Set Attributes for Selected Strokes
Global Const PEN_FORMATITEM_INDEX = 2      ' Set Attributes for Stroke specified by StrokeIndex

' GestureSet Property: BEdit and HEdit controls
Global Const PEN_GESTURESET_SELECTION = &H1      ' Selection and Lasso
Global Const PEN_GESTURESET_CLIPBOARD = &H2      ' Cut, Copy, Paste
Global Const PEN_GESTURESET_WHITECHARS = &H4     ' Space, Tab, Return
Global Const PEN_GESTURESET_EDIT = &H10          ' Insert, Correct, Undo
Global Const PEN_GESTURESET_CIRCLELOWER = &H100  ' Lowercase Circle Gestures
Global Const PEN_GESTURESET_CIRCLEUPPER = &H200  ' Uppercase Circle Gestures

' hInkGet/hInkSet Properties: IEdit control only
Global Const PEN_HINKGET_ALL = 0           ' Get all the Ink in the IEdit
Global Const PEN_HINKGET_SELECTION = 1     ' Get only the selected Ink

' InkDataMode Property: BEdit, HEdit, and IEdit controls
Global Const PEN_INKDATAMODE_REPLACE = 0   ' Existing Ink is replaced when new Ink is assigned to InkDataString
Global Const PEN_INKDATAMODE_APPEND = 1    ' New ink is appended to existing Ink

' InkingMode Property: IEdit control only
Global Const PEN_INKINGMODE_READY = 0      ' Ready Mode
Global Const PEN_INKINGMODE_ERASE = 1      ' Erasing Mode for erasing Ink
Global Const PEN_INKINGMODE_LASSO = 2      ' Lasso Selection Mode

' InkInput Property: IEdit control only
Global Const PEN_INKINPUT_MOVE = 1         ' Ink will be Moved into IEdit
Global Const PEN_INKINPUT_RESIZE = 2       ' Ink will be Resized to fit in IEdit
Global Const PEN_INKINPUT_CROP = 4         ' Ink drawn outside IEdit will be cropped
Global Const PEN_INKINPUT_DISCARD = 8      ' Ink will be discarded if any part of stroke is outside of IEdit

' InkWidth Property: BEdit, HEdit, and IEdit controls
Global Const PEN_INKWIDTH_DEFAULT = -1     ' Use system default Ink Width
Global Const PEN_INKWIDTH_MIN = 0          ' Minimum Valid size; no Ink is displayed
Global Const PEN_INKWIDTH_MAX = 15         ' Maximum Valid Ink Width (in Pixels)

' Recog Property: IEdit control only
Global Const PEN_RECOG_NONE = 0            ' No Recognition
Global Const PEN_RECOG_GESTURES = 1        ' Recognize Gestures Only
Global Const PEN_RECOG_ALL = 2             ' Recognize All

' ScrollBars Property: BEdit and HEdit controls
Global Const PEN_SCROLLBARS_NONE = 0        ' No ScrollBars
Global Const PEN_SCROLLBARS_HORIZONTAL = 1  ' Horizontal ScrollBar: Not Valid for BEdit
Global Const PEN_SCROLLBARS_VERTICAL = 2    ' Vertical ScrollBar
Global Const PEN_SCROLLBARS_BOTH = 3        ' Both ScrollBars: Valid for HEdit only

' Security Property: IEdit control only
Global Const PEN_SECURITY_NOCOPY = &H1      ' Disable Copying Ink
Global Const PEN_SECURITY_NOCUT = &H2       ' Disable Cutting Ink
Global Const PEN_SECURITY_NOPASTE = &H4     ' Disable Pasting Ink
Global Const PEN_SECURITY_NOUNDO = &H8      ' Disable Undo action
Global Const PEN_SECURITY_NOINK = &H10      ' Disable Inking
Global Const PEN_SECURITY_NOERASE = &H20    ' Disable Erasing Ink
Global Const PEN_SECURITY_NOGET = &H40      ' Disable reading hInk property
Global Const PEN_SECURITY_NOSET = &H80      ' Disable writing hInk property

'==  Trappable Error Strings  ========================================'
Global Const PENERR_INKWIDTH = 32001        ' InkWidth must be in range 0-15 or -1 for default
Global Const PENERR_NEGCELLWIDTH = 32002    ' CellWidth must be greater than 0
Global Const PENERR_CELLWIDTH = 32003       ' CellWidth must be greater than or equal to CombSpacing*2
Global Const PENERR_NEGCELLHEIGHT = 32004   ' CellHeight must be greater than 0
Global Const PENERR_CELLHEIGHT = 32005      ' CellHeight must be greater than or equal to CombBaseLine
Global Const PENERR_COMBSPACING = 32006     ' CombSpacing out of range (0 - CellWidth/2)
Global Const PENERR_COMBBASELINE = 32007    ' CombBaseLine out of range (0 - CellHeight)
Global Const PENERR_BIGCOMBBASELINE = 32008 ' CombBaseLine must be greater than or equal to CombHeight and CombEndHeight
Global Const PENERR_COMBHEIGHT = 32009      ' CombHeight out of range (0 - CombBaseLine)
Global Const PENERR_COMBENDHEIGHT = 32010   ' CombEndHeight our of range (0 - CombBaseLine)
Global Const PENERR_INFLATE = 32011         ' Inflate value must be greater than or equal to 0
Global Const PENERR_INVALIDPICTURE = 32012  ' Picture format not supported
Global Const PENERR_DISPLAYFAILED = 32013   ' Unable to display bitmap
Global Const PENERR_AUTOSIZEHW = 32014      ' Cannot change Height or Width while AutoSize equals 2
Global Const PENERR_MERGEFAILED = 32015     ' Unable to merge ink data
Global Const PENERR_INVALIDINKDATA = 32016  ' Invalid InkDataString format

'==  Functions Declarations  ========================================='
Declare Sub VBTypeToCPointer Lib "pencntrl.vbx" (lpSrc As Any, ByVal lpDest As Long, ByVal cb As Integer)
Declare Sub CPointerToVBType Lib "pencntrl.vbx" (ByVal lpSrc As Long, lpDest As Any, ByVal cb As Integer)
'====================================================================='
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\mciavi.16\res\usa\people.txt ===
- development -

Jay Borseth
Geoff Dahl
Jim Geist
Tim Harris
Todd Laney
David Maymudes
Danny Miller
Thomas O'Rourke
Curtis Palmer

- production -

Heidi Breslauer
Bruno Lambert
Kevin Larkin
Cristiano Pierry

- testing -

Vadim Bluvshteyn
John Bresemann
Preston Byargeon
Alok Chakrabarti
Noel Cross
Jim Glass
Olan Hanley
Faris Hattab
Lisa Hayward
Steve Morrow
Eric O'Brien
Ken Oien
Mike Savage
Frank Wong

- beta support -

Lisa Garrett

- documentation -

Eric Artzt
Beth Carter
John Ellison
Harry Fagundes
Mark Horowitz
Crista Johnson

- marketing -

Mark Anderson
Tim Breidigan
Steve Linowes

- samples -

Mark Buczek
Karen Nuxoll
Steven Tyler

- product support -

John Langhans
Greg Landon

- administrative - 

Laurie Clayton
Chris Cryer

- old friends -

Eric Ledoux
Nigel Thompson







@
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\mciavi.16\mciavi.txt ===
CHANGES TO MCIAVI FOR 1.X:

    "other" streams are handled correctly, rectangle's will be
    mapped correctly and draw handlers will be called.

    draw handlers:

        DIB draw handler, there can now be a draw device for uncomressed
        frames, for example hardware can stretch frames, but does not
        need to decomptress.

        the full screen draw handler (DIB draw handler...) can be replaced.

        custom draw handlers can be installed per stream. (a app can
        override the default).  This is done with a new MCI command
        to set the draw procedure.

    formats:

        32 bit DIBs are supported, a decompressor can decompress to
        a 32 bit DIB if wants to.

    decompression to special DIB formats:

        upside down DIB

        MCIAVI will ask the decompressor in decompress to a "upside down"
        DIB.  a "upside down" is a DIB with the scans stored in memory
        top scan to bottom scan, (normal DIBs are stored bottom to top)

        a "upside down" DIB will have a negative biHeight, the height
        of the DIB is abs(biHeight).  the bits pointer passed points
        to the top scan, ie the first one.

        special DIB formats:

        to handle decompression to internal bitmaps in memory, a "new"
        DIB format is used, when biCompression == 'BITM' the DIB memory
        is in HUGE BITMAP format:

            biCompression       'BITM'
            biHeight            will be <0 for a top to bottom bitmap.
            biXPelsPerMeter     will be the width bytes of the bitmap.
            biYPelsPerMeter     will be the fill bytes of the bitmap.


    key frame info:

    a new structure is passed to ICM_DECOMPRESS:

        struct {
            DWORD               dwFlags;    // flags (from AVI index...)
            LPBITMAPINFOHEADER  lpbiInput;  // BITMAPINFO of compressed data
            LPVOID              lpInput;    // compressed data
            LPBITMAPINFOHEADER  lpbiOutput; // DIB to decompress to
            LPVOID              lpOutput;
            DWORD               ckid;       // ckid from AVI file
            int                 iFrame;     // frame info.
            int                 iNextKey;
            int                 iPrevKey;
        }   ICDECOMPRESSX;

    NOTE before using any of the extra info in this structure the
    deompressor should check the size field.

    example:

    case ICM_DECOMPRESS:

        //
        // make sure we have a ICDECOMPRESSX structure
        //
        if ((DWORD)lParam2 >= sizeof(ICDEOMPRESSX))
            return DecompressX(pi,
                 (ICDECOMPRESSX FAR *)lParam1, (DWORD)lParam2);
        else
            return Decompress(pi,
                 (ICDECOMPRESS FAR *)lParam1, (DWORD)lParam2);

    NEW MESSAGE ICM_SET

        #define ICM_SET (ICM_RESERVED+40)
        #define ICM_FRAMERATE       mmioFOURCC('F','r','m','R')
        #define ICM_KEYFRAMERATE    mmioFOURCC('K','e','y','R')

        before playing starts two params get sent down to the decompressor:

            ICM_SET
                lParam1 = 'FrmR'                    (set the frame rate)
                lParam2 = microseconds per frame

            ICM_SET
                lParam1 = 'KeyR'                    (set the key frame "rate")
                lParam2 = average key frame rate    (ie key frame every 15)

        NOTE the key frame rate is a average.


TO DO:
    named streams.
    multiple video streams.
    linked streams (data in another file...)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\mciavi32\mciavi.txt ===
CHANGES TO MCIAVI FOR 1.X:

    "other" streams are handled correctly, rectangle's will be
    mapped correctly and draw handlers will be called.

    draw handlers:

        DIB draw handler, there can now be a draw device for uncomressed
        frames, for example hardware can stretch frames, but does not
        need to decomptress.

        the full screen draw handler (DIB draw handler...) can be replaced.

        custom draw handlers can be installed per stream. (a app can
        override the default).  This is done with a new MCI command
        to set the draw procedure.

    formats:

        32 bit DIBs are supported, a decompressor can decompress to
        a 32 bit DIB if wants to.

    decompression to special DIB formats:

        upside down DIB

        MCIAVI will ask the decompressor in decompress to a "upside down"
        DIB.  a "upside down" is a DIB with the scans stored in memory
        top scan to bottom scan, (normal DIBs are stored bottom to top)

        a "upside down" DIB will have a negative biHeight, the height
        of the DIB is abs(biHeight).  the bits pointer passed points
        to the top scan, ie the first one.

        special DIB formats:

        to handle decompression to internal bitmaps in memory, a "new"
        DIB format is used, when biCompression == 'BITM' the DIB memory
        is in HUGE BITMAP format:

            biCompression       'BITM'
            biHeight            will be <0 for a top to bottom bitmap.
            biXPelsPerMeter     will be the width bytes of the bitmap.
            biYPelsPerMeter     will be the fill bytes of the bitmap.


    key frame info:

    a new structure is passed to ICM_DECOMPRESS:

        struct {
            DWORD               dwFlags;    // flags (from AVI index...)
            LPBITMAPINFOHEADER  lpbiInput;  // BITMAPINFO of compressed data
            LPVOID              lpInput;    // compressed data
            LPBITMAPINFOHEADER  lpbiOutput; // DIB to decompress to
            LPVOID              lpOutput;
            DWORD               ckid;       // ckid from AVI file
            int                 iFrame;     // frame info.
            int                 iNextKey;
            int                 iPrevKey;
        }   ICDECOMPRESSX;

    NOTE before using any of the extra info in this structure the
    deompressor should check the size field.

    example:

    case ICM_DECOMPRESS:

        //
        // make sure we have a ICDECOMPRESSX structure
        //
        if ((DWORD)lParam2 >= sizeof(ICDEOMPRESSX))
            return DecompressX(pi,
                 (ICDECOMPRESSX FAR *)lParam1, (DWORD)lParam2);
        else
            return Decompress(pi,
                 (ICDECOMPRESS FAR *)lParam1, (DWORD)lParam2);

    NEW MESSAGE ICM_SET

        #define ICM_SET (ICM_RESERVED+40)
        #define ICM_FRAMERATE       mmioFOURCC('F','r','m','R')
        #define ICM_KEYFRAMERATE    mmioFOURCC('K','e','y','R')

        before playing starts two params get sent down to the decompressor:

            ICM_SET
                lParam1 = 'FrmR'                    (set the frame rate)
                lParam2 = microseconds per frame

            ICM_SET
                lParam1 = 'KeyR'                    (set the key frame "rate")
                lParam2 = average key frame rate    (ie key frame every 15)

        NOTE the key frame rate is a average.


TO DO:
    named streams.
    multiple video streams.
    linked streams (data in another file...)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\mciavi32\palettes.txt ===
AVI and Palettes
----------------


This is an overview of AVI's use of palettes: there are some small
complexities beyond this that are not generally significant.


Palette Sources
---------------

When playing on a palettised display, AVI must use a palette for
drawing the frames. It gets these palettes from one of these places:

	- from the AVI file header. Attached to the DIB header at the
start of an 8-bit file will be a colour table (an array of 4-byte
RGBQUAD values). The frame DIBs  will consist of indices into this
table. In addition, new palettes can appear throughout the movie
to be used for frames from that point onwards.

	- from the dither proc. If the movie is a higher colour
resolution, drawdib will dither it to the display colour resolution.
In the case of 8-bit displays, 16 and 24-bit videos will be dithered
to a standard 256-colour palette created  in drawdib\dith775.c which
has 7 levels of red and green and 5 levels of blue.

	- from the codec. If the video is a higher colour resolution
and being decompressed to 8-bit palettised, the codec will supply the
palette. for example, the Video 1 codec will decompress 16-bit CRAM
videos directly to 8-bit pal using the standard 7-7-5 palette (same
as the dither code's palette).

	- 4-bit displays will always use the 16-colour VGA palette.

In all of the cases, once we have a frame fully decompressed/dithered
and ready to draw, it is a DIB that consists of a series of indices
into one of these palettes.  We may also have:

	- A client palette: a palette handle can be sent us from the
client. This represents the palette used by the window we are playing
in. We need to draw using this palette to avoid redraws of the
surrounding window when playing in place. In this case we need to
deal with two palettes: the palette containing the colours actually
used in the DIBs (from the avi file or supplied by dither/codec), and
the palette we need to draw with, supplied by the client.

Using The Palette
-----------------

	We draw the frame using SetDIBitsToDevice (or possibly
StretchDIBits). This will interpret the DIB bits in one of two ways
depending on the fuColorUse flag (in fact there are more than two,
but we only use these)

DIB_PAL_INDICES:	this means that the bytes in the DIB are
indices directly into the system palette.

DIB_PAL_COLORS	the bytes in the DIB are indices into a colour table
supplied as the bmiColors field of the bitmapinfoheader supplied.
This colour table must contain indices into the logical palette
selected into the DC (the header including colour table, and the DC
are supplied as arguments).

The DIB_PAL_COLORS case is slower since GDI has to translate the DIB
bytes once using the bmiColors table, and then once again from the
logical palette of the DC to the system palette. However, since we
can't realistically change the DIB data, we can only use
DIB_PAL_INDICES if the system palette is the same as our palette,
which depends on the RealizePalette behaviour:


Realizing Palettes:
-------------------

Before drawing the DIB, we select the palette we want to draw with
into the DC and then call RealizePalette. This has one of two
behaviours:

- if we are the foreground app, RealizePalette assigns entries in the
system palette to contain the colours in our logical palette. The
system keeps some entries in the palette with standard colours in
(the first 10 and last 10 entries) - these are the 'static' colours;
it will allow us to use the remaining entries.

- if not, RealizePalette creates a mapping between our logical
palette and the nearest colours in the current system palette.

When a foreground app realizes a palette, it changes entries in the
system palette, and all other apps need to re-Realize their palettes
in order to get a mapping to the new system palette (unless they are
only using the default, static colours). Thus when we start playing a
video, all other palette-aware apps change colours (when the system
palette changes) and then redraw with the mapping to the new system
palette.


Support for DIB_PAL_INDICES.
---------------------------

Using DIB_PAL_INDICES is only possible if the system palette not only
contains all our colours, but in exactly the same order. To ensure
that this is possible, AVI palettes are generally created containing
the static colours as the first and last 10 colours, and
movie-specific colours in between. Thus when we are foreground and
realize the palette, the system palette will end up exactly the same
as the movie palette, and we can use DIB_PAL_INDICES with its
significant performance benefits.

Whenever the system palette changes, we compare all the colours in
the system palette with the colours in our DIBs. If the two colour
tables are the same, we know it is safe to use DIB_PAL_INDICES. If
not, then we use DIB_PAL_COLORS with a colour table. This colour
table maps the contents of the DIB to the logical palette: this is a
no-op, since the logical palette for our dc is the same as the DIB
palette. The real translation is being done between the logical
palette and the current system palette, and this is set up by GDI
when we issue a 'realizepalette' call.

Support for client Palettes
---------------------------

We are sometimes given a client palette to use (mplayer does this if
playing in place, in an app that is using a non-default palette). The
reason for this is to avoid the flash and re-draw of the client app
that would be necessary if we realized our palette and changed the
system palette. In this case, we select the client palette as our dc
palette, and we build a colour table that maps entries in our palette
to the nearest entry in the client palette. When we then draw - using
DIB_PAL_COLORS - GDI will use this colour table to translate between
the DIB palette and the DC's logical palette ( which is the client
app's palette), and then will translate between the logical palette
and the system palette (probably the same).
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\mciavi32\res\usa\people.txt ===
- development -

Jay Borseth
Geoff Dahl
Jim Geist
Tim Harris
Todd Laney
David Maymudes
Danny Miller
Thomas O'Rourke
Curtis Palmer

- nt development -

Andrew Bell
Geraint Davies
Steve Davies
Stephen Estrop
Laurie Griffiths
Robin Speed

- production -

Alistair Banks
Heidi Breslauer
Bruno Lambert
Kevin Larkin
Cristiano Pierry

- testing -

Vadim Bluvshteyn
John Bresemann
Preston Byargeon
Alok Chakrabarti
Noel Cross
Jim Glass
Olan Hanley
Faris Hattab
Lisa Hayward
Steve Morrow
Eric O'Brien
Ken Oien
Mike Savage
Frank Wong

- nt testing -

Mike Tricker
Andrew Guy
Anthony Phillips
John Quick

- beta support -

Lisa Garrett

- documentation -

Eric Artzt
Beth Carter
John Ellison
Harry Fagundes
Mark Horowitz
Crista Johnson

- marketing -

Mark Anderson
Tim Breidigan
Steve Linowes

- samples -

Mark Buczek
Karen Nuxoll
Steven Tyler

- product support -

John Langhans
Greg Landon

- administrative -

Laurie Clayton
Chris Cryer
Jill Heal

- old friends -

Eric Ledoux
Nigel Thompson







@
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\avi\mciwnd\mciwnd.doc ===
ۥ- !@	   -             tE  ]                 C                                    *   * *   *   *   *   *  8 t              ( Ԇ      @ * Њ   Њ   Њ   Њ   Њ   Њ   Њ   Њ  Ҋ   Ҋ   Ҋ   Ҋ   Ҋ   Ҋ   4 $ 9    *                                                                               EMBED PBrush \s  \* mergeformat

NOTE:  MCIWnd is an unsupported API for the Video for Windows 1.0 Developer's Kit and is included as a sample only.   Your application is free to use mciwnd.lib and the APIs for mciwnd but you do so at your own risk and PSS will not answer questions about this component if you ask.







Using MCIWND to Make Developing MCI Applications Easier

Overview

Using the MCI interface to allow your application to play MCI device files can sometimes be confusing and complicated, especially with all of the different commands that a device might support.  Also, there is no user interface built in to MCI to let the user control the playback of files - an application must provide its own scrollbar and buttons for the user to play, pause, rewind, or seek through a file, or not provide this service at all.

MCIWND is a library that your application can link to that will create a new class of window.  Your application needs only to create a window of this class, and then send it a message to open an MCI file.  It can then send other messages to control the playback of the file, or give the user this control with the built in toolbar, scrollbar and menus.

MCIPLAY.C is sample code of an Multiple Document Interface (MDI) application that uses this window class to allow the playback and control of multiple MCI devices/files. 

Services of the MCIWND window class

SYMBOL 183 \f "Symbol" \s 10 \h	A Toolbar with a PLAY, STOP, RECORD and MENU buttons (when applicable). NOTE:  Holding shift down while pressing the PLAY button will play the media backwards (if supported) and holding control down will play the device in FULLSCREEN mode (for windowed devices).

SYMBOL 183 \f "Symbol" \s 10 \h	A Trackbar (scrollbar) to allow seeking within a file.  For devices that support tracks (for instance, a CD player) you will see tic marks on the playbar showing you where each track begins, and the page up and page down keys will take you from track to track (for your convenience).


SYMBOL 183 \f "Symbol" \s 10 \h	A Pop-Up Track Menu with some common commands when the right mouse button is clicked over the window


SYMBOL 183 \f "Symbol" \s 10 \h	Simple single-command macros for many of the common MCI commands which eliminates the need for longer, multi-line mciSendCommand or mciSendString calls.

Using MCIWND

SYMBOL 183 \f "Symbol" \s 10 \h	Include the file MCIWND.H in your application's source files to give you access to function prototypes and Macros and defines you will need.

SYMBOL 183 \f "Symbol" \s 10 \h	Link your application with MCIWND.LIB to get the new functionality.

SYMBOL 183 \f "Symbol" \s 10 \h	Call MCIWndRegisterClass(HINSTANCE hInst) to register the new Window Class "MCIWND_WINDOW_CLASS".  This function returns TRUE if successful.

SYMBOL 183 \f "Symbol" \s 10 \h	Use the standard windows function CreateWindow() to create a window to play an MCI file inside of.

	or...

	Use the MCIWndCreate(HWND hwndParent, HINSTANCE hInst, DWORD dwStyle, LPSTR szFile) function.  This takes the place of CreateWindow() and has the advantage of being able to open an MCI device in the same call as the window is created in. NOTE:  You do not need to call MCIWndRegisterClass() if you use this function, only if you use CreateWindow().

	For non-windowed devices, you will need a window to hold the toolbar and trackbar.  If there will be no controls, and you are playing a non-windowed device (EG playing a Sound file) you may want to leave the window invisible.

	For both of these calls, you have some new styles you can choose from as well as the standard window styles.  They are as follows:

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWNDF_NOAUTOSIZEWINDOW	Never automatically resize the window.  By default, the window size will change automatically to reflect any change in the size of the windowed device's picture (for a windowed device).  The window is also automatically resized whenever a new file is opened or closed.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWNDF_NOAUTOSIZEMOVIE	Never automatically change the size of the device's playback window image to match the new size of the MCI window when it changes.  For MCI devices that can window (have video to display), MCIWND will ordinarily resize the image to any size you make the window.  

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWNDF_NOPLAYBAR		Do not put a playbar (Toolbar and Trackbar) in the window.  By default, a playbar appears.  It provides a PLAY, STOP, RECORD and MENU button (when appropriate), as well as a Trackbar to seek through the file.

	
	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWNDF_NOMENU		Do not provide a pop-up menu or a menu button on the playbar.  Normally, pressing the right mouse button over the window will bring up a track menu with some common commands.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWNDF_RECORD		Provide a record button on the playbar or menu, if the device supports it, and a file "new" command.  By default, only the non-destructive commands are available on the playbar and menu.
	
	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWNDF_NOERRORDLG	Will prevent MCIWND from bringing up an error dialog box whenever someone sends the window an MCI command that fails.  If your application is interested in knowing the most recent error, it can use the MCIWndGetError() macro.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWNDF_NOTIFYMODE	Whenever the state of the device changes (eg. from Stop to Play) the parent window will receive a MCIWNDM_NOTIFYMODE msg with an lParam of the new state of the device (eg. MCI_MODE_STOP).  The application can get the text string of the new mode by using the MCIWndGetMode() macro.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWNDF_NOTIFYPOS		Whenever the position of the device changes (eg. as it's playing) the parent window will receive a MCIWNDM_NOTIFYPOS msg with an lParam of the new position in the media.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWNDF_NOTIFYMEDIA	Whenever a file is opened or closed, or a new device is loaded, the parent window will receive a MCIWNDM_NOTIFYMEDIA msg with an lParam of the new filename.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWNDF_NOTIFYSIZE		Whenever the size of the MCI playback area changes (which may also affect the size of the MCI window if the MCIWNDF_NOAUTOSIZEWINDOW flag is off), the parent will receive a MCIWNDM_NOTIFYSIZE msg.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWNDF_SHOWNAME		Sets the window text of the window to the filename of any MCI file you open in this window.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWNDF_SHOWPOS		Sets the window text of the window to include the position of the device.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWNDF_SHOWMODE		Sets the window text of the window to the mode of the MCI device (eg. "playing" or "stopped")

SYMBOL 183 \f "Symbol" \s 10 \h	To open an MCI file or device using the macro MCIWndOpen(HWND hwnd, LPSTR sz, UINT f).  Hwnd is the window you have created, and sz is the name of the file or device to open.   F is currently unused and should be set to 0.
	
SYMBOL 183 \f "Symbol" \s 10 \h	To bring up an open dialog and let the user choose a file to open into the window, use MCIWndOpenDialog(hwnd).

SYMBOL 183 \f "Symbol" \s 10 \h	To open a new (empty) file to record into, use MCIWndNew(HWND hwnd, LPSTR sz).  Set sz to the name of the device you wish to create a new file for.

SYMBOL 183 \f "Symbol" \s 10 \h	Send the window a command using one of the following macros.  Unless otherwise specified, the return code is the same as you would get from mciSendString() using the same command.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndClose(hwnd)		Close the MCI file.  You can then re-open another file in the same window, or just call open again and the currrent file will close automatically.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndPlay(hwnd)		Play the file from the current position.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndStop(hwnd)		Stops the device.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndPause(hwnd)		Pauses the device.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndResume(hwnd)		Resumes playing (after a pause).

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndSeek(hwnd, lPos)		Seeks to a specified position in the file.  The units depend on the current time format of the device.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndHome(hwnd)		Seek to the beginning of the media.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndEnd(hwnd)		Seek to the end of the media.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndRecord(hwnd)		Record into either or new or existing file at the current position.  To stop recording, use MCIWndStop(hwnd).
	
	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndEject(hwnd)		Ejects the media (eg. for a CDAUDIO device).

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndPlayReverse(hwnd)	Play the file backwards starting at the current position.	

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndPlayFrom(hwnd, lpos)	Play the file forward starting at the specified position.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndPlayTo(hwnd, lpos)	Play from the current position to the specified position.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndPlayFromTo(hwnd, lFrom, lTo)	Play the specified section.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndSetRepeat(hwnd, f)	From now on, all PLAY commands sent will repeat if f is TRUE, or not repeat, if f is FALSE.  Default is FALSE.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndGetRepeat(hwnd)		Gets the status of the repeat flag, as set by MCIWndSetRepeat.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndGetMode(hwnd)		Returns the current mode of the device (eg. MCI_MODE_PLAY.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndGetDeviceID(hwnd)	Gets the deviceID of the open file which you will need if you wish to call mciSendCommand to do any commands that are not supported by this interface.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndGetAlias(hwnd)		Gets the alias of the open file which you will need if you wish to call mciSendString to do any commands that are not supported by this interface.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndGetPosition(hwnd)	Returns the current position in the file.  The units for this and the following positions depend on the current time format.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndGetPositionString(hwnd, lp, len)	Returns the current position in the file, just as MCIWndGetPosition does.  But it also fills the string pointed to by lp (up to a length of len) with a string description of the position, usually just the string version of the integer returned by the function.  However, for a device that supports tracks, it will give you a pretty printed position of the form "TT:MM:SS:FF" (tracks, minutes, seconds, frames).

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndGetStart(hwnd)		Returns the starting position of the file.  Seeking here will place the file at the beginning

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndGetLength(hwnd)	Returns the length of the file.  The start plus the length will give you the end of the media.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndGetEnd(hwnd)		Returns the end position of the file.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndStep(hwnd, n)		Steps n frames or milliseconds, depending on the time format of the device.  A positive value is a step forward.  A negative value is a step backwards.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndDestroy(hwnd)		Destroys the window.  No return code.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndSetZoom(hwnd, n)	For windowed devices, sets the size of the device's playback window to n percent of its original (authored) size.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndGetZoom(hwnd)		Returns the last value set with the MCIWndSetZoom() macro.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndSetVolume(hwnd, n)	Sets the volume of audio playback (if supported) to n.  1000 is normal volume.  Higher numbers are louder.  Lower numbers are quieter.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndGetVolume(hwnd)	Gets the current volume.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndSetSpeed(hwnd, n)	Sets the playback speed of the device (if supported) to n.  1000 is normal speed.  Higher numbers are faster.  Lower numbers are slower.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndGetSpeed(hwnd)		Gets the playback speed of the device.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndRealize(hwnd, f)		Tells MCI to realize the palette of the image it is displaying in the window.  f is TRUE if the window is in a background application.  You should call this function in your app's WM_PALETTECHANGED and WM_QUERYNEWPALETTE code, instead of using the standard windows function RealizePalette.  This MCIWnd function will use the palette of the MCI device and call RealizePalette for you.  On the other hand, you could just pass the WM_PALETTECHANGED or WM_QUERYNEWPALETTE msg on to the MCI window and this will happen automatically.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndSendString(hwnd, sz)	Takes the place of mciSendString(sz, NULL, 0, NULL).  Simply give the string to send to the window.  Leave out the alias after the first word.  (eg.  sz = "set time format frames" is a valid command).

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndGetError(hwnd, lp, len)	Gets the most recent error returned by the last command you executed.  The return value is the error code.  If  lp is a valid pointer, the text of the error string will be returned in lp up to a maximum length of len.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndSetTimeFormat(hwnd, lp)	Sets the time format of the device to the string supplied.  (Eg.  "frames" or "milliseconds").  Other formats may be supported by some devices, but may have a strange affect on the scroll bar if the position values are not continuous (eg. tracks or SMPTE time format).  For these devices you may wish to turn the playbar off (use the MCIWNDF_NOPLAYBAR flag).  The time format of the device determines how to interpret a position in the file.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndGetTimeFormat(hwnd, lp, len)	Gets the current time format of the device.  The code for the time format is returned by the macro.  If lp is a valid pointer, the text of the time format mode will be returned in lp up to a maximum length of len.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndUseTime(hwnd)
	SYMBOL 183 \f "Symbol" \s 10 \h  MCIWndUseFrames(hwnd)	A quick way to set the time format of the device to either milliseconds or frames mode.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndValidateMedia(hwnd)	If you ever do anything to a device that changes the time format of the media (like changing time formats in some other way than by using an MCIWnd macro) the starting and ending position of the media, as well as the trackbar will still be using the old values, and need to be updated.  Send this message to update these values.  Normally, you should not need to use this macro. 
	

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndSetActiveTimer(hwnd, n)	This value determines how often MCIWND will poll to update the scrollbar, or the position reported in the window caption, or notify the parent of some change to the media.  This number determines the number of milliseconds between updates when the MCIWND window is the active window.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndSetInactiveTimer(hwnd, n)	This value determines how often MCIWND will poll to update the scrollbar, or the position reported in the window caption, or notify the parent of some change to the media.  This number determines the number of milliseconds between updates when the MCIWND window is the inactive window.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndSetTimers(hwnd, active, inactive)	This macro will set both values at once, but the values are limited to 16 bit quantities.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndGetActiveTimer(hwnd)	Returns the value of the active timer.  The default is 500 milliseconds.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndGetInactiveTimer(hwnd)	Returns the value of the inactive timer.  The default is 2000 milliseconds.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndGetPalette(hwnd)		Returns the palette being used by the windowed device to display its image.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndSetPalette(hwnd, hpal)	Tells the windowed device to use the specified palette for displaying its image.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndGetFilename(hwnd, lp, len)	Returns the filename currently being used by the open MCI device in lp, up to a maximum of len characters.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndGetDevice(hwnd, lp, len)	Returns the name of the currently open MCI device in lp, up to a maximum of len characters.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndGetStyles(hwnd)		Returns the current style of the MCIWND window.  This value is the bitwise or of all the MCIWNDF_* values that were set when the window was created, or set by the MCIWndChangeStyles() macro.

	SYMBOL 183 \f "Symbol" \s 10 \h	MCIWndChangeStyles(hwnd, mask, value)	Changes the style of the MCIWND window.  Mask is the bitwise or of all the MCIWNDF_* flags that you wish to add or remove.  Value is the new value for these flags. (Eg.  MCIWndChangeStyles(hwnd, MCIWNDF_NOPLAYBAR | MCIWNDF_NOMENU, MCIWNDF_NOPLAYBAR) will turn the playbar off and the track menu on).

e  :  wO              &                       	  \2   2               z 2  A    z      z     (   z                                                     ʦ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    U                                                                                                                                                                                                                                         V                                                                                                                                                                                                                                        <                                                                                                                                                                                                                                                                                                                                                                                                                                                                                _                                                                                                                    W                                                                                                                    ^                                                                                                                    #                                                                                                                                                                                                                                  .                                                                                                             
I                                                                                                                                                                                                                    /y                                                                                                                                                                                                       &                                                                                                   $                                                                                                   U                                                                                                     |                                                                                                                                                                                                                 <D                                                                                                           "                                                                                                           x                                                                                                           N                                                                                                           f@                                                                                                         P                                                                                                           zz                                                                                                                                                                                                                     >                                                                                                          "                                                                                                          z                                                                                                          n2                                                                                                          )                                                                                                          f                                                                                                         a                                                                                                          `                                                                                                          f                                                                                                                                                                                                                  *                                                                                                          Vz                                                                                                             _c                                                                                                               B                                                                                                                                                                                                                                                                                                                                            g                                                                                                           Vl                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         `                                                                                                                                                                                                                  ,                                                                                                                                                                                                               `                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     `                                                                                                                                                                                                                  F                                                                                                                                                                                                                            `                                                                                                                                                                                                                                                                                                                                                                                                                                                       Wi                                                                                        g                                                                                                                                                                      VW                                                                                `                                                                              K                                                                            M                                                                                                                                                    _8                                                                          ̱                                                                                                            `                                                                                                                                                                                              u,                                                                                   V                                                                                                                                                                      $                                                                                                            n|                                                                                                                                                                                                                                                                                 V                                                                                                                                                                                                                                                                       n|                                                                                                        <                                                                    D                                                                                                                                                                                                       ?                                                                                                                                          `                                                                        4                                                                                                                                                 ut                                                                         ai                                                                       MS                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           l                                                                        `g                                                                        j1                                                                                                                                                `#                                                                                                                                        
c                                                              h                                                          `                                                      Hu                                           %`                                                                                                                                 l1                                                                                                                                 I                                           y                                                                                          (                                             t                                                                                            sd                                               p                                               
                                                                                                  ~                                                                                                                                                                                                                                                                 h                                                       m                                                         n                                                         N                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ?                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            -                                                  4         `            PBrush        0 0 122 198  d  BMd      6  (   z            _                                   ʦ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            METAFILEPICT   d   wM 	  \2   2               z 2  A    z      z     (   z                                                     ʦ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    U                                                                                                                                                                                                                                         V                                                                                                                                                                                                                                        <                                                                                                                                                                                                                                                                                                                                                                                                                                                                                _                                                                                                                    W                                                                                                                    ^                                                                                                                    #                                                                                                                                                                                                                                  .                                                                                                             
I                                                                                                                                                                                                                    /y                                                                                                                                                                                                       &                                                                                                   $                                                                                                   U                                                                                                     |                                                                                                                                                                                                                 <D                                                                                                           "                                                                                                           x                                                                                                           N                                                                                                           f@                                                                                                         P                                                                                                           zz                                                                                                                                                                                                                     >                                                                                                          "                                                                                                          z                                                                                                          n2                                                                                                          )                                                                                                          f                                                                                                         a                                                                                                          `                                                                                                          f                                                                                                                                                                                                                  *                                                                                                          Vz                                                                                                             _c                                                                                                               B                                                                                                                                                                                                                                                                                                                                            g                                                                                                           Vl                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         `                                                                                                                                                                                                                  ,                                                                                                                                                                                                               `                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     `                                                                                                                                                                                                                  F                                                                                                                                                                                                                            `                                                                                                                                                                                                                                                                                                                                                                                                                                                       Wi                                                                                        g                                                                                                                                                                      VW                                                                                `                                                                              K                                                                            M                                                                                                                                                    _8                                                                          ̱                                                                                                            `                                                                                                                                                                                              u,                                                                                   V                                                                                                                                                                      $                                                                                                            n|                                                                                                                                                                                                                                                                                 V                                                                                                                                                                                                                                                                       n|                                                                                                        <                                                                    D                                                                                                                                                                                                       ?                                                                                                                                          `                                                                        4                                                                                                                                                 ut                                                                         ai                                                                       MS                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           l                                                                        `g                                                                        j1                                                                                                                                                `#                                                                                                                                        
c                                                              h                                                          `                                                      Hu                                           %`                                                                                                                                 l1                                                                                                                                 I                                           y                                                                                          (                                             t                                                                                            sd                                               p                                               
                                                                                                  ~                                                                                                                                                                                                                                                                 h                                                       m                                                         n                                                         N                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ?                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            -                                                  4                                              3  4  5  }    ;  ?  @  _  `  a      |	  	  	  	  	  	  
  
  
  .
  /
  0
  
  
  
  
  
                            C  d  y              D    ~    
    *  +  ,  D  V  W  v  w  x                                                       tE   
B                U                                                                                                         5  7  :  ;  Z  [  \  m              L  N  P  Q  p  q      U  V  u  v          	  
  :  X          |  }                              ^    H   I   h   i   j   z                           !  !  !  &!  ?!  @!  _!  `!  a!  s!  !  !  !  !  !  !  ?"  @"  _"  `"  a"  s"  "  "  "  "  "  "  "  "  #  #  #  &#  #  #  #  #  #  #  #  #  #   $  $   $  !$  8$  x$  y$  $  $  $  $  $  $  %  %  %  .%  k%  l%  m%  %  %  %  %  %  %  %  %  &  &  &  &  &  &  &                        ]&  &  &  '  '  '  0'  q'  r'  '  '  '  '  F(  G(  f(  g(  h(  |(  )  )  5)  6)  7)  O)  )  )  )  )  )  *  +  +  +  +  +  +  R,  S,  r,  s,  t,  ,  ,  ,  -  -  -  !-  M-  N-  m-  n-  o-  -   .  !.  @.  A.  B.  U.  .  .  .  .  .  .  0/  1/  P/  Q/  R/  f/  /  /  /  /  /  /  /  /  l0  m0  0  0  0  0  0  0  0  0  0  0  1  1                        ^1  1  1  1  1  1  1  2  2  2  #2  :4  ;4  Z4  [4  \4  v4  D5  E5  d5  e5  f5  5  b6  c6  6  6  6  6  `8  a8  8  8  8  8  9  9  9  9  9  9  9  9  9  9  L:  M:  l:  m:  n:  :  <  <  +<  ,<  -<  J<  X=  ^=  k=  l=  =  =  =  =  >  >  >  >  >  >  >  ?  w?  x?  ?  ?  ?  ?  ?  @  @  !@  "@  #@  ?@  @  @  @  @  @  @  A                              \A  A  A  :A  ;A  XA  A  A  A  A  A  A  _B  `B  aB  B  B  B   C  C  C  !C  "C  8C  C  C  C  C  C  D  D  DD  D  >E  rE  tE  s                                                                                                                                                                                                                                                                                                                     $                      
            <  >          =  ?  ~	  	  	  

  
  
  
  
  
  
              /  1  9  ;            	  S  U                |                        7  9      N  P  R  U          !     !     !     !     !     !     !              mN1 %.P        y  {  E   G               <!  >!  !  !  <"  >"  "  "  "  "  #  #  #  #  u$  w$  $  $  i%  k%  %  %  |&  ~&  &  &  n'  p'  C(  E(  )  )  )  )  +  +  O,  Q,  ,  ,  J-  L-  .  .  ~.  .  -/  //  /  /  i0  k0  0  0  1  1  1  1  74  94  A5  C5  _6  a6  ]8  _8  |9  ~9  9  I:  K:  <  <  
<                 !     !     	!     !     !     !     !  U
<  h=  j=  >  >  t?  v?  ?   @  @  @  A  A  A  A  ]B  _B  B   C  C  C  rE  tE                                                                                                                                                                                                                                                                                                                                                                !     !     !     !     !         @         	              C              ~"  +  4  ?  C               %     w                         &  1  A  s           
<  tE     @  CG Times (W1) 	Symbol " Univers (W1)  Times New Roman         "             "      \	  |	  
  .
  w
  
  )  I            <  )  I    .          ;  m    P  p  '  G  &  F      ;  [          i    "  B          )  I  s           :         !  ;!  p!  !  "  9"  "  "  "  #  s#  #  #  $  Q$  q$  $  %  {%  %  %  &  &  &  '  '  P(  p(  8*  X*  *  *  m+  +  +  +  ,  ,  -  !-  -  -  &.  F.  .  /  A/  a/  0  (0  k0  0  2  2  3  3  4  5  6   7  7  8  78  W8  8  8  :  :  ;  <  O=  o=  =  >  >  >  ?  0?  ?  ?  .@  N@  @   A  A  A  }B  B  C  :9 9 99 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9999 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9          aa        "       h    jEԅjEԅ         |  
%       9   MCIWND library   Danny MillerDanny Miller         
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\deluxe2\provider\readme.txt ===
TO ANYONE WHO WANTS TO SHIP DELUXECD

If you want to ship DeluxeCD within a year of the ship date of Plus!98,
you MUST include the providers "Tunes.com" and "Music Boulevard" (aka N2K).

For further info, see PROV.REG.  Also, please send mail to:

PLUS     (alias for Multimedia in Plus Pack)
BRIANMCD (Brian McDowell, PM / Development Lead)
DSTEWART (David Stewart, SDE)
MELJGREY (Melissa Jordan Grey, PM / Legal)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\deluxecd\provider\readme.txt ===
TO ANYONE WHO WANTS TO SHIP DELUXECD

If you want to ship DeluxeCD within a year of the ship date of Plus!98,
you MUST include the providers "Tunes.com" and "Music Boulevard" (aka N2K).

For further info, see PROV.REG.  Also, please send mail to:

PLUS     (alias for Multimedia in Plus Pack)
BRIANMCD (Brian McDowell, PM / Development Lead)
DSTEWART (David Stewart, SDE)
MELJGREY (Melissa Jordan Grey, PM / Legal)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\doc\bvt.txt ===
A suitable Build Verification Test for Multi-Media

[NEW]
When the multimedia merge with USER and WINLOGON takes place this
new section will become effective.

Prereq: Ensure you have a sound capable machine with speakers/headphones
        - MIPS or x86 with Soundblaster or clone

        Ensure that WIN.INI [SOUNDS] section points SYSTEMWELCOME and
        SYSTEMSTART to a sound of your choice.

Boot:   When the Welcome (Press C-A-D) box appears the SYSTEMWELCOME sound
        should be played.

        When you logon successfully the SYSTEMSTART sound should be played.
        If at the logon panel an invalid key is pressed, e.g. Ctrl+Q, the
        SYSTEMHAND sound should play.

[END OF NEW SECTION]

1. Bring up MPlayer.exe
   Click on Devices
   - should see listed Sound...
                       MIDI Sequencer...
                       CDAudio

   Click on SOUND...
   - File open dialog comes up
   Go to \NT\WINDOWS\SYSTEM
   Select any .WAV file e.g. laughs.wav
   - Dialog box goes away
   - MPlayer lefthand button becomes un-grayed
   Click on left hand button
   - Sound should play

   Click on Devices
   Click on MIDI...
   - File open dialog comes up
   Go to \NT\WINDOWS\SYSTEM
   Select any .MID file e.g. canyon.mid
   - Dialog box goes away
   - MPlayer lefthand button becomes un-grayed
   Click on left hand button
   - Sound should play (but you may need a MIDI box plugged in externally)
   - Slider should move along the track

   Click on Devices
   Click on CDAudio
   Click on left hand (play) button
   CD starts playing (plug headphones into CD to hear the sound).

2. Bring up Soundrec.exe
   - (Known bug - says cannot register as OLE server).
   - slider in scroll bar is flashing
   Click on File
   Click on Open
   - File open dialog comes up
   Go to \NT\WINDOWS\SYSTEM
   Select any .WAV file e.g. laughs.wav
   - Dialog box goes away
   - Soundrec middle button becomes un-grayed
   Click on left hand button
   - Sound should play
   Alt+F4

3. Bring up control panel
   - Sound applet appears with a couple of music notes in icon
   Click on sound icon
   - Message appears "Assigns sounds to system events"
   Double-click on sound icon
   - Sounds applet comes up
   - Two list boxes appear
   Pick a sound from right hand box
   - Click on Test button
   - Sound should play
   Alt+F4
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\doc\drvrcpl.doc ===
ۥ- `@	   -             G  1
                 AF                                  ,
 J ,
 JJ.
   J.
   J.
   J.
   J.
  X.
  .
   .
   .
   .
  .
  .
 " .
   /
 D ^/
 N0
  0
   0
   0
   0
 8 0
 ( 1
  ,1
  .1
   .1
   .1
   .1
   .1
   .1
  L1
 4 1
 b L1
   J.
         L1
   L1
                                                                 title Drivers Applet subjectFunctional Specification
Multimedia Systems Group
date \@ "d MMMM, yyyy"11 August, 1992



This document is the functional specification for the Windows NT Drivers Control Panel Application.  If you have any comments/questions regarding this document, please contact authorRussell Johnson.



TOC \o2-31. Overview	2
2. Revision History	2
3. Related Documents	2
4. Functional Requirements	2
5. Hardware/Software Environment	2
6. Invoking the Drivers Applet	2
6.1. Window Appearance	3
7. Exiting the Drivers Applet	3
8. Adding a Driver	3
8.1. Adding an Unlisted Driver	5
8.2. Version Control When Copying Files	6
8.3. Upgrading Currently Installed Drivers	6
9. Removing a Driver	7
10. Installing Windows NT kernel drivers	7
11. Appendix: The MMDRIVER.INF and OEMSETUP.INF File Format	7
10.1. The Disks and OEMDisks Sections	8
10.2. The Installable.Drivers Section	8
10.3. Driver Specific Sections	9


1. Overview
The Windows NT Drivers Control Panel applet is functionally equivalent to the Drivers Control Panel applet included with Windows with Multimedia 1.0.  A number of changes have been made to enhance the usablility and localizability of this applet for mainstream Windows users.

The Drivers applet is the user interface for the installable drivers interface in Windows NT.  It displays all currently installed drivers and allows the user to add new ones and to remove existing drivers.  It is not specific to multimedia drivers but was designed to support the installation of audio card drivers and MCI device drivers.

2. Revision History
DateByComments11/04/91RussellJFirst draft for Sonic.11/27/91RussellJMajor revision.01/11/92RussellJAdded New/Current/Cancel dialog07/27/92RobinSpWindows NT initial version
3. Related Documents
DocumentOwnerSonic SpecificationRussellJ
4. Functional Requirements
The specific functional requirements for the Drivers applet have not changed since the release of  Windows with Multimedia 1.0.  The requirements listed below are additions/clarifications to the original requirements dictated by Sonic.

SYMBOL 183 \f "Symbol" \s 10 \h	End-users must be able to install sound card drivers by selecting one entry in a list of drivers and having the Drivers applet automatically install all related VxD's, drivers and other files.

SYMBOL 183 \f "Symbol" \s 10 \h	Each driver must be listed once although it may have multiple entries in SYSTEM.INI for different uses (e.g. SNDBLST.DRV is both a WAVE driver and a MIDI port driver).

SYMBOL 183 \f "Symbol" \s 10 \h	The Drivers applet must have a UI as consistent as possible with the other Windows NT Control Panel applets, specifically the Printers applet.

However, on Windows NT a new kind of driver (a kernel driver) has been introduced.  These files have a file extension of ".sys".  Drivers which access hardware are typically of this type.

5. Hardware/Software Environment
This version of the Drivers applet requires Windows NT.

6. Invoking the Drivers Applet
The Drivers applet is invoked through the Control Panel in the standard method for invoking Control Panel applications.  There are no command line arguments.

When invoked, the [Drivers] and [MCI] sections in the file SYSTEM.INI are examined to determine the currently installed drivers.  See the section Drivers Applet Main Window below for more details.

6.1. Window Appearance
The Drivers applet main window is displayed as follows:



The Installed Drivers listbox contains all of the currently installed drivers.  The text displayed in the list is obtained from the [Drivers.Desc] section in CONTROL.INI.  MCI drivers are displayed with the text '[MCI]' before the description string.

The selected driver is momentarily in use by the Drivers applet while the applet determines whether or not to gray the Setup button.

The Cancel/Close button exits the Drivers applet.  The Add button installs a new driver.  See the section Adding a Driver below for more details.  The Remove button removes an installed driver from the system.  See the section Removing a Driver below for more details.  The Setup button requests that a configurable driver display its setup dialog.  If the selected driver is non-configurable, the button is grayed.

The Help button invokes WinHelp with an appropriate topic for this dialog and all dialogs with help buttons in the following sections.

7. Exiting the Drivers Applet
The Drivers applet is exited by clicking on the Close button in the main window or by selecting the Close menu item from the system menu.  If changes have been made to the list of installed drivers, the following dialog is displayed:

[INSERT GRAPHIC HERE]

The Don't Restart Now button is the default button and will return to the Control Panel from the Drivers applet.  The Restart Now button will restart Windows NT so that the installable drivers changes take effect.  The [Driver.Description] section in CONTROL.INI is written out when the Drivers applet exits.

8. Adding a Driver
When the Add button in the main window is pressed, the following dialog is displayed:



The List of Drivers listbox displays all installable drivers known to the system.  This list is obtained from the [Installable.Drivers] section of the MMDRIVER.INF file.  The first item in the list is always "Unlisted or Updated driver."

The Cancel button returns to the Drivers applet main window.  The Help button invoked WinHelp with an appropriate topic.

The OK button adds the selected driver.  The user is prompted for the location of the driver file(s).  If the driver or an associated file is already present in the Windows System directory, the following dialog is displayed:



The New button prompts the user to locate the driver and will update the driver in the Windows System directory based on version control.  The Current button will use the file already present in the Windows System directory.  The Cancel button will abort installation of the driver.  This dialog is only displayed once for each driver being installed.  The choice made by the user is remembered and applied to any further file conflicts.  If the user chooses Current and a later file is not present in the Windows System directory, the user is prompted to locate the file.

When a driver is installed, the Drivers applet adds information to the SYSTEM.INI file in either the [Drivers] section, the [MCI] section, or both.  If a driver has a configuration dialog, it is displayed while the driver is being installed.  While this dialog is being displayed, the driver is in use (loaded) by the Drivers applet.  After the configuration dialog is exited, the Drivers applet will unload the driver.  This is to ensure that newly installed drivers can be safely removed and/or upgraded during the same session of Windows.

Also during installation, a driver may require various actions to be performed as specified below:

SYMBOL 183 \f "Symbol" \s 10 \h	If the driver requires an entry on the 'drivers=' line in the [boot] section of SYSTEM.INI, this is specified in the .INF file containing the install information for the driver.  This is not applicable to Windows NT.

SYMBOL 183 \f "Symbol" \s 10 \h	If the driver has VxD's associated with it, these are specified in the .INF entry for the driver and they are added to the [386enh] section of SYSTEM.INI.  Windows NT does not currently support installation of VxD's here but kernel drivers (with extension ".sys") can be listed in this section and will be copied but not installed.  Installation of such kernel drivers is the reponsiblity of the main driver being installed.

SYMBOL 183 \f "Symbol" \s 10 \h	If the driver has any other files (such as DLLs) associated with it which need to be copied to the Windows System directory these files are specified in sections in the .INF file containing the install information for the driver under a section with the same name as the entry name (entry name =) entry in the [Installable.Drivers] section for this driver.

SYMBOL 183 \f "Symbol" \s 10 \h	If the driver has other drivers associiated with it these are added sequentially in the same way as the original driver.  Other drivers are specified in the .INF file containing the install information for the driver.  This functionality allows the Driver applet to install all drivers necessary for an audio card to be installed by selecting one entry in the list of drivers available which will chain through and install all other appropriate drivers.

See the Appendix The OEMSETUP.INF File for more information on how the .INF file entries for all of the above are specified.

8.1. Adding an Unlisted Driver
If "Unlisted or Updated driver" is selected when OK is pressed, the following dialog is displayed:



The user is prompted for a disk containing drivers.  The OK button searches the drive/directory specified in the editbox above for the file OEMSETUP.INF.  If this file is found, all drivers listed in this file are then displayed in the List of Drivers listbox in the Add dialog illustrated at the beginning of this section.  If an OEMSETUP.INF file is not found, an error message is displayed.

The Cancel button returns to the Add dialog.  The Help button invokes WinHelp with an appropriate topic.

When the Browse button is pressed the following dialog is displayed:



The user can traverse available drives and directory trees until the OEMSETUP.INF is located.  The OK, Cancel, and Help buttons function identically to the buttons in the previous dialog.

8.2. Version Control When Copying Files
When the drivers applet copies files to the Windows System directory, the file is copied based on the following rules:

SYMBOL 183 \f "Symbol" \s 10 \h	If no version of the file exists in the destination, the file is copied.
SYMBOL 183 \f "Symbol" \s 10 \h	If a current or previous version of the file exists in the destination, of the file is copied.
SYMBOL 183 \f "Symbol" \s 10 \h	If a later version of the file exists in the destination, the file is not cpied.

No error returns associated with version control are used.  The user is not informed as to which of the following cases has occured when a driver is installed.

8.3. Upgrading Currently Installed Drivers
Multiple instances of the same driver may not be installed.  If the user attempts to add a driver which is currently installed, the currently installed driver is upgraded based on version control  If the driver is currently in use by the system and cannot be upgraded, the following dialog is displayed:



9. Removing a Driver
When the Remove button is pressed in the main window the user is prompted to remove the currently selected driver.  If the selected driver was installed by means other than the Drivers applet (most likely Setup), the following dialog is displayed:



If the selected driver was installed by the Drivers applet, the following dialog is displayed:



Removing a driver does not delete the driver and related files from the hard disk.  It removes the driver from the [Drivers] or [MCI] section of SYSTEM.INI so that when Windows NT is restarted, the removed drivers are not loaded by Windows NT.  When a driver is successfully removed, the following dialog is displayed prompting the user to restart Windows NT:



If the user chooses not to restart, control returns to the main window and the removed driver is no longer in the list of installed drivers.  Removing a driver and choosing not to immediately restart Windows NT should have no adverse effects on the current Windows session other than not allowing the driver to be copied over if it is still loaded.  See the section Adding a Driver for a description of this scenario.  
10. Installing Windows NT Kernel drivers
There are 2 ways of installing kernel drivers :
SYMBOL 183 \f "Symbol" \s 10 \h	When the driver requires no configuration the driver can be specifed as the file to install.
SYMBOL 183 \f "Symbol" \s 10 \h	When the driver requires configuration a second driver which supports the installable driver interface is required to interface to the kernel driver(s). 

In the first case the dirver entry in the [Installabable.Drivers] section looks like :
Profile_string=driver.sys, "KERNEL", "Description", ...

In the second case the entry looks like (for example):
Profile_string=driver.drv, "KERNEL", "Description", driver.sys, ...
In this case driver.drv must take care of installing driver.sys using the Services Controller (see winsvc.h) and configuring it when it gets a configuration call.

The "KERNEL" device type is a dummy type used by the applet to keep track of what it has installed.  Drivers of type "KERNEL" are added to the [drivers] section of system.ini.
11. Appendix: The MMDRIVER.INF & OEMSETUP.INF File Format
The Drivers applet uses the MMDRIVER.INF and OEMSETUP.INF files when adding new drivers to the system.  Both of these files contain the same sections in the same formats for use with the Drivers applet.  The drivers listed in the MMDRIVER.INF file are listed in the Drivers applet Add dialog and the drivers listed in OEMSETUP.INF files are listed in the Drivers applet Add dialog when the user Adds an unlisted or updated driver and specifies the path to the OEMSETUP.INF file.

These files are organized into sections.  The relevant sections for the Drivers applet are described below:

11.1. The [Source Media Descriptions], [Disks] and [OEMDisks] Sections
All of the files listed in the .INF file have associated with them a logical disk ID.  The logical disk ID is a single character (1-9 A-Z).  Therefore, there are 1-9 + A-Z =35 possible logical disk IDs.  The logical disk ID is added to the beginning of every filename listed in the .INF file and separated from the filename by a colon (:) in the form of x:filename where x is the logical disk ID.  The logical disk ID zero (0) is reserved for use by Setup.

The [disks] section and the [oemdisks] sections are identical.  Only one is necessary for a .INF file.

The (new) [Source Media Descriptions] section on Windows NT is the same as the [disks] section but does not contain an entry for the directory.

The logical disk ID is mapped to a physical disk in the [disks] section of the .INF file.  The following is a generalized syntax line and, then, a sample of a .INF file's [disk] section that maps the logical to physical disk location of the [MCI] CD Audio driver listed in the [installable.drivers] section.

Disk_ID = Drive, "Text Description"

Ex:	[disks]
	Z= . , "MCI Drivers Disk"
OR
Ex:	[Source Media Descriptions]
	1="Windows NT diskette number 1"

In the preceeding [disks] section example, the profile string corresponds to a logical disk ID.  For every logical disk ID used in the .INF file, there must be a line in the [disks] section that maps that logical disk ID to a physical disk location.

The first field in the [disks] section is the physical location that corresponds to the logical disk ID in the profile string.  In the preceeding example, all the filenames that start with logical disk ID Z will exist in the physical current directory of the current drive (.).  This field is absent when the section is [Source Media Descriptions].

The second field is a Text_Description string used to identify the physical disk location.  This is used by the Drivers applet for disk prompting if the physical disk locations for different logical disk IDs are on different floppy disks, which is normal.

11.2. The Installable.Drivers Section
The [installable.drivers] section of the .INF file lists all of the drivers which can be installed by using the particular .INF file.  The following is a generalized syntax line and, then, a sample of .INF file's [installable.drivers] section that is used to install the [MCI] CD Audio driver.

Profile_string = Disk:Filename, "Type_Description", "Text_Description", Disk:VxD, Parameters, Profile_string

Ex:	[installable.drivers]
	cdaudio = Z:mcicda.drv, "cdaudio", "[MCI] CD Audio",,

Where:

SYMBOL 183 \f "Symbol" \s 10 \h	Filename is the MS-DOS filename of the driver file.
SYMBOL 183 \f "Symbol" \s 10 \h	Type_Description is the profile string used when adding the driver entry to the SYSTEM.INI file.  Multiple Type_Description strings can be specified by enclosing all strings in quotes and separating by commas.
SYMBOL 183 \f "Symbol" \s 10 \h	Text_Description is the character string describing the device on that line.
SYMBOL 183 \f "Symbol" \s 10 \h	VxD is the MS-DOS filename of the virtual device driver associated with the driver.  Multiple VxD files can be specified by enclosing all filenames in quotes and separating by commas.
SYMBOL 183 \f "Symbol" \s 10 \h	Parameters are default parameters for the driver which are appended to the end of the entry made in SYSTEM.INI for the driver.  Multiple Parameters can be specified by enclosing all parameters in quotes and separating by commas.
SYMBOL 183 \f "Symbol" \s 10 \h	Profile_string is the name of any other driver(s) to be installed whenever the driver specified is installed.  Multiple Profile_strings may be specified by enclosing all strings in quotes and separating by commas.

11.3. Driver Specific Sections
If a driver requires other files (such as DLLs) to be installed in the Windows System directory when the driver is installed they may be specified in a section specific to that driver.  The following is a generalized driver specific section.

Ex:	[profile_string]
	Disk:filename
	Disk:filename
	...

Where:

SYMBOL 183 \f "Symbol" \s 10 \h	Profile_string matches a profile_sting specified in the [installable.drivers] section.
SYMBOL 183 \f "Symbol" \s 10 \h	Filename is a file to be copied to the Windows System directory.


al U :  *                ]                       	  j    F                  	            F  C               (                                                       Ȥ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   n    &    t  M        e  l     d                                                                                                                                                                                                                                                                                               E     .                 t           l     A          s          z           z                                s                      ?               <                                                                                         <              0                                                                                        6                                                                   l                                                          	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     <                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      X               v                                                                                                                                                  t                                                                                                                                                                                                                                                              S                                                                                                                                             S                                                                                                                                                                                                                                                                                               l                                                                                                                                                                                                                            `     |                    c                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              D                                                                                                                                                                                                                                                                                                                                                                                                              o                                                  y                           e                         S                               d                                                 n                   s               h                                                                                           F         N                                                                                                                                                                                                                                                                                                                                                                                                                                        '                                                                                                                                                                                                                                                                                                                                                                                                      	                                                                                                                                                                                                     S                                                                                                                                      6                                                                                           b       j                                                                                                                                                   8                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  W                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ;                                                                                               %                                                                                                                                                                                                               r                                                       t                                                                                                                                                                                                                                      &  r        U  Q    j                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          n :  (.                %                       	  B                      	              C               (                                                       Ȥ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ~  :  !n                Q	                       	  "h    g               E   	            g  C      E     E    (   E                                                    Ȥ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            L  /  u       2  *  &              +  '  a   2    3         y                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  W                            ^                                                                                                                                                                                                                                                                                                                                                                                                                                                      !                                   ,  3       @                                                                                                                                                                    ;                                                                                                                                                                                                                                                                                                                                                                                                                                                            >                                                                                                                                                   6                                                          Q                        I                                                                                                                                                                                                                                       3                                                                                                                                                                                                  <                                                                                                                                                                                                             +                          ]                                                         z            ,                       K                                                                                                                                                                                                                                                                                                                  !                                                                                                                                                                                                                            @                                                                                                                                      3                                            #  R           s  "  D       5                                                                                                                                                                                                                                                                                                                                         
      E   }         m                        ~                	      	                N        
  #                                                                                                                                                                                                                                                                                                                                            :  r#                                       	  g    g               W   	            g  C      W     W    (   W                                                    Ȥ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       R :                  g                       	  V    2              )   	            2  C     )    )    (     )                                                 Ȥ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ^  :  4%n                Q	                       	  r    q               h   	            q  C      h     h    (   h                                                    Ȥ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   V :  [6                
                       	                        	              C               (                                                       Ȥ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               "  :  '(                &                       	  g    g               z   	            g  C      z     z    (   z                                                    Ȥ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 r  :  )                a                       	  s    r                  	            r  C               (                                                       Ȥ                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               G  H              H                    	
  

  )
  *
  
  
              h  i      X  Z  \  ?  A  B  J  M      ,  2            -  .      +                                                                    ؜              G      U+  ,          c!  d!  !  !  _#  t#  T$  U$  &  &  (  (  !(  "(  m(  n(  (  (  (  (  )  )  g+  h+  },  ~,  ,  ,  T.  U.  Y0  Z0  y0  z0  0  0  0  0  3  3  4  4   4  -4  14  V4  ^4  6  6  6  6  6  6  6  6  6  6  58  ?8  F8  G8  9  9  :  :  !;  i;  =  =                                                     5	              he                                          ȫ                J=  =  =  >  >  @  {@  @  @  @  A  A  A  CA  DA  cA  dA  uA  A  A  8B  9B  XB  YB  jB  B  B  B  B  B  (C  +C  C  C  C  C  C  .D  8D  D  D  D  D  D  %E  4E  E  E  F  F  G  G  G  G  +G  ]G  ^G  }G  ~G  G  G  G  G  G  
                                                                                                                                                                             @                              >  b            "  P  h        %  G  J  M  Z  o  q                      !  +  5  F  H  R  \  }                              ǹǹǹǹǹݳͦͦ          l  
t   h
          l 
 4
$$   x          !     !    !m            !    !     !     !    ! A  	  
  	
  
  
      n  p  -  /  Q        K  M      -  f  h  k  m  i  k               ?  *  ,  C  E  {  }                Z  \  ?  A  D  F              	                ! h    ! h    !    !    !R	    !    !     !     ![   !    !     ! h    ! h    !     !    !m >  a!  c!  L#  N#  #  #  #  R$  T$  W$  Y$  %  %  P&  R&  &  &  &  &  \'  ^'  '  '  (  m(  (  c)  e)  *  *  4*  e+  g+  j+  l+  +  {,  },  ,  ,  ,  ,  ,  ,  R.  T.  W.  Y.  /  (0  Y0  0  1  1  ֳ󙑉  !     ! 8    ! 8    !b    !    !
   !m    !R	    !     ! h    !f    !     !     !   !   !    ! h    !     ! h 61  1  )2  +2  c2  2  L3  N3  3  :4  6  6  6  6  6  8  8  9  	9  9  9  :  :  :  :  ;  #;  ';  H;  k;  m;  h<  j<  =  =  >  >  >  @  @  @  @  @  @  @  @  @  CA  8B  B  C  D  E  E  E  F  F  F  F  ̼ܷܷ      ! h    ! h    ! h    !     !     !     !      !      !      !     !    !    !m   !    !     !    !  :F  F  F  F  F  F  ]G  G  G  G                                                                                                                                                                                                                                                                                                                                                                                                                                        ! h    !     !   	 W                             BulletBullet IndentIssue	Menu ItemRevision Historyw                                           $  B        	  
           0       X !       X !        H$       H$                              
      <       x       x x &	*	
      &
             0
            @B@B @B!@B       @       @@@            $                                                   EF               %  )  .  :  EF          [         r                 ^  	            +  =  
       1  F  G  D  Times 	Symbol " Helvetica  Times New Roman 5 Courier New                  9   V   m   }   6  =  M  W  a        o	  	  <
  \
          Y  y       &  &  &  '  o'  '  .  .  Y/  y/  l?  ?  ?  ?  @  @  (A  HA  B  #B  C  +C  cE  E  E  E  EF      9 9 9 99999999 9 99999999   8 ContentsOverviewRevHist1RevHist2RelDocs1RelDocs2W    H    2  [  EF         W    H    2  [  EF     <  <     <      
  "        h    ZEZE        4
  ?  	     b  C:\WINWORD\SPEC.DOTDrivers AppletFunctional Specification  R C B SpeedR C B Speed         
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\doc\convert.txt ===
========================================================
  |                                                      |
  | CONVERSION AND PORTABILITY ITEMS IN NT MULTI-MEDIA   |
  |                                                      |
  ========================================================



1. SHORT MIDI MESSAGES (RCBS)

      Short midi messages are passed around the system as DWORDs.
      The documentations says that the first byte is the 'low order
      byte' (see midiOutShortMsg).  However, testcases (eg sbtest.exe)
      and presumably applications often just use a union of a dword
      and byte[4] to convert (NOT the same).



2. WINDOW words

      The apis now take LONG parameters but actually only store WORDs.
      This can be fixed by using things like SetWindowLong but there
      is still the problem of the offsets they are using.  One suggestion
      is just to double the size of everthing and every offset but
      the conversion effort is still there.

3. (SD) MCI Device IDs

        Unfortunately these are 16 bits values in Win 3.0+, and the size
        is difficult to change as it is used in disk files.  Hence is a
        permanent fixed value.  It could be "thunked" when read/written.
        More work needs to be done to decide whether to use a 32 bit
        device id for MCI devices in Win 32, or to stick with 16 bit.
        The device type MCIDEVICEID has been added to WINMM.H.

4. (SD) Global sound playing windows

        Windows MM extensions (MMSYSTEM) uses a single GLOBAL window
        handle (hwndNotify) to play all asynchronous sound (MCI and
        sndPlaySound).  To do this a piece of global memory is used
        that defines which sound is playing.  NO attempt is made in
        Windows (WIN16) to synchronise playing sounds.

        Much of the WIN16 high level sound code references the global
        window handle.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\doc\sndioctl.doc ===
ۥ- `@	  4 -             <                    6C      H                              o    o                                           4 Ғ         (       :                                                     4 ݙ  <                         &                                                             Device Io Control functions for Sound Devices

Note : Normal errors associated with the NtDeviceIoControlFile call (eg unable to lock data, insufficient memory etc) are not discussed here.

Device Types

The following device types are used when calling IoCreateDevice :

FILE_DEVICE_WAVE_IN - wave input devices

FILE_DEVICE_WAVE_OUT - wave output devices

FILE_DEVICE_MIDI_IN - Midi input devices

FILE_DEVICE_MIDI_OUT - Midi output devices
Access rights for sound devices
Write access gives the ability to send data to the device.  Generally the driver may only allow one write handle or perhaps up to the number of logical devices supported by the device.
Read access must in general ALWAYS be possible so that windows style queries (xxxx_GET_CAPABILITIES) can be executed.
As a special dispensation the xxx_SET_VOLUME functions are allowed with Read access provided any writers have granted Write share access.  This is to allow writing of mixer applications without undue complexity.

Header files
Sound IOCTLs are currently defined in NTDDWAVE.H (for wave devices) and NTDDMIDI.H (for midi devices).  These files also define the default device names for this kind of device :
DD_WAVE_IN_DEVICE_NAME
DD_WAVE_OUT_DEVICE_NAME
DD_MIDI_IN_DEVICE_NAME
DD_MIDI_OUT_DEVICE_NAME
The Kernel device name naming convention is followed whereby a device of a given type can be found by appending '0', '1', ... to the generic name.
Definitions of wave headers and device capabilities structures are in WINMM.H.
Background on Ioctls
Ioctl types :  The bottom 2 bits determine the type  - 
00 - IO subsystem copies the input data into internal storage.  Output size is determined by IOCB.Information set by driver.
01 - Input operation (input to driver - presumably output to device).  Input treated as in case 0, output is probed and locked (driver's responsibility to map).
02 - as 01 but input and output reversed.
03 - IO subsystem does nothing with input and output buffers.

Note that IOCB.Information is an output.  It usually contains the number of bytes returned or 0 if an error occurred.  This is actually required if the IOCTL type (least significant 2 bits) is 0.

IOCB.IoStatus may also contain STATUS_CANCELLED for any asynchronous IOCTL.

General return values

Some IOCTLs can return STATUS_BUFFER_TOO_SMALL.  In this case no data is returned, the Information field in the IOCB contains 0.

Wave IOCTLs

IOCTL_WAVE_QUERY_FORMAT
IOCTL_WAVE_SET_FORMATInput is PCMWAVEFORMAT structure.  Return status determines if format supported.  If the control code is IOCTL_WAVE_SET_FORMAT and the specified format is supported then subsequent data in IOCTL_WAVE_PLAY data is played in the specified format.  After the wave output device is opened if no IOCTL_WAVE_SET_FORMAT is received by the device then wave output is played at a device specified default rate.
NB Operation is SYNCHRONOUS but if wave data is being played then the time the new format takes effect is UNDEFINED.
On the soundblaster the default rate is 11.025Khz and new formats take effect whenever output is restarted either due to a reset or due to completion of all input data.Input buffer sizesizeof(PCMWAVEFORMAT) Input bufferPCMWAVEFORMAT structure to testOutput buffer size0 or sizeof(ULONG)Output bufferNothing.IOCB.Information0IOCB.StatusSTATUS_SUCCESSWave format is supportedSTATUS_NOT_SUPPORTEDWave format not supported (includes input buffer size not sizeof(PCMWAVEFORMAT) since other formats may not have this size).

IOCTL_WAVE_GET_CAPABILITIESThe output buffer is filled with WAVEOUTCAPS data for the wave device.Input buffer size0Input bufferNoneOutput buffer sizeanyOutput bufferWAVEOUTCAPS data for wave output devices, WAVEINCAPS for wave input devices.IOCB.InformationAmount of data returnedIOCB.StatusSTATUS_SUCCESSData returned OK

IOCTL_WAVE_GET_STATEThe output buffer is filled with a ULONG representing the current wave output state :
WAVE_DD_IDLE	Nothing playing
WAVE_DD_PLAYING	Playing wave data
WAVE_DD_RECORDING Recording wave data
WAVE_DD_STOPPED	Operation suspended (by user)Input buffer size0Input bufferNoneOutput buffer sizesizeof(ULONG)Output bufferCurrent stateIOCB.Informationsizeof(ULONG)IOCB.StatusSTATUS_SUCCESSData returned OK

IOCTL_WAVE_SET_STATEThe input buffer contains the new state change value :
WAVE_DD_STOP	Temporarily suspend playing
WAVE_DD_PLAY	Continue playing
WAVE_DD_RECORD	Start recording
WAVE_DD_RESET	Cancel all input or output.
Note that for wave output devices WAVE_DD_RESET sets the state to WAVE_DD_IDLE (ie it cancels a WAVE_DD_STOPPED state, as does WAVE_DD_RESUME).
WAVE_DD_STOP and WAVE_DD_RESET can be asynchronous.  The effect of supplying more wave data or requesting other state changes before they complete is safe but undefined (eg the data may be ignored, used etc).
For wave input devices the oldest IOCTL_WAVE_RECORD is completed (if there is one), even if there is no data to return.  This is for compatibility with older systems. 
New IOCTL_WAVE_PLAY data does not cancel a WAVE_DD_STOPPED state.Input buffer sizesizeof(ULONG)Input bufferNew stateOutput buffer size0Output bufferNoneIOCB.Information0IOCB.StatusSTATUS_SUCCESSState changed OKSTATUS_PENDINGOperation not yet complete.STATUS_DEVICE_BUSYAnother state change is incomplete.

IOCTL_WAVE_GET_POSITIONThe output buffer is filled a WAVE_DD_POSITIOn structure representing the position into the sound being played both in terms of bytes and samples.Input buffer size0Input bufferNoneOutput buffer size>= sizeof(WAVE_DD_POSITION)Output bufferNumber of sound samples and number of bytes representing those samples played since start of playing or last RESET (not including STOPPED time).  The position is given as accurately as the driver can reasonably manage.IOCB.Informationsizeof(WAVE_DD_POSITION)IOCB.StatusSTATUS_SUCCESSData returned OKSTATUS_BUFFER_TOO_SMALLOutput buffer smaller than sizeof(LARGE_INTEGER).

IOCTL_WAVE_PLAYThe output buffer is added to the list of buffers to be played.
Only valid on wave output devices.
If there is no format set since the device was Opened then a default format is assumed.
This call IOCTL is usually asynchronous.
Provided the input is not synchronously rejected IOCTL_WAVE_PLAY IOCTLs are completed in the order of submission.Input buffer size0 or >= sizeof(WAVE_DD_HEADER)Input bufferEither none or a WAVE_DD_HEADER structure with loop control information.Output buffer sizeanyOutput bufferWave data to play.IOCB.InformationAmount of data played.  This is also valid if the IoStatus is STATUS_CANCELLED.IOCB.StatusSTATUS_SUCCESSData played.STATUS_BUFFER_TOO_SMALLInput buffer not large enough (and not 0 size).

IOCTL_WAVE_SET_VOLUMESets the volume for subsequent playing.Access RightsFILE_DATA_READ if file not opened for write without FILE_SHARE_WRITE specified.Input buffer size>=sizeof(WAVE_DD_VOLUME)Input bufferWAVE_DD_VOLUME for the volumeOutput buffer size0Output bufferNoneIOCB.Information0IOCB.StatusSTATUS_SUCCESSVolume setSTATUS_BUFFER_TOO_SMALLNot enough input dataSTATUS_NOT_SUPPORTEDSetting volume not supported

IOCTL_WAVE_SET_PITCHSets the pitch for subsequent playing.Input buffer size>=sizeof(WAVE_DD_PITCH)Input bufferWAVE_DD_PITCH for the pitchOutput buffer size0Output bufferNoneIOCB.Information0IOCB.StatusSTATUS_SUCCESSNew Pitch setSTATUS_BUFFER_TOO_SMALLNot enough input dataSTATUS_NOT_SUPPORTEDSetting pitch not supported

IOCTL_WAVE_SET_PLAYBACK_RATESets the playback rate for subsequent playing.Input buffer sizesizeof(WAVE_DD_PLAYBACK_RATE)Input bufferWAVE_DD_PLAYBACK_RATE for the playback rateOutput buffer size0Output bufferNoneIOCB.Information0IOCB.StatusSTATUS_SUCCESSNew rate set OKSTATUS_BUFFER_TOO_SMALLNot enough input dataSTATUS_NOT_SUPPORTEDSetting playback rate not supported


IOCTL_WAVE_GET_VOLUMEGets the current volume setting for subsequent playing.
If volume setting is not supported then maximum volume (0xFFFFFFFF) is returned.Input buffer size0Input bufferNoneOutput buffer size>=sizeof(WAVE_DD_VOLUME)Output bufferWAVE_DD_VOLUME structureIOCB.Informationsizeof(WAVE_DD_VOLUME)IOCB.StatusSTATUS_SUCCESSData returned OKSTATUS_BUFFER_TOO_SMALLNot enough room for output data

IOCTL_WAVE_GET_PITCHGets the current pitch Input buffer size0Input bufferNoneOutput buffer size>=sizeof(WAVE_DD_PITCH)Output bufferWAVE_DD_PITCH representing current pitch settingIOCB.Informationsizeof(WAVE_DD_PITCH)IOCB.StatusSTATUS_SUCCESSData returned OKSTATUS_BUFFER_TOO_SMALLNot enough room for output data

IOCTL_WAVE_GET_PLAYBACK_RATEReturns the playback rate for subsequent playing.Input buffer size0Input bufferNoneOutput buffer size>=sizeof(WAVE_DD_PLAYBACK_RATE)Output bufferWAVE_DD_PLAYBACK_RATE representing current playback rate settingIOCB.Informationsizeof(WAVE_DD_PLAYBACK_RATE)IOCB.StatusSTATUS_SUCCESSData returned OKSTATUS_BUFFER_TOO_SMALLNot enough room for output data

IOCTL_WAVE_RECORDThe output buffer is added to the list of buffers to be recorded into.
Only valid on wave input devices.
If there is no format set since the device was opened then a default format is chosen.
This call IOCTL can be either asynchronous or synchronous depending on whether there is sufficient data already recorded to fulfill the request when it is issued.
Provided the input is not synchronously rejected IOCTL_WAVE_RECORD IOCTLs are completed in the order of submission.
The device should buffer data so there is no need to have more than one buffer outstanding at any one time, nor any need to provide a buffer before setting the state to WAVE_DD_RECORDING.Input buffer size0Input bufferNoneOutput buffer sizeanyOutput bufferWave data recorded (on completion).IOCB.InformationAmount of data recorded.  This is also valid if the IoStatus is STATUS_CANCELLED.  If recording is stopped by a IOCTL_WAVE_SET_STATE with a state change of WAVE_DD_STOP or WAVE_DD_RESET or the device is closed then an incomplete buffer can be returned.IOCB.StatusSTATUS_SUCCESSData recorded.STATUS_BUFFER_TOO_SMALLInput buffer not large enough (and not 0 size).

IOCTL_WAVE_BREAK_LOOPCancels any currently playing loop.  The loop is cancelled after its current iteration is finished.  This is really a user-interface feature since it's hard to synchronize accurately to tell whether the loop is actually playing, which iteration it's on etc.Input buffer size0Input bufferNoneOutput buffer size0Output bufferNoneIOCB.Information0IOCB.StatusSTATUS_SUCCESSAny loop running will stop


MIDI Ioctls

IOCTL_MIDI_GET_CAPABILITIESThe output buffer is filled with MIDIOUTCAPS data for the midi device.Input buffer size0Input bufferNoneOutput buffer sizeanyOutput bufferMIDIOUTCAPS data for Midi output devices, MIDIINCAPS for Midi input devices.IOCB.InformationAmount of data returnedIOCB.StatusSTATUS_SUCCESSData returned OK
IOCTL_MIDI_GET_STATEThe output buffer is filled with a ULONG representing the current MIDI output state :
MIDI_DD_IDLE		Nothing playing
MIDI_DD_PLAYING	Playing MIDI data
MIDI_DD_RECORDING 	Recording MIDI data
MIDI_DD_STOPPED	Operation suspended (by user)
Some devices may decide to implement midi output synchronously in which case the state returned is always MIDI_DD_IDLE.Input buffer size0Input bufferNoneOutput buffer sizesizeof(ULONG)Output bufferCurrent stateIOCB.Informationsizeof(ULONG)IOCB.StatusSTATUS_SUCCESSData returned OK

IOCTL_MIDI_SET_STATEThe input buffer contains the new state change value :
MIDI_DD_STOP		Temporarily suspend playing
			or recording
MIDI_DD_PLAY	Continue playing
MIDI_DD_RECORD	Start recording
MIDI_DD_RESET	Cancel all input.
MIDI_DD_RESET cancels any outstanding requests.  For Midi output all notes are turned off.
Only MIDI_DD_RESET is valid for midi output devices.
For Midi input devices MIDI_DD_RECORD is required before any recording takes place.  A recording device can do some (device-dependent) buffering which is important since data can come in in large numbers of short bursts so it is not practical to keep the device supplied permanently with large numbers of outstanding IOCTL_MIDI_RECORD requests.Input buffer sizesizeof(ULONG)Input bufferNew stateOutput buffer size0Output bufferNoneIOCB.Information0IOCB.StatusSTATUS_SUCCESSData returned OKSTATUS_PENDINGOperation not yet complete.STATUS_DEVICE_BUSYAnother state change is incomplete.

IOCTL_MIDI_PLAYPlay midi dataInput buffer sizeMidi dataInput bufferNumber of bytes to playOutput buffer size0Output bufferNothingIOCB.Information0IOCB.StatusSTATUS_SUCCESSData played OKSTATUS_DEVICE_BUSYData still playing
IOCTL_MIDI_RECORDRecord midi data.Input buffer size0Input bufferOutput buffer size>= sizeof(MIDI_DD_INPUT_DATA)Output bufferMIDI_DD_INPUT_DATA structureIOCB.Information0IOCB.StatusSTATUS_SUCCESSData played OKSTATUS_BUFFER_TOO_SMALLBuffer not big enough

IOCTL_MIDI_GET_VOLUMEGets the current volume setting for subsequent playing.
If volume setting is not supported then maximum volume (0xFFFFFFFF) is returned.Input buffer size0Input bufferNoneOutput buffer size>=sizeof(UFIXED)Output bufferUFIXED volumeIOCB.Informationsizeof(UFIXED)IOCB.StatusSTATUS_SUCCESSData returned OKSTATUS_BUFFER_TOO_SMALLNot enough room for output data
IOCTL_MIDI_SET_VOLUMESets the volume for subsequent playing.Access RightsFILE_DATA_READ if file not opened for write without FILE_SHARE_WRITE specified.Input buffer size>=sizeof(UFIXED)Input bufferUFIXED for the volumeOutput buffer size0Output bufferNoneIOCB.Information0IOCB.StatusSTATUS_SUCCESSVolume setSTATUS_BUFFER_TOO_SMALLNot enough input dataSTATUS_NOT_SUPPORTEDSetting volume not supported
To be defined :
IOCTL_MIDI_CACHE_PATCHES
IOCTL_MIDI_CACHE_DRUM_PATCHES
author R C B Speed	date \@ d-MMM-yy4-Feb-92	page arabic8



v
IOCTL_MIDI_CACHE_PATCHESRequest an internal synthesizer preload a specified set of patches.  Some synthesizers are not capable of  keeping all patches loaded simultaneously and must load data from disk when they receive MIDI program change messages.sizeof(UFIXED)      j  o  $  (                      p  w        _	  o	  
  )
  T
  `
    G        +  -  ;  ^  `  t                                             *  2  4  H  O  Q  `                  ,      /  6  8  F  N  P  d  u  w                                                                           ^    	          <  F      &  (  9  L  N  \  i  k                                       4  _  x      !  (  *  8  @  B  V  u  w    d  f  x                    .                       4  ;  =  L  b  d  v                      L  c                                                          a      #  %  3  T  V  j  o  q                              
     D  Z                                   +   0   2   ?   O   `   b   d   }                        #!  %!  6!  Y!  [!  i!  !  !  !  !  !  !  !  !  !  !  !  !  "  "  "  "  4"  M"  O"  Q"  g"  "  "  8#  :#  K#  R#  T#  b#  j#  l#  #  #                                              a#  #  #  #  #  #  #  #  $  $  *$  ,$  .$  G$  n$  $  $  $  $  $  $  $  $  $  $  %  %  %  G%  I%  [%  t%  v%  %  %  %  %  %  %  %  &  	&  >&  @&  Q&  X&  Z&  h&  p&  r&  &  &  &  &  &   '  '  3'  5'  B'  R'  f'  h'  j'  '  '  '  (  (  (  (  X*  Z*  k*  r*  t*  *  *  *  *  *  *  *  *  *  *  '+  /+  +  +  ,  ,  $,  &,  (,  A,  x,  ,                                               a,  -  -  -  -  -  -  -  -  -  -  -  -  .  .  .  !.  #.  0.  @.  s.  .  .  .  .  .  .  /  /  /  "/  )/  +/  :/  /  /  /  /  /  /  /  /  0  o1  q1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  .2  F2  \2  5   5  15  D5  F5  T5  a5  c5  w5  |5  ~5  5  5  5  5  5  5  5  5  5  5  5  5  6  6  6  ,6  W6  h6  z6  |6  6  6  6                                                a6  6  6  6  6  6  6  6  6   7  7  7  7  &7  67  H7  J7  L7  `7  x7  7  7  7  7  7  7  7  7  7  7  8  8  8  68  88  J8  O8  Q8  ^8  n8  8  8  8  8  8  8  ^9  `9  q9  x9  z9  9  9  9  9  9  9  9  9  9  9  :  :  :  !:  5:  7:  9:  R:  w:  :  :  :  :  ;  ;  0;  F;  H;  V;  o;  q;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  <  !<                                               a!<  #<  %<  ;<  ]<  l<  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  <  =  =  =  =  o        *  ,  n          4  8  X  \  `  d  f  t  v  x                  2  =  }          Ѓ  ۃ      
  -  >  j  o  t  u  w    Ȅ  ΄  \  `  b  r  t  v                                                                                                             \      @  B  P  R                  I  j  $    p  r    4  L  e  }    *  z      G    	  S	  U	  
  
  i
  k
  
  
          0  G    P          ƿ                                l  
T!  	 	 	 	   	   	 	     <     <     <    h
     !   !     !     !   !   !   !%    !     !    !% 5  )  +  -  ;  \  ^  `  t                                                ѮѮ\WWQ     h
     !   "       l 3 4T!              	 	 	   	 	 	 	   	 	 	 	    h
   "       l 3 4T!            	 	 	 	   	 	 	 	   	 	 	 	    h
               l ' 4T!            	 	 	 	   	 	 	 	                   l ' 4T!            	 	 	 	     	 	 	                       *  0  2  4  H  M  O  Q  `                            ,                1  4  ѴѴѴ׮Ѵרzztmmdm    0        h
     !   "       l 3 4T!            	 	 	 	   	 	 	 	   	 	 	 	    h
                    l ' 4T!            	 	 	 	   	 	 	 	                        l  
T!  	 	 	 	   	   	 	      '4  6  8  F  L  N  P  d  s  u  w                              	  A  k        f  8    $  Ţyrk                                           0   
0   0   0     0      0    h
     !   "       l 3 4T!            	 	 	 	   	 	 	 	   	 	 	 	    h
                              l ' 4T!            	 	 	 	   	 	 	 	 "$  &  (  ;  J  L  N  \  g  i  k                                                 4  Y  ׺׺׺׺׺ݴݴhݴb                   h
   "       l 3 4T!              	   	   	 	 	 	   	 	 	 	  "       l 3 4T!            	 	   	   	 	 	 	   	 	 	 	    h
               l ' 4T!            	 	 	 	   	 	 	 	                        l  
T!  	 	 	 	   	   	 	 #Y  [  ]  _  x        #  &  (  *  8  >  @  B  V  s  u  w    b  d  f  x                ̵ztQ   "       l 3 4T!            	 	   	   	 	 	 	   	 	 	 	    h
                    l ' 4T!            	 	 	 	   	 	 	 	                        l  
T!  	 	 	 	   	   	 	         h
     !   "       l 3 4T!              	 	 	   	 	 	 	   	 	 	 	                 .  o                               4  9  ;  =  L  `  b  d  v      d^dddXd                 l ' 4T!            	 	 	 	   	 	 	 	              l  
T!  	 	 	 	   	   	 	     0     0     0     0    h
     !   "       l 3 4T!              	 	 	   	 	 	 	   	 	 	 	    h
                 "                  F  H  J  L  c                  !  #  %  3  R  źtnQn                                   l ' 4T!            	 	 	 	     	 	 	              l ' 4T!            	 	 	 	   	   	 	              l  
T!  	 	 	 	   	   	 	         h
     !     h
   "       l 3 4T!            	 	 	 	   	 	 	 	   	 	 	 	    h
                 R  T  V  j  m  o  q                                        
     >  ˭ק˄קaק                                                  "       l 3 4T!              	   	   	 	 	 	   	 	 	 	  "       l 3 4T!            	 	   	   	 	 	 	   	 	 	 	              l ) 4T!            	 	   	   	 	 	 	    h
                         l ' 4T!            	 	 	 	   	 	 	 	 >  @  B  D  Z                                              +   .   0   2   ?   O   ^   `   b   d   }   ̵zW"       l 3 4T!            	 	   	   	 	 	 	   	 	 	 	    h
               l ' 4T!            	 	 	 	   	 	 	 	                        l  
T!  	 	 	 	   	   	 	         h
     !   "       l 3 4T!              	 	 	   	 	 	 	   	 	 	 	 "}                                 !!  #!  %!  8!  W!  Y!  [!  i!  !  !  !  !  !  !  !  !  !  !  !  !  !  !  !  !  ztWtWtWtWtW       l ' 4T!            	 	 	 	   	 	 	 	              l  
T!  	 	 	 	   	   	 	         h
     !   "       l 3 4T!              	 	 	   	 	 	 	   	 	 	 	                 "       l 3 4T!              	   	   	 	 	 	   	 	 	 	    h
  "!  "  "  "  "  "  4"  K"  M"  O"  Q"  g"  "  "  "  "  "  "  "  6#  8#  :#  M#  P#  ytttng`IC                           l  
T!  	 	 	 	   	   	 	     0     0    h
     !   "       l 3 4T!              	 	 	   	 	 	 	   	 	 	 	    h
   "       l 3 4T!              	   	   	 	 	 	   	 	 	 	            "       l 3 4T!            	 	   	   	 	 	 	   	 	 	 	    h
       P#  R#  T#  b#  h#  j#  l#  #  #  #  #  #  #  #  #  #  #  #  #  $  $  ($  *$  ,$  .$  G$  h$  j$  l$  n$  $  $  $  $  $  ŢzztnW       l  
T!  	 	 	 	   	   	 	         h
     !   "       l 3 4T!              	 	 	   	 	 	 	   	 	 	 	  "       l 3 4T!            	 	   	   	 	 	 	   	 	 	 	    h
                              l ' 4T!            	 	 	 	   	 	 	 	 "$  $  $  $  $  $  $  $  $   %  %  %  %  E%  G%  I%  [%  r%  t%  v%  %  %  %  %  %  %  %  %  %  %  %  	&  <&  >&  @&  ŢzztnW       l  
T!  	 	 	 	   	   	 	         h
     !   "       l 3 4T!              	 	 	   	 	 	 	   	 	 	 	  "       l 3 4T!            	 	   	   	 	 	 	   	 	 	 	    h
                         l ' 4T!            	 	 	 	   	 	 	 	      "@&  S&  V&  X&  Z&  h&  n&  p&  r&  &  &  &  &  &  &  &   '  '  1'  3'  5'  B'  R'  d'  f'  h'  j'  '  '  '  '  '  '  (  ((  (  ſſyttngg`                0     0    h
     !   "       l 3 4T!              	 	 	   	 	 	 	   	 	 	 	  "       l 3 4T!            	 	   	   	 	 	 	   	 	 	 	    h
                         l ' 4T!            	 	 	 	   	 	 	 	           #(  $)  )  V*  X*  Z*  m*  p*  r*  t*  *  *  *  *  *  *  *  *  *  *  *  *  *  +  +  +  ,  ,  ",  $,  &,  (,  A,  r,  t,  v,  x,  ,  ɬɬɬɬϦϠwϠqwllf                 h
     !     h
   "       l 3 4T!            	 	 	 	   	 	 	 	   	 	 	 	    h
                  l ' 4T!            	 	 	 	   	 	 	 	                        l  
T!  	 	 	 	   	   	 	     0   0 %,  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  -  .  .  .  .  .  .  .  !.  #.  0.  @.  \.  ^.  `.  b.  d.  q.  s.  .  ϥ|wwwrwl              h
    !%    !   "       l 3 4T!            	 	 	 	   	 	 	 	   	 	 	 	    h
               l ) 4T!'            	 	 	 	   	 	 	 	                        l  
T!'D.  	 	 	 	   	   	 	           (.  .  .  .  .  .  .  .  /  
/  /  /  "/  '/  )/  +/  :/  /  /  /  /  /  /  /  /  /  /  /  /  0  [0  z0  0  0  0  m1  o1  q1  1  1  ѴѴѴ׮Ѵרztmmdm    0        h
     !   "       l 3 4T!            	 	 	 	   	 	 	 	   	 	 	 	    h
                    l ' 4T!            	 	 	 	   	 	 	 	                        l  
T!  	 	 	 	   	   	 	      '1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  1  2  2  2  2  .2  @2  B2  D2  F2  \2  2  2  2  2  3  03  3  3  5  Ţ~~~~wp                                                     0     0     0      0      0    h
     !   "       l 3 4T!            	 	 	 	   	 	 	 	   	 	 	 	    h
                              l ' 4T!            	 	 	 	   	 	 	 	 "5  5   5  35  B5  D5  F5  T5  _5  a5  c5  w5  z5  |5  ~5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  5  6  6  6  6  ,6  Q6  ׺׺׺׺׺ݴݴhݴb                   h
   "       l 3 4T!              	   	   	 	 	 	   	 	 	 	  "       l 3 4T!            	 	   	   	 	 	 	   	 	 	 	    h
               l ' 4T!            	 	 	 	   	 	 	 	                        l  
T!  	 	 	 	   	   	 	 #Q6  S6  U6  W6  h6  x6  z6  |6  6  6  6  6  6  6  6  6  6  6  6  6  6  6  6   7  7  7  7  7  &7  67  F7  H7  J7  L7  `7  ̵zW"       l 3 4T!            	 	   	   	 	 	 	   	 	 	 	    h
               l ' 4T!            	 	 	 	   	 	 	 	                        l  
T!  	 	 	 	   	   	 	         h
     !   "       l 3 4T!              	 	 	   	 	 	 	   	 	 	 	 "`7  t7  v7  x7  7  7  7  7  7  7  7  7  7  7  7  7  7  8  8  8  8  48  68  88  J8  M8  O8  Q8  ^8  n8  ~8  8  8  8  8  ƯzWz"       l 3 4T!            	 	   	   	 	 	 	   	 	 	 	              l ' 4T!            	 	 	 	   	 	 	 	                        l  
T!  	 	 	 	   	   	 	         h
     !   "       l 3 4T!              	 	 	   	 	 	 	   	 	 	 	    h
  "8  8  8  8  8  8  
9  \9  ^9  `9  s9  v9  x9  z9  9  9  9  9  9  9  9  9  9  9  9  9  9   :  :  :  :  !:  3:  žxxxxxr                                                                            l ' 4T!            	 	 	 	   	 	 	 	                        l  
T!  	 	 	 	   	   	 	     0     0    h
     !   "       l 3 4T!              	 	 	   	 	 	 	   	 	 	 	    h
   3:  5:  7:  9:  R:  s:  u:  w:  :  :  :  :  :  ;  ;  ;  2;  D;  F;  H;  V;  ŢztWQ4       l ' 4T!            	 	 	 	     	 	 	              l ' 4T!            	 	 	 	   	   	 	              l  
T!  	 	 	 	   	   	 	         h
     !   "       l 3 4T!              	 	 	   	 	 	 	   	 	 	 	    h
                  "       l 3 4T!            	 	   	   	 	 	 	   	 	 	 	 V;  m;  o;  q;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  ;  <  <  !<  #<  %<  ;<  Y<  ˨ѢѢ\Ѣ                                   "       l 3 4T!              	   	   	 	 	 	   	 	 	 	  "       l 3 4T!            	 	   	   	 	 	 	     	 	 	       "       l 3 4T!            	 	   	   	 	 	 	   	   	 	    h
                    l ' 4T!            	 	 	 	   	 	 	 	      Y<  [<  ]<  n<  <  <  <  <  <  <  <      ,  .             6  8  Z  \  ¼y[=          l ) 4T!'            	 	 	 	   	 	 	 	         l ) 4T!'            	 	 	 	     	 	 	         l ) 4T!'            	 	 	 	   	   	 	         l  
T!'D.  	 	 	 	   	   	 	                              !     !    !   "       l 3 4T!              	 	 	   	 	 	 	   	 	 	 	             F        	                               Caching patches ensures specified patches are immediately available.

The bank structure element specifies which bank of patches should be used.  Specify 0 for the default patch bank.

Each element of the patch array represents one of the 128 patches and has bits set for each of the 16 MIDI channels that use that particular patch.  The least significant bit represents physical channel 15.FILE_SHARE_WRITE>=sizeof(MIDI_DD_CACHE_PATCHESMIDI_DD_CACHE_PATCHES structure Patches cachedPatch caching
IOCTL_MIDI_CACHE_DRUM_PATCHESRequest an internal synthesizer preload a specified set of key-based percussion patches.  Some synthesizers are not capable of  keeping all percussion patches loaded simultaneously and must load data from disk when they receive MIDI program change messages.  Caching drum patches ensures specified percussion patches are immediately available.

The patch structure element specifies which drum patch number should be used.  Specify 0 for the default drum patch.

Each element of the patch array represents one of the 128 key-based percussion patches and has bits set for each of the 16 MIDI channels that use that particular patch.  The least significant bit represents physical channel 15.FILE_SHARE_WRITE>=sizeof(MIDI_DD_CACHE_DRUM_PATCHESMIDI_DD_CACHE_DRUM_PATCHES structure Percussion Patches cachedPercussion Patch caching

R C B Speed18May929
R C B Speed18May929                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ą  ƅ  ȅ  ʅ  ̅  ΅  Ѕ  ۅ              	                 +  -  0  2  3                                                                                                                                                                                                                                                                                                                                                                                                 \  ^  `  b  d  f  v  x          w  y  ^  `  ܹsPKE?9?                                                  !   "       l 3 4T!              	 	 	   	 	 	 	   	 	 	 	  "       l 3 4T!              	   	   	 	 	 	   	 	 	 	  "       l 3 4T!            	 	   	   	 	 	 	     	 	 	  "       l 3 4T!            	 	   	   	 	 	 	   	   	 	         l ) 4T!'            	 	 	 	   	 	 	 	      `  b  t  v      ą  ƅ  ȅ  ʅ  ̅  ΅  Ѕ    dA                                                             "       l 3 4T!            	 	   	   	 	 	 	     	 	 	  "       l 3 4T!            	 	   	   	 	 	 	   	   	 	         l ) 4T!'            	 	 	 	   	 	 	 	         l ) 4T!'            	 	 	 	     	 	 	         l ) 4T!'            	 	 	 	   	   	 	              l  
T!'D.  	 	 	 	   	   	 	       	       ݺ                                                                                                                                                                                                                                                                                                                                                      "       l 3 4T!              	 	 	   	 	 	 	   	 	 	 	  "       l 3 4T!              	   	   	 	 	 	   	 	 	 	     C   <            L   *&  9.  ~5  o=  C                                           
  	   :  :  :  "<  $<  <  <  i=  k=  o=  =  =  =  =  =  =  =  =  >  >  2>  Q>  c>  >  >  >  >  >  L@  N@  @  @  A  A  A  A  A  A   B  'B  +B  DB  HB  _B  cB  ~B  B  B  B  
C  4C  C   !  h
                                      h
      h
  !  h
                                      h
      h
           F   L         #  ,  6  !<    3     ! " # $ % D       4  $  Y      R  >  }   !  P#  $  @&  (  ,  .  1  5  Q6  `7  8  3:  V;  Y<  \  `       & ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ? E F G (  Times New Roman 	Symbol & Arial              '   1   3   ?   A   L     !    o=  o=     o=      o=   D  J    :  :  :  :  ;  ;  ;  "<  <  <  <  g=  i=  o=  =  =  =  =  =  =  =  =  =  =  >  >  0>  2>  Q>  _>  a>  c>  >  >  >  >  >  >  >  >  >  >  >  .?  C?  ?  ?  ?  ?  ?  ?  @  @  (@  L@  R@  W@  z@  @  @  @  @  @  @   A  A  A  A  A  A  A  A  A  A  A  A  A  A   B  B  B  %B  'B  )B  +B  DB  FB  HB  _B  aB  cB  |B  ~B  B  B  B  B  B  B  B  
C  C  "C  2C  4C  6C  ?C  JC  ^C  `C  aC  dC  eC  gC  vC  wC  |C  ~C  C       <    <    :    =    =    =    o        *    ,    n    :        ;        A;    4    F;    8    k;    X    o;    \    ;    `    ;    d    ;    f    ;    t    ;    v    !<    x    I<                        :               2    =    }                    Ѓ    ۃ            
    -    >    j    o    t    u    w        Ȅ    ΄    :    \    `    ;    v            A;            F;                k;        ą    o;    ƅ    ȅ    ;    ʅ    ̅    ;    ΅    ;    Ѕ    ۅ    ;        ;        !<            I<            <         <    +    <    -    <    0    <    2    <     <     <    "       h    ռ%%     ?  	     <   Sound IOCTLs for NT   R C B SpeedR C B Speed         OCTLs for NT   R C B SpeedR C B Speed         
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\doc\setup.txt ===
What you need to have in order to make your system work

A soundblaster card (or clone) installed, preferably in its
default configuration. (Address 220, Interrupt 7, DMA channel 1)

\NT\DRIVER\SNDBLST.SYS present

\NT\CONFIG\SYSTEM.REG with the line SNDBLST.SYS
This file should not end with CRLF.  The easy way to avoid
this is to insert the SNDBLST.SYS line as the NEXT TO last line.

C:\NT\WINDOWS\SYSTEM\MMDRV.DLL present

C:\NT\WINDOWS\SYSTEM\WINMM.DLL present

C:\NT\WINDOWS\SYSTEM\MCISEQ.DLL present (for MIDI)

C:\NT\WINDOWS\SYSTEM\MCICDA.DLL present (for CD Audio)

C:\NT\WINDOWS\SYSTEM\MPLAYER.EXE present (Media player)

C:\NT\WINDOWS\SYSTEM\SOUNDREC.EXE present (Sound recorder)

C:\NT\WINDOWS\SYSTEM\SOUND.CPL present (Control panel applet)

system.ini containing:
;-----------------------------------------------------------------
;
; This section associates a MCI media type with a MCI media driver
;
[MCI]
    WaveAudio=mciwave.dll
    Sequencer=mciseq.dll
    CDAudio=mcicda.dll

[drivers]
    wave=mmdrv.dll
    midi=mmdrv.dll
    midimapper=midi.cpl
;-----------------------------------------------------------------

win.ini containing:
;-----------------------------------------------------------------
[MCI Extensions]
    Wav=WaveAudio
    rmi=Sequencer
    Mid=Sequencer
;-----------------------------------------------------------------

In addition, you might want to
ERASE c:\nt\windows\MPlayer.INI
as MPlayer can somethimes think that it KNOWS that there are
no drivers of a particular sort on the system, with the result
that it fails to look.  A dose of enforced amnesia can help it.

You might want to have some corresponding icons in PROGMAN
(File; New; Program Item; etc)

You do not need a MMDebug section to make your system go, but if
you want to see debug output you could try (in Win.ini)
[MMDebug]
    SoundRec=3
    MPlayer=3
; choose a value in the range 0 (no output) to 4 (E-V-E-R-Y-T-H-I-N-G)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\doc\review.txt ===
====================================================================
=                                                                  =
=                                                                  =
=  Microsoft systems UK multi-media project review log             =
=                                                                  =
=                                                                  =
====================================================================


Each line represents 1 request to review and the review itself.

Key :
  Component - eg 'sounddd\sndblst'

  Strt - Date when request for review was put on the list (MMDD)

  Auth - Author's initials

  Rvwr - Review's initials

  Code - Status :
     R - Ready for review
     P - In progress (set when reviewer's name added).
     C - Review complete
     F - Failed for some reason (may need another review ...).

  Errs - Number of errors found (SENSIBLE judgement here please !
         no dups for repetitive errors etc).

  Date - Date of latest change (DDMM).


1992 :

Component           File name      Size   Strt   Auth Rvwr Code Errs Date
=========================================================================
sounddd\sndblst     openclse.c      6720  2801   RCBS      R         2801
sounddd\sndblst     record.c        9436  2901   RCBS      R         2901
sounddd\sndblst     play.c         18019  2901   RCBS      R         2901
sounddd\sndblst     position.c      1849  2901   RCBS      R         2901
sounddd\sndblst     midi.c         15064  2901   RCBS      R         2901
sounddd\sndblst     state.c        11102  2901   RCBS      R         2901
sounddd\sndblst     unload.c         694  2901   RCBS      R         2901
sounddd\sndblst     util.c          5005  2901   RCBS      R         2901
sounddd\sndblst     devcaps.c       9766  2901   RCBS      R         2901
sounddd\sndblst     dispatch.c     10896  2901   RCBS      R         2901
sounddd\sndblst     dma.c           3874  2901   RCBS      R         2901
sounddd\sndblst     debug.c         1582  2901   RCBS      R         2901
sounddd\sndblst     init.c         17945  2901   RCBS      R         2901
sounddd\sndblst     isr.c           4185  2901   RCBS      R         2901
sounddd\sndblst     dsp.c          11945  2901   RCBS      R         2901
sounddd\sndblst     sndblst.h      18706  2901   RCBS      R         2901
sounddd\sndblst     sources         1200  2901   RCBS      R         2901
sdk\inc             ntddwave.h      3519  3101   RCBS      R         3101
sdk\inc             ntddmidi.h      3353  3101   RCBS      R         3101
sdk\inc             ntddsnd.h        881  3101   RCBS      R         3101
ukmedia\winmm       wave.c         74882  3101   RCBS      R         3101
ukmedia\winmm       midi.c         63439  3101   RCBS      R         3101
ukmedia\winmm       midi.c          9594  3101   RCBS      R         3101
ukmedia\winmm       util.c          5416  3101   RCBS      R         3101
ukmedia\winmm       debug.c        14086  3101   RCBS      R         3101
ukmedia\mmdrv       sources          554  3101   RCBS      R         3101
ukmedia\mmdrv       mmdrv.def        119  3101   RCBS      R         3101
ukmedia\mmdrv       drvutil.c       9198  3101   RCBS SD   C    1    0402
ukmedia\mmdrv       mmdrv.h         3420  3101   RCBS      R         3101
ukmedia\mmdrv       wavedd.c      137366  3101   RCBS SD   C    1    0402
ukmedia\mmdrv       mididd.c      170605  3101   RCBS      R         3101
ukmedia\mmdrv       mmdrv.c         9375  3101   RCBS SD   C    0    0402
ukmedia\mmdrv       playwav.h       1301  0802   SD   RCBS C    0    1102
ukmedia\mmdrv       playsnd.c      12540  0802   SD   RCBS C    0    1102
ukmedia\mmdrv       playwav.c      13892  0802   SD   RCBS C    0    1102
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\dplayx\dplay\dplay\recompdp.log ===
/*==========================================================================
 *
 *  Copyright (C) 1996  - 1997 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       recompdp.log
 *  Content:	Global recompile file for DirectPlay
 *
 *		If this file is ever updated, all files for DirectPlay
 *		will recompile. (forces an nmake clean).
 *
 *		Add a record telling why the recompile was needed, and
 *		a global recompile will occur for all of the DirectDraw
 *		components.
 *
 *		This saves the pain in the ass of having a dependancy on
 *		globally included headers files and forcing a recompile
 *		every time you change it. 
 * 
 *  History:
 *   Date		By		Reason
 *   ====		==		======
 *  4/8/96		andyco  created from recompdd.log
 *	4/8/96		andyco	updated dpmess.h so all messages (except player - player) 
 *						have dwReserved fields.  Removed dwCmd from player-player
 *						mess.
 *	4/11/96		andyco	moved private data structs from dplayi.h to dplaypr.h
 *						sp's don't get dplayi_dplay.  changed sp dwReservedx
 *						to pSPData and dwSPDataSize
 *	4/12/96		andyco	dpmess is  no longer exported. use the dplay_xxx fn's
 *						from dplayi.h
 *	4/17/96		andyco	added dwSP1+2 to sessionnode
 *	4/23/96		andyco	removed enum crit section.  changed timeout to 5secs 
 *	4/25/96		andyco	got rid of dwreserved fields in dpmess.h moved to spblob
 *	5/24/96		andyco	unicode baby!
 *	5/31/96		andyco	new vtbl
 *	6/11/96		andyco	new dplay.h (pass 1)
 *	6/17/96		myronth	link w/ dplobby.lib
 *	6/21/96		andyco	cleaned up dplaysp.h - reordered, etc.
 *  6/22/96		andyco	new caps struct.  flags for open / getcaps (vtbl change).
 *	6/22/96		andyco	added idirectplaysp.
 *  6/22/96		kipo	added EnumConnectionData() method
 *	6/23/96		andyco	removed bLocal from SP_Create fn's
 *	6/24/96		andyco	added GetPlayerAddress,SP->GetAddress
 *	6/26/96		andyco	ACK! Player + Group structs were out of sync!
 *	6/27/96		kipo	changed many names.
 *	6/30/96		andyco	added player local data
 *	6/30/96		kipo	added support for MRU and CreateAddress
 *  7/9/96      ajayj   changes in constants and prototypes in dplay.h
 *	7/11/96		andyco	added dwflags to getplayeraddress callback struct
 *  7/20/96     kipo    changed DPADDRESS to use GUID's instead of 4CC codes
 *	7/24/96		andyco  added dwSPMax... to dplayi_dplay
 *  8/1/96		andyco	added latency + tick count data to dplayi_player 
 *	8/6/96		andyco	added version to all commands, extensible on the wire stuff.
 *  8/9/96      sohailm added hSPModule member to DPLAYI_DPLAY structure
 *	8/10/96		andyco	added hKeepAliveThread to DPLAYI_DPLAY
 *	8/15/96		andyco	added local + remote data for sp
 *	8/16/96 	andyco	added pNameServer to DPLAYI_DPLAY
 *	8/16/96		myronth	removed DirectPlayConnect
 *	8/23/96		kipo	bumped the service provider vesion number
 *  8/29/96     andyco  new dplobby .def
 *	9/25/96		myronth	added heap thread safety
 *	10/10/96	andyco	added pSysGroup to DPLAYI_DPLAY
 *	10/15/96	myronth	moved project for NT build environment
 *	10/31/96	andyco	added pvUpdateList to group / player
 *	11/21/96	andyco	added perfdata to dplayi_dplay
 *	12/20/96	andyco	changes to global data in winsock sp
 *	1/6/97		myronth	changed to new dpf stuff
 *	1/15/97		andyco	added nlocalplayers to group struct
 *	1/30/97		myronth	changed dplobby.h for meltdown
 *	2/15/97		andyco	added local data to dplayi_dplay, multi - sp
 *	2/25/97		andyco	dplay object list
 *	2/26/97		myronth	removed async.h dependency
 *	3/1/97		andyco	enum / init connection
 *	3/12/97		myronth	lobby support for connections & sessions
 *  3/12/97     sohailm added security to directplay
 *	3/18/97		andyco	sesssion list goes on dplay object
 *	3/18/97		kipo	added methods to IDirectPlaySP
 *	3/18/97		andyco	added dpsp_msg_secureversion
 *	3/25/97		andyco	changed leave_dplay macro to dec counter b4 leaving!
 *	4/1/97		andyco	added tcp guids to dplaypr.h. need to force rebuild
 *						so init_guid gets picked up.
 *	4/11/97		myronth	Added CLSID_DirectPlayLobby to dplobby.h
 *  4/09/97		sohailm added security related members to dplayi_dplay object
 *
 *	4/20/97		andyco	groups in groups
 *	5/8/97		myronth	added Get/SetGroupConnectionSettings, StartSession
 *	5/9/97		andyco	removed update list stuff
 *	5/12/97		sohailm added capi related members to DPLAYI_DPLAY.
 *	5/17/97		myronth	Added SendChatMessage method
 *	5/18/97		kipo	re-arranged player and group flags
 *	5/21/97		myronth	Changed DPMSG_CHAT format & size
 *	5/22/97		myronth	Added dwFlags member to DPMSG_CHAT (#8868)
 *	5/23/97		kipo	Added support for return status codes
 *	5/27/97		kipo	Add player flags to CreateGroup/Player and DestroyGroup/Player
 *  5/29/97     sohailm Added GetPlayerAccount() to vtable
 *  5/30/97     kipo	Added GetPlayerFlags() and GetGroupFlags()
 *  6/22/97     sohailm Added security related fields to the dplay object.
 *  6/23/97     sohailm Added public key to the dplay object.
 *	8/5/97		andyco	added async addforward
 *	8/19/97		myronth	Added lpLaunchingLobbyObject pointer to dplay object
 *	8/22/97		myronth	Added Description & flags to SPNODE structure
 *	10/21/97	myronth	Added IDirectPlay4 plus some other stuff
 *	10/30/97	myronth	Added group owner support
 *	11/19/97	myronth	Fixed VALID_DPLAY_GROUP macro (#12841)
 *	12/4/97		andyco	added pVoice to DPLAYI_DPLAY
 *	1/20/98		myronth	#ifdef'd out voice support
 ***************************************************************************/
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\mcicda\convnote.txt ===
Notes on conversion from win3.1 to NT.
======================================

1. Change from MSCDEX to NT CDRom driver IOCTLs.

   -- Driver sharing capabilities (??) - does the driver allow anything ?
   -- Drive labelling (config stuff too).


   Problems :

       Apparently no SCSI-2 command to tell if the tray is open.

   For now the only conditions we detect are the PLAY_STATUS conditions
   and inability to read the TOC.  We only read the TOC when asked to
   by CdReady or CdGetNumTracks.

2. Device sharing implications ??

   Seems at the moment that ANYONE can open CDRom (is it exclusive ?).

   The MCICDA on windows allows sharing between apps.  This means we
   need a server implementation or a kernel driver or just proper
   sharing access in the kernel driver (what should be access required
   for playing CDs ?).

3. Beware track numbering problems - is there always a 1 ?

4. PAUSE-RESUME.  This is effectively NOOPED (or at least the RESUME is).
   So PAUSE always stops.

   Underneath in MSCDEX the thing they're fighting is that PAUSE while
   PAUSEd STOPs (ie forgets its PAUSED).  Also MSCDEX calls PAUSE
   STOP.

   In NT to STOP we ... ?


5. A BASIC problem with the way all this stuff is written is that
   it's written by people all the way over to CDEX land.
   The devices report status AFTER they've tried to do what you want.
   This helps greatly with integrity.  The code is written with all
   kinds of defensive test BEFORE issuing a command which is pretty
   bogus.

6. flip3, flip4 etc.  Change these to portable versions where necessary.
   (flip4 seems OK and fits in with other poor implementations).
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\mciseq\convnote.txt ===
Conversion of mci midi sequencer.
Originals on \\sysuk1\data\win31mm\src\sonic\mciseq





List utility
------------
    LIST     H        1238   - List management definitions
    LIST     C        5648   - Memory management

    SUPPORT  C                 ** NEW FOR NT ** (replace .asm etc).

Common header file
------------------
    MMSYS    H        7810   - Common definitions for MCI and SEQ

MCI processing
--------------
    MCISEQ   H        5410   - Definitions for MCI part of driver
    MCICMDS  C       23354   - Commands from mciDriverEntry - msXxx
    MCISEQ   C       36751   - DriverProc -> mciDriverEntry
    CALLBACK C        2147   - Sequencer callback
    FORMATS  C       10845   - Time formats
      -- Convert to passing around MMTIME structures ?

Sequencer
---------
    MMSEQI   H       13524   - Definitions local to mmseq.c (internal sequencer)
    MMSEQ    C       63220   - midiSeqMessage - the sequencer
    MMSEQ    D        3116   - Doc
    UTIL     C       21200   - callback, track and timer helpers for sequencer

Other bits (not reqd for NT)
----------------------------
    TASK     ASM      2856   - interface to mmTask (why ?)
    CRIT     ASM      1895   - critical sections
    MCISEQ   DEF       304   - def file


DATA FLOW
==================================================================


  MCI            (MMSYS.H)               SEQ

               midiSeqMessage
                (SEQ_...)
            --------------------->

                MIDISEQINFO

                MIDISEQOPEN

                MIDISEQHDR


                MIDISEQCALLBACK
                (MIDISEQ_...)
                         DONE     -> TaskSignal - TO stream task
                         DONEPLAY -> TaskSignal - TO stream task
                         RESET    -> StreamTrackReset -> TaskSignal

            <---------------------

                MIDISEQERR_...
            <---------------------


==================================================================



Notes :

   mciGetDriverData returns a pointer to the stream - SeqStreamType so
   the stream is equated to a logical device.

   GETMOTWORD = 'Get Motorola word' (!)

   Within the timer interrupt routine use the critical section to get
   the other side of the mutual exclusion.

   SERIALIZATION :  A critical section is used which is held over calls
   to mciDriverEntry and in the sequencer tasks but released when
   getting messages (blocking) or temporarily while yielding.


STRUCTURE
=========

DRV_... + MCI_... messages
  (mciseq.c!DriverEntry)

       |
       V

MCI messages :
  (mciseq.c!mciDriverEntry)


    MCI_OPEN_DRIVER
      mcicmds.c!msOpen

    MCI_CLOSE_DRIVER
      mcicmds.c!msClose

    MCI_PLAY
      mcicmds.c!msPlay

    MCI_PAUSE
    MCI_STOP
      mmseq.c!midiSeqMessage SEQ_SETPORTOFF

    MCI_SEEK
      mcicmds.c!msSeek

    MCI_STATUS
      mcicmds.c!msStatus

    MCI_GETDEVCAPS
      mcicmds.c!msGetDevCaps

    MCI_INFO
      mcicmds.c!msInfo

    MCI_SET
      mcicmds.c!msSet


    Rest unsupported


MMSEQ messages :
    (mmseq.c!midiSeqMessage)

    SEQ_OPEN

....................................................................


Tasking structure :
-------------------


 Application task :
    mcicmds.c!msOpen
         |
         V
    mciseq.c!msOpenStream -> mmTaskCreate with routine mciStreamCycle
                         |
                         V
                    TaskSignal
                    PostAppMessage
                         .
                         . WTM_QUITTASK, WTM_DONEPLAY, WTM_FILLBUFFER
                         .
 Sequencer task :

                    GetMessage
                    TaskBlock
                         |
                         V
               mciseq.c!mciStreamCycle
                         |
                         V
               mmseq.c!midiSeqMessage - SEQ_TRACKDATA, SEQ_SETPORTOFF
                                            |          SEQ_GETINFO
                                            V
                                        NewTrackData


mciStreamCycle just keeps the buffers for the current stream stoked up.

Thus : there is 1 (extra) task PER LOGICAL DEVICE.
There is 1 SEQ structure per task and 1 stream structure per task (which
contains an HMIDISEQ handle hSeq to the SEQ structure).  The SEQ
structure remembers the HTASK.


The SeqStreamType structure is the per-stream data on the MCI side.
This is unfortunately shared between application and stream tasks.


There is no need to inhibit threading between sequencer tasks, only
between the main task and associated sequencer tasks.

Use of Yield etc :

    mciseq.c!msOpenStream - appears to have a spurious yield near the start

    mcicmds.c!msOpen - calls Yield to allow the stream task to start
        properly.  We need to force this to happen now.  Note that this
        is subtle because multiple people might be running - so we
        probably need a special event per task.

    mcicmds.c!msPlay - sits in a loop at the moment !  Need the event
                       again.

    mmseq NEVER yields or blocks

    mciseq.c!mciStreamCycle :
           TaskBlock near start when finished init - other side of
           Yield in msOpen.  Also later Blocks again for more work.
           This is the other side of msPlay ?

           mmTaskYeild - probably unnecessary since nothing was kicked off ?

......................................................................


MIDISEQ_DONE


Timers :
========

util.c!OneShotTimer has pointer to NPSEQ structure passed to it.
         |
         --> mmseq.c!TimerIntRoutine
         |
         |
util.c!MIDICallback

Conversion Issues

    tasking
    File format
      Seems OK because :

      1. mmio... is used to get at the chunks
      2. The data is in big-endian format and macros are used which will
         work for either format (GETMODWORD, GETMOTDWORD etc).

    file access

      OK - via MMIO

    parameter sizes
    api
    build
    globals
      list.c - arrayOfLists

    window messages
    alignment / structure packing / structure overlays



Comments :
==========

1. This code is essentially uncommented.  On the positive side the
   structure is reasonably clean (though overcomplex and relying
   on 'messages' (untyped calls) rather than subroutine calls which
   means many bugs will get by the compiler into runtime code.

BUGS
====

Pointer to MMIOPROC in mcicmds.c should be pointer to pointer to.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\media\mssound.txt ===
[RIFFADD] 
IART=STRING,"Brian Eno"
INAM=STRING,"The Microsoft Sound"
ICOP=STRING,"1995 Microsoft Corporation"
IPRD=STRING,"Microsoft Windows 95"
ISRC=STRING,"Microsoft Corporation\r\nOne Microsoft Way\r\nRedmond, WA  98052-6399"
DISP_DIB=FILE,windows.dib
IENG=STRING,""
ISFT=STRING,""
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\media\readme.txt ===
Since SLM doesn't store LFNs, the files in this directory may be a
bit hard to parse.  Here are their long names, compared with the short
names you see:


Windows Default Sound Scheme
-------------------------------------------------------------------------------
chimes.wav....................Chimes (stored in ..\sounds for legal reasons)
chord.wav.....................Chord (stored in ..\sounds for legal reasons)
ding.wav......................Ding (stored in ..\sounds for legal reasons)
tada.wav......................Tada (stored in ..\sounds for legal reasons)
ringin.wav....................Ring In (stored in ..\sounds for legal reasons)
ringout.wav...................Ring Out (stored in ..\sounds for legal reasons)


Jungle Sound Scheme
-------------------------------------------------------------------------------
jungleas.wav..................Jungle Asterisk
junglecl.wav..................Jungle Close
junglecr.wav..................Jungle Critical Stop
junglede.wav..................Jungle Default
jungleer.wav..................Jungle Error
jungleex.wav..................Jungle Exclamation
junglema.wav..................Jungle Maximize
jungleme.wav..................Jungle Menu Command
junglemi.wav..................Jungle Minimize
jungleop.wav..................Jungle Open
junglequ.wav..................Jungle Question
junglere.wav..................Jungle Recycle
junglewi.wav..................Jungle Windows Start
jungle~1.wav..................Jungle Windows Exit
jungle~2.wav..................Jungle Menu Popup
jungle~3.wav..................Jungle Restore Down
jungle~4.wav..................Jungle Restore Up


Musica Sound Scheme
-------------------------------------------------------------------------------
musicaas.wav..................Musica Asterisk
musicacl.wav..................Musica Close
musicacr.wav..................Musica Critical Stop
musicade.wav..................Musica Default
musicaer.wav..................Musica Error
musicaex.wav..................Musica Exclamation
musicama.wav..................Musica Maximize
musicame.wav..................Musica Menu Command
musicami.wav..................Musica Minimize
musicaop.wav..................Musica Open
musicaqu.wav..................Musica Question
musicare.wav..................Musica Recycle
musicawi.wav..................Musica Windows Start
musica~1.wav..................Musica Windows Exit
musica~2.wav..................Musica Menu Popup
musica~3.wav..................Musica Restore Down
musica~4.wav..................Musica Restore Up


Robotz Sound Scheme
-------------------------------------------------------------------------------
robotzas.wav..................Robotz Asterisk
robotzcl.wav..................Robotz Close
robotzcr.wav..................Robotz Critical Stop
robotzde.wav..................Robotz Default
robotzer.wav..................Robotz Error
robotzex.wav..................Robotz Exclamation
robotzma.wav..................Robotz Maximize
robotzme.wav..................Robotz Menu Command
robotzmi.wav..................Robotz Minimize
robotzop.wav..................Robotz Open
robotzqu.wav..................Robotz Question
robotzre.wav..................Robotz Recycle
robotzwi.wav..................Robotz Windows Start
robotz~1.wav..................Robotz Windows Exit
robotz~2.wav..................Robotz Menu Popup
robotz~3.wav..................Robotz Restore Down
robotz~4.wav..................Robotz Restore Up


Utopia Sound Scheme
-------------------------------------------------------------------------------
utopiaas.wav..................Uptopia Asterisk
utopiacl.wav..................Uptopia Close
utopiacr.wav..................Uptopia Critical Stop
utopiade.wav..................Uptopia Default
utopiaer.wav..................Uptopia Error
utopiaex.wav..................Uptopia Exclamation
utopiama.wav..................Uptopia Maximize
utopiame.wav..................Uptopia Menu Command
utopiami.wav..................Uptopia Minimize
utopiaop.wav..................Uptopia Open
utopiaqu.wav..................Uptopia Question
utopiare.wav..................Uptopia Recycle
utopiawi.wav..................Uptopia Windows Start
utopia~1.wav..................Uptopia Windows Exit
utopia~2.wav..................Uptopia Menu Popup
utopia~3.wav..................Uptopia Restore Down
utopia~4.wav..................Uptopia Restore Up
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\midimap\miditodo.txt ===
o  What should we map to?
      The following needs to be supported in the CPL.

      1) Many to many:
         For output this would allow multiple applications
         to open the mapper and we would merge this midi data
         to ALL output midi devices.

         For input this would allow multiple applications
         to open the mapper and we would merge the midi
         data from ALL midi input devices and send it to 
         ALL the applications.

      2) Many to one:
         For output this would allow multiple applications to
         open the mapper and we would merge the data from the
         applications to a single midi device.

         For input this would allow multiple applications to 
         open the mapper and we would route the input from a
         single midi device to all applications.

      3) One to many:
         For output this would allow a single application to
         open the mapper and we would route the data received 
         from the application to all devcies.

         For input this would allow a single application to 
         open the mapper and we would merge the data received
         from all devices to this application.
   

      4) One to one:
         For output this would allow a single application to
         open the mapper and we would map the data to a single
         midi device.

         For input this would allow a single application to 
         open the mapper and we would map the data from a
         single midi device to this application.

   o  Do i autodoc the sample code? including the midimapper?

   o  We need to do something about error codes.....
      For any error conditions that need expalanation we
      should Log the error.

   o  How should i process the other MXDM_* messages?
         -  MODM_RESET
         -  MODM_POLYMSG

         -  MIDM_POLYMSG







Files
=====

modmsg.c    -  modMessage()
modm.c      -  modmXXXX messages
mapout.c    -  output mapping code and output code that needs to be fixed.
midmsg.c    -  midMessage()
midm.c      -  midmXXXX messages
mapin.c     -  input mapping code and input code that needs to be fixed.

debug.c     -  contains isr debug code
commonf.c   -  contains common code that needs to be fixed.
init.c      -  contains one time initialization code
config.c    -  contains configuration code.
drvproc.c   -  contains the DriverProc() and LibMain()
fix.c       -  segment that is marked FIXED in def file.
               it contains the midi callback function.



=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\midimap\reg.txt ===
The definitive reference for MIDI Mapper's registry entries.

Aliases are kept in HKEY_LOCAL_MACHINE because they describe the hardware
setup (instrument-port-driver mapping) and are therefore global to the
machine.

Schemes are also global because we want at least the default schemes (which
map all 16 channels to one instrument on a port) to be available to all users.

The current scheme is stored in HKEY_CURRENT_USER.

-------------------------------------------------------------------------------

HKEY_LOCAL_MACHINE
  System
    CurrentControlSet
      Control
        MediaProperties
          PrivateProperties
            Midi
              Schemes
                %scheme%
                  [%nn%=%key%
                    Channels=%chanmask%*]

HKEY_LOCAL_MACHINE
  System
    CurrentControlSet
      Control
        MediaResources
          Midi
            %driver<nnnn>%
              Instruments
                [%nn%
                  FriendlyName=%alias%*
                  Port=%port%*
                  Definition=%idf%*]

HKEY_CURRENT_USER
  Software
    Microsoft
      Multimedia
        MidiMap
          CurrentScheme=%scheme%*


[]          Section repeats 0 or more times as needed
*           Tag represents a value rather than a key

Tag             Type            Description
===             ====            ===========
%scheme%        String          Scheme name; subkey into Schemes key.

%nn%            String          Iterator; no instrinsic meaning.

%key%           String          Relative midi driver key.  either
                                %driver<nnnn>% or %driver<nnnn>%\Instruments\%nn%

%chanmask%      DWORD           Binary channel mask (one byte per channel;
                                LSB is channel 0).

%driver<nnnn>%  String          Driver key; returned from DRV_QUERYDRVENTRY.

%alias%         String          Alias for instrument/port combination.

%port%          BYTE            Port on this driver; range 0..MODM_GETNUMDEVS
                                for this driver.

%idf%           String          Filename & instrument of an IDF file; The
                                filename is first, optionally followed by
                                a Instrument name in angle '<>' brackets.
                                for instance 'general.idf<GeneralMIDIInstrument>'
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\mmcaps2k\readme.txt ===
The MMCAPS sample demonstrates the multimedia capabilities of the hardware.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\mplayer2\port1632.txt ===
Notes on how to maintain 16/32 bit single source code.

We use the macros (message crackers etc) in port1632.h - which means:

In the 16 bit environment
  The header files
    port1632.h
      ptypes16.h
      pwin16.h
      plan16.h
  must all be visible and WIN16 must be defined.

In the 32 bit environment
  The header files
    port1632.h
      ptypes32.h
      pcrt32.h
      pwin32.h
      plan16.h
  must all be visible and WIN32 must be defined.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\adm_port.txt ===
[Strings]
SPSVCINST_ASSOCSERVICE= 0x00000002
MSFT = "Microsoft"
MediaClassName = "Sound, video and game controllers"
StdMfg = "(Standard system devices)"

gameport.SvcDesc = "Aureal Game Port Enumerator"

;
;  Game card manufacturers
;
Aureal		   = "Aureal"

;
;  Device descriptions for known game ports
;
PNPB02F.DeviceDesc = "Standard Game Port"
Aureal.DeviceDesc				= "Aureal Vortex Game Port"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\adm_mult.txt ===
[Strings]
;Localized strings - standard Microsoft value
MFClassName="Multifunction PCI Device Driver"
MSFT="Microsoft"

;Localized strings - device-specific
AurealMfgName="Aureal Semiconductor"
PCI\VEN_12EB&DEV_0001.DeviceDesc="Vortex Multifunction PCI Parent"
PCI\VEN_12EB&DEV_0002.DeviceDesc="Vortex Multifunction PCI Parent"
PCI\VEN_12EB&DEV_0003.DeviceDesc="Vortex Multifunction PCI Parent"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\mssb16.txt ===
[Strings]
MSFT="Microsoft"
CLMfgName="Creative Technology Ltd."
DiskDescription="SoundBlaster WDM Sample Driver Disk"
*WDMPNPB003.DeviceDesc="WDM Sample Driver for SB16, AWE32, or compatible"
*WDM_SB16.DeviceDesc="WDM Sample Driver for SB16, AWE32, or AWE64 PnP"
*CTL0051.DeviceDesc = "WDM Sample Driver for Creative 3D Stereo Enhancement Technology (inactive)"
*CTL7FFF.DeviceDesc = "WDM Sample Driver for Creative Plug and Play Device (Reserved) (inactive)"
SBAWE_Virtual_Mpu.DeviceDesc="WDM Sample Driver for Creative SBAWE MPU401 Emulation (inactive)"
WDM_SB16.Wave.szPname="Sound Blaster 16"
WDM_SB16.Topology.szPname="Sound Blaster 16"


MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"
WDM_MIDI="WDM-based Device"
Proxy.CLSID=        "{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KSCATEGORY_AUDIO="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCATEGORY_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
KSNAME_Wave="Wave"
KSNAME_UART="UART"
KSNAME_FMSynth="FMSynth"
KSNAME_Topology="Topology"

WDM.UART.szPname="SB16 MPU-401"
WDM.FMSynth.szPname="SB16 FM Synthesizer"

sndblst.SvcDesc = "WDM Sample Driver for SB16"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma10k1.txt ===
[Strings]
MSFT="Microsoft"
CREAF="Creative"
*PCIJOY.DeviceDesc="Creative SBLive! Gameport"
MedCat="SYSTEM\CurrentControlSet\Control\MediaCategories"

MixSet="SOFTWARE\CREATIVE TECH\CREATIVE MIXER\SETTINGS"
MixRoot="SOFTWARE\CREATIVE TECH\CREATIVE MIXER"
MultiUser="SOFTWARE\Creative Tech\Multiuser"
MixerName="SOFTWARE\Creative Tech\MixerName"
DevCon="SOFTWARE\Creative Tech\Devcon"
DevConDefault="SOFTWARE\Creative Tech\Devcon\Default"
*Drivers="SOFTWARE\Creative Tech\Drivers\AudioDevice\DevCon\00000002"
DevInfo="SYSTEM\CurrentControlSet\Control\Creative Tech\DeviceInfo\PCI\VEN_1102&DEV_0002"
PCI512V1DevInfo="SYSTEM\CurrentControlSet\Control\Creative Tech\DeviceInfo\PCI\VEN_1102&DEV_0002&SUBSYS_80231102"
PCI512V2DevInfo="SYSTEM\CurrentControlSet\Control\Creative Tech\DeviceInfo\PCI\VEN_1102&DEV_0002&SUBSYS_80501102"
PCI512DevInfo="SYSTEM\CurrentControlSet\Control\Creative Tech\DeviceInfo\PCI\VEN_1102&DEV_0002&SUBSYS_80711102"

DDMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80221102"
DiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80221102"
HODMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80271102"
HODiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80271102"
M3DMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80401102"
M3DiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80401102"
SBDMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80611102"
SBDiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80611102"
SBMDMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80631102"
SBMDiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80631102"
SBSDMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80691102"
SBSDiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80691102"
DSDMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80311102"
DSDiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80311102"
SDMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80321102"
SDiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80321102"
GDMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80261102"
HDMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80281102"
GDiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80261102"
HDiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80281102"

V1DMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_00201102"
V1DiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_00201102"
V2DMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80511102"
V2DiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80511102"
M1DMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_00211102"
M1DiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_00211102"
MT1DMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_002F1102"
MT1DiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_002F1102"
MT2DMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80251102"
MT2DiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80251102"
V512D1Mix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80231102"
V512Diag1Mix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80231102"
V512D2Mix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80501102"
V512Diag2Mix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80501102"
M4DMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80291102"
M4DiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80291102"
M5DMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80321102"
M5DiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80321102"


V512Mix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80711102"
V512DiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80711102"

S1DMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_806A1102"
S1DiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_806A1102"

SB1DMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80641102"
SB1DiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80641102"

SBM1DMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80621102"
SBM1DiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_80621102"

SB05DMix="SYSTEM\CurrentControlSet\Control\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_806B1102"
SB05DiagMix="SOFTWARE\Creative Tech\DriverDefaults\MixerSettings\PCI\VEN_1102&DEV_0002&SUBSYS_806B1102"



Proxy.CLSID="{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KSCAT_AUDIO="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCAT_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCAT_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
KSNAME_Wave="Wave"
KSNAME_UART="UART"
KSNAME_Topo="Topology"
KSNAME_AWESyn="AWESynth"
KSNAME_AWESyn2="AWESynth2"

;; *****************************************
;; Creative Guids (non-localizable)
;; *****************************************
;; ----------
;; source pin
;; ----------
GUID.HdPh="{F846E5E1-F3D3-11d1-A757-00A0C95949D1}"
GUID.Wave="{F846E5E2-F3D3-11d1-A757-00A0C95949D1}"
GUID.MIDI="{F846E5E3-F3D3-11d1-A757-00A0C95949D1}"
GUID.CDAudio="{F846E5E4-F3D3-11d1-A757-00A0C95949D1}"
GUID.LineIn="{F846E5E5-F3D3-11d1-A757-00A0C95949D1}"
GUID.Mic="{F846E5E6-F3D3-11d1-A757-00A0C95949D1}"
GUID.Mic0="{F846E5E7-F3D3-11d1-A757-00A0C95949D1}"
GUID.Mic1="{F846E5E8-F3D3-11d1-A757-00A0C95949D1}"
GUID.Video="{F846E5E9-F3D3-11d1-A757-00A0C95949D1}"
GUID.StMix="{F846E5EA-F3D3-11d1-A757-00A0C95949D1}"
GUID.PcSpk="{F846E5EB-F3D3-11d1-A757-00A0C95949D1}"
GUID.Aux="{F846E5EC-F3D3-11d1-A757-00A0C95949D1}"
GUID.MonoMix="{F846E5ED-F3D3-11d1-A757-00A0C95949D1}"
GUID.Tel="{F846E5EE-F3D3-11d1-A757-00A0C95949D1}"
GUID.TelOut="{F846E5EF-F3D3-11d1-A757-00A0C95949D1}"
GUID.PcmOut="{F846E5F0-F3D3-11d1-A757-00A0C95949D1}"
GUID.Ac3="{F846E5F1-F3D3-11d1-A757-00A0C95949D1}"
GUID.ZVAudio="{F846E5F2-F3D3-11d1-A757-00A0C95949D1}"
GUID.FxLineIn="{F846E5F3-F3D3-11d1-A757-00A0C95949D1}"
GUID.CDSpdif="{F846E5F4-F3D3-11d1-A757-00A0C95949D1}"
GUID.GPSpdif="{F846E5F5-F3D3-11d1-A757-00A0C95949D1}"
GUID.WetMix="{F846E5F6-F3D3-11d1-A757-00A0C95949D1}"
GUID.WaveDS="{F846E5F7-F3D3-11d1-A757-00A0C95949D1}"
GUID.ZVAudioLineIn2="{F846E5F8-F3D3-11d1-A757-00A0C95949D1}"
GUID.LineIn2="{F846E5F9-F3D3-11d1-A757-00A0C95949D1}"

;;added for LiveDrive
GUID.ZVAudioLineIn2Mic2="{F846E5Fc-F3D3-11d1-A757-00A0C95949D1}"
GUID.LineIn2Mic2="{F846E5Fd-F3D3-11d1-A757-00A0C95949D1}"
GUID.GPSpdifAux2="{F846E5Ff-F3D3-11d1-A757-00A0C95949D1}"
GUID.Aux2="{F846E5Fe-F3D3-11d1-A757-00A0C95949D1}"

;; ---------------
;; destination pin
;; ---------------
GUID.PlayCtrl="{F846E5FA-F3D3-11d1-A757-00A0C95949D1}"
GUID.RecCtrl="{F846E5FB-F3D3-11d1-A757-00A0C95949D1}"
;; ---------------
;; volume controls
;; ---------------
GUID.DestPlayVol="{F846E600-F3D3-11d1-A757-00A0C95949D1}"
GUID.DestRecVol="{F846E601-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcHdPhVol="{F846E602-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcWaveVol="{F846E603-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcMidiVol="{F846E604-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcCDAudioVol="{F846E605-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcLineInVol="{F846E606-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcMicVol="{F846E607-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcMic1Vol="{F846E608-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcVideoVol="{F846E609-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcStMixVol="{F846E60A-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcPcSpkVol="{F846E60B-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcAuxVol="{F846E60C-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcMonoMixVol="{F846E60D-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcTelVol="{F846E60E-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcTelOutVol="{F846E60F-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcPcmOutVol="{F846E610-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcAc3Vol="{F846E611-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcZvAudioVol="{F846E612-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcFxLineInVol="{F846E613-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcCDSpdifVol="{F846E614-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcGPSpdifVol="{F846E615-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcWetMixVol="{F846E616-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcZvAudioLineIn2Vol="{F846E617-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcLineIn2Vol="{F846E618-F3D3-11d1-A757-00A0C95949D1}"

;;added for LiveDrive
GUID.SrcZVAudioLineIn2Mic2Vol="{F846E619-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcLineIn2Mic2Vol="{F846E61a-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcGPSpdifAux2Vol="{F846E61c-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcAux2Vol="{F846E61b-F3D3-11d1-A757-00A0C95949D1}"

;; -------------
;; Mute controls
;; -------------
GUID.DestPlayMt="{F846E620-F3D3-11d1-A757-00A0C95949D1}"
GUID.DestRecMt="{F846E621-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcHdPhMt="{F846E622-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcWaveMt="{F846E623-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcMidiMt="{F846E624-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcCDAudioMt="{F846E625-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcLineInMt="{F846E626-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcMicMt="{F846E627-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcMic1Mt="{F846E628-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcVideoMt="{F846E629-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcStMixMt="{F846E62A-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcPcSpkMt="{F846E62B-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcAuxMt="{F846E62C-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcMonoMixMt="{F846E62D-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcTelMt="{F846E62E-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcTelOutMt="{F846E62F-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcPcmOutMt="{F846E630-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcAc3Mt="{F846E631-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcZvAudioMt="{F846E632-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcFxLineInMt="{F846E633-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcCDSpdifMt="{F846E634-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcGPSpdifMt="{F846E635-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcWetMixMt="{F846E636-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcZvAudioLineIn2Mt="{F846E637-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcLineIn2Mt="{F846E638-F3D3-11d1-A757-00A0C95949D1}"

;;added for LiveDrive
GUID.SrcZVAudioLineIn2Mic2Mt="{F846E639-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcLineIn2Mic2Mt="{F846E63b-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcGPSpdifAux2Mt="{F846E63d-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcAux2Mt="{F846E63c-F3D3-11d1-A757-00A0C95949D1}"

;; -------------
;; Gain controls
;; -------------
GUID.SrcMicBoost="{F846E63A-F3D3-11d1-A757-00A0C95949D1}"
;; -------------
;; Tone controls
;; -------------
GUID.DestEfxFader="{F846E640-F3D3-11d1-A757-00A0C95949D1}"
GUID.Bass="{F846E641-F3D3-11d1-A757-00A0C95949D1}"
GUID.Treble="{F846E642-F3D3-11d1-A757-00A0C95949D1}"
GUID.DigitalOut="{F846E643-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcZvAudioLineIn2Enable="{F846E644-F3D3-11d1-A757-00A0C95949D1}"

;;added for LiveDrive
GUID.SrcZVAudioLineIn2Mic2Enable="{F846E645-F3D3-11d1-A757-00A0C95949D1}"
GUID.SrcGPSpdifAux2Enable="{F846E646-F3D3-11d1-A757-00A0C95949D1}"


;; ******************************************************
;; Creative friendly mixer short names (non-localizeable)
;; ******************************************************
;; ----------
;; source pin
;; ----------
SHT.HdPh="HPhn"
SHT.Wave="Wave"
SHT.MIDI="MIDI"
SHT.CDAudio="CD"
SHT.LineIn="Line"
SHT.Mic="Mic"
SHT.Mic0="Mic"
SHT.Mic1="HMic"
SHT.Video="Video"
SHT.StMix="UHear"
SHT.PcSpk="PSpk"
SHT.Aux="Aux"
SHT.MonoMix="MMix"
SHT.Tel="TAD"
SHT.TelOut="Phn"
SHT.Ac3="DVD"
SHT.ZVAudio="I2SIn"
SHT.FxLineIn="Line-In"
SHT.CDSpdif="CDSPDIF"
SHT.GPSpdif="GPSPDIF"
SHT.WaveDS="WaveDS"
SHT.WetMix="UHear"
SHT.ZVAudioLineIn2="I2SIn-LineIn2"
SHT.LineIn2="LineIn2"

;;added for LiveDrive
SHT.ZVAudioLineIn2Mic2="I2S-Line2-Mic2"
SHT.LineIn2Mic2="Line2-Mic2"
SHT.GPSpdifAux2="GPSPDIF-Aux2"
SHT.Aux2="Aux2"



;; ---------------
;; destination pin
;; ---------------
SHT.PlayCtrl="Play"
SHT.RecCtrl="Rec"
;; ---------------
;; volume controls
;; ---------------
SHT.DestPlayVol="PlayVol"
SHT.DestRecVol="RecVol"
SHT.SrcHdPhVol="HPhnVol"
SHT.SrcWaveVol="WaveVol"
SHT.SrcMidiVol="MIDIVol"
SHT.SrcCDAudioVol="CDVol"
SHT.SrcLineInVol="LineVol"
SHT.SrcMicVol="MicVol"
SHT.SrcMic1Vol="HMicVol"
SHT.SrcVideoVol="VideoVol"
SHT.SrcStMixVol="UHearVol"
SHT.SrcPcSpkVol="PSpkVol"
SHT.SrcAuxVol="AuxVol"
SHT.SrcMonoMixVol="MMixVol"
SHT.SrcTelVol="TADVol"
SHT.SrcTelOutVol="PhnVol"
SHT.SrcAc3Vol="DVDVol"
SHT.SrcZvAudioVol="I2SInVol"
SHT.SrcFxLineInVol="Line-InVol"
SHT.SrcCDSpdifVol="CDSPDIFVol"
SHT.SrcGPSpdifVol="GPSPDIFVol"
SHT.SrcWetMixVol="UHearVol"
SHT.SrcZvAudioLineIn2Vol="I2SIn-LineIn2Vol"
SHT.SrcLineIn2Vol="LineIn2Vol"

;;added for LiveDrive
SHT.SrcZVAudioLineIn2Mic2Vol="I2S-Line2-Mic2Vol"
SHT.SrcLineIn2Mic2Vol="Line2-Mic2Vol"
SHT.SrcGPSpdifAux2Vol="GPSPDIF-Aux2Vol"
SHT.SrcAux2Vol="Aux2Vol"

;; -------------
;; mute controls
;; -------------
SHT.DestPlayMt="PlayMt"
SHT.DestRecMt="RecMt"
SHT.SrcHdPhMt="HPhnMt"
SHT.SrcWaveMt="WaveMt"
SHT.SrcMidiMt="MIDIMt"
SHT.SrcCDAudioMt="CDMt"
SHT.SrcLineInMt="LineMt"
SHT.SrcMicMt="MicMt"
SHT.SrcMic1Mt="HMicMt"
SHT.SrcVideoMt="VideoMt"
SHT.SrcStMixMt="UHearMt"
SHT.SrcPcSpkMt="PSpkMt"
SHT.SrcAuxMt="AuxMt"
SHT.SrcMonoMixMt="MMixMt"
SHT.SrcTelMt="TADMt"
SHT.SrcTelOutMt="PhnMt"
SHT.SrcAc3Mt="DVDMt"
SHT.SrcZvAudioMt="I2SInMt"
SHT.SrcFxLineInMt="Line-InMt"
SHT.SrcCDSpdifMt="CDSPDIFMt"
SHT.SrcGPSpdifMt="GPSPDIFMt"
SHT.SrcWetMixMt="UHearMt"
SHT.SrcZvAudioLineIn2Mt="I2SIn-LineIn2Mt"
SHT.SrcLineIn2Mt="LineIn2Mt"

;;added for LiveDrive
SHT.SrcZVAudioLineIn2Mic2Mt="I2S-Line2-Mic2Mt"
SHT.SrcLineIn2Mic2Mt="Line2-Mic2Mt"
SHT.SrcGPSpdifAux2Mt="GPSPDIF-Aux2Mt"
SHT.SrcAux2Mt="Aux2Mt"

;; -------------
;; Gain controls
;; -------------
SHT.SrcMicBoost="MBoost"
;; -------------
;; Tone controls
;; -------------
SHT.DestEfxFader="FrontRear"
SHT.Bass="Bass"
SHT.Treble="Treble"
SHT.DigitalOut="DigitalOut"
SHT.SrcZvAudioLineIn2Enable="LineIn2"

;;added for LiveDrive
SHT.SrcZVAudioLineIn2Mic2Enable="Line2-Mic2"
SHT.SrcGPSpdifAux2Enable="Aux2"


;; ******************************************************
;; Creative friendly names (non-localizeable)
;; ******************************************************
CardDevName="CardDevName"
MIDIOutDevName="MIDIOutDevName"
MIDIInDevName="MIDIInDevName"
MIDIWTSynthDevName="MIDIWTSynthDevName"
WaveInDevName="WaveInDevName"
WaveOutDevName="WaveOutDevName"
MixerDevName="MixerDevName"
SPDIFWarn="SPDIFWarn"
WaveDS="WaveDS"
DSOutDevName="DSOutDevName"
NoFPU="NoFPU"
OldVMCP="OldVMCP"

Vol="%sVol"
Mute="%sMt"
Select="Select"
3DSE="3DSE"
No3DSE="No3DSE"
BBoost="BBoost"
MicOnly="MicOnly"
Ctr="Ctr"
Dep="Dep"
MBoost="MBoost"
TrebleOff="TrebleOff"
BassOff="BassOff"

WaveSynth="WaveSynth"
WSVol="WSVol"
WSMute="WSMute"
WSRvrbVol="WSRvrbVol"
WSRvrbMute="WSRvrbMute"

EfxDefault="EfxDefault"
EfxReverb="EfxReverb"
EfxRoom1="EfxRoom1"
EfxRoom2="EfxRoom2"
EfxRoom3="EfxRoom3"
EfxHall1="EfxHall1"
EfxHall2="EfxHall2"
EfxPlate="EfxPlate"
EfxDelay="EfxDelay"
EfxPDelay="EfxPDelay"
EfxNoReverb="EfxNoReverb"
EfxChorus="EfxChorus"
EfxChorus1="EfxChorus1"
EfxChorus2="EfxChorus2"
EfxChorus3="EfxChorus3"
EfxChorus4="EfxChorus4"
EfxFBChorus="EfxFBChorus"
EfxFlange="EfxFlange"
EfxSDelay="EfxSDelay"
EfxSDelayFB="EfxSDelayFB"
EfxNoChorus="EfxNoChorus"
EfxBass="EfxBass"
EfxM12="EfxM12"
EfxM10="EfxM10"
EfxM8="EfxM8"
EfxM6="EfxM6"
EfxM4="EfxM4"
EfxM2="EfxM2"
EfxFlat="EfxFlat"
EfxP2="EfxP2"
EfxP4="EfxP4"
EfxP6="EfxP6"
EfxP8="EfxP8"
EfxP10="EfxP10"
EfxP12="EfxP12"
EfxTreble="EfxTreble"
EfxStereoEnh="EfxStereoEnh"
EfxDisable="EfxDisable"
EfxEnable="EfxEnable"
EfxOSound="Original Sound"

; Effect names - Do not localize------------------------------------------;
EfxRoom1Long="Room 1"
EfxRoom2Long="Room 2"
EfxRoom3Long="Room 3"
EfxHall1Long="Hall 1"
EfxHall2Long="Hall 2"
EfxPlateLong="Plate"
EfxDelayLong="Delay"
EfxPDelayLong="Panning Delay"
EfxChorus1Long="Chorus 1"
EfxChorus2Long="Chorus 2"
EfxChorus3Long="Chorus 3"
EfxChorus4Long="Chorus 4"
EfxFBChorusLong="FB Chorus"
EfxFlangeLong="Flange"
EfxSDelayLong="Short Delay"
EfxSDelayFBLong="Short Delay FB"


;Localizable Strings : Not More than 25 Charaters------------------------------------------;

*EMU10K1.DeviceDesc="Creative SB Live! (WDM)"
*EMU10K1V.DeviceDesc="Creative SB Live! Value (WDM)"
*EMU10K1S.DeviceDesc="Creative SB Live! Series (WDM)"
*PCI512.DeviceDesc="Creative Sound Blaster PCI512"
*EMU10K1_512.DeviceDesc="Creative Sound Blaster PCI512(WDM)"
EMU10K1_AUX="Creative inf(WDM)"
PCI512.WAVE_STR="SB PCI512 Wave Device"
PCI512.MIX_STR="SB PCI512 Mixer"
PCI512.UART_STR="SB PCI512 MIDI UART"
PCI512.MIDIWTSynthDevName="SB PCI512 MIDI Synth"
;EMU10K1.AWESyn.szPname="A: SB PCI512 MIDI Synth"
;EMU10K1.AWESyn2.szPname="B: SB PCI512 MIDI Synth"
PCI512.AWESyn.szPname="A: SB PCI512 MIDI Synth"
PCI512.AWESyn2.szPname="B: SB PCI512 MIDI Synth"

PCI512_MIDI="SB PCI512 MIDI Synth"
PCI512_WAVE="SB PCI512 Wave Device"
PCI512_MIXER="SB PCI512 Mixer"
PCI512.DSOutDevName="SB PCI512 DirectSound Driver"

*WDM_SFMAN.DeviceDesc="Creative SoundFont Manager Driver (WDM)"
*WDM_CTLFACE.DeviceDesc="Creative Interface Manager Driver (WDM)"
WAVE_STR="SB Live! Wave Device"
MIX_STR="Creative SB Live! Mixer"
UART_STR="SB Live! MIDI UART"
EMU10K1.MIDIWTSynthDevName="SB Live! MIDI Synth"
EMU10K1.AWESyn.szPname="A: SB Live! MIDI Synth"
EMU10K1.AWESyn2.szPname="B: SB Live! MIDI Synth"
EMU10K1_MIDI="Creative SB Live! MIDI Synth"
EMU10K1_WAVE="Creative SB Live! Wave Device"
EMU10K1_MIXER="Creative SB Live! Mixer"
EMU10K1.DSOutDevName="SB Live! DirectSound Driver"


SPDIFCopyrightViolation="Copyrighted SPDIF will be automatically muted during recording."
NoFPUwarn="Math co-processor is not detected. EMU10K1.VXD cannot be loaded."
OldVMCPwarn="Older version of VMCPD.VXD is detected. EMU10K1.VXD cannot be loaded. Please Restart your system for the new version to take effect."


;; **************************************
;; Creative friendly names (localizeable)
;; **************************************
;; ----------
;; source pin
;; ----------
PIN.HdPh="Headphone"
PIN.Wave="Wave"
PIN.MIDI="MIDI"
PIN.CDAudio="CD Audio"
PIN.LineIn="Line-In"
PIN.Mic="Microphone"
PIN.Mic0="Microphone"
PIN.Mic1="Microphone2 (Headset)"
PIN.Video="Video"
PIN.StMix="Record Master"
PIN.PcSpk="PC Speaker"
PIN.Aux="Auxiliary"
PIN.MonoMix="Mono Mix"
PIN.Tel="TAD-In"
PIN.TelOut="TAD-Out"
PIN.PcmOut="PCM-Out"
PIN.Ac3="DVD"
PIN.ZVAudio="I2S-In (PC-DVD)"
PIN.FxLineIn="Line-In Digital"
PIN.CDSpdif="CD Digital"
PIN.GPSpdif="SPDIF-In"
PIN.WaveDS="Wave"
PIN.WetMix="Record Master"
PIN.ZVAudioLineIn2="I2S-In/Line-In2"
PIN.LineIn2="Line-In2"

;;added for LiveDrive
PIN.ZVAudioLineIn2Mic2="I2S-In/Line-In2/Microphone2"
PIN.LineIn2Mic2="Line-In2/Microphone2"
PIN.GPSpdifAux2="SPDIF-In/Auxiliary2"
PIN.Aux2="Auxiliary2"


;; ---------------
;; destination pin
;; ---------------
PIN.PlayCtrl="Play Control"
PIN.RecCtrl="Record Control"
;; ---------------
;; volume controls
;; ---------------
PIN.DestPlayVol="Play Vol"
PIN.DestRecVol="Record Vol"
PIN.SrcHdPhVol="Headphone Vol"
PIN.SrcWaveVol="Wave Vol"
PIN.SrcMidiVol="MIDI Vol"
PIN.SrcCDAudioVol="CD Audio Vol"
PIN.SrcLineInVol="Line In Vol"
PIN.SrcMicVol="Micphone Vol"
PIN.SrcMic1Vol="Micphone(Headset) Vol"
PIN.SrcVideoVol="Video Vol"
PIN.SrcStMixVol="Record Master Vol"
PIN.SrcPcSpkVol="PC Speaker Vol"
PIN.SrcAuxVol="Auxiliary Vol"
PIN.SrcMonoMixVol="Mono-Mix Vol"
PIN.SrcTelVol="TAD-In Vol"
PIN.SrcTelOutVol="TAD-Out Vol"
PIN.SrcPcmOutVol="PCM-Out Vol"
PIN.SrcAc3Vol="DVD Vol"
PIN.SrcZvAudioVol="I2S-In Vol"
PIN.SrcFxLineInVol="Line-In Digital Vol"
PIN.SrcCDSpdifVol="CD Digital Vol"
PIN.SrcGPSpdifVol="SPDIF-In Vol"
PIN.SrcWetMixVol="Record Master Vol"
PIN.SrcZvAudioLineIn2Vol="I2S-In/Line-In2 Vol"
PIN.SrcLineIn2Vol="Line-In2 Vol"

;;added for LiveDrive
PIN.SrcZVAudioLineIn2Mic2Vol="I2S-In/Line-In2/Microphone2 Vol"
PIN.SrcLineIn2Mic2Vol="Line-In2/Microphone2 Vol"
PIN.SrcGPSpdifAux2Vol="SPDIF-In/Auxiliary2 Vol"
PIN.SrcAux2Vol="Auxiliary2 Vol"


;; -------------
;; mute controls
;; -------------
PIN.DestPlayMt="Play Mute"
PIN.DestRecMt="Record Mute"
PIN.SrcHdPhMt="Headphone Mute"
PIN.SrcWaveMt="Wave Mute"
PIN.SrcMidiMt="MIDI Mute"
PIN.SrcCDAudioMt="CD Audio Mute"
PIN.SrcLineInMt="Line In Mute"
PIN.SrcMicMt="Micphone Mute"
PIN.SrcMic1Mt="Micphone(Headset) Mute"
PIN.SrcVideoMt="Video Mute"
PIN.SrcStMixMt="Record Master Mute"
PIN.SrcPcSpkMt="PC Speaker Mute"
PIN.SrcAuxMt="Auxiliary Mute"
PIN.SrcMonoMixMt="Mono Mix Mute"
PIN.SrcTelMt="TAD-In Mute"
PIN.SrcTelOutMt="TAD-Out Mute"
PIN.SrcPcmOutMt="PCM-Out Mute"
PIN.SrcAc3Mt="DVD Mute"
PIN.SrcZvAudioMt="I2S-In Mute"
PIN.SrcFxLineInMt="Line-In Digital Mute"
PIN.SrcCDSpdifMt="CD Digital Mute"
PIN.SrcGPSpdifMt="SPDIF-In Mute"
PIN.SrcWetMixMt="Record Master Mute"
PIN.SrcZvAudioLineIn2Mt="I2S-In/Line-In2 Mute"
PIN.SrcLineIn2Mt="Line-In2 Mute"

;;added for LiveDrive
PIN.SrcZVAudioLineIn2Mic2Mt="I2S-In/Line-In2/Microphone2 Mute"
PIN.SrcLineIn2Mic2Mt="Line-In2/Microphone2 Mute"
PIN.SrcGPSpdifAux2Mt="SPDIF-In/Auxiliary2 Mute"
PIN.SrcAux2Mt="Auxiliary2 Mute"


;; -------------
;; Gain controls
;; -------------
PIN.SrcMicBoost="Mic Boost (+20dB)"
;; -------------
;; Tone controls
;; -------------
PIN.DestEfxFader="Front Rear Balance"
PIN.Bass="Bass"
PIN.Treble="Treble"
PIN.DigitalOutLong="Digital Output Only"
PIN.SrcZvAudioLineIn2Enable="Enable Line-In2"

;;added for LiveDrive
PIN.SrcZVAudioLineIn2Mic2Enable="Enable Line-In2/Microphone2"
PIN.SrcGPSpdifAux2Enable="Enable Auxiliary2"


VolLong="%s Volume"
MuteLong="%s Mute"
SelectLong="Select"
AGCLong="Automatic Gain Control"
3DSELong="3D Stereo Enhancement"
No3DSELong="Bypass 3D Stereo Enhancement"
GainLong="Gain"
BBoostLong="Bass Boost"
MicOnlyLong="Transmit Microphone Sound Only"
CtrLong="Center Control for 3DSE"
DepLong="Depth Control for 3DSE"
MBoostLong="Mic Boost (20dB)"
TrebleOffLong="Treble Bypass"
BassOffLong="Bass Bypass"

WaveSynthLong="WaveSynth Synthesizer"
WSVolLong="WaveSynth Volume"
WSMuteLong="WaveSynth Mute"
WSRvrbVolLong="WaveSynth Reverb Volume"
WSRvrbMuteLong="WaveSynth Reverb Mute"

EfxDefaultLong="Default Effect"
EfxReverbLong="Reverb"
EfxNoReverbLong="No Reverb"
EfxChorusLong="Chorus"
EfxNoChorusLong="No Chorus"
EfxBassLong="Bass Level"
EfxM12Long="-12dB"
EfxM10Long="-10dB"
EfxM8Long="-8dB"
EfxM6Long="-6dB"
EfxM4Long="-4dB"
EfxM2Long="-2dB"
EfxFlatLong="Flat"
EfxP2Long="+2dB"
EfxP4Long="+4dB"
EfxP6Long="+6dB"
EfxP8Long="+8dB"
EfxP10Long="+10dB"
EfxP12Long="+12dB"
EfxTrebleLong="Treble Level"
EfxStereoEnhLong="Stereo Enhancement"
EfxDisableLong="Disable"
EfxEnableLong="Enable"
EfxOSoundLong="Original Sound"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wave.txt ===
;
; Localizable text.
;
[Strings]
MSFT = "Microsoft"

CTLMfgName = "Creative Technology Ltd."

*PNPB000.Disabled="Sound Blaster 1.x or compatible (Disabled)"
*PNPB001.Disabled="Sound Blaster 2.0 or compatible (Disabled)"
*PNPB002.Disabled="Sound Blaster Pro or compatible (Disabled)"


SBPro.DeviceDesc   ="Sound Blaster 1.X/2.0/Pro"
OPL3.DeviceDesc    ="OPL2/OPL3 FM Synthesis"

StdMfg   = "(Standard system devices)"
MS_MMMCI = "Media Control Devices"
MS_MMVID = "Video Codecs"
MS_MMACM = "Audio Codecs"
MS_MMVCD = "Legacy Video Capture Devices"
MS_MMDRV = "Legacy Audio Drivers"
AudStub  = "Audio Stub Driver"

CompaqMfg="Compaq"
*CPQA0D2.DeviceDesc="Compaq Modem Audio"
*CPQA0D4.DeviceDesc="Compaq Modem Audio"
*CPQA0D6.DeviceDesc="Compaq Presario Bezel Volume Control"
*CPQA0E1.DeviceDesc="Compaq TV Tuner"
*CPQA0E2.DeviceDesc="Compaq TV Tuner"
*CPQA0E4.DeviceDesc="Compaq Modem Audio"

IBMMfg="IBM"
*IBM36E0.DeviceDesc="Mwave DSP Processor"
*IBM36F2.DeviceDesc="Mwave SoundBlaster Compatibility"
*IBM36F1.DeviceDesc="Mwave Midi Synthesizer"

SPSVCINST_ASSOCSERVICE = 0x00000002
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_ali.txt ===
[Strings]
MSFT="Microsoft"
MfgName="Acer Laboratories Inc."
;CLMfgName="Acer Laboratories Inc."
ALiLabs.DeviceDesc="ALi Audio Accelerator WDM driver"
ALiLabs.DeviceDesc.Acer="ALi Audio Accelerator WDM driver (ALi)"
ALiLabs.DeviceDesc.Fujitsu1="ALi Audio Accelerator WDM driver (Fujitsu1)"
ALiLabs.DeviceDesc.Fujitsu2="ALi Audio Accelerator WDM driver (Fujitsu2)"
ALiLabs.DeviceDesc.Toshiba="ALi Audio Accelerator WDM driver(TOSHIBA)"
ALiAudio_Disk="ALi Audio Accelerator WDM driver Disk"
ALiWDM.Wave.szPname="ALi Audio Wave"
ALiWDM.Topology.szPname="ALi Audio Mixer"
ALiWDM.UART.szPname="MPU-401"
ALiWDM.Wavetable.szPname="ALi Wavetable"
MC="SYSTEM\CurrentControlSet\Control\MediaCategories"
NT_Service="SYSTEM\CurrentControlSet\Services\ALiADWDM"
WDM_MIDI="WDM-based Device"
Proxy.CLSID="{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KC_AUDIO="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KC_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KC_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
KC_TOPOLOGY="{DDA54A40-1E4C-11D1-A050-405705C10000}"
Wave="Wave"
UART="UART"
FMSynth="FMSynth"
Topology="Topology"
Wavetable="Wavetable"

GUID.WaveTable		="{BC09A5E0-35B4-11d2-BE7A-0000210155AD}"
Pin.WaveTable		="MIDI"
GUID.LineOut		="{BC09A5E1-35B4-11d2-BE7A-0000210155AD}"
Pin.LineOut		="Line"
GUID.Microphone		="{BC09A5E2-35B4-11d2-BE7A-0000210155AD}"
Pin.Microphone       	="Microphone"
GUID.PcBeep		="{BC09A5E3-35B4-11d2-BE7A-0000210155AD}"
Pin.PcBeep		="PC Beep"
GUID.Video		="{BC09A5E4-35B4-11d2-BE7A-0000210155AD}"
Pin.Video		="Video"
GUID.Phone		="{BC09A5E5-35B4-11d2-BE7A-0000210155AD}"
Pin.Phone		="Phone"
GUID.PCMOut		="{BC09A5E6-35B4-11d2-BE7A-0000210155AD}"
Pin.PCMOut		="PCM Out"
GUID.LineIn		="{BC09A5E7-35B4-11d2-BE7A-0000210155AD}"
Pin.LineIn		="Line In"
GUID.SteroMix		="{BC09A5E8-35B4-11d2-BE7A-0000210155AD}"
Pin.SteroMix		="StereoMix"
GUID.MonoMix		="{BC09A5E9-35B4-11d2-BE7A-0000210155AD}"
Pin.MonoMix		="MonoMix"
GUID.3DControl		="{BC09A5EA-35B4-11d2-BE7A-0000210155AD}"
Pin.3DControl		="3D Control"
GUID.3DDeepth		="{BC09A5EB-35B4-11d2-BE7A-0000210155AD}"
Pin.3DDeepth		="3D Depth"
GUID.I2S		="{BC09A5EC-35B4-11d2-BE7A-0000210155AD}"
Pin.I2S			="I2S"
GUID.SPDIF		="{BC09A5ED-35B4-11d2-BE7A-0000210155AD}"
Pin.SPDIF		="SP/DIF"
GUID.AGC		="{BC09A5EE-35B4-11d2-BE7A-0000210155AD}"
Pin.AGC			="Microphone Boost"
GUID.SURROUND		="{BC09A5EF-35B4-11d2-BE7A-0000210155AD}"
Pin.SURROUND		="Surround"
GUID.RECORDING		="{BC09A5F0-35B4-11d2-BE7A-0000210155AD}"
Pin.RECORDING		="Recording"
GUID.MicSelect		="{E1A24905-B451-4f9c-8BE6-4F10252C80AF}"
Pin.MicSelect		="Alternate Microphone"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_aur.txt ===
[Strings]
MSFT="Microsoft"
AurealMfgName="Aureal, Inc."

*WDM_AU8810.DeviceDesc="Aureal Vortex 8810 Audio (WDM)"
*WDM_AU8820.DeviceDesc="Aureal Vortex 8820 Audio (WDM)"
*WDM_AU8830.DeviceDesc="Aureal Vortex 8830 Audio (WDM)"

wdm_au8810.SvcDesc ="Aureal Vortex 8810 Audio Driver (WDM)"
wdm_au8820.SvcDesc ="Aureal Vortex 8820 Audio Driver (WDM)"
wdm_au8830.SvcDesc ="Aureal Vortex 8830 Audio Driver (WDM)"

AurlAud.Wave.szPname		="Aureal Audio"
AurlAud.Topology.szPname	="Aureal Topology"
WDM.UART.szPname		="Aureal MPU-401"
WDM.WT.szPname			="Aureal Wavetable"

;; Aureal friendly names (non-localizeable)
AURLGUID.WaveOut     ="{62D35A10-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.PcBeep      ="{62D35A11-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Phone       ="{62D35A12-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Mic         ="{62D35A13-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.LineIn      ="{62D35A14-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.CDPlayer    ="{62D35A15-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Video       ="{62D35A16-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Aux         ="{62D35A17-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Wavetable   ="{62D35A18-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.StereoMix   ="{62D35A19-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.MonoMix     ="{62D35A1A-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.LineOut     ="{62D35A1B-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.WaveIn      ="{62D35A1C-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.AC97        ="{62D35A1D-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.MonoOut     ="{62D35A1E-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Spdif       ="{62D35A1F-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Center3D    ="{62D35A20-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Depth3D     ="{62D35A21-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.FrontRear   ="{62D35A22-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.HPOut       ="{62D35A23-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.SpdifOut    ="{62D35A24-E42B-11D1-B073-00608CCBD2F1}"

AURLGUID.WaveOut_Volume        ="{62D35A40-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.WaveOut_Mute          ="{62D35A41-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.PcBeep_Volume         ="{62D35A42-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.PcBeep_Mute           ="{62D35A43-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Phone_Volume          ="{62D35A44-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Phone_Mute            ="{62D35A45-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Mic_Volume            ="{62D35A46-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Mic_Mute              ="{62D35A47-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Mic_20dBGain          ="{62D35A48-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.LineIn_Volume         ="{62D35A49-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.LineIn_Mute           ="{62D35A4A-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.CDPlayer_Volume       ="{62D35A4B-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.CDPlayer_Mute         ="{62D35A4C-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Video_Volume          ="{62D35A4D-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Video_Mute            ="{62D35A4E-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Aux_Volume            ="{62D35A4F-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Aux_Mute              ="{62D35A50-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Wavetable_Volume      ="{62D35A51-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Wavetable_Mute        ="{62D35A52-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.LineOut_Bass          ="{62D35A53-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.LineOut_Treble        ="{62D35A54-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.LineOut_MasterVolume  ="{62D35A55-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.LineOut_MasterMute    ="{62D35A56-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Phone_W_Volume        ="{62D35A57-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Mic_W_Volume          ="{62D35A58-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.LineIn_W_Volume       ="{62D35A59-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.CDPlayer_W_Volume     ="{62D35A5A-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Video_W_Volume        ="{62D35A5B-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Aux_W_Volume          ="{62D35A5C-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Stereomix_W_Volume    ="{62D35A5D-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Monomix_W_Volume      ="{62D35A5E-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.MonoOut_Volume        ="{62D35A5F-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.MonoOut_Mute          ="{62D35A60-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Spdif_Volume          ="{62D35A61-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Spdif_Mute            ="{62D35A62-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Audio_3DCenter_Volume ="{62D35A63-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Audio_3DDepth_Volume  ="{62D35A64-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.FrontBack_Balance     ="{62D35A65-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.HPOut_Volume          ="{62D35A66-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.HPOut_Mute            ="{62D35A67-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.Mic_Select            ="{62D35A68-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.LineOut_Loudness      ="{62D35A69-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.LineOut_3DAudio_OnOff ="{62D35A6A-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.SpdifOut_Volume       ="{62D35A6B-E42B-11D1-B073-00608CCBD2F1}"
AURLGUID.SpdifOut_Mute         ="{62D35A6C-E42B-11D1-B073-00608CCBD2F1}"

;; Aureal friendly names (localizeable)
AURLPin.WaveOut     ="Wave Out"
AURLPin.PcBeep      ="PC Speaker"
AURLPin.Phone       ="Phone"
AURLPin.Mic         ="Microphone"
AURLPin.LineIn      ="Line-In"
AURLPin.CDPlayer    ="CD-ROM"
AURLPin.Video       ="Video"
AURLPin.Aux         ="Auxiliary"
AURLPin.Wavetable   ="Wavetable Synthesizer"
AURLPin.Spdif       ="SP-DIF Input"
AURLPin.StereoMix   ="Stereo Mixer Input"
AURLPin.MonoMix     ="Mono Mixer Input"
AURLPin.LineOut     ="Volume Control"
AURLPin.WaveIn      ="Wave In"
AURLPin.AC97        ="AC97 Controls"
AURLPin.MonoOut     ="Mono Out"
AURLPin.HPOut       ="Headphones Out"
AURLPin.SpdifOut    ="SP-DIF Out"
AURLPin.Center3D    ="3D Center"
AURLPin.Depth3D     ="3D Depth"
AURLPin.FrontRear   ="Front/Rear Control"

AURLPin.WaveOut_Volume        ="Wave Out Volume"
AURLPin.WaveOut_Mute          ="Wave Out Mute"
AURLPin.PcBeep_Volume         ="PC Speaker Volume"
AURLPin.PcBeep_Mute           ="PC Speaker Mute"
AURLPin.Phone_Volume          ="Phone Volume"
AURLPin.Phone_Mute            ="Phone Mute"
AURLPin.Mic_Volume            ="Microphone Volume"
AURLPin.Mic_Select            ="Microphone 1/2 Select"
AURLPin.Mic_Mute              ="Microphone Mute"
AURLPin.Mic_20dBGain          ="Microphone Gain (+20dB)"
AURLPin.LineIn_Volume         ="Line-In Volume"
AURLPin.LineIn_Mute           ="Line-In Mute"
AURLPin.CDPlayer_Volume       ="CD-ROM Volume"
AURLPin.CDPlayer_Mute         ="CD-ROM Mute"
AURLPin.Video_Volume          ="Video Volume"
AURLPin.Video_Mute            ="Video Mute"
AURLPin.Aux_Volume            ="Auxiliary Volume"
AURLPin.Aux_Mute              ="Auxiliary Mute"
AURLPin.Wavetable_Volume      ="Wavetable Synthesizer Volume"
AURLPin.Wavetable_Mute        ="Wavetable Synthesizer Mute"
AURLPin.Spdif_Volume          ="SPDIF Input Volume"
AURLPin.Spdif_Mute            ="SPDIF Input Mute"
AURLPin.LineOut_Bass          ="Bass Control"
AURLPin.LineOut_Treble        ="Treble Control"
AURLPin.LineOut_Loudness      ="Loudness Control"
AURLPin.LineOut_3DAudio_OnOff ="3D Stereo Enhancement"
AURLPin.LineOut_MasterVolume  ="Master Volume"
AURLPin.LineOut_MasterMute    ="Master Mute"
AURLPin.Phone_W_Volume        ="Phone Input Control"
AURLPin.Mic_W_Volume          ="Mic Input Control"
AURLPin.LineIn_W_Volume       ="Line Input Control"
AURLPin.CDPlayer_W_Volume     ="CD-ROM Input Control"
AURLPin.Video_W_Volume        ="Video Input Control"
AURLPin.Aux_W_Volume          ="Auxiliary Input Control"
AURLPin.Stereomix_W_Volume    ="Stereo Mixer Input Control"
AURLPin.Monomix_W_Volume      ="Mono Mixer Input Control"
AURLPin.MonoOut_Volume        ="Mono Out Volume"
AURLPin.MonoOut_Mute          ="Mono Out Mute"
AURLPin.HPOut_Volume          ="Headphones Volume"
AURLPin.HPOut_Mute            ="Headphones Mute"
AURLPin.SpdifOut_Volume       ="SPDIF Out Volume"
AURLPin.SpdifOut_Mute         ="SPDIF Out Mute"
AURLPin.Audio_3DCenter_Volume ="3D Center"
AURLPin.Audio_3DDepth_Volume  ="3D Depth"
AURLPin.FrontBack_Balance     ="Front/Rear Fader"

Proxy.CLSID="{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KSCATEGORY_AUDIO="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCATEGORY_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_DATATRANSFORM="{2EB07EA0-7E70-11D0-A5D6-28DB04C10000}"
KSCATEGORY_SYNTHESIZER="{DFF220F3-F70F-11D0-B917-00A0C9223196}"

KSNAME_Wave="Wave"
KSNAME_UART="Uart"
KSNAME_Topology="Topology"
KSNAME_WT="Wavetable"
KSNAME_DMUSWT="DMusWavetable"

MediaCategories ="SYSTEM\CurrentControlSet\Control\MediaCategories"
RunOnce	="SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce"

EqBandLabels ="31 63 125 250 500 1K 2K 4K 8K 16K"

8810CustomInf		="SYSTEM\CurrentControlSet\Services\wdm_au8810\Customization"
8810SpdifList		="SYSTEM\CurrentControlSet\Services\wdm_au8810\Customization\SpdifEnableList"
8810EqualizerStr	="SYSTEM\CurrentControlSet\Services\wdm_au8810\Equalizer"
8810ControlStr		="SYSTEM\CurrentControlSet\Services\wdm_au8810\ControlPanel"
8810AppEqualizerStr	="SOFTWARE\Aureal\Vortex\AU8810\Equalizer"
8810AppCustomStr	="SOFTWARE\Aureal\Vortex\AU8810\Customization"
8810AppDriverNameStr="SOFTWARE\Aureal\Vortex\AU8810\DriverNames"

8810WtNumVoicesString0 ="256 Voices"
8810WtNumVoicesString1 ="128 Voices"
8810WtNumVoicesString2 ="64 Voices"
8810WtNumVoicesString3 ="32 Voices"

8820CustomInf		="SYSTEM\CurrentControlSet\Services\wdm_au8820\Customization"
8820SpdifList		="SYSTEM\CurrentControlSet\Services\wdm_au8820\Customization\SpdifEnableList"
8820ControlStr		="SYSTEM\CurrentControlSet\Services\wdm_au8820\ControlPanel"
8820InstallStr		="SYSTEM\CurrentControlSet\Services\wdm_au8820\InstallSettings"
8820AppCustomStr	="SOFTWARE\Aureal\Vortex\Customization"
8820AppDriverNameStr="SOFTWARE\Aureal\Vortex\DriverNames"

8820WtNumVoicesString0 ="64 Voice Pro"
8820WtNumVoicesString1 ="64 Voice Gamer"
8820WtNumVoicesString2 ="32 Voice Pro"

8830CustomInf		="SYSTEM\CurrentControlSet\Services\wdm_au8830\Customization"
8830SpdifList		="SYSTEM\CurrentControlSet\Services\wdm_au8830\Customization\SpdifEnableList"
8830EqualizerStr	="SYSTEM\CurrentControlSet\Services\wdm_au8830\Equalizer"
8830ControlStr		="SYSTEM\CurrentControlSet\Services\wdm_au8830\ControlPanel"
8830AppEqualizerStr	="SOFTWARE\Aureal\Vortex\AU8830\Equalizer"
8830AppCustomStr	="SOFTWARE\Aureal\Vortex\AU8830\Customization"
8830AppDriverNameStr="SOFTWARE\Aureal\Vortex\AU8830\DriverNames"

8830WtNumVoicesString0 ="320 Voices"
8830WtNumVoicesString1 ="128 Voices"
8830WtNumVoicesString2 ="64 Voices"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdmaudio.txt ===
[Strings]
;Non-localized strings
;; ???? These keys weren't used anywhere. Delete?
;;KEY_WARNVER="SYSTEM\CurrentControlSet\Control\SessionManager\WarnVerDLLs"
;;KEY_CHKVER="SYSTEM\CurrentControlSet\Control\SessionManager\CheckVerDLLs"
;;KEY_FIL="SYSTEM\CurrentControlSet\Control\MediaResources\FilterList"
KEY_IOC="SYSTEM\CurrentControlSet\Control\MediaResources\InstallOptionalComponents"
MSFT="Microsoft"
MfgName="Microsoft"

RunOnce = "SOFTWARE\Microsoft\Windows\CurrentVersion\RunOnce"
Proxy.CLSID               = "{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KSNAME_Filter             = "{9B365890-165F-11D0-A195-0020AFD156E4}"
KSNAME_DRMKAUD            = "{ABD61E00-9350-47e2-A632-4438B90C6641}"
KSNAME_DMUSIC             = "dmusic"

WDM_SYSAUDIO.DeviceId     = "{A7C7A5B0-5AF3-11D1-9CED-00A024BF0407}"
KSCATEGORY_SYSAUDIO       = "{A7C7A5B1-5AF3-11D1-9CED-00A024BF0407}"

WDM_KMIXER.DeviceId       = "{B7EAFDC0-A680-11D0-96D8-00AA0051E51D}"
KSCATEGORY_MIXER          = "{AD809C00-7B88-11D0-A5D6-28DB04C10000}"

WDM_AEC.DeviceId          = "{4245FF73-1DB4-11d2-86E4-98AE20524153}"
KSCATEGORY_ACOUSTIC_ECHO_CANCEL = "{BF963D80-C559-11D0-8A2B-00A0C9255AC1}"

WDM_SWMIDI.DeviceId       =  "{6C1B9F60-C0A9-11D0-96D8-00AA0051E51D}"
WDM_DMUSIC.DeviceId       =  "{8C07DD50-7A8D-11d2-8F8C-00C04FBF8FEF}"

WDM_DRMKAUD.DeviceId      = "{EEC12DB6-AD9C-4168-8658-B03DAEF417FE}"
KSCATEGORY_DRM_DESCRAMBLE = "{FFBB6E3F-CCFE-4D84-90D9-421418B03A8E}"

KSCATEGORY_DATATRANSFORM  =  "{2EB07EA0-7E70-11D0-A5D6-28DB04C10000}"
KSCATEGORY_SYNTHESIZER    =  "{DFF220F3-F70F-11D0-B917-00A0C9223196}"
KSCATEGORY_AUDIO          =  "{6994AD04-93EF-11D0-A3CC-00A0C9223196}"

WDM_WDMAUD.DeviceId       = "{CD171DE3-69E5-11D2-B56D-0000F8754380}"
KSCATEGORY_WDMAUD         = "{3E227E76-690D-11D2-8161-0000F8775BF1}"

WDM_SPLITTER.DeviceId     = "{2F412AB5-ED3A-4590-AB24-B0CE2AA77D3C}"
KSCATEGORY_AUDIO_SPLITTER = "{9EA331FA-B91B-45F8-9285-BD2BC77AFCDE}"



;Localized strings
MediaClassName="Sound, video and game controllers"
*PNPB006.DeviceDesc = "MPU-401 Compatible MIDI Device"
MS_MPU401="MPU401"
WDM.UART.szPname="MPU-401"
KSNAME_UART="UART"

WDM_SYSAUDIO.DeviceDesc   = "Microsoft Kernel System Audio Device"
WDM_SYSAUDIO.FriendlyName = "Microsoft Kernel System Audio Device"
sysaudio.SvcDesc          = "Microsoft Kernel System Audio Device"

WDM_KMIXER.DeviceDesc     = "Microsoft Kernel Wave Audio Mixer"
WDM_KMIXER.FriendlyName   = "Microsoft Kernel Wave Audio Mixer"
kmixer.SvcDesc            = "Microsoft Kernel Wave Audio Mixer"

WDM_DRMKAUD.DeviceDesc    = "Microsoft Kernel DRM Audio Descrambler"
WDM_DRMKAUD.FriendlyName  = "Microsoft Kernel DRM Audio Descrambler"
drmkaud.SvcDesc           = "Microsoft Kernel DRM Audio Descrambler"

WDM_AEC.DeviceDesc        = "Microsoft Kernel Acoustic Echo Canceller"
WDM_AEC.FriendlyName      = "Microsoft Kernel Acoustic Echo Canceller"
aec.SvcDesc               = "Microsoft Kernel Acoustic Echo Canceller"

WDM_SWMIDI.DeviceDesc     = "Microsoft Kernel GS Wavetable Synthesizer"
WDM_SWMIDI.FriendlyName   = "Microsoft Kernel GS Wavetable Synthesizer"
swmidi.SvcDesc            = "Microsoft Kernel GS Wavetable Synthesizer"

WDM_DMUSIC.DeviceDesc     = "Microsoft Kernel DLS Synthesizer"
WDM_DMUSIC.FriendlyName   = "Microsoft Kernel DLS Synthesizer"
WDM_DMUSIC.SvcDesc        = "Microsoft Kernel DLS Syntheiszer"

WDM_WDMAUD.DeviceDesc     = "Microsoft WINMM WDM Audio Compatibility Driver"
WDM_WDMAUD.FriendlyName   = "Microsoft WINMM WDM Audio Compatibility Driver"
wdmaud.SvcDesc            = "Microsoft WINMM WDM Audio Compatibility Driver"

WDM_SPLITTER.DeviceDesc   = "Microsoft Kernel Audio Splitter"
WDM_SPLITTER.FriendlyName = "Microsoft Kernel Audio Splitter"
splitter.SvcDesc          = "Microsoft Kernel Audio Splitter"

ms_mpu401.SvcDesc         = "Microsoft MPU-401 MIDI UART Driver"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_azt.txt ===
[Strings]
MSFT="Microsoft"
AZTMfgName="Aztech Systems"
*AZT2320_AUDIO.DeviceDesc="Aztech 2320 Compatible PnP Audio (WDM)"
*Aztech_Stub.DeviceDesc="Reserved Device"
WDM_AZT.Wave.szPname="Aztech Audio"
WDM_AZT.Topology.szPname="Aztech"
;; Aztech friendly names (non-localizeable)
AZTGUID.Master      ="{2AF31CA0-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.FMSynth     ="{2AF31CA1-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.AnalogCD    ="{2AF31CA2-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.LineIn      ="{2AF31CA3-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.MicMdmIn    ="{2AF31CA4-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.MicBoost    ="{2AF31CA5-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.WStereo     ="{2AF31CA6-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.MicMonitor  ="{2AF31CA7-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.SpeakerOff  ="{2AF31CA8-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.ConvRecord  ="{2AF31CA9-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.MixRecord   ="{2AF31CAA-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.PSTN        ="{2AF31CAB-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.Depth3D     ="{2AF31CAC-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.Radio       ="{2AF31CAD-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.WTSynth     ="{2AF31CAE-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.WGSynth     ="{2AF31CAF-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.SWTSynth    ="{2AF31CB0-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.Videophone  ="{2AF31CB1-3E4B-11d1-B8AF-00C04FBBEE4D}"

AZTGUID.AC97_Master     ="{2AF31CC0-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.AC97_FMSynth    ="{2AF31CC1-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.AC97_PcBeep     ="{2AF31CC2-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.AC97_ModemIn    ="{2AF31CC3-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.AC97_Mic        ="{2AF31CC4-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.AC97_Mic20dB    ="{2AF31CC5-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.AC97_LineIn     ="{2AF31CC6-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.AC97_CD         ="{2AF31CC7-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.AC97_Video      ="{2AF31CC8-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.AC97_Aux        ="{2AF31CC9-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.AC97_MonoMix    ="{2AF31CCA-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.AC97_StereoMix  ="{2AF31CCB-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.AC97_3DVol      ="{2AF31CCC-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.AC97_ModemOut   ="{2AF31CCD-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.AC97_3DHiFiMode ="{2AF31CCE-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.AC97_MonoOutMic ="{2AF31CCF-3E4B-11d1-B8AF-00C04FBBEE4D}"
AZTGUID.AC97_WaveIn     ="{2AF31CD0-3E4B-11d1-B8AF-00C04FBBEE4D}"

;; Aztech friendly names (localizeable)
AZTPin.Master       ="Volume Control"
AZTPin.FMSynth      ="MIDI"
AZTPin.AnalogCD     ="CD"
AZTPin.LineIn       ="Line In"
AZTPin.MicMdmIn     ="Mic (Modem)"
AZTPin.MicBoost     ="+20dB Gain"
AZTPin.WStereo      ="Wide Angle Stereo"
AZTPin.MicMonitor   ="Mic Monitoring"
AZTPin.SpeakerOff   ="Speaker Off"
AZTPin.ConvRecord   ="Conv. Record"
AZTPin.MixRecord    ="Mix-Record"
AZTPin.PSTN         ="Telephony"
AZTPin.Depth3D      ="3D Depth"
AZTPin.Radio        ="Radio"
AZTPin.WTSynth      ="WT Synth"
AZTPin.WGSynth      ="WG Synth"
AZTPin.SWTSynth     ="Soft Synth"
AZTPin.Videophone   ="Videophone"
AZTPin.AC97_Master     ="Volume Control"
AZTPin.AC97_FMSynth    ="MIDI"
AZTPin.AC97_PcBeep     ="PC Beep"
AZTPin.AC97_ModemIn    ="Modem In"
AZTPin.AC97_Mic        ="Microphone"
AZTPin.AC97_Mic20dB    ="+20dB Gain Mic Playback/Record"
AZTPin.AC97_LineIn     ="Line In"
AZTPin.AC97_CD         ="CD Audio"
AZTPin.AC97_Video      ="Video"
AZTPin.AC97_Aux        ="Auxiliary"
AZTPin.AC97_MonoMix    ="Mix Mono"
AZTPin.AC97_StereoMix  ="Mix Stereo"
AZTPin.AC97_3DVol      ="3D Control"
AZTPin.AC97_ModemOut   ="Modem Out"
AZTPin.AC97_3DHiFiMode ="Enable 3D Hi-Fi (Disable 3D Std)"
AZTPin.AC97_MonoOutMic ="Enable Mic Out (Disable Mix Out)"
AZTPin.AC97_WaveIn     ="Recording Control"

*MS.MPU401.DeviceDesc="Microsoft MPU Audio Driver(WDM)"

MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"
WDM_MIDI="WDM-based Device"
Proxy.CLSID="{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KSCATEGORY_AUDIO="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCATEGORY_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
KSNAME_Wave="Wave"
KSNAME_UART="UART"
KSNAME_FMSynth="FMSynth"
KSNAME_Topology="Topology"
KSNAME_Wavetable="Wavetable"

WDM.UART.szPname="Aztech MPU-401"
WDM.FMSynth.szPname="Aztech FM Synthesizer"

azt2320.SvcDesc = "Aztech 2320 Audio Driver (WDM)"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_avc.txt ===
[Strings]
MSFT="Microsoft"
MfgName="(Generic 1394 Audio)"

WDM_MIDI="WDM MIDI Device"

1394GenericDesc="1394 Audio Device"

Microsoft.Mfg="Microsoft Corp"
AVC\TYP_1="AV/C Audio Class Device"
AVC\VEN_80028&MOD_0&TYP_1="Microsoft Virtual AV/C Audio"
VAVC\VEN_50F2&MOD_0&TYP_1="Virtual 1394 Audio Device"

Pavo.Mfg="Pavo, Inc."
AVC\PAVO__INC.&PAPAYA_C_V0.93="Pavo Papaya 1394 Audio"

Sony.Mfg="Sony Corp"
AVC\Sony&STR-LSA1&TYP_1&ID_0="Sony STR-LSA1 1394 Audio"

Philips.Mfg="Philips"
AVC\PHILIPS&MLAN_DEMO_BOARD="Philips mLan Eval"

Yamaha.Mfg="Yamaha"
AVC\YAMAHA&MLAN-EVA&TYP_1C&ID_0="Yamaha mLan Eval"

SoftAcoustik.Mfg="SoftAcoustik"
AVC\SoftAcoustik&SA_2.0&TYP_1&ID_0="SoftAcoustik 1394 Speaker"

MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"
1394Flags="SYSTEM\CurrentControlSet\Control\1394Flags"

;; 1394 Friendly Names (Non-localized>
AvcGUID.BassBoost    = "{1A71EBE0-959E-11D1-B448-00A0C9255AC1}"
AvcGUID.StereoExtend = "{FD4F0300-9632-11D1-B448-00A0C9255AC1}"

;; 1394 Friendly Names (localized>
AvcNode.BassBoost    = "Bass Boost"
AvcNode.StereoExtend = "Stereo Extender"

AvcAudio.SvcDesc="1394 Audio Driver (WDM)"

Proxy.CLSID = "{17CCA71B-ECD7-11D0-B908-00A0C9223196}"

VirtualAvc.Device="Virtual Device"

KSCATEGORY_AUDIO="{6994ad04-93ef-11d0-a3cc-00a0c9223196}"
KSCATEGORY_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_csc.txt ===
[Strings]
MSFT="Microsoft"
CSMfgName="Crystal Semiconductor"
*CSC0100.DeviceDesc="Crystal WDM Audio Codec"
*CSC0102.DeviceDesc="Crystal WDM Audio Control Registers"
*CSC0103.DeviceDesc="Crystal WDM MPU-401 Compatible"
*CSC010F.DeviceDesc="Disabled Device"
CSCAud.Wave.szPname="Crystal WDM Audio"
CSCAud.Topology.szPname="Crystal WDM Audio"

;; Crystal friendly names (non-localizeable)
CSCGUID.Kmixer          ="{A614DD20-4F9D-11D1-9845-00A024C0C62C}"
CSCGUID.Serial          ="{A614DD21-4F9D-11D1-9845-00A024C0C62C}"
CSCGUID.SRS             ="{A614DD22-4F9D-11D1-9845-00A024C0C62C}"
CSCGUID.QSound          ="{A614DD23-4F9D-11D1-9845-00A024C0C62C}"
CSCGUID.Crystal3D       ="{A614DD24-4F9D-11D1-9845-00A024C0C62C}"
CSCGUID.Mono            ="{A614DD25-4F9D-11D1-9845-00A024C0C62C}"
CSCGUID.Mic             ="{A614DD26-4F9D-11D1-9845-00A024C0C62C}"
CSCGUID.Linein          ="{A614DD27-4F9D-11D1-9845-00A024C0C62C}"
CSCGUID.CD              ="{A614DD28-4F9D-11D1-9845-00A024C0C62C}"
CSCGUID.Synth           ="{A614DD29-4F9D-11D1-9845-00A024C0C62C}"
CSCGUID.Wave            ="{A614DD2A-4F9D-11D1-9845-00A024C0C62C}"
CSCGUID.ZVPort          ="{A614DD2B-4F9D-11D1-9845-00A024C0C62C}"
CSCGUID.DAC2            ="{A614DD2C-4F9D-11D1-9845-00A024C0C62C}"
CSCGUID.VirtualControls ="{A614DD2D-4F9D-11D1-9845-00A024C0C62C}"
CSCGUID.SynthMute       ="{A614DD2E-4F9D-11D1-9845-00A024C0C62C}"
CSCGUID.DSPMute         ="{A614DD2F-4F9D-11D1-9845-00A024C0C62C}"
CSCGUID.KMixerMute      ="{A614DD30-4F9D-11D1-9845-00A024C0C62C}"
CSCGUID.Mix             ="{A614DD31-4F9D-11D1-9845-00A024C0C62C}"
CSCGUID.SRSCenter       ="{A614DD32-4F9D-11D1-9845-00A024C0C62C}"
CSCGUID.SRSSpace        ="{A614DD33-4F9D-11D1-9845-00A024C0C62C}"
CSCGUID.QSoundSpace     ="{A614DD34-4F9D-11D1-9845-00A024C0C62C}"

CSCGUID.Playback        ="{0CB926A0-4FC4-11D1-9845-00A024C0C62C}"
CSCGUID.MasterOut       ="{0CB926A1-4FC4-11D1-9845-00A024C0C62C}"
CSCGUID.Record          ="{0CB926A2-4FC4-11D1-9845-00A024C0C62C}"

CSCGUID.PcSpeaker       ="{39596800-4FC4-11D1-9845-00A024C0C62C}"
CSCGUID.Headphones      ="{39596801-4FC4-11D1-9845-00A024C0C62C}"
CSCGUID.MicBoost        ="{39596802-4FC4-11D1-9845-00A024C0C62C}"
CSCGUID.ZVPortEnable    ="{39596803-4FC4-11D1-9845-00A024C0C62C}"

CSCGUID.Enable          ="{EBA70C00-4FC5-11D1-9845-00A024C0C62C}"
CSCGUID.Disable         ="{EBA70C01-4FC5-11D1-9845-00A024C0C62C}"

;; Crystal friendly names (localizeable)
CSCPin.Kmixer           ="Digital"
CSCPin.Serial           ="Serial"
CSCPin.SRS              ="SRS"
CSCPin.Qsound           ="QSound"
CSCPin.Crystal3D        ="Crystal3D"
CSCPin.Mono             ="Mono"
CSCPin.Mic              ="Microphone"
CSCPin.LineIn           ="Line"
CSCPin.CD               ="CD"
CSCPin.Synth            ="Synth"
CSCPin.Wave             ="Wave Out"
CSCPin.ZVPort           ="ZVPORT"
CSCPin.DAC2             ="DAC2"
CSCPin.VirtualControls  ="Virtual Controls"
CSCPin.SynthMute        ="Synth Mute"
CSCPin.DSPMute          ="DSP Mute"
CSCPin.KMixerMute       ="Digital Mute"
CSCPin.Mix              ="Mix"
CSCPin.SRSCenter        ="SRS Center"
CSCPin.SRSSpace         ="SRS Space"
CSCPin.QSoundSpace      ="QSound Space"

CSCPin.Playback         ="Crystal Audio"
CSCPin.MasterOut        ="Master Out"
CSCPin.Record           ="Crystal Audio Record"

CSCPin.PcSpeaker        ="PC Speaker"
CSCPin.Headphones       ="Headphones"
CSCPin.MicBoost         ="+20dB Gain"
CSCPin.ZVPortEnable     ="ZVPORT"

CSCPin.Enable           ="Enable"
CSCPin.Disable          ="Disable"

MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"
WDM_MIDI="WDM-based Device"
Proxy.CLSID="{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KSCATEGORY_AUDIO="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCATEGORY_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
KSNAME_Wave="Wave"
KSNAME_UART="UART"
KSNAME_FMSynth="FMSynth"
KSNAME_Topology="Topology"
KSNAME_Wavetable="Wavetable"

WDM.UART.szPname="Crystal MPU-401"
WDM.FMSynth.szPname="Crystal FM Synthesizer"

CSC0100_device.SvcDesc = "Crystal WDM Audio Codec Driver"
CSC0103_device.SvcDesc = "Crystal WDM MPU-401 UART Driver"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_ctl.txt ===
[Strings]
MSFT="Microsoft"
CLMfgName="Creative Technology Ltd."
*WDMPNPB003.DeviceDesc="Sound Blaster 16 or AWE32 or compatible (WDM)"
*WDM_SB16.DeviceDesc="Creative Sound Blaster 16 Plug and Play (WDM)"
*WDM_SB64.DeviceDesc="Creative AWE64 16-bit Audio (SB16 compatible) (WDM)"
*WDM_SB64C.DeviceDesc="Creative AWE64-Compatible 16-bit Audio (SB16 compatible) (WDM)"
*WDM_SB64G.DeviceDesc="Creative AWE64 Gold 16-bit Audio (SB16 compatible) (WDM)"
*WDM_AWE32.DeviceDesc="Creative Advanced Wave Effects Synthesis for AWE32 Plug and Play (WDM)"
*WDM_AWE64.DeviceDesc="Creative AWE64 Wavetable MIDI (AWE32 compatible) (WDM)"
*WDM_AWE64G.DeviceDesc="Creative AWE64 Gold Wavetable MIDI (AWE32 compatible) (WDM)"
*WDM_AWE64C.DeviceDesc="Creative AWE64-Compatible Wavetable MIDI (AWE32 compatible) (WDM)"
*WDM_AWE32L.DeviceDesc="Creative Advanced Wave Effects Synthesis for AWE32 (WDM)"
*CTL0051.DeviceDesc = "Creative 3D Stereo Enhancement Technology (WDM)"
*CTL7FFF.DeviceDesc = "Creative Plug and Play Device (Reserved) (inactive)"
SBAWE_Virtual_Mpu.DeviceDesc="Creative SBAWE MPU401 Emulation (inactive)"
WDM_SB16.Wave.szPname="Sound Blaster 16"
WDM_SB16.Topology.szPname="Sound Blaster 16"
WDM_SB64.Wave.szPname="Sound Blaster AWE64"
WDM_SB64.Topology.szPname="Sound Blaster AWE64"
WDM_SB64C.Wave.szPname="Sound Blaster AWE64"
WDM_SB64C.Topology.szPname="Sound Blaster AWE64"
WDM_SB64G.Wave.szPname="Sound Blaster AWE64 Gold"
WDM_SB64G.Topology.szPname="Sound Blaster AWE64 Gold"

CreativeTech="SOFTWARE\Creative Tech"
MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"
WDM_MIDI="WDM-based Device"
WDM_AUX="Creative WDM-based AUX Device"
WDM_AWE32_MIDI="Creative Advanced Wave Effects Synthesis for AWE32 Plug and Play (WDM)"
WDM_AWE64_MIDI="Creative AWE64 Wavetable MIDI (AWE32 compatible) (WDM)"
WDM_AWE64G_MIDI="Creative AWE64 Gold Wavetable MIDI (AWE32 compatible) (WDM)"
WDM_AWE64C_MIDI="Creative AWE64-Compatible Wavetable MIDI (AWE32 compatible) (WDM)"
WDM_AWE32L_MIDI="Creative Advanced Wave Effects Synthesis for AWE32 (WDM)"

Proxy.CLSID="{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KSCATEGORY_AUDIO="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCATEGORY_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"

KSNAME_Wave="Wave"
KSNAME_UART="UART"
KSNAME_FMSynth="FMSynth"
KSNAME_Topology="Topology"
KSNAME_Wavetable="Wavetable"
KSNAME_AWESynth="AWESynth"

WDM.UART.szPname="Creative MPU-401"
WDM.FMSynth.szPname="Creative FM Synthesizer"
WDM.AWE32Synth.szPname="SB AWE32 MIDI Synth"
WDM.AWE64Synth.szPname="AWE64 MIDI Synth"
WDM.AWE64GSynth.szPname="AWE64G MIDI Synth"
WDM.AWE64CSynth.szPname="AWE64 MIDI Synth"
WDM.AWE32LSynth.szPname="SB AWE32 MIDI Synth"

sndblst.SvcDesc = "Creative SB16/AWE32/AWE64 Driver (WDM)"

;; Creative friendly names (non-localizable)
; sources
CTLGUID.Wave="{7F7DB221-3FF0-11d1-B932-00C04FBF8046}"
CTLGUID.MIDI="{7F7DB222-3FF0-11d1-B932-00C04FBF8046}"
CTLGUID.CDAudio="{7F7DB223-3FF0-11d1-B932-00C04FBF8046}"
CTLGUID.LineIn="{7F7DB224-3FF0-11d1-B932-00C04FBF8046}"
CTLGUID.Microphone="{7F7DB225-3FF0-11d1-B932-00C04FBF8046}"
CTLGUID.PcSpeaker="{7F7DB226-3FF0-11d1-B932-00C04FBF8046}"
CTLGUID.Auxiliary="{7F7DB227-3FF0-11d1-B932-00C04FBF8046}"
; destinations
CTLGUID.VolumeControl="{7F7DB228-3FF0-11d1-B932-00C04FBF8046}"
CTLGUID.RecordingControl="{7F7DB229-3FF0-11d1-B932-00C04FBF8046}"
; volume controls
CTLGUID.WaveVolume="{541EE3E1-B540-11d1-A0FC-00C04FBF8046}"
CTLGUID.MIDIVolume="{541EE3E2-B540-11d1-A0FC-00C04FBF8046}"
CTLGUID.CDAudioVolume="{541EE3E3-B540-11d1-A0FC-00C04FBF8046}"
CTLGUID.LineInVolume="{541EE3E4-B540-11d1-A0FC-00C04FBF8046}"
CTLGUID.MicrophoneVolume="{541EE3E5-B540-11d1-A0FC-00C04FBF8046}"
CTLGUID.PcSpeakerVolume="{541EE3E6-B540-11d1-A0FC-00C04FBF8046}"
CTLGUID.AuxiliaryVolume="{541EE3E7-B540-11d1-A0FC-00C04FBF8046}"
CTLGUID.MasterVolume="{541EE3E8-B540-11d1-A0FC-00C04FBF8046}"
CTLGUID.MasterRecordVolume="{541EE3E9-B540-11d1-A0FC-00C04FBF8046}"
; input controls
CTLGUID.WaveInputMute="{332ACE01-B541-11d1-A0FC-00C04FBF8046}"
CTLGUID.MIDIInputMute="{332ACE02-B541-11d1-A0FC-00C04FBF8046}"
CTLGUID.CDAudioInputMute="{332ACE03-B541-11d1-A0FC-00C04FBF8046}"
CTLGUID.LineInInputMute="{332ACE04-B541-11d1-A0FC-00C04FBF8046}"
CTLGUID.MicrophoneInputMute="{332ACE05-B541-11d1-A0FC-00C04FBF8046}"
CTLGUID.PcSpeakerInputMute="{332ACE06-B541-11d1-A0FC-00C04FBF8046}"
CTLGUID.AuxiliaryInputMute="{332ACE07-B541-11d1-A0FC-00C04FBF8046}"
CTLGUID.MasterRecordMute="{332ACE08-B541-11d1-A0FC-00C04FBF8046}"
; output controls
CTLGUID.WaveOutputMute="{7FF947C1-B541-11d1-A0FC-00C04FBF8046}"
CTLGUID.MIDIOutputMute="{7FF947C2-B541-11d1-A0FC-00C04FBF8046}"
CTLGUID.CDAudioOutputMute="{7FF947C3-B541-11d1-A0FC-00C04FBF8046}"
CTLGUID.LineInOutputMute="{7FF947C4-B541-11d1-A0FC-00C04FBF8046}"
CTLGUID.MicrophoneOutputMute="{7FF947C5-B541-11d1-A0FC-00C04FBF8046}"
CTLGUID.PcSpeakerOutputMute="{7FF947C6-B541-11d1-A0FC-00C04FBF8046}"
CTLGUID.AuxiliaryOutputMute="{7FF947C7-B541-11d1-A0FC-00C04FBF8046}"
CTLGUID.MasterMute="{7FF947C8-B541-11d1-A0FC-00C04FBF8046}"
; miscellaneous controls
CTLGUID.MasterTreble="{58FE8801-B542-11d1-A0FC-00C04FBF8046}"
CTLGUID.MasterBass="{58FE8802-B542-11d1-A0FC-00C04FBF8046}"
CTLGUID.OutputGain="{58FE8803-B542-11d1-A0FC-00C04FBF8046}"
CTLGUID.InputGain="{58FE8804-B542-11d1-A0FC-00C04FBF8046}"
CTLGUID.StereoEnhancement="{58FE8805-B542-11d1-A0FC-00C04FBF8046}"
CTLGUID.MicrophoneGainControl="{58FE8806-B542-11d1-A0FC-00C04FBF8046}"
CTLGUID.OutputSum="{58FE8807-B542-11d1-A0FC-00C04FBF8046}"
CTLGUID.InputSum="{58FE8808-B542-11d1-A0FC-00C04FBF8046}"

;; Creative friendly names (localizeable)
; sources
CTLPin.Wave="Wave"
CTLPin.MIDI="MIDI"
CTLPin.CDAudio="CD Audio"
CTLPin.LineIn="Line-In"
CTLPin.Microphone="Microphone"
CTLPin.PcSpeaker="PC Speaker"
CTLPin.Auxiliary="Auxiliary"
; destinations
CTLPin.VolumeControl="Volume Control"
CTLPin.RecordingControl="Recording Control"
; volume controls
CTLNode.WaveVolume="Wave Volume"
CTLNode.MIDIVolume="MIDI Volume"
CTLNode.CDAudioVolume="CD Audio Volume"
CTLNode.LineInVolume="Line-In Volume"
CTLNode.MicrophoneVolume="Microphone Volume"
CTLNode.PcSpeakerVolume="PC Speaker Volume"
CTLNode.AuxiliaryVolume="Auxiliary Volume"
CTLNode.MasterVolume="Master Volume"
CTLNode.MasterRecordVolume="Master Record Volume"
; input controls
CTLNode.WaveInputMute="Wave Input Mute"
CTLNode.MIDIInputMute="MIDI Input Mute"
CTLNode.CDAudioInputMute="CD Audio Input Mute"
CTLNode.LineInInputMute="Line-In Input Mute"
CTLNode.MicrophoneInputMute="Microphone Input Mute"
CTLNode.PcSpeakerInputMute="PC Speaker Input Mute"
CTLNode.AuxiliaryInputMute="Auxiliary Input Mute"
CTLNode.MasterRecordMute="Master Record Mute"
; output controls
CTLNode.WaveOutputMute="Wave Output Mute"
CTLNode.MIDIOutputMute="MIDI Output Mute"
CTLNode.CDAudioOutputMute="CD Audio Output Mute"
CTLNode.LineInOutputMute="Line-In Output Mute"
CTLNode.MicrophoneOutputMute="Microphone Output Mute"
CTLNode.PcSpeakerOutputMute="PC Speaker Output Mute"
CTLNode.AuxiliaryOutputMute="Auxiliary Output Mute"
CTLNode.MasterMute="Master Mute"
; miscellaneous controls
CTLNode.MasterTreble="Master Treble"
CTLNode.MasterBass="Master Bass"
CTLNode.OutputGain="Output Gain"
CTLNode.InputGain="Input Gain"
CTLNode.StereoEnhancement="3D Stereo Enhancement"
CTLNode.MicrophoneGainControl="Microphone Gain Control"
CTLNode.OutputSum="Output Sum"
CTLNode.InputSum="Input Sum"

;; Creative mixer short names (non-localizeable)
; sources
CTLPin.Wave.SN="Wave"
CTLPin.MIDI.SN="Midi"
CTLPin.CDAudio.SN="CD"
CTLPin.LineIn.SN="Line"
CTLPin.Microphone.SN="Mic"
CTLPin.PcSpeaker.SN="PSpk"
CTLPin.Auxiliary.SN="Aux"
; destinations
CTLPin.VolumeControl.SN="Vol"
CTLPin.RecordingControl.SN="Rec"
; miscellaneous controls
CTLNode.MasterTreble.SN="Treble"
CTLNode.MasterBass.SN="Bass"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_csf.txt ===
[Strings]
MSFT="Microsoft"
CSMfgName="Crystal Semiconductor"
cwcclyde.DeviceDesc="Crystal SoundFusion(tm)"
cwcspud.DeviceDesc="Crystal SoundFusion(tm) Audio Device"
cwcwdm.DeviceDesc="Crystal SoundFusion(tm) WDM Interface"
cwcgame.DeviceDesc="Crystal SoundFusion(tm) Game Port"
CSCAud.SPuD.szPname="Crystal SoundFusion(tm) SPuD"
cwcspud3.DeviceDesc="Crystal SoundFusion(tm) SPuD3 Interface"
UnsupportedDev.DeviceDesc="Unsupported customized Crystal Sound Fusion Audio device"
;
; Guids
; 
MSKSCATEGORY_AUDIO      ="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
MSKSCATEGORY_RENDER     ="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
MSKSCATEGORY_CAPTURE    ="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
MSProxy.CLSID           ="{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
Proxy.CLSID            = "{17CCA71B-ECD7-11D0-B908-00A0C9223196}"

MSGuid.MonoOut          ="{F9B41DC3-96E2-11d2-AC4C-00C04F8EFB68}"
MSGuid.StereoMix        ="{00DFF077-96E3-11d2-AC4C-00C04F8EFB68}"
MSGuid.MonoMix          ="{00DFF078-96E3-11d2-AC4C-00C04F8EFB68}"
MSGuid.Video            ="{915DAEC4-A434-11d2-AC52-00C04F8EFB68}"

MSGuid.MonoOutVolume    ="{1AD247EB-96E3-11d2-AC4C-00C04F8EFB68}"
MSGuid.MonoOutMute      ="{1AD247EC-96E3-11d2-AC4C-00C04F8EFB68}"
MSGuid.StereoMixVolume  ="{1AD247ED-96E3-11d2-AC4C-00C04F8EFB68}"
MSGuid.MonoMixVolume    ="{22B0EAFE-96E3-11d2-AC4C-00C04F8EFB68}"
MSGuid.MicBoost         ="{2BC31D6A-96E3-11d2-AC4C-00C04F8EFB68}"
MSGuid.AltMic           ="{2BC31D6B-96E3-11d2-AC4C-00C04F8EFB68}"
MSGuid.VideoVolume      ="{9B46E708-992A-11d2-AC4D-00C04F8EFB68}"
MSGuid.VideoMute        ="{9B46E709-992A-11d2-AC4D-00C04F8EFB68}"

CSCGuid.PhoneVolume     ="{307E1008-9035-11d2-99D6-00600893863B}"
CSCGuid.PhoneMute       ="{307E1009-9035-11d2-99D6-00600893863B}"
CSCGuid.BeepVolume      ="{307E100a-9035-11d2-99D6-00600893863B}"
CSCGuid.BeepMute        ="{307E100b-9035-11d2-99D6-00600893863B}"
CSCGuid.HPhoneVolume    ="{307E100c-9035-11d2-99D6-00600893863B}"
CSCGuid.HPhoneMute      ="{307E100d-9035-11d2-99D6-00600893863B}"
CSCGuid.ZVPORT          ="{098F7443-75BC-11d2-AA2E-3078302C2030}"

;
; The strings cannot be longer than 31 characters.
;
CSCAud.Wave.szPname="Crystal SoundFusion(tm)"
CSCAud.Topology.szPname="SoundFusion(tm) Mixer"
CSCAud.UART.szPname="SoundFusion(tm) External MIDI"
CSCAud.Wavetable.szPname="SoundFusion HW Wavetable Synth"

MSNode.MonoOutVolume    ="Mono Out Volume"
MSNode.MonoOutMute      ="Mono Out Mute"
MSNode.StereoMixVolume  ="Stereo Mix Volume"
MSNode.MonoMixVolume    ="Mono Mix Volume"
MSNode.VideoVolume      ="Video Volume"
MSNode.VideoMute        ="Video Mute"

CSCPin.ZVPORT           ="ZV Port"
CSCNode.PhoneVolume     ="Phone Volume"
CSCNode.PhoneMute       ="Phone Mute"
CSCNode.BeepVolume      ="Beep Volume"
CSCNode.BeepMute        ="Beep Mute"
CSCNode.HPhoneVolume    ="Headphones Volume"
CSCNode.HPhoneMute      ="Headphones Mute"


;
; MS Localized Friendly Names (DO NOT ADD!)
;
MSPin.MonoOut           ="Mono Out"
MSPin.StereoMix         ="Stereo Mix"
MSPin.MonoMix           ="Mono Mix"
MSPin.Video             ="Video"

MSNode.MicBoost         ="Microphone Boost (+20dB)"
MSNode.AltMic           ="Alternate Microphone"


MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"
KSNAME_Wave="Wave"
KSNAME_UART="UART"
KSNAME_Topology="Topology"
KSNAME_Wavetable="WAVETABLE"

KEY_BASE="SYSTEM\CurrentControlSet\Services\cwcspud\CS461x"
KEY_EQ="SYSTEM\CurrentControlSet\Services\cwcspud\CS461x\Algorithms\Equalization"
KEY_RUN="SOFTWARE\Microsoft\Windows\CurrentVersion\Run"
CRYSTAL_SPUD_GUID = "{C84710EC-F725-11d1-94BA-00C04FBF8E70}"
CRYSTAL_SPuD="SPuD"
CRYSTAL_SPUD3_GUID = "{C84710ED-F725-11D1-94BA-00C04FBF8E70}"
CRYSTAL_SPUD3="SPuD3"


;
; These strings are not displayed anywhere.  They are only used in the registry
; for a service description.
;
cwcspud.SvcDesc = "Crystal SoundFusion(tm) Driver"
cwcwdm.SvcDesc  = "Crystal SoundFusion(tm) WDM Driver"
cwcgame.SvcDesc = "Crystal SoundFusion(tm) Game Port"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_cwr.txt ===
[Strings]
MSFT="Microsoft"
CSMfgName="Crystal Semiconductor Corporation"
cwrwdm.DeviceDesc="Crystal SoundFusion(tm) CS4281 WDM Audio"
cwrgame.DeviceDesc="Crystal SoundFusion(tm) CS4281 Joystick"

;
; Guids
; 
KSCATEGORY_AUDIO        ="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCATEGORY_RENDER       ="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE      ="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
Proxy.CLSID             ="{17CCA71B-ECD7-11D0-B908-00A0C9223196}"

MSGuid.MonoOut          ="{F9B41DC3-96E2-11d2-AC4C-00C04F8EFB68}"
MSGuid.StereoMix        ="{00DFF077-96E3-11d2-AC4C-00C04F8EFB68}"
MSGuid.MonoMix          ="{00DFF078-96E3-11d2-AC4C-00C04F8EFB68}"
MSGuid.Video            ="{915DAEC4-A434-11d2-AC52-00C04F8EFB68}"

MSGuid.MonoOutVolume    ="{1AD247EB-96E3-11d2-AC4C-00C04F8EFB68}"
MSGuid.MonoOutMute      ="{1AD247EC-96E3-11d2-AC4C-00C04F8EFB68}"
MSGuid.StereoMixVolume  ="{1AD247ED-96E3-11d2-AC4C-00C04F8EFB68}"
MSGuid.MonoMixVolume    ="{22B0EAFE-96E3-11d2-AC4C-00C04F8EFB68}"
MSGuid.MicBoost         ="{2BC31D6A-96E3-11d2-AC4C-00C04F8EFB68}"
MSGuid.AltMic           ="{2BC31D6B-96E3-11d2-AC4C-00C04F8EFB68}"
MSGuid.VideoVolume      ="{9B46E708-992A-11d2-AC4D-00C04F8EFB68}"
MSGuid.VideoMute        ="{9B46E709-992A-11d2-AC4D-00C04F8EFB68}"

CSCGuid.3dPin           ="{3D8D7AB2-E0BD-11d2-B475-00600893863B}"

CSCGuid.PhoneVolume     ="{307E1008-9035-11d2-99D6-00600893863B}"
CSCGuid.PhoneMute       ="{307E1009-9035-11d2-99D6-00600893863B}"
CSCGuid.BeepVolume      ="{307E100a-9035-11d2-99D6-00600893863B}"
CSCGuid.BeepMute        ="{307E100b-9035-11d2-99D6-00600893863B}"
CSCGuid.HPhoneVolume    ="{307E100c-9035-11d2-99D6-00600893863B}"
CSCGuid.HPhoneMute      ="{307E100d-9035-11d2-99D6-00600893863B}"
CSCGuid.3dVolume        ="{307E100e-9035-11d2-99D6-00600893863B}"
CSCGuid.3dMute          ="{307E100f-9035-11d2-99D6-00600893863B}"
CSCGuid.SPDIF           ="{1D8D1B93-3D72-11d4-9845-00C04F962E15}"


;
; The strings cannot be longer than 31 characters.
;
CSCAud.Wave.szPname="Crystal SoundFusion(tm) CS4281"
CSCAud.Topology.szPname="SoundFusion(tm) Mixer"
CSCAud.UART.szPname="SoundFusion(tm) External MIDI"

MSNode.MonoOutVolume    ="Mono Out Volume"
MSNode.MonoOutMute      ="Mono Out Mute"
MSNode.StereoMixVolume  ="Stereo Mix Volume"
MSNode.MonoMixVolume    ="Mono Mix Volume"
MSNode.VideoVolume      ="Video Volume"
MSNode.VideoMute        ="Video Mute"

CSCNode.PhoneVolume     ="Phone Volume"
CSCNode.PhoneMute       ="Phone Mute"
CSCNode.BeepVolume      ="Beep Volume"
CSCNode.BeepMute        ="Beep Mute"
CSCNode.HPhoneVolume    ="Headphones Volume"
CSCNode.HPhoneMute      ="Headphones Mute"
CSCNode.SPDIF			="SPDIF"

;
; MS Localized Friendly Names (DO NOT ADD!)
;
MSPin.MonoOut           ="Mono Out"
MSPin.StereoMix         ="Stereo Mix"
MSPin.MonoMix           ="Mono Mix"
MSPin.Video             ="Video"

MSNode.MicBoost         ="Microphone Boost (+20dB)"
MSNode.AltMic           ="Alternate Microphone"

CSCPin.3DPin            ="Crystal 3D"

;
; These strings are not displayed anywhere.  They are only used in the registry
; for a service description.
;
cwrwdm.SvcDesc  = "SoundFusion(tm) WDM Driver"
cwrgame.SvcDesc = "SoundFusion(tm) Joystick"


MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"
KSNAME_Wave="Wave"
KSNAME_UART="UART"
KSNAME_Topology="Topology"
KSNAME_Wavetable="UART"

KEY_BASE="SYSTEM\CurrentControlSet\Services\cwrwdm\CS4281"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_ens.txt ===
[Strings]
MSFT="Microsoft"
MfgName="Creative Technology Ltd."
ES1371.DeviceDesc="Creative AudioPCI (ES1371,ES1373) (WDM)"
*ES1371.DeviceDesc="Creative AudioPCI (ES1371,ES1373) (WDM)"
ES1370.DeviceDesc="Creative AudioPCI (ES1370), SB PCI 64/128 (WDM)"
*ES1370.DeviceDesc="Creative AudioPCI (ES1370), SB PCI 64/128 (WDM)"
W_ES1371.Wave.szPname="Creative Sound Blaster PCI"
W_ES1371.Topology.szPname="Creative Sound Blaster PCI"
W_ES1371.UART.szPname="Creative Sound Blaster MPU-401"
W_ES1370.Wave.szPname="Creative Sound Blaster PCI"
W_ES1370.Topology.szPname="Creative Sound Blaster PCI"
W_ES1370.UART.szPname="Creative Sound Blaster MPU-401"

*MS.MPU401.DeviceDesc="Microsoft MPU Audio Driver(WDM)"

MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"
WDM_MIDI="WDM-based Device"

Proxy.CLSID        ="{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KSCATEGORY_AUDIO   ="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCATEGORY_RENDER  ="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE ="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_TOPOLOGY="{DDA54A40-1E4C-11D1-A050-405705C10000}"

KSNAME_Wave="Wave"
KSNAME_UART="UART"
KSNAME_Topology="Topology"
KSNAME_Wavetable="Wavetable"

WDM.UART.szPname="SBPCI MPU-401"

ES1371.SvcDesc = "Creative AudioPCI (ES1371,ES1373) (WDM)"
ES1370.SvcDesc = "Creative AudioPCI (ES1370), SB PCI 64/128 (WDM)"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_ess.txt ===
[Strings]
MSFT="Microsoft"
ESSMfgName="ESS Technology, Inc."
*ESS6881.DeviceDesc="ES688 AudioDrive (WDM)"
*ESS1681.DeviceDesc="ES1688 AudioDrive (WDM)"
*ESS1781.DeviceDesc="ES1788 AudioDrive (WDM)"
*ESS1881.DeviceDesc="ES1888 AudioDrive (WDM)"
*ESS1882.DeviceDesc="ES1887 AudioDrive (WDM)"
*ESS0006.DeviceDesc="ES1869 Control Interface (WDM)"
*ESS1869.DeviceDesc="ES1869 Plug and Play AudioDrive (WDM)"
*ESS0000.DeviceDesc="ES1868 Control Interface (WDM)"
*ESS1868.DeviceDesc="ES1868 Plug and Play AudioDrive (WDM)"
*ESS0004.DeviceDesc="ES1878 Control Interface (WDM)"
*ESS1878.DeviceDesc="ES1878 Plug and Play AudioDrive (WDM)"
*ESS0100.DeviceDesc="ES688 Plug and Play AudioDrive (WDM)"
*ESS0102.DeviceDesc="ES1688 Plug and Play AudioDrive (WDM)"
*ESS0104.DeviceDesc="ES1788 Plug and Play AudioDrive (WDM)"
*ESS0106.DeviceDesc="ES1888 Plug and Play AudioDrive (WDM)"
*ESS0107.DeviceDesc="ES1887 Plug and Play AudioDrive (WDM)"
*ESS0009.DeviceDesc="ES1879 Control Interface (WDM)"
*ESS1879.DeviceDesc="ES1879 Plug and Play AudioDrive (WDM)"
*ESS.DeviceDesc="ESS AudioDrive (WDM)"
ESSAud.Wave.szPname="ESS AudioDrive"
ESSAud.Topology.szPname="ESS AudioDrive"
;; ESS friendly names (non-localizeable)
ESSGUID.WaveOut   ="{D6C86C60-51D8-11d1-A482-006097C79D21}"
ESSGUID.Synth     ="{D6C86C61-51D8-11d1-A482-006097C79D21}"
ESSGUID.Cd        ="{D6C86C62-51D8-11d1-A482-006097C79D21}"
ESSGUID.LineIn    ="{D6C86C63-51D8-11d1-A482-006097C79D21}"
ESSGUID.Mic       ="{D6C86C64-51D8-11d1-A482-006097C79D21}"
ESSGUID.AuxB      ="{D6C86C65-51D8-11d1-A482-006097C79D21}"
ESSGUID.PCSpeaker ="{D6C86C66-51D8-11d1-A482-006097C79D21}"
ESSGUID.3DEffect  ="{D6C86C67-51D8-11d1-A482-006097C79D21}"
ESSGUID.RecMon    ="{D6C86C68-51D8-11d1-A482-006097C79D21}"
ESSGUID.IISVolume ="{4AABCD47-FB00-11d1-9B43-006097C79D21}"
ESSGUID.IISMute   ="{4AABCD48-FB00-11d1-9B43-006097C79D21}"
ESSGUID.IISPin    ="{4AABCD41-FB00-11d1-9B43-006097C79D21}"
;; ESS friendly names (localizeable)
ESSPin.WaveOut    ="WaveOut"
ESSPin.Synth      ="Synthesizer"
ESSPin.Cd         ="CD"
ESSPin.LineIn     ="Line In"
ESSPin.Mic        ="Microphone"
ESSPin.AuxB       ="AuxB"
ESSPin.PCSpeaker  ="PC Speaker"
ESSNode.3DEffect  ="3D Effect Enable"
ESSNode.RecMon    ="Record Monitor"
ESSPin.IISPin     ="IIS"
ESSNode.IISVolume ="IIS Volume"
ESSNode.IISMute   ="IIS Mute"

MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"
WDM_MIDI="WDM-based Device"

Proxy.CLSID="{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KSCATEGORY_AUDIO="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCATEGORY_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
KSNAME_Wave="Wave"
KSNAME_UART="UART"
KSNAME_FMSynth="FMSynth"
KSNAME_Topology="Topology"
KSNAME_Wavetable="Wavetable"

WDM.UART.szPname="ESS MPU-401"
WDM.FMSynth.szPname="ESS FM Synthesizer"

ess.SvcDesc = "ESS Audio Driver (WDM)"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_es2.txt ===
[Strings]
MSFT="Microsoft"
MFClassName="Multi-function adapters"

ESSMfgName="ESS Technology, Inc."
*ESS.DeviceDesc="ESS AudioDrive (WDM)"

ES1969.Wave.szPname="ESS 1969"
ES1969.Topology.szPname="ESS 1969"
ES1969.Synth.szPname="ESS 1969"
ES1969.UART.szPname="ESS 1969 MPU-401"
ES1969.FMSynth.szPname="ESS 1969 FM Synthesizer"

ESSMaestro.Wave.szPname="ESS Maestro"
ESSMaestro.Topology.szPname="ESS Maestro"
ESSMaestro.Synth.szPname="ESS Maestro"
ESSMaestro.FMSynth.szPname="ESS Maestro FM Synthesizer"
ESSMaestro.MSynth.szPname="Maestro DLS Synthesizer"

Maestro1.DeviceDesc="ESS Maestro1 PCI AudioDrive (WDM)"
Maestro2.DeviceDesc="ESS Maestro2 PCI AudioDrive (WDM)"
Maestro2E.DeviceDesc="ESS Maestro2E PCI AudioDrive (WDM)"
Maestro_T.DeviceDesc="ESS Maestro PCI for Toshiba Laptop (WDM)"
MaestroSB.DeviceDesc="ESS MaestroX Sound Blaster Compatible (WDM)"
Es19691.DeviceDesc="ESS 1969 PCI AudioDrive (WDM)"
Es1969SB.DeviceDesc="ESS 1969 SoundBlaster Compatible (WDM)"

GUID.PcBeep             ="{9DBBDD22-5CF6-11d1-88B4-00C09F002B8F}"
String.PcBeep           ="Pc Beep"
GUID.AuxA               ="{9DBBDD23-5CF6-11d1-88B4-00C09F002B8F}"
String.AuxA             ="Aux A"
GUID.AuxB               ="{9DBBDD24-5CF6-11d1-88B4-00C09F002B8F}"
String.AuxB             ="Aux B"

GUID.20db               ="{9DBBDD21-5CF6-11d1-88B4-00c09F002B8F}"
String.20db             ="+20dB Gain"
GUID.Mixer              ="{9DBBDD25-5CF6-11d1-88B4-00C09F002B8F}"
String.Mixer            ="Mixer"

GUID.ES978Play          ="{B6755560-26D8-11d2-9265-DABF9A2C015A}"
String.ES978Play        ="ES978 Playback"
GUID.ES978Rec           ="{B6755561-26D8-11d2-9265-DABF9A2C015A}"
String.ES978Rec         ="ES978 Recording"
GUID.RemoteAC97         ="{B6755562-26D8-11d2-9265-DABF9A2C015A}"
String.RemoteAC97       ="Remote AC97"
GUID.Aux                ="{B6755563-26D8-11d2-9265-DABF9A2C015A}"
String.Aux              ="Aux"
GUID.AuxVol             ="{B6755564-26D8-11d2-9265-DABF9A2C015A}"
String.AuxVol           ="Aux Volume"
GUID.AuxMute            ="{B6755565-26D8-11d2-9265-DABF9A2C015A}"
String.AuxMute          ="Aux Mute"
GUID.AuxInVol           ="{B6755566-26D8-11d2-9265-DABF9A2C015A}"
String.AuxInVol         ="Aux In Vol"
GUID.AuxInMute          ="{B6755567-26D8-11d2-9265-DABF9A2C015A}"
String.AuxInMute        ="Aux In Mute"
GUID.IIS                ="{B6755568-26D8-11d2-9265-DABF9A2C015A}"
String.IIS              ="IIS"
GUID.IISVol             ="{B6755569-26D8-11d2-9265-DABF9A2C015A}"
String.IISVol           ="IIS Volume"
GUID.IISMute            ="{B675556A-26D8-11d2-9265-DABF9A2C015A}"
String.IISMute          ="IIS Mute"
GUID.IISInVol           ="{B675556B-26D8-11d2-9265-DABF9A2C015A}"
String.IISInVol         ="IIS In Volume"
GUID.IISInMute          ="{B675556C-26D8-11d2-9265-DABF9A2C015A}"
String.IISInMute        ="IIS In Mute"
GUID.HostAudio          ="{B675556D-26D8-11d2-9265-DABF9A2C015A}"
String.HostAudio        ="Host Audio"
GUID.HostVol            ="{B675556E-26D8-11d2-9265-DABF9A2C015A}"
String.HostVol          ="Host Audio Vol"
GUID.HostMute           ="{B675556F-26D8-11d2-9265-DABF9A2C015A}"
String.HostMute         ="Host Audio Mute"
GUID.Mono               ="{B6755570-26D8-11d2-9265-DABF9A2C015A}"
String.Mono             ="Mono"
GUID.MonoVol            ="{B6755571-26D8-11d2-9265-DABF9A2C015A}"
String.MonoVol          ="Mono Volume"
GUID.MonoMute           ="{B6755572-26D8-11d2-9265-DABF9A2C015A}"
String.MonoMute         ="Mono Mute"
GUID.Phone              ="{B6755573-26D8-11d2-9265-DABF9A2C015A}"
String.Phone            ="Phone"
GUID.PhoneVol           ="{B6755574-26D8-11d2-9265-DABF9A2C015A}"
String.PhoneVol         ="Phone Volume"
GUID.PhoneMute          ="{B6755575-26D8-11d2-9265-DABF9A2C015A}"
String.PhoneMute        ="Phone Mute"
GUID.Video              ="{B6755576-26D8-11d2-9265-DABF9A2C015A}"
String.Video            ="Video"
GUID.VideoVol           ="{B6755577-26D8-11d2-9265-DABF9A2C015A}"
String.VideoVol         ="Video Volume"
GUID.VideoMute          ="{B6755578-26D8-11d2-9265-DABF9A2C015A}"
String.VideoMute        ="Video Mute"
GUID.Headphones         ="{B6755579-26D8-11d2-9265-DABF9A2C015A}"
String.Headphones       ="Headphones"
GUID.HeadphonesVol      ="{B675557A-26D8-11d2-9265-DABF9A2C015A}"
String.HeadphonesVol    ="Headphones Vol"
GUID.HeadphonesMute     ="{B675557B-26D8-11d2-9265-DABF9A2C015A}"
String.HeadphonesMute   ="Headphones Mute"
GUID.WaveOut            ="{B675557C-26D8-11d2-9265-DABF9A2C015A}"
String.WaveOut          ="Wave Out"
GUID.WaveOutVol         ="{B675557D-26D8-11d2-9265-DABF9A2C015A}"
String.WaveOutVol       ="Wave Out Vol"
GUID.WaveOutMute        ="{B675557E-26D8-11d2-9265-DABF9A2C015A}"
String.WaveOutMute      ="Wave Out Mute"
GUID.DockedSpeakers     ="{B675557F-26D8-11d2-9265-DABF9A2C015A}"
String.DockedSpeakers   ="Docked Speakers"
GUID.EnableSPDIF        ="{B6755580-26D8-11d2-9265-DABF9A2C015A}"
String.EnableSPDIF      ="Enable SPDIF"

;; ESS friendly names (non-localizeable)
ESSGUID.WaveOut   ="{D6C86C60-51D8-11d1-A482-006097C79D21}"
ESSGUID.Synth     ="{D6C86C61-51D8-11d1-A482-006097C79D21}"
ESSGUID.Cd        ="{D6C86C62-51D8-11d1-A482-006097C79D21}"
ESSGUID.LineIn    ="{D6C86C63-51D8-11d1-A482-006097C79D21}"
ESSGUID.Mic       ="{D6C86C64-51D8-11d1-A482-006097C79D21}"
ESSGUID.AuxB      ="{D6C86C65-51D8-11d1-A482-006097C79D21}"
ESSGUID.PCSpeaker ="{D6C86C66-51D8-11d1-A482-006097C79D21}"
ESSGUID.3DEffect  ="{D6C86C67-51D8-11d1-A482-006097C79D21}"
ESSGUID.RecMon    ="{D6C86C68-51D8-11d1-A482-006097C79D21}"
ESSGUID.MixerPin  = "{D6C86C69-51D8-11d1-A482-006097C79D21}"
ESSGUID.MixerVolume= "{D6C86C70-51D8-11d1-A482-006097C79D21}"
ESSGUID.ExcludeSWMix ="{1EB8B800-7563-11d2-905C-00A0C99CFEB4}"
ESSGUID.20db      ="{9DBBDD21-5Cf6-11d1-88B4-00c09F002B8F}"
ESSGUID.PcBeep    ="{9DBBDD22-5Cf6-11d1-88B4-00c09F002B8F}"
ESSGUID.AuxA      ="{9DBBDD23-5Cf6-11d1-88B4-00c09F002B8F}"
ESSGUID.AuxBM     ="{9DBBDD24-5Cf6-11d1-88B4-00c09F002B8F}"
ESSGUID.Mixer     ="{9DBBDD25-5Cf6-11d1-88B4-00c09F002B8F}"
ESSGUID.IISVolume ="{4AABCD47-FB00-11d1-9B43-006097C79D21}"
ESSGUID.IISMute   ="{4AABCD48-FB00-11d1-9B43-006097C79D21}"
ESSGUID.IISPin    ="{4AABCD41-FB00-11d1-9B43-006097C79D21}"
ESSGUID.PhoneVolume = "{7DCEDC62-0F43-11D2-905C-A4841B262922}"
ESSGUID.PhoneMute   = "{7DCEDC61-0F43-11D2-905C-A4841B262922}"
ESSGUID.PhonePin    = "{7DCEDC60-0F43-11D2-905C-A4841B262922}"

;; ESS friendly names (localizeable)
ESSPin.WaveOut    ="WaveOut"
ESSPin.Synth      ="Synthesizer"
ESSPin.Cd         ="CD"
ESSPin.LineIn     ="Line In"
ESSPin.Mic        ="Microphone"
ESSPin.AuxB       ="Aux B"
ESSPin.PCSpeaker  ="PC Speaker"
ESSNode.3DEffect  ="3D Effect Enable"
ESSNode.ExcludeSWMix     ="Exclude SW Mix"
ESSPin.IISPin            ="ZV Audio"
ESSNode.IISVolume        ="ZV Volume"
ESSNode.IISMute          ="ZV Mute"
ESSNode.RecMon    ="Record Monitor"
ESSPin.MixerPin          ="Record Mixer"
ESSNode.MixerVolumeIn    ="Record Mixer Volume"
ESSNode.20db      ="+20dB Gain"
ESSPin.PcBeep     ="Pc Beep"
ESSPin.AuxA       ="Aux A"
ESSPin.AuxBM       ="Aux B"
ESSNode.Mixer     ="Mixer"
ESSPin.PhonePin     ="Phone"
ESSNode.PhoneVolume ="Phone Volume"
ESSNode.PhoneMute   ="Phone Mute"

MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"
WDM_MIDI="WDM-based Device"
WDM.FMSynth.szPname="ESFM Synthesizer"

Proxy.CLSID="{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KSCATEGORY_AUDIO="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCATEGORY_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_TOPOLOGY="{DDA54A40-1E4C-11D1-A050-405705C10000}"

KSNAME_Wave="Wave"
KSNAME_UART="UART"
KSNAME_MSYNTH="MaestroSynth"
KSNAME_FMSynth="FMSynth"
KSNAME_Topology="Topology"
KSNAME_Wavetable="Wavetable"


maestro.SvcDesc = "ESS Maestro Audio Driver (WDM)"
es1969.SvcDesc = "ESS 1969 Audio Driver (WDM)"
Unsupported.Es1969Device="Unsupported 1969 Device in Acer TravelMate Notebook"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_es3.txt ===
[Strings]
MSFT="Microsoft"

ESSMfgName="ESS Technology, Inc."
*ESS.DevDesc="ESS PCI Audio (WDM)"

A1.Wave.szPname="ESS Allegro"
A1.Topology.szPname="ESS Allegro"
M3.Wave.szPname="ESS Maestro 3"
M3.Topology.szPname="ESS Maestro 3"

Allegro.DevDesc="ESS Allegro PCI Audio (WDM)"
AllegroSB.DevDesc="ESS Allegro Sound Blaster Compatible (WDM)"
Maestro.DevDesc="ESS Maestro 3 PCI Audio (WDM)"
MaestroSB.DevDesc="ESS Maestro Sound Blaster Compatible (WDM)"

GUID.PcBeep             ="{9DBBDD22-5CF6-11d1-88B4-00C09F002B8F}"
String.PcBeep           ="Pc Beep"
GUID.AuxA               ="{9DBBDD23-5CF6-11d1-88B4-00C09F002B8F}"
String.AuxA             ="Aux A"
GUID.AuxB               ="{9DBBDD24-5CF6-11d1-88B4-00C09F002B8F}"
String.AuxB             ="Aux B"

GUID.20db               ="{9DBBDD21-5CF6-11d1-88B4-00c09F002B8F}"
String.20db             ="+20dB Gain"
GUID.Mixer              ="{9DBBDD25-5CF6-11d1-88B4-00C09F002B8F}"
String.Mixer            ="Mixer"

GUID.ES978Play          ="{B6755560-26D8-11d2-9265-DABF9A2C015A}"
String.ES978Play        ="ES978 Playback"
GUID.ES978Rec           ="{B6755561-26D8-11d2-9265-DABF9A2C015A}"
String.ES978Rec         ="ES978 Recording"
GUID.RemoteAC97         ="{B6755562-26D8-11d2-9265-DABF9A2C015A}"
String.RemoteAC97       ="Remote AC97"
GUID.Aux                ="{B6755563-26D8-11d2-9265-DABF9A2C015A}"
String.Aux              ="Aux"
GUID.AuxVol             ="{B6755564-26D8-11d2-9265-DABF9A2C015A}"
String.AuxVol           ="Aux Volume"
GUID.AuxMute            ="{B6755565-26D8-11d2-9265-DABF9A2C015A}"
String.AuxMute          ="Aux Mute"
GUID.AuxInVol           ="{B6755566-26D8-11d2-9265-DABF9A2C015A}"
String.AuxInVol         ="Aux In Vol"
GUID.AuxInMute          ="{B6755567-26D8-11d2-9265-DABF9A2C015A}"
String.AuxInMute        ="Aux In Mute"
GUID.IIS                ="{B6755568-26D8-11d2-9265-DABF9A2C015A}"
String.IIS              ="IIS"
GUID.IISVol             ="{B6755569-26D8-11d2-9265-DABF9A2C015A}"
String.IISVol           ="IIS Volume"
GUID.IISMute            ="{B675556A-26D8-11d2-9265-DABF9A2C015A}"
String.IISMute          ="IIS Mute"
GUID.IISInVol           ="{B675556B-26D8-11d2-9265-DABF9A2C015A}"
String.IISInVol         ="IIS In Volume"
GUID.IISInMute          ="{B675556C-26D8-11d2-9265-DABF9A2C015A}"
String.IISInMute        ="IIS In Mute"
GUID.HostAudio          ="{B675556D-26D8-11d2-9265-DABF9A2C015A}"
String.HostAudio        ="Host Audio"
GUID.HostVol            ="{B675556E-26D8-11d2-9265-DABF9A2C015A}"
String.HostVol          ="Host Audio Vol"
GUID.HostMute           ="{B675556F-26D8-11d2-9265-DABF9A2C015A}"
String.HostMute         ="Host Audio Mute"
GUID.Mono               ="{B6755570-26D8-11d2-9265-DABF9A2C015A}"
String.Mono             ="Mono"
GUID.MonoVol            ="{B6755571-26D8-11d2-9265-DABF9A2C015A}"
String.MonoVol          ="Mono Volume"
GUID.MonoMute           ="{B6755572-26D8-11d2-9265-DABF9A2C015A}"
String.MonoMute         ="Mono Mute"
GUID.Phone              ="{B6755573-26D8-11d2-9265-DABF9A2C015A}"
String.Phone            ="Phone"
GUID.PhoneVol           ="{B6755574-26D8-11d2-9265-DABF9A2C015A}"
String.PhoneVol         ="Phone Volume"
GUID.PhoneMute          ="{B6755575-26D8-11d2-9265-DABF9A2C015A}"
String.PhoneMute        ="Phone Mute"
GUID.Video              ="{B6755576-26D8-11d2-9265-DABF9A2C015A}"
String.Video            ="Video"
GUID.VideoVol           ="{B6755577-26D8-11d2-9265-DABF9A2C015A}"
String.VideoVol         ="Video Volume"
GUID.VideoMute          ="{B6755578-26D8-11d2-9265-DABF9A2C015A}"
String.VideoMute        ="Video Mute"
GUID.Headphones         ="{B6755579-26D8-11d2-9265-DABF9A2C015A}"
String.Headphones       ="Headphones"
GUID.HeadphonesVol      ="{B675557A-26D8-11d2-9265-DABF9A2C015A}"
String.HeadphonesVol    ="Headphones Vol"
GUID.HeadphonesMute     ="{B675557B-26D8-11d2-9265-DABF9A2C015A}"
String.HeadphonesMute   ="Headphones Mute"
GUID.WaveOut            ="{B675557C-26D8-11d2-9265-DABF9A2C015A}"
String.WaveOut          ="Wave Out"
GUID.WaveOutVol         ="{B675557D-26D8-11d2-9265-DABF9A2C015A}"
String.WaveOutVol       ="Wave Out Vol"
GUID.WaveOutMute        ="{B675557E-26D8-11d2-9265-DABF9A2C015A}"
String.WaveOutMute      ="Wave Out Mute"
GUID.DockedSpeakers     ="{B675557F-26D8-11d2-9265-DABF9A2C015A}"
String.DockedSpeakers   ="Docked Speakers"
GUID.EnableSPDIF        ="{B6755580-26D8-11d2-9265-DABF9A2C015A}"
String.EnableSPDIF      ="Enable S/PDIF"
GUID.AnalogStereo       ="{B6755581-26D8-11d2-9265-DABF9A2C015A}"
String.AnalogStereo     ="Analog Stereo"
GUID.AnalogMono         ="{B6755582-26D8-11d2-9265-DABF9A2C015A}"
String.AnalogMono       ="Analog Mono"
GUID.CD2                ="{B6755583-26D8-11d2-9265-DABF9A2C015A}"
String.CD2              ="CD Audio 2"
GUID.LineIn2            ="{B6755584-26D8-11d2-9265-DABF9A2C015A}"
String.LineIn2          ="Line In 2"
GUID.Mic2               ="{B6755585-26D8-11d2-9265-DABF9A2C015A}"
String.Mic2             ="Microphone 2"

;; newly added below
GUID.EnableSPDIFmd      ="{F95BAA24-2289-4416-87C4-FA544910FF50}"
String.EnableSPDIFmd    ="Enable MD S/PDIF"
GUID.EnableSPDIFINmd    ="{F95BAA24-2289-4416-87C4-FA544910FF51}"
String.EnableSPDIFINmd  ="Enable MD S/PDIF In"
GUID.SPDIF              ="{57DC0F43-FB89-45a0-9B9C-ED4D572F35D1}"
String.SPDIF            ="S/PDIF In"
GUID.Enable4Speaker     ="{8F889F50-60A4-4dfc-8B84-03BD9026303A}"
String.Enable4Speaker   ="Enable Surround Speakers"
GUID.Fader              ="{25F97042-5A92-4c2c-A99F-4B6223AFF146}"
String.Fader            ="Fader"
String.IISS             ="ZV"
String.IISVolS          ="ZV Volume"
String.IISMuteS         ="ZV Mute"
String.LineIn2S         ="Line IN"
String.LineIn2G         ="Dock Line In"
String.Mic2S            ="Dock Mic"

;; ESS friendly names (non-localizeable)
ESSGUID.WaveOut   ="{D6C86C60-51D8-11d1-A482-006097C79D21}"
ESSGUID.Synth     ="{D6C86C61-51D8-11d1-A482-006097C79D21}"
ESSGUID.Cd        ="{D6C86C62-51D8-11d1-A482-006097C79D21}"
ESSGUID.LineIn    ="{D6C86C63-51D8-11d1-A482-006097C79D21}"
ESSGUID.Mic       ="{D6C86C64-51D8-11d1-A482-006097C79D21}"
ESSGUID.AuxB      ="{D6C86C65-51D8-11d1-A482-006097C79D21}"
ESSGUID.PCSpeaker ="{D6C86C66-51D8-11d1-A482-006097C79D21}"
ESSGUID.3DEffect  ="{D6C86C67-51D8-11d1-A482-006097C79D21}"
ESSGUID.RecMon    ="{D6C86C68-51D8-11d1-A482-006097C79D21}"

;; ESS friendly names (localizeable)
ESSPin.WaveOut    ="WaveOut"
ESSPin.Synth      ="Synthesizer"
ESSPin.Cd         ="CD"
ESSPin.LineIn     ="Line In"
ESSPin.Mic        ="Microphone"
ESSPin.AuxB       ="AuxB"
ESSPin.PCSpeaker  ="PC Speaker"
ESSNode.3DEffect  ="3D Effect Enable"
ESSNode.RecMon    ="Record Monitor"

MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"
RunKey="SOFTWARE\Microsoft\Windows\CurrentVersion\Run"
WDM_MIDI="WDM-based Device"

Proxy.CLSID="{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KSCATEGORY_AUDIO="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCATEGORY_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_TOPOLOGY="{DDA54A40-1E4C-11D1-A050-405705C10000}"

KSNAME_Wave="Wave"
KSNAME_Topology="Topology"

allegro.SvcDesc = "ESS Allegro Audio Driver (WDM)"
maestro.SvcDesc = "ESS Maestro 3 Audio Driver (WDM)"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_int.txt ===
[Strings]
MSFT="Microsoft"
IntelMfg="Intel"
ichaud_AA.DeviceDesc="Intel(r) 82801AA AC'97 Audio Controller"
ichaud_AB.DeviceDesc="Intel(r) 82801AB AC'97 Audio Controller"
ich2aud_BA_BAM.DeviceDesc="Intel(r) 82801BA/BAM AC'97 Audio Controller"
ich3aud_CA_CAM.DeviceDesc="Intel(r) 82801CA/CAM AC'97 Audio Controller"
i440mxaud.DeviceDesc="Intel(r) AC'97 Audio Controller"
ac97intc.DeviceDesc="Intel(r) 82801AA/AB/BA/CA AC'97 Audio Controller"

ac97intc.Wave.szPname="Intel(r) Integrated Audio"
ac97intc.Topology.szPname="Intel(r) Integrated Audio Topology"

MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"

Proxy.CLSID="{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KSCATEGORY_AUDIO="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCATEGORY_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
KSNAME_Wave="Wave"
KSNAME_Topology="Topology"
WDM_MIDI="SW Synth"

ac97intc.SvcDesc = "Intel(r) 82801 Audio Driver Install Service (WDM)"

; Pins not added by Win98G
ICHGUID.SpkrBalance      ="{887BD5B1-436D-4735-94F3-5AE1D13E23CF}"
ICHGUID.MonoOut          ="{F9B41DC3-96E2-11d2-AC4C-00C04F8EFB68}"
ICHGUID.StereoMix        ="{00DFF077-96E3-11d2-AC4C-00C04F8EFB68}"
ICHGUID.MonoMix          ="{00DFF078-96E3-11d2-AC4C-00C04F8EFB68}"
ICHGUID.Video            ="{915DAEC4-A434-11d2-AC52-00C04F8EFB68}"
ICHGUID.3dStereoEnhance  ="{0A8C1AB4-42B0-11D2-95D2-00C04FB925D3}"

ICHGUID.Front            ="{0A8C1ABF-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.Surround         ="{0A8C1ABE-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.Center           ="{0A8C1ABD-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.LFE              ="{0A8C1ABC-42B0-11D2-95D2-00C04FB925D3}"

; Nodes not added by Win98G
ICHGUID.MonoOutVolume    ="{1AD247EB-96E3-11d2-AC4C-00C04F8EFB68}"
ICHGUID.MonoOutMute      ="{1AD247EC-96E3-11d2-AC4C-00C04F8EFB68}"
ICHGUID.StereoMixVolume  ="{1AD247ED-96E3-11d2-AC4C-00C04F8EFB68}"
ICHGUID.MonoMixVolume    ="{22B0EAFE-96E3-11d2-AC4C-00C04F8EFB68}"
ICHGUID.MicBoost         ="{2BC31D6A-96E3-11d2-AC4C-00C04F8EFB68}"
ICHGUID.AltMic           ="{2BC31D6B-96E3-11d2-AC4C-00C04F8EFB68}"
ICHGUID.VideoVolume      ="{9B46E708-992A-11d2-AC4D-00C04F8EFB68}"
ICHGUID.VideoMute        ="{9B46E709-992A-11d2-AC4D-00C04F8EFB68}"

; Nodes
ICHGUID.PhoneVolume      ="{0A8C1A87-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.PhoneMute        ="{0A8C1A88-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.LineInMute       ="{0A8C1A91-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.MainMix          ="{0A8C1A9B-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.BeepMix          ="{0A8C1A9F-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.HPVolume         ="{0A8C1AA5-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.HPMute           ="{0A8C1AA6-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.MonoOutSelect    ="{0A8C1AA9-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.WaveInSelect     ="{0A8C1AAE-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.MasterInVolume   ="{0A8C1AAF-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.MasterInMute     ="{0A8C1AB0-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.MicInVolume      ="{0A8C1AB2-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.MicInMute        ="{0A8C1AB3-42B0-11D2-95D2-00C04FB925D3}"

ICHGUID.FrontLeftVolume      ="{4B5D7177-271F-4EAA-AF18-33C5E11EF319}"

ICHGUID.FrontRightVolume      ="{0026F997-0ED1-449c-B021-220910CAB1CB}"

ICHGUID.FrontMute        ="{C680C4BA-BB12-4ef3-9F3A-E1BFF12CFEBC}"

ICHGUID.SurroundLeftVolume      ="{D3AD4298-85A1-49c1-8821-9D10B644FD77}"

ICHGUID.SurroundRightVolume      ="{B1ED00F7-B0A0-4097-9D10-4447242E274F}"
ICHGUID.SurroundMute        ="{BB7E5A38-423D-41f4-B5D4-95A8A4DC1EBC}"

ICHGUID.CenterVolume      ="{62C4C998-327A-444d-BE8B-FB1A44A25FFC}"
ICHGUID.CenterMute        ="{8FF78D31-FCC9-44b5-8B06-95B966289067}"

ICHGUID.LFEVolume      ="{87FF6A6A-305E-4a7d-B368-17AF949FCBC1}"
ICHGUID.LFEMute        ="{1860F14F-3552-423f-94E5-4F3BF5D8298C}"
ICHGUID.PcmOut3dBypass       = "{EA1145A4-228B-4990-9F97-C0AFA918AD78}"
ICHGUID.DigitalOutEnable       = "{EBD38F38-CF24-49ff-A9D1-1510C6540F11}"

ICHGUID.WaveInBridge       = "{158E1263-D16E-4996-A39D-B567CABBA5B2}"
ICHGUID.WaveOutBridge       = "{55D91EB3-3D97-48fd-B435-42C511997B9B}"


; Pins not added by Win98G (should be localized)
ICHPin.SpkrBalance	 ="Speaker Balance"
ICHPin.MonoOut           ="Mono Out"
ICHPin.StereoMix         ="Stereo Mix"
ICHPin.MonoMix           ="Mono Mix"
ICHPin.Video             ="Video"
ICHPin.3dStereoEnhance   ="3D Enhance"
ICHPin.Front             ="Front"
ICHPin.Surround          ="Surround"
ICHPin.Center            ="Center"
ICHPin.LFE               ="LFE"

; Nodes not added by Win98G
ICHNode.MonoOutVolume    ="Mono Out Volume"
ICHNode.MonoOutMute      ="Mono Out Mute"
ICHNode.StereoMixVolume  ="Stereo Mix Volume"
ICHNode.MonoMixVolume    ="Mono Mix Volume"
ICHNode.VideoVolume      ="Video Volume"
ICHNode.VideoMute        ="Video Mute"
ICHNode.MicBoost         ="Microphone Boost"
ICHNode.AltMic           ="Alternate Microphone"


; Nodes (localizeable)
ICHNode.PhoneVolume      ="Phone Volume"
ICHNode.PhoneMute        ="Phone Mute"
ICHNode.LineInMute       ="LineIn Mute"
ICHNode.MainMix          ="Main Mix"
ICHNode.BeepMix          ="Beep Mix"
ICHNode.HPVolume         ="Headphone Volume"
ICHNode.HPMute           ="Headphone Mute"
ICHNode.MonoOutSelect    ="Mono Out Select"
ICHNode.WaveInSelect     ="WaveIn Select"
ICHNode.MasterInVolume   ="WaveIn Volume"
ICHNode.MasterInMute     ="WaveIn Mute"
ICHNode.MicInVolume      ="Mic In Volume"
ICHNode.MicInMute        ="Mic In Mute"

ICHNode.FrontLeftVolume  = "Front Left Volume"

ICHNode.FrontRightVolume = "Front Right Volume"

ICHNode.FrontMute   = "Front Mute"

ICHNode.SurroundLeftVolume = "Surround Left Volume"

ICHNode.SurroundRightVolume = "Surround Right Volume"
ICHNode.SurroundMute   = "Surround Mute"

ICHNode.CenterVolume = "Center Volume"
ICHNode.CenterMute = "Center Mute"

ICHNode.LFEVolume = "LFE Volume"
ICHNode.LFEMute = "LFE Mute"

ICHNode.PcmOut3dBypass       = "PCM Out 3d Bypass"
ICHNode.DigitalOutEnable       = "Enable Digital Output"

ICHPin.WaveInBridge       = "Wave in bridge"
ICHPin.WaveOutBridge       = "Wave out bridge"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_ms.txt ===
[Strings]
MSFT="Microsoft"
IntelMfg="Intel"
ICHAUD_AA.DeviceDesc="AC'97 Driver for Intel(r) 82801AA Controller"
ICHAUD_AB.DeviceDesc="AC'97 Driver for Intel(r) 82801AB Controller"
ICHAUD_BA.DeviceDesc="AC'97 Driver for Intel(r) 82801BA/BAM Controller"
ICHAUD.DeviceDesc="AC'97 Driver for Intel(r) 82801 Controller"

ICHAUD.Wave.szPname="AC'97 Sound Card"
ICHAUD.Topology.szPname="AC'97 Mixer"

MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"

Proxy.CLSID="{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KSCATEGORY_AUDIO="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCATEGORY_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
KSNAME_Wave="Wave"
KSNAME_Topology="Topology"

ichaud.SvcDesc = "Service for AC'97 Driver (WDM)"

;; Nodes (non-localizeable)
ICHGUID.PhoneVolume     ="{0A8C1A87-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.PhoneMute       ="{0A8C1A88-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.LineInMute      ="{0A8C1A91-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.MainMix         ="{0A8C1A9B-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.3DBypass        ="{0A8C1A9E-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.3DEnable        ="{766DB5A4-6E94-11D2-9ADE-00C04F8EFB68}"
ICHGUID.BeepMix         ="{0A8C1A9F-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.HPVolume        ="{0A8C1AA5-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.HPMute          ="{0A8C1AA6-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.MonoOutSelect   ="{0A8C1AA9-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.WaveInSelect    ="{0A8C1AAE-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.MasterInVolume  ="{0A8C1AAF-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.MasterInMute    ="{0A8C1AB0-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.MicInVolume     ="{0A8C1AB2-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.MicInMute       ="{0A8C1AB3-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.SimulStereo     ="{B3AD50B5-3849-4983-ADD7-25E6268F912D}"
ICHGUID.SurroundVolume  ="{A4B68BA4-6958-4ab4-BB01-E23C6F027C88}"
ICHGUID.SurroundMute    ="{22654FBC-AC8F-4224-B19F-D858D2E10BDD}"
ICHGUID.CenterVolume    ="{9B0F1946-ABD2-47a8-A778-BB86CDE1A167}"
ICHGUID.CenterMute      ="{BEEF51ED-1041-43f8-9B96-5863D0A9342D}"
ICHGUID.LFEVolume       ="{455FA6F2-21EC-4df4-B1E4-3155209797F3}"
ICHGUID.LFEMute         ="{4A4D9210-C780-4768-BFD2-525FDBF4FCB4}"
ICHGUID.FrontVolume     ="{9F4801BD-F746-4c7a-8A9D-F6E99004CC98}"
ICHGUID.FrontMute       ="{C8E03B2A-EBD9-4554-A750-8E4472750A5B}"
;; Pins (non-localizeable)
ICHGUID.Surround        ="{81FBB14B-1BEE-4bf5-92EE-FFC4F75F326D}"
ICHGUID.Center          ="{2D97372F-9CF6-4fd6-9E56-C68BACDF360D}"
ICHGUID.LFE             ="{B60C4274-3BFD-430b-8364-D947E7D304B1}"
ICHGUID.Front           ="{070395E2-BE7C-4b4d-B529-40CB9BFCF995}"


;; Nodes (localizeable)
ICHNode.PhoneVolume     ="Phone Volume"
ICHNode.PhoneMute       ="Phone Mute"
ICHNode.LineInMute      ="Line In Mute"
ICHNode.MainMix         ="Main Mix"
ICHNode.3DBypass        ="3D Bypass"
ICHNode.3DEnable        ="3D Enable"
ICHNode.BeepMix         ="Beep Mix"
ICHNode.HPVolume        ="Headphone Volume"
ICHNode.HPMute          ="Headphone Mute"
ICHNode.MonoOutSelect   ="Mono Out Select"
ICHNode.WaveInSelect    ="Wave In Select"
ICHNode.MasterInVolume  ="Wave In Volume"
ICHNode.MasterInMute    ="Wave In Mute"
ICHNode.MicInVolume     ="Mic In Volume"
ICHNode.MicInMute       ="Mic In Mute"
ICHNode.SimulStereo     ="Simulated Stereo"
ICHNode.SurroundVolume  ="Rear Speaker Volume"
ICHNode.SurroundMute    ="Rear Speaker Mute"
ICHNode.CenterVolume    ="Center Volume"
ICHNode.CenterMute      ="Center Mute"
ICHNode.LFEVolume       ="Subwoofer Volume"
ICHNode.LFEMute         ="Subwoofer Mute"
ICHNode.FrontVolume     ="Front Volume"
ICHNode.FrontMute       ="Front Mute"
;; Pins
ICHPin.Surround         ="Rear Speaker"
ICHPin.Center           ="Center"
ICHPin.LFE              ="Subwoofer"
ICHPin.Front            ="Front Speaker"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_m2e.txt ===
[Strings]
MSFT="Microsoft"

ESSMfgName="ESS Technology, Inc."
*ESS.DeviceDesc="ESS AudioDrive (WDM)"

ESSAud.Wave.szPname="ESS Maestro 2E"
ESSAud.Topology.szPname="ESS Maestro 2E"
ESSAud.Synth.szPname="ESS Maestro 2E"

ESSAud3D.Wave.szPname="ESS Canyon 3D"
ESSAud3D.Topology.szPname="ESS Canyon 3D"
ESSAud3D.Synth.szPname="ESS Canyon 3D"

Maestro2E.DeviceDesc="ESS Maestro2E PCI AudioDrive (WDM)"
Maestro3D.DeviceDesc="ESS Canyon 3D PCI AudioDrive (WDM)"
MaestroSB.DeviceDesc="ESS Maestro2E Sound Blaster Compatible (WDM)"
MaestroMPU.DeviceDesc="ESS Maestro2E MPU-401 Compatible (WDM)"

GUID.20db               ="{9DBBDD21-5CF6-11d1-88B4-00c09F002B8F}"
String.20db             ="+20dB Gain"
GUID.Mixer              ="{9DBBDD25-5CF6-11d1-88B4-00C09F002B8F}"
String.Mixer            ="Mixer"

GUID.IIS                ="{B6755568-26D8-11d2-9265-DABF9A2C015A}"
String.IIS              ="Zoom Video"
GUID.Mono               ="{B6755570-26D8-11d2-9265-DABF9A2C015A}"
String.Mono             ="Mono"
GUID.Phone              ="{B6755573-26D8-11d2-9265-DABF9A2C015A}"
String.Phone            ="Phone In"
GUID.Video              ="{B6755576-26D8-11d2-9265-DABF9A2C015A}"
String.Video            ="Video"
GUID.Headphones         ="{B6755579-26D8-11d2-9265-DABF9A2C015A}"
String.Headphones       ="Headphones"

GUID.DockedSpeakers     ="{B675557F-26D8-11d2-9265-DABF9A2C015A}"
String.DockedSpeakers   ="Docked Speakers"
GUID.EnableSPDIF        ="{B6755580-26D8-11d2-9265-DABF9A2C015A}"
String.EnableSPDIF      ="Enable SPDIF"
GUID.EnableMDSPDIF      ="{B6755582-26D8-11d2-9265-DABF9A2C015A}"
String.EnableMDSPDIF    ="Enable MD SPDIF"
GUID.DockedCD           ="{B6755581-26D8-11d2-9265-DABF9A2C015A}"
String.DockedCD         ="Docked CD"
GUID.DockedLine         ="{B6755584-26D8-11d2-9265-DABF9A2C015A}"
String.DockedLine       ="Docked Line"
GUID.DockedMic          ="{B6755587-26D8-11d2-9265-DABF9A2C015A}"
String.DockedMic        ="Docked Mic"

GUID.Fader              ="{B675558A-26D8-11d2-9265-DABF9A2C015A}"
String.Fader            ="Fade"

GUID.PCCard             ="{B675558B-26D8-11d2-9265-DABF9A2C015A}"
String.PCCard           ="PC Card"

GUID.CD2                ="{4CD4ECE0-8F3F-11d2-905C-00A0C99CFEB4}"
String.CD2              ="CD 2"
GUID.Line2              ="{4CD4ECE1-8F3F-11d2-905C-00A0C99CFEB4}"
String.Line2            ="Line 2"
GUID.Mic2               ="{4CD4ECE2-8F3F-11d2-905C-00A0C99CFEB4}"
String.Mic2             ="Mic 2"
GUID.CD                 ="{4CD4ECE3-8F3F-11d2-905C-00A0C99CFEB4}"
String.CD               ="CD"
GUID.Line               ="{4CD4ECE4-8F3F-11d2-905C-00A0C99CFEB4}"
String.Line             ="Line"
GUID.Mic                ="{4CD4ECE5-8F3F-11d2-905C-00A0C99CFEB4}"
String.Mic              ="Mic"


;; ESS friendly names (non-localizeable)
ESSGUID.WaveOut   ="{D6C86C60-51D8-11d1-A482-006097C79D21}"
ESSGUID.Synth     ="{D6C86C61-51D8-11d1-A482-006097C79D21}"
ESSGUID.Cd        ="{D6C86C62-51D8-11d1-A482-006097C79D21}"
ESSGUID.LineIn    ="{D6C86C63-51D8-11d1-A482-006097C79D21}"
ESSGUID.Mic       ="{D6C86C64-51D8-11d1-A482-006097C79D21}"
ESSGUID.PCSpeaker ="{D6C86C66-51D8-11d1-A482-006097C79D21}"

;; ESS friendly names (localizeable)
ESSPin.WaveOut    ="WaveOut"
ESSPin.Synth      ="Synthesizer"
ESSPin.Cd         ="CD"
ESSPin.LineIn     ="LineIn"
ESSPin.Mic        ="Microphone"
ESSPin.PCSpeaker  ="PC Speaker"

MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"
RunKey="SOFTWARE\Microsoft\Windows\CurrentVersion\Run"
WDM_MIDI="WDM-based Device"

KSCATEGORY_AUDIO="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCATEGORY_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
KSNAME_Wave="Wave"
KSNAME_UART="UART"
KSNAME_MUART="MPU401UART"
KSNAME_MSYNTH="MaestroSynth"
KSNAME_Topology="Topology"
KSNAME_Wavetable="Wavetable"

WDM.UART.szPname="MPU401"
WDM.FMSynth.szPname="FM Synthesizer"
MSynth.szPname="Maestro DLS Synthesizer"

Maestro.SvcDesc = "ESS Maestro2E Audio Driver (WDM)"
Maestro3D.SvcDesc = "ESS Canyon 3D Audio Driver (WDM)"
MaestroMPU.SvcDesc = "ESS Maestro2E MPU401 Driver (WDM)"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_ne2.txt ===
;;---------------------------------------------------------------;
;;
;; S T R I N G S
;;

[Strings]
MSFT="Microsoft"
NMGCMfgName="NeoMagic Corporation"
*WDM_NM6.DeviceDesc="NeoMagic MagicMedia 256 + AC97 Driver (WDM)"
WDM_NM6.Wave.szPname="NeoMagic Audio (WDM)"
WDM_NM6.Topology.szPname="NeoMagic Mixer (WDM)"
;; NM6 friendly names (non-localizeable)
NM6GUID.Pcbeep    = "{BDC05F40-A91A-11D1-84AF-00A024947B4F}"
NM6GUID.Phone     = "{BDC05F41-A91A-11D1-84AF-00A024947B4F}"
NM6GUID.Mic1      = "{BDC05F42-A91A-11D1-84AF-00A024947B4F}"
NM6GUID.Mic2      = "{BDC05F43-A91A-11D1-84AF-00A024947B4F}"
NM6GUID.LineIn    = "{BDC05F44-A91A-11D1-84AF-00A024947B4F}"
;NM6GUID.CdPlayer  = "{BDC05F45-A91A-11D1-84AF-00A024947B4F}"
NM6GUID.Video     = "{BDC05F45-A91A-11D1-84AF-00A024947B4F}"
NM6GUID.Aux       = "{BDC05F46-A91A-11D1-84AF-00A024947B4F}"
NM6GUID.LineOut   = "{BDC05F47-A91A-11D1-84AF-00A024947B4F}"
NM6GUID.HPOut     = "{BDC05F48-A91A-11D1-84AF-00A024947B4F}"
NM6GUID.MonoOut   = "{BDC05F49-A91A-11D1-84AF-00A024947B4F}"
NM6GUID.I2S       = "{BDC05F4A-A91A-11D1-84AF-00A024947B4F}"
NM6GUID.SPDIF     = "{BDC05F4B-A91A-11D1-84AF-00A024947B4F}"
NM6GUID.DockMic   = "{BDC05F4C-A91A-11D1-84AF-00A024947B4F}"
NM6GUID.DockLine  = "{BDC05F4D-A91A-11D1-84AF-00A024947B4F}"
NM6GUID.DockCD    = "{BDC05F4E-A91A-11D1-84AF-00A024947B4F}"
NM6GUID.DockAux   = "{BDC05F4F-A91A-11D1-84AF-00A024947B4F}"
NM6GUID.UseDKSPKER= "{BDC05F50-A91A-11D1-84AF-00A024947B4F}"
;; NM6 friendly names (localizeable)
NM6Pin.Pcbeep     = "PCBeep"
NM6Pin.Phone      = "Phone"
NM6Pin.Mic1       = "Microphone"
NM6Pin.Mic2       = "Mic2"
NM6Pin.LineIn     = "Line In"
;NM6Pin.CdPlayer   = "CD Audio"
NM6Pin.Video      = "Video In"
NM6Pin.Aux        = "ZV Audio"
NM6Pin.LineOut    = "Master Volume"
NM6Pin.HPOut      = "Line Out"
NM6Pin.MonoOut    = "Mono Out"
NM6Pin.I2S        = "I2S"
NM6Pin.SPDIF      = "SPDIF"

NM6Pin.DockMic    = "Dock Mic"
NM6Pin.DockLine   = "Dock Line"
NM6Pin.DockCD     = "Dock CD"
NM6Pin.DockAux    = "Dock Aux"
NM6Node.UseDKSPKER= "Enable Dock Speaker"

MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"
WDM_SWSYNTH="Microsoft SWSynth (WDM)"

Proxy.CLSID="{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KSCATEGORY_AUDIO="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCATEGORY_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
KSNAME_Wave="Wave"
KSNAME_Topology="Topology"

wdm_nm6.SvcDesc = "NeoMagic MagicMedia 256 + AC97 Driver (WDM)"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_usb.txt ===
[Strings]
MSFT="Microsoft"
MfgName="(Generic USB Audio)"

USB\CLASS_01.DeviceDesc="USB Audio Device"
USBGenericDesc="USB Audio Device"
USBGenericMicDesc="USB Audio Microphone"
USBGenericMIDIDesc="USB MIDI Device"

WDM_MIDI="WDM MIDI Device"

Altec.Mfg="Altec Lansing"
USB\VID_04D2&PID_FF05.DeviceDesc="Non-Compliant USB Audio Device"
USB\VID_04D2&PID_FF47&MI_00.DeviceDesc="Altec USB Audio"
USB\VID_04D2&PID_FF49&MI_00.DeviceDesc="Altec USB Audio"
USB\VID_04D2&PID_0070&MI_00.DeviceDesc="Altec USB Audio"
USB\VID_04D2&PID_2060&MI_00.DeviceDesc="ALST USB Telephone Handset"

Boston.Mfg="Boston Acoustics"
USB\VID_06FD&PID_0101&MI_00.DeviceDesc="Boston USB Audio Device"
USB\VID_06FD&PID_0102&MI_00.DeviceDesc="Boston USB Audio Device"
USB\VID_06FD&PID_0201&MI_00.DeviceDesc="Boston 2-piece USB Audio Device"

Canopus.Mfg="Canopus"
USB\VID_05F0&PID_0101&MI_00.DeviceDesc="Canopus DA-Port USB"

Dallas.Mfg="Dallas Semiconductor"
USB\VID_04FA&PID_4201&MI_00.DeviceDesc="Generic USB Audio Device"

EGOSYS.Mfg="EGO SYS"
USB\VID_0A92&PID_0011&MI_00.DeviceDesc="EGO SYS WaveTerminal U2A"

Harman.Mfg="Harman/Kardon"
USB\VID_05FC&PID_7849&MI_00.DeviceDesc="Harman/Kardon SoundSticks"

LabTec.Mfg="Labtec"
USB\VID_0672&PID_1041&MI_00.DeviceDesc="Labtec USB Audio"

Microsoft.Mfg="Microsoft"
USB\VID_045E&PID_0014&MI_00.DeviceDesc="Microsoft Digital Sound System 80"

NEC.Mfg="NEC"
USB\VID_0409&PID_0203&MI_00.DeviceDesc="NEC USB Audio"

Nokia.Mfg="Nokia"
USB\VID_04A6&PID_00B9&MI_00.DeviceDesc="Nokia USB Audio"

Onkyo.Mfg="Onkyo"
USB\VID_0746&PID_5500&MI_00.DeviceDesc="Onkyo SE-U55 Audio Device"
USB\VID_08BB&PID_2702&MI_00.DeviceDesc="USB Speakers"

Opcode.Mfg="Opcode"
USB\VID_06F1&PID_A021&MI_00.DeviceDesc="Opcode SonicPort Optical"
USB\VID_06F1&PID_A011&MI_00.DeviceDesc="Opcode SonicPort"

OVT.Mfg="OmniVision Technology"
USB\VID_05A9&PID_A518&REV_0100&MI_01.DeviceDesc="EZPhone Camera Mic"
USB\VID_05A9&PID_A518&REV_0110&MI_01.DeviceDesc="OmniVision Camera Mic"

Philips.Mfg="Philips"
USB\VID_0471&PID_0101&MI_00.DeviceDesc="Philips DSS 350/370 Speakers"
USB\VID_0471&PID_0104&MI_00.DeviceDesc="Philips DSS 330 Speakers"
USB\VID_0471&PID_0302&MI_01.DeviceDesc="Philips 645 USB Camera Mic"
USB\VID_0471&PID_0303&MI_01.DeviceDesc="Philips 646 USB Camera Mic"
USB\VID_0471&PID_0307&MI_01.DeviceDesc="Philips 675 USB Camera Mic"
USB\VID_0471&PID_0308&MI_01.DeviceDesc="Philips 680 USB Camera Mic"
USB\VID_0471&PID_030C&MI_01.DeviceDesc="Philips 690 USB Camera Mic"
;; These are too long, but are needed for audio property page
USB\VID_0471&PID_0310&MI_01.DeviceDesc="Philips ToUcam Fun Camera; Audio (Microphone)"
USB\VID_0471&PID_0311&MI_01.DeviceDesc="Philips ToUcam Pro Camera; Audio (Microphone)"
USB\VID_0471&PID_0312&MI_01.DeviceDesc="Philips PCVC750K Camera; Audio (Microphone)"
USB\VID_0911&PID_2512&MI_00.DeviceDesc="Philips SpeechMike Pro"

Roland.Mfg="Roland"
USB\VID_0582&PID_0002.DeviceDesc="Roland USB MIDI"

Telex.Mfg="Telex"
USB\VID_0562&PID_0000&MI_00.DeviceDesc="Telex USB Microphone"
USB\VID_0562&PID_0001&MI_00.DeviceDesc="Telex USB Microphone"
USB\VID_0562&PID_0002&MI_00.DeviceDesc="Telex USB Microphone"

Yamaha.Mfg="Yamaha"
USB\VID_0499&PID_1001&MI_00.DeviceDesc="Yamaha USB Audio"
USB\VID_0499&PID_3001&MI_00.DeviceDesc="Yamaha USB Audio"
USB\VID_0499&PID_3101&MI_00.DeviceDesc="Yamaha USB Audio"
USB\VID_0499&PID_1FFF.DeviceDesc="Yamaha USB MIDI"

MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"

;; USB Friendly Names (Non-localized>
USBGUID.BassBoost    = "{1A71EBE0-959E-11D1-B448-00A0C9255AC1}"
USBGUID.StereoExtend = "{FD4F0300-9632-11D1-B448-00A0C9255AC1}"

;; USB Friendly Names (localized>
USBNode.BassBoost    = "Bass Boost"
USBNode.StereoExtend = "Stereo Extender"

USBAudio.SvcDesc="USB Audio Driver (WDM)"

Proxy.CLSID = "{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KSCATEGORY_AUDIO="{6994ad04-93ef-11d0-a3cc-00a0c9223196}"
KSCATEGORY_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_sis.txt ===
[Strings]
MSFT="Microsoft"
SiSMfg="Silicon Integrated Systems Corp."
;;DiskDescription="SiS7018 WDM Driver Disk"
SiS7018.DeviceDesc="SiS 7018 Audio Driver "
SourceDiskName="SiS 7018 WDM Driver Disk"

SiS7018.Wave.szPname="SiS 7018 Wave"
SiS7018.Topology.szPname="SiS 7018 Mixer"
WDM_MIDI="SiS Audio Driver"
SiSAudioWDM.Wavetable.szPname="SiS Wavetable"

MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"

Proxy.CLSID="{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KSCATEGORY_AUDIO="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCATEGORY_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_TOPOLOGY="{DDA54A40-1E4C-11D1-A050-405705C10000}"
KSNAME_Wave="Wave"
KSNAME_Topology="Topology"
;KSNAME_FMSynth="FMSynth"
KSNAME_Wavetable="Wavetable"

SiS7018.SvcDesc = "Service for AC'97 Sample Driver (WDM)"

;; Nodes (non-localizeable)
ICHGUID.PhoneVolume     ="{0A8C1A87-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.PhoneMute       ="{0A8C1A88-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.LineInMute      ="{0A8C1A91-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.MainMix         ="{0A8C1A9B-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.3DBypass        ="{0A8C1A9E-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.3DEnable        ="{766DB5A4-6E94-11D2-9ADE-00C04F8EFB68}"
ICHGUID.BeepMix         ="{0A8C1A9F-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.HPVolume        ="{0A8C1AA5-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.HPMute          ="{0A8C1AA6-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.MonoOutSelect   ="{0A8C1AA9-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.WaveInSelect    ="{0A8C1AAE-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.MasterInVolume  ="{0A8C1AAF-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.MasterInMute    ="{0A8C1AB0-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.MicInVolume     ="{0A8C1AB2-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.MicInMute       ="{0A8C1AB3-42B0-11D2-95D2-00C04FB925D3}"
ICHGUID.SimulStereo     ="{B3AD50B5-3849-4983-ADD7-25E6268F912D}"

T2AUDIOGUID.WaveTable           ="{BC09A5E0-35B4-11d2-BE7A-0000210155AD}"
T2AUDIOPin.WaveTable            ="Wavetable"
T2AUDIOGUID.LineOut             ="{BC09A5E1-35B4-11d2-BE7A-0000210155AD}"
T2AUDIOPin.LineOut              ="Line In"
T2AUDIOGUID.Microphone          ="{BC09A5E2-35B4-11d2-BE7A-0000210155AD}"
T2AUDIOPin.Microphone           ="Microphone"
T2AUDIOGUID.PcBeep              ="{BC09A5E3-35B4-11d2-BE7A-0000210155AD}"
T2AUDIOPin.PcBeep               ="PC Beep"
T2AUDIOGUID.Video               ="{BC09A5E4-35B4-11d2-BE7A-0000210155AD}"
T2AUDIOPin.Video                ="Video"
T2AUDIOGUID.Phone               ="{BC09A5E5-35B4-11d2-BE7A-0000210155AD}"
T2AUDIOPin.Phone                ="Phone"
T2AUDIOGUID.PCMOut              ="{BC09A5E6-35B4-11d2-BE7A-0000210155AD}"
T2AUDIOPin.PCMOut               ="PCM Out"
T2AUDIOGUID.LineIn              ="{BC09A5E7-35B4-11d2-BE7A-0000210155AD}"
T2AUDIOPin.LineIn               ="Line In"
T2AUDIOGUID.SteroMix            ="{BC09A5E8-35B4-11d2-BE7A-0000210155AD}"
T2AUDIOPin.SteroMix             ="StereoMix"
T2AUDIOGUID.MonoMix             ="{BC09A5E9-35B4-11d2-BE7A-0000210155AD}"
T2AUDIOPin.MonoMix              ="MonoMix"
T2AUDIOGUID.3DControl           ="{BC09A5EA-35B4-11d2-BE7A-0000210155AD}"
T2AUDIOPin.3DControl            ="3D Control"
T2AUDIOGUID.3DDepth             ="{BC09A5EB-35B4-11d2-BE7A-0000210155AD}"
T2AUDIOPin.3DDepth              ="3D Depth"
T2AUDIOGUID.I2S                 ="{BC09A5EC-35B4-11d2-BE7A-0000210155AD}"
T2AUDIOPin.I2S                  ="I2S"
T2AUDIOGUID.SPDIF               ="{BC09A5ED-35B4-11d2-BE7A-0000210155AD}"
T2AUDIOPin.SPDIF                ="SP/DIF"



SiSGUID.20db                    ="{B470832C-D15A-11D2-A91F-0000E83B6F8E}"
;added by Albert Lee on Dec 7
SiSGUID.MICSEL                  ="{B470832D-D15A-11D2-A91F-0000E83B6F8E}"
;added by Albert Lee on Dec 9
SiSGUID.LOUDNESS                ="{B470832E-D15A-11D2-A91F-0000E83B6F8E}"
;added by Albert Lee on Dec 9
SiSGUID.BASS                    ="{B470832F-D15A-11D2-A91F-0000E83B6F8E}"
;added by Albert Lee on Dec 9
SiSGUID.TREBLE                  ="{B4708330-D15A-11D2-A91F-0000E83B6F8E}"
;added by Albert Lee on Dec 10
SiSGUID.S3DDEPTHVOLUME          ="{B4708331-D15A-11D2-A91F-0000E83B6F8E}"
;added by Albert Lee on Dec 10
SiSGUID.S3DDEPTHMUTE            ="{B4708332-D15A-11D2-A91F-0000E83B6F8E}"
;added by Albert Lee on Dec 13
T2AUDIOGUID.3DCENTER            ="{B4708333-D15A-11D2-A91F-0000E83B6F8E}"
T2AUDIOPin.3DCENTER             ="3D Center"
;added by Albert Lee on Dec 13
SiSGUID.S3DCENTERVOLUME         ="{B4708334-D15A-11D2-A91F-0000E83B6F8E}"
;added by Albert Lee on Jan 18
SiSGUID.20dbout                 ="{B4708335-D15A-11D2-A91F-0000E83B6F8E}"

SiSGUID.MICSELOUT               ="{B4708336-D15A-11D2-A91F-0000E83B6F8E}"


;; Nodes (localizeable)
ICHNode.PhoneVolume     ="Phone Volume"
ICHNode.PhoneMute       ="Phone Mute"
ICHNode.LineInMute      ="Line In Mute"
ICHNode.MainMix         ="Main Mix"
ICHNode.3DBypass        ="3D Bypass"
ICHNode.3DEnable        ="3D Enable"
ICHNode.BeepMix         ="Beep Mix"
ICHNode.HPVolume        ="Headphone Volume"
ICHNode.HPMute          ="Headphone Mute"
ICHNode.MonoOutSelect   ="Mono Out Select"
ICHNode.WaveInSelect    ="Wave In Select"
ICHNode.MasterInVolume  ="Wave In Volume"
ICHNode.MasterInMute    ="Wave In Mute"
ICHNode.MicInVolume     ="Mic In Volume"
ICHNode.MicInMute       ="Mic In Mute"
ICHNode.SimulStereo     ="Simulated Stereo"

;;modified by albert Lee on Jan 18
SiSPin.20db             ="Microphone Boost"             ;"+20dB Gain"
;added by Albert Lee on Dec 7
SiSPin.MICSEL           ="Alternate Mic Select"
;added by Albert Lee on Dec 9
SiSPin.LOUDNESS         ="LOUDNESS"
;added by Albert Lee on Dec 9
SiSPin.BASS             ="Bass"
;added by Albert Lee on Dec 9
SiSPin.TREBLE           ="Treble"
;added by Albert Lee on Dec 10
SiSPin.S3DDEPTHVOLUME   ="3D Depth Volume"
;added by Albert Lee on Dec 10
SiSPin.S3DDEPTHMUTE     ="3D Enable"
;added by Albert Lee on Dec 13
SiSPin.S3DCENTERVOLUME   ="3D Center Volume"
;;modified by albert Lee on Jan 18
SiSPin.20dbout          ="Microphone Boost"             ;"+20dB Gain"

SiSPin.MICSELOUT        ="Alternate Mic Select"

;;; RealTek
;; Pins GUID
SEFTGUID.VirtHallPin        ="{18D5C240-23F8-11d3-92C6-52544C29295E}"
SEFTGUID.VirtPubPin         ="{18D5C241-23F8-11d3-92C6-52544C29295E}"
SEFTGUID.VirtStadiumPin     ="{18D5C242-23F8-11d3-92C6-52544C29295E}"
SEFTGUID.VirtSurroundPin    ="{18D5C243-23F8-11d3-92C6-52544C29295E}"
;SEFTGUID.VirtKaraokPin      ="{BCFB9E44-24BA-11d3-92C6-52544C29295E}"
;SEFTGUID.VirtPitchShiftPin  ="{BCFB9E43-24BA-11d3-92C6-52544C29295E}"
;; Nodes GUID
SEFTGUID.SurroundSelect     ="{18D5C244-23F8-11d3-92C6-52544C29295E}"
SEFTGUID.SurroundMute       ="{18D5C245-23F8-11d3-92C6-52544C29295E}"
SEFTGUID.VirtHallMute       ="{F36EC0E0-2403-11d3-92C6-52544C29295E}"
SEFTGUID.VirtPubMute        ="{F36EC0E1-2403-11d3-92C6-52544C29295E}"
SEFTGUID.VirtStadiumMute    ="{F36EC0E2-2403-11d3-92C6-52544C29295E}"
SEFTGUID.VirtPitchShiftVol  ="{BCFB9E40-24BA-11d3-92C6-52544C29295E}"
;SEFTGUID.VirtKaraokMute     ="{BCFB9E41-24BA-11d3-92C6-52544C29295E}"
;SEFTGUID.VirtVoiceCancel    ="{BCFB9E42-24BA-11d3-92C6-52544C29295E}"

;; Pins Name
SEFTPin.VirtHallPin         ="Hall"
SEFTPin.VirtPubPin          ="Pub"
SEFTPin.VirtStadiumPin      ="Stadium"
SEFTPin.VirtSurroundPin     ="Surround Effect"
;SEFTPin.VirtKaraokPin       ="KaraOK Effect"
;SEFTPin.VirtPitchShiftPin   ="Pitch Shift"
;; Nodes Name
SEFTNode.SurroundSelect     ="Surround Select"
SEFTNode.SurroundMute       ="Surround Mute"
SEFTNode.VirtHallMute       ="Virtual Hall Mute"
SEFTNode.VirtPubMute        ="Virtual Pub Mute"
SEFTNode.VirtStadiumMute    ="Virtual Stadium Mute"
SEFTNode.VirtPitchShiftVol  ="Pitch Shift"
;SEFTNode.VirtKaraokMute     ="KaraOK Mute"
;SEFTNode.VirtVoiceCancel    ="Voice Cancellation"
;;; RealTek
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_neo.txt ===
;;---------------------------------------------------------------;
;;
;; S T R I N G S
;;

[Strings]
MSFT="Microsoft"
NMGCMfgName="NeoMagic Corporation"
*WDM_NM5.DeviceDesc=       "NeoMagic MagicMedia 256AV Audio Driver (WDM)"
*WDM_NM5A2.DeviceDesc=     "NeoMagic MagicMedia 256AV NMA2 Codec (WDM)"
WDM_NM5.Wave.szPname=      "NeoMagic AV Audio (WDM)"
WDM_NM5A2.Topology.szPname="NeoMagic AV Mixer (WDM)"
WDM_NM5A2.FMSynth.szPname= "NeoMagic AV FMSynth (WDM)"
WDM_NM5A2.UART.szPname=    "NeoMagic AV MPU401 (WDM)"

;; NM5 friendly names (non-localizeable)
NM5GUID.Pcbeep        = "{BDC05F40-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.Phone	      = "{BDC05F41-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.Mic1          = "{BDC05F42-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.Mic2          = "{BDC05F43-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.LineIn        = "{BDC05F44-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.CdPlayer      = "{BDC05F45-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.Video         = "{BDC05F46-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.Aux           = "{BDC05F47-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.LineOut       = "{BDC05F48-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.ZVPort	      = "{BDC05F4B-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.3DWide	      = "{BDC05F4C-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.FMSynth 	  = "{BDC05F4D-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.I2S     	  = "{BDC05F4E-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.20dbGain	  = "{BDC05F4F-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.DockSpeaker	  = "{BDC05F50-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.DockPhone	  = "{BDC05F51-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.DockMic1      = "{BDC05F52-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.DockMic2      = "{BDC05F53-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.DockLineIn    = "{BDC05F54-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.DockCdPlayer  = "{BDC05F55-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.DockVideo     = "{BDC05F56-C4B3-11D1-84AF-00A024947B4F}"
NM5GUID.DockAux       = "{BDC05F57-C4B3-11D1-84AF-00A024947B4F}"
;; NM5 friendly names (localizeable)
NM5Pin.Pcbeep         = "PCBeep"
NM5Pin.Phone          = "Phone"
NM5Pin.Mic1           = "Microphone"
NM5Pin.Mic2           = "Mic2"
NM5Pin.LineIn         = "Line In"
NM5Pin.CdPlayer       = "CD Audio"
NM5Pin.Video          = "Video In"
NM5Pin.Aux            = "Aux In"
NM5Pin.LineOut        = "Master Volume"
NM5Pin.ZVPort         = "ZV Audio"
NM5Pin.3DWide         = "3D Wide"
NM5Pin.FMSynth        = "FM Synth"
NM5Pin.I2S            = "ZV Audio"
NM5Pin.20dbGain       = "Enable 20dB Gain"
NM5Pin.DockSpeaker    = "Enable Docking Speaker"
NM5Pin.DockPhone      = "Dock Phone"
NM5Pin.DockMic1       = "Dock Mic"
NM5Pin.DockMic2       = "Dock Mic2"
NM5Pin.DockLineIn     = "Dock Line"
NM5Pin.DockCdPlayer   = "Dock CD Audio"
NM5Pin.DockVideo      = "Dock Video"
NM5Pin.DockAux        = "Dock Aux"

MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"
WDM_SWSYNTH="Microsoft SWSynth (WDM)"
WDM_FM="NeoMagic FMSynth (WDM)"

Proxy.CLSID="{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KSCATEGORY_AUDIO="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCATEGORY_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
KSNAME_Wave="Wave"
KSNAME_Topology="Topology"
KSNAME_FMSynth="FMSynth"
KSNAME_UART="Uart"

wdm_nm5.SvcDesc = "NeoMagic MagicMedia 256AV Audio Driver (WDM)"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_rip.txt ===
;*************************************
; Localizable text.
;*************************************


[Strings]
MSFT="Microsoft"
CNXT="Conexant"


RIPTIDE.DeviceDesc    = "Riptide Bus / Firmware Downloader"
;;NOAUDIO.DeviceDesc    = "Riptide Bus / Firmware Downloader (No Audio)"
RPAUDIO.DeviceDesc    = "Riptide Audio Device"
RPPOINT.DeviceDesc    = "Riptide Input Device"
RTGAMEPORT.DeviceDesc = "Riptide Gameport"

RipTideBusShortName = "Riptide Bus / Firmware Downloader"

MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"

Proxy.CLSID="{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KSCATEGORY_AUDIO="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCATEGORY_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_TOPOLOGY="{DDA54A40-1E4C-11D1-A050-405705C10000}"
KSNAME_Wave="Wave"
KSNAME_UART="UART"
;KSNAME_FMS="MIDI"
KSNAME_Topology="Topology"

Riptide.Wave.szPname="Conexant Audio"
Riptide.Topology.szPname="Conexant Topology"
Riptide.UART.szPname="Riptide MPU401"
;Riptide.FMS.szPname="FM Synthesizer"

rthwcls.SvcDesc  = "Conexant Riptide Bus / Firmware Downloader"
crtaud.SvcDesc   = "Conexant Riptide WDM Audio Driver"
gameport.SvcDesc = "Conexant Riptide Joystick Driver"
rpfun.SvcDesc    = "Conexant Riptide Dummy Driver"

SPSVCINST_ASSOCSERVICE= 0x00000002

KSAUDFNAME_RIPTIDE_20DB_GAIN="{185FEF02-9905-11D1-95A9-00C04FB925D3}"
RIPTIDE_20DB_GAIN="Microphone Boost"
KSPINNAME_RIPTIDE_VIDEO="{AD019006-6DB0-11D1-95A6-00C04FB925D3}"
RIPTIDE_VIDEO="Video"
KSPINNAME_RIPTIDE_SMIXER="{AD01900B-6DB0-11D1-95A6-00C04FB925D3}"
RIPTIDE_SMIXER="Stereo Mixer"
KSPINNAME_RIPTIDE_MMIXER="{AD01900C-6DB0-11D1-95A6-00C04FB925D3}"
RIPTIDE_MMIXER="Mono Mixer"
KSAUDFNAME_BASS_BOOST="{185FEF03-9905-11D1-95A9-00C04FB925D3}"
BASS_BOOST="Bass Boost"
KSAUDFNAME_STEREO_ENHANCE="{185FEF04-9905-11D1-95A9-00C04FB925D3}"
STEREO_ENHANCE="3D Stereo Enhance"
KSPINNAME_RIPTIDE_SPKPHONE="{185FEF05-9905-11D1-95A9-00C04FB925D3}"
RIPTIDE_SPKPHONE="Speaker Phone"
KSPINNAME_RIPTIDE_PCMOUT="{185FEF06-9905-11D1-95A9-00C04FB925D3}"
RIPTIDE_PCMOUT="All Wave"
KSPINNAME_RIPTIDE_WAVESTREAM="{185FEF07-9905-11D1-95A9-00C04FB925D3}"
RIPTIDE_WAVESTREAM="WaveStream"
KSPINNAME_RIPTIDE_PVR="{185FEF08-9905-11D1-95A9-00C04FB925D3}"
RIPTIDE_PVR="Voice Recognition"
;KSPINNAME_RIPTIDE_FM="{AD01900D-6DB0-11D1-95A6-00C04FB925D3}"
;RIPTIDE_FM="FM/OPL3"
KSPINNAME_RIPTIDE_MONOOUT="{AD01900A-6DB0-11D1-95A6-00C04FB925D3}"
RIPTIDE_MONOOUT="Mono Out"
KSPINNAME_RIPTIDE_HPOUT="{AD019009-6DB0-11D1-95A6-00C04FB925D3}"
RIPTIDE_HPOUT="Headphone"
KSPINNAME_RIPTIDE_HRTF="{185FEF09-9905-11D1-95A9-00C04FB925D3}"
RIPTIDE_HRTF="3D"
KSPINNAME_RIPTIDE_EAX="{185FEF0B-9905-11D1-95A9-00C04FB925D3}"
RIPTIDE_EAX="EAX"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_via.txt ===
;;---------------------------------------------------------------;
;;
;; S T R I N G S
;;

[Strings]
MSFT="Microsoft"
VIAMfgName="VIA Technologies, Inc."
*WDM_VIAudio.DeviceDesc="VIA AC'97 Audio Controller (WDM)"
*WDMVIAAudio.DeviceDesc="VIA AC'97 Audio Controller (WDM)"
WDM_VIA.Wave.szPname="VIA Audio (WAVE)"
WDM_VIA.Topology.szPname="VIA Audio (Topology)"
MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"
WDM_MIDI="WDM-based Device"
VIAGUID.Phone           ="{B0AA96E2-2255-11D2-B544-00201860A4D7}"
VIAGUID.Mic1            ="{B0AA96E3-2255-11D2-B544-00201860A4D7}"
VIAGUID.Mic2            ="{B0AA96E4-2255-11D2-B544-00201860A4D7}"
VIAGUID.Video           ="{B0AA96E5-2255-11D2-B544-00201860A4D7}"
VIAGUID.MonoOut         ="{B0AA96E6-2255-11D2-B544-00201860A4D7}"
VIAGUID.PcBeep          ="{B0AA96E7-2255-11D2-B544-00201860A4D7}"
VIAGUID.LineIn          ="{B0AA96E8-2255-11D2-B544-00201860A4D7}"
VIAGUID.CD              ="{B0AA96E9-2255-11D2-B544-00201860A4D7}"
VIAGUID.AUX             ="{B0AA96EA-2255-11D2-B544-00201860A4D7}"
VIAGUID.MicMux          ="{B0AA96EB-2255-11D2-B544-00201860A4D7}"
VIAGUID.WaveInMux        ="{B0AA96EC-2255-11D2-B544-00201860A4D7}"
VIAGUID.MonoOutMux        ="{B0AA96ED-2255-11D2-B544-00201860A4D7}"
VIAGUID.MonoOutMixDown        ="{B0AA96EE-2255-11D2-B544-00201860A4D7}"
VIAGUID.LineOutMainMix        ="{404126C0-2562-11D2-B544-C6DF79A0C118}"
VIAGUID.LineOutMiscMix        ="{404126C1-2562-11D2-B544-C6DF79A0C118}"
VIAGUID.MicIn20DB_Gain        ="{404126C2-2562-11D2-B544-C6DF79A0C118}"
;; for mic2 select
VIAGUID.Mic_Select        ="{A7D1A4A9-D024-11D2-A292-D937B2272531}"
VIAGUID.MonoOutVol        ="{404126C3-2562-11D2-B544-C6DF79A0C118}"
VIAGUID.MonoOutMute        ="{404126C4-2562-11D2-B544-C6DF79A0C118}"
VIAGUID.WaveOut                ="{404126C5-2562-11D2-B544-C6DF79A0C118}"
VIAGUID.3DCenterCtrl        ="{A7D1A4A1-D024-11D2-A292-D937B2272531}"
VIAGUID.3DDepthCtrl         ="{A7D1A4A2-D024-11D2-A292-D937B2272531}"
VIAGUID.3DOnOffCtrl         ="{A7D1A4A3-D024-11D2-A292-D937B2272531}"
VIAGUID.3DCenterCtrlPin        ="{A7D1A4A4-D024-11D2-A292-D937B2272531}"
VIAGUID.3DDepthCtrlPin        ="{A7D1A4A5-D024-11D2-A292-D937B2272531}"
VIAGUID.Stereo_OutPin        ="{A7D1A4A6-D024-11D2-A292-D937B2272531}"
VIAGUID.HPVolume        ="{A7D1A4A7-D024-11D2-A292-D937B2272531}"
VIAGUID.HPMute          ="{A7D1A4A8-D024-11D2-A292-D937B2272531}"
VIAGUID.SPDIF_Enable    ="{29F9B5E5-5D59-4f84-AC21-EAD28524269A}"

;; VIA friendly names (localizeable)
VIAPin.Phone            ="Phone"
VIAPin.Mic1             ="Mic"
VIAPin.Mic2             ="Mic2"
VIAPin.Video            ="Video"
VIAPin.MonoOut          ="MonoOut"
VIAPin.PcBeep           ="PC Speaker"
VIAPin.LineIn           ="Line-In"
VIAPin.CD               ="CD Player"
VIAPin.AUX              ="Aux"
VIAPin.WaveOut          ="WaveOut"
VIAPin.3DCenter                ="3D Center"
VIAPin.3DDepth                ="3D Depth"
VIAPin.Stereo_Out       ="Stereo Mixer"
VIANode.MicMux           ="MicMux"
VIANode.WaveInMux        ="WaveInMux"
VIANode.MonoOutMux      ="Mono Out Select"
VIANode.MonoOutMixDown        ="MonoOutMixDown"
VIANode.LineOutMainMix        ="LineOutMainMix"
VIANode.LineOutMiscMix        ="LineOutMiscMix"
VIANode.MicIn20DB_Gain  ="20dB boost"
;; for mic2 select
VIANode.MicSelect       ="Mic2 Select"
VIANode.MonoOutVol        ="MonoOutVol"
VIANode.MonoOutMute        ="MonoOutMute"
VIANode.3DCenter        ="3D Center Node"
VIANode.3DDepth                ="3D Depth Node"
VIANode.3DOnOff                ="3D Stereo Enhancement"
VIANode.HPVolume        ="Headphone Volume"
VIANode.HPMute          ="Headphone Mute"
VIANode.SPDIF_Enable    ="S/PDIF-Out Enable"

Proxy.CLSID="{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KSCATEGORY_AUDIO="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCATEGORY_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_TOPOLOGY="{DDA54A40-1E4C-11D1-A050-405705C10000}"
KSNAME_Wave="Wave"
KSNAME_UART="UART"
KSNAME_Topology="Topology"

WDM.UART.szPname = "VIA MIDI External Port"
viaudio.SvcDesc  = "VIA AC'97 Audio Controller (WDM)"
DiskDescription  = "VIA AC'97 Audio WDM Driver Disk"
;wdmaud.SvcDesc = "Microsoft WDM Virtual Wave Driver (WDM)"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_ymh.txt ===
[Strings]
MSFT="Microsoft"
YamahaMfg="Yamaha"
*WDM_opl3sax.DeviceDesc = "YAMAHA OPL3-SAx WDM Driver"
Reserved.DeviceDesc     = "YAMAHA OPL3-SAx Reserved"

YmhAud.Wave.szPname="Yamaha Audio"
YmhAud.Topology.szPname="Yamaha"

MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"
WDM_MIDI="WDM-based Device"

Proxy.CLSID="{17CCA71B-ECD7-11D0-B908-00A0C9223196}"
KSCATEGORY_AUDIO="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCATEGORY_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
KSNAME_Wave="Wave"
KSNAME_UART="UART"
KSNAME_FMSynth="FMSynth"
KSNAME_Topology="Topology"
KSNAME_Wavetable="Wavetable"

WDM.UART.szPname="Yamaha MPU-401"
WDM.FMSynth.szPname="Yamaha FM Synthesizer"

wdm_opl3sax.SvcDesc = "YAMAHA OPL3-SAx Audio Driver (WDM)"

LoseWDVM= "The wave device for voice modem may stop working"
LoseIVC= "The Intel Proshare Videoconferencing system may stop working"

SAxGUID.Ymersion        ="{1460F9A1-C963-11d1-BE8B-00A02495FA2D}"
SAxPin.Ymersion         ="Ymersion"
SAxGUID.YmersionType    ="{1460F9A0-C963-11d1-BE8B-00A02495FA2D}"
SAxPin.YmersionType     ="Ymersion Type"
SAxGUID.ZvPortControl   ="{A2E56740-F953-11d1-9180-0060977EDEC7}"
SAxPin.ZvPortControl    ="ZV Port"
SAxGUID.Mic20dbControl  ="{6745A220-F97D-11d1-9180-0060977EDEC7}"
SAxPin.Mic20dbControl   ="MIC +20dB"
SAxGUID.MonoInControl   ="{B969C540-F97D-11d1-9180-0060977EDEC7}"
SAxPin.MonoInControl    ="Mono In"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\setup\usa\wdma_ym2.txt ===
[Strings]

YMH="Yamaha "
YamahaMfg="Yamaha"
MSFT="Microsoft"

*WDM_DS1Legacy.DeviceDesc="YAMAHA Legacy DS1 WDM Driver"
*WDM_DS1Native.DeviceDesc="YAMAHA Native DS1 WDM Driver"
*WDM_DMUSIC.DeviceDesc="Yamaha Direct Music(WDM)"
*PNPB02F.DeviceDesc="Game port for Yamaha DS1"
*UnsupportedDev.DeviceDesc="Unsupported Yamaha Audio CODEC"
;;----------------------------------------
;; Native Part
;;-----------------------------------------
YmhAud.Wav1.szPname="Yamaha DS1x Native Audio"
YmhAud.Topo.szPname="Yamaha DS1x Topology"
YmhAud.DMus.szPname="Yamaha DMusic"

;;----------------------------------------
;; Legacy Part
;;-----------------------------------------
WDM.FMSyn2.szPname="Yamaha PCI FM Synthesizer"
WDM.UART.szPname="Yamaha PCI External MIDI"

;;Friendly Name (Non Localised)
DS1GUID.Mic1	="{48F3FC01-BDB3-11d1-BDBA-00AA00374674}"
DS1GUID.LineIn	="{48F3FC03-BDB3-11d1-BDBA-00AA00374674}"
DS1GUID.CD      ="{48F3FC04-BDB3-11d1-BDBA-00AA00374674}"
DS1GUID.Video	="{48F3FC05-BDB3-11d1-BDBA-00AA00374674}"
DS1GUID.Aux		="{48F3FC06-BDB3-11d1-BDBA-00AA00374674}"
DS1GUID.Phone	="{48F3FC07-BDB3-11d1-BDBA-00AA00374674}"
DS1GUID.PCBeep	="{48F3FC08-BDB3-11d1-BDBA-00AA00374674}"
DS1GUID.Master	="{48F3FC09-BDB3-11d1-BDBA-00AA00374674}"
DS1GUID.Mono	="{48F3FC0A-BDB3-11d1-BDBA-00AA00374674}"
DS1GUID.AGC		="{AA6FBBA1-BE52-11d1-BDBA-00AA00374674}"
DS1GUID.FM		="{8F89D0C2-C495-11d1-981C-006008034FD1}"
DS1GUID.SMIX 	="{9FE6E641-E99A-11d1-8A41-00A0C9776188}"

;;Friendly Name (Localised)
DS1Pin.Mic1		="Microphone"
DS1Pin.LineIn	="Line"
DS1Pin.CD		="CD Audio"
DS1Pin.Video	="Video"
DS1Pin.Aux		="Auxilliary"
DS1Pin.Phone	="Telephone"
DS1Pin.PCBeep	="PC Beep"
DS1Pin.Master	="Volume"
DS1Pin.Mono		="Mono Out"
DS1Pin.AGC		="Mic 20dB Enable"
DS1Pin.FM		="MIDI"
DS1Pin.SMIX		="Stereo Out"

MediaCategories="SYSTEM\CurrentControlSet\Control\MediaCategories"
CustomizeYamaha="SYSTEM\CurrentControlSet\Services\YAMAHA\Driver\DSXGWDM"
YamahaDMusicPort="SOFTWARE\Microsoft\DirectMusic\Defaults"

WDM_MIDI="WDM-based Device"

KSCATEGORY_AUDIO="{6994AD04-93EF-11D0-A3CC-00A0C9223196}"
KSCATEGORY_RENDER="{65E8773E-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_CAPTURE="{65E8773D-8F56-11D0-A3B9-00A0C9223196}"
KSCATEGORY_TOPOLOGY="{DDA54A40-1E4C-11D1-A050-405705C10000}"
KSCATEGORY_SYNTHESIZER="{DFF220F3-F70F-11D0-B917-00A0C9223196}"
Proxy.CLSID="{17CCA71B-ECD7-11D0-B908-00A0C9223196}" 
;;----------------------------------------
;; Native Part
;;-----------------------------------------

KSNAME_Wav1="Wave"
KSNAME_DMUS="DMusic"
KSNAME_Topo="Topology"

;;----------------------------------------
;; Legacy Part
;;-----------------------------------------
KSNAME_FMSyn2="FMSynth"
KSNAME_UART="UART"

wdm_DS1Native.SvcDesc="Yamaha DS1 Audio Driver (WDM)"
;;-----------------------------------------------
;;   Gameport
;;---------------------------------------------
SPSVCINST_ASSOCSERVICE= 0x00000002
StdMfg="(Standard system devices)"
gameport.SvcDesc="Game port for Yamaha DS1"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\sndrec32\readme.txt ===
This is a little subproject for Win32 Sound Recorder (SNDREC32.EXE).

This version of Sound Recorder is the merge of 2 parallel projects.
A-CliffG (Cliff Grabhorn: 404-378-5965) ported the NT 1.0 application
to OLE 2.0.  In order to support ACM, LaurieGr ported the VFW/Bombay
soundrecorder that was ACM aware to Win32.  After this, JohnYG merged
the two parallel efforts.

There are 2 essential subdirectories:

\+---SoundRec
 |
 +---O2Base

SoundRec contains the primary application sources.

O2Base is a class library that SoundRec is dependant on to provide
all OLE 2.0 support and debugging.  O2Base includes full support
for in-place editing and other useful OLE functionality.  Check it out!

SoundRec is dependant upon O2Base.LIB and so, must be
build *last*.

-jyg (JohnYG) 6-May-94
-stevedav 19-Jan-95      removed reference to mmcntrls.lib
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\sndrec32\o2base\cat.txt ===
sctrl.cxx	-- root object
sdv.cxx		-- dataview base
sinpl.cxx	-- inplace base

clsdesc.cxx	-- class descriptor initialization from res data
stdfact.cxx	-- standard class factory base
vwadvhld.cxx	-- ViewAdviseHolder object
stdenum.cxx	-- a static enumerator
iputils.cxx	-- Insert/Remove server (shared) menus
dvutils.cxx	-- oleclip formats, object descriptor, metafile
stgutils.cxx	-- stg on HGLOBAL, mem stream, 
memutils.cxx	-- OleAlloc/Free Mem/String
rotutils.cxx	-- Register/Revoke AsRunning
wutils.cxx	-- Resource & Window Rect utils
misc.cxx	-- OleVersion, Assert, Trace___
himetric.cxx	-- Himetric<--->Pix conversions
border.cxx	-- OLEBorder object
ipborder.cxx	-- IPB object
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\sndvol\readme.txt ===
This version of SndVol32.exe is obsolete and
has been replaced by a newer version located in

%_ntroot%\private\windows\media\mixerapp

Please update your sources to use this.

Contact Shawn Brown (Shawnb) at x31266


This change occured during 9/95 and this
directory and file should be removed in a
couple of months...
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\test\playsnd\playsnd.rtf ===
{\rtf1\ansi \deff0{\fonttbl{\f0\froman Tms Rmn;}{\f1\fdecor Symbol;}{\f2\fswiss Helv;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0; \red255\green255\blue0;\red255\green255\blue255;}{\stylesheet{\s244 \fs16\up6 \sbasedon0\snext0 footnote reference;}{\s245 \fs20 \sbasedon0\snext245 footnote text;}{\fs20 \snext0 Normal;}}{\info{\author Herman Rodent}{\creatim\yr1990\mo11\dy25\hr12\min5} {\version1}{\edmins16}{\nofpages0}{\nofwords0}{\nofchars0}{\vern8310}}\widowctrl\ftnbj \sectd \linex0\endnhere \pard\plain \fs20 {\fs16\up6 #{\footnote \pard\plain \s245 \fs20 {\fs16\up6 #} main_index}} {\fs16\up6 ${\footnote \pard\plain \s245 \fs20 { \fs16\up6 $} Main Index}} Main Index \par  \par \pard \li720 {\b Commands} \par \pard  \par \pard \li1440 {\uldb File Menu Commands}{\v file_menu \par }{\uldb Options Menu Commands}{\v options_menu} \par \pard \page {\fs16\up6 #{\footnote \pard\plain \s245 \fs20 {\fs16\up6 #} file_menu}} {\fs16\up6 ${\footnote \pard\plain \s245 \fs20 {\fs16\up6 $} File Menu Commands}} File Menu Commands \par \pard \li720\sb240 {\b Open}\tab Open a file. \par \pard \sb240 \page {\fs16\up6 #{\footnote \pard\plain \s245 \fs20 {\fs16\up6 #} options_menu}} {\fs16\up6 ${\footnote \pard\plain \s245 \fs20 {\fs16\up6 $} Options Menu Commands}} Options Menu Commands \par \pard \fi-2160\li2880\sb240 {\b Startup Directory}\tab Allows a specific directory to be set as the startup directory. \par \pard \sb240 \page  \par \pard  \par }
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\tools\docfmt\docfmt.txt ===
Documentation (no really)

Source Code Documentation Formatting Tool
  Version 1.09.04  Oct 16 1989 17:45:39   - MATTS

(more options will be added to future versions)

usage: 
docfmt [-x[ ]name] [-r[dh]] [-c[01] [-p[01] 
	[-o[ ]filename] [-d[ ]dirpath] [-l[ ]logfile] [-Zs] [files]
	[@argfile]

-x[ ]name	Defines <name> to be included as a valid doc level 
			 generated from the extracted file.

			Default if /x option is not specified is 'external.

-Zs			No output, error check only.  This is compatible with
			the 'C' compiler -Zs option.

-rd			Generate RTF output for printing.
			This generates an RTF file formatted for printed documentation.

-r			Same as -rd.

-rh			Generate RTF output for WinHelp.

				(Default RTF is for printing.)
If no -r option is specified, then output is generated for Ventura.

-p[01] 			Process output files.
			If set to 0, then the temporary files are not copied to
			the output file.

			if set to 1, then the files are copied.

			Default is to process files.

-c[01] 			Clean up intermediate files.
			If set to 0, then then temporary files are not deleted
			after the processing step.

			If set to 1, then then temporary files are deleted


			Default is to delete temporary files.

-ddirpath 	Specify the directory for temporary files.
			(only one tmp path should be specified)
			For speed, this should be a RAM drive if one is installed.
			Note that many temporary files will be created and the
			default RAMdrive setup only allows a minimum number
			of files to be created on the RAMdrive.
			
			Default directory is the current directory.

-llogfile 	Specify the logfile to process.  Many different log files
			may be specified.  These log files must be created by
			docfmt (by using /c1 and or /p0 )

			The default logfile is <file>.log where <file> is the
			complete path and file name (without extension) of 
			a file to be processed.

-ooutputfile 		Specify the outputrfile.
			(the output file results from processing the logfiles)

			The default output is <file>.rtf  when in /r output mode
			or <file>.vp when in Ventura output mode.
			<file> is the complete path and file name (without extension)
			of a file to be processed.

files 		File to be processed.  Multiple files can be specified.
			This file must be generated by Extract.

@argfile	Name of file to get list of arguments from.

			This allow a long list of arguments to be stored in a file
			similar to the way DOS Link works.

			Multiple @arg files may be put on the command line and they
			will be processed in order.

			The arg file must consist of one argument per line.

			Comments can be entered by putting a # or a ';' as the
			first significant (non-whitespace) character on a line.

Options may be placed in any order.

example: 
docfmt /xinternal /rd dspmgr.ext

		Defines the 'internal' doc level to be extracted.
		Specifies RTF output for documents.  
		The input file will be dspmgr.ext
		The output file will default to dspmgr.rtf
		The log file will default to dspmgr.log.  
		Temporary directory defaults to the current directory.
		Files will be cleaned by default.
		Files will be processed by default.

example: 
docfmt dspmgr.ext

		Defaults to 'external' as the doc level to be extracted.
		Defaults to Ventura output for documents.  
		The input file will be dspmgr.ext
		The output file will default to dspmgr.vp
		The log file will default to dspmgr.log.  
		Temporary directory defaults to the current directory.
		Files will be cleaned by default.
		Files will be processed by default.


example: docfmt /d \tmp /rh dspmgr.ext

		Defaults to 'external' as the doc level to be extracted.
		Specifies the output will be RTF for help.
		The input file will be dspmgr.ext
		The output file will default to dspmgr.rtf
		The log file will default to dspmgr.log.  
		Temporary directory is set to \tmp.
		Files will be cleaned by default.
		Files will be processed by default.

example: docfmt -x internal -x dspmgr -d\tmp /rh dspmgr.ext /c0 /p0

		Specifies the 'internal' doc level to be extracted.
		Specifies the 'dspmgr' doc level to be extracted.
		Specifies the output will be RTF for help.
		The input file will be dspmgr.ext
		The output file will default to dspmgr.rtf
		The log file will default to dspmgr.log.  
		Temporary directory is set to \tmp.
		Files will be not cleaned as specified
		Files will be not processed as specified.

example: docfmt /rd @args /c0

@args:
-----
# arg file for dspmgr
-xinternal
-xdspmgr
-d\tmp
/c1
/p0
-----
		Specifies the 'internal' doc level to be extracted.
		Specifies the 'dspmgr' doc level to be extracted.
		Specifies the output will be RTF for documents
		The input file will be dspmgr.ext
		The output file will default to dspmgr.rtf
		The log file will default to dspmgr.log.  
		Temporary directory is set to \tmp.
		Files will be not cleaned as specified (/c0 comes after arg file).
		Files will be not processed as specified.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\tools\docfmt\head.rtf ===
{\rtf1\ansi\deff0 {\fonttbl{\f0\fmodern pica;}{\f1\fmodern Courier;} {\f2\fmodern elite;}{\f3\fmodern prestige;}{\f4\fmodern lettergothic;} {\f5\fmodern gothicPS;}{\f6\fmodern cubicPS;} {\f7\fmodern lineprinter;}{\f8\froman palantino;} {\f9\fmodern avantegarde;}{\f10\fmodern spartan;}{\f11\fmodern metro;} {\f12\fmodern presentation;}{\f13\fmodern APL;}{\f14\fmodern OCRA;} {\f15\fmodern OCRB;}{\f16\froman boldPS;}{\f17\froman emperorPS;} {\f18\froman madaleine;}{\f19\froman zapf humanist;} {\f20\froman classic;}{\f21\froman roman f;}{\f22\froman roman g;} {\f23\froman roman h;}{\f24\froman timesroman;}{\f25\froman century;} {\f26\fswiss Helvetica;}{\f27\froman souvenir;}{\f28\froman garamond;} {\f29\froman caledonia;}{\f30\froman bodini;}{\f31\froman university;} {\f32\fscript script;}{\f33\fscript scriptPS;}{\f34\fscript script c;} {\f35\fscript script d;}{\f36\fscript commercial script;} {\f37\fscript park avenue;}{\f38\fscript coronet;} {\f39\fscript script h;}{\f40\fscript greek;}{\f41\froman kana;} {\f42\froman hebrew;}{\f43\froman roman s;}{\f44\froman russian;} {\f45\froman roman u;}{\f46\froman roman v;}{\f47\froman roman w;} {\f48\fdecor narrator;}{\f49\fdecor emphasis;} {\f50\fdecor zapf chancery;}{\f51\fdecor decor d;} {\f52\fdecor old english;}{\f53\fdecor decor f;}{\f54\fdecor decor g;} {\f55\fdecor cooper black;}{\f56\ftech Symbol;}{\f57\ftech linedraw;} {\f58\ftech math7;}{\f59\ftech math8;}{\f60\ftech bar3of9;} {\f61\ftech EAN;}{\f62\ftech pcline;}{\f63\ftech tech h;}} {\colortbl;\red0\green0\blue0;\red255\green0\blue0;\red0\green255\blue0;\red0\green0\blue255;} {\stylesheet{\fs20 \snext0 Normal;}}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\tools\docfmt\tail.rtf ===
[OTHER: Binary/data file]
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\tools\docfmt\todo.txt ===
Sort block types seperatly
	MSGs
	APIs
	INTs
	MASM

.OR. Operator on doclevel for selection

Add handling for private tags

On output, check for reference to same function on <f xx>

Check for duplicate function/etc definitions

Load import list of functions/messages, etc.
	Only match defined list
	info to use in .HPJ file also

Generate .HPJ file if /rh and none exists
	add options to set index, etc.

RTF output needs updating for new defined block types
	INT
	Regs
	MASM

Ventura output needs updating 
	To current RTF level
	To new defined block types

Add better/more complete error reporting/recovery
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\tools\extract\test\asmcb.txt ===
@HR = asmFuncWithCallback

This is an imaginary assembler function
to test AUTODOC.  It has an associated callback function.

@HO = Registers

@RNAME = <B>AL<D>

@RDESC = Specifies an 8-bit parameter value.

@RDESC = This is the second paragraph of a register description.

@RNAME = <B>BX<D>

@RDESC = Specifies a 16-bit parameter value.

@RNAME = <B>CL<D>

@RDESC = Specifies an 8-bit parameter value using one of the
following flags:

@RFLAG = RED

@RFLDESC = A flag value.

@RFLAG = WHITE

@RFLDESC = Another flag value.

@RNAME = <B>EDX<D>

@RDESC = Specifies a 32-bit pointer to a callback function.

@LE = 

@HO = Returns

The following registers contain meaningful return values:

@RNAME = <B>CX<D>

@RDESC = This register should come out before the conditionals are
printed.

@FLAG = FOOBAR

@FLDESC = Random flag before the conditionals.

@LE = 

@COND = If AL is zero, the callback was succcessfully installed, and the
following registers contain:

@COND = This is the second paragraph of a conditional.

@RNAME = <B>BX<D>

@RDESC = Specifies a 16-bit return value.

@RNAME = <B>DS:SI<D>

@RDESC = Points to the ASCIIZ name of the callback.

@LE = 

@COND = Otherwise, an error is specified as follows:

@RNAME = <B>AL<D>

@RDESC = Contains one of the following error codes:

@FLAG = ERROR1

@FLDESC = An error.

@FLAG = ERROR2

@FLDESC = Another error.

@LE = 

@LE = 

@HO = Uses

EFLAGS

@LE = 

@HO = Comments

Here are some comments pertaining to this function.  <B>This
sentence should be bold.  <MI>This sentence should be italicized.<D>

This is the second paragraph of comments.  The callback function is
specified as follows:

@HO = Callback

<B>asmCallback<D>

The name <B>asmCallback<D> is a placeholder for
the application-supplied callback function.

@HU = Registers

@RNAME = <B>AL<D>

@RDESC = Specifies an 8-bit parameter value.

@RNAME = <B>BX<D>

@RDESC = Specifies a 16-bit parameter value.

@RNAME = <B>CL<D>

@RDESC = Specifies an 8-bit parameter value using one of the
following flags:

@RFLAG = RED

@RFLDESC = A flag value.

@RFLAG = WHITE

@RFLDESC = Another flag value.

@LE = 

@HU = Returns

The following registers contain meaningful return values:

@RNAME = <B>AL<D>

@RDESC = If zero, the callback was successfully installed.
Otherwise, an error is specified by one of the following flags:

@FLAG = ERROR1

@FLDESC = An error.

@FLAG = ERROR2

@FLDESC = Another error.

@LE = 

@COND = This is an empty conditional to test the code.

None

@LE = 

@COND = Otherwise, the following registers are returned:

@RNAME = <B>BX<D>

@RDESC = Specifies a 16-bit return value.

@LE = 

@LE = 

@HU = Uses

EFLAGS

@LE = 

@HU = Comments

Here are some comments pertaining to the callback function.

@HO = See Also

asmFunc
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\media\winmm\api.doc ===
ۥ- `@	    -             I  (                                                       G    G G    G    G    G    G   U   g    g    g    g    g  
 q  
 g    {  !                                                             4   8     G                     	                                                             BOOL APIENTRY PlaySound(LPSTR lpszName, HANDLE hModule, DWORD dwFlags)BOOL APIENTRY sndPlaySound(LPSTR lpszName, DWORD dwFlags)

This function plays a waveform sound.

The function can play wave resources from an application, or wave files named either explicitly or via an alias in the [sounds] section of WIN.INI.

Parameter	Type/Description

lpszName	LPSTR  Points to the name of the resource, file or alias of the sound to be played.

hModule	HANDLE  If lpszName is the name of a resource then this parameter supplies the handle of the module from which the resource is to be loaded.

dwFlags	DWORD   Specifies the nature of lpszName and how the sound should be played.

Value	Meaning

SND_ALIAS	The lpszName parameter is an entry in the [sounds] section of WIN.INI of the form:  alias=filename.  filename is an unqualified, partially or fully qualified name of a waveform file.  See the description of the OpenFile API for how the file is found.  May not be used with either SND_FILENAME or SND_RESOURCE.

SND_FILENAME 	The lpszName parameter is the name of a wave file.  May not be used with either SND_ALIAS or SND_RESOURCE.

SND_RESOURCE	The lpszName parameter is the name of a resource.  May not be used with either SND_ALIAS or SND_FILENAME.

SND_ASYNC	Specifies that the sound should be played asynchronously.  The call to PlaySound will return as soon as the sound is started.  May not be used with SND_SYNC.

SND_SYNC	Specifies that the sound should be played synchronously.  The call to PlaySound will not return until the sound has completed playing.  May not be used with SND_ASYNC.
	This is the default mode of playing.

SND_NODEFAULT	This flag may be used in conjunction with the SND_ALIAS flag to prevent the default system sound being played if the alias supplied by the lpszName parameter cannot be found.

SND_NOWAIT	When this flag is set, the call to PlaySound will fail if no suitable wave device is immediately available to play the sound.   If this flag is not set, then, assuming that there is at least one wave device in the system, the call will wait for a wave device to become available.


Return Value	

The return value is TRUE if the sound is played and FALSE if not.  Note that if the SND_ASYNC flag is set a return value of TRUE indicates only that the thread has started which will attempt to play the sound.  There is no indication that the sound will actually be played.

Comments

The PlaySound function provides a simple mechanism to play wave files and wave files built into an application as resources of type WAVE.  To add a wave file to an application, the resource file should have an entry of this form:

	SoundName	WAVE		ding.wav

The resource can then be played by calling:

	PlaySound("SoundName", hModule, SND_RESOURCE);

Note that for all cases, the application must have enough memory quota to map the entire file into memory.  This limits the file size which can be played to about 250 k bytes.

When playing an alias name from WIN.INI the default action is to search for the given name and if not found to search for the SystemDefault entry and play that sound.  If  the application does not want the default sound to be played it should set the SND_NODEFAULT flag.

LL           @    OLECLI  DLL           @2 & OLESVR  DLL           @W X  DSWAP   EXE           @bi  WSWAP   EXE           @p?  SETUP   REG           @x  SHELL   DLL           @{@_  MAIN    CPL           @`} CONTROL INF           @[  APPS    INF           @b:  BOOL APIENTRY PlaySound(LPSTR lpszName, HANDLE hModule, DWORD dwFlags)BOOL APIENTRY sndPlaySound(LPSTR lpszName, DWORD dwFlags)                                                  B  I  J  P  U  ]            
  2  7  8  ?  Q  Y  w               (              v            	  	         )      W  ^      I                                                                                                                                                   
           K      +  -          @  B      0  2  A  C           z  |  %  '             	  	  	  	  	                 "  O  Q      5  7  G  I  ξ                                                                                                                                !     !     !     !     ! @`    ! `    ! `    !     !  2  	  Title   F        	
                     @@                        I     I  	 !  CG Times 	Symbol & Arial    +  +   +        "       h    !D    
 D                 8   Winmm API set   Herman RodentR C B Speed         
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\exts\filelist.txt ===
Here are the original filenames.

    D:\extensions\*.*
[defs]
[EXTspecs]
[HPspecs]
[PGIspecs]
[registry]
[rules]
[SGIspecs]

    D:\extensions\defs\*.*
glext.h
glxext.h
glxproto.h

    D:\extensions\EXTspecs\*.*
abgr.spec
blend_color.spec
blend_logic_op.spec
blend_minmax.spec
blend_subtract.spec
clip_volume_hint.spec
cmyka.spec
color_subtable.spec
color_table.spec
convolution.spec
copy_texture.spec
histogram.spec
import_context.spec
misc_attribute.spec
object_space_tess.spec
packed_pixels.spec
paletted_texture.spec
polygon_offset.spec
README
rescale_normal.spec
subtexture.spec
texture.spec
texture3D.spec
texture_object.spec
vertex_array.spec
visual_info.spec
visual_rating.spec

    D:\extensions\HPspecs\*.*
convolution_border_modes.spec
image_pipeline.txt
image_transform.spec

    D:\extensions\PGIspecs\*.*
misc_hints.spec
vertex_hints.spec

    D:\extensions\registry\*.*
enum_allocation.txt
extensions.reserved
registry

    D:\extensions\rules\*.*
extension_howto.txt
syntax.rules
template

    D:\extensions\SGIspecs\*.*
clipmap.spec*
color_matrix.spec
color_table.spec
depth_texture.spec*
detail_texture.spec
fbconfig.spec
fog_func.spec*
fog_offset.spec*
framezoom.spec*
generate_mipmap.spec
interlace.spec
make_current_read.spec
multisample.spec
pbuffer.spec
pixel_texture.spec
point_parameters.spec*
README
reference_plane.spec*
shadow.spec
sharpen_texture.spec
sprite.spec*
swap_control.spec
tag_sample_buffer.spec*
texture4D.spec
texture_border_clamp.spec
texture_color_table.spec
texture_edge_clamp.spec
texture_env_add.spec*
texture_filter4.spec
texture_lod.spec
texture_scale_bias.spec*
texture_select.spec
video_source.spec
video_sync.spec
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\exts\hpspecs\imgpipe.txt ===
Randi Rost
Hewlett-Packard
970-229-2447
rost@tortola.fc.hp.com

-----------------------------------------------------------------------------


OpenGL RGBA Image Rendering Pipeline (destination is an RGBA visual)

1.  Image data exist in main memory (as either RGBA or color index values)
2.  Extract subimage, performing byte swapping if necessary
3.  If pixels are RGBA pixels, convert all components to floats (logically,
    but not always necessary in practice)
4.  If pixels are RGBA pixels, convert all component groups to full RGBA
    (again, logically, but not necessary in practice)
5a. If pixels are RGBA pixels, perform ax+b operation on each component
5b. If pixels are color index pixels, perform index shift and offset on
    each index value
6a. If pixels are RGBA values, go through lookup table (OpenGL RGBA to RGBA
    lookup, controlled by GL_MAP_COLOR)
6b. If pixels are color index values, go through lookup table (OpenGL color
    index to RGBA lookup, controlled by GL_MAP_COLOR)
7.  LUT (COLOR_TABLE_SGI from the SGI_color_table extension)
8.  Convolve (including post-convolution scale and bias)
9.  LUT (POST_CONVOLUTION_COLOR_TABLE_SGI, from SGI_color_table extension)
10. Color matrix (including post-color matrix scale and bias)
11. LUT (POST_COLOR_MATRIX_COLOR_TABLE_SGI, from SGI_color_table extension)
12. Histogram, min/max
13. Zoom
14. Write fragments to the display (includes normal per-fragment operations:
    texture, fog, blend, etc.)

Notes:

Steps #1-6 and #13-14 are in core OpenGL.  The rest come from the imaging
extensions. Steps #7, 9, 11 come from the SGI_color_table extension.
Step #8 comes from the EXT_convolution extension.  Step #10 comes from
the SGI_color_matrix extension.  Step #12 comes from the EXT_histogram
extension.

You may notice there is nothing to support image rotation.  I would propose
that we add an affine transformation stage after step #9 in order to support
image scale, rotate, and translate with proper resampling controls.  To follow
the example set for the convolve and color matrix extensions, we may want
to follow this with a LUT that would be the means for accomplishing
window-level mapping.

The zoom function defined by core OpenGL seems insufficient and occurs at the
wrong point in the pipeline.

How are the typical imaging scale/rotate/resample operations performed in
the SGI model?  Steps 1-9 are performed on an image that is being loaded into
texture memory.  A rectangle is drawn with the geometry, texture coordinates,
and texturing controls to provide the proper scaling/rotation/resampling
behavior.  This approach seems to have several drawbacks:

	1) The programming model is not simple
	2) On many architectures, traffic on the graphics bus may be
	   doubled (write to texture memory, followed by a read from
	   texture memory and write into the framebuffer)
	3) Requires texture mapping hardware to have reasonable performance

The attached extension specification proposes adding an image transformation
step that occurs immediately after step #9.  This image transformation step
supports image scale/rotate/translate operations, followed by proper
resampling, followed by another color lookup table that can be used for
window level mapping.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\exts\pgispecs\mischint.txt ===
Name

    PGI_misc_hints

Name Strings

    GL_PGI_misc_hints

Version

    $Date: 1996/04/12 22:54:15 $ $Revision: 1.7 $

Number

    77

Dependencies

    None

Overview

    The extension allows the app to give various hints regarding 
    desired level of conformance, performance, features, etc.

New Procedures and Functions

    HintPGI

New Tokens

    Accepted by the <target> parameters of Hint and HintPGI:

        PREFER_DOUBLEBUFFER_HINT_PGI        107000
        STRICT_DEPTHFUNC_HINT_PGI           107030
        STRICT_LIGHTING_HINT_PGI            107031
        STRICT_SCISSOR_HINT_PGI             107032
        FULL_STIPPLE_HINT_PGI               107033
        NATIVE_GRAPHICS_BEGIN_HINT_PGI      107011
        NATIVE_GRAPHICS_END_HINT_PGI        107012
        CONSERVE_MEMORY_HINT_PGI            107005
        RECLAIM_MEMORY_HINT_PGI             107006
        ALWAYS_FAST_HINT_PGI                107020
        ALWAYS_SOFT_HINT_PGI                107021
        ALLOW_DRAW_OBJ_HINT_PGI             107022
        ALLOW_DRAW_WIN_HINT_PGI             107023
        ALLOW_DRAW_FRG_HINT_PGI             107024
        ALLOW_DRAW_MEM_HINT_PGI             107025
        CLIP_NEAR_HINT_PGI                  107040
        CLIP_FAR_HINT_PGI                   107041
        WIDE_LINE_HINT_PGI                  107042
        BACK_NORMALS_HINT_PGI               107043

    Accepted by the <pname> parameter of GetIntegerv

        GL_NATIVE_GRAPHICS_HANDLE_PGI       107010

Additions to Chapter 2 of the 1.0 Specification (OpenGL Operation)

    None

Additions to Chapter 3 of the 1.0 Specification (Rasterization)

    None

Additions to Chapter 4 of the 1.0 Specification (Per-Fragment Operations
and the Frame Buffer)

    None

Additions to Chapter 5 of the 1.0 Specification (Special Functions)

    Function HintPGI behaves the same as Hint, except it accepts
    only the hints described below (and hints from the PGI_vertex_hints
    extension).  HintPGI also has a slightly different prototype
    than Hint:

         void HintPGI ( GLenum target, GLint mode )

    HintPGI calls are sent to the server as Hint, so this function
    does not require additional server protocol.

    Functions Hint and HintPGI accept the following targets and modes:

    [All hints are subject to Push/Pop with the HINT_BIT attributes,
    except for these hints: PREFER_DOUBLEBUFFER_HINT_PGI, 
    NATIVE_GRAPHICS_BEGIN_HINT_PGI, NATIVE_GRAPHICS_END_HINT_PGI,
    RECLAIM_MEMORY_HINT_PGI.]

    <target> = PREFER_DOUBLEBUFFER_HINT_PGI

    This is a client-only mode.  In some cases the PGI client may
    change the singlebuffer/doublebuffer attributes of some GLX
    visuals.  If <mode> is TRUE, the client will tend to choose
    doublebuffer in these cases; if <mode> is FALSE, the client
    will tend to choose singlebuffer attributes.
    
    <target> = STRICT_DEPTHFUNC_HINT_PGI

    This hint indicates whether the application is willing to accept
    non-conformant depth functions.  When <mode> is TRUE or NICEST,
    GL uses strictly conformant depth functions.  When <mode> is
    FALSE, FASTEST, or DONT_CARE, GL may use an improper depth
    function.

    <target> = STRICT_LIGHTING_HINT_PGI

    This hint indicates whether the application is willing to accept
    non-conformant lighting operations.  When <mode> is TRUE or NICEST,
    GL uses strictly conformant lighting operations.  When <mode> is
    FALSE, FASTEST, or DONT_CARE, GL may use non-conformant lighting.

    <target> = STRICT_SCISSOR_HINT_PGI

    This hint indicates whether the application is willing to accept
    non-conformant scissoring operations.  When <mode> is TRUE or NICEST,
    GL uses strictly conformant scissoring.  When <mode> is FALSE,
    FASTEST, or DONT_CARE, GL may use non-conformant scissoring.

    <target> = FULL_STIPPLE_HINT_PGI

    This hint indicates whether the application is willing to accept
    non-conformant polygon stippling.  When <mode> is TRUE or NICEST,
    GL uses strictly conformant polygon stippling.  When <mode> is FALSE,
    FASTEST, or DONT_CARE, GL may use only a subset of the polygon
    stipple pattern.

    <target> = NATIVE_GRAPHICS_BEGIN_HINT_PGI

    This hint indicates that the application is about to perform
    rendering through the native API, outside the scope of GL.  If
    <mode> is one of the parameters POINT, LINE, or FILL, then GL
    prepares the native API for rendering of that kind of primitive.
    If <mode> is TRUE, NICEST, or DONT_CARE, GL prepares the native
    API for rendering of any primitive.  If <mode> is FASTEST, GL does
    minimal preparation of the native API, and the API may not be in a
    suitable state for any rendering.  If <mode> is FALSE, GL does nothing.

    <target> = NATIVE_GRAPHICS_END_HINT_PGI

    This hint indicates that the application has completed native-API
    rendering outside the scope of GL, and that the application will not
    use native-API rendering until the next NATIVE_GRAPHICS_BEGIN_HINT_PGI
    hint.  When <mode> is NICEST, GL assumes that the entire native-API
    state may be corrupted, and completely resets its state.  When <mode>
    is TRUE, DONT_CARE, or FASTEST, GL performs minimal synchronization
    of the native-API state.  When <mode> is FALSE, GL does not adjust
    the native-API state.

    <target> = CONSERVE_MEMORY_HINT_PGI

    The hint indicates that the application should attempt to conserve
    memory, perhaps at the cost of performance.  The <mode> parameter
    indicates the level of conservation, from least conservation to
    most conservation: FALSE, FASTEST, DONT_CARE, TRUE, or NICEST.
    When <mode> is FALSE, GL does little or no memory conservation;
    when <mode> is NICEST, GL does the most agressive memory conservation.

    <target> = RECLAIM_MEMORY_HINT_PGI

    The hint indicates that the application should reclaim unused
    memory immediately.  The <mode> parameter indicates how aggressively
    GL reclaims memory: FALSE, FASTEST, DONT_CARE, TRUE, or NICEST.
    When <mode> is FALSE, GL reclaims little or no memory;
    when <mode> is NICEST, GL does the most agressive memory reclaimation.

    <target> = ALLOW_DRAW_OBJ_HINT_PGI
    <target> = ALLOW_DRAW_WIN_HINT_PGI
    <target> = ALLOW_DRAW_SPN_HINT_PGI
    <target> = ALLOW_DRAW_MEM_HINT_PGI
    <target> = ALWAYS_FAST_HINT_PGI
    <target> = ALWAYS_SOFT_HINT_PGI

    The <mode> for each of these hints may be TRUE or FALSE only.
    Each of the ALLOW_DRAW_xxx_HINT_PGI hints indicates if OpenGL
    low-level rendering may occur at the object-coordinate level,
    window-coordinate level, fragment level, or plain-memory level.
    If <mode> for a given <target> is TRUE, rendering may occur at
    that level; if the <mode> is FALSE, rendering will not occur at
    that level (perhaps at the expense of performance or conformance).

    The two ALWAYS_xxxx_HINT_PGI hints describe combinations of the
    ALLOW_DRAW_xxx_HINT_PGI hints.  If ALWAYS_FAST_HINT_PGI is TRUE,
    then ALLOW_DRAW_OBJ_HINT_PGI is set TRUE, and the other ALLOW_DRAW_-
    xxx_HINT_PGI hints are set to FALSE.  If ALWAYS_FAST_HINT_PGI is
    FALSE, then all ALLOW_DRAW_xxx_HINT_PGI hints are set TRUE.
    If ALWAYS_SOFT_HINT_PGI is TRUE, then ALLOW_DRAW_OBJ_HINT_PGI
    is set FALSE, ALLOW_DRAW_MEM_HINT_PGI is set TRUE, and 
    ALLOW_DRAW_WIN_HINT_PGI and ALLOW_DRAW_SPN_HINT_PGI are set to
    TRUE or FALSE in an implementation-dependent manner.

    <target> = CLIP_NEAR_HINT_PGI
    <target> = CLIP_FAR_HINT_PGI

    These hints indicate that the application does not require
    hither/yon clipping when the depth test is disabled.  (The hint
    has no effect when depth testing is enabled.) If <mode> is FALSE,
    DONT_CARE, or FASTEST, GL may inhibit hither/yon clipping in some
    situations.  If <mode> is NICEST, or TRUE, GL performs ordinary
    hither/yon clipping.  If hither or yon clipping is disabled, and
    if fragment depth values fall outside the range [0.0-1.0], then
    rendering behavior is implementation-dependent.

    <target> = LINE_WIDE_HINT_PGI

    Indicates the rendering quality and speed of lines whose widths are
    not equal to 1.0.  Allowed values are GL_FASTEST, GL_NICEST, and
    GL_DONT_CARE.

    <target> = BACK_NORMALS_HINT

    Indicates that normals of backfacing facets should be inverted
    when lighting is enabled, even if LIGHT_MODEL_TWO_SIDE is disabled.
    The hint has no effect when lighting is disabled, and when
    LIGHT_MODEL_TWO_SIDE is enabled.  If <mode> is FALSE, DONT_CARE,
    or NICEST, GL inverts normals only when LIGHT_MODEL_TWO_SIDE is
    enabled.  If <mode> is FASTEST or TRUE, GL inverts the normals
    of backfacing facets whenever lighting is enabled.

Additions to Chapter 6 of the 1.0 Specification (State and State Requests)

    None

Additions to the GLX Specification

    None

GLX Protocol

    None

Interactions with PGI_vertex_hints

    If PGI_vertex_hints is available, then hints from that extension
    may be used with the HintPGI function.

Errors

    INVALID_ENUM is generated if <target> or <mode> for Hint or HintPGI
    is not one of the GLenums discussed above.

New State
								Initial
    Get Value				Get Command	Type	Value	Attrib
    ---------				-----------	----	-------	------

    STRICT_DEPTHFUNC_HINT_PGI           GetIntegerv      Z       TRUE    hint

    STRICT_LIGHTING_HINT_PGI            GetIntegerv      Z       TRUE    hint

    STRICT_SCISSOR_HINT_PGI             GetIntegerv      Z       TRUE    hint

    FULL_STIPPLE_HINT_PGI               GetIntegerv      Z       TRUE    hint

    CONSERVE_MEMORY_HINT_PGI            GetIntegerv      Z       FALSE   hint

    ALWAYS_FAST_HINT_PGI                GetIntegerv      Z       FALSE   hint

    ALWAYS_SOFT_HINT_PGI                GetIntegerv      Z       FALSE   hint

    ALLOW_DRAW_OBJ_HINT_PGI             GetIntegerv      Z       TRUE    hint

    ALLOW_DRAW_WIN_HINT_PGI             GetIntegerv      Z       TRUE    hint

    ALLOW_DRAW_SPN_HINT_PGI             GetIntegerv      Z       TRUE    hint

    ALLOW_DRAW_MEM_HINT_PGI             GetIntegerv      Z       TRUE    hint

    WIDE_LINE_HINT_PGI                  GetIntegerv      Z     DONT_CARE hint

    CLIP_NEAR_HINT_PGI                  GetIntegerv      Z       TRUE    hint

    CLIP_FAR_HINT_PGI                   GetIntegerv      Z       TRUE    hint

    BACK_NORMALS_HINT_PGI               GetIntegerv      Z       FALSE   hint


New Implementation Dependent State
								Initial
    Get Value				Get Command	Type	Value	Attrib
    ---------				-----------	----	-------	------

    PREFER_DOUBLEBUFFER_HINT_PGI        GetIntegerv      Z        +++   client

    NATIVE_GRAPHICS_HANDLE_PGI          GetIntegerv      Z        ***   client

    +++ Implementation-dependent.  (TRUE preferred.)

    *** 0 if direct rendering to native API is not available;
        otherwise, this is the handle for direct rendering to native API
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\exts\hpspecs\imgxform.txt ===
Name

    HP_image_transform

Name Strings

    GL_HP_image_transform

Version

    $Date: 1995/09/09 21:55:00 $ $Revision: 1.11 $

Number

    66

Dependencies

    EXT_texture is required
    EXT_convolution affects the definition of this extension
    SGI_color_table is required

Overview

    This extension provides support for scaling, rotation, and translation
    of two-dimensional pixel rectangles at a fixed location in the pixel
    transfer process.  The 2D image transformation attributes are specified
    as individual values so that that implementations may easily detect
    scaling and rotation values that lend themselves to optimization.  2D
    image transformation occurs immediately after the post-convolution color
    table stage of the pixel pipeline.  This extension also defines a color
    table that is applied immediately after the image transformation operation.

New Procedures and Functions

    void ImageTransformParameteriHP(enum target,
				    enum pname,
				    const int param)

    void ImageTransformParameterfHP(enum target,
				    enum pname,
				    const float param)

    void ImageTransformParameterivHP(enum target,
				     enum pname,
				     const int* params)

    void ImageTransformParameterfvHP(enum target,
				     enum pname,
				     const float* params)

    These routines are used to set image transformation attributes.
    The only allowable value for <target> at this time is
    IMAGE_TRANSFORM_2D_HP.  Allowable values for <pname> include:
    IMAGE_SCALE_X_HP, IMAGE_SCALE_Y_HP, IMAGE_ROTATE_ANGLE_HP,
    IMAGE_ROTATE_ORIGIN_X_HP, IMAGE_ROTATE_ORIGIN_Y_HP,
    IMAGE_TRANSLATE_X_HP, IMAGE_TRANSLATE_Y_HP, IMAGE_MAG_FILTER_HP,
    IMAGE_MIN_FILTER_HP, and IMAGE_CUBIC_WEIGHT_HP.

    void GetImageTransformParameterivHP(enum target,
				        enum pname,
				        const int* params)

    void GetImageTransformParameterfvHP(enum target,
				        enum pname,
				        const float* params)

    These routines are used to query image transformation attributes.
    The only allowable value for <target> at this time is
    IMAGE_TRANSFORM_2D_HP.  Allowable values for <pname> include:
    IMAGE_SCALE_X_HP, IMAGE_SCALE_Y_HP, IMAGE_ROTATE_ANGLE_HP,
    IMAGE_ROTATE_ORIGIN_X_HP, IMAGE_ROTATE_ORIGIN_Y_HP,
    IMAGE_TRANSLATE_X_HP, IMAGE_TRANSLATE_Y_HP, IMAGE_MAG_FILTER_HP,
    IMAGE_MIN_FILTER_HP, and IMAGE_CUBIC_WEIGHT_HP.

New Tokens

    Accepted by the <pname> parameter of ImageTransformParameteri,
    ImageTransformParameterf, ImageTransformParameteriv,
    ImageTransformParameterfv, GetImageTransformParameteriv and
    GetImageTransformParameterfv:

	IMAGE_SCALE_X_HP
	IMAGE_SCALE_Y_HP
	IMAGE_TRANSLATE_X_HP
	IMAGE_TRANSLATE_Y_HP
	IMAGE_ROTATE_ANGLE_HP
	IMAGE_ROTATE_ORIGIN_X_HP
	IMAGE_ROTATE_ORIGIN_Y_HP
	IMAGE_MAG_FILTER_HP
	IMAGE_MIN_FILTER_HP
    	IMAGE_CUBIC_WEIGHT_HP

    Accepted by the <params> parameter of ImageTransformParameteriHP,
    ImageTransformParameterfHP, ImageTransformParameterivHP, and
    ImageTransformParameterfvHP when <pname> is IMAGE_MAG_FILTER_HP
    or IMAGE_MIN_FILTER_HP:

	CUBIC_HP

    Accepted by the <params> parameter of ImageTransformParameteriHP,
    ImageTransformParameterfHP, ImageTransformParameterivHP, and
    ImageTransformParameterfvHP when <pname> is IMAGE_MIN_FILTER_HP:

	AVERAGE_HP

    Accepted by the <cap> parameter of Enable, Disable, and IsEnabled,
    and by the <target> parameter of ImageTransformParameterivHP,
    ImageTransformParameterfvHP, GetImageTransformParameterivHP,
    and GetImageTransformParameterfvHP:

	IMAGE_TRANSFORM_2D_HP

    Accepted by the <cap> parameter of Enable, Disable, and IsEnabled, and
    by the <target> parameter of ColorTableSGI, ColorTableParameterivSGI,
    ColorTableParameterfvSGI, GetColorTableSGI, GetColorTableParameterivSGI,
    and GetColorTableParameterfvSGI:

	POST_IMAGE_TRANSFORM_COLOR_TABLE_HP

    Accepted by the <target> parameter of ColorTableSGI,
    GetColorTableParameterivSGI, and GetColorTableParameterfvSGI:

	PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP

Additions to Chapter 2 of the 1.0 Specification (OpenGL Operation)

    None

Additions to Chapter 3 of the 1.0 Specification (Rasterization)

    The specification of two-dimensional image transformation operators
    is added to the GL specification in Section 3.6.2, "Pixel Transfer
    Modes."  2D image transformation operators are defined by calling
    ImageTransformParameteriHP, ImageTransformParameterfHP,
    ImageTransformParameterivHP, or ImageTransformParameterfvHP with
    <target> set to IMAGE_TRANSFORM_2D_HP.  Parameter values
    IMAGE_SCALE_X_HP and IMAGE_SCALE_Y_HP establish the scaling factors.
    IMAGE_TRANSLATE_X_HP and IMAGE_TRANSLATE_Y_HP set the translation
    factors.  IMAGE_ROTATE_ANGLE_HP sets the rotation angle to be
    used, and IMAGE_ROTATE_ORIGIN_X_HP and IMAGE_ROTATE_ORIGIN_Y_HP specify
    the point about which the image is to be scaled and rotated.  If the
    specified angle is positive, the rotation will be counterclockwise
    about the specified rotation origin.  If the specified angle is
    negative, the rotation will be clockwise about the origin.  All
    of these parameters (scale, rotation, translation, rotation origin)
    are specified in terms of the input image's coordinates.
    IMAGE_MAG_FILTER_HP establishes the resampling technique that is to be
    used after the other image transformation operators have been applied
    if the image is deemed to have been magnified.  IMAGE_MIN_FILTER_HP
    defines the resampling technique that is to be applied if the image
    is minified by the scaling factors.  IMAGE_CUBIC_WEIGHT_HP defines
    the cubic weighting coefficient that is to be used whenever the
    resampling technique is set to CUBIC_HP.

    The operations defined by the image transformation operation are
    added to the GL specification in Section 3.6.3, "Rasterization of
    Pixel Rectangles," immediately following the operations described in
    the EXT_convolution extension and the post convolution color table
    operation that is described in the SGI_color_table extension.  Image
    transformation is defined only for pixel rectangles that contain RGBA
    components or depth components at this stage of the pixel processing
    pipeline (color index values may have been converted to RGBA by a
    previous stage).  Image transformation is not applied to color index
    or stencil index pixel data.

    When enabled, the image transformation operation uses the current set
    of image transformation parameters to compute a new window coordinate
    for each incoming pixel.  Although image transformation parameters
    are specified separately, the scaling, rotation, and translation
    operations are all applied simultaneously (as if the transformation
    was encoded in a matrix and the resulting matrix was applied to each
    incoming pixel coordinate).  In the case of 2D image transformation,
    if (Rx,Ry) specifies the rotation origin, the effect of applying the
    2D image transformation operators can be defined as follows.  First,
    the image is translated by -Rx in the x direction and -Ry in the y
    direction so that its rotation origin is at the origin of the 2D
    coordinate system.  Second, the x and y scaling factors are
    applied, causing the image to be scaled as specified in x and y.
    Third, the rotation angle is applied, causing the image to be rotated
    about the origin by the specified angle.  Next, the image is translated
    by Rx in the x direction and Ry in the y direction.  Finally, the
    scaled and rotated image is translated by the specified translation
    factors.  Resampling occurs after the scaling/rotation/translation
    operations have been applied.

    The RGBA or depth value for each location is left unmodified by the image
    transformation.  Since multiple input pixels can be mapped into a single
    output pixel (minification of input image), or since output pixels might
    not have any input pixels mapped to them (magnification of input image),
    some method of resampling is required.  The resampling method to be
    used when the image is magnified is specified by calling
    ImageTransformParameteri, ImageTransformParameterf,
    ImageTransformParameteriv, or ImageTransformParameterfv with <pname>
    set to IMAGE_MAG_FILTER_HP and <params> set to NEAREST, LINEAR, or CUBIC_HP.
    The resampling method to be used when the image is minified is specified
    by calling ImageTransformParameteri, ImageTransformParameterf,
    ImageTransformParameteriv, or ImageTransformParameterfv with <pname>
    set to IMAGE_MIN_FILTER_HP and <params> set to NEAREST, LINEAR, CUBIC_HP,
    or AVERAGE_HP.  If the resampling method is NEAREST, each output pixel will
    have the value of the input pixel whose transformed coordinate value is
    nearest (in Manhattan distance).  If the resampling method is LINEAR, each
    output pixel will have a value that is the weighted average of the four input
    pixels whose transformed coordinate values are nearest.
    
    If the resampling method is CUBIC_HP, each output pixel will have a value
    that is affected by the 16 input pixels whose transformed coordinate
    values are nearest.  The 16 input pixels will be used to perform a cubic
    spline interpolation to determine the value of the output pixel.  The
    cubic weight factor is a floating point value that is applied to the
    cubic interpolation in the manner described in "Digital Image Warping"
    by George Wolberg (IEEE Computer Society Press, ISBN 0-8186-8944-7).
    Visually pleasing cubic weighting values are typically in the
    range [-1,0].  The values -1.0 and -0.5 are most commonly used.
    For the purpose of performing bicubic interpolation along the outer
    edge of the image, the outermost one pixel edge of the image is
    duplicated prior to performing the interpolation along the edges.

    If the resampling method is AVERAGE_HP, the values of all of the input
    pixels that contribute to the final output pixel will be averaged to
    determine the final output pixel value.

    The operation of the POST_IMAGE_TRANSFORM_COLOR_TABLE is added to the GL
    Specification in section 3.6.3, "Rasterization of Pixel Rectangles".
    This color table behaves in the manner described in the SGI_color_table
    extension, and it is located immediately after the image transformation
    operation.  This color table can be enabled or disabled separately from
    the image transformation operation by calling Enable or Disable with
    POST_IMAGE_TRANSFORM_COLOR_TABLE.  It can be modified using the procedures
    defined in the SGI_color_table extension.  The proxy version of this table
    can be set or queried by using a target value of
    PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE.

Additions to Chapter 4 of the 1.0 Specification (Per-Fragment Operations
and the Frame Buffer)

    The operation of image transformation during pixel copy and query
    operations is identical to the operation during pixel drawing and
    texture image definition.  The image transformation operation occurs
    immediately after the operations described by EXT_convolution and
    the post-convolution color table described by SGI_color_table, which
    follow section 4.3.2 (Reading Pixels) of the GL Specification.

Additions to Chapter 5 of the 1.0 Specification (Special Functions)

    GetImageTransformParameterivHP, and GetImageTransformParameterfvHP
    are not included in display lists, but are instead executed immediately.

Additions to Chapter 6 of the 1.0 Specification (State and State Requests)

    Integer and floating point query functions GetImageTransformParameterivHP
    and GetImageTransformParameterfvHP are provided.  <target> must be
    IMAGE_TRANSFORM_2D_HP.  <pname> is one of IMAGE_SCALE_X_HP,
    IMAGE_SCALE_Y_HP, IMAGE_TRANSLATE_X_HP, IMAGE_TRANSLATE_Y_HP,
    IMAGE_ROTATE_ANGLE_HP, IMAGE_ROTATE_ORIGIN_X_HP,
    IMAGE_ROTATE_ORIGIN_Y_HP, IMAGE_MAG_FILTER_HP, IMAGE_MIN_FILTER_HP,
    or IMAGE_CUBIC_WEIGHT_HP.  The value of the specified parameter is
    returned in <params>.

Additions to the GLX Specification
    
    None

Dependencies on EXT_texture

    EXT_texture is required.  This extension builds on the notion of
    internal image format, which is defined by EXT_texture.

Dependencies on EXT_convolution

    None, except that image transformation follows the convolution
    operation (and its scale and bias).  If the post-convolution color
    table is supported, the image transformation operation will occur
    immediately after the post-convolution color table operation.  If
    convolution is not supported, the location with respect to all other
    pixel operations remains the same.

Dependencies on SGI_color_table

    SGI_color_table is required.  This extension builds on the notion of
    color lookup tables at various locations in the pixel processing pipeline.
    This extension adds another table to the list specified by SGI_color_table.
    This new table can be manipulated using the procedures defined by
    SGI_color_table.

Errors

    INVALID_ENUM is generated if ImageTransformParameteriHP,
    ImageTransformParameterfHP, ImageTransformParameterivHP,
    ImageTransformParameterfvHP, GetImageTransformParameterivHP,
    or GetImageTransformParameterfvHP is called with <target> set to
    a value other than IMAGE_TRANSFORM_2D_HP.

    INVALID_ENUM is generated if GetImageTransformParameterivHP or
    GetImageTransformParameterfvHP is called with <pname> set to
    IMAGE_MAG_FILTER_HP and <params> is not one of NEAREST, LINEAR,
    or CUBIC_HP.

    INVALID_ENUM is generated if GetImageTransformParameterivHP or
    GetImageTransformParameterfvHP is called with <pname> set to
    IMAGE_MIN_FILTER_HP and <params> is not one of NEAREST, LINEAR,
    CUBIC_HP, or AVERAGE_HP.

    INVALID_VALUE is generated if ImageTransformParameteriHP,
    ImageTransformParameterfHP, ImageTransformParameterivHP, or
    ImageTransformParameterfvHP is called with <pname> set to
    IMAGE_CUBIC_WEIGHT_HP and <params> is a value outside of
    the range [0,1].

    INVALID_OPERATION is generated if ImageTransformParameteriHP,
    ImageTransformParameterfHP, ImageTransformParameterivHP,
    ImageTransformParameterfvHP, GetImageTransformParameterivHP,
    or GetImageTransformParameterfvHP is called between execution of
    Begin and the corresponding execution of End.

New State
										Initial
    Get Value					Get Command		Type	Value 	  Attrib
    ---------					-----------		----	-------   ------
    IMAGE_TRANSFORM_2D_HP		IsEnabled			 B	   False  pixel/enable
    IMAGE_SCALE_X_HP			GetImageTransformParameterf	 R	   1 	  pixel
    IMAGE_SCALE_Y_HP			GetImageTransformParameterf	 R	   1 	  pixel
    IMAGE_TRANSLATE_X_HP		GetImageTransformParameterf	 R	   0 	  pixel
    IMAGE_TRANSLATE_Y_HP		GetImageTransformParameterf	 R	   0 	  pixel
    IMAGE_ROTATE_ANGLE_HP		GetImageTransformParameterf	 R	   0 	  pixel
    IMAGE_ROTATE_ORIGIN_X_HP		GetImageTransformParameterf	 R	   0 	  pixel
    IMAGE_ROTATE_ORIGIN_Y_HP		GetImageTransformParameterf	 R	   0 	  pixel
    IMAGE_MAG_FILTER_HP			GetImageTransformParameteri	 Z3	NEAREST   pixel
    IMAGE_MIN_FILTER_HP			GetImageTransformParameteri	 Z4	NEAREST   pixel
    IMAGE_CUBIC_WEIGHT_HP		GetImageTransformParameterf	 R	   -1 	  pixel
    POST_IMAGE_TRANSFORM_COLOR_TABLE_HP	IsEnabled		  	 B	 False	  pixel/enable
    POST_IMAGE_TRANSFORM_COLOR_TABLE_HP	GetColorTableHP		       3 x I	 empty	    -

New Implementation Dependent State

    None

Issues

    What is the behavior of ReadPixels when the image transformation
    is enabled?  One suggestion is to assume that the specified width
    and height of the region being read are used to define the size
    of the 2D array in host memory in which the pixel values are to
    be written.  Any pixels that would be written outside of this region
    would be clipped.  Why would anyone want to rotate/scale during
    a readback operation anyway?  Another suggestion is that image
    transformation is ignored during readback, but this makes it
    different than the other pixel transfer operations.

Notes

    I originally wrote this extension to utilize an image transformation
    matrix that worked the same way the other OpenGL matrices worked.
    However, we found that we could not easily extract the rotation and
    scaling information and use it to select optimized software routines
    for special cases like integer zoom and 90 degree rotations.
    Consequently, I've reverted back to specifying the image transformation
    parameters individually and the image transformation operation
    in a more rigid way.

    I would rather have separate state setting calls for each of the
    2D image transformation parameters.  However, SGI's convolution,
    color table, and histogram extension all use FooParameter{i,f}v calls
    to set the state.  I've mimicked their API for three reasons:
	1. For consistency with those extensions
	2. To maximize the likelihood of industry acceptance
	   of this extension
	3. To allow for the possibility of 1D and 3D image
	   transforms at a future time.

    I have not excluded the ability to scale, rotate, and translate
    depth component values.  I thought that image transformation might
    be useful when the <format> was DEPTH_COMPONENT (i.e., reading or writing
    depth buffer values).  In this case, the "image" will have x and y values
    that define the pixel locations, and depth (z) values instead of color
    values.  The depth values will end up being treated as a single channel
    image.  This capability might be necessary if you have a depth buffer
    associated with an image that you want to remain registered as it is
    stored in the frame buffer.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\exts\hpspecs\cborder.txt ===
Name

    HP_convolution_border_modes

Name Strings

    GL_HP_convolution_border_modes

Version

    $Date: 1995/09/09 10:13:00 $ $Revision: 1.2 $

Number

    67

Dependencies

    EXT_convolution is required

Overview

    This extension provides some additional border modes for the
    EXT_convolution extension.

New Procedures and Functions

    None

New Tokens

    Accepted by the <param> parameter of ConvolutionParameteriEXT,
    and ConvolutionParameterfEXT, and by the <params> parameter of
    ConvolutionParameterivEXT and ConvolutionParameterfvEXT, when the
    <pname> parameter is CONVOLUTION_BORDER_MODE_EXT:

	IGNORE_BORDER_HP
	CONSTANT_BORDER_HP
	WRAP_BORDER_HP

    Accepted by the <pname> parameter of ConvolutionParameterivEXT,
    ConvolutionParameterfvEXT, GetConvolutionParameterivEXT, and
    GetConvolutionParameterfvEXT:

	CONVOLUTION_BORDER_COLOR_HP

Additions to Chapter 2 of the 1.0 Specification (OpenGL Operation)

    None

Additions to Chapter 3 of the 1.0 Specification (Rasterization)

    The description of the convolution border mode is replaced with
    the following:

    The convolution border mode for a specific convolution filter is
    specified using ConvolutionParameteriEXT with the <target>
    parameter set to the name of the filter, the <pname> parameter
    set to CONVOLUTION_BORDER_MODE_EXT, and <param> set to one of
    REDUCE_EXT, IGNORE_BORDER_HP, CONSTANT_BORDER_HP, or
    WRAP_BORDER_HP.

    The width and height of source images convolved with border mode
    REDUCE_EXT are reduced by Wf-1 and Hf-1, respectively.  If this
    reduction would generate a resulting image with zero or negative
    width and/or height, the output is simply null, with no error
    generated.  The coordinates of the image that results from a
    convolution with border mode REDUCE_EXT are zero through Ws-Wf
    in width, and zero through Hs-Hf in height.  In cases where
    errors can result from the specification of invalid image
    dimensions, it is these resulting dimensions that are tested,
    not the dimensions of the source image.  (A specific example is
    TexImage1D and TexImage2D, which specify constraints for image
    dimensions.  Even if TexImage1D or TexImage2D is called with a
    null pixel pointer, the dimensions of the resulting texture image
    are those that would result from the convolution of the specified
    image.)  

    For the remaining border modes, we define Cw = floor(Wf / 2)
    and Ch = floor(Hf / 2).  The coordinates (Cw, Ch) define the
    center of the convolution filter.

    If the convolution border mode is IGNORE_BORDER_HP, the output
    image has the same dimensions as the source image.  The convolution
    filter is moved around the source image so that its center passes
    over every pixel in the source image.  At each location, the sum of
    products is computed and the result is written in the destination
    image at the location that corresponds to the pixel location where
    the convolution filter is centered.  However, the sum of products
    is not computed for any pixel where the convolution filter extends
    beyond one of the edges of the source image.  Instead, for these
    locations, the pixel value from the source image is copied to
    the destination image.
    
    The convolution border mode CONSTANT_BORDER_HP is identical to
    IGNORE_BORDER_HP except that for each pixel where the convolution
    filter extends beyond one of the edges of the source image, a value
    equal to the current border color will be used as the value for
    the source image.  The current convolution border color is set by
    calling ConvolutionParameterivEXT or ConvolutionParameterfvEXT with
    <pname> set to CONVOLUTION_BORDER_COLOR_HP and <params> containing
    four values that comprise the RGBA color to be used as the image
    border.  Integer color components are interpreted linearly such that
    the most positive integer maps to 1.0, and the most negative integer
    maps to -1.0.  Floating point color components are clamped to the
    range [0,1] when they are specified.

    If the convolution border mode is WRAP_BORDER_HP, the output image
    has the same dimensions as the source image, and the source image is
    assumed to be continuously wrapped in both x and y directions.
    Therefore, source image pixels in the Cw columns on the right edge
    are used in the convolution computation for the Cw columns on the
    right edge of the image, and vice versa.  Similarly, source image
    pixels in the Ch rows on the top of the image are used in the
    convolution computation for the Ch rows on the bottom of the
    image and vice versa.

Additions to Chapter 4 of the 1.0 Specification (Per-Fragment Operations
and the Frame buffer)

    None

Additions to Chapter 5 of the 1.0 Specification (Special Functions)

    None

Additions to Chapter 6 of the 1.0 Specification (State and State Requests)

    None

Dependencies on EXT_convolution

    EXT_convolution is required.  This extension adds capability to
    the convolution operations defined in that extension.

Errors

    INVALID_ENUM is generated if ConvolutionParameterivEXT or
    ConvolutionParameterfvEXT parameter <pname> is not
    CONVOLUTION_FILTER_SCALE_EXT, CONVOLUTION_FILTER_BIAS_EXT,
    CONVOLUTION_BORDER_MODE_EXT, or CONVOLUTION_BORDER_COLOR_HP.

    INVALID_ENUM is generated if ConvolutionParameteriEXT,
    ConvolutionParameterfEXT, ConvolutionParameterivEXT, or
    ConvolutionParameterfvEXT parameter <pname> is
    CONVOLUTION_BORDER_MODE_EXT and parameter <params> is
    not one of REDUCE_EXT, IGNORE_BORDER_HP, CONSTANT_BORDER_HP,
    or WRAP_BORDER_HP.

    INVALID_ENUM is generated if GetConvolutionParameterivEXT or
    GetConvolutionParameterfvEXT parameter <pname> is not
    CONVOLUTION_FILTER_SCALE_EXT, CONVOLUTION_FILTER_BIAS_EXT,
    CONVOLUTION_BORDER_MODE_EXT, CONVOLUTION_FORMAT_EXT,
    CONVOLUTION_WIDTH_EXT, CONVOLUTION_HEIGHT_EXT,
    MAX_CONVOLUTION_WIDTH_EXT, MAX_CONVOLUTION_HEIGHT_EXT,
    or CONVOLUTION_BORDER_COLOR_HP.

New State
									 Initial
    Get Value				Get Command		Type	  Value 	Attrib
    ---------				-----------		----	 -------	------
    CONVOLUTION_BORDER_COLOR_HP	   GetConvolutionParameterfvHP	 C	(0,0,0,0)	pixel

New Implementation Dependent State

    None
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\exts\pgispecs\verthint.txt ===
Name

    PGI_vertex_hints

Name Strings

    GL_PGI_vertex_hints

Version

    $Date: 1996/04/12 22:54:16 $ $Revision: 1.6 $

Number

    76

Dependencies

    None

Overview

    The extension allows the app to give hints regarding what kinds of
    OpenGL function calls will happen between Begin/End pairs.

New Procedures and Functions

    None

New Tokens

    Accepted by the <target> parameters of Hint and HintPGI:

        VERTEX_DATA_HINT_PGI               107050
        VERTEX_CONSISTENT_HINT_PGI         107051
        MATERIAL_SIDE_HINT_PGI             107052
        MAX_VERTEX_HINT_PGI                107053

    Accepted by the <mode> parameters of Hint and HintPGI:

        COLOR3_BIT_PGI                  0x00010000
        COLOR4_BIT_PGI                  0x00020000
        EDGEFLAG_BIT_PGI                0x00040000
        INDEX_BIT_PGI                   0x00080000
        MAT_AMBIENT_BIT_PGI             0x00100000
        MAT_AMBIENT_AND_DIFFUSE_BIT_PGI 0x00200000
        MAT_DIFFUSE_BIT_PGI             0x00400000
        MAT_EMISSION_BIT_PGI            0x00800000
        MAT_COLOR_INDEXES_BIT_PGI       0x01000000
        MAT_SHININESS_BIT_PGI           0x02000000
        MAT_SPECULAR_BIT_PGI            0x04000000
        NORMAL_BIT_PGI                  0x08000000
        TEXCOORD1_BIT_PGI               0x10000000
        TEXCOORD2_BIT_PGI               0x20000000
        TEXCOORD3_BIT_PGI               0x40000000
        TEXCOORD4_BIT_PGI               0x80000000
        VERTEX23_BIT_PGI                0x00000004
        VERTEX4_BIT_PGI                 0x00000008

Additions to Chapter 2 of the 1.0 Specification (OpenGL Operation)

    None

Additions to Chapter 3 of the 1.0 Specification (Rasterization)

    None

Additions to Chapter 4 of the 1.0 Specification (Per-Fragment Operations
and the Frame Buffer)

    None

Additions to Chapter 5 of the 1.0 Specification (Special Functions)

    Functions Hint and HintPGI accept the following targets and modes:

    [All hints are subject to Push/Pop with the HINT_BIT attributes.]

    <target> = VERTEX_DATA_HINT_PGI

    This hint indicates which GL calls might occur between Begin/End pairs.
    If <mode> is any of FALSE, then the hint is "disabled" -- this means
    the application is not making any predictions about which GL calls
    might occur between Begin/End pairs.  Otherwise, <mode> must be a
    bitwise OR of the following bits:

        COLOR3_BIT_PGI                     Color3*
        COLOR4_BIT_PGI                     Color4*
        EDGEFLAG_BIT_PGI                   EdgeFlag*
        INDEX_BIT_PGI                      Index*
        MAT_AMBIENT_BIT_PGI                Material*(pname=AMBIENT)
        MAT_AMBIENT_AND_DIFFUSE_BIT_PGI    Material*(pname=AMBIENT_AND_DIFFUSE)
        MAT_DIFFUSE_BIT_PGI                Material*(pname=DIFFUSE)
        MAT_EMISSION_BIT_PGI               Material*(pname=EMISSION)
        MAT_COLOR_INDEXES_BIT_PGI          Material*(pname=COLOR_INDEXES)
        MAT_SHININESS_BIT_PGI              Material*(pname=SHININESS)
        MAT_SPECULAR_BIT_PGI               Material*(pname=SPECULAR)
        NORMAL_BIT_PGI                     Normal*
        TEXCOORD1_BIT_PGI                  TexCoord1*
        TEXCOORD2_BIT_PGI                  TexCoord2*
        TEXCOORD3_BIT_PGI                  TexCoord3*
        TEXCOORD4_BIT_PGI                  TexCoord4*
        VERTEX23_BIT_PGI                   Vertex[23]*
        VERTEX4_BIT_PGI                    Vertex4

    At least one of the bits VERTEX23_BIT_PGI or VERTEX4_BIT_PGI must be
    set in <mode>.

    Each bit above indicates that one of the associated OpenGL functions
    might occur between Begin/End pairs.  If <mode> does not contain a
    given bit, then GL may assume that associated functions will not occur
    between Begin/End pairs -- in this case, behavior of these functions
    is undefined.  (But the functions will not cause program termination.)  

    <target> = VERTEX_CONSISTENT_HINT_PGI

    This hint indicates that OpenGL function calls will occur
    consistently between Begin/End pairs.  If <mode> is either
    TRUE or FASTEST, then the application effectively is making
    the following assertion:  Between Begin/End pairs, if any of
    the following functions -- Color, EdgeFlag, Index, Material,
    Normal, TexCoord -- occurs before one Vertex call, then it
    will occur before all Vertex calls.  (Where "before" means the
    function will occur between the current Vertex function and the
    previous Vertex of Begin function.)  If <mode> is NICEST, DONT_CARE,
    or FALSE, the application is asserting that any sequence of 
    functions might occur between Begin/End pairs.

    If both VERTEX_CONSISTENT_HINT_PGI and  VERTEX_DATA_HINT_PGI are
    enabled, then GL further assumes that any functions indicated in
    VERTEX_DATA_HINT_PGI will be called before each vertex call.  When
    a single bit in VERTEX_DATA_HINT_PGI indicates a group of possible
    functions, GL assumes that at least one function from the group will
    be called before each Vertex function between Begin/End pairs.

    <target> = MAX_VERTEX_HINT_PGI

    This hint indicates the maximum number of Vertex functions which
    will occur between Begin/End pairs.  If <mode> is FALSE then the
    hint is "disabled" -- any number of Vertex functions might occur
    between Begin/End pairs.  However, if <mode> is any value greater
    than 0, then the application is asserting that at most that number
    of Vertex functions will occur between Begin/End pairs.  In this
    case, if the application exceeds the promised number of Vertex
    calls, program termination may occur.  Negative numbers also
    disable the hint.

    <target> = MATERIAL_SIDE_HINT_PGI

    This hint indicates which <face> paramters will occur for any
    Material functions called between Begin/End pairs.  If <mode>
    is any of FALSE, DONT_CARE, NICEST, then this hint is "disabled" --
    any <face> parameters might occur in Material functions called
    between Begin/End pairs.  If <mode> is FRONT, BACK, or
    FRONT_AND_BACK, then only the given value will be used in
    Material functions called between Begin/End pairs.  If <mode>
    is TRUE or FASTEST, then only a single (unspecified) <face>
    parameter will be used in Material functions called between
    Begin/End pairs.

Additions to Chapter 6 of the 1.0 Specification (State and State Requests)

    None

Additions to the GLX Specification

    None

GLX Protocol

    None

Interactions with PGI_misc_hints

    If the PGI_misc_hints extension is available, then the hints
    described above can be used through the HintPGI client function.

    If PGI_misc_hints is not avialable, then the hints above must
    be used through the usual Hint function.

Errors

    INVALID_VALUE is generated if <target> for Hint or HintPGI is
    VERTEX_DATA_HINT_PGI and <mode> is not FALSE or some combination
    of the bits xxx_BIT_PGI.  Also, if <mode> does not contain
    VERTEX23_BIT_PGI or VERTEX4_BIT_PGI (or both), then INVALID_VALUE
    is generated.

    INVALID_ENUM is generated if <target> for Hint or HintPGI is
    VERTEX_CONSISTENT_HINT_PGI and <mode> is not FASTEST, NICEST,
    DONT_CARE, TRUE, or FALSE

    INVALID_VALUE is generated if <target> for Hint or HintPGI is
    MAX_VERTEX_HINT_PGI and <mode> is a negative number.

    INVALID_ENUM is generated if <target> for Hint or HintPGI is
    MATERIAL_SIDE_HINT_PGI and <mode> is not FASTEST, NICEST,
    DONT_CARE, TRUE, FALSE, FRONT, BACK, or FRONT_AND_BACK.

New State
								Initial
    Get Value				Get Command	Type	Value	Attrib
    ---------				-----------	----	-------	------

    VERTEX_DATA_HINT_PGI                GetIntegerv      Z       FALSE    

    VERTEX_CONSISTENT_HINT_PGI          GetIntegerv      Z       FALSE    

    MAX_VERTEX_HINT_PGI                 GetIntegerv      Z       FALSE    

    MATERIAL_SIDE_HINT_PGI              GetIntegerv      Z       FALSE    

New Implementation Dependent State

    None
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\exts\registry\extres.txt ===
Value Range	Definition Control	Contact	

Extension Numbers
=================

1-65            SGI		  Kurt Akeley    kurt@asd.sgi.com
66-67           HP 		  Randi Rost     rost@fc.hp.com
68		Intergraph	  Dale Kirkland  dlkirkla@ingr.com
69-75		SGI               Kurt Akeley    kurt@asd.sgi.com
76-77		PGI		  Kelvin Thompson kelvin@portable.com
78-79           MS                Hock San Lee   hockl@microsoft.com


GLS Enumerants
==============

0x0200  0x020F  SGI               Kurt Akeley    kurt@asd.sgi.com


GLS Opcodes 
===========

0xFFB0  0xFFFF  SGI               Kurt Akeley    kurt@asd.sgi.com
0xFFA0  0xFFAF  HP                Randi Rost     rost@fc.hp.com
0xFF90  0xFF9F  MS                Hock San Lee   hockl@microsoft.com
0xFF80  0xFF8F  SGI               Kurt Akeley    kurt@asd.sgi.com


GLU Enumerants
==============

100208		SGI		  Kurt Akeley    kurt@asd.sgi.com


Attribute Mask Bits
===================
0x20000000      SGI               Kurt Akeley    kurt@asd.sgi.com
0x10000000      SGI               Kurt Akeley    kurt@asd.sgi.com


Enumerateds (32 Bits)
=====================

0x8000  0x80BF  SGI               Kurt Akeley    kurt@asd.sgi.com
0x80C0  0x80CF  Intergraph 	  Dale Kirkland  kirkland@ingr.com
0x80D0  0x80DF  SGI               Kurt Akeley    kurt@asd.sgi.com
0x80E0  0x810F  MS                Hock San Lee   hockl@microsoft.com
0x8110  0x814F  SGI               Kurt Akeley    kurt@asd.sgi.com
0x8150  0x816F  HP 	          Randi Rost     rost@fc.hp.com
0x8170  0x81AF  SGI               Kurt Akeley    kurt@asd.sgi.com

100000  100999  GLU Library       Kevin Smith    kpsmith@asd.sgi.com
101000  101999  Conformance Tests Lesley Kalmin  kalmin@asd.sgi.com
103000  103999  IBM               Linas Vepstas  linas@innerdoor.austin.ibm.com
104000  104999  NEC		  Seiji Uchida	 uchida@lang1.bs1.fc.nec.co.jp
105000  105999  DEC		  John Dennis     jdennis@mlo.dec.com
106000  106999	KPC		  Daniel McLachlan mclach@kpc.com
107000  107999  PGI		  Kelvin Thompson kelvin@portable.com
108000  108999  E&S		  Jim Cobb	jcobb@dsd.es.com


GLX Op Codes (8 bits)
=====================

    16		Vendor Private               OpenGL ARB     karlton@asd.sgi.com
    17		Vendor Private with Reply    OpenGL ARB	    karlton@asd.sgi.com


GLX Vendor Private opcodes (32-bits) (first 4 bytes past standard X header)
==========================

     0     255  EXT	       Kurt Akeley     kurt@asd.sgi.com
   256     271  DEC            John Dennis     jdennis@mlo.dec.com
   512     575  E&S            Jim Cobb        jcobb@dsd.ES.COM
  1024    1279  EXT  (GLX)     Kurt Akeley     kurt@asd.sgi.com
  3000    3999  IBM            Linas Vepstas   linas@innerdoor.austin.ibm.com
  4096    5151  SGI  	       Kurt Akeley     kurt@asd.sgi.com
 65536   66575  SGI  (GLX)     Kurt Akeley     kurt@asd.sgi.com


GLX Vendor Private with Reply opcodes (32-bits) 
					(first 4 bytes past standard X header)
==========================

     0     255  EXT	       Kurt Akeley     kurt@asd.sgi.com
   256     271  DEC            John Dennis     jdennis@mlo.dec.com
   512     575  E&S            Jim Cobb        jcobb@dsd.ES.COM
  1024    1269  EXT  (GLX)     Kurt Akeley     kurt@asd.sgi.com
  3000    3999  IBM            Linas Vepstas   linas@innerdoor.austin.ibm.com
  4096    5151  SGI  	       Kurt Akeley     kurt@asd.sgi.com
  8192    8207  HP             Randi Rost      rost@fc.hp.com
 65536   66575  SGI  (GLX)     Kurt Akeley     kurt@asd.sgi.com


OpenGL Rendering Codes (16 Bits)
================================

     0    1009  reserved
  1008    1023  IBM		Linas Vepstas	linas@innerdoor.austin.ibm.com
  1024	  1039  DEC		John Dennis	jdennis@mlo.dec.com
  2048    3071  SGI             Kurt Akeley     kurt@asd.sgi.com
  4096	  5151  EXT		Kurt Akeley     kurt@asd.sgi.com
  8192    8207  HP             Randi Rost      rost@fc.hp.com


GLX Enumerateds (32 Bits)
=========================
0x0	0xFF	EXT (vis attr)	  Kurt Akeley	 kurt@asd.sgi.com
0x8000  0x800F  EXT               Kurt Akeley    kurt@asd.sgi.com
0x8010  0x802F  SGI               Kurt Akeley    kurt@asd.sgi.com
100000  100011	SGI (vis attr)	  Kurt Akeley	 kurt@asd.sgi.com


GLX Error Codes
===============

(None reserved. Extension reservations should start sufficiently
high so they don't interfere with extension of core GLX.)


GLX Event Codes
===============

0x40		SGI		Kurt Akeley	kurt@asd.sgi.com
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\exts\registry\enualloc.txt ===
-------------------------------------------------------------------------------
Proposed changes and additions to OpenGL ARB policies for allocating
new enumerant values for OpenGL extensions

Craig Dunwoody
Silicon Graphics
8-10-94
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
Current policies
-------------------------------------------------------------------------------

If an OpenGL vendor defines a single-vendor OpenGL extension that
requires one or more new enumerant values, then each of those values
must be contained in a block of enumerant values that has been
allocated by SGI for the exclusive use of that vendor.  SGI
maintains a registry of such allocations.

OpenGL 1.0 uses enumerant values in the range [0,32767].  OpenGL 1.0
enumerant values are grouped into blocks of 16 values.  Each block
begins with a value that is a multiple of 16.  Only 75 of the 2048
blocks in the range [0,32767] are used by OpenGL 1.0; the remaining
blocks in this range are reserved for use by future versions of
OpenGL.  The largest enumerant value used by OpenGL 1.0 is 16391.

Enumerant values for single-vendor extensions may be allocated in
blocks of 1000, beginning with the block [102000,102999] and
progressing upward.

-------------------------------------------------------------------------------
Problems with current policies
-------------------------------------------------------------------------------

1.  Unlike the OpenGL 1.0 enumerant values, values in the blocks of extension
    enumerant values that begin with the block [102000,102999] cannot be
    represented as 16-bit unsigned integers.  This imposes a significant
    and unnecessary performance penalty on some implementations.
    
2.  Current policies are insufficiently explicit about the process by which
    a vendor may voluntarily return to the registry a block of enumerant 
    values that has been allocated for that vendor's use but has
    subsequently been determined by the vendor to be unneeded.

3.  Current policies are insufficiently explicit about the management of
    enumerant values for an extension that is introduced by a single vendor,
    supported at a later date by additional vendors, and eventually
    incorporated as a required part of a new version of OpenGL.

4.  Current policies are insufficiently explicit about the allocation
    of enumerant values for an extension that is introduced by a group of
    vendors.

-------------------------------------------------------------------------------
Proposed changes to current policies
-------------------------------------------------------------------------------

C1. Enumerant values for single-vendor extensions will be allocated upon
    request in blocks of 16 values, beginning with the block [32768,32783] and
    progressing upward.  SGI will maintain a registry of such allocations.
    
    Because of the limited number (2048) of available blocks in the
    more desirable 16-bit range [32768,65535], vendors are expected to
    adhere to the following guidelines:

    1.  Allocate official enumerant values for an extension only after making a
        commitment to release that extension.  Prior to this point, development
        work on the extension should be done using temporarily assigned
        enumerant values.  One approach would be to choose these temporary
        values from the set of values in the range [0,32767] that are not
        used by the current version of OpenGL.

    2.  Minimize the number of unused enumerant values in an allocated block.
    
    Any block of 1000 enumerant values (beginning with the block
    [102000,102999] and progressing upward) that has already been allocated
    to a vendor will remain so allocated unless the vendor voluntarily
    returns the entire block.  New allocations will be done only
    in blocks of 16 values, beginning with the block [32768,32783] and
    progressing upward.

    After the block [99984,99999] has been allocated, allocations of blocks
    of 16 values will continue in an upward direction, skipping over any
    block of 16 values that contains one or more values from a currently
    allocated 1000-value block.

-------------------------------------------------------------------------------
Proposed additions to current policies
-------------------------------------------------------------------------------

A1. If a vendor determines that it does not need a block of enumerant values
    that has been previously allocated to that vendor, the vendor
    may voluntarily return the entire block for future reallocation.

A2. If an extension progresses from single-vendor status to multi-vendor
    status, the following rule applies:  For each enumerant that is present
    in both the single-vendor version and the multi-vendor version, a new
    multi-vendor extension enumerant will be defined with the same value as
    the single-vendor extension enumerant.  The name of the new enumerant will
    be the name of the extension enumerant with the suffix EXT replacing the
    vendor-specific suffix.

A3. If an extension becomes a required part of a new version of OpenGL,
    the following rule applies:  For each enumerant that is present
    in both the extension and the new version of OpenGL, the ARB will choose
    one of the following two options:
    
    1.  Define a new OpenGL enumerant with the same value as the extension
        enumerant.  The name of the new enumerant will be the name of the
        extension enumerant with the extension suffix deleted.

    2.  Define a new OpenGL enumerant with a previously unused value
        in the range [0,32767].  The name of the new enumerant will be the
        name of the extension enumerant with the extension suffix deleted.

A4. If a group of vendors introduces an extension, one of the vendors in
    the group must be designated as the "lead vendor" for that extension.
    The lead vendor will then allocate enumerant values for the extension in
    the same way that it would allocate enumerant values for a single-vendor
    extension.

-------------------------------------------------------------------------------
Discussion
-------------------------------------------------------------------------------

SGI's position is that these proposed changes and additions to ARB
policies would solve the problems listed at the beginning of this
document without introducing significant new problems.  The
centerpiece of the proposal is the idea of dividing the range of most
desirable enumerant values (the 16-bit range [0,65535]) into two
equal-sized blocks: the block [0,32767] for OpenGL enumerants, and the
block [32768,65535] for OpenGL extension enumerants.

We claim that this division would provide both OpenGL and OpenGL
extensions with a more than adequate supply of enumerant values in the
desirable 16-bit range [0,65535].  The basis for our claim is as
follows:

1.  OpenGL 1.0 uses only 75 of the 2048 blocks of 16 enumerant values in the
    OpenGL reserved range [0,32767], and nearly all of those 75 blocks are only
    partially filled.  The largest enumerant value used by OpenGL 1.0 is
    16391.

2.  It is reasonable to expect that most or all of the enumerants that will
    be added as a mandatory part of future versions of OpenGL will appear
    first in OpenGL extensions.  Since the proposed new policy A4 (see above)
    would make it possible for an extension to be adopted as a mandatory part
    of a new version of OpenGL without the need for the allocation of new
    enumerant values, we expect that it would rarely be necessary to
    allocate a new enumerant value in the range [0,32767].

3.  SGI's initial release of 9 multi-vendor (EXT) extensions and 3
    single-vendor (SGI and SGIS) extensions would require a total of only 9
    of the 2048 blocks of 16 enumerant values in the range [32768,65535].
    That is less than 0.5% of the available blocks in this range.

-------------------------------------------------------------------------------
End of document
-------------------------------------------------------------------------------

------- End of Forwarded Message
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\exts\rules\exthowto.txt ===
Paula Womack
					September 29, 1995

A. SPECIFICATION

Is there already an extension that does what I want?

  The specifications for extensions that have already been
  proposed by licensees can be obtained from sgiblab.sgi.com.
  via ftp using the opengl_l account. (Get the tar file
  extension_info.tar.Z.) Check out the extensions 
  here before creating your own. There may be another licensee 
  working on a similar extension. 

  Some of the extension specifications are also available
  to the public on sgigate (using anonymous ftp). Look 
  in pub/opengl/extensions.


What is the best way to create a new extension?
 
  The best way to create a new extension is to first write
  a specification. A template can be found in the extension_info.tar.Z
  file. It is important to think about all the different areas of 
  the OpenGL (and maybe GLX) specification that are affected. (For
  example, if you are defining a new attribute, can it be pushed and
  popped? How do you read back the values?) The template can help
  you with this.

  syntax.rules is also included in extension_info.tar.Z. Your 
  extension should follow the OpenGL syntax guidelines.

  All the new names introduced by the extension should have a
  vendor-specific suffix appended to them. (e.g., glNewCommandSGI
  or glXNewCommandSGI) If another licensee agrees to support the 
  extension, or if the ARB approves the extension, then the EXT 
  designation can be used.

How do I name my extension?

  All extensions must be named and the name should be included in
  the extension specification. The extension name must have the
  vendor-specific acronym or EXT prepended to the front. (e.g., 
  SGI_new_extension or EXT_new_extension)

  If the extension modifies OpenGL then the token GL_<ext_name>
  (e.g., GL_SGI_new_extension or GL_EXT_new_extension) must be 
  included in the extension string that is returned by
  glGetString and it also must be defined in gl.h (or an 
  include file that gl.h includes).

  If the extension modifies GLX then the token GLX_<ext_name>
  (e.g., GLX_SGI_new_extension or GLX_EXT_new_extension) must 
  be included in the extension string that is returned by
  glXQueryExtensionsString, glXGetClientString, and glXQueryServerString
  (See below for a description of the different routines) and it 
  also must be defined in glx.h (or an include file that glx.h 
  includes).

  Note that extensions can have both OpenGL components and windowing system 
  components. For example, the SGI multisampling extension modifies both
  GLX and OpenGL. In this case there will be two tokens associated
  with the extension (e.g., GL_SGIS_multisample and GLX_SGIS_multisample)
  and the extension will be advertised by both OpenGL and GLX.
   
What else do I need to do?
   
  SGI keeps a registry of enumerated type values, GLX codes (vendor private opcodes, 
  vendor private with reply opcodes, new visual attribute type values, GLX error
  codes and GLX event codes), OpenGL rendering codes for GLX, OpenGL rendering 
  codes for gls and extension numbers.

  If an extension defines new enumerated types then you need to register a block 
  of values from SGI (they are allocated in blocks of 16). If an extension
  defines new OpenGL rendering commands then you need to register gls rendering
  codes for it. Also, if you want the extensions to work with the X windowing 
  system (i.e., with GLX), then you need to request some GLX opcodes and define 
  GLX protocol for it.
 
  All new extensions should have a number associated with them for documentation
  purposes. If an extension depends on another extension, the other extension
  must have a lower number. (Note that when an extension is deprecated the number 
  associated with it is not reassigned.) This number must also be registered
  with SGI.

  It is a good idea to include the new enumerated values, GLX codes and extension 
  number in the specification.

  Once you have completed the extension, you should consider making it available
  to other licensees by mailing it to opengl-licensees@sgi.com. SGI will then 
  include the new extension in the extension_info.tar file on sgiblab.sgi.com.


B. IMPLEMENTATION

Errors:

  Whenever possible, extensions should use existing errors instead of defining
  new error returns. For GLX, if a new protocol error is introduced, then a
  error number must be registered with SGI.
  
  Vendors may ship a single OpenGL library, containing extensions, for a variety of
  platforms. It is possible that some of the extension routines defined in the 
  library may not be supported on some of the platforms. If this is the case and 
  an application calls a routine that is not supported by the current OpenGL 
  renderer then a GL_INVALID_OPERATION error should be returned.


Extension availability:

   OpenGL extensions must be advertised in the extension string returned by
   glGetString. Note that in a client-server environment, this call returns the 
   set of extensions that can be supported on the connection. GLX client libraries
   must send a glXClientInfo request to the server at start up time (if the client
   libarary is 1.1 or later) indicating the version of the client library and the
   the OpenGL extensions that it supports. Then, when glGetString is called,
   the client issues a GetString request. The server intersects the set of
   extensions that the client supports with the set of extensions that it
   supports (if a glXClientInfo request was never received then the server
   assumes that the client supports no OpenGL extensions) and returns the result
   to the client. The client library then appends any client-side only extensions 
   to the list and returns the result. 

   Extension names for OpenGL extensions recognized by libGL.x must be defined in gl.h, 
   or a header file that gl.h includes (e.g., #define GL_SGI_new_extension)

   GLX client-side extensions must be advertised in the extension string
   returned by glXGetClientString(); server-side extensions must be advertised
   in the extension string returned by glXQueryServerString(). 

   glXQueryExtensionsString() returns the list of extensions that can be
   supported on the connection. If the server supports GLX version 1.1 or
   greater then the client issues a glXQueryServerString request, intersects
   the returned string with the set of extensions it can support and then 
   appends any client-side only extensions to the list.

   Extension names for OpenGL extensions recognized by libGL.x must be defined in 
   glx.h, or a header file that glx.h includes (e.g., #define GLX_SGI_new_extension)


C. USING EXTENSIONS


   Programmers that wish to use a particular OpenGL extension should check
   both compile-time defines (to ensure that the extension is supported
   by the library they are compiling against) and the extension string
   returned by glGetString (to ensure that the renderer supports
   the extension).

   For example, the following code could be used to check whether the renderer
   supports an OpenGL extension called GL_EXT_new_extension. This code would 
   need to be executed after the context had been made current:

      static GLboolean CheckExtension(char *extName, const char *extString)
      {
        /*
         ** Search for extName in the extensions string.  Use of strstr()
         ** is not sufficient because extension names can be prefixes of
         ** other extension names.  Could use strtok() but the constant
         ** string returned by glGetString can be in read-only memory.
         */
        char *p = (char *)extString;
        char *end;
        int extNameLen;

        extNameLen = strlen(extName);
        end = p + strlen(p);
    
        while (p < end) {
            int n = strcspn(p, " ");
            if ((extNameLen == n) && (strncmp(extName, p, n) == 0)) {
                return GL_TRUE;
            }
            p += (n + 1);
        }
        return GL_FALSE;
      }

      const GLubyte *ext_string;
      int  new_ext_supported = GL_FALSE;

      if ( CheckExtension("GL_EXT_new_extension", glGetString(GL_EXTENSIONS)) )
          new_ext_supported = GL_TRUE;

   If the renderer supports the extension, then it is safe to use it at runtime.
   (Note that in a client-server environment, glGetString will only return
   the set of extensions that can be supported by the client and server.)
   However, compile time checks must be made to ensure that the library
   that you are linked against supports the extension. For example:

      #ifdef GL_EXT_new_extension
         if (new_ext_supported)
             glNewExtensionEXT(...)
      #endif

   Before using a GLX extension, programmers should check the compile time
   defines and the extension string returned by glXQueryExtensionsString.
   Since glXQueryExtensionsString, is only available in GLX versions
   1.1 and later, programmers must also check the GLX version.

   For example, the following code could be used to check whether an extension
   called GLX_EXT_new_extension can be used on the connection. This code would
   need to be executed after the connection had been opened and the existence
   of the GLX extension had been established.

      Display *dpy;
      int  new_ext_supported = GL_FALSE;
      int  major, minor, screen;
   
      if( !glXQueryVersion(dpy, &major, &minor) )
        exit(1);
      screen = DefaultScreen(dpy);

      #ifdef GLX_VERSION_1_1

        if ( minor > 0 || major > 1 )
          if ( CheckExtension("GLX_EXT_new_extension", 
                              glXQueryExtensionsString(dpy, screen)) )
              new_ext_supported = GL_TRUE;
      #endif

   If the extension is supported on the connection, then it is safe to use
   it at runtime. However, compile time checks must be made to ensure that 
   the library that you are linked against supports the extension. For example:

      #ifdef GLX_EXT_new_extension
         if (new_ext_supported)
             glNewExtensionEXT(...)
      #endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\gls\doc\changes.txt ===
-------------------------------------------------------------------------------
REF-0
-------------------------------------------------------------------------------

-   Initial release.

-------------------------------------------------------------------------------
End
-------------------------------------------------------------------------------
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\exts\rules\synrules.txt ===
Syntax Rules for OpenGL Extensions
		----------------------------------

This is a preliminary document.  No ARB vote has been taken!

Required abbreviations
----------------------

    Accum	Accumulation Buffer
    Attrib	Attribute
    Aux		Auxiliary
    CCW		Counter Clockwise
    Clip	Clipping
    CMYK	Cyan Magenta Yellow Black
    Coeff	Coefficient
    Coord	Coordinate
    CW		Clockwise
    Decr	Decrement
    Dim		Dimension
    Dst		Destination
    Env		Environment
    Eval	Evaluate
    Exp		Exponential
    Func	Function
    Gequal	Greater than or equal to
    Gen		Generate
    Incr	Increment
    Index	Color Index
    Lequal	Less than or equal to
    Light Model	Lighting Model
    List	Display List
    LSB		Least significant bit
    Mag		Magnify
    Max		Maximum
    Min		Minify
    Mult	Multiply
    Op		Operation
    Ortho	Orthographic
    Pname	ParameterName
    Pos		Position		(function names only)
    Quad	Quadrilateral
    Rect	Rectangle
    Ref		Reference
    RGB		Red Green Blue
    RGBA	Red Green Blue Alpha
    Shade Model	Shading Model
    Src		Source
    Tex		Texture			(function names only)

Abbreviations specifically not allowed
--------------------------------------

    Bgn		Begin
    C		Color
    Pnt		Point
    Cpack	Color Pack
    N		Normal
    Poly	Polygon			Poly means multiple
    T		Texture Coordinate
    Tri		Triangle
    V		Vertex

Compound words
--------------

    Antialias
    Bitmap
    Cutoff
    Doublebuffer
    Feedback
    Framebuffer
    Modelview
    Noop
    Notequal
    Subpixel
    Viewport
    Writemask

Name rules (for all names)
--------------------------

    Always use the specified abbreviations.  Never abbreviate terms
    that are already in the OpenGL API and are not abbreviated.  If you
    add terms to your extensions, abbreviate consistently, maintaining
    a local versions of extensions to the list of abbreviations.

    Use Depth, never Z.

Procedure name rules
--------------------

    Limit procedure names to 2 words, 3 for procedures that return state.
	(This is really a recommendation, not a rule.)

    Never use set, as in SetFeedbackBuffer.

    Begin each word with a capital letter, except the second word of
    compound words.

    Use Verb-noun (DeleteList) and adjective-noun (EdgeFlag) formats.

    Append a corporate-specific suffix to all procedures.  For example:
    glNewCommandSGI.  All upper case is preferred for this suffix, but
    is not required.  The suffix is always last, following OpenGL type
    and count suffixes.  (e.g. glNewVertex3iSGI, not glNewVertexSGI3i.)

Definition name rules
---------------------

    Use all capital letters.

    Separate words with underbars, except words within compound words.

    Append simple numeric suffixes directly to the end of definition
    tokens (LIGHT0).  Begin these sequences with 0.

    Use an underbar to separate complex suffixes from the token body
    (MAP_3V).

    Append a corporate-specific suffix to the token, after any other
    suffixes.  For example: GL_NEW_TOKEN0_SGI.  All upper case is
    required.

Parameter name rules
--------------------

    <target> is reserved for the notion of "which is affected", and for
    the corresponding "which is returned" get commands.

    <params> is reserved for an array of parameters whose contents are
    defined by a second enumerated argument, called <pname>.

    Begin number sequences with 1, not 0.  (e.g. u1,u2, not u0,u1)

Parameter order
---------------

    <X> precedes <Y> precedes <Z> precedes <W>.

    <R> precedes <G> precedes <B> precedes <A>.

    The array being passed is always the last argument.

    If a passed array has a type, the type specification argument immediately
    precedes the array.

    <pname> always precedes <params>.

    <x> and <y> precede <width> and <height>

    <format> precedes <type>

    <target> is first

    <face> is first

Parameter types
---------------

    All integer quantity parameters (widths, heights, array lengths, etc.)
    should be typed GLsizei, not GLint or GLuint.  Note that GLsizei
    generates an error only for negative values, so all integer quantity
    parameters should accept the value zero.

    Names (of display lists, textures, etc.) should be typed GLuint.
    Generic masks that do not have explicitly defined bit values (e.g.
    color index write masks and stencil write masks) should be typed
    GLuint.  GLuint is also used for unsigned integer components, such as
    color components and depth components.  

    Masks that do have explicitly defined bit values (e.g. attribute mask,
    clear mask) should be typed GLbitfield, not GLuint.

    All floating point parameters that are clamped to the range [0,1] when
    received should be typed GLclampf or GLclampd, not GLfloat or GLdouble.

Extension name rules
--------------------

    An extension name is prefixed with the same string that suffixes its
    procedures and definitions.  The prefix and the individual words are
    separated with underbars, the prefix is all upper case, and the other
    text is all lower case.  For example, extension SGI_cool_feature, which
    specifies glCoolProcedureSGI() and defines GL_COOL_DEFINITION_SGI.

Suffix codes
------------

    i		signed 32-bit integer
    ui		unsigned 32-bit integer
    s		signed 16-bit integer
    us		unsigned 16-bit integer
    b		signed 8-bit integer
    ub		unsigned 8-bit integer
    l		signed 64-bit integer
    ul		unsigned 64-bit integer
    f		32-bit float
    d		64-bit float
    v		vector format

Shared extensions
-----------------

    An OpenGL extension may be deemed a shared extension if either:

	1.  Two or more OpenGL licensees agree in good faith to implement
	    and ship the extension, or

	2.  The OpenGL ARB determines that it is in the best interest of
	    the licensees that the extension be shared.

    The procedures and definitions that are defined by a shared extension
    are suffixed with EXT, rather than by a company-specific suffix.
    Likewise, the extension name is prefixed by EXT.  To avoid name
    conflicts Silicon Graphics will maintain a registry of EXT extensions,
    including all their procedures and definitions, in a location that is
    accessible to all licensees.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\gls\doc\relnotes.txt ===
-------------------------------------------------------------------------------
GLS reference implementation (GLSREF) release notes
Craig Dunwoody
dunwoody@sgi.com
-------------------------------------------------------------------------------

GLSREF is a reference implementation of the GLS API.  It is NOT a
sample implementation or a product-quality implementation, and it is
therefore NOT suitable for shipping unmodified to customers as a
product.

The full GLS API specification document is not yet available.  The
primary reason for releasing GLSREF at this time is to allow vendors
to begin the development of product-quality implementations of the GLS
API.

For more details on how to use GLSREF as the starting point in the
development of a product-quality implementation of the GLS API, see
the file doc/porting.txt.

GLSREF has been built and minimally tested on the following platforms:

    ---------------------------------------------------------------------------
    OS                  ISA/ABI     Build environment
    ---------------------------------------------------------------------------
    AIX 3.2.5           IBM-POWER   AIX XL C Compiler/6000 3.2.5

    Digital Unix 3.0    ALPHA       Digital Unix C 3.0

    HP-UX 9.05          PA-RISC     HP-UX C 9.0.5

    IRIX 5.3            MIPS-1      IDO 5.3
    IRIX 5.3            MIPS-1      gcc 2.6.3, IDO 5.3
    IRIX 6.2            MIPS-3/32   IDO 6.2
    IRIX 6.2            MIPS-3/64   IDO 6.2

    Linux 1.1.95        X86         binutils 2.5.21.17,
                                    gcc 2.7.0,
                                    ld.so 1.7.3,
                                    libc 5.0.9

    Solaris 2.4         SPARC       SPARCompiler C 3.0.1

    Windows NT 3.5      ALPHA       SDK 3.5
    Windows NT 3.5      MIPS-1      Visual C++ 2.0, SDK 3.5
    Windows NT 3.5      X86         Visual C++ 2.0, SDK 3.5
    ---------------------------------------------------------------------------

If you need to bring up GLSREF on a platform that is not one of those
listed, see the file doc/porting.txt.

After building and installing the GLS library, commands, and tests,
perform a sanity check by running the following commands:

    cmd/glscat data/1.gls

    test/tcallarr data/1.gls

    test/tcapture

    test/tparser

You should put GLSREF under source code control so you can easily
track your changes and integrate them with future GLSREF releases from
SGI.

-------------------------------------------------------------------------------
File type recognition
-------------------------------------------------------------------------------

On Unix-type platforms, append one of the following two files to /etc/magic:

    filetype/magic.lsb (little-endian systems)
    filetype/magic.msb (big-endian systems)

-------------------------------------------------------------------------------
Known problems
-------------------------------------------------------------------------------

-   The documentation of the GLS API and encodings is quite inadequate.  SGI is
    developing a specification document for the GLS API and encodings, and
    will release this document as soon as possible.

-   There is not yet any documentation on how to extend GLS to support
    vendor-specific GL extensions.  If you need to do this, contact SGI
    to allocate a block of GLS opcodes in the GLS opcode registry that
    SGI maintains.

-   Mutual exclusion and thread local storage are not supported by GLSREF
    on the following platforms:
    
    AIX 3.2.5
    HP-UX 9.05
    IRIX 5.3, 6.2 (GLSREF only; SGI product implementation has full support)
    Linux 1.1.95

    This is due to a lack of adequate support for threads on these platforms.

-   On the AIX 3.2.5 and HP-UX 9.05 platforms, 64-bit integers (types GLlong
    and GLulong) in a GLS_TEXT stream can be parsed only if they appear in
    the hexadecimal form 0xdddddddddddddddd.  This is due to a  lack of
    adequate 64-bit integer support on these platforms, and could be
    remedied by enhancing the 64-bit integer parsing code in GLSREF.

-   On the AIX 3.2.5 and HP-UX 9.05 platforms, 64-bit integers (types GLlong
    and GLulong) in a generated GLS_TEXT stream are always formatted in
    the hexadecimal form 0xdddddddddddddddd, even in cases where the GLS
    spec requires decimal formatting.  This is due to a lack of adequate
    64-bit integer support on these platforms, and could be remedied by
    enhancing the 64-bit integer formatting code in GLSREF.

-------------------------------------------------------------------------------
End
-------------------------------------------------------------------------------
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\gls\doc\porting.txt ===
-------------------------------------------------------------------------------
Porting GLSREF to a new platform
-------------------------------------------------------------------------------

GLSREF is a reference implementation of the GLS API.  The primary
goals of GLSREF are as follows:

-   Correct runtime behavior
-   Portability to many platforms

The following are NOT primary goals of GLSREF:

-   Maximum execution speed
-   Minimum resource usage
-   Portability to all platforms

Although GLSREF is strictly a reference implementation of the GLS API,
and not a sample implementation or a product-quality implementation,
the task of creating a product-quality implementation of the GLS API
on a specific platform is likely to be significantly easier if GLSREF,
rather than a clean sheet of paper, is used as the starting point.

There are many possible product-quality implementations of the GLS
API.  The only constraint on all such implementations is that their
runtime behavior (as observed via the GLS API) must be
indistinguishable (except for execution speed and resource usage) from
the runtime behavior of GLSREF.

As explained below, developing a product-quality implementation of the
GLS API requires the addition of hooks to the underlying GL
implementation.

-------------------------------------------------------------------------------
Assumptions
-------------------------------------------------------------------------------

GLSREF makes the following assumptions about the underlying platform.
Bringing up GLSREF on a platform that matches these assumptions should
involve relatively little effort.  Bringing up GLSREF on a platform
that does not match these assumptions is likely to require significant
modifications to GLSREF.

-   The implementation of the C language and standard library conforms to the
    ISO C standard.

-   Two's complement representation is used for all signed integers.

-   The representation of all floating-point numbers conforms to the IEEE
    754-1985 standard.

-   The implementation of GL conforms to the OpenGL standard.

-   The sizes of GL data types are as follows:

    GLbitfield  32 bits
    GLboolean    8 bits
    GLbyte       8 bits
    GLclampd    64 bits
    GLclampf    32 bits
    GLdouble    64 bits
    GLenum      32 bits
    GLfloat     32 bits
    GLint       32 bits
    GLlong      64 bits
    GLshort     16 bits
    GLsizei     32 bits
    GLubyte      8 bits
    GLuint      32 bits
    GLulong     64 bits
    GLushort    16 bits

-   A runtime linking mechanism is available.  To date, GLSREF has been brought
    up on platforms that support one of the following runtime linking
    mechanisms:

    -   AIX Shared Archives (.a)
    -   HP-UX Shared Libraries (.sl)
    -   SVR4 Dynamic Shared Objects (.so)
    -   Windows NT Dynamic Link Libraries (.dll)

SGI has no plans to change this set of assumptions.

The test programs supplied with GLSREF assume that the GL commands
glGetIntegerv() and glPixelStorei() are no-ops if there is no current
GL rendering context.  This assumption obviates the need for the test
programs to create GL rendering contexts.  This in turn makes the test
programs more portable.

-------------------------------------------------------------------------------
Bringing up GLSREF on a new platform
-------------------------------------------------------------------------------

Platform dependencies in GLSREF are encapsulated in the files
lib/platform.[ch].  These files contain platform specific code for a
number of platforms.  The #if/#endif conditional compilation mechanism
is used to select code for a specific platform.

Conditional compilation can also be used to build different GLS
implementations for a single platform.  For example, the files
lib/platform.[ch] contain platform specific code for both the portable
IRIX version of GLSREF (which will run on any system running IRIX
Release 5.3 or later) and the product-quality IRIX implementation of
the GLS API (which contains generated source code that is subject to
change with each IRIX release).  Conditional compilation determines
which IRIX implementation is built.

Use the following steps as a guide to bringing up GLSREF on a new
platform.

-   Create <platform>.mak files for your platform, using the supplied
    makefiles as a guide.

-   Add the following symbol definition to your C compilation command line:
    
        -D__GLS_PLATFORM_<platform>=1

    If your platform has "big-endian" byte order, also add to your C
    compilation command line:

        -D__GLS_MSB_FIRST=1

-   For ease of initial bringup, add the following to lib/platform.h,
    using the supplied platform specific sections as a guide:

        #if __GLS_PLATFORM_<platform>

            #define __GL_LIB_NAME "<GL_lib_name>"
            #define __GLS_FAKE_FINITE_FUNC 1
            #define __GLS_FAKE_MUTEX 1
            #define __GLS_FAKE_THREAD_LOCAL_STORAGE 1
            #define __GLS_FAKE_TRUNCATE_FUNC 1
            #define __GLS_GL_DISPATCH 1
            #define __GLS_PLATFORM "<platform>"

        #endif /* __GLS_PLATFORM_<platform> */

    If your platform supports SVR4 Dynamic Shared Objects, also add to
    this section:

            #define __GLS_GL_DISPATCH_DSO 1

-   Add a platform specific section to lib/platform.c that contains code to
    operate your platform's dynamic linking mechanism.  Use the supplied
    platform specific sections as a guide.

-   Once you have successfully brought up an initial version of GLSREF on your
    platform, use the supplied platform specific code as a guide to determine
    if you can implement the following:
    
        -   use of alloca() for decode functions
        -   finite function for 64-bit floating point numbers
        -   mutual exclusion (critical sections)
        -   thread local storage
        -   file truncate function
        -   support for 64-bit integers
        
    None of these things is required by the ISO C standard.  If you can
    implement some or all of them, make appropriate modifications to your
    platform specific #defines in lib/platform.h.

-   Once you have successfully brought up GLSREF on your platform, please send
    SGI a set of diffs containing the changes you had to make.  If your
    platform matches the assumptions listed above, SGI will make a good-faith
    effort to incorporate your changes into the master GLSREF sources.  This
    will simplify your integration task when SGI produces future GLSREF
    releases.

    If your platform does not match the assumptions listed above, SGI will
    consider incorporating your changes into the master GLSREF sources, but
    reserves the right to choose not to incorporate your changes, especially
    if those changes do not enhance portability to any other platform.

-------------------------------------------------------------------------------
Developing a product-quality GLS implementation based on GLSREF
-------------------------------------------------------------------------------

The main difficulty in using GLSREF as the basis for a product-quality
implementation of the GLS API arises from the fact that every GL
command must be captured by GLS when the issuing thread has a current
GLS context and that GLS context is in capture mode.

As shipped, GLSREF achieves this effect by providing a wrapper
function for each GL command.  Each wrapper function has the same name
as the function that implements the corresponding GL command.

If a thread has a current GLS context and that context is in capture
mode, the wrapper functions redirect to GLS all GL commands issued by
that thread.  Otherwise, the wrapper functions pass directly to GL all
GL commands issued by that thread.  GLSREF uses the underlying
platform's runtime linking mechanism to obtain the addresses of the
functions that implement GL commands.

The wrapper technique makes it possible to bring up GLSREF quickly on
a platform that matches the assumptions listed above.  On the other
hand, the wrapper technique has the major disadvantage that linking an
application with the GLSREF library will degrade that application's
immediate-mode GL performance, even when the wrapper functions are
passing all GL commands directly to GL.  As a result, GLSREF is not
suitable for shipping unmodified to customers as a product.

In order to make it possible for applications to link with the GLSREF
library without affecting immediate-mode GL performance, it is
necessary to modify GLSREF to not use the wrapper technique.  This in
turn requires modifications to the underlying GL implementation.

Specifically, it is necessary to add hooks to the underlying GL
command-dispatch mechanism that cause a GL command to be redirected to
GLS if the issuing thread has a current GLS context and that GLS
context is in capture mode.

For an example of how this can be done, see the files lib/platform.c
and lib/g_irix.c.  The command __glsUpdateDispatchTables() enables and
disables the underlying GL dispatch table override mechanism, and the
commands __glsBeginCaptureExec() and __glsEndCaptureExec() are used to
temporarily disable the underlying GL dispatch table override
mechanism for a single command.  This is necessary when a GLS context
is in capture mode and either generates a glGet() command or captures
a GL command whose capture-flag variable has the bit
GLS_CAPTURE_EXECUTE_BIT set.

-------------------------------------------------------------------------------
End
-------------------------------------------------------------------------------
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\gls\doc\gls.txt ===
-------------------------------------------------------------------------------
GLS:  Stream encoding for OpenGL commands

Craig Dunwoody
dunwoody@sgi.com
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
Introduction
-------------------------------------------------------------------------------

GLS is a facility for encoding and decoding streams of 8-bit bytes
that represent sequences of OpenGL (henceforth, "GL") commands.  The
GLS specification has two components:

1.  A set of three byte stream encodings for GL and GLS commands
    (human-readable text, big-endian binary, and little-endian binary).
    The three encodings are semantically identical, differing only in syntax.
    GLS byte streams can therefore be converted freely among the three
    encodings without loss of information.

2.  An API that provides commands for encoding and decoding GLS byte streams.
    This API is not formally an extension of the GL API.  Like the GLU API,
    the GLS API is designed to be implemented in an optional, standalone
    client-side subroutine library that is separate from the subroutine
    library that implements the GL API.

The GLS encodings and API are platform independent and window system
independent.  In particular, the GLS encodings are not tied to the
encoding used in the GLX extension to the X Window System protocol.
GLS is designed to work equally well in Unix/X, Windows, and other
environments.

It is expected that GLS will prove useful to the GL community in a
wide range of applications, including:

-   GL command streams for resolution-independent storage, interchange,
    viewing, and printing of pictures

-   GL command files for persistent storage of textures, display lists,
    images, etc.

-   GL trace streams for debuggers, performance analyzers, and simulators

-   GL test-vector streams for correctness testing of GL
    implementations

-   Picture-level benchmarking using GL command files to represent
    pictures

-   Transfer of GL commands between application processes via byte
    stream connections

-   Client-side display lists that can contain client callbacks

Some of these applications will require the definition and
implementation of higher-level APIs that are more convenient to use
than the GLS API.  The GLS API design is an attempt to provide basic
encoding and decoding services in such a way that higher-level
services can efficiently be built on top.

-------------------------------------------------------------------------------
Status
-------------------------------------------------------------------------------

SGI is developing a GLS specification document for presentation to the
GL ARB as a proposed standard for the GL community.  As soon as the
first draft of this document is complete, SGI will distribute it to
all interested parties for comment.

SGI has developed GLSREF, a portable ISO C reference implementation of
the GLS API.  SGI has also developed a simple utility program called
glscat that makes it easy to convert a GLS byte stream from one
encoding to another.

-------------------------------------------------------------------------------
GLS Encodings
-------------------------------------------------------------------------------

Each of the GLS encodings is capable of representing all GL commands,
without exception.  This includes "get" commands that return data to
the GL client and all other commands that are not allowed in GL
display lists.

In addition to GL commands, a subset of the commands in the GLS API
are "encodable", meaning that they can be represented in GLS streams.
These GLS commands make it possible to encode various kinds of non-GL
data in GLS streams.

The binary encodings represent most commands as 16 bits of opcode,
followed by 16 bits of word-count, followed by zero or more 32-bit
words of argument data.  An alternate encoding is used for opcodes
larger than 65535 and commands that require more than 65535 32-bit
words to encode.

The text encoding looks like C source code, except that array
arguments are represented as lists of elements delimited by braces.
Enumerants are represented symbolically.  An example of a GLS text
stream:

    ---------------------------------------------------------------------------
    glsBeginGLS(1, 0); # arguments are major, minor GLS version
    glClear(GL_DEPTH_BUFFER_BIT | GL_COLOR_BUFFER_BIT);
    glBegin(GL_POINTS);
    glVertex3fv({1.2, 3.4, 5.6});
    glEnd();
    glsEndGLS();
    ---------------------------------------------------------------------------

All GLS streams begin with the encodable GLS command glsBeginGLS() and
end with the encodable GLS command glsEndGLS().  The concatenation of
two valid GLS streams is always a valid GLS stream, even if the two
streams do not have the same GLS encoding.

-------------------------------------------------------------------------------
GLS API
-------------------------------------------------------------------------------

This section provides a brief overview of the core of the GLS API.

    ---------------------------------------------------------------------------
    GLuint glsGenContext(void);
    void glsDeleteContext(GLuint inContext);
    void glsContext(GLuint inContext); /* set thread's current GLS context */
    ---------------------------------------------------------------------------

    Like GL, GLS defines a state machine.  A GLS context is
    an instantiation of this state machine.  GLS contexts and GL
    contexts are completely independent.  Like GLU state, GLS contexts
    are stored entirely on the client side of the GL client-server
    connection.  Each GLS context has a nonzero name of type GLuint.

    Each GLS command is classified as either global, immediate, or encodable:

    ---------------------------------------------------------------------------
    Category    Uses GLS context state  Encodable
    ---------------------------------------------------------------------------
    Global
    Immediate           X
    Encodable           X                   X
    ---------------------------------------------------------------------------
    
    The commands glsGenContext(), glsDeleteContext(), and glsContext() are
    global.  All of the GLS commands described in the remainder of this
    section are non-global.

    Each client thread has a state variable that always contains either
    zero (the initial value) or the name of the thread's current GLS
    context.  If the value is zero, all non-global GLS commands are no-ops,
    and non-global GLS commands that return a value will return zero.  If the
    value is nonzero, all non-global GLS commands use the state in the
    issuing thread's current GLS context.  At any given instant, a GLS
    context may be current to at most one thread.

    ---------------------------------------------------------------------------
    GLboolean glsBeginCapture(
        const GLubyte *inStreamName,
        GLSenum inStreamType,
        GLbitfield inWriteFlags
    );
    void glsEndCapture(void);
    ---------------------------------------------------------------------------

    Between a glsBeginCapture() command and the following glsEndCapture()
    command, the current GLS context is in "capture mode".  In capture mode,
    all GL commands will be captured by GLS instead of being sent
    directly to GL and executed, and all encodable GLS commands will be
    captured instead of being sent directly to GLS and executed.

    The command glsBeginCapture() opens a stream for writing and then encodes
    the command glsBeginGLS().  The command glsEndCapture() encodes the
    command glsEndGLS() and then closes the currently open GLS stream.

    inStreamType is one of:
        GLS_CONTEXT             /* in-memory stream stored in GLS context */
        GLS_BINARY_LSB_FIRST    /* binary stream, little-endian */
        GLS_BINARY_MSB_FIRST    /* binary stream, big-endian */
        GLS_TEXT                /* text stream */

    inWriteFlags is zero or more of:
        GLS_WRITE_APPEND_BIT    /* if stream exists, don't truncate */

    If inStreamType is GLS_CONTEXT, the command glsBeginCapture() will open
    an in-memory stream named inStreamName that is stored in the current GLS
    context. Within the constraints of available memory, a GLS context can
    contain an arbitrary number of named GLS_CONTEXT streams.  GLS_CONTEXT
    streams can be thought of as client-side display lists that complement
    the server-side display lists provided by core GL.

    If inStreamType is GLS_BINARY_LSB_FIRST, GLS_BINARY_MSB_FIRST, or GLS_TEXT,
    the name of the opened stream is formed by appending inStreamName to a
    write-prefix string that is stored in the current GLS context.  The
    command glsWritePrefix() (not described here) can be used to replace the
    value of the write-prefix string.

    If inStreamType is GLS_BINARY_LSB_FIRST, GLS_BINARY_MSB_FIRST, or GLS_TEXT,
    and inStreamName is not the empty string (""), the command
    glsBeginCapture() will use the standard C library command fopen() to create
    a write channel of type FILE*.

    If inStreamType is GLS_BINARY_LSB_FIRST, GLS_BINARY_MSB_FIRST, or GLS_TEXT,
    and inStreamName is the empty string, the command glsBeginCapture() will
    use a default write channel of type FILE* that is stored in the current
    GLS context (initial value: stdout).  The command glsChannel() (not
    described here) can be used to replace the value of the default write
    channel.

    If inStreamType is GLS_BINARY_LSB_FIRST, GLS_BINARY_MSB_FIRST, or GLS_TEXT,
    and inStreamName is the empty string, and the GLS client has used the
    command glsWriteFunc() (not described here) to specify a write callback
    function, that function will be used in place of the standard C library
    function fwrite() when bytes are to be written to the stream.

    ---------------------------------------------------------------------------
    void glsCaptureFlags(GLSopcode inOpcode, GLbitfield inFlags);
    ---------------------------------------------------------------------------

    A GLS context contains two capture-mode control bits for each opcode:

        GLS_CAPTURE_WRITE_BIT   /* write command to open stream */
        GLS_CAPTURE_EXECUTE_BIT /* execute command */

    The command glsCaptureFlags() allows the GLS client to specify on a
    per-opcode basis whether a captured GL or encodable GLS command
    should be written to the open stream and/or executed by GL or GLS.

    ---------------------------------------------------------------------------
    GLSenum glsCallStream(const GLubyte *inStreamName);
    ---------------------------------------------------------------------------

    This command decodes a named GLS stream (which may be in any GLS encoding)
    and issues the commands in the stream to GL and GLS, just as if those
    commands had been issued directly in immediate mode by the calling thread.
    The command returns the type of the stream.

    If inStreamName is the name of a GLS_CONTEXT in-memory stream stored in
    the current GLS context, the command glsCallStream() will decode that
    stream.  Otherwise, the command searches for an external stream to decode.

    If inStreamName is not the empty string (""), a sequence of potential
    external stream names is formed.  The first names in the sequence are
    formed by appending inStreamName to each of the strings in a list of
    read-prefix strings that is stored in the current GLS context.  The command
    glsReadPrefix() (not described here) can be used to modify the contents
    of the read-prefix string list.  The last name in the sequence is formed
    by appending inStreamName to the write-prefix string.

    Beginning with the first potential external stream name, the command
    glsCallStream() tries each successive name until either a readable
    stream is found or all of the names have been tried.  For each name,
    the command fopen() is issued with the name as an argument, in an attempt
    to create a read channel of type FILE*.

    If inStreamName is the empty string, the command glsCallStream() will use
    a default read channel of type FILE* that is stored in the current GLS
    context (initial value: stdin).  The command glsChannel() (not described
    here) can be used to replace the value of the default read channel.

    If inStreamName is the empty string, and the GLS client has used the
    command glsReadFunc() (not described here) to specify a read callback
    function, that function will be used in place of the standard C library
    function fread() when bytes are to be read from the stream.

    The command glsCallStream() is encodable.  When a GLS decoder reads
    this command from a GLS stream, the decoder recursively decodes the GLS
    stream named in the command.  As a result, GLS streams provide the same
    embedding capability on the client side that GL display lists provide
    on the server side.

    ---------------------------------------------------------------------------
    void glsCommandFunc(GLSopcode inOpcode, GLScommandFunc inFunc);
    ---------------------------------------------------------------------------

    This command registers the client callback function inFunc for the GL
    or encodable GLS command designated by inOpcode.  When a GLS decoder
    reads this command from a GLS stream, the decoder will call inFunc instead
    of issuing the command.

    Command arguments are passed to inFunc just as they would have been passed
    to the function that implements the GL or GLS command.  The function
    inFunc is free to perform arbitrary computations, including the issuing
    of GL and GLS commands.

    Certain encodable GLS commands (not described here) are provided for
    the sole purpose of encoding arrays of arbitrary client data as command
    arguments in a GLS stream.  If a GLS client provides a callback function
    for one or more of these encodable GLS commands, the client can use
    GLS_CONTEXT in-memory streams to create client-side display lists that
    contain client callbacks.  This functionality is present in IrisGL but
    not in core GL.

    ---------------------------------------------------------------------------
    void glsUnsupportedCommand(void);
    ---------------------------------------------------------------------------

    The GLS encodings and API are designed to handle GL extensions.
    Extension commands are encoded and decoded in the same way as GL 1.0
    commands.  Extension opcodes for the binary encodings will be
    allocated on demand in blocks of 16 from a registry maintained by SGI.

    To guarantee successful interchange of GLS streams, it is required
    that any GLS implementation be able to read any GLS stream, even if
    the GLS stream contains extension commands that are not recognized by
    the GLS implementation.

    If a GLS decoder reads from a GLS stream a command that it cannot decode,
    the decoder issues the encodable GLS command glsUnsupportedCommand().
    The command glsCommandFunc() can be used to register a client callback
    function for the command glsUnsupportedCommand().

-------------------------------------------------------------------------------
Implementation Considerations
-------------------------------------------------------------------------------

Platform-specific mechanisms are required to implement the capture of
GL commands without compromising immediate-mode GL performance when
GLS is not in capture mode.  Otherwise, GLSREF is quite portable.

-------------------------------------------------------------------------------
End
-------------------------------------------------------------------------------
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\glu\libnurbs\readme.txt ===
The code in this directory was taken from the preprocessed C++
version of SGI's NURBS code.  This is what we used originally
to bring up the GLU library for OpenGL on Daytona (Windows NT 3.5).
This was done because of incompatibilities between the C++
compilers.  Since then however, the compiler issue has been
resolved allowing us to now use the C++ source.

The C++ source has a different structure from this directory
so a new subdirectory tree (with nurbs as the root) has been
added to the glu tree.  This directory is being preserved
only to keep the history of changes.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\glu\libtess\alg-outl.txt ===
This is only a very brief overview.  There is quite a bit of
additional documentation in the source code itself.


Goals of robust tesselation
---------------------------

The tesselation algorithm is fundamentally a 2D algorithm.  We
initially project all data into a plane; our goal is to robustly
tesselate the projected data.  The same topological tesselation is
then applied to the input data.

Topologically, the output should always be a tesselation.  If the
input is even slightly non-planar, then some triangles will
necessarily be back-facing when viewed from some angles, but the goal
is to minimize this effect.

The algorithm needs some capability of cleaning up the input data as
well as the numerical errors in its own calculations.  One way to do
this is to specify a tolerance as defined above, and clean up the
input and output during the line sweep process.  At the very least,
the algorithm must handle coincident vertices, vertices incident to an
edge, and coincident edges.


Phases of the algorithm
-----------------------

1. Find the polygon normal N.
2. Project the vertex data onto a plane.  It does not need to be
   perpendicular to the normal, eg. we can project onto the plane
   perpendicular to the coordinate axis whose dot product with N
   is largest.
3. Using a line-sweep algorithm, partition the plane into x-monotone
   regions.  Any vertical line intersects an x-monotone region in
   at most one interval.
4. Triangulate the x-monotone regions.
5. Group the triangles into strips and fans.


Finding the normal vector
-------------------------

A common way to find a polygon normal is to compute the signed area
when the polygon is projected along the three coordinate axes.  We
can't do this, since contours can have zero area without being
degenerate (eg. a bowtie).

We fit a plane to the vertex data, ignoring how they are connected
into contours.  Ideally this would be a least-squares fit; however for
our purpose the accuracy of the normal is not important.  Instead we
find three vertices which are widely separated, and compute the normal
to the triangle they form.  The vertices are chosen so that the
triangle has an area at least 1/sqrt(3) times the largest area of any
triangle formed using the input vertices.  

The contours do affect the orientation of the normal; after computing
the normal, we check that the sum of the signed contour areas is
non-negative, and reverse the normal if necessary.


Projecting the vertices
-----------------------

We project the vertices onto a plane perpendicular to one of the three
coordinate axes.  This helps numerical accuracy by removing a
transformation step between the original input data and the data
processed by the algorithm.  The projection also compresses the input
data; the 2D distance between vertices after projection may be smaller
than the original 2D distance.  However by choosing the coordinate
axis whose dot product with the normal is greatest, the compression
factor is at most 1/sqrt(3).

Even though the *accuracy* of the normal is not that important (since
we are projecting perpendicular to a coordinate axis anyway), the
*robustness* of the computation is important.  For example, if there
are many vertices which lie almost along a line, and one vertex V
which is well-separated from the line, then our normal computation
should involve V otherwise the results will be garbage.

The advantage of projecting perpendicular to the polygon normal is
that computed intersection points will be as close as possible to
their ideal locations.  To get this behavior, define TRUE_PROJECT.


The Line Sweep
--------------

There are three data structures: the mesh, the event queue, and the
edge dictionary.

The mesh is a "quad-edge" data structure which records the topology of
the current decomposition; for details see the include file "mesh.h".

The event queue simply holds all vertices (both original and computed
ones), organized so that we can quickly extract the vertex with the
minimum x-coord (and among those, the one with the minimum y-coord).

The edge dictionary describes the current intersection of the sweep
line with the regions of the polygon.  This is just an ordering of the
edges which intersect the sweep line, sorted by their current order of
intersection.  For each pair of edges, we store some information about
the monotone region between them -- these are call "active regions"
(since they are crossed by the current sweep line).

The basic algorithm is to sweep from left to right, processing each
vertex.  The processed portion of the mesh (left of the sweep line) is
a planar decomposition.  As we cross each vertex, we update the mesh
and the edge dictionary, then we check any newly adjacent pairs of
edges to see if they intersect.

A vertex can have any number of edges.  Vertices with many edges can
be created as vertices are merged and intersection points are
computed.  For unprocessed vertices (right of the sweep line), these
edges are in no particular order around the vertex; for processed
vertices, the topological ordering should match the geometric ordering.

The vertex processing happens in two phases: first we process are the
left-going edges (all these edges are currently in the edge
dictionary).  This involves:

 - deleting the left-going edges from the dictionary;
 - relinking the mesh if necessary, so that the order of these edges around
   the event vertex matches the order in the dictionary;
 - marking any terminated regions (regions which lie between two left-going
   edges) as either "inside" or "outside" according to their winding number.

When there are no left-going edges, and the event vertex is in an
"interior" region, we need to add an edge (to split the region into
monotone pieces).  To do this we simply join the event vertex to the
rightmost left endpoint of the upper or lower edge of the containing
region.

Then we process the right-going edges.  This involves:

 - inserting the edges in the edge dictionary;
 - computing the winding number of any newly created active regions.
   We can compute this incrementally using the winding of each edge
   that we cross as we walk through the dictionary.
 - relinking the mesh if necessary, so that the order of these edges around
   the event vertex matches the order in the dictionary;
 - checking any newly adjacent edges for intersection and/or merging.

If there are no right-going edges, again we need to add one to split
the containing region into monotone pieces.  In our case it is most
convenient to add an edge to the leftmost right endpoint of either
containing edge; however we may need to change this later (see the
code for details).


Invariants
----------

These are the most important invariants maintained during the sweep.
We define a function VertLeq(v1,v2) which defines the order in which
vertices cross the sweep line, and a function EdgeLeq(e1,e2; loc)
which says whether e1 is below e2 at the sweep event location "loc".
This function is defined only at sweep event locations which lie
between the rightmost left endpoint of {e1,e2}, and the leftmost right
endpoint of {e1,e2}.

Invariants for the Edge Dictionary.

 - Each pair of adjacent edges e2=Succ(e1) satisfies EdgeLeq(e1,e2)
   at any valid location of the sweep event.
 - If EdgeLeq(e2,e1) as well (at any valid sweep event), then e1 and e2
   share a common endpoint.
 - For each e in the dictionary, e->Dst has been processed but not e->Org.
 - Each edge e satisfies VertLeq(e->Dst,event) && VertLeq(event,e->Org)
   where "event" is the current sweep line event.
 - No edge e has zero length.
 - No two edges have identical left and right endpoints.
 
Invariants for the Mesh (the processed portion).

 - The portion of the mesh left of the sweep line is a planar graph,
   ie. there is *some* way to embed it in the plane.
 - No processed edge has zero length.
 - No two processed vertices have identical coordinates.
 - Each "inside" region is monotone, ie. can be broken into two chains
   of monotonically increasing vertices according to VertLeq(v1,v2)
   - a non-invariant: these chains may intersect (slightly) due to
     numerical errors, but this does not affect the algorithm's operation.

Invariants for the Sweep.

 - If a vertex has any left-going edges, then these must be in the edge
   dictionary at the time the vertex is processed.
 - If an edge is marked "fixUpperEdge" (it is a temporary edge introduced
   by ConnectRightVertex), then it is the only right-going edge from
   its associated vertex.  (This says that these edges exist only
   when it is necessary.)


Robustness
----------

The key to the robustness of the algorithm is maintaining the
invariants above, especially the correct ordering of the edge
dictionary.  We achieve this by:

  1. Writing the numerical computations for maximum precision rather
     than maximum speed.
     
  2. Making no assumptions at all about the results of the edge
     intersection calculations -- for sufficiently degenerate inputs,
     the computed location is not much better than a random number.
     
  3. When numerical errors violate the invariants, restore them
     by making *topological* changes when necessary (ie. relinking
     the mesh structure).
     
     
Triangulation and Grouping
--------------------------

We finish the line sweep before doing any triangulation.  This is
because even after a monotone region is complete, there can be further
changes to its vertex data because of further vertex merging.

After triangulating all monotone regions, we want to group the
triangles into fans and strips.  We do this using a greedy approach.
The triangulation itself is not optimized to reduce the number of
primitives; we just try to get a reasonable decomposition of the
computed triangulation.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\pmesh\coffbase.txt ===
;
; This file defines the base virtual address for Dynamic Link Libraries (DLL)
; that are part of the Windows NT System.  The first token on a line is the name
; of the DLL and the second token is the base virtual address, in hexidecimal.
; The third token is the maximum size of the DLL image file, including symbols.
;
;  NOTE:  Unused areas are marked as _FREE_.

usermode    0x01000000  0x60000000
tglcase     0x44000000  0x00080000
pmatch      0x44080000  0x00080000
justify     0x44100000  0x00080000
ulcase      0x44180000  0x00080000
filter      0x44200000  0x00080000
mhelp       0x44280000  0x00080000
mepparty    0x44300000  0x00080000
srmep       0x44380000  0x00080000
mshelp      0x44400000  0x00080000
mbrowse     0x44480000  0x00080000
zextens     0x44500000  0x00080000
netmsg      0x44580000  0x00080000
neth        0x44600000  0x00080000
netevent    0x44680000  0x00080000
iologmsg    0x44700000  0x00080000
ulib        0x44780000  0x00080000
autoulib    0x44800000  0x00080000
uhpfs       0x44880000  0x00080000
ufat        0x44900000  0x00080000
untfs       0x44980000  0x00080000
ifsutil     0x44a00000  0x00080000
cnvfat      0x44a80000  0x00080000
cnvntfs     0x44b00000  0x00080000
fmifs       0x44b80000  0x00080000
uspifs      0x44c00000  0x00080000
ureg        0x44c80000  0x00080000
dsfolder    0x44d00000  0x00080000
queryui     0x44d80000  0x00080000
nlgwbrkr    0x44e00000  0x00100000
ulibif      0x44f00000  0x00080000
cudbfs      0x44f80000  0x00080000
proxy       0x45000000  0x00080000
alertsys    0x45080000  0x00080000
commnot     0x45100000  0x00080000
cryptdll    0x45180000  0x00080000
demoif      0x45200000  0x00080000
menuedt     0x45280000  0x00080000
hwdll       0x45300000  0x00080000
clock       0x45380000  0x00080000
slm         0x45400000  0x00080000
cal         0x45480000  0x00080000
report      0x45500000  0x00080000
desk        0x45580000  0x00080000
cxxflt      0x45600000  0x00080000
clocksch    0x45680000  0x00080000
dfsui       0x45700000  0x00080000
iclass      0x45780000  0x00080000
kdcsvc      0x45800000  0x00080000
slmck       0x45880000  0x00080000
cmsstg      0x45900000  0x00080000
iprod       0x45980000  0x00080000
kerberos    0x45a00000  0x00080000
ciext       0x45a80000  0x00080000
applet1     0x45b00000  0x00080000
cairocpl    0x45b80000  0x00080000
cpo         0x45c00000  0x00080000
deskapp     0x45c80000  0x00080000
sadmin      0x45d00000  0x00080000
ntlm        0x45d80000  0x00080000
objsrv      0x45e00000  0x00080000
msgfno      0x45e80000  0x00080000
lnktrack    0x45f00000  0x00080000
pocket      0x45f80000  0x00080000
dsfsmsgs    0x46000000  0x00080000
riched20    0x46080000  0x00080000
_CFREE      0x46100000  0x00080000
scperf      0x46180000  0x00080000
msvcbook    0x46200000  0x00080000
dsyscpl     0x46280000  0x00080000
bmpctl      0x46300000  0x00080000
spintime    0x46380000  0x00080000
grpbox      0x46400000  0x00080000
security    0x46480000  0x00080000
secur128    0x46480000  0x00080000
mdbmsg      0x46500000  0x00080000
bimport     0x46580000  0x00080000
oldctrls    0x46600000  0x00080000
smctrls     0x46680000  0x00080000
offfilt     0x46700000  0x00080000
stdobj      0x46780000  0x00080000
csumcat     0x46800000  0x00080000
sysmgmt     0x46880000  0x00080000
dsexts      0x46900000  0x00080000
dfssetup    0x46980000  0x00080000
testdll     0x46a00000  0x00080000
cap         0x46a80000  0x00080000
sysinf      0x46b00000  0x00080000
shdebug     0x46b80000  0x00080000
ntdsmsg     0x46c00000  0x00080000
popups      0x46c80000  0x00080000
replsup     0x46d00000  0x00080000
schema      0x46d80000  0x00080000
useragnt    0x46e00000  0x00080000
vpcont      0x46e80000  0x00080000
uares       0x46f00000  0x00080000
rndrevrp    0x46f80000  0x00080000
pdfpage     0x47000000  0x00080000
pkgpage     0x47080000  0x00080000
package     0x47100000  0x00080000
pdf         0x47180000  0x00080000
jetback     0x47200000  0x00080000
dfsprov     0x47280000  0x00080000
dfsinstr    0x47300000  0x00080000
lprofile    0x47380000  0x00080000
jetbcli     0x47400000  0x00080000
oledlg      0x47480000  0x00080000
edbmsg      0x47500000  0x00080000
oleprx32    0x47580000  0x00080000
wintrust    0x47600000  0x00080000
testext     0x47680000  0x00080000
loghrs      0x47700000  0x00080000
scstg       0x47780000  0x00080000
smoke       0x47800000  0x00080000
dsys        0x47880000  0x00080000
chglogdb    0x47900000  0x00080000
emsabp      0x47980000  0x00080000
flatrst     0x47a00000  0x00080000
softpub     0x47a80000  0x00080000
oabgen      0x47b00000  0x00080000
replui      0x47b80000  0x00080000
roschlog    0x47c00000  0x00080000
rsmgr       0x47c80000  0x00080000
dsobjs      0x47d00000  0x00080000
account     0x47d80000  0x00080000
ntdsperf    0x47e00000  0x00080000
ntdskcc     0x47e80000  0x00080000
dsmail      0x47f00000  0x00080000
atsvc       0x47f80000  0x00080000
ntdsx400    0x48000000  0x00080000
ntdsxds     0x48080000  0x00080000
dssrv       0x48100000  0x00080000
digsig      0x48180000  0x00080000
xfilexr     0x48200000  0x00080000
webcore     0x48280000  0x00080000
rtoolbar    0x48300000  0x00080000
rtfdoc      0x48380000  0x00080000
spincube    0x48400000  0x00080000
msgina      0x48480000  0x00080000
rsabase     0x48500000  0x00080000
smss        0x48580000  0x00080000
brhj770     0x48600000  0x00080000
brother9    0x48680000  0x00080000
brothr24    0x48700000  0x00080000
canon330    0x48780000  0x00080000
canon800    0x48800000  0x00080000
canonlbp    0x48880000  0x00080000
cit24us     0x48900000  0x00080000
cit9us      0x48980000  0x00080000
citoh       0x48a00000  0x00080000
dec24pin    0x48a80000  0x00080000
dec9pin     0x48b00000  0x00080000
diconix     0x48b80000  0x00080000
epson24     0x48c00000  0x00080000
epson9      0x48c80000  0x00080000
escp2e      0x48d00000  0x00080000
escp2ms     0x48d80000  0x00080000
fuji24      0x48e00000  0x00080000
fuji9       0x48e80000  0x00080000
hpdskjet    0x48f00000  0x00080000
hppcl       0x48f80000  0x00080000
optra       0x49080000  0x00080000
pcl5ems     0x49100000  0x00080000
pcl5ms      0x49180000  0x00080000
ibm238x     0x49200000  0x00080000
ibm239x     0x49280000  0x00080000
ibm5204     0x49300000  0x00080000
ibm5204     0x49380000  0x00080000
ibmppdsl    0x49400000  0x00080000
ibmport     0x49480000  0x00080000
jp350       0x49500000  0x00080000
kyocera     0x49580000  0x00080000
kyocerax    0x49580000  0x00080000
mantal      0x49600000  0x00080000
mantal24    0x49680000  0x00080000
mantal90    0x49700000  0x00080000
mt735       0x49780000  0x00080000
nec24pin    0x49800000  0x00080000
oki24       0x49880000  0x00080000
oki9ibm     0x49900000  0x00080000
olidm24     0x49980000  0x00080000
olidm9      0x49a00000  0x00080000
paintjet    0x49a80000  0x00080000
panson24    0x49b00000  0x00080000
panson9     0x49b80000  0x00080000
proprint    0x49c00000  0x00080000
proprn24    0x49c80000  0x00080000
ps1         0x49d00000  0x00080000
quietjet    0x49d80000  0x00080000
qwiii       0x49e00000  0x00080000
seiko       0x49e80000  0x00080000
seiko24e    0x49f00000  0x00080000
seikosh9    0x49f80000  0x00080000
star24e     0x4a000000  0x00080000
star9e      0x4a080000  0x00080000
starjet     0x4a100000  0x00080000
thinkjet    0x4a180000  0x00080000
ti850       0x4a200000  0x00080000
toshiba     0x4a280000  0x00080000
txtonly     0x4a300000  0x00080000
xeroxpcl    0x49000000  0x00080000
loader      0x4a380000  0x00080000
imagehlp    0x4a400000  0x00080000
oki9        0x4a480000  0x00080000
dec3200     0x4a500000  0x00080000
vmmreg32    0x4a580000  0x00080000
dbgss       0x4a600000  0x00080000
csrss       0x4a680000  0x00080000
os2ss       0x4a700000  0x00080000
psxss       0x4a780000  0x00080000
Wx86Group   0x4a800000  0x00080000
eecxxx86    0x4a880000  0x00080000
eecxxmip    0x4a900000  0x00080000
eecxxalp    0x4a980000  0x00080000
eecxxppc    0x4aa00000  0x00080000
eecxx       0x4aa80000  0x00080000
emx86       0x4ab00000  0x00080000
emmip       0x4ab80000  0x00080000
emalp       0x4ac00000  0x00080000
emppc       0x4ac80000  0x00080000
cmd         0x4ad00000  0x00080000
wspmib      0x4ad80000  0x00080000
shcv        0x4ae00000  0x00080000
tlloc       0x4ae80000  0x00080000
tlser       0x4af00000  0x00080000
tlser32s    0x4af80000  0x00080000
tlser32     0x4b000000  0x00080000
tlpipe      0x4b080000  0x00080000
dm          0x4b100000  0x00080000
dm32s       0x4b180000  0x00080000
dmkdx86     0x4b200000  0x00080000
dmkdmip     0x4b280000  0x00080000
dmkdalp     0x4b300000  0x00080000
dmkdppc     0x4b380000  0x00080000
kdextx86    0x4b400000  0x00080000
kdextmip    0x4b480000  0x00080000
kdextalp    0x4b500000  0x00080000
kdextppc    0x4b580000  0x00080000
acledit     0x4b600000  0x00080000
mpr         0x4b680000  0x00080000
ntlanman    0x4b700000  0x00080000
srvmgr      0x4b780000  0x00080000
ncpa        0x4b800000  0x00080000
mprui       0x4b880000  0x00080000
netui0      0x4b900000  0x00080000
netui1      0x4b980000  0x00080000
ifiltcnv    0x4ba00000  0x00080000
ftpsmx      0x4ba80000  0x00080000
ftpmgr      0x4bb00000  0x00080000
nwcfg       0x4bb80000  0x00080000
ntlanui     0x4bc00000  0x00080000
tcpcfg      0x4bc80000  0x00080000
ipxcfg      0x4bd00000  0x00080000
ntlsapi     0x4bd80000  0x00080000
lsapi32     0x4be00000  0x00080000
mslsp32     0x4be80000  0x00080000
ccfapi32    0x4bf00000  0x00080000
srvkd       0x4bf80000  0x00080000
llsrpc      0x4c000000  0x00080000
racfg       0x4c080000  0x00080000
isnext      0x4c100000  0x00080000
profext     0x4c180000  0x00080000
activeds    0x4c200000  0x00080000
dsrights    0x4c200000  0x00080000
dbgdll      0x4c280000  0x00080000
advapi32    0x4c300000  0x00080000
csrrtl      0x4c380000  0x00080000
csrsrv      0x4c400000  0x00080000
adsnw       0x4c480000  0x00080000
basertl     0x4c500000  0x00080000
basesrv     0x4c580000  0x00080000
adsnds      0x4c600000  0x00080000
winsrv      0x4c680000  0x00080000
winsrv2     0x4c700000  0x00080000
rasdd       0x4c780000  0x00080000
sysmono     0x4c800000  0x00080000
courier     0x4c880000  0x00080000
helv        0x4c900000  0x00080000
times       0x4c980000  0x00080000
netapi32    0x4ca00000  0x00080000
wowfaxui    0x4ca80000  0x00080000
winmgr      0x4cb00000  0x00080000
display     0x4cb80000  0x00080000
vga         0x4cc00000  0x00080000
winspool    0x4cc80000  0x00080000
splsrv      0x4cd00000  0x00080000
ntprint     0x4cd80000  0x00080000
pscript     0x4ce00000  0x00080000
halftone    0x4ce80000  0x00080000
lmspool     0x4cf00000  0x00080000
os2dll      0x4cf80000  0x00080000
psxdll      0x4d000000  0x00080000
winnet      0x4d080000  0x00080000
msv1_0      0x4d100000  0x00080000
samlib      0x4d180000  0x00080000
lsaap       0x4d200000  0x00080000
netrap      0x4d280000  0x00080000
adsnt       0x4d300000  0x00080000
dvideo      0x4d380000  0x00080000
dplay       0x4d400000  0x00080000
console     0x4d480000  0x00080000
gdi32       0x4d500000  0x00080000
apidll      0x4d580000  0x00080000
imgadmin    0x4d600000  0x00080000
imgedit     0x4d680000  0x00080000
imgscan     0x4d700000  0x00080000
imgthumb    0x4d780000  0x00080000
jpeg1x32    0x4d800000  0x00080000
jpeg2x32    0x4d880000  0x00080000
oiadm400    0x4d900000  0x00080000
oicom400    0x4d980000  0x00080000
oidis400    0x4da00000  0x00080000
oifil400    0x4da80000  0x00080000
oigfs400    0x4db00000  0x00080000
oiprt400    0x4db80000  0x00080000
oislb400    0x4dc00000  0x00080000
oissq400    0x4dc80000  0x00080000
oitwa400    0x4dd00000  0x00080000
oiui400     0x4dd80000  0x00080000
wangcmn     0x4de00000  0x00080000
wangshl     0x4de80000  0x00080000
media       0x4df00000  0x00080000
mediasrv    0x4df80000  0x00080000
lprmon      0x4e000000  0x00080000
lprhelp     0x4e080000  0x00080000
lpdsvc      0x4e100000  0x00080000
printui     0x4e180000  0x00080000
winsrvk     0x4e200000  0x00080000
msafd       0x4e280000  0x00080000
mswsock     0x4e300000  0x00080000
ws2help     0x4e380000  0x00080000
rnr20       0x4e400000  0x00080000
DEBMP       0x4e480000  0x00080000
DEHEX       0x4e500000  0x00080000
DEMET       0x4e580000  0x00080000
DESS        0x4e600000  0x00080000
glexts      0x4e680000  0x00080000
DEWP        0x4e700000  0x00080000
SCCVIEW     0x4e780000  0x00080000
MSVIEWUT    0x4e800000  0x00080000
wdt32       0x4e880000  0x00080000
nddeexts    0x4e900000  0x00080000
sde         0x4e980000  0x00080000
ndrd        0x4ea00000  0x00080000
hdxdll      0x4ea80000  0x00080000
splexts     0x4eb00000  0x00080000
conexts     0x4eb80000  0x00080000
gdiexts     0x4ec00000  0x00080000
gdikdx      0x4ec80000  0x00080000
ttkdx       0x4ed00000  0x00080000
userexts    0x4ed80000  0x00080000
userkdx     0x4ee00000  0x00080000
ntsdexts    0x4ee80000  0x00080000
plotter     0x4ef00000  0x00080000
rpcrt4      0x4ef80000  0x00080000
imm32       0x4f000000  0x00080000
winmm       0x4f080000  0x00080000
rpcssp      0x4f100000  0x00080000
mciwave     0x4f180000  0x00080000
rpclts1     0x4f200000  0x00080000
rpcltc1     0x4f280000  0x00080000
ldrdll      0x4f300000  0x00080000
mcicda      0x4f380000  0x00080000
plotui      0x4f400000  0x00080000
rasddui     0x4f480000  0x00080000
pscrptui    0x4f500000  0x00080000
mmio        0x4f580000  0x00080000
rpcnts1     0x4f600000  0x00080000
rpcntc1     0x4f680000  0x00080000
nlsapi      0x4f700000  0x00080000
ws2_32      0x4f780000  0x00080000
afdkd       0x4f800000  0x00080000
olesvr32    0x4f880000  0x00080000
olecli32    0x4f900000  0x00080000
msgsvc      0x4f980000  0x00080000
decpsmon    0x4fa00000  0x00080000
sys003      0x4fa80000  0x00080000
beta2       0x4fb00000  0x00080000
psapi       0x4fb80000  0x00080000
rpcdce4     0x4fc00000  0x00080000
eventlog    0x4fc80000  0x00080000
xactsrv     0x4fd00000  0x00080000
winreg      0x4fd80000  0x00080000
ntdsslot    0x4fe00000  0x00080000
samlsa      0x4fe80000  0x00080000
mmdrv       0x4ff00000  0x00080000
dlcapi      0x4ff80000  0x00080000
win32spl    0x50000000  0x00080000
localspl    0x50080000  0x00080000
rpcltc5     0x50100000  0x00080000
netlogon    0x50180000  0x00080000
tmsre32     0x50200000  0x00080000
lsaudll     0x50280000  0x00080000
mciseq      0x50300000  0x00080000
winprint    0x50380000  0x00080000
localmon    0x50400000  0x00080000
msaudite    0x50480000  0x00080000
msobjs      0x50500000  0x00080000
hpmon       0x50580000  0x00080000
alrsvc      0x50600000  0x00080000
srvsvc      0x50680000  0x00080000
wkssvc      0x50700000  0x00080000
msafdext    0x50780000  0x00080000
compstui    0x50800000  0x00080000
htui        0x50880000  0x00080000
lsasrv      0x50900000  0x00080000
mmsndsrv    0x50980000  0x00080000
midi        0x50a00000  0x00080000
browser     0x50a80000  0x00080000
drivers     0x50b00000  0x00080000
lmmon       0x50b80000  0x00080000
spoolss     0x50c00000  0x00080000
sndblst     0x50c80000  0x00080000
dsrights    0x50d00000  0x00080000
ntlmssps    0x50d80000  0x00080000
ntlms128    0x50d80000  0x00080000
glu32       0x50e00000  0x00080000
memtrace    0x50e80000  0x00080000
ogldrv      0x50f00000  0x00080000
dciman32    0x50f80000  0x00080000
ddraw       0x51000000  0x00080000
dsound      0x51080000  0x00080000
pjlmon      0x51100000  0x00080000
dpwsock     0x51180000  0x00080000
dpserial    0x51200000  0x00080000
dpsocket    0x51280000  0x00080000
formidbl    0x51300000  0x00080000
fole2ui     0x51380000  0x00080000
ntshrui     0x51400000  0x00080000
ntlanui2    0x51480000  0x00080000
shareui     0x51500000  0x00080000
wsasetup    0x51580000  0x00080000
control     0x51600000  0x00080000
access      0x51680000  0x00080000
sound       0x51700000  0x00080000
appwiz      0x51780000  0x00080000
intl        0x51800000  0x00080000
timedate    0x51880000  0x00080000
utc         0x51900000  0x00080000
mouse       0x51980000  0x00080000
sysdm       0x51a00000  0x00080000
desk        0x51a80000  0x00080000
modem       0x51b00000  0x00080000
security    0x51b80000  0x00080000
; this is the same as security - both will never be loaded
secur32     0x51b80000  0x00080000
main        0x51c00000  0x00080000
ups         0x51c80000  0x00080000
cursors     0x51d00000  0x00080000
pcmcia      0x51d80000  0x00080000
t1instal    0x51e00000  0x00080000
devapps     0x51e80000  0x00080000
console     0x51f00000  0x00080000
mmsys       0x51f80000  0x00080000
indicdll    0x52000000  0x00080000
comdlg32    0x52080000  0x00080000
wldap32     0x52100000  0x00080000
version     0x52180000  0x00080000
nddeapi     0x52200000  0x00080000
nddenb32    0x52280000  0x00080000
shscrap     0x52300000  0x00080000
ftsrch      0x52380000  0x00080000
docprop     0x52400000  0x00080000
diskcopy    0x52480000  0x00080000
mswsutil    0x52500000  0x00080000
ws2map      0x52580000  0x00080000
linkinfo    0x52600000  0x00080000
synceng     0x52680000  0x00080000
syncui      0x52700000  0x00080000
rshx32      0x52780000  0x00080000
prtq32      0x52800000  0x00080000
userenv     0x52880000  0x00080000
shcompui    0x52900000  0x00080000

; Keyboard drivers are all the same

kbdus       0x52980000  0x00080000
kbdal       0x52980000  0x00080000
kbdbe       0x52980000  0x00080000
kbdbene     0x52980000  0x00080000
kbdblr      0x52980000  0x00080000
kbdbu       0x52980000  0x00080000
kbdbr       0x52980000  0x00080000
kbdca       0x52980000  0x00080000
kbdcan      0x52980000  0x00080000
kbdcr       0x52980000  0x00080000
kbdcz       0x52980000  0x00080000
kbdcz1      0x52980000  0x00080000
kbdcz2      0x52980000  0x00080000
kbdda       0x52980000  0x00080000
kbddv       0x52980000  0x00080000
kbdes       0x52980000  0x00080000
kbdest      0x52980000  0x00080000
kbdfc       0x52980000  0x00080000
kbdfi       0x52980000  0x00080000
kbdfr       0x52980000  0x00080000
kbdgkl      0x52980000  0x00080000
kbdgr       0x52980000  0x00080000
kbdgr1      0x52980000  0x00080000
kbdhe       0x52980000  0x00080000
kbdhe220    0x52980000  0x00080000
kbdhe319    0x52980000  0x00080000
kbdhu       0x52980000  0x00080000
kbdhu1      0x52980000  0x00080000
kbdic       0x52980000  0x00080000
kbdir       0x52980000  0x00080000
kbdit       0x52980000  0x00080000
kbdit142    0x52980000  0x00080000
kbdla       0x52980000  0x00080000
kbdlt       0x52980000  0x00080000
kbdlt1      0x52980000  0x00080000
kbdlv       0x52980000  0x00080000
kbdlv1      0x52980000  0x00080000
kbdne       0x52980000  0x00080000
kbdno       0x52980000  0x00080000
kbdpl       0x52980000  0x00080000
kbdpl1      0x52980000  0x00080000
kbdpo       0x52980000  0x00080000
kbdro       0x52980000  0x00080000
kbdru       0x52980000  0x00080000
kbdru1      0x52980000  0x00080000
kbdsf       0x52980000  0x00080000
kbdsg       0x52980000  0x00080000
kbdsl       0x52980000  0x00080000
kbdsl1      0x52980000  0x00080000
kbdsp       0x52980000  0x00080000
kbdsv       0x52980000  0x00080000
kbdsw       0x52980000  0x00080000
kbdtuf      0x52980000  0x00080000
kbdtuq      0x52980000  0x00080000
kbduk       0x52980000  0x00080000
kbdur       0x52980000  0x00080000
kbdurs      0x52980000  0x00080000
kbdusl      0x52980000  0x00080000
kbdusr      0x52980000  0x00080000
kbdusx      0x52980000  0x00080000
kbdycc      0x52980000  0x00080000
kbdycl      0x52980000  0x00080000
kbdhela2    0x52a00000  0x00080000
kbdhela3    0x52a00000  0x00080000

;
; FarEast keyboard layouts - begin
;
kbdjpn      0x52980000  0x00080000
kbd101      0x52980000  0x00080000
kbd106      0x52980000  0x00080000
kbd106n     0x52980000  0x00080000
kbdax2      0x52980000  0x00080000
kbdibm02    0x52980000  0x00080000
f3ahvoas    0x52980000  0x00080000
kbdlk41a    0x52980000  0x00080000
kbdlk41j    0x52980000  0x00080000
kbdkor      0x52980000  0x00080000
kbd101a     0x52980000  0x00080000
kbd101b     0x52980000  0x00080000
kbd101c     0x52980000  0x00080000
kbd103      0x52980000  0x00080000
kbdnec      0x52980000  0x00080000
kbdn106     0x52980000  0x00080000
; FarEast keyboard layouts - end

mstask      0x52a80000  0x00080000
dsui        0x52b00000  0x00080000
trace       0x52b80000  0x00080000
relay       0x52c00000  0x00080000
infosoft    0x52c80000  0x00180000
iprip       0x52e00000  0x00080000
wsock32     0x52e80000  0x00080000
winstrm     0x52f00000  0x00080000
inetmib1    0x52f80000  0x00080000
lmmib2      0x53100000  0x00080000
tcpipsvc    0x53180000  0x00080000
nbtsvc      0x53200000  0x00080000
telnet      0x53280000  0x00080000
wshtcpip    0x53300000  0x00080000
mgmtapi     0x53380000  0x00080000
icmp        0x53400000  0x00080000
inettrap    0x53480000  0x00080000
testdll     0x53500000  0x00080000
lmhsvc      0x53580000  0x00080000
dhcpsapi    0x53600000  0x00080000
dhcpcsvc    0x53680000  0x00080000
dhcpssvc    0x53700000  0x00080000
inetsvcs    0x53780000  0x00080000
ftpsvc      0x53800000  0x00080000
ftpsvapi    0x53880000  0x00080000
ftpctrs     0x53900000  0x00080000
infocomm    0x53980000  0x00080000
wspapi      0x53a00000  0x00080000
cxxflt      0x53a80000  0x00080000
wspcfg      0x53b00000  0x00080000
w3proxy     0x53b80000  0x00080000
rpcltc8     0x53c00000  0x00080000
rpclts8     0x53c80000  0x00080000
w3svc       0x53d00000  0x00080000
w3svapi     0x53d80000  0x00080000
w3ctrs      0x53e00000  0x00080000
sspifilt    0x53e80000  0x00080000
gopherd     0x53f00000  0x00080000
gdapi       0x53f80000  0x00080000
gdctrs      0x54000000  0x00080000
gdspace     0x54080000  0x00080000
sage        0x54100000  0x00080000
adsldp      0x54180000  0x00080000
isatq       0x54200000  0x00080000
mspapi      0x54280000  0x00080000
infoadmn    0x54300000  0x00080000
infoctrs    0x54380000  0x00080000
mspip       0x54400000  0x00080000
httpodbc    0x54480000  0x00080000
w3pcfg      0x54500000  0x00080000
w3papi      0x54580000  0x00080000
mspmon      0x54600000  0x00080000
rpcltccm    0x54680000  0x00080000
rpcltscm    0x54700000  0x00080000
inetaux     0x54780000  0x00080000
inetsloc    0x54800000  0x00080000
urlcache    0x54880000  0x00080000
mspsec      0x54900000  0x00080000
w32sinet    0x54980000  0x00080000
httpmib     0x54a00000  0x00080000
gdmib       0x54a80000  0x00080000
ftpmib      0x54b00000  0x00080000
gdmib       0x54b80000  0x00080000
w3pmib      0x54c00000  0x00080000
ftpsvc2     0x54c80000  0x00080000
ftpsapi2    0x54d00000  0x00080000
ftpctrs2    0x54d80000  0x00080000
miniprox    0x54e00000  0x00080000
_wsock32    0x54e80000  0x00080000
wsock32f    0x54f00000  0x00080000
netdtect    0x54f80000  0x00080000
msncdet     0x55000000  0x00080000
npincdet    0x55080000  0x00080000
amdncdet    0x55100000  0x00080000
netflx      0x55180000  0x00080000
bhsupp      0x55200000  0x00080000
nal         0x55280000  0x00080000
bhmon       0x55300000  0x00080000
ndis30      0x55380000  0x00080000
bhnetb      0x55400000  0x00080000
rnal        0x55480000  0x00080000
bhkctrl     0x55500000  0x00080000
nwsap       0x55580000  0x00080000
rws32       0x55600000  0x00080000
snmpapi     0x55680000  0x00080000
convmsg     0x55700000  0x00080000
winsctrs    0x55780000  0x00080000
winsmib     0x55800000  0x00080000
dhcpmib     0x55880000  0x00080000
winsevnt    0x55900000  0x00080000
winsrpc     0x55980000  0x00080000
winsrpcb    0x55a00000  0x00080000
dscont      0x55a80000  0x00080000
NTCTL3D     0x55b00000  0x00080000
MPHEAP      0x55b80000  0x00080000
MAPI32      0x55c00000  0x00080000
EDB         0x55c80000  0x00080000
EDBPERF     0x55d00000  0x00080000
ESCPRINT    0x55d80000  0x00080000
RICHED32    0x55e00000  0x00080000
WMSUI32     0x55e80000  0x00080000
MLCFG32     0x55f00000  0x00080000
MSFS32      0x55f80000  0x00080000
GAPI32      0x56000000  0x00080000
samsrv      0x56080000  0x00100000
msvcrt40    0x56180000  0x00080000
msvcr40d    0x56200000  0x00080000
msvcrt20    0x56280000  0x00080000
msvcrt10    0x56300000  0x00080000
msvcrt      0x56380000  0x00080000
MMFMIG32    0x56400000  0x00080000
WMSFR32     0x56480000  0x00080000
WGPOCPL     0x56500000  0x00080000
WGPOADMN    0x56580000  0x00080000
MINET32     0x56600000  0x00080000
INETAB32    0x56680000  0x00080000
MSPST32     0x56700000  0x00080000
MLSHEXT     0x56780000  0x00080000
MAPIU32     0x56800000  0x00080000
MAPIX32     0x56880000  0x00080000
LPREXT      0x56900000  0x00080000
ISNEXT      0x56980000  0x00080000
htmlfilt    0x56c80000  0x00080000
SCCUT       0x56d00000  0x00080000
SCCFA       0x56d80000  0x00080000
SCCFI       0x56e00000  0x00080000
SCCIFILT    0x56e80000  0x00080000
VSACS       0x56f00000  0x00080000
VSASC8      0x56f80000  0x00080000
VSBDR       0x57000000  0x00080000
VSBMP       0x57080000  0x00080000
VSDBS       0x57100000  0x00080000
VSDRW       0x57180000  0x00080000
VSEXE       0x57200000  0x00080000
VSEXE2      0x57280000  0x00080000
VSGIF       0x57300000  0x00080000
VSMCW       0x57380000  0x00080000
VSMP        0x57400000  0x00080000
VSMSW       0x57480000  0x00080000
VSMWP2      0x57500000  0x00080000
VSMWPF      0x57580000  0x00080000
VSPCL       0x57600000  0x00080000
VSPDX       0x57680000  0x00080000
VSPFS       0x57700000  0x00080000
VSPP        0x57780000  0x00080000
VSPP5       0x57800000  0x00080000
VSPP7       0x57880000  0x00080000
VSQPW       0x57900000  0x00080000
VSRTF       0x57980000  0x00080000
VSTIFF      0x57a00000  0x00080000
VSTEXT      0x57a80000  0x00080000
VSTXT       0x57b00000  0x00080000
VSVW3       0x57b80000  0x00080000
VSW6        0x57c00000  0x00080000
VSWKS       0x57c80000  0x00080000
VSWMF       0x57d00000  0x00080000
VSWORD      0x57d80000  0x00080000
VSWORK      0x57e00000  0x00080000
VSWP5       0x57e80000  0x00080000
VSWP6       0x57f00000  0x00080000
VSWPF       0x57f80000  0x00080000
VSWS2       0x58000000  0x00080000
VSXL5       0x58080000  0x00080000
VSXY        0x58100000  0x00080000
CFM30       0x58180000  0x00100000
CFM30U      0x58280000  0x00100000
CFMO30      0x58380000  0x00080000
CFMO30U     0x58400000  0x00080000
inetcpl     0x58500000  0x00080000
secsspi     0x58580000  0x00080000
msnsspc     0x58600000  0x00080000
qperf       0x58680000  0x00080000
iismap      0x58700000  0x00080000
iiscrmap    0x58780000  0x00080000
certmapr    0x5cd80000  0x00080000
iisui	    0x5ce00000	0x00080000
iisadmin    0x5cf00000  0x00080000
iistmp4     0x5cf80000  0x00080000

;
; Security Related DLLs (there is only
; ever one at a time, hence the overlap)
;
schannel    0x58800000  0x00100000
schnl128    0x58800000  0x00100000
schanlsa    0x58900000  0x00080000
secure32    0x58980000  0x00080000

w3scfg      0x58A00000  0x00080000
fscfg       0x58A80000  0x00080000
gscfg       0x58B00000  0x00080000
ipudll      0x58B80000  0x00080000
mupkd       0x58C00000  0x00080000
netsetup    0x58C80000  0x00080000
netcfg      0x58D00000  0x000F0000
w3key       0x58E00000  0x00080000
hid         0x58E80000  0x00080000
powercfg    0x58F00000  0x00080000
ntmarta     0x58F80000  0x00080000
ntdsa       0x59000000  0x00200000
ntdssmtp    0x59200000  0x00080000
ntdsapi     0x59280000  0x00080000
printree    0x59300000  0x00080000
lexnetui    0x59380000  0x00080000
mvprm       0x59400000  0x00080000
mvprtobj    0x59480000  0x00080000
mvpo_wri    0x59500000  0x00080000
mvpo_sun    0x59580000  0x00080000
mvprtmgr    0x59600000  0x00080000
mvresdll    0x59680000  0x00080000
mvguidll    0x59700000  0x00080000
agguidll    0x59780000  0x00080000
sfguidll    0x59800000  0x00080000
common      0x59880000  0x00080000
lexll32     0x59900000  0x00080000
lexip32     0x59980000  0x00080000
lexipx32    0x59A00000  0x00080000
mvprtgui    0x59A80000  0x00080000
agprtgui    0x59B00000  0x00080000
sfprtgui    0x59B80000  0x00080000
mvntinst    0x59C00000  0x00080000
lexbce      0x59C80000  0x00080000
lexbcelm    0x59D00000  0x00080000
lexlmpm     0x59D80000  0x00080000
lexlang     0x59E00000  0x00080000
lexcfg      0x59E80000  0x00080000
interact    0x59F00000  0x00080000
lexmon      0x59F80000  0x00080000
drax400     0x5A000000  0x00080000
joy         0x5A080000  0x00080000
backend     0x5a500000  0x00080000
ccrdsvr     0x5a580000  0x00080000
certapi     0x5a600000  0x00080000
certhelp    0x5a680000  0x00080000
certstor    0x5a700000  0x00080000
ecmapi      0x5a780000  0x00080000
root        0x5a800000  0x00080000
credsvr     0x5a880000  0x00080000
paysvr      0x5a900000  0x00080000
mcrdsvr     0x5a980000  0x00080000
mersvr      0x5aa00000  0x00080000
cmrdll      0x5aa80000  0x00080000
httptran    0x5ab00000  0x00080000
bgimer      0x5ab80000  0x00080000
bgiccs      0x5ac00000  0x00080000
bgipay      0x5ac80000  0x00080000
msref       0x5ad00000  0x00080000
ccsref      0x5ad80000  0x00080000
psref       0x5ae00000  0x00080000
strconv     0x5ae80000  0x00080000
digsig      0x5af00000  0x00080000
wintrust    0x5af80000  0x00080000
runornot    0x5b000000  0x00080000
pcertsvr    0x5b080000  0x00080000
certsrv     0x5b100000  0x00080000
redir       0x5b180000  0x00080000
spc         0x5b200000  0x00080000
syscert     0x5b280000  0x00080000
thunkcr     0x5b300000  0x00080000
wincert     0x5b380000  0x00080000
wintrust    0x5b400000  0x00080000
scpmer      0x5b480000  0x00080000
scppay      0x5b500000  0x00080000
scproot     0x5b580000  0x00080000
advpack     0x5b600000  0x00080000
;Next Three Slots for hprasdd
hprasdd     0x5b680000  0x00080000
hprasdui    0x5b700000  0x00080000
hp5sim      0x5b780000  0x00080000
msimg32     0x5b800000  0x00100000
; CODEWORK doubly-used space here
mscms       0x5b880000  0x00100000
newdev      0x5b900000  0x00100000
mmc         0x5b980000  0x00080000
mmcndmgr    0x5ba00000  0x00080000
mmclv       0x5ba80000  0x00080000
mmcfmgmt    0x5bb00000  0x00080000
snapsamp    0x5bb80000  0x00080000
bull24      0x5bc00000  0x00080000
bull9       0x5bc80000  0x00080000
dpcpcl      0x5bd00000  0x00080000
secsetup    0x5be00000  0x00080000
dsctl       0x5be80000  0x00080000
bullaser    0x5bf00000  0x00080000
comctl32    0x5bf80000  0x00080000
d3dhalf     0x5c000000  0x00080000
d3drampf    0x5c080000  0x00080000
d3drg16f    0x5c100000  0x00080000
d3drg32f    0x5c180000  0x00080000
d3drg8f     0x5c200000  0x00080000
d3drgbf     0x5c280000  0x00080000
d3drm16f    0x5c300000  0x00080000
d3drm32f    0x5c380000  0x00080000
d3drm       0x5c400000  0x00080000
d3drm8f     0x5c480000  0x00080000
d3dxof      0x5c500000  0x00080000
d3drg24f    0x5c580000  0x00080000
d3drm24f    0x5c600000  0x00080000
d3dim       0x5c680000  0x00080000
msw3prt     0x5c700000  0x00080000
ntdsetup    0x5c780000  0x00080000
winrnr      0x5c800000  0x00080000
comcat      0x5c880000  0x00080000
clapi       0x5c900000  0x00080000
clapistb    0x5c980000  0x00080000
iislog      0x5ca00000  0x00080000
cinetlog    0x5ca80000  0x00080000
smonctrl    0x5cb00000  0x00080000
msoss       0x5cb80000  0x00080000
hp5simui    0x5cc00000  0x00080000
dskquota    0x5cc80000  0x00080000
dskquopx    0x5cd00000  0x00080000
wshom       0x5cd80000  0x00080000
chanelui    0x5ce00000  0x00080000
dssnap      0x5ce80000  0x00080000
crypt32     0x5cf00000  0x00080000
mssip1      0x5cf80000  0x00080000
ochelpr     0x5d000000  0x00080000
ocimgr      0x5d080000  0x00080000
spriter     0x5d100000  0x00080000
stager      0x5d180000  0x00080000
textfxr     0x5d200000  0x00080000
hostlwr     0x5d280000  0x00080000
hhctrl      0x5d300000  0x00080000
themes      0x5d380000  0x00080000
plustab     0x5d400000  0x00080000
htmlhelp    0x5d480000  0x00080000
cleanoc     0x5d500000  0x00080000
bull18      0x5d580000  0x00080000
x42xxpcl    0x5d600000  0x00080000
_FREE_      0x5d680000  0x00080000

;
; Free space from here to 0x63000000.
;   Also, lots of _FREE_ spaces open above... Reuse these first
;

; Internet Explorer 2.0 / 3.0
wininet     0x63000000  0x00100000
cachevu     0x63100000  0x00080000
shlwapi     0x63180000  0x00080000
urlmon      0x63200000  0x00080000
url         0x63280000  0x00080000
js          0x63300000  0x00080000
jscript     0x63380000  0x00080000
msrating    0x63400000  0x00080000
mslocusr    0x63440000  0x00040000
ichrcnv     0x63480000  0x00080000
shdocvw     0x63500000  0x00080000
mshtml      0x63580000  0x00080000
htmlctl     0x63600000  0x00080000
inetcpl     0x63680000  0x00080000
actxprxy    0x63700000  0x00080000
_FREE_      0x63780000  0x00080000
winsspi     0x63800000  0x00100000


; Internet Explorer 2.0 only
ieshstub    0x63700000  0x00080000
secbasic    0x63780000  0x00080000

; Proxy Server
w3pcache    0x63800000  0x00080000
msplog      0x63880000  0x00080000
w3pinet     0x63900000  0x00080000

;
; Big things
;
glmf32      0x65000000  0x00300000
jet         0x65300000  0x00300000
jet500      0x65600000  0x00300000
kernel32    0x65900000  0x00300000
netui2      0x65c00000  0x00300000
ole32       0x65f00000  0x00300000
opengl32    0x66200000  0x00300000
query       0x66500000  0x00300000
shell32     0x66800000  0x00300000
shellalt    0x66b00000  0x00300000
user32      0x66e00000  0x00300000
ntdll       0x67200000  0x00100000
metadata    0x67300000  0x00300000

glpm      0x67700000  0x00300000
;  If we run out, there's more before this range.

executive   0xD0020000  0x18000000
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\pmesh\docs\mesh.doc ===
Microsoft Word Document MSWordDoc Word.Document.6Microsoft Mesh:Mesh: Anantha Kancherla Normal Anantha Kancherla Microsoft Word for Windows 95Microsoft Word Picture MSWordDoc Word.Picture.6Microsoft Word System Times New RomanMicrosoftAnantha Kancherla Normal Anantha Kancherla Microsoft Word for Windows 95Normal Default Paragraph Font @\\MSPRINT44\26S/2MC CORPK 157.55.80.242 Ne00: winspool \\MSPRINT44\26S/2MC CORPK 157.55.80.242 \\MSPRINT44\26S/2MC CORPK 157.5 Letter \\MSPRINT44\26S/2MC CORPK 157.5 Letter Times New Roman Symbol Arial Anantha Kancherla Anantha KancherlaMesh: Mesh is a piecewise linear surface consisting of triangular faces pasted together along their edges. Mesh geometry is denoted as a tuple (K, V) K is a simplicial comlex specifying the connectivity of mesh simplices (the adjacency of vertices, edges and faces) V is a set of vertex positions defining the shape of the mesh in R3, V = {v1, v2,   , vm} Discrete attributes are associated with faces. MatIDs = Shader functions Scalar attributes are associated with the mesh (rgb, normals, texcoords etc) basically the parameters that need to be interpolated for the shader functions.  Scalar functions are associated with the corners or wedges. A Corner or Wedge is defined as a (vertex,face) tuple. Scalar attributes at corner (v,f) specify the shading parameters for face f at vertex v. Mesh is defined as a tuple M = (K, V, D, S) V specifies geometry D set of discrete attributes df associated with the faces f = {j, k, l} ( K. S is a set of scalar attributes s(v,f) associated with the corner (v,f) of K. PMesh: M0  = Base mesh, it has m0 number of vertices. Initial mesh = Mn  Vsplit: Using Vsplit operation, a vertex vs can be split into 2 adjacent vertices vs and vt. 1 or 2 new faces are created {vs, vt, vl} and {vt, vs, vr} Vsplit vertices in mesh Mi are represented as Vi = {v1, v2,  , vm0+i} Applying vsplit vspliti on vertex vsi , mesh Mi is transformed into mesh Mi+1 with a new vertex  Normal Default Paragraph Font vm0+i+1 and a new edge (vsi+1, v m0+i+1) As vertices may have different positions in different meshes, the position of vj in Mi  is denoted as vji. vsplit (s, l, r, t, A) adds near vertex a new vertex and two new faces . If edge () is a boundary edge, we let  = 0. A includes all the attributes affected by the transformation:  positions of the vertices   discrete attributes d{vs, vt, vt}  and  d{vt, vs, vr}  of the two new faces created. scalar attributes of the affected corners s{vs, (vs, vt, vl)}  , s{vs, (vt, vs, vr)} , s{vt, (vs, vt, vl)}  , s{vt, (vt, vs, vr)} , s{vl, (vs, vt, vl)}  and  s{vr, (vt, vs, vr)} flclw Implementationflclw  is the face just CLW of vl from vs. vs is the vs_index'th vertex of flclw (vl is the ( +2)%3 'th vertex of face flclw) vr is the (vlr_offset1-1)'th vertex when rotating CLW about v from vl Special cases: vlr_offset1==1 : no_vr and no_fr vlr_offset1==0 : no flclw! vspl.flclw is actually flcclw. For more documentation look in vsplit.h  EMBED Word.Picture.6   Anantha Kancherla,D:\nt\private\windows\opengl3\pmesh\Mesh.doc @\\MSPRINT44\26S/2MC CORPK 157.55.80.242 Ne00: winspool \\MSPRINT44\26S/2MC CORPK 157.55.80.242 \\MSPRINT44\26S/2MC CORPK 157.5 Letter \\MSPRINT44\26S/2MC CORPK 157.5 Letter Times New Roman Symbol Arial Tms Rmn Courier Mesh: Anantha Kancherla Anantha Kancherla
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\pmesh\docs\d3dfile.doc ===
Microsoft Word Document MSWordDoc Word.Document.6Microsoft RenderMorphics DirectX File Format DocDirectX File Format Doc Anantha Kancherla Normal Anantha Kancherla Microsoft Word for Windows 95Microsoft Word 6.0 Picture MSWordDoc Word.Picture.6Microsoft Word Times New Roman SymbolC:\WINWORD\TEMPLATE\NORMAL.DOT Soraya Bittencourt Soraya Bittencourt Microsoft Word 6.0symbol 226 \f "Symbol" Normal Default Paragraph Font @HP LaserJet IIISi PostScript LPT1: PSCRIPT HP LaserJet IIISi PostScript HP LaserJet IIISi PostScript Times New Roman Symbol Arial Soraya Bittencourt Soraya Bittencourt EMBED Word.Picture.6   DirectX( File Format Specification   TIME \@ "MMMM d, yyyy"  November 14, 1996 Version 1.07 Microsoft does not make any representation or warranty regarding this specification or any product or item developed based on this specification.  Microsoft disclaims all express and implied warranties, including but not limited to the implied warranties of merchantability, fitness for a particular purpose and freedom from infringement.  Without limiting the generality of the foregoing, Microsoft does not make any warranty of any kind that any item developed based on this specification, or any portion of it, will not infringe any copyright, patent, trade secret or other intellectual property right of any person or entity in any country.  It is your responsibility to seek licenses for such intellectual property rights where appropriate.  Microsoft shall not be liable for any damages arising out of or in connection with the use of this specification, including liability for lost profit, business interruption, or any other damages whatsoever.  Some states do not allow the exclusion or limitation of liability for consequential or incidental damages; the above limitation may not apply to you. No part of this document may be reproduced or transmitted in any form or by any means, electronic or mechanical, including photocopying and recording, for any purpose without the express written permission of Microsoft Corporation. Microsoft, Windows and the Win32 are registered trademarks, Windows NT, DirectX and Direct3D are trademarks of Microsoft Corporation. Other brands and names are the property of their respective owners. Copyright (1996, Microsoft Corporation. All Rights Reserved. Table of Contents  TOC \o "1-3"  Table of Contents  GOTOBUTTON _Toc357433854    PAGEREF _Toc357433854  1  Introduction  GOTOBUTTON _Toc357433855    PAGEREF _Toc357433855  2  File Format Architecture  GOTOBUTTON _Toc357433856    PAGEREF _Toc357433856  Header  GOTOBUTTON _Toc357433857    PAGEREF _Toc357433857  Example  GOTOBUTTON _Toc357433858    PAGEREF _Toc357433858  Comments  GOTOBUTTON _Toc357433859    PAGEREF _Toc357433859  Example  GOTOBUTTON _Toc357433860    PAGEREF _Toc357433860  Templates  GOTOBUTTON _Toc357433861    PAGEREF _Toc357433861   GOTOBUTTON _Toc357433862    PAGEREF _Toc357433862  Appendix A  GOTOBUTTON _Toc357433863    PAGEREF _Toc357433863  Templates Used by Direct3D Retained Mode  GOTOBUTTON _Toc357433864    PAGEREF _Toc357433864  Appendix B  GOTOBUTTON _Toc357433865    PAGEREF _Toc357433865  A Simple Cube  GOTOBUTTON _Toc357433866    PAGEREF _Toc357433866  Adding Textures  GOTOBUTTON _Toc357433867    PAGEREF _Toc357433867  Frames and Animations  GOTOBUTTON _Toc357433868    PAGEREF _Toc357433868  Frames  GOTOBUTTON _Toc357433869    PAGEREF _Toc357433869  AnimationSets and Animations  GOTOBUTTON _Toc357433870    PAGEREF _Toc357433870  1  Introduction This document specifies the file format implemented by DirectX 2. The DirectX 2 File Format provides a rich file format that enables the storage of meshes, textures, animations and user-definable objects, by taking advantage of the template-driven nature of the file format. Support for animation sets allows predefined paths to be stored for playback in real time.  Also supported are instancing and hierarchies, which allow multiple references to a single object, such as a mesh, but store the data for the object only once per file.  The DirectX file format is used natively by the Direct3D retained-mode API, providing support for reading predefined objects into an application or writing mesh information constructed by the application in real time. The File Format provides low-level primitives, upon which applications define higher level primitives via templates.  This is the method by which Direct3D defines higher level primitives such as Vectors, Meshes, Matrices and Colors. This document will detail the API independent features of the file format and also the method by which Direct3D Retained Mode uses the file format. Direct3D Retained Mode accesses the files via the DirectX File Format API. This document DOES NOT detail the API, but does detail a proposed usage scenario.  Further details on the API will be released at a later date. 2  File Format Architecture The DirectX file format is an architecture- and context-free file format.  It is template driven and is free of any usage knowledge.  The file format may be used by any application and currently is used by Direct3D Retained Mode to describe geometry data, frame hierarchies and animations. The rest of this section will deal with the content and syntax of the file format.  The file format has the extension .X when used with the DirectX SDK. Header The variable length header is compulsory and must be at the beginning of the data stream.  The header contains the following: Sub Type Contents Content Meaning Magic Number - required 4 bytes Version Number - required Major Number 2 bytes Major version 3 Minor Number 2 bytes Minor version 21 Format Type - required 4 bytes Text File Binary File Compressed File Compression Type - required  4 bytes   if format type is compressed Float size - required 4 bytes 64 bit floats 32 bit floats Example xof 03021txt 0064 Comments Comments are only applicable in text files.  Comments may occur anywhere in the data stream.  A comment begins with either C++ style double-slashes  , or a hash character  .  The comment runs to the next new-line. Example # This is a comment. // This is another comment. Templates Templates define how the data stream is interpreted   the data is modulated by the template definition. A template has the following form: template <template-name> { <UUID> <member 1>; <member n>; [restrictions] Template name This is an alphanumeric name which may include the underscore character  . It must not begin with a digit. A universally unique identifier formatted to the OSF DCE standard and surrounded by angle brackets   and  . For example: <3D82AB43-62DA-11CF-AB39-0020AF71E433> Members Template members consist of a named data type followed by an optional name or an array of a named data type.  A template must have at least one member. Valid primitive data types are: 16 bits DWORD 32 bits FLOAT IEEE float DOUBLE 64 bits 8 bits UCHAR 8 bits 8 bits STRING NULL terminated string CSTRING Formatted C-string (currently unsupported) UNICODE UNICODE string (currently unsupported) Additional data types defined by templates encountered earlier in the data stream may also be referenced within a template definition.  No forward references are allowed. Any valid data type can be expressed as an array in the template definition.  The basic syntax is as follows: array <data-type> <name>[<dimension-size>]; Where <dimension-size> can either be an integer or a named reference to another template member whose value is then substituted. Arrays may be n-dimensional where n is determined by the number of paired square brackets trailing the statement.  For example: array DWORD FixedHerd[24]; array DWORD Herd[nCows]; array FLOAT Matrix4x4[4][4]; Restrictions Templates may be open, closed or restricted. These restrictions determine which data types may appear in the immediate hierarchy of a data object defined by this template. An open template has no restrictions, a closed template rejects all data types and a restricted template allows a named list of data types. The syntax is as follows: Three periods enclosed by square brackets indicate an open template [ ((( ] A comma separated list of named data types followed optionally by their uuids enclosed by square brackets indicates a restricted template [ { data-type [ UUID ]  , } The absence of either of the above indicates a closed template. Examples: template Mesh { <3D82AB44-62DA-11cf-AB39-0020AF71E433> DWORD nVertices; array Vector vertices[nVertices]; DWORD nFaces; array MeshFace faces[nFaces];  [ ... ] // An open template template Vector { <3D82AB5E-62DA-11cf-AB39-0020AF71E433> FLOAT x; FLOAT y; FLOAT z; // A closed template template FileSystem { <UUID> STRING name; [ Directory <UUID>, File <UUID> ] // A restricted template There is one special template   the Header template.  It is recommended that each application define such a template and use it to define application specific information such as version information. If present, this header will be read by the File Format API and if a flags member is available, it will be used to determine how the following data is interpreted.  The flags member, if defined, should be a DWORD.  One bit is currently defined - bit 0.  If this is 0, the following data in the file is binary, if 1, the following data is text.  Multiple header data objects can be used to switch between binary and text during the file. Data objects contain the actual data or a reference to that data.  Each has a corresponding template which specifies the data type. Data objects have the following form: <Identifier> [name] { [UUID] <member 1>; <member n>; Identifier This is compulsory and must match a previously defined data type or primitive. This is optional.  (See above for syntax definition.) This is optional.  (See above for syntax definition.) Members Data members can be one of the following: Data object A nested data object.  This allows the hierarchical nature of the file format to be expressed. The types of nested data objects allowed in the hierarchy may be restricted. See Templates above. Data reference A reference to a previously encountered data object.  The syntax is as follows: { name [ , <UUID> ] } Integer list A semicolon separated list of integers.  For example: 1; 2; 3; Float list A semicolon separated list of floats.  For example: 1.0; 2.0; 3.0; String list A semicolon separated list of strings.  For example: Moose Goats Sheep Use of commas and semi-colons The is perhaps the most complex syntax issue in the file format, but is very strict. Commas are used to delineate array members. Semi-colons follow every data item. For example, if we have a template defined as: template foo { DWORD bar; then an instance of this would look like: foo dataFoo { Next, we have a template containing another template: template foo { DWORD bar; DWORD bar2; template container { FLOAT aFloat; foo aFoo; then an instance of this would look like: container dataContainer { 2; 3;; Note that the second line that represents the foo inside container has two semi-colons at the end of the line.  The first indicates the end of the data item aFoo (inside container), and the second indicates the end of the container. Next we consider arrays. Template foo { array DWORD bar[3]; then an instance of this would look like: foo aFoo { 1, 2, 3; In the array case, there is no need for the data items to be delineated by a semi-colon as they are delineated by a comma.  The semi-colon at the end marks the end of the array. Now consider a template that contains an array of data items defined by a template: template foo { DWORD bar; DWORD bar2; template container { DWORD count; array foo fooArray[count]; then an instance of this would look like: container aContainer { 1;2;,3;4;,5;6;; Appendix A Templates Used by Direct3D Retained Mode This section details the templates used by the Direct3D Retained Mode API. Template Name Header <3D82AB43-62DA-11cf-AB39-0020AF71E433> Member Name Optional Array Size Optional Data Objects major minor flags DWORD Description This template defines the application specific header for the Direct3D Retained mode usage of the DirectX File Format. The retained mode uses the major and minor flags to specify the current major and minor versions (currently 1 and 0 respectively) for the retained mode file format. Template Name Vector <3D82AB5E-62DA-11cf-AB39-0020AF71E433> Member Name Optional Array Size Optional Data Objects FLOAT FLOAT FLOAT Description This template defines a vector. Template Name Coords2d <F6F23F44-7686-11cf-8F52-0040333594A3> Member Name Optional Array Size Optional Data Objects FLOAT FLOAT Description A two dimensional vector used to define a mesh s texture coordinates. Template Name Quaternion <10DD46A3-775B-11cf-8F52-0040333594A3> Member Name Optional Array Size Optional Data Objects FLOAT Vector Description Currently unused. Template Name Matrix4x4 <F6F23F45-7686-11cf-8F52-0040333594A3> Member Name Optional Array Size Optional Data Objects matrix array FLOAT Description This template defines a 4 by 4 matrix.  This is used as a frame transformation matrix. Template Name ColorRGBA <35FF44E0-6C7C-11cf-8F52-0040333594A3> Member Name Optional Array Size Optional Data Objects FLOAT green FLOAT FLOAT alpha FLOAT Description This template defines a color object with an alpha component.  This is used for the face color in the material template definition. Template Name ColorRGB <D3E16E81-7835-11cf-8F52-0040333594A3> Member Name Optional Array Size Optional Data Objects FLOAT green FLOAT FLOAT Description This template defines the basic RGB color object. Template Name Indexed Color <1630B820-7842-11cf-8F52-0040333594A3> Member Name Optional Array Size index DWORD ColorRGBA indexColor Description This template consists of an index parameter and a RGBA color and is used in for defining mesh vertex colors.  The index defines the vertex to which the color is applied. Template Name Boolean <4885AE61-78E8-11cf-8F52-0040333594A3> Member Name Optional Array Size Optional Data Objects truefalse Description Defines a simple boolean type. Should be set to 0 or 1. Template Name Boolean2d <4885AE63-78E8-11cf-8F52-0040333594A3> Member Name Optional Array Size Optional Data Objects Boolean Boolean Description This defines a set of 2 boolean values used in the MeshFaceWraps template in order to define the texture topology of an individual face. Template Name Material <3D82AB4D-62DA-11cf-AB39-0020AF71E433> Member Name Optional Array Size Optional Data Objects faceColor ColorRGBA power FLOAT specularColor ColorRGB emissiveColor ColorRGB Description This template defines a basic material color which can be applied to either a complete mesh or a mesh s individual faces.  The power is the specular exponent of the material.  Note that the ambient color requires an alpha component. Template Name TextureFilename <A42790E1-7810-11cf-8F52-0040333594A3> Member Name Optional Array Size Optional Data Objects filename STRING Description This template allows you to specify thea filename of a texture to apply to a mesh or a face.  This should appear within a material object. Template Name MeshFace <3D82AB5F-62DA-11cf-AB39-0020AF71E433> Member Name Optional Array Size Optional Data Objects nFaceVertexIndices DWORD faceVertexIndices array DWORD nFaceVertexIndicies Description This template is used by the Mesh template to define a mesh s faces.  Each element of the nFaceVertexIndices array references an mesh vertex used to build the face. Template Name MeshFaceWraps <4885AE62-78E8-11cf-8F52-0040333594A3> Member Name Optional Array Size Optional Data Objects nFaceWrapValues DWORD faceWrapValues Boolean2d Description This template is used to define the texture topology of each face in a wrap.  nFaceWrapValues should be equal to the number of faces in a mesh. Template Name MeshTextureCoords <F6F23F40-7686-11cf-8F52-0040333594A3> Member Name Optional Array Size Optional Data Objects nTextureCoords DWORD textureCoords array Coords2d nTextureCoords Description This template is used defines a mesh s texture coordinates. Template Name MeshNormals <F6F23F43-7686-11cf-8F52-0040333594A3> Member Name Optional Array Size Optional Data Objects nNormals DWORD normals array Vector nNormals nFaceNormals DWORD faceNormals array MeshFace nFaceNormals Description This template defines normals for a mesh.  The first array of vectors are the normal vectors themselves, and the second array is an array of indexes specifying which normals should be applied to a given face.  nFaceNormals should be equal to the number of faces in a mesh. Template Name MeshVertexColors <1630B821-7842-11cf-8F52-0040333594A3> Member Name Optional Array Size Optional Data Objects nVertexColors DWORD vertexColors array IndexedColor nVertexColors Description This template specifies vertex colors for a mesh,  as opposed to applying a material per face or per mesh. Template Name MeshMaterialList <F6F23F42-7686-11cf-8F52-0040333594A3> Member Name Optional Array Size Optional Data Objects nMaterials DWORD Material nFaceIndexes DWORD FaceIndexes array DWORD nFaceIndexes Description This template is used in a mesh object to specify which material applies to which faces.  nMaterials is specifies how many materials are present, and materials specify which material to apply. Template Name <3D82AB44-62DA-11cf-AB39-0020AF71E433> Member Name Optional Array Size Optional Data Objects nVertices DWORD vertices array Vector nVertices nFaces DWORD faces array MeshFace nFaces Description This template defines a simple mesh.  The first array is a list of vertices and the second array defines the faces of the mesh by indexing into the vertex array. Template Name FrameTransformMatrix <F6F23F41-7686-11cf-8F52-0040333594A3> Member Name Optional Array Size Optional Data Objects frameMatrix Matrix4x4 Description This template defines a local transform for a frame (and all its child objects). Template Name Frame <3D82AB46-62DA-11cf-AB39-0020AF71E433> Member Name Optional Array Size Optional Data Objects Description This template defines a frame. Currently the frame can contain objects of the type Mesh and a FrameTransformMatrix.  Template Name FloatKeys <10DD46A9-775B-11cf-8F52-0040333594A3> Member Name Optional Array Size Optional Data Objects nValues DWORD values array FLOAT nValues Description This template defines an array of floats and the number of floats in that array.  This is used for defining sets of animation keys. Template Name TimedFloatKeys <F406B180-7B3B-11cf-8F52-0040333594A3> Member Name Optional Array Size Optional Data Objects DWORD tfkeys FloatKeys Description This template defines a set of floats and a positive time used in animations. Template Name AnimationKey <10DD46A8-775B-11cf-8F52-0040333594A3> Member Name Optional Array Size Optional Data Objects keyType DWORD nKeys DWORD array TimedFloatKeys nKeys Description This template defines a set of animation keys.  The keyType parameter specifies whether the keys are rotation, scale or position keys (using the integers 0, 1 or 2 respectively). Template Name AnimationOptions <E2BF56C0-840F-11cf-8F52-0040333594A3> Member Name Optional Array Size Optional Data Objects openclosed DWORD positionquality DWORD Description This template allows you to set the D3DRM Animation options.  The openclosed parameter can be either 0 for a closed or 1 for an open animation.  The positionquality parameter is used to set the position quality for any position keys specified and can either be 0 for spline positions or 1 for linear positions. By default an animation is open and uses linear position keys. Template Name Animation <3D82AB4F-62DA-11cf-AB39-0020AF71E433> Member Name Optional Array Size Optional Data Objects Description This template contains animations referencing a previous frame. It should contain one reference to a frame and at least one set of AnimationKeys. It can also contain an AnimationOptions data object. Template Name AnimationSet <3D82AB50-62DA-11cf-AB39-0020AF71E433> Member Name Optional Array Size Optional Data Objects Animation Description An AnimationSet contains one or more Animation objects and is the equivalent to the D3D Retain Mode concept of Animation Sets. This means each animation within an animation set has the same time at anyagain given point. Increasing the animation set s time will increase the time for all the animations it contains. Appendix B In this appendix we will describe two cubes   One simple and non textured, and the other textured. A Simple Cube This file defines a simple cube that has four red and two green sides.  Notice in this file that optional information is being used to add information to the data object defined by the Mesh template. Material RedMaterial { 1.000000;0.000000;0.000000;1.000000;; // R = 1.0, G = 0.0, B = 0.0 0.000000; 0.000000;0.000000;0.000000;; 0.000000;0.000000;0.000000;; Material GreenMaterial { 0.000000;1.000000;0.000000;1.000000;;  // R = 0.0, G = 1.0, B = 0.0 0.000000; 0.000000;0.000000;0.000000;; 0.000000;0.000000;0.000000;; // Define a mesh with 8 vertices and 12 faces (triangles).  Use  // optional data objects in the mesh to specify materials, normals // and texture coordinates. Mesh CubeMesh { // 8 vertices 1.000000;1.000000;-1.000000;, // vertex 0 -1.000000;1.000000;-1.000000;, // vertex 1 -1.000000;1.000000;1.000000;, // etc 1.000000;1.000000;1.000000;, 1.000000;-1.000000;-1.000000;, -1.000000;-1.000000;-1.000000;, -1.000000;-1.000000;1.000000;, 1.000000;-1.000000;1.000000;; // 12 faces 3;0,1,2;, // face 0 has 3 vertices 3;0,2,3;, // etc 3;0,4,5;, 3;0,5,1;, 3;1,5,6;, 3;1,6,2;, 3;2,6,7;, 3;2,7,3;, 3;3,7,4;, 3;3,4,0;, 3;4,7,6;, 3;4,6,5;; // All required data has been defined.  Now define optional data // using the hierarchical nature of the file format. MeshMaterialList { // Number of materials used // A material for each face // face 0 uses the first // material // face 8 uses the second // material {RedMaterial} // References to the defini- {GreenMaterial} // tions of material 0 and 1 MeshNormals { // define 8 normals 0.333333;0.666667;-0.666667;, -0.816497;0.408248;-0.408248;, -0.333333;0.666667;0.666667;, 0.816497;0.408248;0.408248;, 0.666667;-0.666667;-0.333333;, -0.408248;-0.408248;-0.816497;, -0.666667;-0.666667;0.333333;, 0.408248;-0.408248;0.816497;; // For the 12 faces, 3;0,1,2;, // define the normals 3;0,2,3;, 3;0,4,5;, 3;0,5,1;, 3;1,5,6;, 3;1,6,2;, 3;2,6,7;, 3;2,7,3;, 3;3,7,4;, 3;3,4,0;, 3;4,7,6;, 3;4,6,5;; MeshTextureCoords { // Define texture coords 0.000000;1.000000; // for each of the vertices 1.000000;1.000000; 0.000000;1.000000; 1.000000;1.000000; 0.000000;0.000000; 1.000000;0.000000; 0.000000;0.000000; 1.000000;0.000000;; Adding Textures In order to add textures, we make use of the hierarchical nature of the file format and add an optional TextureFilename data object to the Material data objects. So, the Material objects now read: Material RedMaterial { 1.000000;0.000000;0.000000;1.000000;; // R = 1.0, G = 0.0, B = 0.0 0.000000; 0.000000;0.000000;0.000000;; 0.000000;0.000000;0.000000;; TextureFilename { tex1.ppm Material GreenMaterial { 0.000000;1.000000;0.000000;1.000000;;  // R = 0.0, G = 1.0, B = 0.0 0.000000; 0.000000;0.000000;0.000000;; 0.000000;0.000000;0.000000;; TextureFilename { win95.ppm Frames and Animations Frames  A frame is expected to take the following structure: Frame Aframe { // The frame name is chosen for convenience. FrameTransformMatrix { transform data [ Meshes ] and/or [ More frames] So, what we re going to do is place the cube mesh we defined earlier inside a frame with an identity transform.  We re then going to apply an animation to this frame. Frame CubeFrame { FrameTransformMatrix { 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000;; {CubeMesh} // We could have the mesh inline, but we // use an object reference instead. AnimationSets and Animations Animations and AnimationSets in the file format map directly to Direct3D Retained Mode s animation concepts. Animation Animation0 { // The name is chosen for convenience. { Frame that it applies to - normally a reference } AnimationKey { animation key data  more animation keys  Animations are then grouped into AnimationSets: AnimationSet AnimationSet0 { // The name is chosen for convenience. { an animation - could be inline or a reference }  more animations  So, what we ll do now is take the cube through an animation: AnimationSet AnimationSet0 { Animation Animation0 { {CubeFrame} // Use the frame containing the cube AnimationKey { // Position keys // 7 keys 10; 3; -100.000000, 0.000000, 0.000000;;, 20; 3; -75.000000, 0.000000, 0.000000;;, 30; 3; -50.000000, 0.000000, 0.000000;;, 40; 3; -25.500000, 0.000000, 0.000000;;, 50; 3; 0.000000, 0.000000, 0.000000;;, 60; 3; 25.500000, 0.000000, 0.000000;;, 70; 3; 50.000000, 0.000000, 0.000000;;, 80; 3; 75.500000, 0.000000, 0.000000;;, 90; 3; 100.000000, 0.000000, 0.000000;;; DirectX 2 File Format The DirectX SDK Draft  DATE  \l  11/14/96  PAGE  Microsoft Confidential z@q4K z@q4a ${%g& ${%g& Normal Heading 1 Heading 2 Heading 3 Heading 4 Heading 5 Heading 6 Heading 7 Heading 8 Heading 9 Default Paragraph Font APIDeclaration APIDescription APIParameters FlagEntries FlagTitle Footer Header Heading API OverviewBody Page Number ParameterDesc ParameterDescHeading ParameterFlagEntries ParameterFlagTitle ParameterHeading StructBeg StructBody StructElemDesc StructElemDescHead StructElemHeading StructEnd StructHeading Normal Indent Heading RTL Heading DOC TableEntry TOC 1 TOC 2 TOC 3 TOC 4 TOC 5 TOC 6 TOC 7 TOC 8 TOC 9 APIPriority Unknown gilesb Dave Hodgson Steve Lacey Steve Lacey Dave Hodgson Dave Hodgson Steve Lacey _Toc309470232 _Toc309470607 _Toc310518605 _Toc310518962 _Toc310603392 _Toc310604531 _Toc310753786 _Toc310753919 _Toc310860593 _Toc311279846 _Toc312523894 _Toc312619945 _Toc317015143 _Toc347644456 _Toc354386976 _Toc354404169 _Toc354472719 _Toc354481196 _Toc354481267 _Toc354487458 _Toc356904954 _Toc357433792 _Toc357433854 _Toc317015168 _Toc347644457 _Toc354386977 _Toc354404170 _Toc354472720 _Toc354481197 _Toc354481268 _Toc354487459 _Toc356904955 _Toc357433793 _Toc357433855 _Toc347644458 _Toc354386978 _Toc354404171 _Toc354472721 _Toc354481198 _Toc354481269 _Toc354487460 _Toc356904956 _Toc357433794 _Toc357433856 _Toc354386979 _Toc354404172 _Toc354472722 _Toc354481199 _Toc354481270 _Toc354487461 _Toc356904957 _Toc357433795 _Toc357433857 _Toc354386980 _Toc354404173 _Toc354472723 _Toc354481200 _Toc354481271 _Toc354487462 _Toc356904958 _Toc357433796 _Toc357433858 _Toc354386981 _Toc354404174 _Toc354472724 _Toc354481201 _Toc354481272 _Toc354487463 _Toc356904959 _Toc357433797 _Toc357433859 _Toc354386982 _Toc354404175 _Toc354472725 _Toc354481202 _Toc354481273 _Toc354487464 _Toc356904960 _Toc357433798 _Toc357433860 _Toc354386983 _Toc354404176 _Toc354472726 _Toc354481203 _Toc354481274 _Toc354487465 _Toc356904961 _Toc357433799 _Toc357433861 _Toc354386984 _Toc354404177 _Toc354472727 _Toc354481204 _Toc354481275 _Toc354487466 _Toc356904962 _Toc357433800 _Toc357433862 _Toc354386986 _Toc354404179 _Toc354472729 _Toc354481206 _Toc354481277 _Toc354487468 _Toc356904963 _Toc357433801 _Toc357433863 _Toc354404180 _Toc354472730 _Toc354481207 _Toc354481278 _Toc354487469 _Toc356904964 _Toc357433802 _Toc357433864 _Toc354472732 _Toc354481209 _Toc354481280 _Toc354487471 _Toc356904966 _Toc357433803 _Toc357433865 _Toc354472733 _Toc354481210 _Toc354481281 _Toc354487472 _Toc356904967 _Toc357433804 _Toc357433866 _Toc354472734 _Toc354481211 _Toc354481282 _Toc354487473 _Toc356904968 _Toc357433805 _Toc357433867 _Toc354481212 _Toc354481283 _Toc354487474 _Toc356904969 _Toc357433806 _Toc357433868 _Toc354481213 _Toc354481284 _Toc354487475 _Toc356904970 _Toc357433807 _Toc357433869 _Toc354481285 _Toc354487476 _Toc356904971 _Toc357433808 _Toc357433870 Servan Keondjian.C:\WINDOWS\PROFILES\ANDYHIRD\DESKTOP\dxff2.doc Servan Keondjian.C:\WINDOWS\PROFILES\ANDYHIRD\DESKTOP\dxff2.doc Servan Keondjian.C:\WINDOWS\PROFILES\ANDYHIRD\DESKTOP\dxff2.doc gilesb C:\tmp\dxff2.doc Steve Lacey C:\WINDOWS\Desktop\dxffpaul.doc Steve Lacey%C:\WINDOWS\Desktop\Docs\dxfffinal.doc Steve Lacey C:\orion\specs\dxfile2.doc Steve Lacey C:\orion\specs\dxfile2.doc Steve Lacey C:\orion\specs\dxfile2.doc Anantha Kancherla5D:\nt\private\windows\opengl3\pmesh\d3dfileformat.doc @\\MSPRINT44\26S/2MC CORPL 157.55.80.241 Ne01: winspool \\MSPRINT44\26S/2MC CORPL 157.55.80.241 \\MSPRINT44\26S/2MC CORPL 157.5 Letter \\MSPRINT44\26S/2MC CORPL 157.5 Letter Times New Roman Symbol Arial Courier New DirectX File Format Doc Anantha Kancherla Anantha Kancherla
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\test\profiler\readme.doc ===
Microsoft Word Document MSWordDoc Word.Document.8Functionality: Title _PID_GUIDFunctionality: Andrew Yeckel Normal.dot Andrew Yeckel Microsoft Word 8.0Functionality: This tool has two basic interfaces: an interactive profiler (_Profiler.exe) and a scripted version (_Scripter.exe). The interactive version has the following functionality: - creates a new test in the list for a user to modify.  The type of the test is defined at compile (in _Profiler.cpp as NewTestType) to be a PrimativeTest Delete - deletes the currently selected test from the list. - loads a previously saved test, using the autoload feature (i.e. the type of the test is automatically detected.)  allows user to save the current test as a .TST file for later use. Rename - change the name of the current test Configure - start the test-dependant property sheet to allow configuring of various test conditions, such as lighting, texturing, size of test window, duration, etc. - starts the current test Abort - quits the currently running test - exits the program The script version accepts two command-line parameters.  The first is the name of the input script file; the second is the name of the output file.  If either parameter is skipped, stdin or stdout is used instead. The format for the script file is as follows: All text on a line after the # character is ignored. Blank lines are ignored. All white space is treated equally. Lines may be continued after a return by using the \ character at the end of the line. The first line should contain only a number.  This number specifies how many tests are contained in the script.  If this number is less than the number of tests actually specified in the script, only this many tests are run.  If this number is too high, an  Unexpected End of File  error will be reported. All following lines are tests.  Each test has the following syntax: <test file> <additional data> <test file> is the name of the .TST file, as created in the interactive version.  If the file name includes spaces, it may be enclosed in double quotes ( <additional data> is a test specific string, which gets passed on to the test, and interpreted by it.  Currently, none of the test types accept any additional data.  (this parameter is silently ignored). Data Structures: (functions) The basic test object is a SkeletonTest type.  This type defines several virtual functions, which should or may be redefined by other test types.  It also defines several other functions, which should be called in the constructor of inherited types.  Functions of interest are: virtual void cnfgfunct()   the interactive configuration.  Generally all tests will use the base class (SkeletonTest) function, which creates and displays a property sheet. virtual void initfunct(GLsizei w, GLsizei h)   set up any state conditions, this function gets called once each time the test is run. virtual void idlefunct()   if the test does any animation, this function should change the appropriate variables.  It gets called once before each draw. virtual void rendfunct()   this function does the rendering. virtual void destfunction()   gets called when destroying the window, should do any necessary cleanup. virtual void ReadExtraData(char *)   interpret any extra data that gets passed in from the script. virtual int Save(HANDLE hFile)   save any data into the file.  Each test is responsible for first calling parent::Save(hFile).  The return value is the amount of data written, on success, or a negative number on failure.  virtual int Load(HANDLE hFile)   load any data from the file, pretty much the same as Save(). The following functions should be called in the constructor, to aid in autoload: void SetThisType(const char *szType)   set the name of this test type. void SetThisVersion(const char *szVer)   set the version of this test. void AddPropertyPages(int i, PROPSHEETPAGE *pNewPSpages)   adds additional property sheets to the dialog box created by cnfgfunct().  i is the size of the array of new pages pointed to by pNewPSpages. Data Structures: (types) As previously stated,  all tests must inherit the base class type SkeletonTest.  This test defines certain generic data about the test, such as the size of the window to be created, and the type of buffers to be created (how many bits per pixel, etc). The next most general type, which all tests that are like to be of much use should inherit is the HugeTest type, as defined in the files buffers.cpp, fog.cpp, lighting.cpp, raster.cpp, texture.cpp, UI_hugetest.cpp and HugeTest.cpp.  This test type adds to the configuration property sheet, and to initfunct() the ability to set most of the GL variables, including buffering information (clearing values, which buffers get cleared, etc), fogging, lighting, rasterization information (point, line & polygon antialiasing, culling, stippling, quality, etc) and texturing (including the ability to specify any .bmp file as a texture map file). There are currently two test types based on the HugeTest type: TeapotTest (defined in teapot.cpp) and PrimativeTest (defined in PrimTest.cpp, using pointlist.cpp).  TeapotTest uses the aux library to draw a teapot, which it rotates.  This test is good for experimenting with lighting and with texturing.  PrimativeTest will draw several OpenGL primitives (triangles, triangle strips, polygons, points, lines, etc).  It also adds an additional property sheet to the configuration dialog box, to allow the user to specify what kind of primitives to draw. There are also several sample additional tests: TeapotLightTest (tptlght.cpp) and TeapotTextureTest (tpttxtr.cpp), based on TeapotTest; LargeTriangle2 (large_tri_test2.cpp) and SmallTriangle2 (small_tri_test2.cpp), based on PrimativeTest; LargeTriangle (large_tri_test.cpp), SmallTriangle (small_tri_test.cpp) and SquareTest (square_test.cpp), all based on SkeletonTest.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\test\simple\rgb\timecube\fastdib.txt ===
This application draws a spinning RGB color cube into a bitmap and
copies this bitmap to the display window, demonstrating the use
of optimized DIBs with OpenGL.  Note that pressing any of the number
keys from 2-9 while the app is running will set a zoom factor which
will cause the app to shrink the bitmap and to use StretchBlt to copy
the bitmap to the display.

The FastDIB API functions are implemented in fastdib.c.  It is
merely an interface layer to existing Win32 functions.  It goal is
to encapsulate some of the complexity of determing formats, initializing
color tables, etc.

Note that use of optimized DIBs on palettized (i.e., 8bpp) display devices
on OpenGL/95 version 1.0 is broken.  If running on Win95, the following
line in timecube.c should be commented out:

    #define _COMPATIBLE_DIB_FIX_

------------------------------------------------------------------------------

CreateCompatibleDIB
-------------------

HBITMAP APIENTRY CreateCompatibleDIB(hdc, hpal, ulWidth, ulHeight, ppvBits)
HDC hdc;
HPALETTE hpal;
ULONG ulWidth;
ULONG ulHeight;
PVOID *ppvBits;

Create a DIB section bitmap with an optimized format with respect to the
specified display DC.  Optimized in this case means that the bitmap format
(and palette, if applicable) are matched to the display and will ensure
the highest possible Blt performance.

Parameters

    hdc

        Specifies display DC used to determine format.  If hpal is NULL,
        this hdc is used to retrieve the system palette entries with which
        the DIB color table is initialized (on palettized display devices
        only).

    hpal

        Optional palette that, if specified, is used to initialize the DIB
        color table.  If NULL, the system palette is used.  Ignored for
        non-palettized display devices.

    ulWidth

        Specifies the width of the bitmap.

    ulHeight

        Specifies the height of the bitmap.

    ppvBits

        Returns a pointer to the DIB section bits with which the application
        can draw directly into the bitmap.

Return Value

    The return value is the handle to the bitmap created.  If the function
    fails, the return value is NULL.

------------------------------------------------------------------------------

UpdateDIBColorTable
-------------------

BOOL APIENTRY UpdateDIBColorTable(hdcMem, hdc, hpal)
HDC hdcMem;
HDC hdc;
HPALETTE hpal;

Synchronize the color table of DIB bitmap selected into the specified
memory DC with either the current system palette or the optionally
specified logical palette.

This function need only be invoked on palettized display devices.

Parameters

    hdcMem

        Specified the memory DC into which the DIB of interest is selected.

    hdc

        Specifies the display DC for which the DIB is formatted.  If hpal
        is NULL this hdc is used to retrieve the system palette entries
        with which the DIB color table is initialized (on palettized display
        devices only).

    hpal

        Optional palette that, if specified, is used to initialize the DIB
        color table.  If NULL, the system palette is used.  Ignored for
        non-palettized display devices.

Return Value

    The return value is TRUE if the DIB color table is successfully updated.
    If the function fails, the return value is FALSE.

Comments

    Typically, this function is called only if the logical palette in the
    display DC changes.  For OpenGL apps, the logical palette is set only
    once for RGB modes, which implies that this function normally does not
    need to be used with RGB modes.  Color index modes, however, may change
    the logical palette at any time.  If that happens, then the application
    should invoke this function after the new palette has been realized.

------------------------------------------------------------------------------

GetCompatibleDIBInfo
--------------------

BOOL APIENTRY GetCompatibleDIBInfo(hbm, ppvBase, plStride)
HBITMAP hbm;
PVOID *ppvBase;
LONG *plStride;

Returns information about the specified DIB section that allows the
application to compute the address of a desired (x, y) pixel within
the bitmap.

Parameters

    hbm

        Specifies the DIB section bitmap of interest.

    ppvBase

        Returns a pointer to the origin of the bitmap.  If the DIB
        is top-down, then this is the same as the ppvBits returned
        by the intial call to CreateCompatibleDIB.  The default,
        however, is bottom-up.

    plStride

        Returns the stride or pitch of the bitmap (i.e., the difference
        in address between two vertically adjacent pixels).  If the bitmap
        is top-down, this value is positive; if the bitmap is bottom-up,
        this value is negative.

Return Value

    The return value is TRUE if the DIB color table is successfully updated.
    If the function fails, the return value is FALSE.

Comments

    The ppvBase and plStride value returned will allow the application to
    compute the address any given pixel (x, y) in the bitmap as follows:

    PIXEL *ppix;

    ppix = (PIXEL *) (((BYTE *)*ppvBase) + (y * *plStride) + (x * sizeof(PIXEL)));

------------------------------------------------------------------------------

GetDIBTranslationVector
-----------------------

BOOL APIENTRY GetDIBTranslationVector(HDC hdcMem, HPALETTE hpal, BYTE *pbVector)
HDC hdcMem;
HPALETTE hpal;
BYTE *pbVector;

Returns the translation vector that maps colors in the specified palette,
hpal, to the DIB selected into the specified DC, hdcMem.  This information
is needed so that applications that draw directly into the DIB can translate
the logical color indices into physical bitmap indices.

This function should only be invoked on palettized display devices.

Parameters

    hdcMem

        Specified the memory DC into which the DIB of interest is selected.

    hpal

        Specifies the logical palette which will be mapped to the DIB.

    pbVector

        Points to a buffer into which the translation vector will be copied.

Return Value

    The return value is TRUE if the DIB color table is successfully updated.
    If the function fails, the return value is FALSE.


Comments

    This function does not try to validate the buffer size.  It is up to
    the application to allocate enough memory for the call.  The amount of
    memory required in bytes equal in value to the number of entries
    in the logical palette:

        bufferSize = GetPaletteEntries(hpal, 0, 1, NULL) * sizeof(BYTE);
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\test\tools\mcdtab\mcdtab.ini ===
\Registry
    MACHINE
        SOFTWARE
            Microsoft
                Windows
                    CurrentVersion
                        Controls Folder
                            Display
                                shellex
                                    PropertySheetHandlers
                                        OpenGL MCD CPL Extension
                                            = REG_SZ {49f1d180-8ead-11cf-83ac-00aa00c21db6}
                        Shell Extensions
                            Approved
                                {49f1d180-8ead-11cf-83ac-00aa00c21db6} = REG_SZ OpenGL MCD CPL Extension
            Classes
                CLSID
                    {49f1d180-8ead-11cf-83ac-00aa00c21db6}
                        = REG_SZ OpenGL MCD CPL Extension
                        InProcServer32
                            = REG_SZ mcdtab.dll
                            ThreadingModel = REG_SZ Apartment
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\opengl\toolkits\libtk\readme.txt ===
Originally, TK and AUX were maintained as separate libraries (LIBTK.LIB
and LIBAUX.LIB).  Later, they were combined via a hacked up makefile
into a single library, GLAUX.LIB.  However, to make the build process
cleaner, the TK source files have been moved into the libaux directory
(with the prefix "tk" prepended to the filenames to prevent name
collisions with the aux files.  This also makes it easy to identify the
TK source files) where everything is compiled into GLAUX.LIB.

This directory remains to preserve the history of changes made to
TK.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\private\public.9x\inc\temp.txt ===
This is a temp file for directory Structure
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\private\public.9x\lib\temp.txt ===
This is a temp file for directory Structure
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\private\public.frozen\inc\temp.txt ===
This is a temp file for directory Structure
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\private\public.frozen\lib\temp.txt ===
This is a temp file for directory Structure
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\published\dxmdev\dshowdev\readme.txt ===
control.h has a private rule to build twice; no longer executed for some
reason

vfwmsgs.mc - put in \ (root of drive) because PROJECT_INC_PATH undefined (?)

resmgru.h needed
ovrm.h needed
ddraw.h - newer version needed
d3drm.lib needed (why is this missing?)
filters\tve - doesn't compile -- needs a new compiler.

clean up newly added projects such as dexter to not specify BUILD_ALT_DIR in
TARGETPATH, etc. extra stuff nt\public\sdk\inc

qnetwork.odl (removed filters\netshow\idl)

removed filters\netshow\redist; anything missing
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\multimedia\reality\bin\i386\ml611d.err ===
FATAL
cannot open file
I/O error closing file
I/O error writing file
I/O error reading file
out of memory
assembler limit : macro parameter name table full
invalid command-line option
nesting level too deep
unmatched macro nesting
line too long
unmatched block nesting
directive must be in control block
error count exceeds 100; stopping assembly
invalid numerical command-line argument
too many arguments
statement too complex
N/A
missing source filename
COFF error writing file
invalid debug and browser data; file exceeds line limit
cannot find link.exe
cannot find cvpack.exe
SEVERE
memory operand not allowed in context
immediate operand not allowed
cannot have more than one ELSE clause per IF block
extra characters after statement
symbol type conflict
symbol redefinition
undefined symbol
non-benign record redefinition
syntax error
syntax error in expression
invalid type expression
distance invalid for word size of current segment
PROC, MACRO, or macro repeat directive must precede LOCAL
.MODEL must precede this directive
cannot define as public or external
segment attributes cannot change
expression expected
operator expected
invalid use of external symbol
operand must be RECORD type or field
identifier not a record
record constants may not span line breaks
instruction operands must be the same size
instruction operand must have size
invalid operand size for instruction
operands must be in same segment
constant expected
operand must be a memory expression
expression must be a code address
multiple base registers not allowed
multiple index registers not allowed
must be index or base register
invalid use of register
invalid INVOKE argument
must be in segment block
DUP too complex
too many initial values for structure
statement not allowed inside structure definition
missing operand for macro operator
line too long
segment register not allowed in context
string or text literal too long
statement too complex
identifier too long
invalid character in file
missing angle bracket or brace in literal
missing single or double quotation mark in string
empty (null) string
nondigit in number
syntax error in floating-point constant
real or BCD number not allowed
text item required
forced error
forced error : value equal to 0
forced error : value not equal to 0
forced error : symbol not defined
forced error : symbol defined
forced error : string blank
forced error : string not blank
forced error : strings equal
forced error : strings not equal
[ELSE]IF2/.ERR2 not allowed : single-pass assembler
expression too complex for .UNTILCXZ
can ALIGN only to power of 2
structure alignment must be 1, 2, or 4
expected
incompatible CPU mode and segment size
LOCK must be followed by a memory operation
instruction prefix not allowed
no operands allowed for this instruction
invalid instruction operands
initializer magnitude too large for specified size
cannot access symbol in given segment or group
operands have different frames
cannot access label through segment registers
jump destination too far
jump destination must specify a label
instruction does not allow NEAR indirect addressing
instruction does not allow FAR indirect addressing
instruction does not allow FAR direct addressing
jump distance not possible in current CPU mode
missing operand after unary operator
cannot mix 16- and 32-bit registers
invalid scale value
constant value too large
instruction or register not accepted in current CPU mode
reserved word expected
instruction form requires 80386/486
END directive required at end of file
too many bits in RECORD
positive value expected
index value past end of string
count must be positive or zero
count value too large
operand must be relocatable
constant or relocatable label expected
segment, group, or segment register expected
segment expected
invalid operand for OFFSET
invalid use of external absolute
segment or group not allowed
cannot add two relocatable labels
cannot add memory expression and code label
segment exceeds 64K limit
invalid type for a data declaration
HIGH and LOW require immediate operands
N/A
cannot have implicit far jump or call to near label
use of register assumed to ERROR
only white space or comment can follow backslash
COMMENT delimiter expected
conflicting parameter definition
PROC and prototype calling conventions conflict
invalid radix tag
INVOKE argument type mismatch : argument
invalid coprocessor register
instructions and initialized data not allowed in AT segments
/AT switch requires the TINY memory model
cannot have segment address references with TINY model
language type must be specified
PROLOGUE must be macro function
EPILOGUE must be macro procedure
alternate identifier not allowed with EXTERNDEF
text macro nesting level too deep
N/A
missing macro argument
EXITM used inconsistently
macro function argument list too long
N/A
VARARG parameter must be last parameter
VARARG parameter not allowed with LOCAL
VARARG parameter requires C calling convention
ORG needs a constant or local offset
register value overwritten by INVOKE
structure too large to pass with INVOKE : argument
not overriding private proc as public
too many arguments to INVOKE
too few arguments to INVOKE
invalid data initializer
N/A
RET operand too large
too many operands to instruction
cannot have more than one .ELSE clause per .IF block
expected data label
cannot nest procedures
EXPORT must be FAR
procedure declared with two visibility attributes
macro label not defined
invalid symbol type in expression
byte register cannot be first operand
word register cannot be first operand
special register cannot be first operand
coprocessor register cannot be first operand
cannot change size of expression computations
syntax error in control-flow directive
cannot use 16-bit register with a 32-bit address
constant value out of range
missing right parenthesis
type is wrong size for register
structure cannot be instanced
non-benign structure redefinition: label incorrect
non-benign structure redefinition: too few labels
OLDSTRUCTS/NOOLDSTRUCTS state cannot be changed
non-benign structure redefinition: incorrect initializers
non-benign structure redefinition: too few initializers
non-benign structure redefinition: label has incorrect offset
structure field expected
unexpected literal found in expression
N/A
divide by zero in expression
directive must appear inside a macro
cannot expand macro function
too few bits in RECORD
macro function cannot redefine itself
N/A
invalid qualified type
floating-point initializer on an integer variable
nested structure improperly initialized
invalid use of FLAT
structure improperly initialized
improper list initialization
initializer must be a string or single item
initializer must be a single item
initializer must be a single byte
improper use of list initializer
improper literal initialization
extra characters in literal initialization
must use floating-point initializer
cannot use .EXIT for OS_OS2 with .8086
invalid combination with segment alignment
INVOKE requires prototype for procedure
cannot include structure in self
symbol language attribute conflict
non-benign COMM redefinition
COMM variable exceeds 64K
parameter or local cannot have void type
cannot use TINY model with OS_OS2
expression size must be 32 bits
.EXIT does not work with 32-bit segments
.STARTUP does not work with 32-bit segments
ORG directive not allowed in unions
D/T
illegal use of segment register
cannot declare scoped code label as PUBLIC
.MSFLOAT directive is obsolete : .MSFLOAT ignored
ESC instruction is obsolete : ESC ignored
missing operator in expression
missing right parenthesis in expression
missing left parenthesis in expression
reference to forward macro definition
16 bit segments not allowed with /coff option
FAR not allowed in flat model comm variables
invalid .model parameter for flat model
ALIAS name is empty
GROUP directive not allowed with /coff option
.FPO is not compatible with nested procedures
LEVEL 1
cannot modify READONLY segment
N/A
non-unique STRUCT/UNION field used without qualification
start address on END directive ignored with .STARTUP
cannot ASSUME CS
unknown default prologue argument
too many arguments in macro call
option untranslated, directive required
invalid command-line option value, default is used
insufficent memory for /EP : /EP ignored
expected '>' on text literal
multiple .MODEL directives found : .MODEL ignored
line number information for segment without class 'CODE'
instructions and initialized data not supported in AT segments
directive ignored with /coff switch
/Gc switch incompatible with flat model
/AT switch incompatible with flat model
invalid command-line option
directive ignored without /coff switch
directive ignored outside a procedure
LOADDS ignored in flat model
LEVEL 2
@@: label defined but not referenced
expression expected, assume value 0
EXTERNDEF previously assumed to be external
length of symbol previously assumed to be different
symbol previously assumed to not be in a group
types are different
calling convention not supported in flat model
LEVEL 3
N/A
no return from procedure
N/A
conditional jump lengthened
procedure argument or local not referenced
expression may be pass-dependent
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\branch-reasons-and-info.txt ===
net/atm
    this sub-project contains implementation of ATM-related technologies.
    this includes the lane, rawwan, and uni drivers, atm samples, as well as
    the winsock2 service provider which exposes rawwan to winsock clients.

    oldnt:ntos/inc/atm.h moved to newnt:net/atm/genx/inc/atm.w because this
    file is published to the DDK.  it was given a .w extension so that it
    can be run through the "cleansing" process (which takes care of copyright
    headers, etc) before being published.

    oldnt:ntos/inc/atm40.h moved to newnt:net/atm/inc.

    oldnt:inc/laneinfo.h moved to newnt:net/inc.  it is used by net/config
    so it needs visibility outside of net/atm.  recommend it be renamed
    with an atm prefix -- e.g. atmlanep.h

    oldnt:inc/rawanuser.h moved to netnt:net/atm/inc since the service
    provider implemnetation now lives under net/atm.  this header no longer
    needs to have global visibility because it is only included by files
    under net/atm.

    oldnt:inc/ws2atmsp.h moved to newnt:net/atm/inc since the service
    provider implementation now lives under net/atm.  this header no longer
    needs to have global visibility because it is only included by files
    under net/atm.

net/dlc
    this sub-project builds the DLC driver as well as the user mode api.

    oldnt:net/dlc moved to newnt:net/dlc/api
    oldnt:ntos/dlc moved to newnt:net/dlc/driver

net/ndis
    this sub-project contains the implementation of ndis.sys.  it specifically
    DOES NOT contain any and all ndis miniports.  most ndis drivers for OEM
    hardware have moved to the Drivers project.

    oldnt:inc/ndispnp.h moved to newnt:net/ndis/genx/inc because this file
    is published internally for other projects to use.  it was given a .w
    extension so that it can be run through the "cleansing" process.

    oldnt:ntos/inc/ndis*.h moved to newnt:net/ndis/sys because these headers
    were only included by code under net/ndis/sys.  (Except for ndiswah.h
    which moved to newnt:net/inc.)

net/sfm
    this sub-project contains the implementation of Services for Macintosh

    rules.mk files were not brought over since they relied on the outdated
    net\ui project.

net/tcpip
    this sub-project contains the implementation of TCP/IP, it's command-line
    utilities, APIs, and services.

    /apis     - user-mode programattic APIs expsosed via DLL.
    /commands - command line utitlies that ship with the product.
    /driver   - tcpip.sys
    /services - TCP/IP services (e.g. RIP Listener, Echo, Chargen, TFTP, etc.)
    /tools    - Internal tools and test programs that do not ship.

    oldnt:sockets/tcpcmd/trace (trace.dll) was dropped.  rtutils.dll exports
    the same functionality.

    oldnt:sockets/tcpcmd/relay (relay.dll and router.exe) was dropped.
    this is the DHCP relay agent which is no longer standalone.
    it's functionality is now provided by rras.

    oldnt:sockets/tcpcmd/routetab (routetab.dll) was dropped.  iphlpapi.dll
    exports the same functionality for NT5.  Win9x shares this source, so it
    may be that we need to bring it over to newnt eventually.

    oldnt:sockets/tcpcmd/winipcfg was dropped.  It is not listed in layout.inf
    so it seems it is not shipped.  (Althought I think it is shipped in
    Windows 9x.)

net/tdi
    this sub-project contains the implementation of tdi.sys.  it specifically
    DOES NOT contain any and all tdi providers.

    oldnt:inc/tdi*.h moved to newnt:newnt/tdi/genx/inc/tdi*.w since
    they are published internally to NT.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\owners.txt ===
Subtree         Owner
------------------------
1394            adube
atm             arvindm
config          sumeetb
dhcp            rameshv
diagnostics     willzi
dlc             jameelh
homenet         maiken
ias             sbens
ipsec           krishnag
irda            brianl
jet500          rameshv
mmc             marcdesg
ndis            arvindm
netbeui         chaitk
netbios         vraman
netbt           malam
netevent        jschwart
nwlink          malam
published       shaunco
qos             rameshpa
rndis           arvindm
rras            raos
sfm             koti
snmp            willzi
sockets         vadime
streams         jameelh
tapi            mquinton
tcpip           nksrin
tdi             josephj
unimodem        brwill
upnp            danielwe
winnet          jschwart
wins            florint
wlbs            ramkrish
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\1394\arp\sys\todo.txt ===
TODO NOW:
	-- Implement incoming close
	-- Implement PnP and Reconfig
	-- arp13 -a should display local unique ID
	-- Submit OIDs to get real adapter info, especially unique ID
	-- Bump up line speed to 100Mbits/sec
	-- Write cmd scripts to test:
			-- net start/stop
			-- ipconfig /release /renew
			-- arp13 -add/-delete
			-- ping
	-- Get the above all running concurrently
	-- Implement stats, pkt stats first.
	-- Make sure RmSuspendTask is called with lock held if required.
	-- From arpSlowIpTransmit:
		Currently, it's possible that the RemoteIp's unload task will not wait for
		send pkts to be cleared up IF it checks BEFORE the task before is started.
		This hole needs to be fixed.
	-- Change ARP1394_IP_PHYSADDR_LEN to 8
	
Stage ONE 	--- register static arp entries, finish ArpIpQueryInfo ---

	2. Implement arpAddStaticArpEntries (with info from an internal array).
		-X- make sure that they will get deleted on exit.
	3. Implement  ArpIpQueryInfo completely:
		-X- simple stuff (UINT)
		-X- Arp table entries
		-X- stats
	4. Implement ArpIpGetEList (Incl Win9x)
		-X-
	5. Test (with driver verifier)
		-X- boots
		-X- net start, net stop works.
		--- uncheck IP works
		-X- disconnect adapter works
		-X- shutdown windows works
		-X- arp -a lists static arp entries

Stage TWO	--- mock up of fast send path ---
	1.	Implement encapsulation header buffer pool (see 3/05/1999 notes above)
		-X- initialize pool (including initializing all buffers)
		-X-	deinitialize pool
		-X-	allocate buffer
		-X- deallocate buffer
		-X- usermode tests pass
	2. Write fast-send-path code (see 3/05/1999 notes.txt entry ) WITHOUT queuing.
		-X- backfill case: sends
		-X- backfill case: send completion
		-X- use header buffer case: sends
		-X- use header buffer case: send completion
	3. Implement RCE management
		-X-	New RCEs
		-X- Invalidating RCEs
	4. Test (without driver verifier)
		-X- boots
		-X- net stop/start works
		-X- ttcp -u works (verify we're actully mock-sending thep packets).
		-X- net stop/start works with ttcp -u -t running
		-X- disconnect adapter works with ttcp -u -t running
		--- uncheck IP works with ttcp -u -t running
		--- batch file doing continuous net stop/start works with ttcp -u -t running

Stage THREE	Simple send-VC management (still doing mock sends, no ageing) ---
		-X- Define Send-VC structure
		-X- Write task to resolve h/w address (trivially succeed) and make call and
			get connected.
		-X- Write task to shutdown ARPCB_DEST (including cleaning up queued pkts on
			this destination and dropping call an deallocating VC.
		-X- Write slow-send-path code
		Test (with driver verifier)
			-X- boots
			-X- net stop/start works
			-X- ttcp -u works
			-X- net stop/start works with ttcp -u -t running
			-X- disconnect adapter works with ttcp -u -t running
			--- uncheck IP works with ttcp -u -t running
			--- shutdown windows works with ttcp -u -t running
		-X- Write code to complete make calls  and mock-sends asynchronously
			(with some delay)
		Test (with driver verifier)
			-X- boots
			-X- net stop/start works
			-X- ttcp -u works
			-X- net stop/start works with ttcp -u -t running
			-X- disconnect adapter works with ttcp -u -t running
			--- uncheck IP works with ttcp -u -t running
			--- shutdown windows works with ttcp -u -t running
			--- batch file doing continuous net stop/start works with
				ttcp -u -t running
		-X- Write code to setup and teardown the single receive FIFO
		-X- Write code to handle received packets.
		--- Implement arpGetAdapterInfo properly
	    --- Use lookaside lists for management of:
			--- tasks
			--- associations
			--- obj log entries
			--- Test (same as #5)

Stage FOUR	--- True sends, (still no VC ageing) ---
		-X- Replace mock sends by true sends down to nic1394 (keep mock send code
			around)
		Test (with driver verifier)
			-X- boots
			-X- net stop/start works
			-X- ttcp -u works
			--- net stop/start works with ttcp -u -t running
			--- disconnect adapter works with ttcp -u -t running
			--- uncheck IP works with ttcp -u -t running
			--- batch file doing continuous net stop/start works with
				ttcp -u -t running

Stage FIVE	Receive path
	1. Implement receive path (simple)
		-X- Receive VC management
		-X- Receive pkt path
	2. Test
		-X- Ping works!
		--- net stop/start etc while ping -t in progress

Stage SIX IOCTL support to add static arp entries
	1. Implement
	2. Test

Stage SEVEN	--- VC Ageing
	1. Implement timers
		--- 
	2. Implement VC Ageing
	3. Test (with mock sends)
	4. Test (with true sends)

Stage EIGHT	--- Functionality testing ---
	--- ping, ttcp

Stage NINE --- Basic Channel Functionality ---
	--- Broadcast channel VC management
	--- Resolve bcast/mcast addresses to broadcast dest entry
	Test
		--- Mcast works

Stage ELEVEN 	--- Basic ARP Resolution ----
	1. Implement pkt pools
	2. Implement creating/parsing of the arp pkt format.
	3. Test
		--- send/recv dummy arp pkts
	4. Implement arp request handling
	5. Implement arp response handling
	Test

Stage TWELVE 	--- Arp entry ageing timeouts ---
	--- Implement ARP entry ageing timeouts
	Test

Stage THIRTEEN	--- Get DHCP to work ---


Stage FOURTEEN --- Interop Testing ---

Stage FIFTEEN	--- Win98 Port ---

Stage SIXTEEN	--- MCAP functionality ---

Stage SIXTEEN	--- More Interop testing ---


------------------------------------------------
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\1394\arp\sys\notes.txt ===
StackInfo:
	Locks
	TmpRef Count

TempRefs: also increment/decrement the StackInfo.TmpRef count -- on exiting top call,
assert if this is nonzero.

LinkObjects(Obj1, Obj2);

Locking -- add option to compute checksum of object and save it. Validate checksup
on unlocking. Also run object-specific validation functions just before unlocking.


typedef struct
{
	LOG *pLog;
	STATE *pStateHistory;
	ULONG Checksum;
	ULONG PrevState;
	BOOL	ValidationFunction;
	OBJECTS *pLinkedObjects;

	//
	// Pointer to the stack record of the thread that currently owns
	// the lock on this object, if any. So if a function F expects an object pObj
	// to be locked on entry, it can do something like:
	//			void F(STACKRECORD *pSR, FOOBAR *pObj)
    //				{
    //					ASSERT(pObj->pDiags->pSR == pSR);
    //				}
	//
	STACKRECORD *pSR;
			

} OBJECT_DIAGNOSTICS;

typedef struct
{
	ULONG Sig;
	ULONG State;
	LOCK *pLock;
	OBJFN pObjFn;
	OBJECT_DIAGNOSTICS *pDiags;
	ULONG TmpRefs;
	ULONG LinkRefs;
	TASKLIST *Tasks;
	OBJECT *pTmpNext;	// Impromptu list.
} OBJECT_HEADER;

Enumeration functions

	WeakEnumerateList(list, pfn) -- calls pfn on each item in the list, but releasing
	list lock before calling pfn. Since it releases the list lock, it can't simply
	process the elements in order.

	Several flavors of these enumeration functions:
	1. Enumerate holding list lock and object lock throughout -- strict enumeration.
	2. While(change) {Run-through-items until lock released}
	3. Optimistic, weak enumeration -- maintain next pointer within list structure,
	   if next pointer matches when you next get list lock, use it, otherwise

	4. Concept of using a "impromptu list", using the pTmpNext field --
	 optimisically, all the objects that need to be worked on will have their
	 pTmpNext field unused (set to an illegal value) so can be used to set up
	 a temporary list -- no needto synchronize access to this list -- only the
	 creator can use it and must disband it (set pTmpNext members back to the
	 illegal value)  when done. Potential of having multiple pTmpNext fields
	 to minimize risk of collisions if objects are heavily used.

	5. Enumeration of functions that use only static-data -- no need to claim lock.
	6. Various search/modify funcions -- enumeration could return a single one, or
	   a (perhaps impromptu) list of objects found by the the function, or
	   could delete the objects found by the function.


	Goal is to not to require user code to have to enumerate lists explicitly, 
	and to minimize the amount of explicit lock and refcount manipulation.
	[Enumeration functions hide any temprefing done]

temporary combo impromptu list + temp-list:
typedef struct
{
	OBJECT *pImpromptuList;
	SLIST *pOthers;         // these ones had the pTmpNext field in use so we
							// explicitly create an SLIST of pointers to these.
} ENUMERATION_RESULT;

FreeEnumerationResult(ENUMERATION_RESULT *ER, STACKRECORD *pSR, BOOLEAN fDeref)
{
	// run throuch impromptu list, de-refing the tempref.
	OBJECT *pObj = pER->pImpromptuList;
	while (pObj!=NULL)
	{
		OBJECT *pNextObj = pObj->pTmpNext;
		pObj->TmpNext = ILLEGAL_POINTER;

		if (fDeref)
		{
			Lock(pObj, pSR);
			TmpDeref(pObj, pSR);
			Unlock(&pObj, pSR); // if object has gone, pObj will be set to NULL.
		}

		pObj = pNextObj;
	}

	// Run through pOthers list;
	while (pOthers != NULL)
	{
		Pop(&Others, &pObj);
		if (bDeref)
		{
			Lock(pObj, pSR);
			TmpDeref(pObj, pSR);
			Unlock(&pObj, pSR); // if object has gone, pObj will be set to NULL.
		}
	}

}

Locking:
	bit in lock struture can be set to prevent unlocking -- preventing a lower-level
	function from temporarily unlocking/locking a function

Tasks -- should be associated with the adapter/interface, not each object -- because tasks -- hmm well maybe let each object decide. Timers -- are they tasks?

You can have a "primary state change task pointer " for an object -- at any one time
an object can have only one such task active, although it may vary depending on the
state change involve -- eg ConnectCallTask to move fron unconnected to connected,
and  DisconnectCallTask to move from connected to unconnected.
The object's primary state should reflect the task running:
 unconnected, connecting*, connected, disconnecting* (* means that a state-change
 task is running).

A task can register itself to pend until some other particular task is completed.
When a task completes it's list of other tasks are completed one by one, making
sure locks and inter-task refcounts are properly maintained.


ValidateXXXPacket function -- verifies that internal structures of incoming packets are valid, i.e., fields like sizes and offsets don't point to locations outside the packet.

Concept of Collections  of objects -- hides details of how the collection is organized -- hash table, list, hybrid, etc , alloc/dealloc,

Use arrays of pointers freely. Possibly keep a dynamic estimate the the size
of these arrays to allocate.

Dynamic array class:
typedef struct
{
	UINT TotalSize;
	UINT UsedSize;
	PVOID Array;		<< reallocate if limit is reached, copying from old array.
} DYNAMIC_POINTER_ARRAY;

Could release cached empty resources every minute so.

StateHistory: each entry is a pair: LUID describing where state was changed and
the acutual state.

LinkRecord -- each entry is a pair: LUID describing where the link was made and
the actual object linked to.

10/09/1998 	JosephJ
	Local variable used to verify that all locks claimed were released.
	Root task id can be used in logging.

	Initially label all assert cheking in retail -- log number of asserts hit
	in a global variable.

	Keep all static info about an object together -- no need to get lock when
	looking at that data.

	Does it make sense to simply use InterlockedIncrement/Decrement to maintain
	refcounts -- not require locking?


10/09/1998 	JosephJ
	Review outline

14 slides

	1394
		- 1394 bus review
			- 1394 bus, key characteristics 			(1 slide) 
			- addressing 								(1 slide) 
			- arbitration 								(1 slide)*
			- startup sequence 							(1 slide) 
		- 1394 Bus API review
			- illustration               				(1 slide)*
			- illustration, list of apis 				(1 slide) 
	ip/1394
		- spec review
			- overiew 									(1 slide) 
				- Network-capabile nodes implement the "NETWORK_CHANNELS"
				  register at hardcoded FIFO address 0xFFFF F000 0234
				- special "default" channel used for broadcast
				- the default channel is identified after bus reset and
				  written to the NETWORK_CHANNELS register of all network-capable
				  nodes.

			- encapsulation format						(1 slide) 
			- arp packet 								(1 slide) 
			- mcap request/response packet 				(1 slide) 
		- our architecture
			- goals 									(1 slide) 
				- NT5 & W98 support
				- multi-protocol support
				- sound design, emphasis on testability and diagnostic support
				- Available to public when NT5 ships
			- overview 									(1 slide)*
				-diagram showing components
			- arp/mpcm interface details 				(1 slide) 
			- mpcm/bus interface details 				(1 slide)*
			- installation 								(1 slide)*
			- testing & diagnostics 					(1 slide)
				- 1394-specific miniport tests
				- arp module tested using tcp/ip tests
				- (maybe) component tests for segmentation-and-reassembly
				- netmon support

11/06/1998  JosephJ
	Resource tracking
	each object has a bitmap of "static" resources plus a pointer to a table
	which provide more info about these static resources.

	typedef struct
	{
		ULONG uTag;
		PFN_RESOURCE_HANDLER pfnHandler;
		
	} RESOURCE_TABLE_ENTRY;

	typedef struct
	{
		ULONG 	uTag;
		UINT	uNumEntries;
		RESOURCE_TABLE_ENTRY *pTable;
	} RESOURCE_TABLE;

	RESOURCE_TABLE
	GlobalResourceTable = 
	{
		{'NtOb', arpDevObjHandler},
		{'IpRg', arpIPRegisterHandler}
		{'NdPr', arpProtocolRegistrationHandler}
	}

	AdapterResourceTable
	InterfaceResourceTable



ResourceManagement

RmAllocateResource(
	RESOURCE_HEADER *pParentResource,
);
typedef NDIS_STATUS RM_STATUS;

arpDevObjHandler(
	cmd
	)
{
	NTSTATUS Status;

	if (cmd->op == ALLOCATE)
	{
		CreateFile
		CreateSymbolicLink
	}
	else if (cmd->op == FREE)
	{
	}
	else if (cmd->op == Dump)
	{
	}
}

typedef struct RESOURCEMAP
{
	ULONG Map;
}

RmAllocateResource
RmSyncAllocResource
RmFreeResource
RmSyncFreeResource
RmSyncFreeAllResources

RmLockResource
RmUnlockResource
RmUnlockAllResources

RmLinkResources
RmUnlinkResources
RmTmpReferenceResource

RmAllocateCollection
RmEnumerateCollection
RmFreeCollection
RmSearchCollection
RmAddItemToCollection
RmRemoveItemFromCollection
RmInvalidateItemInCollection
RmValidateItemInCollection

RmAllocTask
RmFreeTask
RmStartSubTask
RmCompleteTask
RmAbortTask
RmDumpTask
RmChainTask

RM_STATUS
RmAllocateResource(
	pParentResource,
	ULONG	ResourceID,
);
 pParentResource->AllocatedResources |= (1<<ResourceID);
 CMD Cmd;
 Cmd.Op = ALLOCATE;
 Cmd.Parent = pParentResource;
 status =  (pParentResource->ResourceTable->Table[ResourceID]) (
 									&Cmd
 									);
    

ULONG RmFreeResource(
	pParentResource,
	ULONG ResourceID
)

Resource-tracking -- use variable-length hash table:


Candidates for hash table--
ArpCache, DbgResourceTrackingCache, 

	read or write lock
	- update stats
	- compute hash
	SLIST_ENTRY pHash->Table[hash]
	for(... pentry = pentry->next)
	{
	 if(*(UINT)(pb+key_offset) != Key)
	 {
	 	if (comparison-function(....))
	 	{
	 		break;
	 	}
	 }
	}
	if (found)
	{
	}

Refcounting: increments tmpref before returning a found item.


LinkObjects(pA, pB, uint relationID)
{
	pA->ref++
	pB->ref++

#if DBG
	ASSERT(pA->root == pB->root)

	{
		Lock(pA->root->tracker_lock);
		RegisterResource(pA, <link relation, relationID, pB);
		RegisterResource(pB, <inv-link-relation, relationID, pA);
		Unlock(pA->root->tracker_lock);
	}
	 
#endif

}
	
12/03/1998 
	Note that the win98 version specifies our bind-adapter in the ndis protocol 
	characteristics, while the nt version specifies it in the call to IPRegisterARP.

12/18/1998 
	Rm support for "groups" -- groups (lists) of objects with one primary key to
	search, and whose life is tied to their presence in the group. Rich enumeration
	functionality.

	RmAllocateGroup
	RmLookUpObjectInGroup
	RmDeleteAllObjectsInGroup(pGroup,pTask)
	RmDeallocateGroup

Locking:
	tasks-allocators, groups, etc, have their own locks, which are
	only used by the rm apis, and never locked *across* APIS. This allows
	them to be used independently of any other locks that may be held.
	For simplicity, we can have a single "rm_private_lock" for this purpose.


1/11/1999 JosephJ
	-- preallocate critical tasks so we don't get stuck while unloading.
	
1/16/1999 JosephJ
	-- think about using the resource tracking apis, as well as implementing the
	   extra checking in the LinkObjects code above.

2/8/1999 JosephJ
	Re-think the allocation of tasks ...
	- allocation handled by user, allowing user to embed tasks in objects, add
	  specialized fields and so on.
	- no "private context" -- any private context is expected to be allocated by
	  the user. Typically each task consists of the standard task header followed
	  by any private data.

	Todo:
	1. revise task apis to reflect above change.
	2. revise tests

2/11/1999 JosephJ
	Decide to claim both pOtherTask and pTask's locks (in order) in
	PendTaskOnOtherTasks. It is possible to deadlock if pTaskA tries to pend to
	pend on pTaskB at the same time that pTaskB tries to pend on pTaskA, but that
	is not a valid thing to try to do anyway.

	Of course, one thing we can do is to 1st lock the pointer that is greater
	in value.

			Status =  arpInitInterface(pIF, pSR);
						Status = arpCallIpAddInterface(

			E:\nt\public\sdk\inc\ipexport.h  2B2A == General failure.

	ip\init.c:
		//
		// Return the other handler pointers
		//
		*IpAddInterfaceHandler = IPAddInterface;
		*IpDelInterfaceHandler = IPDelInterface;
		*IpBindCompleteHandler = IPBindComplete;
		
		#if P2MP
		KdPrint(("IPRegisterArp: Passing Link callups\n"));
		*IpAddLinkHandler = IPAddLink;
		*IpDeleteLinkHandler = IPDeleteLink;
		#endif
		
		*IpChangeIndex      = IPChangeIfIndexAndName;
		*IpReserveIndex     = IPReserveIndex;
		*IpDereserveIndex   = IPDereserveIndex;

	Failing in IPAddInterface in call to IPAddNTE.

	In IPAddNTE, *after* calling  RegRtn (which is our DynRegister, which succeeds)

	Hit the following:
	A13: !ASSERT( Status != NDIS_STATUS_PENDING ) L:1123,F:rm.c
	Fix:
		remove asserts and dealocate(task) if state == ENDING.


2/22/1999 JosephJ Fast Send Path

 Use of RouteCacheEntry.
 	We (arp module) has use of RouteCacheEntry.rce_context,  (private\inc\ip.h)
 	which is of size RCE_CONTEXT_SIZE, which is defined to be 2*sizeof(void*).

 	So we can hold 2 pointers there.

 	RCE is valid memory from the point it shows up in our iptransmit function until
 	it is invalidated by a call to our invalidate-rce function.

 In order to make the fast-send-path as fast as possible, but still allow for
 invalidating the RCE when the mapping from IP->VC breaks down, we'll use the
 RCE as in atmarpc.sys: it contains (a) ptr to a pIP structure and (b) pointer
 to the next RCE entry associated with the same pIP structure.

 However, to speed things up, pIP will contain a pfnTransmit function which will
 be set to a fast-transmit-function when conditions are ideal (mapping from 
 pIP to pVC exists, valid pVC). pfnTransmit will be set to other transmit
 functions if the conditions are less-than-ideal. These functions will queue 
 the packet if registration is in progress, or may fail the packet if IP entry
 is in the process of being aborted.

2/23/1999 JosephJ Task params
 One option is to initialize the private portion of the task with whatever paramters
 required *before* calling RmStartTask -- no need to pass in those paramters
 using the single UserParam field.


2/23/1999 JosephJ  RmUnloadAllObjecsInGroup:

  New rm function RmUnloadAllObjecsInGroup:
  	internally creates a task and in the context of that tasks, unloads all the
  	objects in the group one-by-one.

  One cool feature is that if RmUnloadAllObjectsInGroup is called several
  times on the same group, the "correct" thing happens: all will complete after
  all the objects are unloaded.

2/23/1999 JosephJ  Timers
	To get exactly-once and proper abort semantics, consider calling the timer
	handler with the object's lock held.


2/29/1999 JosephJ
	TODO:
		-- create groups for the following:
			- local-addresses (including bcast and mcast entries)
			- destinations (both channels and fifos)

		Note: Vcs are owned by destination only.

	Basic ARP process:
	  Lookup IP address;
	  if (not yet registered) {
		queue packet on ip entry;// discard early pkts if queue full.
		if (no registration in progress)
		{
			begin registration task}
		}
	  }
	  else // registered
	  {
	  	get destination object;
	  	if (destination has vc)
	  	{
	  		if (not yet connected)
	  		{
	  			queue on vc  to be connected;
	  		}
	  		else if (closing down)
	  		{
	  			discard packet
	  		}
	  		else 
	  		{
	  			send packet on vc
	  		}
	  	}
	  	else
	  	{
	  		// destination has no vc
	  		if (destination blacklisted)
	  		{
	  			discard packet
	  		}
	  		else
	  		{
	  			queue packet on  distination;
	  			{create vc}
	  			{initiate task to make call on vc}
	  		}
	  	}
	  }


3/1/1999 JosephJ Summary of associations:
	Instead of separately tracking who's linked to who, who is a parent/child of who,
	which tasks are running, etc., and also to allow arbitrary associations to be made
	(and later unmade), I introduced the concept of "associations", which are
	triples: The association is defined by the triple
	(Entity1, Entity2, AssociationID) -- only ONE such tuple may
	be registered at any time with object pParentObject.
	Note: It is valid for both of the following to be registered at the same
	time: (a, b, 1) and (a, b, 2)
	No association should exist at the point the object is deleted.

	Associations are implemented using a hash table, which is located in
	the diagnostic-info part of an object.

3/1/1999 JosephJ Associations and debugprinting
	Added support for printing information about all outstanding associations for
	a particular object. The format of the display is controlled by the caller
	of RmDbgAddAssociation -- the caller passes in an optional format string to
	be used when displaying the association.

ARPCB_VC, *PARPCB_VC;
ARPCB_DEST, *PARPCB_DEST;
ARPCB_LOCAL_IP, *PARPCB_LOCAL_IP;
ARPCB_DEST_IP, *PARPCB_DEST_IP;

3/2/1999 Josephj KD extensions

	!rm obj 0x838c7560	-- object
	!rm tsk 0x838c7560	-- task
	!rm asc 0x838c7560	-- associations
	!rm grp 0x838c7560	-- group
	!rm sr  0x838c7560	-- stack record


	!rm obj 0x838c7560

	Object 0x838c7560 (LocalIP)
	  Hdr
		 Sig  :A13L 			State:0xc4db69b3  	   Refs:990
		 pLock: 0x838c7560		pSIinfo:0xfdd0a965	pDInfo :0xd54d947c
		 pParent: 0x2995941a	pRoot:0x060af4a8	pHLink :0xce4294fe
		 HdrSize: 0x123			Assoc:909

	!rm tsk 0x838c7560	-- task

	Object 0x838c7560 (Task: Initalize IF)
	  Hdr
		 Sig  :A13L 			State:0xc4db69b3  	   Refs:990
		 pLock: 0x838c7560		pSIinfo:0xfdd0a965	pDInfo :0xd54d947c
		 pParent: 0x2995941a	pRoot:0x060af4a8	pHLink :0xce4294fe
		 HdrSize: 0x123			Assoc:909
	  TskHdr
	  	pfn: 0x5399424c			State:0x812d7211(IDLE) SCtxt:0x050eefc4
	  	pBlkTsk:0x377c74bc		lnkFellows:0x2b88126f
		Pending Tasks
			0x84215fa5 0xb51f9e9e 0x9e954e81 0x696095b9
			0x0c07aeff

	
	!rm asc	 0x9ba265f8
	Associations for object 0x838c7560 (LocalIP):
		Child   of 0x010091A0 (Globals)
		Parent  of 0x00073558 (Task2)
		Parent  of 0x00073920 (Task3a)
		Parent  of 0x000739F8 (Task3b)

	!rm grp 0x838c7560

	Group 0x4d650b98 (LocalIP Group) of object 0x11eafd78 (Interface)
	Num:11 State:ENABLED	pSInfo: 0x944b6d1b pULTsk: 0x8c312bca
	Members:
		0x8db3267c 0xa639f663 0x8f3530a6 0xa4bfe0b9
		0x995dd9bf 0x61e1344b 0xd6323f50 0x606339fd
		0x2e8ed2a4 0x62e52f27 0xa82b59ab


	!rm sr  0x838c7560

	Stack Record 0x838c7560
		TmpRefs: 2
		HeldLocks:
			0xe916a45f 0x23d8d2d3 0x5f47a2f2

03/03/1999  JosephJ

	All the above dbg extensions are implemented to a T (well I don't
	dump the list of held locks).
	Associations work like a charm.

	The amazing thing is that after I got this to work with the user-mode
	test environment, it worked perfectly in the real kd environment -- everything
	was just perfect, including the rather hairy dumping of associations.

	Following is real output from kd:

kd> !rm obj 0xFF8EFD68

Object 0xFF8EFD68 (INTERFACE)
    Hdr:
            Sig:0x69333141            State:0x80000001            Refs:0x00000002
          pLock:0xFE723990           pSInfo:0xFDB22438          pDInfo:0xFF94E628
        pParent:0xFE723948            pRoot:0xFDB22480          pHLink:0xFF8EFDA8
        HdrSize:0x00000048            Assoc:5
kd> !rm asc 0xFF8EFD68

Associations for 0xFF8EFD68 (INTERFACE):
        IP IF Open
        Child   of 0xFE723948 (Adapter)
        Owns group 0xFF8EFDF8 (LocalIp group)
        Owns group 0xFF8EFE3C (RemoteIp group)
        Owns group 0xFF8EFE80 (Destination group)

....
kd> !rm grp 0xFE6A1CB8

Group 0xFE6A1CB8 (LocalIp group) of object 0xFE6A1C28 (INTERFACE)
       Num:0x00000000            State:ENABLED           pSInfo:0xf926d350
    pULTsk:0x00000000
    No members.

03/04/1999  JosephJ MCast address adds/removes.
	From IP/ATM code, we see that we may get multiple adds for the same
	address, and hence we need to maintain ref counts on these entries.

	This is not the case for unicast addresses.

	Since I am treating all types of IP addresses the same as far as
	liveness is concerned, I will keep add/remove ref counts for all types.

03/04/1999  JosephJ Adding custom information to !rm obj, tsk
	Some way to identify a function to call (in user mode) that knows how
	to print custom information about the specific instance.
	Eg:
	> tsk 0x000732C8
	Task 0x000732C8 (TaskO2)
		Hdr:
				Sig:0x6154524d        State:0x80000000            Refs:0x00000004
		...
		Pending tasks:
			0x00073848 0x000736D0

		Waiting for NdisInitializeAdapter(MP=0x923450900) to complete.

03/04/1999  JosephJ "Verbose" mode for grp
	Currently, only the pointers to the mebers are printed, 4 to a line.
	In verbose mode, switch to one line per member, and allow custom printing
	of member information. Eg (for LocalIP entries):
	0xFE723948 169.240.233.001 RESOLVED

03/04/1999   JosephJ ASSERT_SAME_LOCK_AS_PARENT
	Defined the above macro to assert the case that an object uses the same
	lock as it's parent.


03/04/1999   JosephJ Verifying things aren't changed when an object is unlocked.
	Partial support for is already in the RM api's (the pfnVerifier function stuff).
	We should condider actually using it earlier on the development phase so
	that we catch problems sooner.
	We need to change RM api's (RmLock/UnlockObject) so that they
	compute a checksum on entry and exit -- see earliest entry in this log.
	Basic algorithm:
		RmWriteLockObject(pObj,)
		{
			Lock object
			CurrentState = pfnObjVerifier(pObj, fLock==TRUE);
			ASSERT(CurrentState == pObj->LastSavedState);
		}

		RmUnlockObject(pObj)
		{
			pObj->LastSavedState = pfnObjVerifier(pObj, fLock=FALSE);
			Unlock object.
		}
			

03/04/1999   JosephJ Comments on LocID
	LocID is a 32-bit (typically random) number that identifies a point in the
	source code. I prefer this to saving line/file numbers because:
	1. 32-bit number is easier to carry around.
	2. It's more robust w.r.t. code changes -- simply grep for that number.
	On the downside, you need to make sure that the LocIDs are unique -- easy
	to screq up if you cut and paste code. In unimodem, I has a very elaborate scheme
	that would scan all sources and build a logging C++ file which would only compile
	if the IDs were unique. A simpler script could extract the places where
	these are declared and do a simple check for uniqueness.
	

03/04/1999   JosephJ  Problems with deadlock when using Groups.
	Unfortunately, specifying the RM_LOCKED option could cause deadlock, especially
	the object being looked up does not have its own lock but instead is using
	its parent's lock. Need to find the proper solution to this.


03/04/1999   JosephJ  Size of the context passed in ArpIpQueryInfo.
		Traced this (looking at ip and tcp sources and index1) to
		private\inc\tdiinfo.h (DON'T use tcpipmerge\h\tdiinfo.h, which is for win9x).
		The structure used is TCP_REQUEST_QUERY_INFORMATION_EX.Context, which
		is defined as:
		#define CONTEXT_SIZE                16
		ULONG_PTR     Context[CONTEXT_SIZE/sizeof(ULONG_PTR)];

		So basically we have 4 DWORDS, which is 4ptrs in 32-bit and 2ptrs in
		64-bit.

03/04/1999   JosephJ  Implementing ArpIpQueryInfo.
		We need a mechanism that will deal with our plan to use
		dynamically-resizable hash tables.
		Solution: simply put the IP address in the context.
		We can add an Rm API: RmGetNextObjectInGroupByKey(,...pKey...), which
		will lookup an object that matches pKey and gets the object after it.
		It fails if it doesn't find the object with pKey, or if there is no object
		after the object with the given key, OR if there has been a hash
		table resize. How do we know if there has been a hash table resize? Hmm....
		We may want to add a UINT HashTableGeneration to GROUP, and add the
		Generation to the context.


03/04/1999   JosephJ  Populating the arp cache with static arp entries.
		Good to do this for it's final functionality but also to get
		the bootstrap going.

		For now, just get them from an internally-compiled table.
		Later think about adding them via the standard mechanism.


03/04/1999   JosephJ  Implementing ArpIpQueryInfo (contd...)

		Following are the structures returned. atmarpc.sys (arpif.c) simply
		declared a local char array of sizeof(IFEntry) -- since it's clearly
		the largest. We should probably define a union -- see later down..

		#define MAX_PHYSADDR_SIZE   8

		private\inc\llinfo.h
		typedef struct IPNetToMediaEntry {
			ulong           inme_index;
			ulong           inme_physaddrlen;
			uchar           inme_physaddr[MAX_PHYSADDR_SIZE];
			ulong           inme_addr;
			ulong           inme_type;
		} IPNetToMediaEntry;

		private\inc\ipinfo.h
		typedef struct AddrXlatInfo {
		    ulong       axi_count;
		    ulong       axi_index;
		} AddrXlatInfo;


		private\inc\llinfo.h
		typedef struct IFEntry {
			ulong           if_index;
			ulong           if_type;
			ulong           if_mtu;
			ulong           if_speed;
			ulong           if_physaddrlen;
			uchar           if_physaddr[MAX_PHYSADDR_SIZE];
			ulong           if_adminstatus;
			ulong           if_operstatus;
			ulong           if_lastchange;
			ulong           if_inoctets;
			ulong           if_inucastpkts;
			ulong           if_innucastpkts;
			ulong           if_indiscards;
			ulong           if_inerrors;
			ulong           if_inunknownprotos;
			ulong           if_outoctets;
			ulong           if_outucastpkts;
			ulong           if_outnucastpkts;
			ulong           if_outdiscards;
			ulong           if_outerrors;
			ulong           if_outqlen;
			ulong           if_descrlen;
			uchar           if_descr[1];
		} IFEntry;

		union
		{
			AddrXlatInfo 		AddrInfo;
			IPNetToMediaEntry 	ArpEntry;
			IFEntry		 		Stats;
		} InfoBuf;
		...

		Need to get the adapter info -- stuff in arpGetAdapterInfo, to
		fill out the above structure.

		WIN98: Win98 doesn't like more than 6 chars for IFEntry.if_physaddrlen,
		although it does tolerate more (at-least-7) in AddrXlatInfo.inme_pysaddrlen.

		WIN98 also takes at-leat-7 for LLIPBindInfo.lip_addrlen (IpAddinterfaceRtm)

		NT pIFEntry->if_physaddr <- set to MAC address (6 bytes) + SAP Sel(1 byte)
		W98 pIFEntry->if_physaddr <- set to MAC address (6 bytes, munged due toELAN)
		LLIPBindInfo.lip_addr <- set to ATMAddress starting at ESI offset (7 bytes)
		IPNetToMediaEntry.inme_physaddr <- dest atm addr at ESI offset (y bytes)

		Any reason why pIFEntry->if_physaddr would be different from
		BindInfo->lip_addr?

		MacAddress seems to be used ONLY for pIFEntry.

03/05/1999  JosephJ Thoughts on logging..
	- Log fixed-sized entries (taken from a global list, just like the association
	free-list -- well associations today used alloc's but that'll change).
	- Logs maintained per-object.
	- Log-entry recovery strategy:
		-- all object's log entries deleted when the object is deleted.
		-- If global log entry pool goes empty, then...
			if (the object's log is larger than some threshold)
			{
				we reuse the oldest log entry for that object
			}
			else
			{
				the oldest log entry in the globally-threaded list	
				of log entries entry is reclaimed.
			}
	- KD extensions as well as IOCTLs to display an object' state and logs.

03/05/1999  JosephJ Ideas on using the same code for kd extensions AND IOCTL dump
	Seems possible to use the same code to both collect and dump information in KD
	and from a user mode app that does IOCTLs to the device object representing
	the driver -- after all, conceptually the same thing is going on: there
	is a memory-space transition.

	This is well worth exploring since then once you write an extension, the
	IOCTL support will essentially come for free!

	Unfortunately, we shouldn't allow the user mode app to read arbitrary
	memory from kernel-mode -- so we have to think about this some more.


03/05/1999  JosephJ Strategy for managing ip/1394 encapsulation header buffers
	Keep a fixed-sized, pre-initalized pool of these, and simply queue the packet
	if you run out. More precicely, the send-path would look like:
		Fast path case (vc available for sending, and no pkts queued waiting for
		bufs):
			if (can-back-fill)
			{
				backfill and send
			}
			else
			{
				if (allocate header buf succeeds)
				{
					chain and send
				}
				else
				{
					switch send handler to slow path;
					queue pkt in waiting-for-bufs queue
				}
			}

03/05/1999  More corny locking problems when parent and child share a lock.
	Sometimes we'd like to do the following:
		Lock(pParentObj)
		......
		Create pChildObject
		call Func(pChildObject); // pChildObject's lock released on return from Func

	So RmWriteLock gets called with pParent, and RmUnlock gets called with pChild.
	But RmWrite (extra-checking-version) saves some context of the pParent object,
	so that effectively, it uses the parent's context when freeing the lock;
	So the parent's verifier is called, not the child's.

	This will actually work, but is quite strange behavior which is not at all
	obvious by the call to RmUnlockObject(pChild).

	We'll live with this for now -- see for example the code in 
	ArpIpAddAddress.

	But there is a problem when we implement verification of state preservation
	across locking: Since pChild's verifier function is not called on exit,
	we will assert the NEXT time we try to lock pChild!

	The fix is for RmUnlockObject to call the verifier for pParent(UNLOAD),
	followed by calling verifier for pChild(LOAD), if it detects that
	the object being unlocked is not the same as the object being locked
	(it can do this by looking into the LOCKING_INFO context).

	A bit tricky, but this is fairly clear semantics.

03/05/1999  Locking problems, continued...
	Implemented new function RmDbgChangeLockScope which does the things 
	described above (only if RM_EXTRA_CHECKING is defined, of course).

	Also now RmUnlockObject checks to make sure that the
	RM_LOCKING_INFO.pVerifierContext is a pointer to the object being unlocked.

03/07/1999  JosephJ		Thoughts on location of kdextension sources
	To help things stay in synch, consider keeping a subdir .\kd, which has
	the kd extension code that is sensitive to privately-defined structures.
	This code is actually compiled as part of the debug build of the main component
	-- this will force the code to stay in synch.
	The kd extension dll (which needs to be in another directory)
	would need to includes these files by reaching over into this directory.

03/07/1999  JosephJ		Need to move rm-private state out of Hdr.State

	Since object-specific info is protected by pHdr->pLock, while rm-private state
	is protected by the pHdr->RmPrivateLock,  we can't have both of them use
	pHdr->State; So we need to move rm-private state into its own DWORD.
	This DWORD is dwRmState;

03/07/1999  JosephJ		Registering root objects with RM

	We need to have a mechanism to register root objects with RM, so that multiple
	components (eg. arp1394 and nic1394) can use the RM apis.
	Currently, the primary reason for doing so is to maintain separate global logs
	for each component. Another parameter is the "InterfaceGuid" to uniquely identify
	the component to match up with object-specific information for KD extension
	dumping. More things may need to be added on a per-component basis.

	We have to do some work/re-specification of APIs to allow for a single binary
	that would work for components which have/have-not defined RM_EXTRA_CHECKING.

	typedef struct
	{
		GUID						InterfaceGUID;
	#if		RM_EXTRA_CHECKING
		UINT						NumDbgLogEntries;
		PFN_RM_MEMORY_DEALLOCATOR	pfnDbgLogBufDeallocator;
	#endif // RM_EXTRA_CHECKING
	
	} RM_GLOBAL_INFO, *PRM_GLOBAL_INFO;

	typedef struct
	{
		RM_OBJECT_HEADER 			Hdr;
		PRM_ROOT_INFO    			pRootInfo;
		LIST_ENTRY 					linkRegisteredEntries;

	} RM_ROOT_OBJECT_HEADER;

	
	RmInitializeRootObject(
			IN PRM_ROOT_OBJECT_HEADER,
			PRM_ROOT_INFO    			pRootInfo;
			...
		)
	{
		if (InterlockedCompareExcahnge(RmGlobal_Initialized, 1, 0))
		{
			// Do one-time initialization, including lock and list of 
			// global entries.
		}

		// Add component to global list of registered components.
	}

	
	RmDeinitializeRootObject(
			IN PRM_ROOT_OBJECT_HEADER,
			...,
		)
	{
		//  look for an deinitialize component

		// with global lock held
		if (last-registered-entry)
		{
			// free any globally allocated resources, except of
			// course the global lock itself.
		}
	}

03/07/1999  JosephJ		Thoughts on the obect verifier function...
	
	 To help ensure that no one is READING a piece of data when the object lock
	 is not held, the verifier can reverse the bits of the data on unlocking and
	 flip them back on locking.

03/08/1999 JosephJ		Implemented object logging!
	 Key features:
	 	-- Fixed-sized log entries (RM_DBG_LOG_ENTRY)
	 	-- Each entry has two LIST_ENTRYs: to be a link in the object's list
	 		of log entries and the global list of log entries.
		-- Logging to the object consists of allocating a log entry and inserting
		   it in the head of the object's log list and the global log list.
		-- On deallocation of the object, we free all the entries in object's
		 	log.
		-- Provision to add a buffer to the entry which is freed when the entry
		  is removed from the log -- for cases where the things being logged may
		  go away when the object is still alive.

	Types:
		PFN_DBG_DUMP_LOG_ENTRY 	-- allows customized display of log entries
		RM_DBG_LOG_ENTRY		-- the fixed-size log entry.
	Functions:
		RmDbgLogToObject		-- make an entry in the object's log
		RmDbgPrintObjectLog		-- dump the object log to dbgout
		RmDbgPrintGlobalLog		-- dump the global log to dbgout.


	In order to initialize the global log list, I added the following two RmApis:
	RmInitializeRm		-- call 1st, before any other rm api.
	RmDeinitializeRm	-- call after last rm api, and all async activity complete.

	The above functionality is all implemented and tested via the usermode tests
	in .\tests.

	Note: Once multiple components are using the RM api's, we'll need a more
	sophisticated registration mechanism -- see 07/07/1999  entry "Registering root
	objects with RM"

03/09/1999  JosephJ Consider making init functions fail etc if associated object is
	deallocated.

	We could fail RmInitializeHeader/Task if the parent object is in the deallocated
	state. However,  I'm not sure if it buys us anything -- after all, as soon as
	you return from successful RmInitializeHeader, someone could call
	RmDeallocateObject on the parent, and you get the same result as if the
	parent was already deallocated and we didn't check in RmInitializeHeader.

	What we really want is exact semantics on unloading/deallocating objects.

03/09/1999 	Special allocator for unload-related tasks
	It's ugly for task allocation to fail as part of unloading an object.
	To address this, we should consider special allocation/deallocation for
	unload tasks, that must be called at passive level and will block until
	a free unload-task becomes available.

03/10/1999 	JosephJ "Arp -a" works; Sample kd and arp -a output...

	kd> !e:\nt\kd\a13kd\a13kd.rm obj 0xFE65F008
	Loaded e:\nt\kd\a13kd\a13kd extension DLL
	
	Object 0xFE65F008 (INTERFACE)
		Hdr:
				Sig:0x49333141            State:0x00000002            Refs:0x0000000d
  			pLock:0xFE7009F4           pSInfo:0xFD8C1490          pDInfo:0xFF8C9AE8
			pParent:0xFE7009A8            pRoot:0xFD8C14E0          pHLink:0xFE65F04C
			HdrSize:0x0000004c            Assoc:16
			RmState:  O_ALLOC
	kd> !rm asc 0xFE65F008
	
	Associations (50 max) for 0xFE65F008 (INTERFACE):
			IP IF Open
		Child   of 0xFE7009A8 (Adapter)
		Owns group 0xFE65F0CC (LocalIp group)
		Owns group 0xFE65F110 (RemoteIp group)
		Owns group 0xFE65F154 (Destination group)
		Parent  of 0xFF8D7288 (RemoteIp)
		Parent  of 0xFE691568 (Destination)
		Parent  of 0xFE6686C8 (RemoteIp)
		Parent  of 0xFF92A648 (Destination)
		Parent  of 0xFF8EE868 (RemoteIp)
		Parent  of 0xFF92A848 (Destination)
		Parent  of 0xFE663268 (RemoteIp)
		Parent  of 0xFE667CE8 (Destination)
		Parent  of 0xFF8F18C8 (LocalIp)
		Parent  of 0xFF8B99C8 (LocalIp)
		Parent  of 0xFF8B9EA8 (LocalIp)
	kd> !rm log 0xFE65F008
	
	Log entries for 0xFE65F008 (INTERFACE) (18 of 18):
		Del assoc:    Parent  of 0xFF932288 (Task: Initialize Interface)
		Add assoc:    Parent  of 0xFF8B9EA8 (LocalIp)
		Add assoc:  IP IF Open
		Add assoc:    Parent  of 0xFF8B99C8 (LocalIp)
		Add assoc:    Parent  of 0xFF8F18C8 (LocalIp)
		Add assoc:    Parent  of 0xFE667CE8 (Destination)
		Add assoc:    Parent  of 0xFE663268 (RemoteIp)
		Add assoc:    Parent  of 0xFF92A848 (Destination)
		Add assoc:    Parent  of 0xFF8EE868 (RemoteIp)
		Add assoc:    Parent  of 0xFF92A648 (Destination)
		Add assoc:    Parent  of 0xFE6686C8 (RemoteIp)
		Add assoc:    Parent  of 0xFE691568 (Destination)
		Add assoc:    Parent  of 0xFF8D7288 (RemoteIp)
		Add assoc:    Owns group 0xFE65F154 (Destination group)
		Add assoc:    Owns group 0xFE65F110 (RemoteIp group)
		Add assoc:    Owns group 0xFE65F0CC (LocalIp group)
		Add assoc:    Parent  of 0xFF932288 (Task: Initialize Interface)
		Add assoc:    Child   of 0xFE7009A8 (Adapter)
	kd> !rm grp 0xFE65F154
	
	Group 0xFE65F154 (Destination group) of object 0xFE65F008 (INTERFACE)
   		Num:0x00000004            State:ENABLED           pSInfo:0xfd8c1380
		pULTsk:0x00000000
		Members:
			0xFE667CE8 0xFE691568 0xFF92A648 0xFF92A848
	
	kd>

	ARP -A output from josephj1E...
	E:\> arp -a
	
	Interface: 172.31.241.214 on Interface 0x2
  	Internet Address      Physical Address      Type
  	172.31.240.1          00-10-11-60-d1-40     dynamic
	
	Interface: 192.168.75.1 on Interface 0x3
  	Internet Address      Physical Address      Type
  	10.0.0.11             01-00-00-00-00-00-00  static
  	10.0.0.12             02-00-00-00-00-00-00  static
  	10.0.0.13             03-00-00-00-00-00-00  static
  	10.0.0.14             04-00-00-00-00-00-00  static
	
	E:\>net stop atmarpc
	
	The ATM ARP Client Protocol service was stopped successfully.
	
	
	E:\>net start atmarpc
	
	The ATM ARP Client Protocol service was started successfully.

03/10/1999 	JosephJ	Encapsulation buffer management design

	Apis:

	NDIS_STATUS
	arpInitializeEncapsulationHeaderPool(
		IN		UINT Size,
		IN		const *pvMem,
		IN		UINT cbMem,
		IN		PRM_OBJECT_HEADER *pOwningObject,
		OUT		ARP_ENCAPSULATION_HEADER_POOL **ppPool,
		IN		PRM_STACK_RECORD pSR
		);

	VOID
	arpDeinitializeEncapsulationHeaderPool(
		IN		ARP_ENCAPSULATION_HEADER_POOL **ppPool,
		IN		PRM_STACK_RECORD pSR
		);
	
	PNDIS_BUFFER
	arpAllocateEncapsulationHeader(
		ARP_ENCAPSULATION_HEADER_POOL *pPool
		);

	VOID
	arpDeallocateEncapsulationHeader(
		ARP_ENCAPSULATION_HEADER_POOL *pPool
		PNDIS_BUFFER	pBuffer
		);


03/11/1999 RM api enhancements -- more on root objects
	(see 03/07/1999  entry "Registering root objects with RM")
	RootObjects should be an extended hdr structure, with the following info
	-- list of tasks (for debugging only)
	-- "name space GUID", used by kd to load custom information about all the objects
		under the GUID.
	-- Global log (one per root object).
	   
	typedef struct {
		RM_OBJECT_HEADER Hdr;
		LIST_ENTRY	listTasks;
		LIST_ENTRY	listLog;
		...
	} RM_ROOT_OBJECT_HEADER;

03/11/1999 RM api enhancements -- special "unload object" tasks.
	-- Given the similarity of the way shutdown tasks are handled, especially
		the way they deal with existing shutdown tasks, we should consider
		shutdown tasks to be a special kind of tasks with an extended task header
		(below). Also, have a field in all objects to hold THE
		 shutdown task. The RmApis can implement the logic of waiting on THE
		 shutdown task, etc. MOREOVER, it can then support the concept of
		 PARALLEL unload, because it can use the extra fields in the extended
		 shutdown task header to store stuff (LONG to be interlocked-
		 decremented and if zero a task to be un-pended).
	typedef struct
	{
		RM_TASK_HEADER	TskHdr;
		LONG			TasksLeft;			<< interlock-decrement this and if 0 ...
		PRM_TASK		pCoordinatingTask;	<< ... unpend this task.
	} RM_SHUTDOWN_TASK;


	The object's unload task handler will be only called once, regardless of
	howmany times someone requests to unload the object -- this is supported
	by a new Rm API, something like:
		RmUnloadObject(pObj, OPTIONAL pTask,...)  -- if pTask NULL, will block.
	(also the existing RmUnloadAllObjectsInGroup)

	Since the handler function will only be called once, it can be simplified --
	the code to deal with existing handler-functions can be taken out.

03/11/1999 RM api enhancements -- stastics gathering(if RM_EXTENDED_CHECKING enabled)
	For the following
		- per root object (global stats)
		- per object
	Stats (current, tot, max)
		- tasks allocated
		- object age (how long it's been around)
		- number of children allocated

	For Groups (current, tot, max)
		-we already maintain some group stats -- rough number of accesses and
		 number links travesed (since it's munged (scaled down), this is not
		 really a true number).
		- Number of adds/deletes/lookups
		- Number of members
		- Links traversed
		- Some idea of how long objects live in the group
			(age can be determined at the time the object is deallocated)
			- best would be a histogram, say of multiples of 16 ms (8 DWORDS)
				<=1ms, <=16ms, <=256ms, <=4s, <=65s(~1m), <=1Ks(16m), <=16Ks(4h), >..
			- quick to compute histogram index: 16-char array L2 of log_2(nibble):
				PUCHAR *puc = (PUCHAR) &val;
				UINT Index =
				(L2[puc[0]]+(L2[puc[1]]<<4)+(L2[puc[2]]<<8)+(L2[puc[3]]<<12))>>2;


03/11/1999 	JosephJ Implemented and tested (in user mode) const buffer APIs
	See 03/10/1999 	entry "Encapsulation buffer management design"
	The APIs have been renamed as follows
		arpInitializeConstBufferPool
		arpDeinitializeConstBufferPool
		arpAllocateConstBuffer
		arpDeallocateConstBuffer
	.\tests\tarp.c (function  test_ArpConstBufferPool) tests the above functions
	in usermode.

03/11/1999  JosephJ Win98 -- BACK_FILL is disabled in atmarpc.sys
	So we have to keep the #if BACK_FILL code.

03/11/1999  JosephJ Ideas on logging enhancements
	- Integrate debug logging with object logging -- single logging model
	  that optionally goes to object log and/or debug log.
	  (So for example a lot of stuff can get logged to the object logs, without
	  choking up the debugger).
	- Verbosity controlled on multiple basis:
		- per-object
		- per stack_record
		- per module
	- Add a SINGLE_LIST_ENTRY to the log entry for stack_record logging -- to be able
	  to dump all log entries made when a particular stack record is in scope.
	  - rather than trying to properly deal with stack_records and/or objects going
	    out  of scope, we simply add the log entry to the HEAD of the stack-record
	    list. This way we don't have to worry if log entries already in the
	    stack-record log are still alive (note we would need to know that if we
	    were using the doubly-linked SLIST_ENTRY).
	  - The kd extension would have to deal with the fact that some of the entries
	    may be deallocatd.
	
03/12/1999 	JosephJ RouteCacheEntry information:
	From:	Joseph Joy  Friday, March 12, 1999 7:43 AM
	Subject:	questions on arp RouteCacheEntry semantics

	NK,
	Are the semantics of RouteCacheEntry passed in to the arp module's lip_transmit
	routine documented anywhere?
	[Nk Srinivas]   Document ???? ;-)
	
	If not, can you answer the following questions? (I need this for my ip/1394 arp
	implementation).
	
	1. From the 1st time we see a particular RCE (with arp context portion all
	 	zeros) until the point the arp modules lip_invalidate handler is called,
		can we assume that the rce will always refer to the same destination IP
		address?
		[Nk Srinivas]  Yes.
	2. Is it possible for the lip_transmit routine to be re-entered for a send with
		the same RCE -- i.e., two or more concurrent calls made to lip_transmit
	 	specifying the same RCE?
		[Nk Srinivas]  yes.
	3. Is #2 is true,  can we assume that the FIRST time a particular RCE is
		specified in lip_transmit, lip_transmit will NOT be reentered with the same
		RCE until the former call to lip_transmit returns? (I hope so).
		[Nk Srinivas]  No. same rce will be passed in every call.
	4. In practice, under moderate to heavy loads, can I assume that the vast
		majority (>99%) of lip_transmit calls are made with a non-NULL RCE?
		[Nk Srinivas] [...] *All* tcp/udp/raw  traffic uses RCE. Only icmp/igmp
		do not use rce.

03/12/1999 	JosephJ RouteCacheEntry use; fast send path design VERSION ONE

ArpIpTransmit(...)
{

	if (pRCE->context != NULL)
	{
		lock IF send lock
		get pIpEntry from pRCE
		if (can send immediately) // this includes the fact that there are
								  // no pkts queued waiting for buffers!
		{
			fRet = fast_send(&Status, pPkt, pVc); // send-lock released
			if (fRet)		return Status;			// EARLY_RETURN
			// else were out of resources, we probably need to queue pkt
		}
		unlock IF send lock
	}
	
	arpSlowIpTransmit(......)
}

arpSlowIpTransmit(...)
{

	if (pRCE->context == NULL) // again
	{
		lookup/create RemoteIp entry
		ASSERT_NOLOCKS()
		get IF send lock
		if (pRCE->context == NULL)	// is it still null?
		{
			setup pRCE->context;
		}
		else
		{
			// no-longer null -- this means that someone else has already
			// initialized it.
			pTmpRemoteIp = pRemoteIp;
			pRemoteIp = pRCE->context;
			tmpref(pRemoteIp);
			tmpderref(pOldRemoteIp);
		}
		release IF send lock;
	}

	ASSERT_NOLOCKS

	if (pRemoteIP == NULL)
	{
		fail pkt.
	}
	else
	{
		// we've got a pRemoteIp, with a ref to it, and no locks.
		get IF set lock
		if (can send immediately)
		{
			fret = fast_send(....);
			if (!fRet)
			{
				// we're out of resources, queue pkt on IF's pkts-waiting-for-bkts
				// queue.
			}
		}
		else
		{
			queue pkt on RemoteIp's send pkt queue.
		}
	}
}

03/12/1999 	JosephJ RouteCacheEntry use; fast send path design VERSION TWO
	In this one, we first prepare the packet, including chaining a header buffer
	up front, if required if we can't fast-send, we un-do the work.

	// Following sits in the miniport-reserved portion of send-pkts, before they
	// are sent out.
	struct
	{
		LIST_ENTRY linkQueue;

		union
		{
			struct
			{
				IP_ADDRESS 	IpAddress;
				ULONG		Flags;
				#define	ARPSPI_BACKFILLED 		0x1
				#define ARPSPI_HEADBUF	  		0x2
				#define ARPSPI_FIFOPKT	  		0x4
				#define ARPSPI_CHANNELPKT	  	0x8
			} IpXmit;
		};

	} ARP_SEND_PKT_MPR_INFO;


	ArpIpTransmit(...)
	{
	
		do
		{
			if (pRCE->context != NULL) break;	// slow path
	
			if (fifo_header)
			{
				fRet = prepare_fifo_header(pIF, pPkt);
			}
			else
			{
				fRet = prepare_channel_header(pIF, pPkt);
			}
	
			if (!fRet) break; // slow path
	
			lock IF send lock
			get pIpEntry from pRCE
			if (can send immediately) // this includes the fact that there are
  									// no pkts queued waiting for buffers!
			{
				pVc->fast_send(&Status, pPkt, pVc); // send-lock released
				return Status;			// EARLY_RETURN
			}
			unlock IF send lock
		}
		
		arpSlowIpTransmit(......)
	}
	
	arpSlowIpTransmit(pPkt, pLocalIp, ...)
	{
		
	}

03/13/1999 	JosephJ New RM APIs RmResumeTaskAsync and RmResumeTaskDelayed
	Added the above two APIs which seem to provide a "big bang for the buck."
	Description:
		RmResumeTaskAsync -- resumes task in the context of a work item
		RmResumeTaskDelayed -- resumes task in the context of a timer handler.

	Potential  uses of RmResumeTaskAsync:

	1.	There is a potential problem with the way that task completion is handled,
		that could lead to excessive use of the stack.

		The specific case where this would happen is if
	 	there are a large number of objects in a group, and
		their shutdown tasks all call SuspendTask and ResumeTask on themselves.
		What will happen is that when RmUnloadAllObjectsInGroup is called for
		this group, you will have the shutdown handlers for EACH object in the
		group on the stack (in facta couple of times each).

		To avoid this pathalogical situation (which except for its use of the 
		stack is otherwise perfectly correct), RmUnloadAllObjectsInGroup can
		unload each object as a separate work item.

	2.	If a task wants to do something at passive level and it can be sure
		that it is currently at passive level.

	Potential uses of RmResumeTaskDelayed:
	1.	For debugging, to delay completion of some operation makes it extremely
		easy to do it).
	2.	If a task needs to do something after a fixed period of time -- say to
		send a retry after 3 seconds.

03/13/1999 	JosephJ 	Ageing of objects
	The use of ageing timers can be completely hidden from the user if objects
	have ages and they WILL be unloaded (it's shutdown task will be started) if
	the age expires. The rm API RmResetAgeingTimer is used to extend the object's
	life.

	Support for ageing of objects, plus the RmResumeTaskDelayed api described 
	above, should pretty-much obviate the user's need for explicit timers.

03/14/1999  JosephJ	Finished implementing RmResumeTaskAsync and RmResumeTaskDelayed
	Finished implementing and testing (in user mode) the above two functions
	(see 03/13/1999 entry "New RM APIs RmResumeTaskAsync and RmResumeTaskDelayed").
	To test in user mode, I wrote user-mode versions of the following Ndis APIs:
		NdisInitializeWorkItem
		NdisScheduleWorkItem
		NdisInitializeTimer
		NdisSetTimer

03/16/1999  JosephJ Implemented RmLinkToExternal* and RmUnlinkFromExternal*
	The following are used for references to external objects, such as RCEs and
	packets:
		RmLinkToExternalFast		Addrefs object
		RmLinkToExternalEx			Debug versions of the above, adds an association
		RmUnlinkFromExternalFast	Delrefs object
		RmUnlinkFromExternalEx		Debug version of the above, dels an association
	TODO: need to make the fast versions inline, and also currently 
	RmUnlinkFromExternalEx declares a stack-record -- it should do this only
	if the object needs to actually be deallocated (i.e call another function
	 which declares a stack log)

03/19/1999  JosephJ Thoughts on cleaning up the task handlers
	- Separate PendCompletion-, End- and Abort-handlers.
	- No "UserParam", even on starting -- instead, just NDIS_STATUS.
	- User is expected to setup the task with any required initialization parameters
	  *before* calling RmStartTask.
	- "START" is a special pend code value of (ULONG)-1, sent to the task's
	  PendCompletion handler.
	- RmStartTask has return type VOID.
	- PendCompletion and Abort handlers have return type VOID.
	- Only the End handler returns NDIS_STATUS (anything besides PENDING).
	  (This return status is passed on any tasks that may be pending on it).

	The PendCompletion handler prototype becomes...
		typedef
		VOID
		(*PFN_RM_TASK_PENDCOMPLETE_HANDLER)(
			IN	struct _RM_TASK	*			pTask,
			IN	OS_STATUS					Status,
			IN	PRM_STACK_RECORD			pSR
			);

	RmStartTask's prototype becomes...
		VOID
		RmStartTask(
			IN	PRM_TASK					pTask,
			IN	PRM_STACK_RECORD			pSR
		);

03/22/1999 	JosephJ Support for retail debugging or RM objects
	- May want to consider adding links to children and peers (4 ptrs overhead!)
	  purely for debugging purposes. At least make it a compile option independent
	  of DBG
	- Support the following RM dbgextension:
		!rm scantree <obj addr>	<pattern>
			-- scans the obj at addr <obj addr> and all its children for 
				pattern <pattern>
		!rm tree <obj addr>
			-- lists the entire tree of objects, starting at oject <obj addr>

	bp atmarpc!DbgMark "dd (esp+4) l1; g poi(esp)"

03/23/1999  JosephJ Media-specific parameters is 5 DWORDs from base ....
			but NIC1394_MEDIA_PARAMETERS, whose 1st field is a union
			which includes a UINT64, needs to be 8-byte aligned!
			Fix? Probably redefine the UniqueID to be UniqueIDHi and UniqueIDLo

03/24/1999  JosephJ Wierdness involving MIB processing in ip.c
	Previously, the arp module could be net-stopped and started, but then
	arp, ipconfig, etc wouldn't work, and what was happening is the the reloaded
	arp module was being given the OLD entity instance values (from its previous
	life). I found that sometime after we initiate unload by calling IP's
	pDelInterfaceRtn, Ip calls  ArpIpGetEList. At this stage (i.e. we are closing),
	we need to set the pAT/IFEntity->tei_instance to  INVALID_ENTITY_INSTANCE to
	fix this problem.

03/24/1999 	JosephJ 		Adding to fake Ndis calls:
	Adding more variations to the fake versions of the following Ndis calls:
		NdisClMakeCall
		NdisClCloseCall
		NdisCoSendPackets
	We need to randomly chose among the following variations:
	- failure OR success
	- async OR sync completion for make/close call
	- async OR sync (i.e. while NdisCoSendPackets still on stack) completion for
	  SendPkts.
	- For async completion of make/close call and async completion of sendpkts,
	  to call the completion call back in dpc OR passive level.
	- For async calls, delay for some random amount of time.

03/25/1999 JosephJ	Implemented all of the above fake ndis call variations!
	Check out fake.c -- it now has a pretty elaborate mechanism for controlling
	the probabilities of the variations of behaviour of the fake versions of
	NdisClMakeCall, NdisClCloseCall and NdisCoSendPackets -- basically it allows
	you to specify weights of the above variations (failure/success, async/sync
	etc) and then generates samples based on those weights. Here's an example
	of how the delay amount is specified:
		static
		OUTCOME_PROBABILITY
		DelayMsOutcomes[] = 
		{
			{0,			5},		// Delay 0ms, etc...
			{10,		5},
			{100,		5},
			{1000,		1},
			{10000,		1}
		};
	The above means that 0,10, and 100ms delays each have a weight of 5 and
	1000ms and 10000ms each have a weight of 1.

	TODO: May want to add jitter to the outcome values, where they make sense.
	It's easy to do that -- for example Val += (R*Val/32), where R is a random
	signed integer in the range of -8 to 8 (need to watch for overflow and 
	boundary conditions). Anyway, I don't think this will add anything tangible
	(i.e. find bugs that would not have otherwise been found).

	The code to generate samples based on weights, and the fake versions of the
	calls themselves, were first tested in user mode via the tests in
	tests\tarp.c (test functions  test_ArpGenRandomInt() and test_arpDbgFakeCalls().)
	test_ArpGenRandomInt actually prints out results to show that the actual
	percentages  match the specified weights. Here is some sample
	output(pretty good results!):
			NUM_TRIALS = 100....
				Outcome=0x0; True%=0.032258; Computed%=0.020000
				Outcome=0x1; True%=0.064516; Computed%=0.050000
				Outcome=0x2; True%=0.129032; Computed%=0.170000
				Outcome=0x3; True%=0.258065; Computed%=0.240000
				Outcome=0x4; True%=0.516129; Computed%=0.520000
			...
			NUM_TRIALS = 10000....
				Outcome=0x0; True%=0.032258; Computed%=0.034800
				Outcome=0x1; True%=0.064516; Computed%=0.063300
				Outcome=0x2; True%=0.129032; Computed%=0.126400
				Outcome=0x3; True%=0.258065; Computed%=0.256800
				Outcome=0x4; True%=0.516129; Computed%=0.518700
	The core random number generator is based on Numerical Recipes ran1() --
	see fake.c for details.

	Today I used the above fake version of the APIs to test arp1394 -- it worked
	fine for basic pings, but arp1394 has just hit an assert when I tried
	"net start atmarpc" while pings were ongoing. So the test infrastructure is
	bearing fruit!

	The great thing about these fake versions is that I can continue to use them
	in the future for regression testing of arp1394.

03/25/1999  JosephJ Ahem...above-mentioned assert is due to be a bug in fake.c

03/25/1999 	JosephJ IPDelInterface should be called at PASSIVE!

	Check out the following stack trace. The bugcheck happened because
	IPDelInterface was called at DPR level (our good-old fake close-call completion
	callback did this, by design). So obviously we must switch to passive before
	calling IPDelInterface. But this stack is an example of the potential
	problem I mentioned in the  03/13/1999 note
	"New RM APIs RmResumeTaskAsync and RmResumeTaskDelayed":
			1.	There is a potential problem with the way that task completion
				is handled, that could lead to excessive use of the stack.
	So basically we need to figure out key points to do a "resume task asynch."
	I could make "RmCancelPendOnOtherTask" do a RmResumeTaskAsync instead
	of RmResumeTask EXCEPT that we need a work item to do this.
			
				ntkrnlmp!KeBugCheckEx+0x12d
				ntkrnlmp!ExAllocatePoolWithTag+0x3f
				ntkrnlmp!ExpAllocateStringRoutine+0x10
				ntkrnlmp!RtlAnsiStringToUnicodeString+0x48
				netbt!LmOpenFile+0x3c
				netbt!PrimeCache+0x3d
				netbt!NbtResyncRemoteCache+0x8a
				netbt!NbtNewDhcpAddress+0xaf
				netbt!TdiAddressDeletion+0x70
				TDI!TdiNotifyPnpClientList+0xcb
				TDI!TdiExecuteRequest+0x173
				TDI!TdiDeregisterNetAddress+0xb
				tcpip!NotifyAddrChange+0xf9
				tcpip!IPDelNTE
				tcpip!IPDelInterface
				atmarpc!RmResumeTask+0x129
				atmarpc!RmCancelPendOnOtherTask+0x221
				atmarpc!rmEndTask+0x13c
				atmarpc!RmResumeTask+0x1fb
				atmarpc!RmCancelPendOnOtherTask+0x221
				atmarpc!rmEndTask+0x13c
				atmarpc!RmStartTask+0x201
				atmarpc!rmTaskUnloadGroup+0x452
				atmarpc!RmResumeTask+0x129
				atmarpc!RmCancelPendOnOtherTask+0x221
				atmarpc!rmEndTask+0x13c
				atmarpc!RmStartTask+0x201
				atmarpc!rmTaskUnloadGroup+0x452
				atmarpc!RmResumeTask+0x129
				atmarpc!RmCancelPendOnOtherTask+0x221
				atmarpc!rmEndTask+0x13c
				atmarpc!RmStartTask+0x201
				atmarpc!rmTaskUnloadGroup+0x452
				atmarpc!RmResumeTask+0x129
				atmarpc!RmCancelPendOnOtherTask+0x221
				atmarpc!rmEndTask+0x13c
				atmarpc!RmResumeTask+0x1fb
				atmarpc!RmCancelPendOnOtherTask+0x221
				atmarpc!rmEndTask+0x13c
				atmarpc!RmResumeTask+0x1fb
				atmarpc!ArpCoCloseCallComplete+0xf8
				atmarpc!arpFakeCloseCallCompletionCallback+
				atmarpc!arpDbgFakeCompletionTask+0x1b1
				atmarpc!RmResumeTask+0x129
				atmarpc!rmWorkItemHandler_ResumeTaskAsync+0
				NDIS!ndisWorkItemHandler+0xa
				ntkrnlmp!ExpWorkerThread+0xcb
				ntkrnlmp!PspSystemThreadStartup+0x54
				ntkrnlmp!KiThreadStartup+0x16

03/26/1999  JosephJ Some proposed modifications to RM task handling ...
	- RmUnloadAllObjectsInGroup causes the cascaded chain of start tasks above
	  if the unload task of each object returns synchronously or asynchronously
	  but with the original start task still on the stack. This has to change.
		A One fix is for RmUnloadAllObjectsInGroup to call an unload *function*
		  (instead of starting a task) for each object. This unload function would
		  take the unload-all-objects task as an argument and if
		  necessary start a task and make the coordinating task pend on it. If this
		  function returns synchronously, however, then the unload-all-objects task
		  can go on to the next task.
		B Another fix is to make RmPendTaskOnOtherTask return PENDING if the
		  task has been pended or SUCCESS if OtherTask has already completed.
		  Currently, typical sequence of starting and pending on another task is:
		  		pOtherTask = AllocTask(...);
		  		RmPendOnOtherTask(pTask, pOtherTask,...);
		  		RmStartTask(pOtherTask,...);
		  With the proposed change, the sequence becomes...
		  		pOtherTask = AllocTask(...);
		  		RmTmpReferenceObject(&pOtherTask.Hdr,...);
		  		RmStartTask(pOtherTask,...);
		  		Status = RmPendTaskOnOtherTask(pTask, pOtherTask, ...);
		  		RmTmpDereferenceObject(&pOtherTask.Hdr,...);
		  		if (PEND(Status))
		  		{
		  			// we're pending on the other task.
		  			...
		  		}
		  		else
		  		{
		  			// Other task is complete. Go on to the next step.
		  			//
		  		}
		 For now, we can use an StartAndTryPend internal api used only
		 by the unload-all-objects task so we don't have to go and change things
		 everywhere.

		 Implemented option 'B', but specifically for use by  rmTaskUnloadGroup.
		 The new version of the pend function is called RmPendTaskOnOtherTaskV2
		 (called only by rmTaskUnloadGroup).

03/26/1999  JosephJ Was a bug in my code to switch to async before calling DelIF...
	Following is an example of using dumps of object associations and logs to
	quickly find out what's going on and where the problem is....

	The net stop was hanging, but the system was otherwise available. So I broke
	in and this is what I found...

	kd> !rm asc 0xFE666168
	
	Associations (50 max) for 0xFE666168 (INTERFACE):
		IP IF Open
		Child   of 0xFF8F2A68 (Adapter)
		Owns group 0xFE666234 (LocalIp group)
		Owns group 0xFE666278 (RemoteIp group)
		Owns group 0xFE6662BC (Destination group)
		Buffer pool 0xFE666330
		Parent  of 0xFF8D8708 (Task: Shutdown Interface)
	kd> !rm asc 0xFF8D8708
	
	Associations (50 max) for 0xFF8D8708 (Task: Shutdown Interface):
		Blocks     0xFF8F0848 (Task:Unload Object)
		Child   of 0xFE666168 (INTERFACE)
		Resume async (param=0x00000000)

	kd> !rm log 0xFE666168
	Log entries for 0xFE666168 (INTERFACE) (41 of 41):
		Del assoc:    Parent  of 0xFE6782E8 (Destination)
		Del assoc:    Parent  of 0xFF90FBA8 (Task:UnloadAllObjectsInGroup)
		Del assoc:    Parent  of 0xFF8EDD08 (Destination)
		Del assoc:    Parent  of 0xFF91A4C8 (Destination)
		Del assoc:    Parent  of 0xFF8EE6E8 (Destination)
		Del assoc:    Parent  of 0xFF8D4268 (Task:UnloadAllObjectsInGroup)
		Del assoc:    Parent  of 0xFF90F428 (Task:UnloadAllObjectsInGroup)
		Add assoc:    Parent  of 0xFF90FBA8 (Task:UnloadAllObjectsInGroup)
		Del assoc:    Parent  of 0xFF907448 (RemoteIp)
		....
		Add assoc:    Parent  of 0xFF8F0848 (Task: Initialize Interface)
		Add assoc:    Child   of 0xFF8F2A68 (Adapter)

	kd> !rm log 0xFF8D8708
	Log entries for 0xFF8D8708 (Task: Shutdown Interface) (50 of 2486):
		Del assoc:    Resume async (param=0x00000000)
		Add assoc:    Resume async (param=0x00000000)
		Del assoc:    Resume async (param=0x00000000)
		Add assoc:    Resume async (param=0x00000000)
		Del assoc:    Resume async (param=0x00000000)
		Add assoc:    Resume async (param=0x00000000)
		Del assoc:    Resume async (param=0x00000000)
		...

	Note the 2486 log entries above!
	So basically what's happening is that the IF shutdown task was in an
	endless loop of switching to async -- this was because it was
	checking whether it was at PASSIVE wit the IF lock held!

03/27/1999 	JosephJ ARP Packet handling

	// Parsed version of the ARP request/response pkt
	//
	typedef struct
	{
		enum
		{
			ArpRequest 	= 1,
			ArpResponse	= 2
		} 						OpCode;

		USHORT					SenderMaxRec;
		USHORT					SenderSspd;

		NIC1394_FIFO_ADDRESS	SenderHwAddr;

		IP_ADDRESS				SenderIpAddress;
		IP_ADDRESS				TargetIpAddress;
		
	} IPV4_1394_ARP_PKT_INFO;

	NDIS_STATUS
	arpParseArpPkt(
		IN		PVOID					pvPktData,
		IN		UINT					cbPktData,
		IN OUT	IPV4_1394_ARP_PKT_INFO *pArpPktInfo
		);

	NDIS_STATUS
	arpPrepareArpPkt(
		IN 		IPV4_1394_ARP_PKT_INFO *pArpPktInfo
		IN		PVOID					pvPktData,
		IN		UINT					cbMaxPktData,
		out		PUINT				    pcbMaxPktData
		);

03/27/1999 	JosephJ ARP Packet handling (contd..)
	Defined the following over-the wire packet formats:
		NIC1394_GASP_HEADER				(nic1394.h)
		NIC1394_FIRST_FRAGMENT_HEADER	(nic1394.h)
		NIC1394_FRAGMENT_HEADER			(nic1394.h)
		IP1394_ARP_PKT					(rfc.h)

03/28/1999 	JosephJ Created subdirs w2k and win98 to build for w2k and win98.
	Moved & modified  makefile and sources down to w2k and also win98.

03/28/1999 	JosephJ ARP packet handling (contd...)
	Implemented arpParseArpPkt and arpPrepareArpPkt (in arp.c)

03/28/1999 	JosephJ Thoughts on cleaning up RmLookupObjectInGroup
	RmLookupObjectInGroup is too overloaded -- split it up into a LookupOrCreate
	function and a pure Lookup function. Or maybe use macros...

03/29/1999 	JosephJ	max_rec and sspd info in ARP pkts...
	We should request that sspd info be removed from the ARP pkt.
	Anyway, I've sent mail to georgioc asking how to get this information for the
	local host.

03/30/1999 	JosephJ	Yet another way to handle failures in the task handler....
			From  arpTaskInitializeInterface(...):
						// Couldn't allocate task. Let's do a fake completion of
						// this stage...
						//
						UNLOCKOBJ(pIF, pSR);
						RmSuspendTask(pTask, PEND_SetupReceiveVc, pSR);
						RmResumeTask(pTask, (UINT_PTR) Status, pSR);

03/30/1999 	JosephJ	Thougts on using tasks to help write pageable code

	Support for "pageable" tasks -- the rm api's can make
	sure that the context is passive (switching to passive if
	required) whenever the handler is called.
	We can require only the START and (optional) complete handlers
	to be nonpaged. Even the START handler doesn't need to be
	pageable -- if we require that RmStartTask be called at
	PASSIVE.

	I think this is a pretty cool concept and should be explored further.


03/30/1999 	JosephJ	Interesting stack traces for load/unload of atmarpc...

	ntkrnlmp!IofCallDriver
	nic1394!nicSubmitIrp+0x197
	nic1394!nicSubmitIrp_Synch+0x173
	nic1394!nicAllocateAddressRange+0x446
	nic1394!nicCmMakeCallInitVc+0x6b7
	nic1394!NicCmMakeCall+0x29b
	NDIS!NdisClMakeCall+0x86
	atmarpc!arpTaskMakeRecvFifoCall+0x3ae
	atmarpc!RmStartTask+0x12f
	atmarpc!arpTaskInitializeInterface+0x318
	atmarpc!RmResumeTask+0x129
	atmarpc!ArpCoOpenAfComplete+0x104
	NDIS!NdisCmOpenAddressFamilyComplete+0xce
	NDIS!NdisClOpenAddressFamily+0x1e4
	atmarpc!arpTaskInitializeInterface+0x17a
	atmarpc!RmStartTask+0x12f
	atmarpc!ArpCoAfRegisterNotify+0x246
	NDIS!ndisNotifyAfRegistration+0x62
	NDIS!ndisMFinishQueuedPendingOpen+0xfd
	NDIS!ndisWorkerThread+0x5c

	nic1394!nicFreeAddressRange
	nic1394!NicCmCloseCall+0xf0
	NDIS!NdisClCloseCall+0x64 
	atmarpc!arpTaskCleanupRecvFifoCall+0x36a
	atmarpc!RmStartTask+0x12f
	atmarpc!arpTaskShutdownInterface+0x245
	atmarpc!RmStartTask+0x12f
	atmarpc!arpTaskShutdownAdapter+0x35c
	atmarpc!RmStartTask+0x12f
	atmarpc!rmTaskUnloadGroup+0x44c
	atmarpc!RmStartTask+0x12f
	atmarpc!RmUnloadAllObjectsInGroup+0x10e
	atmarpc!arpResHandleGlobalIpBinding+0x1e0
	atmarpc!RmUnloadAllGenericResources+0x101
	atmarpc!ArpUnload+0x5d
	ntkrnlmp!IopLoadUnloadDriver+0x14 
	ntkrnlmp!ExpWorkerThread+0xcb
	ntkrnlmp!ObpCreateHandle+0x165

03/31/1999 	JosephJ	Static ping works!
	Today, we got ping and ttcp to work across two machines, over ip/1394!
	Throughput was dismal -- ~ 250K bytes/sec (2M bits/sec), but otherwise
	it's stable (pinged all night, continues to ping...), provided you don't
	try to yank the cable etc in the middle. ADube is working on nic1394 to fix
	the latter problems.

	Great thing is that ABSOLUTELY NO FIXES were required in atmarpc.sys to get
	this to work (I just compiled atmarpc.sys with the option to use the real
	make/close call and send pkt apis.).

04/02/1999 	JosephJ RM logging contd...
	Add another SLIST_ENTRY for threading together all log entries generated during
	a particular stack trace. The stack record would contain the list head.

	Consider putting refcounts on each log entry.

04/07/1999 	JosephJ fake api's caught case where we could be calling add if at DPC
	The fake recv makecall completed at DPC level,and this caused a bugcheck when
	we called IP's add IF routine. Fixed this by switching to passive if required,
	before calling IP's add IF routine.

04/07/1999 	JosephJ verified that this is 64-bit clean (checked and fre)

04/07/1999 	JosephJ Added arp1394 and arp13kd sources to the tcpipmerge project.
	Did this today.

04/08/1999 	JosephJ added tmp ref in RmResumeTask
	RmResumeTask now tmpref task before calling pfnHandler so that it can be
	sure pTask is around on return from pfnHandler. Actually hit this situation today
	(and bugchecked) on the mp machine during "net stop", when using the fake
	ndis apis (with delayed completions.). Had never this this before, though the
	bug has been around. Chalk up another win to the fake apis (see 04/07/199 
	entry "fake api's caught...").

04/08/1999 JosephJ Debug output of the fake ndis apis (during ttcp -t)
	Following is debug spew during ttcp -t, on a 2-proc machine with fake 
	NdisCoSendPackets in place (you can see both processors being used, as well
	as the variations of delay, dpc/passive, failure status).
		...
		1:A13: FakeCompletionTask:START: Delay=1000; fDpc=0; Status=0
		0:A13: FakeCompletionTask:START: Delay=10000; fDpc=0; Status=3221225473
		0:A13: FakeCompletionTask:START: Delay=10; fDpc=0; Status=0
		0:A13: FakeCompletionTask:START: Delay=10; fDpc=1; Status=0
		1:A13: FakeCompletionTask:START: Delay=100; fDpc=0; Status=3221225473
		0:A13: FakeCompletionTask:START: Delay=100; fDpc=1; Status=3221225473
		1:A13: FakeCompletionTask:START: Delay=100; fDpc=1; Status=3221225473
		1:A13: FakeCompletionTask:START: Delay=100; fDpc=1; Status=3221225473
		1:A13: FakeCompletionTask:START: Delay=10; fDpc=0; Status=0
		1:A13: FakeCompletionTask:START: Delay=10; fDpc=1; Status=0
		...

04/10/1999 	JosephJ defined ioctl commands
	Defined the following operations and associated structures in ioctl.h	
		ARP1394_IOCTL_OP_ADD_STATIC_ENTRY
		ARP1394_IOCTL_OP_DEL_STATIC_ENTRY
		ARP1394_IOCTL_OP_GET_PACKET_STATS
		ARP1394_IOCTL_OP_GET_TASK_STATS
		ARP1394_IOCTL_OP_GET_ARPTABLE_STATS
		ARP1394_IOCTL_OP_GET_CALL_STATS

04/19/1999  JosephJ  Various ways of using tasks
	1. Dealing with pre-existing tasks
  	1a. Check BEFORE starting new task...
		if not bound
			allocate and initialize task, then bind it.
		else do one of...
			- succeed operation immediately
			- fail operation immediately
			- pend some other task on it
			- block until existing task completes.
		PROBLEM: what to do if some other task is bound and only one task
		  can be bound at a time?
  	1b. Check AFTER starting new task...
		if not bound
   		bind
   		do other ttuff
		else do  one of...
			- complete task successfully
			- fail task
			- pend on the other task
	
	2. Dealing with async sub tasks...
		2a. single section of common code; pending complete parts may do some initial
			processing and then go to the common code section.
		2b. no common code -- each section does stuff and initiates a real or fake
			suspention to move on to the next section.
		2c. switch with fall through to lower section.

04/19/1999  JosephJ Cleaning up interface shutdown....
	ToDo:
	2. Switch to approach 2c above.


04/19/1999  JosephJ Proposed new general format for unloadobject:

	Eventually we'll move all unloads to conform to this format, and change
	RmUnloadAllObjects in group to use this mechanism....

	NDIS_STATUS
	arpUnloadIf(
		PARP1394_INTERFACE	pIF,
		PRM_TASK			pCallingTask,	// OPTIONAL
		UINT				SuspendCode,	// OPTIONAL
		PRM_STACK_RECORD	pSR
		)
	/*++
	
	Routine Description:

		Initiate the asynchronous unload of pIF. If pIF is currently being loaded
		(initialized), abort the initializeation or wait for it to complete before
		unloading it. If pIF is currently being unloaded and pCallingTask is 
		NULL, return right away, else (pCallingTask is not NULL),
		suspend pCallingTask and make it pend until the unload completes.
	
		NO locks must be held on entrance and none are held on exit.

	Arguments:

		pIF				- Interface to unload.
		pCallingTask	- Optional task to suspend if unload is completing async.
		SuspendCode		- SuspendCode for the above task.

	Return Value:

		NDIS_STATUS_SUCCESS	-- on synchronous success OR pCallingTask==NULL
		NDIS_STATUS_PENDING	-- if pCallingTask is made to pend until the operation
   							completes.

	--*/
	{
		...
	}
	
04/20/1999  JosephJ Do we have a "pPrimaryTask" for  an object.
	Consider ARP1394_INTERFACE.
	We could have 3 pointers: pLoadTask,pUnloadTask, and pReinitTask, or
	we could have a single pointer: pPrimaryTask.
	
	New\Current		Loading				Reiniting			Unloading
	
	Loading			INVALID				INVALID				INVALID
	
	Reiniting		wait				wait,then quit		quit or wait, then quit
	
	Unloading		wait				wait				wait

	From the above matrix, we see that in all cases if an incoming task sees that
	there is an existing task, it can basically wait for it to complete before
	going on to the next stage. It is simpler to do this if there is only
	one "existing task" to wait for -- the pPrimaryTask.

	Common code for the task handlers:

	case START:
		 // FALL THROUGH

	case PEND_ExistingPrimaryTaskComplete:
		LOCKOBJ(pIF, pSR);
		if (pIF->pPrimaryTask!=NULL)
		{
			PRM_TASK pPrimaryTask = pIF->pPrimaryTask;
			tmpRef(pIF->pPrimaryTask,pSR);
			UNLOCKOBJ(pIF,pSR);
			RmPendTaskOnOtherTask(
				pTask,
				PEND_ExistingPrimaryTaskComplete,
				pPrimaryTask,
				pSR
				);
			Status = NDIS_STATUS_PENDING;
			break;
		}

		//
		// There is no primary task currently -- make pTask the primary task.
		//
		arpSetPrimaryIfTask(pIF, pTask, pSR);


		.... start doing stuff ...


04/20/1999  JosephJ Dbg associations: consider adding a payload
	Maybe replace entity 2 by "payload" -- like szFormat, it's not used in
	distinguishing different associations. This is useful if you want to make
	sure that there is only one kind of a particular association, but still save
	the payload as part of the association.


04/20/1999  JosephJ Note on RM "philosophy"
	- High-level logical concepts should have real data structures associated
	  with them -- eg "reconfiguring", "initializing"  use tasks.

	- Try to keep code associated with a single logical operation together

04/21/1999  JosephJ	Life of objects contd...

	States: INITING INITED REINITING DEINITING DEINITED

	Actions:
	 Create		-- synchronous, leaves state in INITING stage.
	 Bind   	-- object is now visible
	 Initialize -- async initialization
	 Reinit		-- async re-initialization
	 Deinit		-- async de-initialization
	 			   deleted.
	 Delete		-- inverse of Create, except that object is only actually freed
				   when the refcount goes to zero..

	Sub states: ACTIVE,DEACTIVATING,ACTIVATING, DEACTIVATED
	Sub actions:
	Activate -- async activation
	Deactivate -- async deactivation

04/23/1999  JosephJ arpTaskUnloadRemoteIp <-> arpTaskSendPktsOnRemoteIp interaction
	arpTaskUnloadRemoteIp checks only on starting if there is a send-task bound
	to pRemoteIp -- it relies on the fact that once the unload task is
	bound, no NEW pSendTask will bind to pRemoteIp. The sendpkts task thus
	needs to check whether there is a pUnloadTask bound and if so not bind
	itself. This fix was added today -- I hit it during stress. There may be
	analogous bugs hiding elsewhere.

	We should consider how to make these things "automatic" -- somehow the
	unload task waits for all tasks started before unload to finish,
	and all non-unload-related tasks automatically fail if unload is in progress.

04/25/1999  JosephJ More Task Stats 
	 -- count of number of times a task's handler is called

04/30/1999 	JosephJ	Bug in the way we read adapter config.
	Basically, immediately after our call to NdisOpenAdapter completes, we may
	get a call to our  ArpCoAfRegisterNotify. The latter can't assume that
	the task that issued NdisOpenAdapter is in fact completed, and on MP machines,
	in fact it sometimes doesn't complete.

	So what to do? Currently we fix this by pending on the adapter bind task if
	it is in fact arpTaskInitializeAdapter. A bit hacky...

04/30/1999 	JosephJ	Bug in the way we handle RmResumeTask and perhaps others..
	We can't rely on the state of the task after calling the handler function,
	because the lock is released in between.

05/18/1999  JosephJ Stats gathering.

Potential apis to use:

	NdisGetCurrentSystemTime returns the current system time, suitable for setting
	timestamps. 

	KeQueryPerformanceCounter provides the finest grained running count available
	in the system. KeQueryPerformanceCounter is intended for time stamping packets
	or for computing performance and capacity measurements. It is not intended for
	measuring elapsed time, for computing stalls or waits, or for iterations.
	
	Use this routine sparingly, calling it as infrequently as possible. Depending
	on the platform, KeQueryPerformanceCounter can disable system-wide interrupts
	for a minimal interval. Consequently, calling this routine frequently or
	repeatedly, as in an iteration, defeats its purpose of returning very
	fine-grained, running time-stamp information. Calling this routine too
	frequently can degrade I/O performance for the calling driver and for the
	system as a whole.
	
	Implementation:

	pIf->stats.StatsResetTime;		// Set by a call to NdisGetCurrentSystemTime.
	
	Sends:
	Pkt.WrapperReservedEx[sizeof(PVOID)] -- used for storing 4-byte timestamp.

	Tasks:
	Add LONGLONG timestamp field for tasks; Stats actually maintained within rm.
	(Later to be moved into root object header).


		sendpkts:
			TotSends; -- LOGSTATS_TotSends
			FastSends; LOGSTATS_FastSends
			MediumSends; LOGSTATS_MediumSends
			SlowSends; LOGSTATS_SlowSends
			BackFills; LOGSTATS_BackFills
			SendFifoCounts		--  arpLogSendFifoCounts
			SendChannelCounts	--	TBD.


			// HeaderBufUses -- see below
			// HeaderBufCacheHits -- see below

		sendinfo.FifoHeaderPool.stats:
			TotBufAllocs		--  LOGBUFSTATS_TotBufAllocs
			TotCacheAllocs		--  LOGBUFSTATS_TotCacheAllocs
			TotAllocFails		--  LOGBUFSTATS_TotAllocFails

		recvpkts:
			TotRecvs			--  LOGBUFSTATS_TotRecvs
			NoCopyRecvs			--  LOGBUFSTATS_NoCopyRecvs
			CopyRecvs			--  LOGBUFSTATS_CopyRecvs
			ResourceRecvs		--  LOGBUFSTATS_ResourceRecvs
			RecvFifoCounts		--  LOGBUFSTATS_RecvFifoCounts
			RecvChannelCounts	--  TBD.

		arpcache:
			TotalQueries		--	TBD
			SuccessfulQueries	--	TBD
			FailedQueries		--	TBD
			TotalResponses		--	TBD
			TotalLookups		--  LOGSTATS_TotalArpCacheLookups(pIF, Status);
			// TraverseRatio		<-- picked up from
								 pIF->RemoteIpGroup.HashTable.Stats
								 (LOWORD(Stats)/HIWORD(Stats))


		calls:
			TotalSendFifoMakeCalls -- LOGSTATS_TotalSendFifoMakeCalls
			SuccessfulSendFifoMakeCalls -- LOGSTATS_SuccessfulSendFifoMakeCalls
			FailedSendFifoMakeCalls -- LOGSTATS_FailedSendFifoMakeCalls
			IncomingClosesOnSendFifos -- LOGSTATS_IncomingClosesOnSendFifos

			TotalChannelMakeCalls -- LOGSTATS_TotalChannelMakeCalls
			FailedChannelMakeCalls -- (TBD) LOGSTATS_SuccessfulChannelMakeCalls
			SuccessfulChannelMakeCalls -- (TBD) LOGSTATS_FailedChannelMakeCalls
			IncomingClosesOnChannels -- (TBD) LOGSTATS_IncomingClosesOnChannels

		tasks:
			TotalTasks			-- TBD
			CurrentTasks		-- TBD
			TimeCounts			-- TBD

06/03/1999 	Broadcast channel support in ARP1394.

	Arp1394 needs to make a call specifying special-channel number
	"NIC1394_BROADCAST_CHANNEL". It must not specify the 
	NIC1394_VCFLAG_ALLOCATE flag.

	The broadcast channel is a virtual channel maintained by the miniport for
	broadcast. The miniport deals with the details of the BCM and the re-allocating
	of the channel after a bus reset.

	Arp1394 tries just once, during interface activation, to make a call to
	the broadcast channel. It does not fail initialization if the call fails.
	If we get an incoming close on this channel, arp1394 does not try to
	re-make the call.

	TODO: need to add eventlog entries for serious errors
	like these.
	TODO: perhaps keep an internal log of serious errors like these, which our
	utility can dump (eventually move to WMI).

	The make-call to the channel is made by the interface-activation task
	(arpTaskActivateInterface) and closed by the interface-deactivation task
	(arpTaskDeactivateInterface).

06/03/1999 	Address resolution protocol implementation
	We start an address-resolution (AR) task for each remote-ip that needs address
	resolution. pRemoteIp->pResolutionTask points to the  official AR task.

	The AR's task is responsible for creating and linking a pDest to the remote IP.
	Note that there may be many tasks (each associated with different remote-ip
	objects) running concurrently, each of which resolve to the same pDest.

	The AR task goes through the following steps:

	- prepare and send an arp request
	  -- resume-task delayed
	[if we get a response that corresponds to this remote-IP,
	 we setup the linkage to the pDest and cancel the delayed resume-task]
	 -- if resume-task-delayed resumes normally (this is a timeout), we
	   repeat the process 3 times, then fail.

06/08/1999 	Broadcast channel implementation plan.
	1. Implement and test bc channel setup/teardown using fake makecalls.
	2. Implement and test 1st phase of arp resolution (sending out 3 requests)
		by using fake send packets on the broadcast channel.
	3. Implement the remaining phases of arp resolution -- processing received
		responses and requests.
	4. Perhaps test this by adding to ioctl utility ability to simulate received
	   packets.

06/23/1999  Dealing with different kinds of VCs.

	We need a common VC header.

	typedef struct
	{
		PCHAR							Description;
		CO_SEND_COMPLETE_HANDLER		CoSendCompleteHandler;
		CO_STATUS_HANDLER				CoStatusHandler;
		CO_RECEIVE_PACKET_HANDLER		CoReceivePacketHandler;
		CO_AF_REGISTER_NOTIFY_HANDLER	CoAfRegisterNotifyHandler;


		CL_MAKE_CALL_COMPLETE_HANDLER	ClMakeCallCompleteHandler;
		CL_CLOSE_CALL_COMPLETE_HANDLER	ClCloseCallCompleteHandler;
		CL_INCOMING_CLOSE_CALL_HANDLER	ClIncomingCloseCallHandler;
		
	} ARP_STATIC_VC_INFO;

	typedef struct
	{
		ARP_STATIC_VC_INFO pStaticInfo;
		UINT	

	} ARP_VC_HEADER;

06/24/1999 Implementing timeouts
	We have RmResumeTaskDelayed, which uses NdisSetTimer;
	We need something like RmResumeDelayedTaskNow which cancels the timer and if
	the timer has not fired, resumes the task with an appropriate status.

	Since responses to arp requests may come at random times or not at all,
	the task should not have a stage which completes when the response is received;
	or rather it should not be explicitly completing whenever a response is
	received. Instead, if a response is received, the following should happen:
		- Update the information in the destination object, setting the state to
		  be resolved.
		- If a task is running, abort it
	The task does the following (asynchronously)
		while (state != resolved &&  (number of tries not exceeded))
		{
			send arp request packet;
			wait retry-delay << this wait will be aborted if an arp response
							 << is received.
		}

	This deals with receiveing delayed or unsolicited arp responses while in the
	middle of address resolution.

06/24/1999  A note on refcounts for timeouts:
	We need to make sure that in all cases, the task is around when the timer fires.
	This needs to happen even when RmResumeDelayedTaskNow is called.

	RmResumeDelayedTask should do the following:
		if (CancelTimer succeeds)
		{
			Call resume task handler
		}
		else
		{
			do nothing.
		}

	So I don't think any explicit ref counting need be done for the tasks after all!
	
06/24/1999  Dealing with broadcast/multicast addresses which may map to either
	the broadcast channel or a mcap-allocated channel.

	One idea is to implement the broadcast channel as a destination object.
	This is a good idea, because then a lot of things will fall through.
	We do need to actually establish the call, but this can be done implicitly when
	we send our unsolicited arp response when the first add-ip arrives.
	
06/28/1999 

	To implement the above scheme, we also need to do the arp-registration work,
	and rip out the code we're written to maintain the explicit broadcast channel
	(stuff in pIF->bccinfo).

	ArpCoSendComplete -- needs to look at vctype and/or packets to decide what
	to do for the broadcast channel case.

	
07/01/1999 JosephJ	Broadcast/Multicast "address resolution"
	To maximize shared code, we treat broadcast and multicast sends similarly
	to unicast sends, except that we automatically resolve them to the broadcast
	channel in stead of sending out an ARP request for them.

	So the first time we are asked to send to non-unicast address A, we go down
	the slow send path, create a remote-IP object for it, link it to the broadcast
	channel destination destination object, and go from there.

	We DO need to know if this is a non-unicast address, but we only check this
	if there is NO linkage to a destination object -- which will happen only on
	the FIRST packet sent to that particular ip address. Subsequent packets will
	go through the medium send path (look up remoteIP, send on the VC associated
	with the destination object).

	The test for whether an address is non-unicast is not trivial, and is borrowed
	from the atmarpc code -- basically it needs to check for classD,
	all-1's, subnet-broadcast (based on the subnet-masks of all the local
	IP adresses registered), and network broadcast (based on the break up of address
	space into classes.)


	Following is an example of the list of local IP addresses registered 
	0: kd> dd 0x80872628+0x4c l3
	80872674  00000002 ffffffff 00000000	<<< all 1's
	0: kd> dd 0x80856828+0x4c l3			
	80856874  00000000 bbfdfea9 0000ffff	<<< local IP, subnet mask 0xffff
	0: kd> dd 0x80857128+0x4c l3
	80857174  00000001 010000e0 00000000	<<< class D address 224.0.0.1

	NOTE: According to Amritansh, the stack could also be run in "BSD mode", where
	all-ZEROs represents the broadcast address -- even in the host-id portion
	for directed broadcasts. This is why the broadcast address is passed in
	as a  "Add local address."

07/02/1999  Support for enumerating all objects in a group.
	Currently this is required in 4 places:
		1. ioctl.c -- looking for a specific interface
		2. ioctl.c -- looking for a unicast local-ip object
		3. ioctl.c -- reporting the arp table.
		4. ip.c    -- reporting the arp table.
		5. ip.c	   -- determining if an ip address is non-unicast.

	It would be good for the rm api's to support enumeration through all items
	in a group.

	PVOID
	RmEnumerateObjectsInGroup(
		pGroup,
		pfnFunction,
		pvContext,
		pSR
		);

	Enumeration continues until the enumerator function returns false.
	typedef
 	INT
	(*PFN_RM_GROUP_ENUMERATOR) (
			PRM_OBJECT_HEADER	pHdr,
			PVOID			  	pvContext,
			PRM_STACK_RECORD	pSR
			);

07/07/1999  JosephJ
	DONE:
		1. Define the common vc header structure, including the specialized
			co handlers, and incorporate that into the existing code.
		2. Modify activate interface task to create the BCDO (broadcast channel
   		destination object) and make a call to it. Add a link between the BCDO and
   		the interface object.
		3. Modify the deactivate task to remove the above link.
		4. Add code to existing resolution task to hardcode the mapping from broadcast
   		and multicast addreses to the BCDO.
		5. Write handlers for send complete & receive to/from the BCDO channel.
		10. Write ARP packet management code (pkt queues).
		9. TEST with REAL make calls and send packets.
			- as above
			- verify that the bcast packets are received.
		13. Implement CancelResumeTaskDelayed.
		11. Write arp address resolution task -- originating side.
		12.  Write arp request handling code.
		14. Write SendArpPktOnBCDO function.
	TODO:
		-------
		6. Code review the major paths
		-------
		7. TEST with FAKE make calls & FAKE send packets.
			- verify that bc channel is created and bcast packets are sent on the BC 
  			channel.
			- verify that the BC channel is cleaned up on net stop arp1394.
		8. TEST with REAL make calls and FAKE send packets.
			- as above.
		-------
		-------
		15. Code review the major paths.
		-------
		16. TEST with FAKE make calls & FAKE send packets.
			- verify that bc channel is created and bcast packets are sent on the BC 
  			channel.
			- verify that the BC channel is cleaned up on net stop arp1394.
			- verify that arp requests are being composed and sent.
		17. TEST with REAL make calls and FAKE send packets.
			- as above.
		18. TEST with REAL make calls and send packets.
			- plus verify that the bcast and arp-request packets are received.
			- verify that arp responses are being generated and received.
			- get ping to work without pre-populating the arp table.
	
07/09/1999  ResumeDelayedTaskNow semantics and problems.
	Is it possible for someone to call ResumeDelayedTaskNow and have it resume

07/13/1999  Lookaside lists for protocol data.
	We could use lookaside lists (NdisAllocateFromNPagedLookasideList) for protocol
	packet data, but we choose to use
	NdisAllocateMemoryWithTag, because we don't expect to be using a lot of these
	packets.

07/13/1999  General thoughts on fault insertion.
	Either the implementation of APIs themselves should have a mechanism for fault
	insertion, or there should be a machanism to add a shim that inserts faults.
	Either way, it would catch many many bugs that would otherwise go undetected.

07/13/1999  protocol context for ARP pkts:
	We use the PCCommon structure defined in ip.h even for ARP packets. This
	is also done in the ATM arp module (atmarpc.sys). sizeof(struct PCCommon)

	The only field we actually USE however, is PCCommon.pc_owner, to distinguish
	it from IP pkts on send completion.

07/14/1999 Making sure we properly abort the resolution task.
	pResolutionTask needs to have to variables:
		fAbort
		fTimerInitialized

	if (fTimerInitialized, it's ok to called cancel timer)
	if (fAbort, then the task won't do a resume).

	Never mind. This is best handled WITHIN the RM API's, by appropriate use
	of internal.
	The semantics of ResumeDelayedTaskNow are as follows:
	 It will cause the abort of the task if it's currently delay-suspended OR. If it
	 is NOT suspended, it will cause an immediate abort the NEXT time it is
	 suspended. After the abort, the state is cleared so it will not cause the abort
	 of a subsequent suspension.
	States/Flags
		- DELAYED
		- ABORT_DELAY

ResumeDelayedTaskNow:
	lock
	if (delayed)
	{
		clear abort-delay
		clear delayed
		if (CancelTimer)
		{
			unlock
			call completion ourselves.
		}
		else
		{
			unlock
		}
	}
	else
	{
		State |= abort-delay
		unlock
	}

ResumeDelayedTaskNow (VERSION 2)
	lock
	if (delayed)
	{
		if (CancelTimer)
		{
			unlock
			call timeout handler ourselves.
		}
		else
		{
			unlock
		}
	}
	else
	{
		State |= abort-delay
		unlock
	}

ResumeTaskDelayed:
	lock
	assert(state!=delayed)
	if (abort-delay)
	{
		clear abort-delay
		unlock
		call completion ourselves.
	}
	else
	{
		init-timer
		State |= delayed
		unlock
		set-timer
		lock
		if (abort-delay && delayed)
		{
			clear abort-delay
			clear delayed
			if (CancelTimer)
			{
				unlock
				call completion ourselves
			}
			else
			{
				unlock
			}
		}
		else
		{
			unlock
		}
	}

ResumeTaskDelayed: (VERSION 2)
	lock
	assert(state!=delayed)
	init-timer
	State |= delayed

	if (abort-delay)
	{
		unlock
		call timer handler ourselves.
	}
	else
	{
		set-timer << important to do this BEFORE unlocking!
		unlock
	}

TimerHandler:
	lock
	assert(delayed)
	clear abort-delay
	clear delayed
	unlock
	Actually resume task.


	//  Task delay state
	//
	RM_SET_STATE(pObj, RMTSKDELSTATE_MASK, RMTSKDELSTATE_DELAYED)

	//  Task abort state
	//
	RM_SET_STATE(pObj, RMTSKABORTSTATE_MASK, RMTSKABORTSTATE_ABORT_DELAY)

bp arp1394!DbgMark "dd esp+4 l1"

007a0585
2c48c626
2f3b96f3
30b6f7e2
3be1b902
6f31a739
c627713c
daab68c3
e4950c47
e9f37ba9
f87d7fff

arpCompleteSentPkt -- needs to deal with arp-generated pkts.

07/15/1999  Building for win98
nd.c(140) : error C1189: #error :  "Un
co.c(1796) : error C1189: #error :  "Check if ARP1394_IP_PHYSADDR_LEN value is ok..."

bp arp1394!arpProcessReceivedPacket
bp arp1394!arpProcessArpPkt
bp arp1394!arpProcessReceivedPacket+294 "r ecx"
bp arp1394!arpParseArpPkt
bp arp1394!arpProcessArpRequest
bp arp1394!arpProcessArpResponse


07/16/1999  Win98 Build plan.
Handle the unicode/ansi transition.
Test.
Stuff which needs to change:

co.c arpCallAddInterface 

(atm:
 adapter.c AtmArpBindAdapterHandler saves away unicode version of config string
  (SystemSpecific1) in pAdapter->ConfigString.
 (arpcfg.c) AtmArpCfgReadAdapterConfiguration -- uses pAdapter->ConfigString
 	to open and read the adapter's configuration;
	AtmArpCfgReadAdapterConfiguration is called in only one place -- 
		AtmArpCoAfRegisterNotifyHandler.
  

 utils.c AtmArpAddInterfaceToAdapter
	W2K: pInterface->IPConfigString = *pIPConfigString
	W98: converted to ANSI first, but NOT saved in pInterface->IPConfigString.

	Further down, specifies the converted string in the call to IP's
    pIPAddInterfaceRtn.

	Need to see what we dow with pInterface->IPConfigString in W2K.
		arpif.c AtmArpReStartInterface -- uses it to call
		AtmArpCfgOpenLISConfigurationByName and AtmArpAddInterfaceToAdapter



Another IPConfigString:
    pAdapter->IPConfigString -- used to find interface
	 (in AtmArpPnPReconfigHandler, a config-string is passed in).
	 Gets it's value from the registry (arpcfg.c, AtmArpCfgReadAdapterConfiguration).
	 This is not W98 specific.

	AtmArpCfgOpenLISConfiguration uses it to get the configuration name before
	opening the registry.

In summary there are THREE strings:
	pAdapter->ConfigString   <- passed in adapter bind handler SS1 (W98 only:
									converted from ANSI to unicode).
							<- used in reg af-handler to read registry.
	(pAdapter->bind.ConfigName)

	pAdapter->IPConfigString <- read from registry as unicode
							<- used to create an IF (or multiple for ipatmc).
	(pAdapter->bind.IpConfigString)

	pInterface->IPConfigString <- constructed from pAdapter->IPConfigString.
								 (W98: converted to ANSI before calling IP's
								 add-IF rtn.)
	(pIF->ip.ConfigString)


07/22/1999  JosephJ Ryan Schoff got atmarpc.sys (aka arp1394.sys) loaded under win98.
	We hit a breakpoint in NDIS.SYS complaining about the NULL SendCompleteHandler.
	I had set some handlers to NULL because they would never be used, and W2K NDIS
	is happy with that but NDIS is not.

07/26/1999  JosephJ A-DavHar hit a bug in arp1394 during stress where we had
   launched the recv-fifo cleanup task while a make-call task was ongoing. Fixed
   the recv-fifo task to wait for the makecall task to complete before doing its 
   thing. TODO: Need to do this for the other kinds of VCs as well (
   broadcast and send-fifo VCs).

08/03/1999  JosephJ	We hit the following assert:
	A13: rmVerifyObjectState:FATAL: Object 0xFF8D4828 modified without lock held!
	A13: rmVerifyObjectState:To skip this assert, type "ed 0xFF8D1B74 1; g"
	A13: !ASSERT( !"Object was modified without lock held!" ) C:0xFF8D4828 L:4830, rm.c

	This is because pRemoteIp's state was modified without RmLockObject(pRemoteIp)
	being called on it (it's safe because we had pIF's lock at that time, and pRemoteIp
	shares the lock with pIF). The bug is that we're not calling 
	RmDbgChangeLockScope before/after change pRemoteIp's state.

	Hit this again -- this time -- same cause. Temporarily disabled assert. TODO: need
	to cleanup the code by adding changelockscope.


08/19/1999  JosephJ 
	Added code in n134cfg.c to initialize and dump the config rom unit directory
	for 1394 net devices. Used code from wdk\1394\bus\buspnp.c


08/23/1999  JosephJ Got arp1394.sys to load in Windows Millennium, build 23459...
	This is with modified mstcp.dll and nettrans.inf that recognize the new
	nic upper binding "ndis1394".
	But arp1394.sys is s failing initialization because 
	arpCfgReadAdapterConfiguration is failing, which we would expect to ALWAYS
	fail (even on w2k) because it's looking for subkey ATMARPC, which doesn't exist.
	Perhaps it's because  arpCfgReadAdapterConfiguration calls
	NdisOpenConfigurationKeyByName which on w2k returns success
	 (but sets *pInterfaceConfigHandle to NULL) if the key doesn't exist.
	It so happens that arpGetInterfaceConfiguration, which calls
	arpCfgReadAdapterConfiguration, *can* deal with this somewhat indirect
	failure mechanism without returning failure, but if
	arpCfgReadAdapterConfiguration *were* to return failure, it returns failure.

	I'm going to change arpGetInterfaceConfiguration so that it ignores
	arpCfgReadAdapterConfiguration returning failure.


08/24/1999  JosephJ Arp1394.sys now loads and works (ping works) on Millennium.

09/16/1999 JosephJ Alternative to  RmDbgChangeLockScope
	See  "08/03/1999  JosephJ	We hit the following assert:" entry.
	Instead of RmDbgChangeLockScope, we should add "RmDbgFakeLockObject"
	and "RmDbgFakeUnlockObject" -- these functions just run the verification
	code but do not actually lock/unlock the object. They *do* verify that the
	object is indeed locked.

09/17/1999  JosephJ  Win98/Millennium Netconfig: IPConfig value under ndi\interface.
	This is Win98/Millennium  specific.
	pIF->ip.ConfigString is an ANSI value. It is created by reading the "IPConfig"
	value under the interface's key. With proposed changes to elminiate having to
	change mstcp.dll, "IPConfig" will no longer be created. It so happens that
	the value of IPConfig is the same as the interface key (which is passed into
	System).

09/17/1999   JosephJ [Version 2] Support for retail debugging or RM objects
	[ See 03/22/1999 note with the same title]

	For now, we're going to add 4 ptrs to EVERY object. We can back off from
	this strategy later. This is PURELY for retail-mode debugging purposes.
	- Support the following RM dbgextension:
		!rm scantree <obj addr>	<pattern>
			-- scans the obj at addr <obj addr> and all its children for 
				pattern <pattern>
		!rm tree <obj addr>
			-- lists the entire tree of objects, starting at oject <obj addr>
Mon 09/27/1999  JosephJ !tree implemented

	Real output:

	Object Tree for  0xFD015340(ArpGlobals) with parent 0x00000000(<root>):
	FD015340(ArpGlobals)
	|---FE404608(Adapter)
	|---|---FE3F99C8(INTERFACE)
	|---|---|---FE33AF68(RemoteIp)
	|---|---|---FE3C9948(LocalIp)
	|---|---|---FE3CD648(LocalIp)
	|---|---|---FE3CD7E8(LocalIp)
	|---|---|---FE3F70C8(Destination)

Tue 09/28/1999  JosephJ Millennium llipif.h
	We keep a win9x copy of llipif.h checked under w98\llipif.h.
	I did a windiff against the llipif.h in \\muroc\slm
	(\\muroc\slmro2\proj\net\vxd\src\tcpip\h\llipif.h)
	I found that the muroc version had one field extra in the LLIPBindInfo struct:
	---------- TDI\TCPIPMERGE\1394\ARP1394\W98\llipif.h next ----------
	294a295
	>    uint      lip_pnpcap;         //initial pnp capability flags.
	This is a set of flags used to determine Wakeuponlan capability.
	
Wed 09/29/1999  JosephJ Millennium tdiinfo.h
	MAX_TDI_ENTITIES 32(mill) 4096(w2k)
	INVALID_ENTITY_INSTANCE -1 (w2k) (not defined in mill). We don't use it either.
	

	ArpIpGetEList appears to be the same as the Win9x version.

	Fixed the problem
	Basically the bug is that we were not checking entity value and type
	for Win98 -- I copied that behavior from atmarpc, but it was in fact
	not compiled in in atmarpc, because DBG_QRY WAS defined for win98 (see
	arpif.c  AtmArpIfQueryInfo).

	BUGBG: need to look at the return value of AtmArpCopyToNdisBuffer -- the
	code the checks this was added RECENTLY to atmarpc.sys -- after I created
	the sources for arp1394. Apparantly we could hit this in low mem situations.

Mon 10/18/1999  JosephJ Bringing down the IF when the media is "disconnected"
	From: 	Amritansh Raghav (Exchange)  
	yes (line down comes to me at dpc, so i delete off a worker thread)
 	-----Original Message-----
 	From: 	Joseph Joy (Exchange)  
 	So you trigger add/del based on NDIS_STATUS_WAN_LINE_UP/DOWN?
  	-----Original Message-----
  	From: 	Amritansh Raghav (Exchange)  
  	actually i do use IPAddInterface an IPDelInterface to do this
  	remember that this can only be done at PASSIVE so NdisStatus may not be the
	place to do it (of course i got this to work by asking jameel to provide a hack
	whereby he doesnt  raise the irql for the lineup status indication)
   	-----Original Message-----
   	From: 	Joseph Joy (Exchange)  
   	Hi Amritansh,
   	I'd like to dynamically make the IP interface associated with a 1394 adapter
	appear and disappear based on whether there are any other ip/1394 capable
	devices attached.
   	The local ndis1394 miniport itself stays enabled regardless of whether there
	are remote nodes or not. So I'd like to trigger the appearance/disappearance
	based on some status indication.
   	I'd like ipconfig to not list the interface at all (not just list it as
	"disconnected") if there are no remote nodes active.
   	Looks like you have a solution for wan devices -- the interface is only
	listed via ipconfig if there is an active wan connection. How is this done?
	Arvind tells me that wanarp doesn't call IPDelInterface.
	
	We've decided to trigger off "disconnected" status.
	On register notify: check if status is disconnected.
	If disconnected: don't init interface, else: init interface.

	On connect notification: if IF is going away -- queue task to re-
	start based on registry config (unless adapter going away).

	On disconnect notification: start delayed task to get rid of adapter.

Mon 10/18/1999 Registering local arp addresses.
	Ethernet arp has the following logic
		ARPAddAddr:
			for local, unicast addresses it
				subits an arp request
			 returns IP_PENDING

	NOTE: When sending an arp request, we need to be careful about which
		Src ip address we use -- using the one for the correct subnet!
		see ip\arp.c (SendARPRequest).

	CONFLICT:
		If it's a response confict and we're still registering the local address,
		we fail the local address by calling 
                SendARPRequest(Interface, *SPAddr, ARP_RESOLVING_GLOBAL,)
    IPAddAddrComplete(Address, SAC,   IP_DUPLICATE_ADDRESS);
    (where SAC == Context2 passed to our AddAddress routine).

Wed 11/03/1999  JosephJ	RM: factoring out common functionality for load/unload
	Rewriting adapter's arpTaskInitialize/ShutdownAdapter to be similar to
	the interface's in the sense that there is a primary and secondary task, 
	and the primary task is the one responsible for (a) waiting for other
	primary tasks to complete and (b) running the "compensating" transaction if the 
	the actual activate-adapter task fails. Also the task is written to minimize
	the adapter-specific code -- with the view towards of eventually having
	a generic RM-supplied task handler to do this for any object.
	arpTaskInitialize/ShutdownAdapter are also written to emulate the flattening
	of message types -- they handle start, pend-completes and end in a single
	case statement which supports fallthrough.
	TODO: consider adding pPrimaryTask and pSecondaryTask to the object header,
	and adding Init/Shutdown (aka load/unload) and activate/deactivate handlers
	to the object's static info. This will be required to move to 
	common load/unload handling.
	ALSO: look at arp[Set|Clear][Primary|Secondary]IfTask in util.c -- these
	could be generalized.

Wed 11/03/1999  JosephJ	RM: Generalizing load/unload to arbitrary tasks
	The general idea of (a) and (b) can be applied to other (user defined)
	operations on the object, not just init/shutdown. Think about how RM can
	provide standard "caretaker" tasks which will do (a) and (b) -- letting
	the user-defined tasks focus on pure functionality, not queuing and cleanup
	on failure -- the latter is a bit analogous to exception handling in the
	synchronous world.


Wed 11/03/1999  JosephJ	RM: More thoughts on state validation
	Add the concept of a state validation function which gets called to validate
	state transitions -- at the point the object is unlocked. The function is
	given the old and new states (the rm object dword state variable).

Wed 11/03/1999  JosephJ RM: Validate parent type
	Allow an object's static info to specify the allowed parent type -- this is
	important because much code assumes that a parent is of a particular type.
E:\nt\public\tools	
signcode -v %_NTBINDIR%\public\tools\driver.pvk -spc %_NTBINDIR%\public\tools\driver.spc -n "Microsoft Windows 2000 Test Signature" -i "http://ntbld"  -t http://timestamp.verisign.com/scripts/timstamp.dll filetosign

chktrust win2k filename
--Scott

Fri 11/05/1999  JosephJ Why ICS wasn't binding to nic1394.h
	Needed to add ndis1394 to the lower binding in setup\inf\usa\icsharep.inx

Fri 11/05/1999  JosephJ Debugging the "autonet address" problem.

	The problem: We weren't getting an autonet address, and DHCP wasn't working.

	From Scott Holden:
		set a bp on RequestDHCPAddr (This is in VIP)

		If it hits this breakpoint, then we are going to DHCP.
		If it goes to DHCP, see if it hits VIP_Set_Addr or VIP_Set_Addr_Ex.

	I set and found out that it was being called, but eventually it was failing
	because arp1394 was failing a QueryInfo because it was not in the IF_PS_INITED
	state (because the interface's init task was still running). Setting
	the check in QueryInfo to take EITHER PS_INITED or AS_ACTIVATING made it
	work.

Fri 11/05/1999  JosephJ Re-wrote adapter init/shutdown code
	It's now a two-level scheme similar to what the interface uses --
	init/shutdown and activate/deactivate.

Thu 11/11/1999  JosephJ Deferred interface init until adapter is "connected"
	Modified  arpTaskInitInterface (co.c) so that it will check if the
	adapter is connected before proceeding to make the call to the broadcast
	VC and (and subsequently adding the IF). It currently simply waits for 5
	seconds before each attempt to check the connect state (it doesn't hook
	into the connect notification -- we should do that). It also needs to
	switch to passive before calling NdisRequest (which is actually a macro
	which ends up calling NdisCoRequest in the context of a work item) -- because
	we Block until the request completes asnc. So it's a lot of overhead just
	to get the connect status which would be eliminated if we hooked into
	the connect status notification. On the plus side: the modifications to 
    enable this  delay-until-connect functionalty is very localized -- score one
    for the RM Tasks!

Thu 11/11/1999  JosephJ RM: Finer granularity of tmpref end lock cheking
	We should add support for checking that there are no outstanding
	tmprefs and locks for *sub* trees of the call tree -- by allocating
	stack variables that save the value of the lock and tmpref on entry.

Thu 11/11/1999  JosephJ RM: More flexible display of object logs
	It would be nice to be able to display the integrated logs for an
	object and it's sub-object (optionally upto a certain level).
	We need to efficiently scan the global log looking for all entries
	which meet this criterion. How do we do this?

    One way is to build up
	a hierarchical naming scheme for objects -- so we just do a prefix match
	to decide if the object is a descendent of the particular top-level object
	whose logs we are displaying.

	All log entries will need to have the fully-qualified name of the object that
	created the log.

	A simpler scheme is simply to walk the parent list and display it if one of
	the ancestors is the top-level object -- probably this will suffice for now.

	TODO: we do need a way to keep logs available for objects that have gone away
	-- how to do this? And what are the implications for the above hierarchical
	display scheme?

Sat 11/13/1999  JosephJ Propery fill out arp sspd and maxrec
	I was using constant values. Now I pick them up from the adapter info.


11/16/1999  JosephJ MCAP Details
	Receive side:
	* Single multi-channel VC
	* 64-byte TTL array for each channel.
	* Incoming MCAP advertisement:
		- go through recv mcast addresses -- If we're intersted in it,
		  add entry to channel.
	* New MCAST group to receive:
		- send out MCAP request 3 times and/or until resolved.
	* Timer:
		- Check TTL -- delete channel if required.

	array[] of (TTL, NodeID) Unknown NodeID == FF (after bus reset).
	64-bit bitmap of channels currently used

	pMultiRecvDest
		- Vc
		- Array of (TTL, NodeID)
		- Bitmap
		- pChangeChannelsTask

To Do:
	1. Mcap pkt parsing and generation code.
	2. Task to create multi-channel recv VC.	
	3. Fake multi-channel VC handler.
	4. Add recv mcast-address: Task to send out MCAP requests
	5. Timer code: check TTL for mcast; check arp table -- timer stops
	   if no activity.
	6. Make ipfwadm generate fake MCAP recv packets.
	http://www.ietf.org/internet-drafts/draft-ietf-ip1394-ipv4-19.txt

11/18/1999  JosephJ Target_ip_address in arp response
 From Sony's Kaz Honda November 18, 1999:
	> So in ARP responses, the target_IP_address should be ignored. Regardless, we
	> fill it with the target_IP_address
	> of the ARP request (not the destination IP address). I don't think we're
	> doing anything wrong here.
	
	Hmm... Year, you're right. You're doing anything wrong literally.
	But for the driver like ours which emulates Ethernet, 1394ARP is
	transformed into EtherARP and the driver must fill target_IP_address
	in EtherARP. So filling target_IP_address with the destination IP
	address is more helpful.

 So I now specify dest ip addr in the target_IP_address for arp responses.

11/18/1999  JosephJ Ethernet emulation for ICS on Win98
 1. Create Ethernet VC on init IF.
 		-- send/recv handlers
 		-- 
 2. Add support for in fake calls.

VOID
   NdisCopyFromPacketToPacket(
       IN PNDIS_PACKET Destination,
       IN UINT DestinationOffset,
       IN UINT BytesToCopy,
       IN PNDIS_PACKET Source,
       IN UINT SourceOffset,
       OUT PUINT BytesCopied
       );

bp arp1394!arpIcsForwardPacket
bp nic1394!NicMpSendPackets
bp arp1394!arpndreceivepacket
bp arp1394!arpndsendcomplete
bp arp1394!arpIcsTranslatePkt
pTask=0x812f16e8; &OpType=0x812f17bc(0) &Delay=0x812f17b8

01/28/2000  JosephJ MCAP revisited
	For now, we'll implement both send & receive side, and use regular channels,
	instead of multi-channel receive because of the complications of implementing
	multichannel receive in NIC.

	typedef struct
	{
		// Channel number.
		//
		UINT			Channel;

		// IP multicast group address bound to this channel.
		//
		IP_ADDRESS		IpAddress;

		// Absolute time at which this mapping will expire.
		//
		LARGE_INTEGER	ExpieryTime;

		// TBD
		//
		UINT			Flags;

		// NodeID of owner of this channel.
		//
		UINT			NodeId;

	} MCAP_CHANNEL_INFO;

	MCAP_CHANNEL_INFO McapInfoArray[NUM_CHANNELS];

	arpUpdateMcapInfo(pIF, pMcapPkt);


---------------------------------------
Receive side:
Every 10 seconds, we do the following:
Check our list of local multicst addresses -- if any of them are in our mcap
database, initiate calls to them.
If they are pointing to obsolete channels., we teardown calls from them.

This process only goes on as long as there are (a) local mcast ip addresses
and (b) received advertise msgs.


Send side:
Check channel db -- if address is assigned a channel, make call to it.


We're going to create CHANNEL "Destinations" for both send & receive.
We'll thus be getting packets on channels even if we aren't 
interested in them. That's ok for now; Later we'll add the ioctl support
for starting/stopping sends/receives.

So...

Destinations can be created if we're interested in either sending or receiving.

Periodic Task:
It's period varies depending on activity.
Can be woken up even if it's sleeping for a long time.

It does the following:

	1. Checks for ageing of pRemoteIPs
	2. Checks channel map and pDests, making sure that pDests are shut down if
	   uninteresting.
	3. Creates new pDests




ARP WORK ITEMS
1. Age out entries
2. Detect conflicts in local IP addresses.
3. Display only unicast addresses in ipconfig.
4. Don't queue packets to be sent out waiting for arp resolution -- only keep one
   packet.
5. Request an other FIFO address if ther one we asked for is already taken
   (or ask nic1394 to allocate one for us).
6. Remove "FATAL object locked w/o ..."
7. Hook CONNECT/DISCONNECT notifications, and bring down stack (add some
   damping).

DEBUGGING SUPPORT
1. Collect address-resolution time statistics.
2. OID to get and report NIC-specific stats via IPFWADM.EXE
x3. Option to make copies of packets on send and receive.
4. Simple memory alloc wrappers.
5. Get a13kd to work!
x6. Keep track of reentrancy
x7. MILL: make sure we call back to tcpip at passive.

IPFWADM modifications
Display address properly



ARP_COPY_RECV_PKTS
ARP_COPY_SEND_PKTS
ARP_COPY_PKTS


02/05/2000 Fixed bug dealing with failure of const buffer allocation.
	If arpSendIpPkt can't allocate a const buffer, we call arpCompleteSentPkt
	with  special return value NDIS_STATUS_NOT_RESETTABLE so that it knows
	not to try to remove the const buffer. Of course, we'd break if the
	miniport sompletes a send with this status. We have an assert to catch that.

1. Change dest to include other params, change compare, "virtual channel"
2. Re-write IntF/DeintIF to use msg normallzation
3. Incorporate creation/deletion of maintenance task
4. Maintainance task:
	go through LIP list
	for each LIP
		go through channel list
			if you find  matching address
				find recv channel
					if found link?

	go through RIP list
	for each RIP send VC
		if !marked dirty
			mark dirty
			if linked to channel pdest
			check if channel is still mapped to group
			if not, unlink.
			if required initiate link to new pdest (possibly channel)
		else
			//expired
			unlink from pdest and get rid of it

	
	

	
	 

02/10/2000  RM API thoughts -- reducing stack depth
	
	See earlier references to  this problem:
		03/13/1999 	JosephJ New RM APIs RmResumeTaskAsync and RmResumeTaskDelayed
		03/25/1999 	JosephJ IPDelInterface should be called at PASSIVE!

	We can keep a list of tasks that need to be resumed in the stack record,
	and resume those tasks in the context of the first rm api call.

	Pseudo code:

	RmResumeTask:
	{

		SET_RESUME_PARAM(pTask, Status);
		QUEUE_RESUME_TASK(pTask, pSR);

		if (MUST_QUEUE_RESUMETASK(pSR))
		{
			return;						// RETURN
		}

		SET_MUST_QUEUE_RESUMETASK(pSR);

		while (resume-task queue not empty)
		{
			extract head of queue

			//
			// Code from current version of RmResumeTask goes here...
			// NOTE: the queue could get added to while processing this.
			//
		}
	}

02/11/2000  JosephJ When calling Mill IPAddInterface, it expects
			the pConfigString unicode strings passed to it to be
			null terminated. We were hit by this because apparently we just
			happened to be null terminated until Mill build 2467.

02/13/2000  JosephJ
	ipfwadm additions
	-send -ref <name>
	-receive -ref <name>
	-businfo

ipfwadm.ini
[Packets]
arp1 = 

[Names]
<GUID> = "friendly name"

BUSINFO
				0		  1         2         3         4         5         6
			    0123456789012345678901234567890123456789012345678901234567890123
   Channelmap = 0000000000000000000000000000000000000000000000000000000000000000
   Generation = 0x1209 BusReset: 546 seconds ago

   GUID              NodeID MaxRec MaxSpeed MaxSpeedTo Handle   State
  *1234900900098990  01	    0998   00999    00098      98909890 ACTIVE
   IP1394-4          01	    0998   00999    00098      98909890 ACTIVE



bp arpTaskIfMaintenance
bp arp1394!arpTaskIfMaintenance
bp arp1394!arpStartIfMaintenanceTask
bp arp1394!arpTryStopIfMaintenanceTask
bp arp1394!arpMaintainOneRemoteIp
bp arp1394!arpMaintainOneLocalIp
bp arp1394!arpDoMcapDbMaintenance
bp arp1394!arpUpdateLocalIpDest
bp arp1394!arpUpdateRemoteIpDest
bp arp1394!arpDeinitRemoteIp
bp arp1394!arpDeinitDestination

bp arp1394!arpIoctlRecvPacket
bp arp1394!arpIoctlSendPacket
bp arp1394!arpIoctlGetBusInfo
bp arp1394!arpProcessMcapPkt


02/16/2000  JosephJ RM APIs observation
	Don't write code after "SuspendTask/PendTask" -- it may not get executed
	until after the task has been resumed -- this is counter intuitive.
	For example:
		we were setting pIF->pBroadcastDest to a pDest which was returned
		after calling RmPendTaskOnOtherTask -- well the code to
		set pIF->pBroadcastDest was not actually executed until the task
		was complete -- the task completed in the context of the call
		to RmPendTaskOnOtherTask itself! One more reason to implement
		the resume-task-at-top-level semantings. (see 02/10/2000  entry).

03/28/2000  JosephJ Outstanding RM work items.
    03/07/1999  JosephJ		Registering root objects with RM
    03/09/1999  JosephJ Consider making init functions fail etc if associated object is
03/09/1999 	Special allocator for unload-related tasks


08/15/00 - Route Cache Entries.
		When the arp module is passed a Route Cache Entry, then it should
		validate its contents because the contents could point to
		another destination.

11/15/00 - Only applicable to bridge mode - 
	The bridge sends STA packets to detect loops. These packets have a 
	unique EtherType. Arp1394 now acccepts this EtherType and propogates it 
	over the wire as part of the Link Layer (IP1394 Encapsulation) header. 

	The receiving arp1394 recognises the STA EtherType and 
	constructs a new Ethernet Header for the Packet as it  is being translated
	into Ethernet.

	In bridge mode - The Remote Ip structure has an Ethernet Destination. This 
	causes problems when the pRemoteIp is used to construct an Arp Packet. 
	Therefore the actual Ip Address should be stored in pRemoteIp->IpAddress, 
	however all RemoteIp Lookups are done on the basis of the pRemoteIp->Key

12/14/00 - A deadlock was uncovered in RmLookupObjectInGroup. To fix it, the function
        can no longer guarantee the caller that the object will be created
        and locked in the same operation.  The Group lock will not be held
        in conjunction with the Object Lock.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\1394\nic\sys\notes.txt ===
10/13/99
    First ntc checkin.  

            Outstanding nic issues - Media connect/ disconnect
    
            Removing timers from the recv code

10/26/99

	Added packet logging code. This can be activated by the PKT_LOG define

	Added Spin Lock debugging. This is currently used by reassembly structures only.


11/10/99

  For the reassembly structs-  garbage collection is performed in the following 
  manner. Whenever a reassembly is invalidated, it marks the reassembly 
  structure as dirty/ Every n seconds, the garbage collector comes around and 
  looks for reassmbly structs that need to aborted/freed. It pops them from the 
  remote node list and frees them.

  The only exception is in the remove remote node code path, Where  the 
  reassemblies are popped out of the list and freed




11/15/99 
   The bus driver does retry to send packets that have not been acknowledged.
   This causes fragments to arrive out of order

	An out of order packet can be inserted into the beginning ,end or middle of 
	an existing chain. FragTable in the REassembly structure is used to find
	the correct position

	


  To add wmi":
    add mof to sources -done
    check on makefile.inc and .rc file   - done
    define custom Oids - done 
    Add Oids To Supported Oids - done

	define a structure like this :





11/30/99

Adding Ethernet support :

Requests come down MpCoRequest, ICS calls on CLess Send handlers


Multichannel - Use ChannelVCs for now and allocate resources when the Oid 
comes down 

11/30/00 
In the bridge code path, it is possible for us to Load the ARP1394 Driver 
in the middle of a request. As part of its initialization, the arp module will
send requests down which do not get to us because NDIS has blocked all requests 
by setting the fMiniport_ProcessingRequest
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\1394\tools\ipfwadm\ipfwadm.ini ===
[Version]
Signature="$CHICAGO$"
;Class=Modem
;ClassGUID={4D36E96D-E325-11CE-BFC1-08002BE10318}
;Provider=%Mfg%
;DriverVer=10/29/1999,5.00.2167.1


[packets]
ma1 = 00,00,88,61,00,14,00,00,10,01,00,00,3c,01,02,00,00,00,00,00,e1,00,00,01
ma1x = 00,00,88,61,00,14,00,00,10,01,00,00,0,01,02,00,00,00,00,00,e1,00,00,01
ma12 =  00,00,88,61,00,24,00,00,10,01,00,00,3c,01,02,00,00,00,00,00,e1,00,00,01,10,01,00,00,3c,02,02,00,00,00,00,00,e1,00,00,02
ma123 = 00,00,88,61,00,34,00,00,10,01,00,00,3c,01,02,00,00,00,00,00,e1,00,00,01,10,01,00,00,3c,02,02,00,00,00,00,00,e1,00,00,02,10,01,00,00,3c,03,02,00,00,00,00,00,e1,00,00,03
ma1234 = 00,00,88,61,00,44,00,00,10,01,00,00,3c,01,02,00,00,00,00,00,e1,00,00,01,10,01,00,00,3c,02,02,00,00,00,00,00,e1,00,00,02,10,01,00,00,3c,03,02,00,00,00,00,00,e1,00,00,03,10,01,00,00,3c,04,02,00,00,00,00,00,e1,00,00,04

;
;   FORMAT OF THE BINARY PACKET
;               L									  L=Length (tot-4)
;00,00,88,61,00,44,00,00,
;
;            E   C S                 IP IP IP IP   E=Exp C=Channel# S=Speedcode
;                                                  3c==60 1E==30        
;10,01,00,00,3c,01,02,00,00,00,00,00,e1,00,00,01,
;10,01,00,00,3c,02,02,00,00,00,00,00,e1,00,00,02,
;10,01,00,00,3c,03,02,00,00,00,00,00,e1,00,00,03,
;10,01,00,00,3c,04,02,00,00,00,00,00,e1,00,00,04

[adapters]
a1 = 5c,00,44,00,45,00,56,00,49,00,43,00,45,00,5c,00,7b,00,33,00,35,00,43,00,30,00,39,00,37,00,35,00,30,00,2d,00,37,00,35,00,38,00,39,00,2d,00,34,00,38,00,37,00,45,00,2d,00,39,00,32,00,35,00,38,00,2d,00,45,00,42,00,36,00,38,00,33,00,46,00,43,00,36,00,36,00,46,00,33,00,37,00,7d,00
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\atm\arp\atmarpc\notes.txt ===
3/24/1998 JosephJ Sample stack:
ut
ChildEBP RetAddr  Args to Child
f2caf9a0 802acd69 40010010 00000000 00000000 NDIS!NdisCmMakeCallComplete+0xf
f2caf9cc f28f557c 80764828 807648c8 00000000 NDIS!NdisClMakeCall+0x9f
f2cafa10 f28f746f 80583c88 805fdd68 80583f90 atmarpc!AtmArpMakeCall+0x156
f2cafa34 f28f7693 805fdd74 8076b020 80583c88 atmarpc!AtmArpMcSendToMARS+0x67
f2cafa54 f28f4578 8076a9c4 f2cafa78 00000103 atmarpc!AtmArpMcSendRequest+0xe5
f2cafa7c f28f3ef5 8055e500 8055e568 80583c88 atmarpc!AtmArpResolveIpEntry+0x9e
f2cafa8c f28f2200 8055e568 805f2028 00000000 atmarpc!AtmArpQueuePacketOnIPEntry+0x3d
f2cafabc f28f1f79 8055e57c 805f2028 020000e0 atmarpc!AtmArpIfTransmit+0x25e
f2cafad8 f804561a 80583c88 f2cafb10 00000001 atmarpc!AtmArpIfMultiTransmit+0x2b
f2cafb00 f8030a42 80564ca8 020000e0 805f2028 tcpip!SendIPPacket+0x126
f2cafb8c f804d2da 80564ca8 00000005 8055e908 tcpip!IPTransmit+0x12ad
f2cafbe4 f8037e45 00000016 8055e908 020000e0 tcpip!SendIGMPReport+0xd2
f2cafc38 f8038c06 805fbb00 020000e0 00000000 tcpip!IGMPAddrChange+0x24f
f2cafc4c f80449dd 805fbb48 80583d90 80583c88 tcpip!InitIGMPForNTE+0x3a
f2cafcc0 f28f51e4 00000001 00000000 8072d490 tcpip!IPAddInterface+0x3d7
f2cafd74 802a4647 80584608 00000000 00000000 atmarpc!AtmArpCoAfRegisterNotifyHandler+0x18e
f2cafd98 80298d0f 805b5800 00000000 f2cafddc NDIS!ndisNotifyAfRegistration+0x55


3/26/1998 JosephJ
    adapter.c: AtmArpPnpEventHandler checks if this is for us (atmarp) or IP.
            If it's us, it calls AtmArpPnPReconfigHandler which
            currently does nothing. I need to stop and restart the
            ip interface.
            Q: we specifically look for Reconfig and if not that we
            pass it up to IP -- shouldn't we be more discerning? How
            do IP reconfigs happen?

    callmgr.c AtmArpCoRequestHandler currently handles:
                OID_CO_ADDRESS_CHANGE
                OID_CO_AF_CLOSE 
                    Calls AtmArpShutdownInterface(pInterface), which
                    is onlyc alled from here and AtmArpUnbindAdapterHandler.
                Q: what events lead to each of the above?

    Q: Useful debugger extensions? ndis/atm-specific?
    Q: Dumping pInterface and other atmarpc structures?
    Q: How to set bps on ALL (or most) AtmArpC entrypoints?

Following is debug spew at aaDebugLevel=0x6, immediately after rt-clicking
on disconnect from the connections entry:
AtmArpC: MakeCall Complete: Status 0xc0000001, VC 0xfe75ace4, pAtmEntry 0xfe6a18
04
AtmArpC: Closing call on VC 0xfe663e24, VC Flags 0x49, Ref 3, NdisVcHandle 0xfe6
68aa8
AtmArpC: Abort IP entry 0xfe676364, Flags 0x4000, ATM Entry 0x0, IP Addr 224:0:0
:2
AtmArpC: Abort IP entry 0xfe746164, Flags 0x4000, ATM Entry 0x0, IP Addr 255:255
:255:255
AtmArpC: SendIPDelInterface: IF 0xfe6a1c64, IPContext 0xfe6a2868
AtmArpC: IfDelAddress: Ctxt 0xfe6a1c64, Type 0x1, IPAddr 0x20000e0, Mask 0x0, Re
t 1
AtmArpC: IfDelAddress: Ctxt 0xfe6a1c64, Type 0x1, IPAddr 0x10000e0, Mask 0x0, Re
t 1
AtmArpC: IfGetEList: pIf 0xfe6a1c64, pList 0xfe6d4000, Cnt 11
AtmArpC: IfGetEList: returning 1, MyAT 3, MyIF 4, pList 0xfe6d4058, Size 11
AtmArpC: IfDelAddress: Ctxt 0xfe6a1c64, Type 0x0, IPAddr 0x284aa8c0, Mask 0x0, R
et 1
AtmArpC: IfClose: will deallocate pIf 0xfe6a1c64, RefCount 1
AtmArpC: Deallocate Interface 0xfe6a1c64
AtmArpC: PnPEventHandler: pIF 0x0, pEvent 0xf7c90b58, Status 0x0
AtmArpC: UnbindAdapterHandler: pAdapter 0xfe6d1384, UnbindContext 0xf7c90b0c
AtmArpC: CompleteUnbindAdapter: pAdapter 0xfe6d1384, UnbindContext 0xf7c90b0c

3/27/1998 JosephJ
    The ndispnpapi pnp irp eventually goes down to ndisPnPNotifyBinding()
    in ndis\ndis\ndispnp.c.

    Reconfig can complete asynchronously....
    Currently, TCPIP calls AtmArpPnpComplete, which calls ndisCompletePnPEvent.
4/3/1998 JosephJ
    To do the reconfig, I need to...
    1. Identify the adapter and interface.
    2. Save state, including async completion handle for the reconfig request.
    2. Bring down that specific interface.
    3. When interface is down (callback from ip), queue worker item
    4. 
    
Vi settings to use:
EXINIT=set ai sm showmode ts=4 hardtabs sw=4

4/21/1998 JosephJ
	Implementing GetCfInfoName handler. Other place which this is implemented:
		ndis\trfccntl\psched3\psched.

	Need to return a systemwide unique unicode string
	* (confirm with ofer).
	atmarpc needs to allocate this and keep it alive for the duration of
	the flowinfo object. Simplest solution is to allocate it on creation
	of the flow (in the  AtmArpGpcAddCfInfoNotify function).

	Since it needs to be unique, we'll base it on the WMI interface name
	and keep a per-interface "flow index" which we'll tack on to the name.
	* Check with Ofer if this is ok.

	TODO: change to new address reporting format:
	NETWOR_ADDRESS: AttressType needs to be filled in to
		 NDIS_PROTOCOL_ID_TCPIP
	NETWORK_ADDDRESS_LIST: the Address array needs to be filled with
	type NETWORK_ADDRESS_IP, not the dword-sized IP_ADDRESS.
	Fuction: AtmArpWmiGetAddressList

4/22/1998 JosephJ
	Removed the commented-out precomp-header lines from sources. Build was not
	handling these commented-out lines correctly, causing it to recompile all
	all files each time because it didn't find the precompiled headers!

5/8/ 1998 JosephJ
	Diagnostic statistics to add....
	Per interface IP statistics:
		arp:
			- 
		send:
			- time of last send request
			- status of last send request
			- 1st 32 bytes of last send packet
			- number of pkts sent successfully
			- number of pkts sent unsuccessfully

		recv:
			- time of last recv request
			- status of last recv request
			- 1st 32 bytes of last recv packet
			- number of pkts recvd successfully
			- number of pkts recvd unsuccessfully
5/11/1998 JosephJ
	Places which mess with pInterface->pAtmArpList:
	adapter.c: AtmArpShutdownInterface
	arpproc.c: AtmArpSearchForAtmentry -- looks for an atmentry and optionally 
				creates one if it doesn't match
	marspkt.c:	AtmArpMcHandleMulti -- adds an atm entry.
	utils.c:	AtmArpDereferenceAtmEntry	-- unlink an atmentry.
	utils.c:	AtmArpDeallocateInterface -- deallocating pInterface (goes 
				through and MEM_FREEs all atmarp entries.)
	Interface shutdown operation:
	 1st thing to do is to claim interface lock and set "shutting down bit" for 
	 	each list.
	 2nd: Do not allow list items to be added once this shutting-down bit 
	 	is set.
	 3rd: list is NEVER unlocked with entries having ref-count zero.
	 4th: If entry is unlocked and in list and list, it is always
	 	  in a consistant state -- even just before deallocating.
	 4th: If the entry is DOWN, don't do anything constructive with them.
	 
	
	
5/12/1998 JosephJ
	pInterface->pJoinList; is not protected when shutting down.
	it is manipulated in ipmcast.c, with the interface lock held, so
	it would be a matter of aquiring the interface lock when cleaning
	up pJoinList in ShutdownInterface.

	pUnresolvedVcs: locked by pInterface, but it is not protected
		in AtmArpCallConnectedHandler(...):
			pVc->pNextVc = pInterface->pUnresolvedVcs;
			pInterface->pUnresolvedVcs = pVc;
		(there is a check that pInterface->AdminState is up, but
		 we never claim the lock on pInterface!).
		(However, this applies only for PVCs, so perhaps this is not
		 such a big deal.)


	pAtmEntry->pVcList;

	AtmArpHandleInARPReply(...) acquires locks in the following order...
		AA_ACQUIRE_IF_LOCK(pInterface);
		AA_ACQUIRE_IE_LOCK_DPC(pIpEntry);
		AA_ACQUIRE_AE_LOCK_DPC(pAtmEntry);
		AA_ACQUIRE_VC_LOCK_DPC(pVc);
	
5/12/1998 JosephJ
	ndis\uni\admin -- console app "atmadm"
	atmarps -- look at the M3 IOCTLS. Name of device to open is in ioctl.h.

5/15/1998 JosephJ More robustness-improving changes...

typedef
void (*PFNVALIDATE)(void *pObj);

typedef struct
{
	PFNVALIDATE pfnValidate;
	ULONG		uFlags;
	// Lock
	// RefCount
} ATMARP_HEADER;

#define ATMARP_VALIDATE(_pObj) (_pObj)->Hdr.pfnValidate((PVOID)_pObj);

5/16/1998 JosephJ
	Information on Timers

5/21/1998 JosephJ suggested form of validation routines
ValidateX(ExpectedState)
{
	// General validation

	switch(ExpectedState)
	{
	case Loading:
	case Active:
	case Deallocating:
		// check that various timer are not pending
		// check that "in-parent-list" bit is clear
	}
}

Structures to validate:
Following structures have timers/refcounts/locks

		ATMARP_ATM_ENTRY:				RefCount	Lock

		ATMARP_IPMC_ATM_ENTRY: 	Timer

		ATMARP_IPMC_JOIN_ENTRY: Timer	RefCount

		ATMARP_IP_ENTRY:		Timer	RefCount	Lock

		ATMARP_VC:				Timer	RefCount	Lock

		ATMARP_INTERFACE: 		Timer  	RefCount	InterfaceLock
								McTimer				ArpTableLock
													AtmEntryListLock
													TimerLock
													WmiLock

We can assert that contained timers are not active on deallocation of
a structure.

Following table lists the logical "parent" of each structure 
		ATMARP_ATM_ENTRY:		In INTERFACE:AtmEntryList
								flag:AA_ATM_ENTRY_ACTIVE

		ATMARP_IPMC_ATM_ENTRY:  In AtmArpEntry
		 						flag:AA_IPMC_AE_VALID use this?

		ATMARP_IPMC_ATM_INFO:
								flag: AA_IPMC_AI_LOAD_ALIVE

		ATMARP_IPMC_JOIN_ENTRY: In AtmArpEntry flag:

		ATMARP_IP_ENTRY:		In ArpTable
								 flags: AA_IP_ENTRY_IDLE

		ATMARP_VC:				In	AtmEntry
									flags: AA_VC_OWNER

		ATMARP_INTERFACE:		In Adapter.
									flags: AA_IF_, AAMC_IF_

We can maintain a "keep alive" bit which is set once the item is in the
the  parent and cleared when it is removed from the 
parent. We will assert that the "keep alive" bit is clear when deallocating
the structure.

		LOAD_STATE
			LS_LOADING -- don't use yet
			LS_LOADED  -- ok to use
			LS_UNLOADING -- don't start any new activity
			LS_UNLOADED -- ok to delete.
5/28/1998 JosephJ
Holes dealing with the McEntryList:
In AtmArpMcPrepareAtmEntryForClose
//
	//  First, prune all members that aren't connected.
	//
	for (pMcAtmEntry = pAtmEntry->pMcAtmInfo->pMcAtmEntryList;
		 pMcAtmEntry != NULL_PATMARP_IPMC_ATM_ENTRY;
		 pMcAtmEntry = pNextMcAtmEntry)
	{
		pNextMcAtmEntry = pMcAtmEntry->pNextMcAtmEntry;

		//
		//  Stop any timer running here.
		//
		(VOID)AtmArpStopTimer(&(pMcAtmEntry->Timer), pInterface);

		if (AA_IS_FLAG_SET(pMcAtmEntry->Flags,
							AA_IPMC_AE_CONN_STATE_MASK,
							AA_IPMC_AE_CONN_DISCONNECTED))
		{
			AtmArpMcUnlinkAtmMember(
					pAtmEntry,
					pMcAtmEntry
					);
			//
			//  AE Lock is released within the above.
			//
			AA_ACQUIRE_AE_LOCK(pAtmEntry);
		}
	}

6/1/1998 JosephJ
	Fixed above problem: AtmArpMcUnlinkAtmMember now doesn't release the lock.


6/1/1998 JosephJ
	Other changes for today's checkin:
		* Added extra asserts that timer is not active when the containing
	 		structure is freed (look for TIMER_IS_ACTIVE)
		* Added ULONG Filler to  AAD_ALLOCATION so that allocated structures
		  retain 8-byte allignment -- not having this allighment was causing
		  the checked alpha build to fault when executing the following:
			AA_PUSH_TO_SLIST(
					&(pInterface->HeaderPool[HdrType].HeaderBufList),
					STRUCT_OF(AA_SINGLE_LIST_ENTRY, &(pNdisBuffer->Next), Next),
					&(pInterface->BufferLock.SpinLock)
				);
		
		(&(pInterface->HeaderPool[HdrType].HeaderBufList) needs to
	     be quadword (8-byte) aligned on the alpha, else it faults).

	     Note: SLIST_HEADER is a union which includes "LONGLONG", so
	     it WILL be quadword aligned provided it's hierarchy of parent
	     structures is aligned, no matter where this occurs within the
	     parent structures. Also added use of  AA_INIT_SLIST to initialize
	     BufferPool slists.

	    * Fixed misuse of certain bits of the IPEntry.Flags which were resulting
	      in Flags getting into an incorrect state. ("|=" was used instead
	      of AA_SET_FLAG when setting AA_IP_ENTRY_ARPING and
		  AA_IP_ENTRY_INARPING).

		* Make sure timer is stopped when unlinking a McAtmEntry.

		* Protected adding AtmEntry by locking the interface list lock
		  in AtmArpMcHandleMulti. This also required some re-ordering
		  of reference counting.


6/9/1998 JosephJ
		Note: intrinsic functions (/Oi) must be enabled in order for this 
		to compile under the win98 environment (otherwise it can't find
		the prototoypes for functions like memcmp()).

6/9/1998 JosephJ
	Support adding a canned set of arp entries -- this is a request as well
	as useful for isolating problems with the arp server.
	typedef struct
	{
		ULONG Sig;
		ULONG Flags; // reserved.
		ATMADDRESS; // binary format.
		IPADDRESS;	// network format.
	}
	ARPENTRYDATA;


6/30/1998 JosephJ
	On ArvindM's advice: Changed AtmArpCompleteUnbindAdapter() so that it
	doesn't block waiting for NdisCloseAdapter to complete if it returns
	pending -- instead we return immediately and do the actual cleanup
	in the AtmArpCloseAdapterCompleteHandler. This also eliminated a specific
	bug where were were faulting because we weren't blocking when we should.

arpproc.c AtmArpAbortIPEntry: *ppNextIpEntry = pIpEntry->pNextToAtm;
	this is done while holding the ATM_ENTRY's lock, but
	in  AtmArpInvalidateAtmEntry, we count the number of ip entries 
	in the atm_entry's list, and use this count, all without holding
	the atm_entry's lock.

	Also in AtmArpMcHandleMulti, marspkt.c, line 793 -- the list is added to...
	 we should fail the earlier SearchFor...

	Also in AtmArpUnlinkIpEntryFromAtmEntry (utils.c), but no one seems to
	call it.

7/8/1998 JosephJ

	This concerns bug  191188(Intermittent loss of connections during
	multicast  IP and Ws stress).

	There are three issues so far:
	1. Sometimes, an AtmEntry gets in the CLOSING state, but it never goes
		away. I still haven't figured why it doesn't go away, but the 
		workaround (checked in today) is for AtmArpSearchForAtmEntry to
		clear the state from CLOSING if the entry is basically idle (no
		IP entries, multicast entries and vc attached to it).
	2. The mars server was sending us too-short packets. This is fixed
	   in the mars server (setting the ValidCounts field of the packet
	   in the mars server to FALSE). I also made a change to our
	   incoming packet handler to actually check packet length.

	3. The multicast ip entries don't seem to ever get deleted -- I saw
	   over 500 entries after an hour or so of anilth's multicast stress.
	   This is still unresolved (bug#194613).

	Note: on startup, the initial attempt to connect to the arp/mars server
	often fails (when it's on the same machine as the client -- it's probably
	an order-of load problem). Anyway, as a consequence of the call failing,
	AtmArpInvalidateAtmEntry is called, which sets the AtmArpEntry state
	to CLOSING -- it stays in that state for as long is the entry is alive.
	However with the workaround #1 above, the CLOSING state is now cleared on
	the first call to AtmArpSearchForAtmEntry after the initial vc is
	cleared up.

7/8/1998 JosephJ
	AbortIpAddress -- investigate impact of abort when using MCS

7/8/1998 JosephJ
	One way to get the debugger to dump the calling function's name without
	stopping:
	db atmarpc!AtmArpSearchForAtmAddress "ln poi(esp); g"

0xFF8A6448
0xFF8A6448
0: kd> !aac ip[1]
[1] ATMARP_IP_ENTRY@0xFF9BBEE8 (104 Bytes)

aip_sig [0,4]: 0x41414950
IPAddress       [4,4]: 0x56feffeb
pNextEntry      [8,4]: 0x0
pNextToAtm      [c,4]: 0xff98a108
Flags   [10,4]: 0x6004 RESOLVED MC_NO_REVALIDATION MC_RESOLVED NUCAST
RefCount        [14,4]: 0x2
pInterface      [20,4]: 0xffa20028
pAtmEntry       [24,4]: 0xffa1d868
pNextMcEntry    [28,4]: 0x0
NextMultiSeq    [2c,2]: 0x1
Timer   [30,20]
    ff9bbf18: 00000000 00000000 00000000 00000000 |....|....|....|....|
	ff9bbf28: 00000003 00000000 f95dc48a ff9bbee8 |....|....|..].|....|
RetriesLeft     [50,4]: 0x3
PacketList      [54,4]: 0x0
pRCEList        [58,4]: 0x0
Refs    [60,5]
	ff9bbf48: 01000000 ffffff01 ffffffff ffffffff |....|.   |    |    |

7/14/1998 JosephJ
	Looking at a an assert failure during reconfig -- the assert is
	in AtmArpCallCompleteHandler (assert(rc==0):

		else
		{
			//
			//  The Interface is going down: clean up everything first.
			//
			...
			else
			{
				//  MakeCall had failed. (And the IF is going down)
	
				rc =  AtmArpDereferenceVc(pVc);	// Create Vc ref
				AA_ASSERT(rc == 0);		// The VC should have been deallocated
				^^^^^^^^^^^^^^^^^^ above asser failed.
			...
	
	NOTE: AtmArpCloseCallMgr munges the pInterface but without holding
	its lock (it's called either on a failed init or on
	AtmArpShutdownInterface).

	NOTE: in  AtmArpMakeCallCompleteHandler(), we look at the
    pInterface->AdminState without claiming its lock:
    if (pInterface->AdminState == IF_STATUS_UP)...

	NOTE: Since  NdisCoDeleteVc is called only when rc==0 (in the context
	of AtmArpDereferenceVc), if the ref count doesn't go to zero, NdisCoDeleteVc
	will never be called. This means that the CloseCallMgr completion
	handler will never get called, which means that we'll never complete
	the reconfig request! So this explains why after hitting "g" after the
	assert, ndis complained that I never completed the reconfig request.
	So now I've got to track down why the ref count is still one. One thing
	in our favor is that this is a freshly created call -- it was make call
	that failed asynchronously.

	Some things to note:
	The only atm_entry has no vc links, and the vc has no atm_entry link.
	The interface is closing and it's af-handle is null, indicating that
	NdisClCloseAf has been called (as one would expect).

	The vc flags are: outgoing, svc, closing.

		rc =  AtmArpDereferenceVc(pVc);
			// Create Vc ref	-- derefed when calling NdisCoDeleteVc
			// Call ref			-- derefed in closecall complete handler
			// Atm ref.			-- derefed when unlinking linkage with atmentry.

	So in this particular case, the bug was that in the above code
    in AtmArpCallCompleteHandler we need an extra dereference (for
	call ref) just above the assert. So I added the following lines just
	before the assert:
			//
			//  Delete the Call reference
			//
			rc = AtmArpDereferenceVc(pVc);
			AA_ASSERT(rc > 0);

    Case closed. (Code checked in 7/17/1998, callmgr.c).

7/14/1198 JosephJ
	QoS folks hit a bugcheck when sending on an unspecified flow.
	(198733	bugcheck in atmarpc!AtmArpDereferenceAtmEntry with best-effort
	 flow installed).

7/17/1998 JosephJ
	Above bugcheck was due to a hole in AtmArpLearnIPToAtm -- it would
	not have a ref on the atmentry when it sent packets on the entry at the
	end of the function. Fixed this by adding a temp ref. Also changed
	some AA_ACQUIRE/RELEASE_IE/AE_LOCK_DPC in this function to the non-DPC
    versions (they should have been the non-DPC versions all along).

7/17/1998 JosephJ
	Another bugcheck hit during alpha mcast stress -- 
	The bugcheck in the tick handler happened because of a bogus timer entry.
 The timer entry itself was part of a freed structure that was formerly owned
 by arpc, and was clearly a previously freed ATMARP_IPMC_JOIN_ENTRY (also,
 the other, timers at that particular location in the timer list were all valid
 join entries).

 So the question is why was this join entry prematurely freed?

  Looking at the code, I see one place where there is a race condition.
  The entire join entry list is in general protected by the interface lock.
  However, in AtmArpMcSendPendingJoins, the lock is released briefly while
  processing the list -- this is not good and could definitely cause things
  like starting a timer on a just-released (by some other thread) join entry.

  I couldn't find any more race conditions or other problems on the join list--
  everywhere else the IF lock is held the whole time, plus the ref counting
  seems to be good everywhere as far as I can see.

  The workaround,  in AtmArpMcSendPendingJoins, is to go through the list of
  joins with the interface lock held once, counting the number of joins that
  need to be sent. I then allocate space to hold all the ipaddresses and masks
  and then go through a 2nd time (still holding the interface lock), picking
  up the ip addresses and masks. I then send each of these ip addresses
  (the if lock gets released per send, but that's ok).

  This is checked in today.

8/31/1998 JosephJ Promiscuous mode multicast

   We treat promiscuous mode multicast as a special case:
   On enabling, we send a "JOIN-all" request.
   On disabling, we send a "LEAVE-all".
    


    Note, tcpip keeps a ref count of apps which request a particular type of
    filter, so if multiple apps request the same type, it sends down multiple
    calls to enable it, but only ONE call to disable it -- when the last app that
    requested it disables it. It does send each type independantly -- i.e., even
    if promiscuous mode is already requested, it will send down a ALL_MULTICAST
    if an app subsequently asks for that.

    Summary of changes made:
    arpif.c,util.c: new entrypoint AtmArpIfSetNdisRequest -- it calls
    			AtmArpMcAdd/DelAddress, specifying the entire address range.
	ipmcast.c, marspkt.c: now deal with non-zero mask values in JOIN_ENTRY -- when
			searching for a particular join entry, checks both IP address
			and mask (so group 224.0.0.0 can coexist with the join
			entry representing the entire class-d address space -- both have
			IP address value of 224.0.0.0).
			AtmArpMcHandleJoinOrLeaveCompletion -- has extra parameter: Mask.
	atmarp.h: ATMARP_INTERFACE has a new DWORD: EnabledIPFilters -- used
		 	to track whether promiscuous mode is enabled or not -- required
		 	because we may get multiple enable requests but only one
		 	disable request.
	sources: cdefine PROMIS added, enabling promiscuous mode code.

    Test Using \\anilth_1\allpkts\obj\i386\allpkts.....
    Winsock(1)== all pkts       == OID(0x20==NDIS_PACKET_TYPE_PROMISCUOUS)
    Winsock(2)== all mcast pkts == OID(0x04==NDIS_PACKET_TYPE_ALL_MULTICAST)
    Winsock(3)== all igmp pkts  == OID(0x04==NDIS_PACKET_TYPE_ALL_MULTICAST)

    We specifically look for OID NDIS_TYPE_ALL_MULTICAST and fail for
    others.

    Test cases: start allpkts.exe before/after someone has started sending
    to a particular mcast exe. Boundary cases: have allpkts.exe running on
    a machine which is also monitoring 224.0.0.0 and 239.-1.-1.-1.
    Various combinations of MCS-served address ranges.

09/21/1998  JosephJ
	Fix for bug# 225578	ATMAPRC Hangs when disabling in UI
	Following changes to get rid of a atmarpc not completing shutdown because
	there was an active vc that (the vc to the arp/mars server was always
	in the closing state even as new calls were made to it).
	* AtmArpAtmEntryIsReallyClosing() also check if there are any VCs active
	  when checking if the entry is truly idle.
	* AtmArpSearchForAtmAddress -- fail if interface is down.
	* AtmArpMakeCall -- fail if interface is down or if atm entry is REALLY
	  closing (i.e., AtmArpAtmEntryIsReallyClosing returns TRUE).

09/23/1998 JosephJ
	A couple of anomalies:
	1. 	When joining a vc-mesh mcast group for which there is already at least one
	 	member and there is a local send already in progress, the local host 
	 	does not add itself to the vc mesh -- it gets the JOIN from the mars
	 	server on the cc vc, but simply treates as the JOIN completion. Fix
	 	is to ALSO process these "self-JOINS" which come on the ccvc to see
	 	if they must be added to current P2MP vc-mesh connections.
	 	[Fixed on 9/25/1998 checkin]
	2.	If a make-call fails with a non-NULL flow, the link between flow and vc
		is not deleted when the call is cleaned up -- leaving the flow referencing
		a dangling vc (only ref to the vc is the flow). This means that all
	 	subsequent vc's created for that flow will not be linked to the flow and
		so all send packets will need to explicitly look for vc's based on 
		flow characteristics. Fix is to delete the flow-vc association if it
		exists when handling a failed makecallcomplete.
		[Fixed on 9/25/1998 checkin]

		NOTE: FlowsInfo's are not protected by a crit sect, so race conditions
		are possible, for example:
		(a) flow is removed (AtmArpGpcRemoveCfInfoNotify) at the same time that the
		 vc is closing (AtmArpCloseCall) -- both could try to un-link the
		 vc and flow at the same time. It doesn't help that both claim the vc
		 lock. Potential fixes: (a) add lock to flows or (b) use
		 Interlocked[Compare]ExchangePointer when modifying FlowInfo->pVc.
		 [Fixed on 9/25/1998 checkin, using the Inerlocked functions approach]

09/23/1998  JosephJ
	Static validation of flows (when they are installed). BUG#156534

	Here are the relevant structures...
		typedef struct _TC_GEN_FLOW {
			FLOWSPEC        SendingFlowspec;
			FLOWSPEC        ReceivingFlowspec;
			ULONG           TcObjectsLength;        // number of optional bytes
			QOS_OBJECT_HDR  TcObjects[1];
		} TC_GEN_FLOW, *PTC_GEN_FLOW;
		
		typedef struct _flowspec
		{
			ULONG       TokenRate;              /* In Bytes/sec */
			ULONG       TokenBucketSize;        /* In Bytes */
			ULONG       PeakBandwidth;          /* In Bytes/sec */
			ULONG       Latency;                /* In microseconds */
			ULONG       DelayVariation;         /* In microseconds */
			SERVICETYPE ServiceType;
			ULONG       MaxSduSize;             /* In Bytes */
			ULONG       MinimumPolicedSize;     /* In Bytes */
		} FLOWSPEC, *PFLOWSPEC, * LPFLOWSPEC;


	Here is the validation plan (added to AtmArpGpcValidateCfInfo()) for the
	fields of FLOWSPEC:

		Ignored fields:
			Latency
			DelayVariation
		
		Default handling
			MinimumPolicedSize: ignored
			TokenRate: BE:line-rate; GS:invalid   CLS: invalid
			TokenBucketSize: MTU
			PeakBandwidth: line-rate
			ServiceType:BE
			MaxSduSize: MTU
		
		Valid ranges
			MinimumPolicedSize <= MTU
			0<TokenRate	<= LineRate
			0<TokenBucketSize	<=MTU
			0<TokenRate	<= PeakBandwidth
			ServiceType: valid type
			0<MaxSduSize <= MTU
			MaxSduSize<TokenBucketSize
	[Fixed in 9/25/98 checkin]

9/25/1998
	Ageing of IP entries -- once resolved (via ARP reply typically) the IP 
	entries' ageing timeout is started.
	RCE entries -- IP calls AtmArpIfInvalidate in which case we unlink the RCE 
	and IP, potentially deleting the ip if the refcount goes to zero.
	What about the ageing timer for multicast entries?

	pIPEntry->pAtmEntry set to NULL in:
		AtmArpInvalidateEntry, which is called by ShutdownInterface, AbortIP, 
		AtmArpIncomingCloseHandler, AtmArpMakeCallCompleteHandler, 
		AtmArpCloseCallCompleteHandler (only if p2mp call).

	Set to non-null in McHandleMullti

 MarsHandleMulti marspkt.c line 1034: pAtmNumber = (PUCHAR)pAtmNumber + AtmNumberLength; 
 NOTE: Should be AtmNumberLength+AtmSubaddressLength when we decide to support subaddresses.

9/28/1998 JosephJ
	arpif.c -- For WIN98 only, munged the 1st 2 bytes of the MAC reported up to
	IP to be be 0x0a and 0xac -- this is so that it will be different from the
	MAC reported by lane. This needs to be done only for win98 because on win98
	ip/atm's mac size is 6 (same as LANE's) while on NT it is 7. [9/29 checkin]


9/28/1998 JosephJ

	Fixed bug in AtmArpSearchForIPAddress -- when creating a new
	MCAST entry, it was not chaining itself to the interface's list of
	multicast entries -- instead it was just setting itself to be the first and
	only element of this list! [9/29 checkin]
	
	To clean up stale IPMCAST entries (bug#194613), added new function
	AtmArpCleanupArpTable (called from AtmArpServerRefreshTimeout). This
	function goes through the entries in pInterface->pMcSendList, calling
	AtmArpAbortIPAddress on those entries which have no associated atm address.
	(Note, this also required the fix to the bug in the above paragraph).
	[9/29 checkin]

	To clean up stale IPMCAST entries (bug#194613), added new function
	AtmArpCleanupArpTable (called from AtmArpServerRefreshTimeout). This
	function goes through the entries in pInterface->pMcSendList, calling
	AtmArpAbortIPAddress on those entries which have no associated atm address.
	(Note, this also required the fix to the bug in the above paragraph).
	[9/29 checkin]

	Fixed AtmArpMcHandleMARSFailure so that it doesn't restart timer when the
	interface is not up -- this was causing the interface to never go away because
	the refcount was 1 (for the timer) but the timer was never fired because the
	interface was down. [9/29 checkin]
   
9/29/1998 JosephJ Task Offload.

	ip\arp.c ARPRegister sets ai_OffloadFlags, TcpLargeSend
	ip\arp.c ARPBindAdapter sets BindInfo.lip_OffloadFlags, lip_MaxOffloadSize and
			lip_MaxSegments.
	ip\init.c IPAddInterface sets it's IF.if_Offloadflags etc to these.
	ip\iproute.c and ipxmit.c use these flags when deciding whether to do xsum
	computation or not.

	TCP_LARGE_SEND_OFFLOAD is used in tcp\tcpsend.c
	IPSEC_OFFLOAD_* only set in ip\ai_OffloadFlags

10/06/1998 JosephJ QOS interface changes

	Look at #if(NEWQOS) code in arpwmi.h
	AtmArpWmiSendTCIfIndication -- uses new struct TC_SUPPORTED_INFO_BUFFER.

	Took out check for BucketSize > MTU in qos.c, per ericeil.

	Added support for task offloading (not enabled) -- #ifdef ATMOFFLOAD --
	adapter.c: new functions AtmArpQueryAndEnableOffload and AtmArpDisableOffload
	atmarp.h: Adapter struct had new sub-struct "Offload"

	Also removed #ifndef NEWARP (obsolete) code from adapter.c, atmarp.h and
	utils.c

	[All of the above checked in today]

10/14/1998  JosephJ llipif.h change

	From:	Amritansh Raghav 
	Sent:	Tuesday, October 13, 1998 2:27 PM
	Subject:	RE: new llipif.h

		(i) Pass the old interface name as the DeviceName and NULL for the IfName
		(ii) Pass 0 for Requested Index
		(iii) You need to have place holders for the 3 functions, but you dont need
 			to call those functions ever.
	
		Reasons:
		(i) If you multiplex different connections over the same device, s.t. at any
			given time only one connection is active, then the ifName allows you to
			associate a name different that the device name with the interface. This
			is done so that if you have a phonebook entry called Redmond and it is
			connected, doing ipconfig shows Redmond and not NdiswanIpOut{Guid}
		(ii) This allows wanarp to reserve certain indices so that the ifIndex
			 doesnt change when the router starts
		(iii) The three functions basically change the info above

	Changes made in ntentry.c, utils.c and callmgr.c

10/20/1998 JosephJ
	Checked in above change

	Other changes in todays checkin:
	Added the assert AA_ASSERT(AA_IE_IS_ALIVE(pIpEntry)) pretty much every time
	we lock the pIpEntry. This is because in principle it's possible for
	the ip entry to be used justafter it's been removed from the the arp table.

	arpproc.c:
		AtmArpCleanupArpTable -- don't delete entries if they are in the ARPING
				state.
		AtmArpResolveIpEntry - don't do it if !AA_IE_IS_ALIVE
		AtmArpAbortIPEntry - remove packet queue AFTER claiming lock on IpEntry for
				the last time (otherwise others could queue packets in between us
				taking the packets and freeing the entry.
		AtmArpQueuePacketsOnIPEntry - dont do it if !AA_IE_IS_ALIVE

	marspkt.c: AtmArpMcHandleMulti -- don't bindly assume that if the pAtmEntry
		exists then it is compatible with the received MULTI pkt: i.e.,
		MCS served or VC-mesh served. Added code to abort the IP entry if
		they are incompatible.

	sources: enabled ATMOFFLOAD and IFCHANGE1 (which enables new llipif.h change
			referred to in the 10/14/1998 entry).

10/21/1998  JosephJ
	Chun Ye made changes to the IPSEC task offloading -- ip\arpc.c:
		10-19-98@14:42  chunye   in      arp.c v69    ipsec offload spec. change
	So I reflected that in adapter.c, 

11/12/1998  JosephJ
	Qos.c --  had an incorrect check of size of pQosInfo in AtmArpGpcValidateCfInfo.
	fixed and checked in today -- bug#249110
11/30/1998  JosephJ
	
	Following is a potential fix for bug#256385.
		arppkt.c v15        AtmArpSendInArprequest: release lock on failed exit
							(I saw a stress case where the vc lock was not released
							so and reviewed the code and found this place, although
							it's unlikely that this case was hit during stress).
	
	Following two are fixes for bug#256791
	(IDS: MM Break in atmarpc!AtmArpMcUnlinkAtmMember)

		callmgr.c v24       AtmArpCloseCall: pVc flags was being set here without
							holding the vc  lock.
		ipmcast.c v11       McUpdateConnection: bail if vc is being closed. We
							were hitting a case where we were trying to add a party
							using an already-deleted entry, which we
							avoid by this check. The use of already-deleted entry was
							probably because we run through the list of entries
							but release the atm lock in the middle -- fixed that as
							well.

1/14/1999	JosephJ
	Added code to fail initialization if adapter does not support atleast 9188.
		adapter.c v22       #272355 DO not less than 9188 A
		atmarp.h v16        #272355 DO not less than 9188 A
		callmgr.c v25       #272355 DO not less than 9188 A
		externs.h v23       #272355 DO not less than 9188 A

	Added code to enable the ageing timer if the vc can't be associated with
	a flow (because some other vc is already associated with the flow). We
	made this fix in anticipation of the use of flows that could match multiple
	VCs, shuch as a flow that matches "all data sent to UDP port 80."
		arpproc.c v16       #272272 QOS: VCs don't age out 
	
	I noticed that we were zeroing out the info structure after picking
	up the offload capabilities.
		utils.c v17         Fix typo in setting task offloa

2/12/1999 JosephJ
	This concerns the fact that we force IP to copy receive packets which
	have multiple mdls.
	 The bugs in question are:
	214430 PERF: atmarpc gives iprecv the wrong paramters for a multi-buffer packet
	169877 ATM:ARPC: Bugcheck in TCPIP checksum, first MDL buffer

	We need to put back the 1-line fix in AtmArpCoReceivePacketHandler
	to avoid copy (arppkt.v8) which was backed out to "fix" 169877 (arppkt.v9).

	However we do this only if the buffer length is at-least 512, so that we don't
	report up partial IP and TCPIP headers.

	---------- TDI\TCPIPMERGE\IPATMC\arppkt.c next ----------
	683c683
	< 							BufferLength - sizeof(AA_PKT_LLC_SNAP_HEADER),
	---
	> 							TotalLength - sizeof(AA_PKT_LLC_SNAP_HEADER),

2/12/1999 Josephj
	arppkt.c	above fix (#214430)
	arpproc.c	(1) incorrectly inserting mc ip entries into pMcSendList (#292305)
				(2) AtmArpAbortIPEntry was pAtmEntry->pIpEntryList
	callmgr.c 	Remove bogus assert in AtmArpMcTerminateMember

2/22/1998 JosephJ Inarp: dealing with multiple ip addresses.
	arpif.c, AtmArpIfAddAddress: adds to list of addresses.
	arppkt.c; AtmArpHandleInARPRequest -- sets src ip address to
		be the FIRST ip address: pInterface->LocalIPAddress.IPAddress.

	Fix is to cycle through, sending one inarp reply for each IP address.
	NOTE: above fix not checked in -- saved in .\save02

2/25/1998 JosephJ
	     Unfortunately we have to back out YET AGAIN from the perf fix
	     (see 2/12/1999 note above) because large pings (eg ping -l 4000) doesn't
	     work -- bug#297784
	     See arppkt.c, line 710.

2/25/1998 JosephJ
		When migrating arp/mars server to another machine on the fly, clients
		bugchecked during mcast stress, because an mcast address switched from
		being VC-mesh to MCS served, and we forget to deref the ipentry
		before aborting the address: marspkt.c, look for 
		 "HandleMulti: Type Mismatch!." Fix is to add the deref before
		 calling AbortIpEntry.

03/16/1999 JosephJ
	arpwmi.c -- timothyw's code examination found some potential
		cases (bug 303707), plus potential mem leak (bug 296220).
		Trivial fixes.
	callmgr.c -- fix for following bugs:
		305905	*ATMARPC: bugcheck running TDI test
			(needed to unlock vc if ref count is nonzero, instead of
			assuming that the refcount was zero)
		303172	*ATMARPC: doesn't call NdisClCloseCall when the miniport
 					fails to activate the VC
			(if we get an incoming close call while the vc was not yet
			connected, we need to act on it -- we "fake" the vc to be
			active so that subsequent processing works).
	qos.c	-- fix for the following:
		301210	*Traffic Control functional test failure on
				 ATM: expect ERROR_INVALID_PEAK_RATE, got 
				 ERROR_INVALID_TOKEN_RATE
		(fix is to change the error returned for this case --
		 see  "3/15/1999 JosephJ: According	 to EricEil..." comment
		 in 	qos.c).

03/24/1999 	JosephJ Fix for #310493
	310493	ATMARPC bugchks on getting bad control packet

	A rogue pkt was transmitted on the CCVC, causing all arp clients to bugchk
	in AtmArpMcProcessPacket(...). Fix is essentially to change all length
	variables in that function from SHORT to ULONG (SHORT vars could get -ve
	values, which mess up comparisons and additions).

04/20/1999  JosephJ	Proposed fix for  284644	Only one IP can be associated with
	a PVC or group of PVCs

	We're going to fix this in a general way by allowing static arp entries.
	- On loading, we'll read a set of <atm-address>-to-<ip address> mappings and
	  populate the arp cache with that. Support is already present in atmarpc.sys
	  for static arp entries.
	- User has to create custom PVCs for each destination from the call mgr
	  UI.
	- User has to directly enter these mappings into the registry -- under
		the atmarp settings under tcp settings for the adapter, we'll create a
		new key:
			StaticArpList - this is a REG_MULTI_SZ, with entries of the form:
				<ip-address>-<atm-address>
				<ip-address>-<atm-address>
				...
	  
5/19/99	ArvindM 330544 Fix for bugcheck in TickHandler

	The suspect is a Join Entry that has been freed in AtmArpMcHandleMARSFailure
	(the IF flags were 0x1100 in one case). The timer could have been in the
	expired list held by TickHandler. Added code to ref/deref Join Entries.

8/4/99	ArvindM 382619 Race between Unbind and AfRegisterNotify handlers

	NDIS isn't serializing calls to these handlers, so we hit a case where the
	AfRegisterNotify handler is chugging along when the Unbind handler comes in
	and deletes the Interface. Workaround is to note down the fact that we are
	processing an Af Notification and in Unbind handler, wait for that notification
	thread to complete. Added ATMARP_ADAPTER.UnbindBlock and an Adapter flag
	AA_ADAPTER_FLAGS_PROCESSING_AF for this. Note that this only shortens the
	window - the proper fix should be in NDIS.

08/09/1999  JosephJ Cleanup error handling code in DriverEntry
	We were deleting the device object twice in the error path.


08/12/1999	ArvindM 386639 Access NULL McAtmEntry in McMakeCallComplete.
	In McUpdateConnection, we used to simply pick up the first MC ATM Entry in the
	list to use as the party context in a MakeCall. Now this entry could
	be running the retry-delay timer. If this timer fires before the MakeCall
	completes, it will overwrite the MC ATM Entry state to DISCONNECTED.
	In McMakeCallComplete, we look for an MC ATM Entry whose state is WACK_ADD_xxx,
	and fail to find one.

	The fix is in AtmArpMcUpdateConnection: search the list of MC ATM entry
	structures for one that is VALID and DISCONNECTED. If there isn't any, bail out.
	If we find one, move it to the start of the MC Entry list, because AtmArpMakeCall
	always uses the first entry!

08/13/1999	ArvindM	387755 Add OutstandingSends counter to VC structure.
	We ran into an issue where we referenced a VC prior to sending a packet
	on it, but by the time NdisCoSendPackets was called, the VC was closed
	and DeleteVc'ed (it was owned by the call manager). So the call to NdisCoSendPackets
	bugchecked because the NdisVcHandle was bogus. To fix this, use this counter
	to keep track of outstanding (and on-the-verge-of-being-sent) packets on the VC. In
	AtmArpCloseCall, don't close the call if this count is non-zero. In CoSendComplete,
	check if the VC needs to be closed, and this count (after decrementing) just went
	to zero. If so, call AtmArpCloseCall.

10/15/1999  JosephJ dealing with suspend/resume and multiple AF registrations
	Fix for 415806: 
		Now AtmArpCoAfRegisterNotifyHandler will skip adapter-wide init
			(calling AtmArpCfgOpenLISConfiguration and AtmArpAddInterfaceToAdapter)
		if it's already been called before for this adapter.
	The previously-checked-in version would return failure immediately if
	it's been called for this adapter -- this was causing failure to re-add
	the IF after a hybernate (we are not getting a unbind/bind after hybernate
	because we passon the pnp-request up to IP which returns that it *can*
	handle hybernate) -- so instead the AF goes away and a new registeraf
    notification comes in on resume.

    We *do* need to skip the adapter-wide init because doing it a 2nd time
    causes some memory to be leaked.
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\net\atm\arp\atmarpc\ntuser.doc ===
Microsoft Word 6.0 Document MSWordDoc Word.Document.6C:\WINWORD\TEMPLATE\Normal.dot IP Over ATM User Guide for Windows NT Arvind Murching Arvind Murching Microsoft Word 6.0IP Over ATM User Guide for Windows NT Introduction This document describes the Installation and Configuration procedures to create an IP network over ATM. A brief introduction to the IP over ATM mechanism is included. The terms  IP over ATM Client ARP Client , and  Client  are used interchangeably, as are  IP over ATM Server ARP Server  and  Server References RFC 1577, Classical IP and ARP over ATM. Internet Draft <draft-ietf-ion-classic2-00.txt>, Classical IP and ARP over ATM. RFC 1755, ATM Signaling Support for IP over ATM. IP Over ATM Operation This section gives an overview of the theory of operation of an IP over ATM network. More details can be found in the references. Logical IP Subnet RFC 1577 (and successors) define the basic operation of an IP over ATM network, or more precisely, a Logical IP Subnet over an ATM network. A Logical IP Subnet or LIS is, broadly, a set of IP hosts that can communicate directly with each other. By definition, two hosts belonging to different LIS  can communicate only via an IP router, which is a member of both LIS Address Resolution via ARP Server The main problem to be solved in an IP over ATM network is that of address resolution, i.e. mapping an IP address to a  hardware address , in this case, an ATM address. On an Ethernet network, the Address Resolution Protocol (ARP) is used for this purpose. Since an ATM network is non-broadcast by nature, this protocol cannot be used as is. Rather, a dedicated Address Resolution server (ARP Server) is used to provide IP to ATM address resolution. One of the stations in an LIS is designated as an ARP Server (and the ARP Server software is loaded on it). Stations that use the services of the ARP Server are referred to as ARP Clients, or simply, client. All IP stations within an LIS are ARP Clients. Each ARP Client is configured with the ATM Address of the ARP Server. When an ARP client starts up, it makes an ATM connection to the ARP server, and sends a packet to the server that contains the client s IP address and the client s ATM address. The ARP server builds a table of IP address to ATM address mappings. When a client has an IP packet to be sent to another client (whose IP address is known, but ATM address is unknown), it first queries the ARP Server for the ATM address of the desired client. On receiving a reply that contains the desired ATM address, the client establishes a direct ATM connection to the destination client and sends IP packets for that client on this connection. All ATM connections, including the connection to the server, are aged out by clients on detecting inactivity. All clients refresh their IP, ATM address information with the server periodically (the default is 15 minutes). An entry that is not refreshed for a while (default: 20 minutes) will be purged by the server. Multi-homing and Multiple LIS support A multi-homed IP host is one that is reachable via more than one IP address. It may or may not possess multiple physical network interfaces. With IP over ATM, it is possible to configure multiple logical or virtual network interfaces on a single ATM adapter. The IP layer would see these as multiple ARP interfaces, and does not care that they are all created on the same physical adapter. Each virtual interface would be part of a different IP over ATM LIS, and the ARP client entity for each virtual interface can potentially connect to a different ARP server. Using this concept, it is possible to build a router for an IP over ATM network that operates on multiple virtual interfaces, all configured on the same ATM link.   REF _Ref371142172 \* MERGEFORMAT  Figure 1  shows such a scenario, with stations belonging to two subnets (or LIS ): 10.X.X.X and 11.X.X.X. Each LIS has an ARP server that caters to that LIS. One endstation (10.0.0.99/11.0.0.99) is configured as an ARP client on both subnets, and forwards packets between subnets. Figure   SEQ Figure \* ARABIC  : Multiple Logical IP Subnets on the same ATM network, and Routing between them Windows Architecture This section discusses the way IP over ATM software (IP over ATM Client, IP over ATM Server) fits into the Windows TCP/IP and NDIS 4.1 architecture.   REF _Ref371127943 \* MERGEFORMAT  Figure 2  shows the schematic for the case of an Ethernet adapter as well as an ATM adapter. Figure   SEQ Figure \* ARABIC  : IP over ATM in the Windows Networking Architecture The ARP Interface depicted shows one virtual network interface exposed above the ATM miniport, corresponding to a single LIS.  If required, the (ATM)ARP module can be configured to expose multiple ARP interfaces to IP. ARP Interface The IP layer in the TCP/IP stack uses the ARP Interface to send and receive packets over an interface. The ARP Interface is a set of function calls (e.g.  Transmit a packet ) that form the interface between the IP layer and an underlying ARP Module. The IP layer supports multiple ARP Interfaces, which could be over different media types. In   REF _Ref371127943 \* MERGEFORMAT  Figure 2 , the IP layer sees two Interfaces, one over Ethernet, and one over ATM. The ARP Module hides the specifics of the medium from the IP layer, and provides the abstract set of services defined by the ARP Interface. The IP over ATM Client is one such ARP module. Note that the common ARP module for Ethernet, Token Ring and FDDI is part of the TCP/IP driver (TCPIP.SYS). Each ARP module supports the ARP Interface at its upper edge, and is an NDIS protocol at its lower edge. As an NDIS protocol, an ARP module uses the appropriate NDIS services for each adapter it operates on. For media such as Ethernet, the (built-in) ARP module uses connection-less NDIS services. For connection-oriented media such as ATM, a different ARP module is needed, one that uses connection-oriented NDIS services. The basic function of any ARP module is to map the destination (next-hop) IP address for a packet to the hardware address of the station to which the packet is to be sent. The hardware address is a 6-byte MAC address for Ethernet, and a 20-byte ATM address for ATM. The mechanism used to obtain this address mapping is dependent on the underlying medium. In the case of Ethernet or Token Ring, ARP Requests and Replies sent on the broadcast hardware address are used to perform address resolution. In the case of ATM, the address resolution mechanism is as outlined in  IP over ATM Operation Windows NT Bindings The Windows NT system stores information about bindings between protocols and adapters in the registry. With the plug-and-play model, when a miniport driver registers an adapter with NDIS, NDIS informs all protocols bound to the adapter , by calling their BindAdapter handler routines. Within this routine, a protocol calls NdisOpenAdapter to initiate access to the adapter, and so on. When a network component (protocol or adapter) is installed, the setup program obtains information about the component, such as its type (e.g. ndisdriver, atmdriver) and its binding rules, from the INF file for the component. It is possible to define new component types and binding rules in this file. TCP/IP Bindings The TCP/IP protocol stack (including the built-in ARP module for Ethernet and the like) is defined as belonging to the class tcpipTransport, and any adapter that has a driver of class ndisDriver is defined to be  bindable  to tcpipTransport. When the driver for such an adapter registers with NDIS, NDIS calls the BindAdapter handler for TCP/IP, which is supplied by the built-in (Ethernet) ARP module. TCP/IP will attempt to run Ethernet-style ARP over the adapter. In the case of ATM, there are two differences. First, the built-in ARP module should not be activated over an ATM adapter. Rather, we need the ATM-ARP client module to be bound to such an adapter. Second, more than one ARP Interface might be exposed to TCP/IP, over a single ATM adapter (this is optional). To ensure that TCP/IP doesn t bind directly to an ATM adapter, the INF for an ATM adapter defines the component as belonging to class ndisAtmDriver, which is not bindable to tcpipTransport. Next, the INF creates  virtual  adapter instances called IPATMARP, one for each LIS configured on the adapter. These virtual adapters are defined to be of class ndisDriver, meaning that they get bound to TCP/IP, and show up the Network Control Panel as such. However, there is no real driver associated with these virtual adapters, because of which TCP/IP s BindAdapter handler will never get called on behalf of these, and so Ethernet-style ARP will not be run on these. Example A machine has an Ethernet adapter already installed, say  ENET1 . An ATM adapter is installed on this machine, with an instance name  ATMCARD2  (note that the instance number is automatically assigned). When the IP over ATM Client is installed, it will install one Logical IP subnet (LIS0) over ATMCARD2, and the resulting virtual adapter instance will be  IPATMARP3 . In the Network Control Panel, the bindings will look like: Adapter Bound Protocols ENET1 NetBEUI Protocol NWLink IPX/SPX Compatible Transport TCP/IP Protocol WINS Client (TCP/IP) ATMCARD2 ATM UNI 3.1 Call Manager IP over ATM Client IP over ATM Server IPATMARP3 TCP/IP Protocol WINS Client (TCP/IP) Note that the IP over ATM Server component has a single binding, to the ATM adapter. Registry Layout For the IP over ATM Client Since the IP over ATM client installs itself as a protocol as well as a  virtual  adapter, the resulting registry layout is briefly discussed here.   REF _Ref372020253 \* MERGEFORMAT  Figure 3  shows an example of this layout, including the ATM Call Manager and TCP/IP sections. Services AIC59002 // Real Adapter Instance Linkage Parameters AtmArpC AddressResolutionTimeout: REG_DWORD: 0x3 IPConfig: REG_SZ: ipatmarp3\Parameters\Tcpip ARPServerList Server1 AtmAddress: REG_SZ: 4700000000003c0000a00000000000d10f521400  ATMCallManager Linkage Bind: REG_MULTI_SZ: \Device\AIC59002 ipatmarp3 //