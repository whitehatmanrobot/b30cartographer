ntime.Tracking.ProfileRemovedEventArgs">
      <summary>Provides data for the <see cref="E:System.Workflow.Runtime.Tracking.IProfileNotification.ProfileRemoved" /> event. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ProfileRemovedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ProfileRemovedEventArgs" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ProfileRemovedEventArgs.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ProfileRemovedEventArgs" /> class that applies to the specified workflow <see cref="T:System.Type" />.</summary>
      <param name="workflowType">The workflow <see cref="T:System.Type" /> for which the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> should be removed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ProfileRemovedEventArgs.WorkflowType">
      <summary>Gets or sets the workflow <see cref="T:System.Type" /> for which the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> should be removed.</summary>
      <returns>The <see cref="T:System.Type" /> of a workflow.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.ProfileUpdatedEventArgs">
      <summary>Provides the data for the <see cref="E:System.Workflow.Runtime.Tracking.IProfileNotification.ProfileUpdated" /> event. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ProfileUpdatedEventArgs.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ProfileUpdatedEventArgs" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.ProfileUpdatedEventArgs.#ctor(System.Type,System.Workflow.Runtime.Tracking.TrackingProfile)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.ProfileUpdatedEventArgs" /> class that specifies a new <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> for the specified workflow <see cref="T:System.Type" />.</summary>
      <param name="workflowType">The <see cref="T:System.Type" /> of workflow for which the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> has changed.</param>
      <param name="profile">The new <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ProfileUpdatedEventArgs.TrackingProfile">
      <summary>Gets or sets the new <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> for the workflow Type.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.ProfileUpdatedEventArgs.WorkflowType">
      <summary>Gets or sets the <see cref="T:System.Type" /> of the workflow whose <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> should be updated.</summary>
      <returns>The <see cref="T:System.Type" /> of a workflow.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.SqlTrackingQuery">
      <summary>Contains methods and properties that are used to manage queries to the tracking data that is contained in the SQL database used by a <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" />.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.SqlTrackingQuery.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingQuery" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.SqlTrackingQuery.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingQuery" /> class.</summary>
      <param name="connectionString">The connection string of the SQL database to query.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connectionString" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingQuery.ConnectionString">
      <summary>The connection string of the SQL tracking database to query.</summary>
      <returns>A SQL database connection string.</returns>
      <exception cref="T:System.ArgumentNullException">An attempt to set <see cref="P:System.Workflow.Runtime.Tracking.SqlTrackingQuery.ConnectionString" /> to a null reference (Nothing in Visual Basic) was made.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.SqlTrackingQuery.GetWorkflows(System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions)">
      <summary>Returns tracking data for a set of workflow instances that correspond to a set of query parameters specified by a <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions" />.</summary>
      <returns>A list of <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> objects that provide access to tracking data for the set of workflow instances with tracking data that matches the query parameters specified by <paramref name="options" />. </returns>
      <param name="options">A <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions" /> that specifies query parameters.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Workflow.Runtime.Tracking.SqlTrackingQuery.ConnectionString" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.SqlTrackingQuery.TryGetWorkflow(System.Guid,System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance@)">
      <summary>Tries to get query data for a specified workflow instance.</summary>
      <returns>true if tracking data is available for the requested workflow instance; otherwise, false. </returns>
      <param name="workflowInstanceId">The <see cref="T:System.Guid" /> of the workflow instance for which the tracking data is requested.</param>
      <param name="workflowInstance">When this method returns true, contains a <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> that provides access to the tracking data associated with the workflow instance. This parameter is passed uninitiailized.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Workflow.Runtime.Tracking.SqlTrackingQuery.ConnectionString" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions">
      <summary>Contains properties that are used to constrain the set of <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> objects returned by a call to <see cref="M:System.Workflow.Runtime.Tracking.SqlTrackingQuery.GetWorkflows(System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions)" />. </summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.Clear">
      <summary>Resets the properties of the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions" /> to their default values.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.StatusMaxDateTime">
      <summary>Gets or sets a <see cref="T:System.DateTime" /> that specifies the upper limit of the time period that, together with <see cref="P:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.WorkflowStatus" />, is used to constrain the set of <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> objects returned by a call to <see cref="M:System.Workflow.Runtime.Tracking.SqlTrackingQuery.GetWorkflows(System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions)" />.  </summary>
      <returns>A <see cref="T:System.DateTime" /> that specifies the upper limit of the time period used for matching workflow instances with a status specified by <see cref="P:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.WorkflowStatus" />. The default is <see cref="F:System.DateTime.MinValue" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.StatusMinDateTime">
      <summary>Gets or sets a <see cref="T:System.DateTime" /> that, together with <see cref="P:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.WorkflowStatus" />, is used to constrain the set of <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> objects returned by a call to <see cref="M:System.Workflow.Runtime.Tracking.SqlTrackingQuery.GetWorkflows(System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions)" />.   </summary>
      <returns>A <see cref="T:System.DateTime" /> that specifies the lower limit of the time period used for matching workflow instances with a status specified by <see cref="P:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.WorkflowStatus" />. The default is <see cref="F:System.DateTime.MinValue" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.TrackingDataItems">
      <summary>Gets or sets a list of data extract values which are used to constrain the set of <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> objects returned by a call to <see cref="M:System.Workflow.Runtime.Tracking.SqlTrackingQuery.GetWorkflows(System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions)" />. </summary>
      <returns>A <see cref="T:System.Collections.Generic.List`1" /> of <see cref="T:System.Workflow.Runtime.Tracking.TrackingDataItemValue" /> objects that contains specified values to be matched for data extracted from the workflow instance or a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.WorkflowStatus">
      <summary>Gets or sets the <see cref="T:System.Workflow.Runtime.WorkflowStatus" /> value that is used to constrain the set of <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> objects returned by a call to <see cref="M:System.Workflow.Runtime.Tracking.SqlTrackingQuery.GetWorkflows(System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions)" />. </summary>
      <returns>One of the <see cref="T:System.Workflow.Runtime.WorkflowStatus" /> values or null (Nothing in Visual Basic). The default is null (Nothing).</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions.WorkflowType">
      <summary>Gets or sets the workflow instance <see cref="T:System.Type" /> that is used to constrain the set of <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> objects returned by a call to <see cref="M:System.Workflow.Runtime.Tracking.SqlTrackingQuery.GetWorkflows(System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions)" />. </summary>
      <returns>A <see cref="T:System.Type" />. The default is a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.SqlTrackingService">
      <summary>Represents a tracking service that uses a SQL database to store tracking information. </summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.SqlTrackingService.#ctor(System.Collections.Specialized.NameValueCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> class by using the specified <see cref="T:System.Collections.Specialized.NameValueCollection" />.</summary>
      <param name="parameters">A <see cref="T:System.Collections.Specialized.NameValueCollection" /> that specifies properties of <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> and their initial values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.FormatException">The string value associated with a Boolean property key in <paramref name="parameters" /> is not represented by either <see cref="F:System.Boolean.TrueString" /> or <see cref="F:System.Boolean.FalseString" />.</exception>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.SqlTrackingService.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> class by using the specified database connection string.</summary>
      <param name="connectionString">A valid database connection string.</param>
      <exception cref="T:System.ArgumentException">The database connection string is not valid.</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingService.ConnectionString">
      <summary>Gets the connection string for the tracking database.</summary>
      <returns>The connection string for the tracking database.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingService.EnableRetries">
      <summary>Gets and sets a value specifying whether the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> will retry when performing a database operation.</summary>
      <returns>true if the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> should retry the operation; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingService.IsTransactional">
      <summary>Gets or sets a value that indicates whether <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> participates in workflow transactions.</summary>
      <returns>true if <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> participates in the workflow transaction; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingService.PartitionOnCompletion">
      <summary>Gets or sets a value that specifies whether tracking data for a workflow instance should be moved to the currently active partition in the database when the workflow instance is completed.</summary>
      <returns>true if tracking data should be moved to the currently active partition on workflow completion; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingService.ProfileChangeCheckInterval">
      <summary>Gets or sets a value that specifies the interval at which the database should be checked for changes to one or more of its tracking profiles.</summary>
      <returns>The interval length in milliseconds. The default is 60000.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Runtime.Tracking.SqlTrackingService.ProfileRemoved">
      <summary>Occurs when the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> detects that a <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> has been deleted. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.Runtime.Tracking.SqlTrackingService.ProfileUpdated">
      <summary>Occurs when the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> detects that a <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> has been changed. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingService.UseDefaultProfile">
      <summary>Gets or sets a value specifying whether a default <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> should be used for workflow types that do not have a tracking profile.</summary>
      <returns>true if a default tracking profile should be used; otherwise, false. The default is true.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance">
      <summary>Provides access to tracking data maintained in a SQL database by the <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> for a workflow instance.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.ActivityEvents">
      <summary>Gets the list of activity tracking records that have been sent for this workflow instance to a <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> database by the run-time tracking infrastructure.</summary>
      <returns>The list of <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" /> objects sent for this workflow instance to the tracking database by the run-time tracking infrastructure.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.AutoRefresh">
      <summary>Gets or sets a value that specifies whether property data for this <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> should be automatically updated when it is accessed.</summary>
      <returns>true if property data should be automatically refreshed when it is accessed; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.Initialized">
      <summary>Gets or sets a <see cref="T:System.DateTime" /> that indicates the time at which the first <see cref="T:System.Workflow.Runtime.Tracking.TrackingChannel" /> for this workflow instance was requested by the workflow run-time engine.</summary>
      <returns>A <see cref="T:System.DateTime" /> that indicates the time at which the first <see cref="T:System.Workflow.Runtime.Tracking.TrackingChannel" /> for this workflow instance was requested by the workflow run-time engine.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.InvokedWorkflows">
      <summary>Gets a list of <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> objects that correspond to workflows that have been invoked by this workflow.</summary>
      <returns>A list of <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> objects that correspond to workflows that have been invoked by this workflow.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.InvokingWorkflowInstanceId">
      <summary>Gets or sets the <see cref="T:System.Guid" /> of the workflow instance that invoked this workflow instance.</summary>
      <returns>The <see cref="T:System.Guid" /> of the workflow instance that invoked this workflow instance or an empty <see cref="T:System.Guid" /> if this workflow instance was not invoked by another workflow instance.</returns>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.Refresh">
      <summary>Updates the property data for this <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" />.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.Status">
      <summary>Gets the status of the workflow instance.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.WorkflowStatus" /> that represents the current status of the workflow instance.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.UserEvents">
      <summary>Gets the list of user tracking records that have been sent for this workflow instance to a <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> database by the run-time tracking infrastructure.</summary>
      <returns>The list of <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" /> objects sent for this workflow instance to the tracking database by the run-time tracking infrastructure.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.WorkflowDefinition">
      <summary>Gets an <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the current workflow definition for the workflow instance.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the current workflow definition for the workflow instance.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.WorkflowDefinitionUpdated">
      <summary>Gets a value that indicates whether the workflow has been updated since the last time <see cref="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.WorkflowDefinition" /> was loaded.</summary>
      <returns>true if the workflow has been updated; otherwise false.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.WorkflowEvents">
      <summary>Gets the list of workflow tracking records that have been sent for this workflow instance to a <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingService" /> database by the run-time tracking infrastructure.</summary>
      <returns>The list of <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord" /> objects sent for this workflow instance to the tracking database by the run-time tracking infrastructure.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.WorkflowInstanceId">
      <summary>The <see cref="T:System.Guid" /> of the workflow instance for which this <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> applies.</summary>
      <returns>The <see cref="T:System.Guid" /> of the workflow instance for which this <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance" /> applies.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.WorkflowInstanceInternalId">
      <summary>Gets or sets a number that can be used to find related records in separate views for this workflow instance.</summary>
      <returns>A number that can be used to find related records in separate views for this workflow instance.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.WorkflowType">
      <summary>Gets and sets the <see cref="T:System.Type" /> of the workflow instance.</summary>
      <returns>The <see cref="T:System.Type" /> of the workflow instance.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection">
      <summary>Contains a collection of annotations.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> class</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> class by using a list of string annotations.</summary>
      <param name="annotations">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> list of string annotations.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="annotations" /> is a null reference (Nothing in Visual Basic)</exception>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingChannel">
      <summary>The abstract base class that represents a tracking channel.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingChannel.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingChannel" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingChannel.InstanceCompletedOrTerminated">
      <summary>When implemented in a derived class, notifies a receiver of data on the tracking channel that the workflow instance associated with the tracking channel has either completed or terminated.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingChannel.Send(System.Workflow.Runtime.Tracking.TrackingRecord)">
      <summary>When implemented in a derived class, sends a <see cref="T:System.Workflow.Runtime.Tracking.TrackingRecord" /> on the <see cref="T:System.Workflow.Runtime.Tracking.TrackingChannel" />.</summary>
      <param name="record">The <see cref="T:System.Workflow.Runtime.Tracking.TrackingRecord" /> to send.</param>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingCondition">
      <summary>An abstract base class representing a comparison that can be used to constrain an <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingLocation" /> or a <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" />.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingCondition.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingCondition" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingCondition.Member">
      <summary>When overridden in a derived class, gets or sets the name of the member whose value will be compared. </summary>
      <returns>The name of the member to be compared. </returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingCondition.Operator">
      <summary>When overridden in a derived class, gets or sets the operator to use in the comparison.</summary>
      <returns>One of the <see cref="T:System.Workflow.Runtime.Tracking.ComparisonOperator" /> values.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingCondition.Value">
      <summary>When overridden in a derived class, gets or sets the value to compare.</summary>
      <returns>The value to compare.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingConditionCollection">
      <summary>Contains a collection of <see cref="T:System.Workflow.Runtime.Tracking.TrackingCondition" /> objects.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingConditionCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingConditionCollection" /> class</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingConditionCollection.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.Runtime.Tracking.TrackingCondition})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingConditionCollection" /> by using a list of <see cref="T:System.Workflow.Runtime.Tracking.TrackingCondition" /> objects.</summary>
      <param name="conditions">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> list of <see cref="T:System.Workflow.Runtime.Tracking.TrackingCondition" /> objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="conditions" /> is a null reference (Nothing in Visual Basic)</exception>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingDataItem">
      <summary>Represents a single item of data extracted from a workflow and all its associated annotations.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingDataItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingDataItem" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingDataItem.Annotations">
      <summary>Gets and sets the list of annotations associated with the extracted data.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> that contains the annotations associated with the extracted data.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingDataItem.Data">
      <summary>Gets or sets the extracted data associated with the <see cref="T:System.Workflow.Runtime.Tracking.TrackingDataItem" />.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the extracted data.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingDataItem.FieldName">
      <summary>Gets or sets the name of the property or field associated with the extracted data.</summary>
      <returns>The dot delineated name of the property or field that was extracted.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingDataItemValue">
      <summary>Contains filter criteria for data extracted from a workflow instance in a <see cref="T:System.Workflow.Runtime.Tracking.SqlTrackingQueryOptions" />. </summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingDataItemValue.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingDataItemValue" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingDataItemValue.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingDataItemValue" /> class by using the specified qualified name of an activity, data field name, and string representation of a data value.</summary>
      <param name="qualifiedName">The qualified name of the activity from which the data was extracted.</param>
      <param name="fieldName">The name of the member from which the data was extracted.</param>
      <param name="dataValue">A string representation of the value of the data.</param>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingDataItemValue.DataValue">
      <summary>Gets or sets a string representation of the value of the extracted data. </summary>
      <returns>A string representation of the value of the extracted data. The default is a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingDataItemValue.FieldName">
      <summary>Gets or sets the name of the activity member from which the data was extracted.</summary>
      <returns>The name of the activity member from which the data was extracted. The default is a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingDataItemValue.QualifiedName">
      <summary>Gets or sets the qualified name of the activity from which the data was extracted.</summary>
      <returns>The qualified name of the activity from which the data was extracted. The default is a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingExtract">
      <summary>The abstract base class representing a field or a property to be extracted from a workflow instance and its associated annotations. </summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingExtract.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingExtract" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingExtract.Annotations">
      <summary>When implemented in a derived class, gets the annotations associated with the extracted data.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> associated with the extracted data. </returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingExtract.Member">
      <summary>When implemented in a derived class, gets or sets the name of the field or property to be extracted. </summary>
      <returns>The dot delineated name of a field or a property. </returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingParameters">
      <summary>Contains information about the workflow instance associated with a <see cref="T:System.Workflow.Runtime.Tracking.TrackingChannel" />. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingParameters.#ctor(System.Guid,System.Type,System.Workflow.ComponentModel.Activity,System.Collections.Generic.IList{System.String},System.Guid,System.Guid,System.Guid,System.Guid)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingParameters" /> class.</summary>
      <param name="instanceId">The <see cref="T:System.Guid" /> of the workflow instance associated with the tracking channel.</param>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow instance associated with the tracking channel.</param>
      <param name="rootActivity">The root <see cref="T:System.Workflow.ComponentModel.Activity" /> of the workflow instance associated with the tracking channel.</param>
      <param name="callPath">A list of strings, each of which represents the <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of an activity in the call chain of the workflow instance associated with the tracking channel. Currently, only the <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of the activity that invoked the workflow instance is included in the list.</param>
      <param name="callerInstanceId">The <see cref="T:System.Guid" /> of the workflow that has called the workflow instance associated with the tracking channel.</param>
      <param name="contextGuid">A number that identifies the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the root activity of the workflow instance associated with the tracking channel.</param>
      <param name="callerContextGuid">A number that identifies the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the activity that invoked the workflow instance associated with the tracking channel.</param>
      <param name="callerParentContextGuid">A number that identifies the parent <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the activity that invoked the workflow instance associated with the tracking channel.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingParameters.CallerContextGuid">
      <summary>Gets the context ID of the caller activity.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the context ID of the caller <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingParameters.CallerInstanceId">
      <summary>Gets the <see cref="T:System.Guid" /> of the workflow instance that called the workflow instance associated with the tracking channel.</summary>
      <returns>The <see cref="T:System.Guid" /> of the workflow instance that called the workflow instance associated with the tracking channel.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingParameters.CallerParentContextGuid">
      <summary>Gets the context ID of the caller's parent activity.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the context ID of the caller's parent <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingParameters.CallPath">
      <summary>Gets a list of strings, each of which represents the <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of an activity in the call chain of the workflow instance associated with the tracking channel. </summary>
      <returns>A list of strings, each of which represents the <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of an activity in the call chain of the workflow instance associated with the tracking channel. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingParameters.ContextGuid">
      <summary>Gets the context ID of the associated activity.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the context ID of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingParameters.InstanceId">
      <summary>Gets the <see cref="T:System.Guid" /> of the workflow instance associated with the tracking channel.</summary>
      <returns>The <see cref="T:System.Guid" /> of the workflow instance associated with the tracking channel.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingParameters.RootActivity">
      <summary>Gets the root activity of the workflow instance associated with the tracking channel.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the root activity of the workflow instance associated with the tracking channel.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingParameters.WorkflowType">
      <summary>Gets the <see cref="T:System.Type" /> of the workflow instance associated with the tracking channel.</summary>
      <returns>The <see cref="T:System.Type" /> of the workflow instance associated with the tracking channel.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingProfile">
      <summary>Defines points of interest in the potential execution path of a root workflow instance about which a tracking service should be notified.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingProfile.#ctor">
      <summary>Initializes a new instance of <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" />.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingProfile.ActivityTrackPoints">
      <summary>Gets the collection of activity track points used by the runtime tracking infrastructure to filter activity status events.</summary>
      <returns>An <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackPointCollection" /> that specifies the points in a workflow instance for which the runtime tracking infrastructure should send an <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" /> to the tracking service.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingProfile.UserTrackPoints">
      <summary>Gets the collection of user track points used by the runtime tracking infrastructure to filter user events.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPointCollection" /> that specifies the points in a workflow instance for which the runtime tracking infrastructure should send a <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" /> to the tracking service.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingProfile.Version">
      <summary>Gets or sets the version of the tracking profile.</summary>
      <returns>The <see cref="T:System.Version" /> of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingProfile.WorkflowTrackPoints">
      <summary>Gets the collection of workflow track points used by the runtime tracking infrastructure to filter workflow status events.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPointCollection" /> that specifies the points in a workflow instance for which the runtime tracking infrastructure should send a <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord" /> to the tracking service.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingProfileCache">
      <summary>Provides a method that a host application can use to clear the tracking profile cache.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingProfileCache.Clear">
      <summary>Clears the tracking profile cache maintained by the runtime tracking infrastructure of all tracking profiles.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException">
      <summary>The exception that is thrown when an XML document cannot be deserialized into a <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> by a <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfileSerializer" />.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException" /> class with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> object with the collection of <see cref="T:System.Xml.Schema.ValidationEventArgs" /> associated with this exception, and additional exception information.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is a null reference (Nothing in Visual Basic)</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException.ValidationEventArgs">
      <summary>Gets a list that contains validation warnings and errors associated with this exception.</summary>
      <returns>A <see cref="T:System.Collections.IList" /> of <see cref="T:System.Xml.Schema.ValidationEventArgs" /> objects that contains validation warnings and errors associated with this exception. The default is an empty list.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingProfileSerializer">
      <summary>Provides methods to serialize and deserialize tracking profiles into and from XML documents by using the tracking profile XML schema definition (XSD).</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingProfileSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfileSerializer" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingProfileSerializer.Deserialize(System.IO.TextReader)">
      <summary>Deserializes the XML document that is contained in the text reader by using the tracking profile XML Schema definition (XSD).</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> that contains the deserialized tracking profile.</returns>
      <param name="reader">A <see cref="T:System.IO.TextReader" /> that contains an XML document.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.Workflow.Runtime.Tracking.TrackingProfileDeserializationException">
        <paramref name="reader" /> does not contain a document that conforms to the tracking profile XSD.</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingProfileSerializer.Schema">
      <summary>Gets the tracking profile XML schema definition (XSD).</summary>
      <returns>The tracking profile XSD.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingProfileSerializer.Serialize(System.IO.TextWriter,System.Workflow.Runtime.Tracking.TrackingProfile)">
      <summary>Serializes the tracking profile into an XML document by using the tracking profile XML Schema definition (XSD).</summary>
      <param name="writer">A valid <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" />.</param>
      <param name="profile">When this method returns, contains a <see cref="T:System.IO.TextWriter" /> that holds the XML document. The parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="profile" /> is a null reference (Nothing in Visual Basic).- or -<paramref name="writer" /> is a null reference(Nothing).- or -</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="profile" /> is not a valid tracking profile.</exception>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingRecord">
      <summary>The abstract base class from which <see cref="T:System.Workflow.Runtime.Tracking.ActivityTrackingRecord" />, <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" />, and <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord" /> are derived.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingRecord.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingRecord" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingRecord.Annotations">
      <summary>When overridden in a derived class, gets the collection of annotations associated with the track point.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> that contains the annotations associated with the track point to which this <see cref="T:System.Workflow.Runtime.Tracking.TrackingRecord" /> corresponds.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingRecord.EventArgs">
      <summary>When overridden in a derived class, gets or sets the event data, if any, that is associated with the tracking event that caused the tracking record to be sent.</summary>
      <returns>An <see cref="T:System.EventArgs" /> that represents the event data, if any, that is associated with the tracking event that caused the tracking record to be sent.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingRecord.EventDateTime">
      <summary>When overridden in a derived class, gets or sets the time and date of the tracking event associated with the tracking record.</summary>
      <returns>A <see cref="T:System.DateTime" /> that indicates the date and time that the tracking event occurred.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingRecord.EventOrder">
      <summary>When overridden in a derived class, gets or sets a value that indicates the order of the tracking event associated with the tracking record relative to the other tracking events emitted by the workflow instance. </summary>
      <returns>A value that indicates the order of the tracking event relative to the other tracking events emitted by the workflow instance.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingService">
      <summary>The abstract base class that provides the basic interface between a tracking service and the run-time tracking infrastructure.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingService.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingService" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingService.GetProfile(System.Guid)">
      <summary>Must be overridden in the derived class, and when implemented, returns the tracking profile for the specified workflow instance.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" />.</returns>
      <param name="workflowInstanceId">The <see cref="T:System.Guid" /> of the workflow instance.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingService.GetProfile(System.Type,System.Version)">
      <summary>Must be overridden in the derived class, and when implemented, returns the tracking profile, qualified by version, for the specified workflow <see cref="T:System.Type" />. </summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" />.</returns>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow.</param>
      <param name="profileVersionId">The <see cref="T:System.Version" /> of the tracking profile.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingService.GetTrackingChannel(System.Workflow.Runtime.Tracking.TrackingParameters)">
      <summary>Must be overridden in the derived class, and when implemented, returns the channel that the run-time tracking infrastructure uses to send tracking records to the tracking service.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.Tracking.TrackingChannel" /> that is used to send tracking records to the tracking service.</returns>
      <param name="parameters">The <see cref="T:System.Workflow.Runtime.Tracking.TrackingParameters" /> associated with the workflow instance.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingService.TryGetProfile(System.Type,System.Workflow.Runtime.Tracking.TrackingProfile@)">
      <summary>Must be overridden in the derived class, and when implemented, retrieves the tracking profile for the specified workflow type if one is available.</summary>
      <returns>true if a <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> for the specified workflow <see cref="T:System.Type" /> is available; otherwise, false. If true, the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> is returned in <paramref name="profile" />.</returns>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow for which to get the tracking profile.</param>
      <param name="profile">When this method returns, contains the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> to load. This parameter is passed un-initialized.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.TrackingService.TryReloadProfile(System.Type,System.Guid,System.Workflow.Runtime.Tracking.TrackingProfile@)">
      <summary>Must be overridden in the derived class, and when implemented, retrieves a new tracking profile for the specified workflow instance if the tracking profile has changed since it was last loaded.</summary>
      <returns>true if a new <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> should be loaded; otherwise, false. If true, the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> is returned in <paramref name="profile" />.</returns>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow instance.</param>
      <param name="workflowInstanceId">The <see cref="T:System.Guid" /> of the workflow instance.</param>
      <param name="profile">When this method returns, contains the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" /> to load. This parameter is passed un-initialized.</param>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingWorkflowChangedEventArgs">
      <summary>Contains data associated with a workflow change that occurs during the execution of a workflow instance.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingWorkflowChangedEventArgs.Changes">
      <summary>Gets the changes that occurred to the workflow instance.</summary>
      <returns>A list of <see cref="T:System.Workflow.ComponentModel.WorkflowChangeAction" /> objects that specify the changes that occurred to the workflow instance.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingWorkflowChangedEventArgs.Definition">
      <summary>Gets the workflow definition.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Activity" /> that represents the root activity of the workflow instance.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent">
      <summary>Specifies a type of workflow status event.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Created">
      <summary>The workflow instance has been created.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Completed">
      <summary>The workflow instance has completed.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Idle">
      <summary>The workflow instance is idle.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Suspended">
      <summary>The workflow instance has been suspended.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Resumed">
      <summary>A previously suspended workflow instance has resumed running.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Persisted">
      <summary>The workflow instance has been persisted.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Unloaded">
      <summary>The workflow instance has been unloaded from memory.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Loaded">
      <summary>The workflow instance has been loaded into memory.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Exception">
      <summary>An unhandled exception has occurred.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Terminated">
      <summary>The workflow instance has been terminated.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Aborted">
      <summary>The workflow instance has aborted.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Changed">
      <summary>A workflow change has occurred on the workflow instance.</summary>
    </member>
    <member name="F:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent.Started">
      <summary>The workflow instance has been started.</summary>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs">
      <summary>Contains data associated with an exception that occurs during the execution of a workflow instance.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.ContextGuid">
      <summary>Gets the context ID of the associated activity.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the context ID of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.CurrentActivityPath">
      <summary>Gets the <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of the activity currently throwing the exception.</summary>
      <returns>The <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of the activity currently throwing the exception.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.Exception">
      <summary>Gets the <see cref="T:System.Exception" /> that is being thrown by the workflow instance.</summary>
      <returns>An <see cref="T:System.Exception" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.OriginalActivityPath">
      <summary>Gets the <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of the activity that originally threw the exception.</summary>
      <returns>The <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of the activity that originally threw the exception.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs.ParentContextGuid">
      <summary>Gets the context ID of the parent activity.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the context ID of the parent <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingWorkflowSuspendedEventArgs">
      <summary>Contains information about the reason that a workflow instance was suspended.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingWorkflowSuspendedEventArgs.Error">
      <summary>Contains information about the reason that a workflow instance was suspended. This can come from the <see cref="M:System.Workflow.Runtime.WorkflowInstance.Suspend(System.String)" /> (string error) or the <see cref="P:System.Workflow.ComponentModel.SuspendActivity.Error" /> property that you set on the <see cref="T:System.Workflow.ComponentModel.SuspendActivity" /> activity.</summary>
      <returns>String value that contains the reason that a workflow instance was suspended.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs">
      <summary>Contains data associated with the termination of a workflow instance.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs.Exception">
      <summary>Gets the exception that caused the workflow instance to be terminated.</summary>
      <returns>The <see cref="T:System.Exception" /> that caused the workflow instance to be terminated.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.UserTrackingLocation">
      <summary>Defines an activity-qualified location that corresponds to a user event in the potential execution path of a root workflow instance. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingLocation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingLocation.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> class by using the unqualified name of the common language runtime (CLR) type of the user data.</summary>
      <param name="argumentTypeName">The unqualified name of the CLR type of the user data to be matched.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingLocation.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> class by using the unqualified name of the common language runtime (CLR) type of the user data and the unqualified name of the CLR type of the activity from which the user data must be emitted.</summary>
      <param name="argumentTypeName">The unqualified name of the CLR type of the user data to be matched.</param>
      <param name="activityTypeName">The unqualified name of the CLR type of the activity from which the user data must be emitted.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingLocation.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> class by using the unqualified name of the common language runtime (CLR) type of the user data and the CLR type of the activity from which the user data must be emitted.</summary>
      <param name="argumentTypeName">The unqualified name of the CLR type of the user data to be matched.</param>
      <param name="activityType">The <see cref="T:System.Type" /> of the activity from which the user data must be emitted.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingLocation.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> class using the common language runtime (CLR) type of the user data.</summary>
      <param name="argumentType">The <see cref="T:System.Type" /> of the user data to be matched.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingLocation.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> class by using the common language runtime (CLR) type of the user data and unqualified name of the CLR type of the activity from which the user data must be emitted.</summary>
      <param name="argumentType">The <see cref="T:System.Type" /> of the user data to be matched.</param>
      <param name="activityTypeName">The unqualified name of the CLR type of the activity from which the user data must be emitted.</param>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingLocation.#ctor(System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> class by using the common language runtime (CLR) type of the user data and the CLR type of the activity from which the user data must be emitted.</summary>
      <param name="argumentType">The <see cref="T:System.Type" /> of the user data to be matched.</param>
      <param name="activityType">The <see cref="T:System.Type" /> of the activity from which the user data must be emitted.</param>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ActivityType">
      <summary>Gets or sets the common language runtime (CLR) type of the activity from which the user data must be emitted to be tracked.</summary>
      <returns>The <see cref="T:System.Type" /> of the activity from which the data must be emitted.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ActivityTypeName">
      <summary>Gets or sets the unqualified name of the common language runtime (CLR) type of the activity from which the user data must be emitted to be tracked.</summary>
      <returns>The unqualified name of the <see cref="T:System.Type" /> of the activity from which the data must be emitted.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ArgumentType">
      <summary>Gets or sets the common language runtime (CLR) type of the user data to be tracked.</summary>
      <returns>The <see cref="T:System.Type" /> of the user data to be tracked.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ArgumentTypeName">
      <summary>Gets or sets the unqualified name of the common language runtime (CLR) type of the user data to be tracked.</summary>
      <returns>The unqualified name of the <see cref="T:System.Type" /> of the user data.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.Conditions">
      <summary>Gets a collection of conditions that are used to qualify the activity from which the user data must be emitted to be tracked.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.TrackingConditionCollection" /> that is used to qualify the activity from which the user data must be emitted.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.KeyName">
      <summary>Get or sets the name with which the user data must be associated for the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> to be matched.</summary>
      <returns>A string key with which the user data must be associated for the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> to be matched or a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.MatchDerivedActivityTypes">
      <summary>Gets or sets a value that indicates whether the user data should be tracked when it is emitted from activities derived from the activity type specified by <see cref="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ActivityType" /> or <see cref="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ActivityTypeName" />.</summary>
      <returns>true if the user data should be tracked when it is emitted from activities derived from the type specified by <see cref="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ActivityType" /> or <see cref="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ActivityTypeName" />; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.MatchDerivedArgumentTypes">
      <summary>The User tracking location is a way to filter user tracked data. The user can filter by the type of the user tracked data by specifying the <see cref="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ArgumentType" /> or <see cref="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ArgumentTypeName" />. Setting the MatchDerrivedArgumentTypesBoolean value to true specifies that the user tracked data can be of type ArgumentType/ArgumentTypeName or a type derived from the ArgumentType/ArgumentTypeName.</summary>
      <returns>true if user data derived from the type of the user data specified by <see cref="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ArgumentType" /> or <see cref="P:System.Workflow.Runtime.Tracking.UserTrackingLocation.ArgumentTypeName" /> should be tracked; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.UserTrackingLocationCollection">
      <summary>Contains a collection of <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> objects.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingLocationCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocationCollection" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingLocationCollection.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.Runtime.Tracking.UserTrackingLocation})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocationCollection" /> class by using a list of user locations.</summary>
      <param name="locations">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> list of <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocation" /> objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="locations" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.UserTrackingRecord">
      <summary>Contains the data sent to a tracking service by the runtime tracking infrastructure when a <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPoint" /> is matched.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingRecord.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" /> class</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackingRecord.#ctor(System.Type,System.String,System.Guid,System.Guid,System.DateTime,System.Int32,System.String,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" /> class by using the specified parameters.</summary>
      <param name="activityType">The <see cref="T:System.Type" /> of the activity associated with the user event.</param>
      <param name="qualifiedName">The <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of the activity associated with the user event.</param>
      <param name="contextGuid">A number that identifies the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the activity associated with the user event.</param>
      <param name="parentContextGuid">A number that identifies the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the parent activity of the activity associated with the user event.</param>
      <param name="eventDateTime">A <see cref="T:System.DateTime" /> that indicates the date and time of the user event associated with the tracking record.</param>
      <param name="eventOrder">The relative order in which the user event associated with this tracking record occurred in the workflow instance.</param>
      <param name="userDataKey">A key associated with the user data for this tracking record, or a null reference (Nothing in Visual Basic).</param>
      <param name="userData">The user data associated with the user event.</param>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.ActivityType">
      <summary>Gets or sets the common language runtime (CLR) type of the activity that emitted the user data for which this <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" /> was created.</summary>
      <returns>The <see cref="T:System.Type" /> of the activity that emitted the user data.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.Annotations">
      <summary>Gets the collection of annotations associated with the user event.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> that contains the annotations that are associated with the user event by the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPoint" /> that was matched in the <see cref="T:System.Workflow.Runtime.Tracking.TrackingProfile" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.Body">
      <summary>Gets a list containing any additional data extracted from the workflow for the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPoint" /> that was matched.</summary>
      <returns>A list of <see cref="T:System.Workflow.Runtime.Tracking.TrackingDataItem" /> objects each of which contains a single piece of extracted data and its associated annotations.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.ContextGuid">
      <summary>Context of the activity.</summary>
      <returns>A number that identifies the context of the activity.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.EventArgs">
      <summary>Always a null reference (Nothing in Visual Basic) for a <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" />.</summary>
      <returns>A null reference (Nothing) for a <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.EventDateTime">
      <summary>Gets or sets the date and time that the user event occurred.</summary>
      <returns>A <see cref="T:System.DateTime" /> value.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.EventOrder">
      <summary>Gets or sets a value that indicates the order of the user event that matched the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPoint" /> in the workflow instance.</summary>
      <returns>A value that indicates the order of the user event in the workflow instance.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.ParentContextGuid">
      <summary>Context of the parent activity.</summary>
      <returns>A number that identifies the context of the parent activity.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.QualifiedName">
      <summary>Gets or sets the qualified name of the activity associated with this <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" />.</summary>
      <returns>The <see cref="P:System.Workflow.ComponentModel.Activity.QualifiedName" /> of the <see cref="T:System.Workflow.ComponentModel.Activity" /> from which the user data for this user event was emitted.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.UserData">
      <summary>Gets and sets the user data for this user event.</summary>
      <returns>The user data for which the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" /> was created.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackingRecord.UserDataKey">
      <summary>Gets or sets a key associated with the user data for this <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingRecord" />.</summary>
      <returns>A string key associated with the user data for this tracking record.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.UserTrackPoint">
      <summary>Defines a point, associated with a user event, to be tracked in the potential execution path of a root workflow instance. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackPoint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPoint" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackPoint.Annotations">
      <summary>Gets the collection of annotations associated with the track point.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" />. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackPoint.ExcludedLocations">
      <summary>Gets the collection of locations that should be excluded from the track point by the runtime tracking infrastructure.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocationCollection" /> that specifies locations to be excluded from the track point. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackPoint.Extracts">
      <summary>Gets a collection that specifies data to be extracted from the workflow instance and sent to the tracking service.</summary>
      <returns>An <see cref="T:System.Workflow.Runtime.Tracking.ExtractCollection" /> that specifies data to be extracted and sent to the tracking service. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.UserTrackPoint.MatchingLocations">
      <summary>Gets the collection of locations that should be included in matching for the track point by the runtime tracking infrastructure.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.UserTrackingLocationCollection" /> that specifies the locations to be matched for the track point. The default is an empty collection.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.UserTrackPointCollection">
      <summary>Contains a collection of <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPoint" /> objects.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackPointCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPointCollection" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.UserTrackPointCollection.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.Runtime.Tracking.UserTrackPoint})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPointCollection" /> class by using a list of user track points.</summary>
      <param name="points">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> list of <see cref="T:System.Workflow.Runtime.Tracking.UserTrackPoint" /> objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.WorkflowDataTrackingExtract">
      <summary>Specifies a property or a field to be extracted from the root activity of the workflow and sent to the tracking service together with and an associated collection of annotations when a track point is matched.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.WorkflowDataTrackingExtract.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowDataTrackingExtract" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.WorkflowDataTrackingExtract.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowDataTrackingExtract" /> class by using the specified name of a member of the root activity.</summary>
      <param name="member">The dot delineated name of the field or property of the root activity that should be extracted and sent to the tracking service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.WorkflowDataTrackingExtract.Annotations">
      <summary>Gets the collection of annotations associated with the extracted data.</summary>
      <returns>The <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> associated with the activity property or field to be extracted. The default is an empty collection.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.WorkflowDataTrackingExtract.Member">
      <summary>Gets or sets the field or the property to be extracted from the root activity when a track point is matched.</summary>
      <returns>A dot delineated name that specifies a field or a property of the root activity. The default is a null reference (Nothing in Visual Basic). </returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.WorkflowTrackingLocation">
      <summary>Defines an interest in specific workflow status events that occur in a root workflow instance; used for matching by a <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPoint" /> in a tracking profile. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.WorkflowTrackingLocation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackingLocation" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.WorkflowTrackingLocation.#ctor(System.Collections.Generic.IList{System.Workflow.Runtime.Tracking.TrackingWorkflowEvent})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackingLocation" /> class that matches the specified tracking workflow events.</summary>
      <param name="events">IList of tracking workflow events to be matched. </param>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.WorkflowTrackingLocation.Events">
      <summary>Gets the list of workflow status events that will be matched for this location.</summary>
      <returns>A list of <see cref="T:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent" /> values that specifies the workflow status events for which the location will be matched. The default is an empty list.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord">
      <summary>Contains the data sent to the tracking service by the runtime tracking infrastructure when it matches a <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPoint" />. It is also used in the return list of the <see cref="P:System.Workflow.Runtime.Tracking.SqlTrackingWorkflowInstance.WorkflowEvents" /> property.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord.#ctor(System.Workflow.Runtime.Tracking.TrackingWorkflowEvent,System.DateTime,System.Int32,System.EventArgs)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord" /> class by using the specified <see cref="T:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent" /> value, <see cref="T:System.DateTime" />, number, and <see cref="T:System.EventArgs" />.</summary>
      <param name="trackingWorkflowEvent">One of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent" /> values.</param>
      <param name="eventDateTime">A <see cref="T:System.DateTime" /> that indicates the date and time of the workflow status event associated with the tracking record.</param>
      <param name="eventOrder">The relative order in which the workflow status event associated with this tracking record occurred in the workflow instance.</param>
      <param name="eventArgs">Either a <see cref="T:System.Workflow.Runtime.Tracking.TrackingWorkflowSuspendedEventArgs" />, a <see cref="T:System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs" />, a <see cref="T:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs" />, or a null reference (Nothing in Visual Basic).</param>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord.Annotations">
      <summary>Gets the collection of annotations associated with the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPoint" /> that was matched.</summary>
      <returns>An <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> that contains the annotations that are associated with the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPoint" />.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord.EventArgs">
      <summary>Gets or sets an <see cref="T:System.EventArgs" /> that contains additional data associated with certain types of workflow status events.</summary>
      <returns>Either a <see cref="T:System.Workflow.Runtime.Tracking.TrackingWorkflowSuspendedEventArgs" />, a <see cref="T:System.Workflow.Runtime.Tracking.TrackingWorkflowTerminatedEventArgs" />, a <see cref="T:System.Workflow.Runtime.Tracking.TrackingWorkflowExceptionEventArgs" />, or a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord.EventDateTime">
      <summary>Gets or sets the date and time that the workflow tracking event occurred.</summary>
      <returns>A <see cref="T:System.DateTime" /> that indicates the date and time that the workflow status event occurred.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord.EventOrder">
      <summary>Gets or sets a value that indicates the order in the workflow instance of the workflow status event that matched the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPoint" />.</summary>
      <returns>A value that indicates the order of the workflow status event in the workflow instance.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.WorkflowTrackingRecord.TrackingWorkflowEvent">
      <summary>Gets or sets the type of workflow status event associated with the tracking record.</summary>
      <returns>One of the <see cref="T:System.Workflow.Runtime.Tracking.TrackingWorkflowEvent" /> values.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.WorkflowTrackPoint">
      <summary>Defines a point associated with a set of workflow status events that are tracked in the potential execution path of a root workflow instance. </summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.WorkflowTrackPoint.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPoint" /> class.</summary>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.WorkflowTrackPoint.Annotations">
      <summary>Gets the collection of annotations associated with the track point.</summary>
      <returns>An <see cref="T:System.Workflow.Runtime.Tracking.TrackingAnnotationCollection" /> that contains the annotations associated with the track point. The default is an empty collection; it specifies that no annotations are to be associated with the track point.</returns>
    </member>
    <member name="P:System.Workflow.Runtime.Tracking.WorkflowTrackPoint.MatchingLocation">
      <summary>Gets or sets the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackingLocation" /> that specifies the workflow status events that should be matched by the runtime tracking infrastructure for the track point.</summary>
      <returns>A <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackingLocation" />.</returns>
    </member>
    <member name="T:System.Workflow.Runtime.Tracking.WorkflowTrackPointCollection">
      <summary>Contains a collection of <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPoint" /> objects.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.WorkflowTrackPointCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPointCollection" /> class.</summary>
    </member>
    <member name="M:System.Workflow.Runtime.Tracking.WorkflowTrackPointCollection.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.Runtime.Tracking.WorkflowTrackPoint})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPointCollection" /> class by using a list of workflow track points.</summary>
      <param name="points">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> list of <see cref="T:System.Workflow.Runtime.Tracking.WorkflowTrackPoint" /> objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="points" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Workflow.ComponentModel.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Workflow.ComponentModel</name>
  </assembly>
  <members>
    <member name="T:System.Workflow.ComponentModel.Activity">
      <summary>Represents the fundamental building block of workflows. <see cref="T:System.Workflow.ComponentModel.Activity" /> is the base class for all activities. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Activity" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Activity" /> class, while initializing the <see cref="P:System.Workflow.ComponentModel.Activity.Name" />. </summary>
      <param name="name">The name to associate with this instance. The name must conform to the variable naming conventions for the programming language that is being used in the Workflow project, and must be unique in the workflow.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="F:System.Workflow.ComponentModel.Activity.ActivityContextGuidProperty">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that represents the <see cref="T:System.Guid" /> of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that is associated with the <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Cancel(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Called by the workflow runtime to cancel execution of an activity that is currently executing.</summary>
      <returns>The status at the end of the operation that determines whether the activity remains in the canceling state or transitions to the closed state.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> that contains the instance to cancel.</param>
    </member>
    <member name="E:System.Workflow.ComponentModel.Activity.Canceling">
      <summary>Occurs when the activity execution is canceled. </summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Activity.CancelingEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.ComponentModel.Activity.Canceling" /> event.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Clone">
      <summary>Creates a deep copy of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>A deep copy of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.ComponentModel.Activity.Closed">
      <summary>Occurs when an <see cref="T:System.Workflow.ComponentModel.Activity" /> has completed execution.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Activity.ClosedEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.ComponentModel.Activity.Closed" /> event.</summary>
    </member>
    <member name="E:System.Workflow.ComponentModel.Activity.Compensating">
      <summary>Occurs when running a compensation method on the <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Activity.CompensatingEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.ComponentModel.Activity.Compensating" /> event.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Activity.Description">
      <summary>Gets or sets the user-defined description of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The text description of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Activity.Enabled">
      <summary>Gets or sets a value that indicates whether this instance is enabled for execution and validation.</summary>
      <returns>true if enabled for execution and validation; false otherwise.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Execute(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Called by the workflow runtime to execute an activity. </summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> of the run task, which determines whether the activity remains in the executing state, or transitions to the closed state.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> to associate with this <see cref="T:System.Workflow.ComponentModel.Activity" /> and execution.</param>
    </member>
    <member name="E:System.Workflow.ComponentModel.Activity.Executing">
      <summary>Occurs when the <see cref="T:System.Workflow.ComponentModel.Activity" /> is run.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Activity.ExecutingEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.ComponentModel.Activity.Executing" /> event, which occurs when the activity is executed.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Activity.ExecutionResult">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionResult" /> of the last attempt to run this instance.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionResult" /> of the last attempt to run this instance.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Activity.ExecutionStatus">
      <summary>Gets the current <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> of this instance.</summary>
      <returns>The current <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> of this instance.</returns>
    </member>
    <member name="E:System.Workflow.ComponentModel.Activity.Faulting">
      <summary>Occurs when an exception is raised during the running of the instance.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Activity.FaultingEvent">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that represents the <see cref="E:System.Workflow.ComponentModel.Activity.Faulting" /> event.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.GetActivityByName(System.String)">
      <summary>Returns the instance of the <see cref="T:System.Workflow.ComponentModel.Activity" /> whose name is requested from the set of all activities running under the root activity of this instance, which is within the workflow.</summary>
      <returns>The instance of the <see cref="T:System.Workflow.ComponentModel.Activity" /> whose name is requested from the set of all activities running under the root activity of this instance.</returns>
      <param name="activityQualifiedName">The name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> to search for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityQualifiedID" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.GetActivityByName(System.String,System.Boolean)">
      <summary>Returns the instance of the <see cref="T:System.Workflow.ComponentModel.Activity" /> whose name is requested from the set of all activities under the root the <see cref="T:System.Workflow.ComponentModel.Activity" /> of this instance if the second parameter is false and under the current <see cref="T:System.Workflow.ComponentModel.Activity" /> if the second parameter is true.</summary>
      <returns>The instance of the <see cref="T:System.Workflow.ComponentModel.Activity" /> whose name is requested from the set of all activities under the root the <see cref="T:System.Workflow.ComponentModel.Activity" /> of this instance if the second parameter is false and under the current <see cref="T:System.Workflow.ComponentModel.Activity" /> if the second parameter is true.</returns>
      <param name="activityQualifiedName">The name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> to search for.</param>
      <param name="withinThisActivityOnly">The value that indicates whether to limit the search to activities contained within this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityQualifiedID" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)">
      <summary>Called when an exception is raised within the context of the execution of this instance.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> that results from an attempt to cancel this instance.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for this instance.</param>
      <param name="exception">The <see cref="T:System.Exception" /> that caused this fault.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="executionContext" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Initialize(System.IServiceProvider)">
      <summary>Called by the workflow runtime to initialize an activity during the construction of a new workflow instance. This method is called during the construction of a dynamic <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> that provides the initialization service.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Invoke``1(System.EventHandler{``0},``0)">
      <summary>Subscribes an <see cref="T:System.EventHandler" /> and invokes that delegate.</summary>
      <param name="handler">The <see cref="T:System.EventHandler" /> to be invoked.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> to associate with this event</param>
      <typeparam name="T">The specified type.</typeparam>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Invoke``1(System.Workflow.ComponentModel.IActivityEventListener{``0},``0)">
      <summary>Subscribes an <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> and invokes that delegate.</summary>
      <param name="eventListener">The <see cref="T:System.Workflow.ComponentModel.IActivityEventListener`1" /> to be invoked.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> to associate with this event</param>
      <typeparam name="T">The specified type.</typeparam>
    </member>
    <member name="P:System.Workflow.ComponentModel.Activity.IsDynamicActivity">
      <summary>Gets information about whether the activity is executing within the default <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the workflow instance.</summary>
      <returns>Returns false if the activity is executing within the default <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> of the workflow instance, otherwise returns true.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity)">
      <summary>Loads an instance of an <see cref="T:System.Workflow.ComponentModel.Activity" /> from a <see cref="T:System.IO.Stream" />.</summary>
      <returns>An instance of an <see cref="T:System.Workflow.ComponentModel.Activity" /> from a <see cref="T:System.IO.Stream" />.</returns>
      <param name="stream">The <see cref="T:System.IO.Stream" /> from which to load.</param>
      <param name="outerActivity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> that owns the context for the deserialized <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Load(System.IO.Stream,System.Workflow.ComponentModel.Activity,System.Runtime.Serialization.IFormatter)">
      <summary>Loads an instance of an <see cref="T:System.Workflow.ComponentModel.Activity" /> from a <see cref="T:System.IO.Stream" /> using the custom <see cref="T:System.Runtime.Serialization.IFormatter" /> for deserialization.</summary>
      <returns>An instance of an <see cref="T:System.Workflow.ComponentModel.Activity" /> from a <see cref="T:System.IO.Stream" />.</returns>
      <param name="stream">The target <see cref="T:System.IO.Stream" /> of the load operation.</param>
      <param name="outerActivity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> that owns the context for the deserialized <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="formatter">The <see cref="T:System.Runtime.Serialization.IFormatter" /> used to read from the <see cref="T:System.IO.Stream" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formatter" /> is a null reference (Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Activity.Name">
      <summary>Gets or sets the name of this instance. This name must conform to the variable naming convention of the programming language that is being used in the Workflow project.</summary>
      <returns>The name of this instance.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.OnActivityExecutionContextLoad(System.IServiceProvider)">
      <summary>Called by the workflow runtime whenever an <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> is loaded. For example, this method is called during the creation of an <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> as well as every time the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> is reincarnated when a workflow instance is loaded from persistent storage.</summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> that provides the service.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.OnActivityExecutionContextUnload(System.IServiceProvider)">
      <summary>Called by the workflow runtime whenever an <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> is unloaded. For example, this method is called during completion of an <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> as well as every time the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> is unloaded when a workflow instance is persisted.</summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> that provides the service.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.OnClosed(System.IServiceProvider)">
      <summary>Called by the workflow runtime as part of the activity's transition to the closed state.</summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> that provides the service.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Activity.Parent">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> that contains this <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Activity" /> that is a parent to this <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Activity.QualifiedName">
      <summary>Gets the qualified name of the activity. Qualified activity names are always unique in a workflow instance.</summary>
      <returns>The qualified name of the instance.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.RaiseEvent(System.Workflow.ComponentModel.DependencyProperty,System.Object,System.EventArgs)">
      <summary>Raises an <see cref="F:System.Reflection.MemberTypes.Event" /> associated with the specified dependency property.</summary>
      <param name="dependencyEvent">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> associated with this <see cref="F:System.Reflection.MemberTypes.Event" />.</param>
      <param name="sender">The <see cref="T:System.Object" /> source of the <see cref="F:System.Reflection.MemberTypes.Event" />.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> associated with the <see cref="F:System.Reflection.MemberTypes.Event" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.RaiseGenericEvent``1(System.Workflow.ComponentModel.DependencyProperty,System.Object,``0)">
      <summary>Raises the event associated with the referenced <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
      <param name="dependencyEvent">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> associated with this <see cref="F:System.Reflection.MemberTypes.Event" />.</param>
      <param name="sender">The <see cref="T:System.Object" /> source of the event.</param>
      <param name="e">The <see cref="T:System.EventArgs" /> associated with the <see cref="F:System.Reflection.MemberTypes.Event" />.</param>
      <typeparam name="T">The specified type.</typeparam>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.RegisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})">
      <summary>Registers the specified <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> for the status change event.</summary>
      <param name="dependencyProp">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> to register.</param>
      <param name="activityStatusChangeListener">The object that implements the Event Listener interface for this registration.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dependencyProp" /> is not one of the following:<see cref="F:System.Workflow.ComponentModel.Activity.ExecutingEvent" /><see cref="F:System.Workflow.ComponentModel.Activity.CancelingEvent" /><see cref="F:System.Workflow.ComponentModel.Activity.ClosedEvent" /><see cref="F:System.Workflow.ComponentModel.Activity.CompensatingEvent" /><see cref="F:System.Workflow.ComponentModel.Activity.FaultingEvent" /><see cref="F:System.Workflow.ComponentModel.Activity.StatusChangedEvent" /></exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Save(System.IO.Stream)">
      <summary>Writes the <see cref="T:System.Workflow.ComponentModel.Activity" /> to a <see cref="T:System.IO.Stream" /> for persistence.</summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to which to save the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Save(System.IO.Stream,System.Runtime.Serialization.IFormatter)">
      <summary>Writes the <see cref="T:System.Workflow.ComponentModel.Activity" /> to a <see cref="T:System.IO.Stream" /> for persistence using the custom <see cref="T:System.Runtime.Serialization.IFormatter" /> provided for serialization.</summary>
      <param name="stream">The target <see cref="T:System.IO.Stream" /> of the save operation.</param>
      <param name="formatter">The binary or custom <see cref="T:System.Runtime.Serialization.IFormatter" /> for the serialization.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="formatter" /> is a null reference (Nothing).</exception>
      <exception cref="T:System.InvalidOperationException">This instance is in design mode.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.ComponentModel.Activity.StatusChanged">
      <summary>Occurs when the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> of a running <see cref="T:System.Workflow.ComponentModel.Activity" /> changes.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Activity.StatusChangedEvent">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="E:System.Workflow.ComponentModel.Activity.StatusChanged" /> event.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.ToString">
      <summary>Provides a string that represents this instance.</summary>
      <returns>This instance.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.TrackData(System.Object)">
      <summary>Informs the run-time tracking infrastructure of pending tracking information.</summary>
      <param name="userData">
        <see cref="T:System.Object" /> that contains the tracking information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="userData" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.TrackData(System.String,System.Object)">
      <summary>Informs the run-time tracking infrastructure of pending tracking information.</summary>
      <param name="userDataKey">The key to the user data that has changed.</param>
      <param name="userData">
        <see cref="T:System.Object" /> that contains the tracking information.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="userData" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.Uninitialize(System.IServiceProvider)">
      <summary>When overridden in a derived class, provides un-initialization by a service provider for the activity. </summary>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> that provides the service.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Activity.UnregisterForStatusChange(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.IActivityEventListener{System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs})">
      <summary>Un-registers the specified <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> for the status change event.</summary>
      <param name="dependencyProp">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> to un-register.</param>
      <param name="activityStatusChangeListener">The object that implements the Event Listener interface for this registration.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="dependencyProp" /> is not one of the following:<see cref="F:System.Workflow.ComponentModel.Activity.ExecutingEvent" /><see cref="F:System.Workflow.ComponentModel.Activity.CancelingEvent" /><see cref="F:System.Workflow.ComponentModel.Activity.ClosedEvent" /><see cref="F:System.Workflow.ComponentModel.Activity.CompensatingEvent" /><see cref="F:System.Workflow.ComponentModel.Activity.FaultingEvent" /><see cref="F:System.Workflow.ComponentModel.Activity.StatusChangedEvent" /></exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Activity.WorkflowInstanceId">
      <summary>Gets the <see cref="T:System.Guid" /> associated with the instance.</summary>
      <returns>The <see cref="T:System.Guid" /> associated with the instance.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityBind">
      <summary>Binds an activity's property to a property, field, indexer, method, event, or another activity's property. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityBind.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityBind.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> class with the <paramref name="name" /> parameter.</summary>
      <param name="name">The name of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityBind.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> class with <paramref name="name" /> and <paramref name="path" /> parameters.</summary>
      <param name="name">The name of the <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="path">The path of the new <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityBind.GetRuntimeValue(System.Workflow.ComponentModel.Activity)">
      <summary>Gets the <see cref="T:System.Object" /> representing the run-time value of this <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</summary>
      <returns>The <see cref="T:System.Object" /> representing the run-time value of this <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</returns>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> that owns this bind.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityBind.GetRuntimeValue(System.Workflow.ComponentModel.Activity,System.Type)">
      <summary>Gets the <see cref="T:System.Object" /> representing the run-time value of this <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</summary>
      <returns>The <see cref="T:System.Object" /> representing the run-time value of this <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</returns>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> that owns this bind.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of the object if a <see cref="T:System.Delegate" />; otherwise a null reference (Nothing in Visual Basic). <paramref name="activity" /> is null.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityBind.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> points to.</summary>
      <returns>The name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> points to.</returns>
      <exception cref="T:System.Data.ReadOnlyException">Occurs when you attempt to set this value when the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> is not in design mode.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityBind.Path">
      <summary>Gets or sets the path for a member of the target activity. The value can use dotted notation to indicate a path to a nested value. For example, a path of "A.B.C" indicates that the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> is to a field or property named 'C', which is a member of the field or property 'B', which in turn is a field or property 'A', which is a member of the target activity.</summary>
      <returns>The path of the data item of interest on the chosen <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <exception cref="T:System.Data.ReadOnlyException">Occurs when you attempt to set this value when the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> is not in design mode.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityBind.ProvideValue(System.IServiceProvider)">
      <summary>Returns the current instance of this class.</summary>
      <returns>The current instance of this class.</returns>
      <param name="provider">An <see cref="T:System.IServiceProvider" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityBind.SetRuntimeValue(System.Workflow.ComponentModel.Activity,System.Object)">
      <summary>Sets the run-time value.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> owning this bind.</param>
      <param name="value">The <see cref="T:System.Object" /> to set the run-time value to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityBind.ToString">
      <summary>Calculates and returns a combination of the <see cref="P:System.Workflow.ComponentModel.ActivityBind.Name" /> and <see cref="P:System.Workflow.ComponentModel.ActivityBind.Path" /> property strings.</summary>
      <returns>A combination of the <see cref="P:System.Workflow.ComponentModel.ActivityBind.Name" /> and <see cref="P:System.Workflow.ComponentModel.ActivityBind.Path" /> property strings.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityBind.UserData">
      <summary>Gets an <see cref="T:System.Collections.IDictionary" /> of user data relating to this instance.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> of user data relating to this instance.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityChangeAction">
      <summary>Represents a proposed change to a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> within a running workflow instance. This class must be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityChangeAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ActivityChangeAction" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityChangeAction.#ctor(System.Workflow.ComponentModel.CompositeActivity)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ActivityChangeAction" /> class, initializing the associated <see cref="T:System.Workflow.ComponentModel.CompositeActivity" />.</summary>
      <param name="compositeActivity">The <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> associated with the change.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="compositeActivity" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityChangeAction.OwnerActivityDottedPath">
      <summary>Gets and sets the <see cref="P:System.Workflow.ComponentModel.ActivityChangeAction.OwnerActivityDottedPath" /> of the <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> associated with this instance.</summary>
      <returns>The <see cref="P:System.Workflow.ComponentModel.ActivityChangeAction.OwnerActivityDottedPath" /> of the <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityChangeAction.ValidateChanges(System.Workflow.ComponentModel.Activity)">
      <summary>Validates the changes pending on the target activity.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains any <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> resulting from running each <see cref="T:System.Workflow.ComponentModel.Compiler.Validator" /> defined for the target activity.</returns>
      <param name="contextActivity">The activity to have its changes validated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contextActivity" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityCollection">
      <summary>Models a strongly typed <see cref="T:System.Collections.ICollection" /> of type <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.#ctor(System.Workflow.ComponentModel.Activity)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ActivityCollection" /> class, initializing an owner <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <param name="owner">The <see cref="T:System.Workflow.ComponentModel.Activity" /> designated as owning this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="owner" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="owner" /> is not a descendent of <see cref="T:System.Workflow.ComponentModel.Activity" />.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.Add(System.Workflow.ComponentModel.Activity)">
      <summary>Adds the <see cref="T:System.Workflow.ComponentModel.Activity" /> to the <see cref="T:System.Collections.ICollection" />.</summary>
      <param name="item">The <see cref="T:System.Workflow.ComponentModel.Activity" /> to be added to the <see cref="T:System.Collections.ICollection" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.Clear">
      <summary>Removes every <see cref="T:System.Workflow.ComponentModel.Activity" /> from the <see cref="T:System.Collections.ICollection" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.Contains(System.Workflow.ComponentModel.Activity)">
      <summary>Provides a test for membership of the <see cref="T:System.Workflow.ComponentModel.Activity" /> in the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Activity" /> belongs to the <see cref="T:System.Collections.ICollection" />; otherwise, false.</returns>
      <param name="item">The <see cref="T:System.Workflow.ComponentModel.Activity" /> being tested for membership.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.Count">
      <summary>Gets the number of members of the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>The number of members of the <see cref="T:System.Collections.ICollection" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.GetEnumerator">
      <summary>Implements an enumeration interface to the <see cref="T:System.Collections.ICollection" />.  </summary>
      <returns>Returns an enumerator that can iterate through the <see cref="T:System.Collections.ReadOnlyCollectionBase" /> instance. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.IndexOf(System.Workflow.ComponentModel.Activity)">
      <summary>Gets the index of the <see cref="T:System.Workflow.ComponentModel.Activity" /> in the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>The index of the <see cref="T:System.Workflow.ComponentModel.Activity" /> in the <see cref="T:System.Collections.ICollection" />. Otherwise -1 (if <see cref="T:System.Workflow.ComponentModel.Activity" /> is not in the <see cref="T:System.Collections.ICollection" />).</returns>
      <param name="item">The activity for which to acquire the index. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.Insert(System.Int32,System.Workflow.ComponentModel.Activity)">
      <summary>Inserts the item at the index in the <see cref="T:System.Collections.ICollection" />. </summary>
      <param name="index">Zero-based index of the collection at which to insert the item.</param>
      <param name="item">The <see cref="T:System.Workflow.ComponentModel.Activity" /> to be inserted into the collection.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.Item(System.Int32)">
      <summary>Gets or sets the activity in the <see cref="T:System.Collections.ICollection" /> based on the index.</summary>
      <returns>A member activity of the <see cref="T:System.Collections.ICollection" />, whose index in the <see cref="T:System.Collections.ICollection" /> was specified in the call.</returns>
      <param name="index">Zero-based index into the <see cref="T:System.Collections.ICollection" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">The property is set and the <see cref="T:System.Collections.IList" /> is read-only.</exception>
      <exception cref="T:System.Exception">An attempt to set to an <see cref="T:System.Object" /> that is not an <see cref="T:System.Workflow.ComponentModel.Activity" />.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.Item(System.String)">
      <summary>Gets the activity in the <see cref="T:System.Collections.ICollection" /> based on the string which is a unique key.</summary>
      <returns>A member <see cref="T:System.Workflow.ComponentModel.Activity" /> of the <see cref="T:System.Collections.ICollection" />; the key in the <see cref="T:System.Collections.ICollection" /> which was specified in the call.</returns>
      <param name="key">Unique identifier for activity in the <see cref="T:System.Collections.ICollection" />.</param>
    </member>
    <member name="E:System.Workflow.ComponentModel.ActivityCollection.ListChanged">
      <summary>Raised whenever a change is made to the contents of this <see cref="T:System.Collections.ICollection" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.Remove(System.Workflow.ComponentModel.Activity)">
      <summary>Removes the activity specified in the call from the <see cref="T:System.Collections.ICollection" />.</summary>
      <returns>true if the operation succeeded; otherwise, false.</returns>
      <param name="item">The activity to remove from the <see cref="T:System.Collections.ICollection" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Workflow.ComponentModel.Activity" /> in the <see cref="T:System.Collections.ICollection" /> at the specified <paramref name="index" />.</summary>
      <param name="index">Position in a zero-based index to remove the activity from the collection.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{T}#Add(System.Workflow.ComponentModel.Activity)">
      <summary>Adds an object to the <see cref="T:System.Collections.IList" /> at the end of the <see cref="T:System.Collections.IList" />.</summary>
      <param name="item"></param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{T}#Clear">
      <summary>Clears all activities from the <see cref="T:System.Collections.IList" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{T}#Contains(System.Workflow.ComponentModel.Activity)">
      <summary>Gets a value that indicates whether the <see cref="T:System.Object" /> is a member of the collection.</summary>
      <returns>true if value is in the collection; otherwise, false.</returns>
      <param name="item"></param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{T}#CopyTo(System.Workflow.ComponentModel.Activity[],System.Int32)">
      <summary>Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.</summary>
      <param name="array">The <see cref="T:System.Array" /> which is the target of the copy operation.</param>
      <param name="arrayIndex"></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is less than zero.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> is multidimensional. <paramref name="index" /> is equal to or greater than the length of <paramref name="array" />.The number of elements in the source <see cref="T:System.Collections.ICollection" /> is greater than the available space from <paramref name="index" /> to the end of the destination array.</exception>
      <exception cref="T:System.InvalidCastException">The type <see cref="T:System.Workflow.ComponentModel.Activity" /> cannot be cast automatically to the type of the destination <paramref name="array" />.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{T}#Count">
      <summary>Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="T:System.Collections.IList" /> is read-only. </summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> is read-only; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#ICollection{T}#Remove(System.Workflow.ComponentModel.Activity)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />. </summary>
      <returns>true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />. </returns>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />. </param>
      <exception cref="T:System.NotSupportedException">The ICollection is read-only.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Returns an enumerator that iterates through the collection. </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList{T}#IndexOf(System.Workflow.ComponentModel.Activity)">
      <summary>Determines the index of a specific item in the <see cref="T:System.Collections.IList" />. </summary>
      <returns>The index of <paramref name="item" /> if found in the list; otherwise, -1. </returns>
      <param name="item">The object to locate in the <see cref="T:System.Collections.IList" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList{T}#Insert(System.Int32,System.Workflow.ComponentModel.Activity)">
      <summary>Inserts an <see cref="T:System.Object" /> into the <see cref="T:System.Collections.IList" /> at the zero-based index specified.</summary>
      <param name="index">The zero-based position of the insertion.</param>
      <param name="item"></param>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList{T}#Item(System.Int32)">
      <summary>Gets or sets the element at the specified index.</summary>
      <returns>The <see cref="T:System.Object" /> at the specified index.</returns>
      <param name="index">The zero-based index of the element to get or set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">The ICollection is read-only.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#Generic#IList{T}#RemoveAt(System.Int32)">
      <summary>Removes the <see cref="T:System.Collections.IList" /> item at the specified <paramref name="index" />.</summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.IList" />.</exception>
      <exception cref="T:System.NotSupportedException">The ICollection is read-only.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)"></member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#IsSynchronized">
      <summary>Gets a value that indicates whether access to the <see cref="T:System.Collections.Generic.ICollection`1" /> is synchronized, that is thread-safe.</summary>
      <returns>true if access to the <see cref="T:System.Collections.Generic.ICollection`1" /> is synchronized, that is, thread-safe; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.System#Collections#ICollection#SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.Generic.ICollection`1" />.</summary>
      <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.Generic.ICollection`1" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> that iterates through the underlying <see cref="T:System.Collections.IList" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the collection.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Add(System.Object)"></member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Clear"></member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Contains(System.Object)"></member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>Gets the zero-based index of the <see cref="T:System.Object" /> in the underlying activities collection.</summary>
      <returns>The zero-based index of the <see cref="T:System.Object" /> in the underlying activities collection.</returns>
      <param name="value">The <see cref="T:System.Object" /> to be indexed.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Insert(System.Int32,System.Object)"></member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IsFixedSize">
      <summary>Gets a value indicating whether the <see cref="T:System.Collections.IList" /> has a fixed size.</summary>
      <returns>true if the <see cref="T:System.Collections.IList" /> has a fixed size; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#IsReadOnly"></member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Item(System.Int32)"></member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollection.System#Collections#IList#Remove(System.Object)">
      <summary>Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList" />.</summary>
      <param name="value">The <see cref="T:System.Object" /> to remove from the <see cref="T:System.Collections.IList" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList" /> is read-only. <see cref="T:System.Collections.IList" /> has a fixed size.</exception>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityCollectionChangeAction">
      <summary>Represents an enumeration of the permissible actions which may be performed on an <see cref="T:System.Workflow.ComponentModel.ActivityCollection" />, which typically represents the collection of all child activities of a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityCollectionChangeAction.Add">
      <summary>The enumerator corresponding to adding a new <see cref="T:System.Workflow.ComponentModel.Activity" /> to the <see cref="T:System.Workflow.ComponentModel.ActivityCollection" />.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityCollectionChangeAction.Remove">
      <summary>The enumerator corresponding to removing an <see cref="T:System.Workflow.ComponentModel.Activity" /> from the <see cref="T:System.Workflow.ComponentModel.ActivityCollection" />.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityCollectionChangeAction.Replace">
      <summary>The enumerator corresponding to replacing an <see cref="T:System.Workflow.ComponentModel.Activity" /> in the <see cref="T:System.Workflow.ComponentModel.ActivityCollection" />.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs">
      <summary>Represents the information needed by an event handler to perform custom processing whenever the contents of an <see cref="T:System.Workflow.ComponentModel.ActivityCollection" /> changes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs.#ctor(System.Int32,System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity},System.Collections.Generic.ICollection{System.Workflow.ComponentModel.Activity},System.Object,System.Workflow.ComponentModel.ActivityCollectionChangeAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs" /> class. </summary>
      <param name="index">The index of the change within the subject <see cref="T:System.Workflow.ComponentModel.ActivityCollection" />.</param>
      <param name="removedItems">A strongly typed <see cref="T:System.Collections.ICollection" /> of type <see cref="T:System.Workflow.ComponentModel.Activity" /> containing each removed <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="addedItems">A strongly typed <see cref="T:System.Collections.ICollection" /> of type <see cref="T:System.Workflow.ComponentModel.Activity" /> containing each added <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="owner">The <see cref="T:System.Object" /> which originated the event.</param>
      <param name="action">The <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeAction" /> corresponding to the event.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs.#ctor(System.Int32,System.Workflow.ComponentModel.Activity,System.Workflow.ComponentModel.Activity,System.Object,System.Workflow.ComponentModel.ActivityCollectionChangeAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs" /> class. </summary>
      <param name="index">The index of the change within the subject <see cref="T:System.Workflow.ComponentModel.ActivityCollection" />.</param>
      <param name="removedActivity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> which was removed from the collection.</param>
      <param name="addedActivity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> which was added to the collection.</param>
      <param name="owner">The <see cref="T:System.Object" /> which originated the event.</param>
      <param name="action">The <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeAction" /> corresponding to the event.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs.Action">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeAction" /> representing the type of change that occurred.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeAction" /> representing the type of change that occurred.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs.AddedItems">
      <summary>Gets a strongly typed <see cref="T:System.Collections.ICollection" /> of type <see cref="T:System.Workflow.ComponentModel.Activity" /> containing each added <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>A strongly typed <see cref="T:System.Collections.ICollection" /> of type <see cref="T:System.Workflow.ComponentModel.Activity" /> containing each added <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs.Index">
      <summary>Gets the index of the change originating the event.</summary>
      <returns>The index of the change originating the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs.Owner">
      <summary>Gets the <see cref="T:System.Object" /> which originated the event.</summary>
      <returns>The <see cref="T:System.Object" /> which originated the event.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs.RemovedItems">
      <summary>Gets a strongly typed <see cref="T:System.Collections.ICollection" /> of type <see cref="T:System.Workflow.ComponentModel.Activity" /> containing each removed <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>A strongly typed <see cref="T:System.Collections.ICollection" /> of type <see cref="T:System.Workflow.ComponentModel.Activity" /> containing each removed <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityCondition">
      <summary>Represents an abstract class for an expression, which evaluates to a Boolean. This class must be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCondition.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ActivityCondition" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityCondition.Evaluate(System.Workflow.ComponentModel.Activity,System.IServiceProvider)">
      <summary>Evaluates the underlying condition. </summary>
      <returns>The Boolean resulting from evaluating the underlying expression.</returns>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with this condition.</param>
      <param name="provider">The <see cref="T:System.IServiceProvider" /> for this condition evaluation.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityExecutionContext">
      <summary>Represents the execution environment of an <see cref="T:System.Workflow.ComponentModel.Activity" />. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityExecutionContext.Activity">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Activity" /> that currently executes within this execution context.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Activity" /> associated to this execution context.</returns>
      <exception cref="T:System.ObjectDisposedException">This instance is marked for garbage collection.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContext.CancelActivity(System.Workflow.ComponentModel.Activity)">
      <summary>Called by a composite activity to schedule the cancellation of a child activity. The workflow runtime disallows cancellation of a child activity that is not in the <see cref="E:System.Workflow.ComponentModel.Activity.Executing" /> state.</summary>
      <param name="activity">The canceled <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="activity" /> is not a valid child of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />. This means that either the argument is equal to the associated <see cref="P:System.Workflow.ComponentModel.ActivityExecutionContext.Activity" /> or that the argument is not in the commented state and is a child of the <see cref="P:System.Workflow.ComponentModel.ActivityExecutionContext.Activity" /> associated with this <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> has been disposed.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="activity" /> is not in the <see cref="E:System.Workflow.ComponentModel.Activity.Executing" /> state.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContext.CloseActivity">
      <summary>Indicates to the workflow runtime that the currently executing activity should transition to the <see cref="E:System.Workflow.ComponentModel.Activity.Closed" /> state.</summary>
      <exception cref="T:System.InvalidOperationException">The status of the associated <see cref="P:System.Workflow.ComponentModel.ActivityExecutionContext.Activity" /> is not equal to <see cref="E:System.Workflow.ComponentModel.Activity.Executing" /> or <see cref="E:System.Workflow.ComponentModel.Activity.Canceling" /> or <see cref="E:System.Workflow.ComponentModel.Activity.Compensating" /> or <see cref="E:System.Workflow.ComponentModel.Activity.Closed" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The disposed <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityExecutionContext.ContextGuid">
      <summary>Gets the ContextID of the associated <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The ContextID of the associated <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionContext.CurrentExceptionProperty">
      <summary>Represents an exception that has occurred during the execution of the workflow instance. This property has a value only when an activity is in the faulting state.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContext.ExecuteActivity(System.Workflow.ComponentModel.Activity)">
      <summary>Called by a composite activity to schedule the execution of a child activity. The workflow runtime disallows execution of a child activity that is not in the initialized state.</summary>
      <param name="activity">The executed <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="activity" /> is not a valid child of the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />. This means that either the argument is equal to the associated <see cref="P:System.Workflow.ComponentModel.ActivityExecutionContext.Activity" /> or that the argument is not in the commented state and is a child of the <see cref="P:System.Workflow.ComponentModel.ActivityExecutionContext.Activity" /> associated with this <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</exception>
      <exception cref="T:System.InvalidOperationException">The status is neither initialized nor <see cref="E:System.Workflow.ComponentModel.Activity.Closed" />.</exception>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> has been disposed.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityExecutionContext.ExecutionContextManager">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContextManager" /> associated with this instance.</summary>
      <returns>the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContextManager" /> associated with this instance.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContext.GetService``1">
      <summary>Returns a service provider of the specified <see cref="T:System.Type" />.</summary>
      <returns>A service provider <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" />.</returns>
      <typeparam name="T">The specified type for which the provider is to be returned.</typeparam>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> has been disposed.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContext.GetService(System.Type)">
      <summary>Returns a service of the specified type.</summary>
      <returns>A service <see cref="T:System.Object" /> of the specified <see cref="T:System.Type" />.</returns>
      <param name="serviceType">The <see cref="T:System.Type" /> of the service.</param>
      <exception cref="T:System.ObjectDisposedException">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> has been disposed.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContext.System#IDisposable#Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContext.TrackData(System.Object)">
      <summary>Invokes the track method for the associated <see cref="P:System.Workflow.ComponentModel.ActivityExecutionContext.Activity" />.</summary>
      <param name="userData">An object that specifies the data to track.</param>
      <exception cref="T:System.ArgumentNullException">If <paramref name="userData" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ObjectDisposedException">If the <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with this instance is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContext.TrackData(System.String,System.Object)">
      <summary>Invokes the track method for the associated <see cref="P:System.Workflow.ComponentModel.ActivityExecutionContext.Activity" />.</summary>
      <param name="userDataKey">The member of <paramref name="userData" /> to track.</param>
      <param name="userData">The data to track.</param>
      <exception cref="T:System.ArgumentNullException">If <paramref name="userData" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ObjectDisposedException">If the <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with this instance is a null reference (Nothing).</exception>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityExecutionContextManager">
      <summary>Allows a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> to create and manage execution contexts for its child activities. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContextManager.CompleteExecutionContext(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Marks an execution context as completed.</summary>
      <param name="childContext">The designated <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="childContext" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="childContext" /> is not contained in this instance's <see cref="P:System.Workflow.ComponentModel.ActivityExecutionContextManager.ExecutionContexts" />.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContextManager.CompleteExecutionContext(System.Workflow.ComponentModel.ActivityExecutionContext,System.Boolean)">
      <summary>Marks an execution context as completed.</summary>
      <param name="childContext">The designated <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</param>
      <param name="forcePersist">Boolean that indicates whether the completed context will be persisted.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="childContext" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="childContext" /> is not contained in this instance's <see cref="P:System.Workflow.ComponentModel.ActivityExecutionContextManager.ExecutionContexts" />.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContextManager.CreateExecutionContext(System.Workflow.ComponentModel.Activity)">
      <summary>Creates an <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for the designated <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The created <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for the designated <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <param name="activity">The designated <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="activity" /> is not a valid child activity of owner of this context.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityExecutionContextManager.ExecutionContexts">
      <summary>Represents the set of execution contexts, created by the current activity, that have not yet been completed.</summary>
      <returns>The collection that contains the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />(s) associated with this instance.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContextManager.GetExecutionContext(System.Workflow.ComponentModel.Activity)">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> associated with the designated <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> associated with the designated <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <param name="activity">The designated <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> is a null reference (Nothing in Visual basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionContextManager.GetPersistedExecutionContext(System.Guid)">
      <summary>Retrieves the persisted <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> corresponding to the designated <see cref="T:System.Guid" />.</summary>
      <returns>The persisted <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> corresponding to the designated <see cref="T:System.Guid" />.</returns>
      <param name="contextGuid">The designated <see cref="T:System.Guid" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityExecutionContextManager.PersistedExecutionContexts">
      <summary>Represents the set of execution contexts, created by the current activity, that have been completed and were persisted upon their completion.</summary>
      <returns>The collection of type <see cref="T:System.Guid" /> that represents the set of all persisted <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityExecutionResult">
      <summary>Enumeration of activity result values that qualifies the state of an <see cref="T:System.Workflow.ComponentModel.Activity" /> that has an <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> of Closed.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionResult.None">
      <summary>The activity is not in the <see cref="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Closed" /> state.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionResult.Succeeded">
      <summary>The activity has transitioned to the closed state from the executing state.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionResult.Canceled">
      <summary>The activity has transitioned to the closed state from the canceling state.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionResult.Compensated">
      <summary>The activity has transitioned to the closed state from the compensating state.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionResult.Faulted">
      <summary>The activity has transitioned to the closed state from the faulting state.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionResult.Uninitialized">
      <summary>The activity has transitioned to the closed state from the initialized state.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityExecutionStatus">
      <summary>Enumeration of activity status values that correspond to the life cycle of an activity within a running workflow instance.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Initialized">
      <summary>Represents the status when an activity is being initialized.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Executing">
      <summary>Represents the status when an activity is executing.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Canceling">
      <summary>Represents the status when an activity is in the process of being canceled.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Closed">
      <summary>Represents the status when an activity is closed.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Compensating">
      <summary>Represents the status when an activity is compensating.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Faulting">
      <summary>Represents the status when an activity is faulting.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs">
      <summary>Holds information relating to the change of execution status event for an <see cref="T:System.Workflow.ComponentModel.Activity" />. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs.Activity">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Activity" /> that raised the event.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Activity" /> that raised the event.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs.ExecutionResult">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionResult" /> of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that raised the event corresponding to the value when the event occurred.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionResult" /> of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that raised the event corresponding to the value when the event occurred.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs.ExecutionStatus">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that raised the event corresponding to the value when the event occurred.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that raised the event corresponding to the value when the event occurred.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs.ToString">
      <summary>Provides a <see cref="T:System.String" /> representing the current instance.</summary>
      <returns>A <see cref="T:System.String" /> representing the current instance.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.AddedActivityAction">
      <summary>Represents a proposed addition of an <see cref="T:System.Workflow.ComponentModel.Activity" /> to a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> within a running workflow instance.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.AddedActivityAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.AddedActivityAction" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.AddedActivityAction.#ctor(System.Workflow.ComponentModel.CompositeActivity,System.Workflow.ComponentModel.Activity)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.AddedActivityAction" /> class by using a specified activity and composite activity.</summary>
      <param name="compositeActivity">The <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> that the <see cref="T:System.Workflow.ComponentModel.AddedActivityAction" /> is based on.</param>
      <param name="activityAdded">The <see cref="T:System.Workflow.ComponentModel.Activity" /> added to the workflow.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="compositeActivity" /> or <paramref name="activityAdded" /> are a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.AddedActivityAction.AddedActivity">
      <summary>Gets or sets the <see cref="T:System.Workflow.ComponentModel.Activity" /> added to the workflow.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Activity" /> added to the workflow.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.AddedActivityAction.Index">
      <summary>Gets the index of the added <see cref="T:System.Workflow.ComponentModel.Activity" /> with the <see cref="P:System.Workflow.ComponentModel.CompositeActivity.Activities" /> collection of the parent <see cref="T:System.Workflow.ComponentModel.CompositeActivity" />.</summary>
      <returns>The index value of the new <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.AlternateFlowActivityAttribute">
      <summary>Custom attribute which indicates that the activity supports an alternative flow. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.AlternateFlowActivityAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.AlternateFlowActivityAttribute" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.CancellationHandlerActivity">
      <summary>Represents cancellation logic that can be associated with a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" />. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CancellationHandlerActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CancellationHandlerActivity" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CancellationHandlerActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CancellationHandlerActivity" /> class using the name of the activity. </summary>
      <param name="name">The user-defined name of the activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CancellationHandlerActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.CompensatableTransactionScopeActivity">
      <summary>Defines a compensatable version of the <see cref="T:System.Workflow.ComponentModel.TransactionScopeActivity" /> activity. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CompensatableTransactionScopeActivity" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CompensatableTransactionScopeActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.System#Workflow#ComponentModel#ICompensatableActivity#Compensate(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Called by the workflow runtime to compensate an activity that is in the <see cref="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Closed" /> state. The activity must have a value of <see cref="F:System.Workflow.ComponentModel.ActivityExecutionResult.Succeeded" /> for its <see cref="P:System.Workflow.ComponentModel.Activity.ExecutionResult" /> property in order to be compensatable. </summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> after operation has been tried. </returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for the operation.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.CompensatableTransactionScopeActivity.TransactionOptions">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.WorkflowTransactionOptions" /> associated with this instance.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.WorkflowTransactionOptions" /> associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.CompensateActivity">
      <summary>Triggers the compensation of a completed child <see cref="T:System.Workflow.ComponentModel.Activity" /> that implements the <see cref="T:System.Workflow.ComponentModel.ICompensatableActivity" /> interface. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompensateActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CompensateActivity" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompensateActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CompensateActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompensateActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.CompensateActivity.TargetActivityName">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> to compensate.</summary>
      <returns>A string that contains the name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> to compensate.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.CompensateActivity.TargetActivityNameProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.ComponentModel.CompensateActivity.TargetActivityName" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.CompensationHandlerActivity">
      <summary>Specifies workflow logic that undoes, or compensates for, the successful execution of the associated <see cref="T:System.Workflow.ComponentModel.CompositeActivity" />. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompensationHandlerActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CompensationHandlerActivity" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompensationHandlerActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CompensationHandlerActivity" /> class using the name of the activity.</summary>
      <param name="name">A string that contains the name of this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityName" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompensationHandlerActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.CompositeActivity">
      <summary>Derivative of <see cref="T:System.Workflow.ComponentModel.Activity" /> that is the base class for all activities that contain other activities. A <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> is responsible for managing the execution of its child activities.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.Activity})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> class from an <see cref="T:System.Object" /> which implements the <see cref="T:System.Collections.IEnumerable" /> interface with type <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <param name="children">The <see cref="T:System.Object" /> implementing the <see cref="T:System.Collections.IEnumerable" /> interface with type <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> class, along with the name for that activity.</summary>
      <param name="name">The name for the instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.CompositeActivity.Activities">
      <summary>Gets the object representing the collection, <see cref="T:System.Workflow.ComponentModel.ActivityCollection" />, of all child activities.</summary>
      <returns>
        <see cref="T:System.Workflow.ComponentModel.ActivityCollection" /> of all child activities.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.ApplyWorkflowChanges(System.Workflow.ComponentModel.WorkflowChanges)">
      <summary>Applies the <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> manifest in the parameter to this instance.</summary>
      <param name="workflowChanges">The <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> to apply.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="workflowChanges" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.CompositeActivity.CanModifyActivities">
      <summary>Gets or sets a value which controls whether the individual activities within <see cref="P:System.Workflow.ComponentModel.CompositeActivity.Activities" /> can be modified.</summary>
      <returns>true if the individual activities within <see cref="P:System.Workflow.ComponentModel.CompositeActivity.Activities" /> can be modified; otherwise false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.Dispose(System.Boolean)">
      <summary>Calls <see cref="M:System.Workflow.ComponentModel.DependencyObject.Dispose(System.Boolean)" /> on this instance, and optionally calls <see cref="M:System.Workflow.ComponentModel.DependencyObject.Dispose" /> on all child activities of this instance.</summary>
      <param name="disposing">true to release both managed and unmanaged resources used by this instance and all child activities of this instance; false to release only the unmanaged resources of this instance.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.CompositeActivity.EnabledActivities">
      <summary>Gets the read-only collection that represents the subset of <see cref="P:System.Workflow.ComponentModel.CompositeActivity.Activities" /> that are enabled. </summary>
      <returns>The read-only collection that represents the subset of <see cref="P:System.Workflow.ComponentModel.CompositeActivity.Activities" /> that are enabled.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.GetDynamicActivities(System.Workflow.ComponentModel.Activity)">
      <summary>Returns an array that contains all of the currently executing instances of the specified activity.</summary>
      <returns>An array of activity instances that are currently executing.</returns>
      <param name="activity">The specified <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.HandleFault(System.Workflow.ComponentModel.ActivityExecutionContext,System.Exception)">
      <summary>Called when an exception is raised within the context of the execution of this instance.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> that results from an attempt to cancel this instance.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for this instance.</param>
      <param name="exception">The <see cref="T:System.Exception" /> that caused this fault.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="executionContext" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.Initialize(System.IServiceProvider)">
      <summary>Initializes all appropriate child activities of this instance and the specified <see cref="T:System.IServiceProvider" />.</summary>
      <param name="provider">The specified <see cref="T:System.IServiceProvider" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="provider" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeAdd(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)">
      <summary>Calls when an activity is added.</summary>
      <param name="executionContext">The specified <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</param>
      <param name="addedActivity">The specified <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="executionContext" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="addedActivity" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.OnActivityChangeRemove(System.Workflow.ComponentModel.ActivityExecutionContext,System.Workflow.ComponentModel.Activity)">
      <summary>Called when an activity is removed.</summary>
      <param name="executionContext">The specified <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" />.</param>
      <param name="removedActivity">The specified <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextLoad(System.IServiceProvider)">
      <summary>Called by the workflow runtime engine every time the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for this activity is loaded.</summary>
      <param name="provider">An <see cref="T:System.Object" /> that implements <see cref="T:System.IServiceProvider" /> and provides services to this instance.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.OnActivityExecutionContextUnload(System.IServiceProvider)">
      <summary>Called by the workflow runtime engine every time the <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for this activity is unloaded.</summary>
      <param name="provider">An <see cref="T:System.Object" /> that implements <see cref="T:System.IServiceProvider" /> and provides services to this instance.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.OnListChanged(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)">
      <summary>Performs additional processing when the <see cref="P:System.Workflow.ComponentModel.CompositeActivity.Activities" /> property changes.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs" /> broadcast by the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.OnListChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)">
      <summary>Event that occurs before a change being made to the underlying <see cref="P:System.Workflow.ComponentModel.CompositeActivity.Activities" />.</summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> relating to the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.OnWorkflowChangesCompleted(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Called after changes have been made to the collection <see cref="P:System.Workflow.ComponentModel.CompositeActivity.Activities" /> of this instance.</summary>
      <param name="rootContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> associated with this instance.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.CompositeActivity.Uninitialize(System.IServiceProvider)">
      <summary>Called by the workflow runtime engine when an activity transitions into the <see cref="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Closed" /> state from the <see cref="F:System.Workflow.ComponentModel.ActivityExecutionStatus.Initialized" /> state.</summary>
      <param name="provider">An <see cref="T:System.Object" /> that implements <see cref="T:System.IServiceProvider" /> and provides services to this instance.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.DependencyObject">
      <summary>The base class for all objects that have dependency properties. This class must be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.AddHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)">
      <summary>Adds a handler for an event of a <see cref="T:System.Workflow.ComponentModel.DependencyObject" />.</summary>
      <param name="dependencyEvent">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />. </param>
      <param name="value">The <see cref="T:System.Object" /> that represents the value of this property. In this case, a <see cref="T:System.Delegate" /> type.</param>
      <exception cref="T:System.ArgumentNullException">Either of the arguments is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">Value is of incorrect <see cref="T:System.Type" />.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="dependencyEvent" /> represents a non-event <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyObject.DesignMode">
      <summary>Gets the value that indicates whether this instance is in design or run-time mode.</summary>
      <returns>true if this instance is in design mode; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.Dispose">
      <summary>Releases all the resources used by the <see cref="T:System.Workflow.ComponentModel.DependencyObject" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources and optionally releases the managed resources used by <see cref="T:System.Workflow.ComponentModel.DependencyObject" />.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.Finalize">
      <summary>Provided as an override to <see cref="M:System.Object.Finalize" /> to clean up any unmanaged resources deterministically.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.GetBinding(System.Workflow.ComponentModel.DependencyProperty)">
      <summary>Provides access to the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> associated with the specific <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> associated with the specific <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</returns>
      <param name="dependencyProperty">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.GetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Type)">
      <summary>Retrieves the <see cref="T:System.Object" /> that is the subject of an <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</summary>
      <returns>The <see cref="T:System.Object" /> that is the subject of an <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</returns>
      <param name="bind">The <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</param>
      <param name="targetType">The <see cref="T:System.Type" /> of the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bind" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="targetType" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.GetInvocationList``1(System.Workflow.ComponentModel.DependencyProperty)">
      <summary>Gets an array that contains the delegates for the specified <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
      <returns>An array that contains the delegates for the specified <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</returns>
      <param name="dependencyEvent">The specified <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <typeparam name="T">The type of the returned delegates.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyEvent" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dependencyEvent" /> does not correspond to an event.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)">
      <summary>Provides access to the value of the designated <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
      <returns>The object that represents the value of the designated <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</returns>
      <param name="dependencyProperty">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.GetValueBase(System.Workflow.ComponentModel.DependencyProperty)">
      <summary>Provides access to the bound object of a <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> and bypasses the <see cref="M:System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)" /> override.</summary>
      <returns>The bound object of a <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />. This bypasses the <see cref="M:System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)" /> override.</returns>
      <param name="dependencyProperty">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> to get the value of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyProperty" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.InitializeProperties">
      <summary>Performs initialization on dependency properties when overridden in a derived class.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.IsBindingSet(System.Workflow.ComponentModel.DependencyProperty)">
      <summary>Indicates whether the value of a <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> is set as a binding. See <see cref="M:System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)" />.</summary>
      <returns>true if set as a binding; otherwise, false.</returns>
      <param name="dependencyProperty">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> to test.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyProperty" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.MetaEquals(System.Workflow.ComponentModel.DependencyObject)">
      <summary>Determines whether the metaproperties of this <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> equals the metaproperties of the parameterized <see cref="T:System.Workflow.ComponentModel.DependencyObject" />.</summary>
      <returns>true if the metaproperties are equal; otherwise, false.</returns>
      <param name="dependencyObject">The <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> to compare with for equality.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyObject.ParentDependencyObject">
      <summary>Gets the parent <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> in the <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> graph.</summary>
      <returns>The parent <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> in the <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> graph.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.RemoveHandler(System.Workflow.ComponentModel.DependencyProperty,System.Object)">
      <summary>Removes an <see cref="T:System.EventHandler" /> from an associated <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
      <param name="dependencyEvent">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <param name="value">The <see cref="T:System.Object" /> that represents the value of this property. In this case, a <see cref="T:System.Delegate" /> type.</param>
      <exception cref="T:System.ArgumentNullException">Either of the arguments is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="dependencyEvent" /> is a metaproperty.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="dependencyEvent" /> is not an event.</exception>
      <exception cref="T:System.Data.ReadOnlyException">The <paramref name="value" /> is a <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> and this instance is not in <see cref="P:System.Workflow.ComponentModel.DependencyObject.DesignMode" />.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.RemoveProperty(System.Workflow.ComponentModel.DependencyProperty)">
      <summary>Removes a <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> from the <see cref="T:System.Workflow.ComponentModel.DependencyObject" />.</summary>
      <returns>true if operation was successful; otherwise, false.</returns>
      <param name="dependencyProperty">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> to be removed.</param>
      <exception cref="T:System.ArgumentNullException">The argument is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.SetBinding(System.Workflow.ComponentModel.DependencyProperty,System.Workflow.ComponentModel.ActivityBind)">
      <summary>Sets the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> for the specified <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />. </summary>
      <param name="dependencyProperty">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <param name="bind">The <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> to set to.</param>
      <exception cref="T:System.ArgumentNullException">Either of the arguments is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> associated with the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> is read-only.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> associated with the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> is metadata.</exception>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> associated with the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> is not bindable.</exception>
      <exception cref="T:System.InvalidOperationException">This instance is not in <see cref="P:System.Workflow.ComponentModel.DependencyObject.DesignMode" />.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.SetBoundValue(System.Workflow.ComponentModel.ActivityBind,System.Object)">
      <summary>Sets the value of the target <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</summary>
      <param name="bind">The <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</param>
      <param name="value">The <see cref="T:System.Object" /> to set the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bind" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.SetReadOnlyPropertyValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)">
      <summary>Sets the value of a <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />, which is read-only.</summary>
      <param name="dependencyProperty">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <param name="value">The <see cref="T:System.Object" /> that represents the value.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dependencyProperty" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)">
      <summary>Sets the value of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> to the object.</summary>
      <param name="dependencyProperty">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> to be set.</param>
      <param name="value">The <see cref="T:System.Object" /> to set the value to.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyObject.SetValueBase(System.Workflow.ComponentModel.DependencyProperty,System.Object)">
      <summary>Sets the value of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> to the specified <see cref="T:System.Object" />, bypassing the <see cref="M:System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)" />.</summary>
      <param name="dependencyProperty">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> to be set to the <see cref="T:System.Object" />.</param>
      <param name="value">The <see cref="T:System.Object" /> that becomes the value of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyProperty" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyObject.Site">
      <summary>Gets or sets a reference to the <see cref="P:System.Workflow.ComponentModel.DependencyObject.Site" /> component of the <see cref="T:System.Workflow.ComponentModel.DependencyObject" />.</summary>
      <returns>The <see cref="P:System.Workflow.ComponentModel.DependencyObject.Site" /> component of the <see cref="T:System.Workflow.ComponentModel.DependencyObject" />.</returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="E:System.Workflow.ComponentModel.DependencyObject.System#ComponentModel#IComponent#Disposed">
      <summary>Represents the method that handles the Disposed event of a component.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyObject.UserData">
      <summary>Gets an <see cref="T:System.Collections.IDictionary" /> that associates custom data with this class instance.</summary>
      <returns>A dictionary that acts as an extensibility hook for developers to manipulate <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> declarations for a design tool and associate custom data with individual activity declarations.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.DependencyProperty">
      <summary>A special kind of property that can be defined or attached to a <see cref="T:System.Workflow.ComponentModel.DependencyObject" />. There are three kinds of dependency properties: instance properties, meta properties, and attached properties. This class cannot be inherited.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyProperty.DefaultMetadata">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> that represents user-defined data for this <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> for this <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyProperty.FromName(System.String,System.Type)">
      <summary>Gets the registered <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> based on the <see cref="P:System.Workflow.ComponentModel.DependencyProperty.Name" /> and <see cref="P:System.Workflow.ComponentModel.DependencyProperty.OwnerType" />.</summary>
      <returns>The registered <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> based on the <see cref="P:System.Workflow.ComponentModel.DependencyProperty.Name" /> and <see cref="P:System.Workflow.ComponentModel.DependencyProperty.OwnerType" />.</returns>
      <param name="propertyName">The <see cref="P:System.Workflow.ComponentModel.DependencyProperty.Name" /> of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <param name="ownerType">The required value of <see cref="P:System.Workflow.ComponentModel.DependencyProperty.OwnerType" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyProperty.FromType(System.Type)">
      <summary>Creates an <see cref="T:System.Collections.IList" /> of type <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that belong to a specific <see cref="T:System.Type" />.</summary>
      <returns>
        <see cref="T:System.Collections.IList" /> of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that belong to a specific <see cref="T:System.Type" />.</returns>
      <param name="ownerType">The <see cref="T:System.Type" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyProperty.GetHashCode">
      <summary>Returns the hash code for this instance.</summary>
      <returns>A hash code for this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyProperty.IsAttached">
      <summary>Gets the property that indicates whether this <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> is associated to a <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> by registration.</summary>
      <returns>true if attached to a <see cref="T:System.Workflow.ComponentModel.DependencyObject" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyProperty.IsEvent">
      <summary>Gets the property that indicates whether the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> is an event <see cref="T:System.Delegate" />.</summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> is an event <see cref="T:System.Delegate" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyProperty.Name">
      <summary>Gets the <see cref="P:System.Workflow.ComponentModel.DependencyProperty.Name" /> of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />. </summary>
      <returns>The <see cref="P:System.Workflow.ComponentModel.DependencyProperty.Name" /> of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyProperty.OwnerType">
      <summary>Gets the <see cref="T:System.Type" /> of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
      <returns>The <see cref="T:System.Type" /> of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyProperty.PropertyType">
      <summary>Gets the <see cref="T:System.Type" /> of the value stored in the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
      <returns>The <see cref="T:System.Type" /> of the value stored in the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyProperty.Register(System.String,System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> class that has the properties parameterized according to the input parameters.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> class that has the properties parameterized according to the input parameters.</returns>
      <param name="name">The name of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <param name="propertyType">
        <see cref="T:System.Type" /> of the value that the property can contain.</param>
      <param name="ownerType">Owner <see cref="T:System.Type" /> of the dependency property.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyProperty.Register(System.String,System.Type,System.Type,System.Workflow.ComponentModel.PropertyMetadata)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> class that has the properties parameterized according to the input parameters.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> class that has the properties parameterized according to the input parameters.</returns>
      <param name="name">The name of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <param name="propertyType">
        <see cref="T:System.Type" /> of the value the property can contain.</param>
      <param name="ownerType">Owner <see cref="T:System.Type" /> of the dependency property.</param>
      <param name="defaultMetadata">Additional property options.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> class that has the properties parameterized according to the input parameters. This instance is intended to declare properties that are used on objects other than the objects of owning type.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> class that has the properties parameterized according to the input parameters.</returns>
      <param name="name">The name of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <param name="propertyType">
        <see cref="T:System.Type" /> of the value the property can contain.</param>
      <param name="ownerType">Owner <see cref="T:System.Type" /> of the dependency property.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Workflow.ComponentModel.PropertyMetadata)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> class that has the properties parameterized according to the input parameters.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> class that has the properties parameterized according to the input parameters.</returns>
      <param name="name">The name of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <param name="propertyType">
        <see cref="T:System.Type" /> of the value the property can contain.</param>
      <param name="ownerType">Owner <see cref="T:System.Type" /> of the dependency property.</param>
      <param name="defaultMetadata">Additional property options.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Workflow.ComponentModel.PropertyMetadata,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> class that has the properties parameterized according to the input parameters.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> class that has the properties parameterized according to the input parameters.</returns>
      <param name="name">The name of the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <param name="propertyType">
        <see cref="T:System.Type" /> of the value the property can contain.</param>
      <param name="ownerType">Owner <see cref="T:System.Type" /> of the dependency property.</param>
      <param name="defaultMetadata">Additional property options.</param>
      <param name="validatorType">
        <see cref="T:System.Type" /> of object that implements validation logic for the attached property.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyProperty.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data required to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> associated with the data.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.DependencyProperty.ToString">
      <summary>Overrides the <see cref="T:System.Object" /> method to return the <see cref="P:System.Workflow.ComponentModel.DependencyProperty.Name" /> property value.</summary>
      <returns>The <see cref="P:System.Workflow.ComponentModel.DependencyProperty.Name" /> property value.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.DependencyProperty.ValidatorType">
      <summary>Gets the <see cref="T:System.Type" /> implementing validation logic specific to the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
      <returns>The <see cref="T:System.Type" /> implementing validation logic specific to this instance.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.DependencyPropertyOptions">
      <summary>Represents an enumeration of <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> options.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.DependencyPropertyOptions.Default">
      <summary>Default option. No noted characteristic.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.DependencyPropertyOptions.ReadOnly">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.DependencyPropertyOptions.Optional">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> is an optional property.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.DependencyPropertyOptions.Metadata">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> represents metadata.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.DependencyPropertyOptions.NonSerialized">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /></summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.DependencyPropertyOptions.DelegateProperty">
      <summary>This option is used to specify whether or not a property is of type <see cref="T:System.Delegate" />. It is important to use this to disambiguate the delegate properties from events.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.FaultHandlerActivity">
      <summary>Represents the activity class used to handle an <see cref="T:System.Exception" /> of the type specified by the <see cref="P:System.Workflow.ComponentModel.FaultHandlerActivity.FaultType" /> property. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.FaultHandlerActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.FaultHandlerActivity" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.FaultHandlerActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.FaultHandlerActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityName" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.FaultHandlerActivity.Fault">
      <summary>Gets the <see cref="T:System.Exception" /> that is being handled by this <see cref="T:System.Workflow.ComponentModel.FaultHandlerActivity" />.</summary>
      <returns>The <see cref="T:System.Exception" /> associated with this instance. null is returned if the activity did not handle any exceptions.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.FaultHandlerActivity.FaultType">
      <summary>Gets and sets the <see cref="T:System.Type" /> of the exceptions to be handled by the <see cref="T:System.Workflow.ComponentModel.FaultHandlerActivity" />. Exceptions of the type derived from the type specified in <see cref="P:System.Workflow.ComponentModel.FaultHandlerActivity.FaultType" /> are also handled.</summary>
      <returns>The <see cref="T:System.Type" /> of the associated <see cref="T:System.Exception" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.FaultHandlerActivity.FaultTypeProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.ComponentModel.FaultHandlerActivity.FaultType" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.FaultHandlerActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#CanFilterType(System.Type,System.Boolean)">
      <summary>Provides a value that indicates whether this instance can filter on the specified <see cref="T:System.Type" />.</summary>
      <returns>true if the <see cref="T:System.Type" /> can be filtered; false otherwise.</returns>
      <param name="type">The specified <see cref="T:System.Type" />.</param>
      <param name="throwOnError">The value that determines whether an exception is raised on an error.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.FaultHandlerActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#FilterDescription">
      <summary>Gets the filter description associated with this instance.</summary>
      <returns>The filter description associated with this instance.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.FaultHandlerActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.FaultHandlerActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)">
      <summary>Returns the access type for the specified property.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> enumeration value that denotes the access level of the property.</returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.FaultHandlerActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)">
      <summary>Returns the <see cref="T:System.Type" /> of the specified property.</summary>
      <returns>The <see cref="T:System.Type" /> for the property whose name is passed as the <paramref name="propertyName " />parameter. </returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are required.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.FaultHandlersActivity">
      <summary>Represents a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> that has an ordered list of child activities of type <see cref="T:System.Workflow.ComponentModel.FaultHandlerActivity" />. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.FaultHandlersActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.FaultHandlersActivity" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.FaultHandlersActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.FaultHandlersActivity" /> class using the name of the activity. </summary>
      <param name="name">The user-defined name of the activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.FaultHandlersActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.GetValueOverride">
      <summary>Allows a custom override of the <see cref="M:System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)" /> logic associated with a dependency property that is defined on a dependency object.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the value of the designated <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</returns>
      <param name="d">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="M:System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)" /> method.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.IActivityEventListener`1">
      <summary>Defines the interface for an object that listens for an event.</summary>
      <typeparam name="T">The type of the event argument.</typeparam>
    </member>
    <member name="M:System.Workflow.ComponentModel.IActivityEventListener`1.OnEvent(System.Object,`0)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.ICompensatableActivity">
      <summary>Defines the interface required by an <see cref="T:System.Workflow.ComponentModel.Activity" /> that can be compensated.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.ICompensatableActivity.Compensate(System.Workflow.ComponentModel.ActivityExecutionContext)">
      <summary>Called by the workflow runtime to compensate an activity that is in the Closed state. The activity must have a value of Succeeded for its <see cref="P:System.Workflow.ComponentModel.Activity.ExecutionResult" /> property in order to be compensatable.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionStatus" /> after operation has been tried.</returns>
      <param name="executionContext">The <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for the operation.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider">
      <summary>Provides a property type to the bind infrastructure. It is implemented by activities that contain a property of variable type, where the type can vary depending on other activity settings.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetAccessType(System.IServiceProvider,System.String)">
      <summary>Returns the access type for the specified property.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> enumeration value that denotes the access level of the property.</returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are needed.</param>
      <param name="propertyName">The name of the property.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.IDynamicPropertyTypeProvider.GetPropertyType(System.IServiceProvider,System.String)">
      <summary>Returns the <see cref="T:System.Type" /> of the specified property.</summary>
      <returns>The <see cref="T:System.Type" /> for the property whose name is passed as the <paramref name="propertyName " />parameter. </returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design-time services if they are needed.</param>
      <param name="propertyName">The name of the property. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.IStartWorkflow">
      <summary>Defines a service that can be obtained from an <see cref="T:System.Workflow.ComponentModel.ActivityExecutionContext" /> for the purpose of starting a new workflow instance.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.IStartWorkflow.StartWorkflow(System.Type,System.Collections.Generic.Dictionary{System.String,System.Object})">
      <summary>Starts the workflow of designated <see cref="T:System.Type" /> providing the running instance with a <see cref="P:System.Collections.DictionaryBase.Dictionary" /> that contains runtime parameters.</summary>
      <returns>The instance ID of the workflow that is started.</returns>
      <param name="workflowType">The <see cref="T:System.Type" /> of the workflow.</param>
      <param name="namedArgumentValues">A <see cref="P:System.Collections.DictionaryBase.Dictionary" /> that contains runtime parameters for the workflow.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.IWorkflowChangeDiff">
      <summary>Supports mining of workflow changes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.IWorkflowChangeDiff.Diff(System.Object,System.Object)">
      <summary>Determines the changes that occurred between two workflow definitions.</summary>
      <returns>A list of <see cref="T:System.Workflow.ComponentModel.WorkflowChangeAction" /> objects that indicates the differences between the two workflow definitions.</returns>
      <param name="originalDefinition">The original workflow definition.</param>
      <param name="changedDefinition">The new workflow definition.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.PersistOnCloseAttribute">
      <summary>Indicates that the current workflow instance must be persisted when the adorned activity completes its execution. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.PersistOnCloseAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PersistOnCloseAttribute" /> class. </summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.PropertyMetadata">
      <summary>Represents the behavior of a dependency property.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.#ctor(System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> class with an array of attributes. </summary>
      <param name="attributes">Attributes applicable to the dependency property, such as <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> and <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> class with a default property value. </summary>
      <param name="defaultValue">The object representing the <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.DefaultValue" /> of this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.#ctor(System.Object,System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> class with a default property value and an array of attributes.</summary>
      <param name="defaultValue">The object that represents the <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.DefaultValue" /> of this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" />.</param>
      <param name="attributes">Attributes applicable to the dependency property, such as <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> and <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.#ctor(System.Object,System.Workflow.ComponentModel.DependencyPropertyOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> class with a default property value and a <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> enumeration value. </summary>
      <param name="defaultValue">The object representing the <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.DefaultValue" /> of this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" />.</param>
      <param name="options">The <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> used to define the associated dependency property.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.#ctor(System.Object,System.Workflow.ComponentModel.DependencyPropertyOptions,System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> class with a default property value, a <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> enumeration value, and an array of attributes.</summary>
      <param name="defaultValue">The object that represents the <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.DefaultValue" /> of this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" />.</param>
      <param name="options">The <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> used to define the associated dependency property.</param>
      <param name="attributes">Attributes applicable to the dependency property, such as <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> and <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.#ctor(System.Object,System.Workflow.ComponentModel.DependencyPropertyOptions,System.Workflow.ComponentModel.GetValueOverride,System.Workflow.ComponentModel.SetValueOverride)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> class with a default property value, a <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> enumeration value, and delegates to override the GetValue and SetValue logic associated with the dependency property. </summary>
      <param name="defaultValue">The object that represents the <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.DefaultValue" /> of this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" />.</param>
      <param name="options">The <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> used to define the associated dependency property.</param>
      <param name="getValueOverride">The <see cref="T:System.Workflow.ComponentModel.GetValueOverride" /> delegate that belongs to this instance.</param>
      <param name="setValueOverride">The <see cref="T:System.Workflow.ComponentModel.SetValueOverride" /> delegate that belongs to this instance.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.#ctor(System.Object,System.Workflow.ComponentModel.DependencyPropertyOptions,System.Workflow.ComponentModel.GetValueOverride,System.Workflow.ComponentModel.SetValueOverride,System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> class with a default property value, a <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> enumeration value, delegates to override the GetValue and SetValue logic associated with the dependency property, and an array of attributes. </summary>
      <param name="defaultValue">The object that represents the <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.DefaultValue" /> of this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" />.</param>
      <param name="options">The <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> used to define the associated dependency property.</param>
      <param name="getValueOverride">The <see cref="T:System.Workflow.ComponentModel.GetValueOverride" /> delegate that belongs to this instance.</param>
      <param name="setValueOverride">The <see cref="T:System.Workflow.ComponentModel.SetValueOverride" /> delegate that belongs to this instance.</param>
      <param name="attributes">Attributes applicable to the dependency property, such as <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> and <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.#ctor(System.Workflow.ComponentModel.DependencyPropertyOptions)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> class with a <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> enumeration value. </summary>
      <param name="options">The <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> used to define the associated dependency property.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.#ctor(System.Workflow.ComponentModel.DependencyPropertyOptions,System.Attribute[])">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> class with a <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> enumeration value and an array of attributes. </summary>
      <param name="options">The <see cref="T:System.Workflow.ComponentModel.DependencyPropertyOptions" /> used to define the associated dependency property.</param>
      <param name="attributes">Attributes applicable to the dependency property, such as <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> and <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute" />.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.PropertyMetadata.DefaultValue">
      <summary>Represents the default value of the associated dependency property.</summary>
      <returns>An object representing the default value for this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" />.</returns>
      <exception cref="T:System.InvalidOperationException">Attempting to set this property when <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.IsSealed" /> is true.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.GetAttributes">
      <summary>Retrieves an array that contains all attributes.</summary>
      <returns>An array that contains all attributes.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.GetAttributes(System.Type)">
      <summary>Receives an array of type <see cref="T:System.Attribute" /> that contains those attributes having type equal to <paramref name="attributeType" />.</summary>
      <returns>An array of type <see cref="T:System.Attribute" />  that contains those attributes having type equal to <paramref name="attributeType" />.</returns>
      <param name="attributeType">The <see cref="T:System.Type" /> of attributes to return.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.PropertyMetadata.GetValueOverride">
      <summary>Gets or sets the <see cref="T:System.Workflow.ComponentModel.GetValueOverride" /> callback, a callback invoked immediately upon a call to the <see cref="M:System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)" /> method.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.GetValueOverride" /> callback, a callback invoked immediately upon a call to the <see cref="M:System.Workflow.ComponentModel.DependencyObject.GetValue(System.Workflow.ComponentModel.DependencyProperty)" /> method.</returns>
      <exception cref="T:System.InvalidOperationException">Attempting to set this property when <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.IsSealed" /> is true.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.PropertyMetadata.IsMetaProperty">
      <summary>Gets a value that indicates whether the <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.Options" /> is set to <see cref="F:System.Workflow.ComponentModel.DependencyPropertyOptions.Metadata" />.</summary>
      <returns>true if this option is set to <see cref="F:System.Workflow.ComponentModel.DependencyPropertyOptions.Metadata" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.PropertyMetadata.IsNonSerialized">
      <summary>Gets a value that indicates whether the <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.Options" /> is set to <see cref="F:System.Workflow.ComponentModel.DependencyPropertyOptions.NonSerialized" />.</summary>
      <returns>true if set to <see cref="F:System.Workflow.ComponentModel.DependencyPropertyOptions.NonSerialized" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.PropertyMetadata.IsReadOnly">
      <summary>Gets a value that indicates whether the <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.Options" /> are set to <see cref="F:System.Workflow.ComponentModel.DependencyPropertyOptions.ReadOnly" />.</summary>
      <returns>true if set to <see cref="F:System.Workflow.ComponentModel.DependencyPropertyOptions.ReadOnly" />; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.PropertyMetadata.IsSealed">
      <summary>Determines whether the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> has been applied to a property resulting in the immutable state.</summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> is immutable; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.PropertyMetadata.OnApply(System.Workflow.ComponentModel.DependencyProperty,System.Type)">
      <summary>Provides processing when this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> is applied to a dependency property.</summary>
      <param name="dependencyProperty">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> to which this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" /> has been applied. </param>
      <param name="targetType">The <see cref="T:System.Type" /> associated with this metadata if this instance is type-specific metadata. If this is default metadata, this value is a null reference (Nothing in Visual Basic).</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.PropertyMetadata.Options">
      <summary>Gets or set the property which represents the option setting for the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> associated to this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" />.</summary>
      <returns>The option setting for the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> associated to this <see cref="T:System.Workflow.ComponentModel.PropertyMetadata" />.</returns>
      <exception cref="T:System.InvalidOperationException">Attempting to set this property when <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.IsSealed" /> is true.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.PropertyMetadata.SetValueOverride">
      <summary>Gets or sets the <see cref="T:System.Workflow.ComponentModel.SetValueOverride" /> callback, a callback invoked immediately upon a call to the <see cref="M:System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)" /> method.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.SetValueOverride" /> callback, a callback invoked immediately upon a call to the <see cref="M:System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)" /> method.</returns>
      <exception cref="T:System.InvalidOperationException">Trying to set this property when <see cref="P:System.Workflow.ComponentModel.PropertyMetadata.IsSealed" /> is true.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.QueueEventArgs">
      <summary>Represents the event arguments for a workflow queue-related event.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.QueueEventArgs.QueueName">
      <summary>Gets the name of the workflow queue that originated the event.</summary>
      <returns>The name of the workflow queue that originated the event.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.RemovedActivityAction">
      <summary>Represents a proposed removal of an <see cref="T:System.Workflow.ComponentModel.Activity" /> from a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> within a running workflow instance.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.RemovedActivityAction.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.RemovedActivityAction" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.RemovedActivityAction.#ctor(System.Int32,System.Workflow.ComponentModel.Activity,System.Workflow.ComponentModel.CompositeActivity)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.RemovedActivityAction" /> class.</summary>
      <param name="removedActivityIndex">Indicates the index of the activity being removed when you remove the activity using the workflow changes.</param>
      <param name="originalActivity">Activity that was removed.</param>
      <param name="clonedParentActivity">Root activity from which the activity was removed.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.RemovedActivityAction.OriginalRemovedActivity">
      <summary>Gets the instance of original <see cref="T:System.Workflow.ComponentModel.Activity" /> being removed.</summary>
      <returns>The instance of the original <see cref="T:System.Workflow.ComponentModel.Activity" /> being removed.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.RemovedActivityAction.RemovedActivityIndex">
      <summary>Gets index of the removed <see cref="T:System.Workflow.ComponentModel.Activity" /> with the <see cref="P:System.Workflow.ComponentModel.CompositeActivity.Activities" /> collection of the parent <see cref="T:System.Workflow.ComponentModel.CompositeActivity" />.</summary>
      <returns>The index of the <see cref="T:System.Workflow.ComponentModel.Activity" /> being removed.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.SetValueOverride">
      <summary>Allows a custom override of the <see cref="M:System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)" /> logic associated with a dependency property that is defined on a dependency object. </summary>
      <param name="d">The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="M:System.Workflow.ComponentModel.DependencyObject.SetValue(System.Workflow.ComponentModel.DependencyProperty,System.Object)" />  method.</param>
      <param name="value">The <see cref="T:System.Object" /> to set the value to.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.SuspendActivity">
      <summary>Suspends the running workflow instance when executed. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.SuspendActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.SuspendActivity" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.SuspendActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.SuspendActivity" /> class, along with the name for that activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.SuspendActivity.Error">
      <summary>Gets or sets an error message to report to administrators providing the reason for suspension.</summary>
      <returns>An error message that provides the reason for the workflow instance suspension. The default value is null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.SuspendActivity.ErrorProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.ComponentModel.SuspendActivity.Error" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.SynchronizationScopeActivity">
      <summary>Represents a section of workflow that requires controlled access to shared variables.  If two or more instances of a <see cref="T:System.Workflow.ComponentModel.SynchronizationScopeActivity" /> access the same variables, then the execution of these activities is effectively serialized. This class cannot be inherited. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.SynchronizationScopeActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.SynchronizationScopeActivity" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.SynchronizationScopeActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.SynchronizationScopeActivity" /> class using the name of the activity. </summary>
      <param name="name">The user-defined name of the activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.SynchronizationScopeActivity.SynchronizationHandles">
      <summary>Gets or sets a collection of strings that represents handles that determine the synchronization behavior of this <see cref="T:System.Workflow.ComponentModel.SynchronizationScopeActivity" />. When two or more <see cref="T:System.Workflow.ComponentModel.SynchronizationScopeActivity" /> activities share a synchronization handle, they execute in a serial fashion; there is no interleaved execution of the child activities within them.</summary>
      <returns>A multiline string that contains synchronization handles for this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.SynchronizationScopeActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.TerminateActivity">
      <summary>Terminates the running workflow instance when an abnormal situation occurs. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.TerminateActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.TerminateActivity" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.TerminateActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.TerminateActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.TerminateActivity.Error">
      <summary>Gets or sets an error message to report to administrators, providing the reason for termination.</summary>
      <returns>An error message that provides the reason for the workflow instance termination. The default value is null.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.TerminateActivity.ErrorProperty">
      <summary>Represents the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that targets the <see cref="P:System.Workflow.ComponentModel.TerminateActivity.Error" /> property. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.ThrowActivity">
      <summary>Models the throwing of an exception. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.ThrowActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ThrowActivity" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.ThrowActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.ThrowActivity" /> class, and initializes its name.</summary>
      <param name="name">The user-defined name of the activity.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="identifier" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.ThrowActivity.Fault">
      <summary>Indicates the exception object that should be thrown by the <see cref="T:System.Workflow.ComponentModel.ThrowActivity" />.</summary>
      <returns>The <see cref="T:System.Exception" /> associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.ThrowActivity.FaultProperty">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> representing the  <see cref="P:System.Workflow.ComponentModel.ThrowActivity.Fault" /> property for this instance.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.ThrowActivity.FaultType">
      <summary>Indicates the type of exception that should be thrown by the <see cref="T:System.Workflow.ComponentModel.ThrowActivity" />.</summary>
      <returns>The type representing the fault associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.ThrowActivity.FaultTypeProperty">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> representing the  <see cref="P:System.Workflow.ComponentModel.ThrowActivity.FaultType" /> property for this instance.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#CanFilterType(System.Type,System.Boolean)">
      <summary>Returns a value that indicates whether the specified <see cref="T:System.Type" /> can be filtered.</summary>
      <returns>true if the specified type can be filtered; otherwise, false. </returns>
      <param name="type">The <see cref="T:System.Type" /> to check for filtering</param>
      <param name="throwOnError">true to throw an exception when the <see cref="M:System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(System.Type,System.Boolean)" /> is processed; otherwise, false.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#Design#ITypeFilterProvider#FilterDescription">
      <summary>Gets the description for the filter to be displayed on the class browser dialog box. </summary>
      <returns>A <see cref="T:System.String" /> that contains the description of the filter. </returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetAccessType(System.IServiceProvider,System.String)">
      <summary>Returns the access type for the specified property.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> enumeration value denoting the access level of the property.</returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are needed.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.ThrowActivity.System#Workflow#ComponentModel#IDynamicPropertyTypeProvider#GetPropertyType(System.IServiceProvider,System.String)">
      <summary>Returns the <see cref="T:System.Type" /> of the specified property.</summary>
      <returns>The <see cref="T:System.Type" /> for the property whose name is passed as the <paramref name="propertyName " />parameter. </returns>
      <param name="serviceProvider">An object that implements <see cref="T:System.IServiceProvider" /> to provide access to design time services if they are needed.</param>
      <param name="propertyName">The name of the property.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.TransactionScopeActivity">
      <summary>A section of workflow which demarcates a transaction boundary. A new <see cref="T:System.Transactions.Transaction" /> is started when this <see cref="T:System.Workflow.ComponentModel.Activity" /> begins executing and the transaction commits when the <see cref="T:System.Workflow.ComponentModel.Activity" /> closes successfully. This class cannot be inherited. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.TransactionScopeActivity.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.TransactionScopeActivity" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.TransactionScopeActivity.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.TransactionScopeActivity" /> class using the name of the activity.</summary>
      <param name="name">The user-defined name of the activity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.TransactionScopeActivity.System#Workflow#ComponentModel#IActivityEventListener{T}#OnEvent(System.Object,System.Workflow.ComponentModel.ActivityExecutionStatusChangedEventArgs)">
      <summary>Defines the processing procedure when the subscribed-to event occurs.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">The previously typed event arguments.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.TransactionScopeActivity.TransactionOptions">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.WorkflowTransactionOptions" /> associated with this instance.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.WorkflowTransactionOptions" /> associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.WorkflowChangeAction">
      <summary>An abstract base class from which all classes that represent proposed changes to a running workflow instance must derive.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowChangeAction.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.WorkflowChangeAction" /> class.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowChangeAction.ApplyTo(System.Workflow.ComponentModel.Activity)">
      <summary>When overridden in a derived class, applies the changes to the root <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>true if the root <see cref="T:System.Workflow.ComponentModel.Activity" /> was updated with the added <see cref="T:System.Workflow.ComponentModel.Activity" />, false if the root <see cref="T:System.Workflow.ComponentModel.Activity" /> is a null reference (Nothing in Visual Basic).</returns>
      <param name="rootActivity">The root <see cref="T:System.Workflow.ComponentModel.Activity" /> of the workflow.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowChangeAction.ValidateChanges(System.Workflow.ComponentModel.Activity)">
      <summary>When overridden in a derived class, validates the changes and returns a <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains any errors.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains any errors.</returns>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> upon which to validate the changes.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityInstance" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.ComponentModel.WorkflowChanges">
      <summary>Represents a set of proposed changes to a running workflow instance.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowChanges.#ctor(System.Workflow.ComponentModel.Activity)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" /> class. </summary>
      <param name="rootActivity">The root <see cref="T:System.Workflow.ComponentModel.Activity" /> of the workflow.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rootActivity" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="rootActivity" /> is not a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rootActivity" /> is in design mode.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.WorkflowChanges.ConditionProperty">
      <summary>Specifies the condition that must be satisfied to apply the <see cref="T:System.Workflow.ComponentModel.WorkflowChanges" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowChanges.GetCondition(System.Object)">
      <summary>Gets the condition property on a dependency object.</summary>
      <returns>A condition property type, such as <see cref="T:System.Workflow.ComponentModel.ActivityCondition" />.</returns>
      <param name="dependencyObject">A <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> (or derived type) that contains a condition property, such as the <see cref="T:System.Workflow.Activities.SequentialWorkflowActivity" /> and <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" /> activities.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" /> is null (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dependencyObject" /> is not a <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> or a type that derives from <see cref="T:System.Workflow.ComponentModel.DependencyObject" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowChanges.SetCondition(System.Object,System.Object)">
      <summary>Sets the condition property on a dependency object.</summary>
      <param name="dependencyObject">A <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> (or derived type) that contains a condition property, such as the <see cref="T:System.Workflow.Activities.SequentialWorkflowActivity" /> and <see cref="T:System.Workflow.Activities.StateMachineWorkflowActivity" /> activities.</param>
      <param name="value">The condition type to set on the dependency object, such as an <see cref="T:System.Workflow.ComponentModel.ActivityCondition" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.WorkflowChanges.TransientWorkflow">
      <summary>Returns a cloned activity tree to which changes can be made and then applied to the running workflow instance.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> that contains the cloned root activity for the workflow.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowChanges.Validate">
      <summary>Validates the current set of proposed changes that have been made to the activity tree represented by the <see cref="P:System.Workflow.ComponentModel.WorkflowChanges.TransientWorkflow" /> property.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> object that contains any errors or warnings that occurred during validation.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.WorkflowParameterBinding">
      <summary>A general-purpose class that represents a binding to a named parameter. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowParameterBinding.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBinding" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowParameterBinding.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBinding" /> class. </summary>
      <param name="parameterName">A string that contains the name of the parameter.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.WorkflowParameterBinding.ParameterName">
      <summary>Gets or sets the <see cref="P:System.Workflow.ComponentModel.WorkflowParameterBinding.ParameterName" /> property. Represents the name of the parameter being bound.</summary>
      <returns>The name of the parameter being bound.</returns>
    </member>
    <member name="F:System.Workflow.ComponentModel.WorkflowParameterBinding.ParameterNameProperty">
      <summary>The dependency property which targets <see cref="P:System.Workflow.ComponentModel.WorkflowParameterBinding.ParameterName" />.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.WorkflowParameterBinding.Value">
      <summary>Gets or sets the value assigned to the corresponding parameter.</summary>
      <returns>The assigned value as an <see cref="T:System.Object" />.</returns>
    </member>
    <member name="F:System.Workflow.ComponentModel.WorkflowParameterBinding.ValueProperty">
      <summary>The dependency property which targets <see cref="P:System.Workflow.ComponentModel.WorkflowParameterBinding.Value" />.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection">
      <summary>Represents a <see cref="T:System.Collections.ObjectModel.KeyedCollection`2" /> of type <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBinding" />. This class may not be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowParameterBindingCollection.#ctor(System.Workflow.ComponentModel.Activity)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBindingCollection" /> class. </summary>
      <param name="ownerActivity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> that own this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ownerActivity" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowParameterBindingCollection.GetItem(System.String)">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBinding" /> from the collection having the specified key.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.WorkflowParameterBinding" /> from the collection having the specified key.</returns>
      <param name="key">The key to match for this retrieval.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.WorkflowTerminatedException">
      <summary>Represents the <see cref="T:System.Exception" /> that is raised when a workflow is terminated. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowTerminatedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.WorkflowTerminatedException" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowTerminatedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.WorkflowTerminatedException" /> class, with a specified error message.</summary>
      <param name="message">The message that describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowTerminatedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.WorkflowTerminatedException" /> class, with a specified error message and a reference to the inner <see cref="T:System.Exception" /> that is the cause of this <see cref="T:System.Exception" /> .</summary>
      <param name="message">The message that describes the error.</param>
      <param name="exception">The inner <see cref="T:System.Exception" /> reference. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.WorkflowTransactionOptions">
      <summary>Container for workflow transaction type options. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.WorkflowTransactionOptions.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.WorkflowTransactionOptions" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.WorkflowTransactionOptions.IsolationLevel">
      <summary>Gets or sets the <see cref="T:System.Data.IsolationLevel" /> for the transaction. </summary>
      <returns>The <see cref="T:System.Data.IsolationLevel" /> for the workflow.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.WorkflowTransactionOptions.IsolationLevelProperty">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> representing <see cref="P:System.Workflow.ComponentModel.WorkflowTransactionOptions.IsolationLevel" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.WorkflowTransactionOptions.TimeoutDuration">
      <summary>Gets or sets the <see cref="T:System.TimeSpan" /> representing the time-out period for the transaction.</summary>
      <returns>The <see cref="T:System.TimeSpan" /> representing the time-out period for the transaction.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.WorkflowTransactionOptions.TimeoutDurationProperty">
      <summary>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> representing <see cref="P:System.Workflow.ComponentModel.WorkflowTransactionOptions.TimeoutDuration" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.AccessTypes">
      <summary>Specifies the access mode for the dependency property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.Compiler.AccessTypes.Read">
      <summary>Read access.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Compiler.AccessTypes.Write">
      <summary>Write access.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Compiler.AccessTypes.ReadWrite">
      <summary>Read and write access.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ActivityCodeGenerator">
      <summary>Base class for code generator components that can be associated with activities.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ActivityCodeGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ActivityCodeGenerator" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ActivityCodeGenerator.GenerateCode(System.Workflow.ComponentModel.Compiler.CodeGenerationManager,System.Object)">
      <summary>Generates code for the specified <see cref="T:System.Object" /> using the specific <see cref="T:System.Workflow.ComponentModel.Compiler.CodeGenerationManager" />.</summary>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.CodeGenerationManager" /> to use in the code generation.</param>
      <param name="obj">The <see cref="T:System.Object" /> to generate the code for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is a null reference (Nothing).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> cannot be cast to type <see cref="T:System.Workflow.ComponentModel.Activity" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ActivityCodeGenerator.GetCodeTypeDeclaration(System.Workflow.ComponentModel.Compiler.CodeGenerationManager,System.String)">
      <summary>Returns the code type declaration for the workflow that is currently being compiled.</summary>
      <returns>The <see cref="T:System.CodeDom.CodeTypeDeclaration" /> for the workflow that is currently being compiled.</returns>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.CodeGenerationManager" /> to use in the code generation.</param>
      <param name="fullClassName">The fully qualified class name of the workflow that is currently being compiled.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ActivityCodeGeneratorAttribute">
      <summary>Indicates the type to be used for code generation for an activity. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ActivityCodeGeneratorAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ActivityCodeGeneratorAttribute" /> class, also initializing the <see cref="P:System.Workflow.ComponentModel.Compiler.ActivityCodeGeneratorAttribute.CodeGeneratorTypeName" />.</summary>
      <param name="codeGeneratorTypeName">The specified value for <see cref="P:System.Workflow.ComponentModel.Compiler.ActivityCodeGeneratorAttribute.CodeGeneratorTypeName" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="codeGeneratorTypeName" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ActivityCodeGeneratorAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ActivityCodeGeneratorAttribute" /> class from a code generator <see cref="T:System.Type" />.</summary>
      <param name="codeGeneratorType">The <see cref="T:System.Type" /> to initialize the instance from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="codeGeneratorType" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="codeGeneratorType" /> is not assignable to the type of a code generator.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="codeGeneratorType" /> has no default constructor.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ActivityCodeGeneratorAttribute.CodeGeneratorTypeName">
      <summary>Gets the name of the code generator <see cref="T:System.Type" /> which this instance is based on.</summary>
      <returns>A string that contains the name of the code generator <see cref="T:System.Type" /> on which this instance is based.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ActivityValidator">
      <summary>Derivative of <see cref="T:System.Workflow.ComponentModel.Compiler.DependencyObjectValidator" /> that is a base class for all activity validator components.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ActivityValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ActivityValidator" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ActivityValidator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
      <summary>Verifies that the given activity is valid.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> object that contains any errors or warnings that occurred during validation.</returns>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> associated with validation.</param>
      <param name="obj">The <see cref="T:System.Workflow.ComponentModel.Activity" /> to be validated.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ActivityValidatorAttribute">
      <summary>Identifies the class that performs validation on an <see cref="T:System.Workflow.ComponentModel.Activity" /> that is subject to validation. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ActivityValidatorAttribute.#ctor(System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ActivityValidatorAttribute" /> class by using the type of the validator.</summary>
      <param name="validatorTypeName">Type of the <see cref="T:System.Workflow.ComponentModel.Compiler.Validator" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ActivityValidatorAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ActivityValidatorAttribute" /> class by using the specified validator type name.</summary>
      <param name="validatorType">The name of the <see cref="T:System.Workflow.ComponentModel.Compiler.Validator" /> type.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ActivityValidatorAttribute.ValidatorTypeName">
      <summary>Gets the name of the type of the associated <see cref="T:System.Workflow.ComponentModel.Compiler.Validator" /> class.</summary>
      <returns>The name of the type of the associated <see cref="T:System.Workflow.ComponentModel.Compiler.Validator" /> class.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.AttributeInfo">
      <summary>Wrapper class that represents attributes on a type at design time. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.AttributeInfo.ArgumentValues">
      <summary>Gets a collection that contains values for each of the arguments associated with this instance.</summary>
      <returns>A collection that contains values for each of the arguments associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.AttributeInfo.AttributeType">
      <summary>Gets the <see cref="T:System.Type" /> of this instance.</summary>
      <returns>The <see cref="T:System.Type" /> of this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.AttributeInfo.Creatable">
      <summary>Gets a value that indicates whether this instance can be created.</summary>
      <returns>Returns a value which is false if either of the following conditions are true:The <see cref="T:System.Type" /> defining this attribute has an <see cref="P:System.Type.Assembly" /> which is a null reference (Visual Basic Nothing).Any one of the objects in the array <see cref="P:System.Workflow.ComponentModel.Compiler.AttributeInfo.ArgumentValues" /> is of <see cref="T:System.Type" /><see cref="T:System.Exception" />Otherwise the value returned is true.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.AttributeInfo.CreateAttribute">
      <summary>Creates an attribute of type Creates an attribute of type <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" />.</summary>
      <returns>An attribute of type <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" />.</returns>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Workflow.ComponentModel.Compiler.AttributeInfo.Creatable" /> is false.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.AttributeInfo.GetArgumentValueAs(System.IServiceProvider,System.Int32,System.Type)">
      <summary>Gets the argument for this instance, based on type and index.</summary>
      <returns>An <see cref="T:System.Object" /> cast to the requested type.</returns>
      <param name="serviceProvider">The <see cref="T:System.IServiceProvider" /> helping this operation.</param>
      <param name="argumentIndex">The integer index of the requested argument in the collection of arguments.</param>
      <param name="requestedType">The <see cref="T:System.Type" /> of the argument.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="argumentIndex" /> is out of range of the argument collection.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestedType" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.AttributeInfoAttribute">
      <summary>Represents a class holding information about an attribute at design time. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.AttributeInfoAttribute.AttributeInfo">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" /> associated with this instance.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" /> associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.AuthorizedType">
      <summary>Represents a set of types that are either allowed or disallowed in compiled workflows by the workflow compiler (depending on the value of the <see cref="P:System.Workflow.ComponentModel.Compiler.AuthorizedType.Authorized" /> property). This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.AuthorizedType.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.AuthorizedType" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.AuthorizedType.Assembly">
      <summary>Gets or sets the name of the assembly that contains the type(s) represented by this class.</summary>
      <returns>The name of the assembly.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.AuthorizedType.Authorized">
      <summary>Gets or sets the value that indicates whether the type designated by this class is authorized to participate in a workflow compilation.</summary>
      <returns>true if authorized to participate in a workflow compilation; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.AuthorizedType.Namespace">
      <summary>Gets or sets the name of the namespace of the type represented in this instance.</summary>
      <returns>The name of the namespace of the <see cref="T:System.Type" /> represented in this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.AuthorizedType.RegularExpression">
      <summary>Gets the <see cref="T:System.Text.RegularExpressions.Regex" /> associated with this instance.</summary>
      <returns>The regular expression associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.AuthorizedType.TypeName">
      <summary>Gets or sets the name of the type being represented by this instance.</summary>
      <returns>The name of the <see cref="T:System.Type" /> being represented by this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.BindValidationContext">
      <summary>Represents the context for the validation of an <see cref="T:System.Workflow.ComponentModel.ActivityBind" />. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.BindValidationContext.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.BindValidationContext" /> class, while initializing the <see cref="T:System.Type" /> of the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</summary>
      <param name="targetType">The <see cref="T:System.Type" /> of the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.BindValidationContext.#ctor(System.Type,System.Workflow.ComponentModel.Compiler.AccessTypes)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.BindValidationContext" /> class, initializing the <see cref="T:System.Type" /> and the <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> of the target of the bind represented by this instance.</summary>
      <param name="targetType">The <see cref="T:System.Type" /> of the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> represented by this instance.</param>
      <param name="access">The <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> of the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> represented by this instance.</param>
      <exception cref="T:System.ArgumentNullException"> Is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.BindValidationContext.Access">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> of the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> represented by this instance.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Compiler.AccessTypes" /> of the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> represented by this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.BindValidationContext.TargetType">
      <summary>Gets the <see cref="T:System.Type" /> of the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> represented by this instance.</summary>
      <returns>The <see cref="T:System.Type" /> of the target of the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> represented by this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.CodeGenerationManager">
      <summary>Enables sharing of data across activity code generators during the code generation phase of compilation. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CodeGenerationManager.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.CodeGenerationManager" /> class by using an existing <see cref="T:System.IServiceProvider" /> type.</summary>
      <param name="serviceProvider">The <see cref="T:System.IServiceProvider" /> to use in this instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CodeGenerationManager.Context">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> associated with this instance.</summary>
      <returns>The <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CodeGenerationManager.GetCodeGenerators(System.Type)">
      <summary>Gets an array that contains each <see cref="T:System.Workflow.ComponentModel.Compiler.ActivityCodeGenerator" /> associated with the specified <see cref="T:System.Type" />.</summary>
      <returns>An array that contains each <see cref="T:System.Workflow.ComponentModel.Compiler.ActivityCodeGenerator" /> associated with the specified <see cref="T:System.Type" />.</returns>
      <param name="type">The <see cref="T:System.Type" /> required.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CodeGenerationManager.GetService(System.Type)">
      <summary>Provides access to the service object of the specified type.</summary>
      <returns>The service object of the specified type.</returns>
      <param name="serviceType">The desired <see cref="T:System.Type" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.CompileWorkflowCleanupTask">
      <summary>Defines an MSBuild task for erasing the contents of temporary files that are used when compiling workflows created using Visual Basic. The contents of the temporary files are erased but the files are not deleted. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CompileWorkflowCleanupTask.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.CompileWorkflowCleanupTask" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CompileWorkflowCleanupTask.Execute">
      <summary>Erases the contents of the files specified in the <see cref="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowCleanupTask.TemporaryFiles" /> property, without deleting the files.</summary>
      <returns>true if the task successfully executed; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowCleanupTask.TemporaryFiles">
      <summary>Gets or sets an array of paths to temporary files created when compiling workflows created using Visual Basic .NET.</summary>
      <returns>A list of temporary files associated with this compilation task.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask">
      <summary>Represents the MSBuild task of compiling a workflow. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.AssemblyName">
      <summary>Gets and sets the name of the assembly that is built during compilation.</summary>
      <returns>A String that contains the name of the assembly.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.CompilationOptions">
      <summary>Gets or sets the compilation options.</summary>
      <returns>The compilation options.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.DelaySign">
      <summary>Gets or sets a value that indicates whether the workflow assembly will be delay signed.</summary>
      <returns>true if the assembly will be delay signed; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.Execute">
      <summary>Runs the compilation of the workflow task.</summary>
      <returns>true if the operation was successful; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.HostObject">
      <summary>Gets or sets the <see cref="T:System.Object" /> that is used to obtain services provided by the Visual Studio host when the compile workflow task is invoked. </summary>
      <returns>The <see cref="T:System.Object" /> that is used to obtain services provided by Visual Studio host when the compile workflow task is invoked. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.Imports">
      <summary>Gets or sets a string that contains all the imports directives for the compilation of the workflow.</summary>
      <returns>A string that contains all the imports directives for the compilation of the workflow.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.KeepTemporaryFiles">
      <summary>Gets a Boolean value that determines whether temporary files are to be kept.</summary>
      <returns>true if temporary files are to be kept; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.KeyContainer">
      <summary>Gets or sets the name of the public/private key container used for signing the workflow assembly.</summary>
      <returns>The name of the public/private key container used for signing the workflow assembly.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.KeyFile">
      <summary>Gets or sets the path of the file that is used for signing the workflow assembly.</summary>
      <returns>The path of the file that is used for signing the workflow assembly.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.Microsoft#Build#Framework#ITask#HostObject">
      <summary>Gets and sets the Host Object in the Microsoft Build framework.</summary>
      <returns>The Host Object from the Microsoft Build framework.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.OutputFiles">
      <summary>Gets an array of paths to output files from the workflow project being compiled.</summary>
      <returns>An array of paths to output files from the workflow project being compiled.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.ProjectDirectory">
      <summary>Gets or sets a string that contains the path of the directory that contains the workflow project.</summary>
      <returns>A string that contains the path of the directory that contains the workflow project.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.ProjectExtension">
      <summary>Gets or sets a string that contains the file name extension for the workflow project.</summary>
      <returns>A string that contains the file name extension for the workflow project.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.ReferenceFiles">
      <summary>Gets or sets an array of paths to reference files for the workflow project being compiled.</summary>
      <returns>An array of paths to reference files for the workflow project being compiled.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.ResourceFiles">
      <summary>Gets or sets an array of paths to resource files for the workflow project being compiled.</summary>
      <returns>An array of paths to resource files for the workflow project being compiled.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.RootNamespace">
      <summary>Gets or sets the root namespace for the workflow project being compiled.</summary>
      <returns>The root namespace for the workflow project being compiled.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.SourceCodeFiles">
      <summary>Gets or sets an array of paths to Visual Basic or C# files in the workflow project being compiled.</summary>
      <returns>An array of paths to Visual Basic or C# files in the workflow project being compiled.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.TargetFramework">
      <summary>Gets or sets the target .NET Framework of the current project.</summary>
      <returns>The target .NET Framework of the current project.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.TemporaryFiles">
      <summary>Gets an array of paths to temporary files created by the build task for the workflow project being compiled.</summary>
      <returns>An array of paths to temporary files created by the build task for the workflow project being compiled.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.CompileWorkflowTask.WorkflowMarkupFiles">
      <summary>Gets or sets an array of paths to Workflow Markup Files for the workflow project being compiled.</summary>
      <returns>An array of paths to Workflow Markup Files for the workflow project being compiled.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.CompositeActivityCodeGenerator">
      <summary>Base class for code generator components that can be associated with composite activities.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CompositeActivityCodeGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.CompositeActivityCodeGenerator" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CompositeActivityCodeGenerator.GenerateCode(System.Workflow.ComponentModel.Compiler.CodeGenerationManager,System.Object)">
      <summary>Generates code for the specified <see cref="T:System.Object" /> using the specific <see cref="T:System.Workflow.ComponentModel.Compiler.CodeGenerationManager" />.</summary>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.CodeGenerationManager" /> to use in code generation.</param>
      <param name="obj">The <see cref="T:System.Object" /> to generate code for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is a null reference (Nothing).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> cannot be cast to type <see cref="T:System.Workflow.ComponentModel.CompositeActivity" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.CompositeActivityValidator">
      <summary>Derivative of <see cref="T:System.Workflow.ComponentModel.Compiler.ActivityValidator" /> that is the base class for all composite activity validator components.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CompositeActivityValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.CompositeActivityValidator" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CompositeActivityValidator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
      <summary>Validates the <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> configuration.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> of errors found during validation.</returns>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> linked to the validation.</param>
      <param name="obj">Activity to be validated.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.CompositeActivityValidator.ValidateActivityChange(System.Workflow.ComponentModel.Activity,System.Workflow.ComponentModel.ActivityChangeAction)">
      <summary>Validates the change based on the affected <see cref="T:System.Workflow.ComponentModel.Activity" /> and provides the error.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> by the validation.</returns>
      <param name="activity">The affected <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="action">The <see cref="T:System.Workflow.ComponentModel.ActivityChangeAction" /> that defines the change.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is a null reference (Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ConditionValidator">
      <summary>Derivative of <see cref="T:System.Workflow.ComponentModel.Compiler.DependencyObjectValidator" /> that is the base class for all condition validator components.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ConditionValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ConditionValidator" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ConditionValidator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
      <summary>Validates the specified object using the specified <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" />.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the errors from this operation.</returns>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> to use for this validation.</param>
      <param name="obj">The <see cref="T:System.Object" /> to validate.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> cannot be cast to type <see cref="T:System.Workflow.ComponentModel.ActivityCondition" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.DependencyObjectValidator">
      <summary>Derivative of <see cref="T:System.Workflow.ComponentModel.Compiler.Validator" /> that is the base class for all dependency object validator components.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.DependencyObjectValidator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.DependencyObjectValidator" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.DependencyObjectValidator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
      <summary>Validates each settable <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> of the specified <see cref="T:System.Object" /> using the specified <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" />.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the errors from this operation.</returns>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> to use in the validation.</param>
      <param name="obj">The <see cref="T:System.Object" /> to be validated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> cannot be cast to type <see cref="T:System.Workflow.ComponentModel.DependencyObject" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ITypeProvider">
      <summary>Defines the behavior of a service that acts as a container of types.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ITypeProvider.GetType(System.String)">
      <summary>Gets the <see cref="T:System.Type" /> of the named entity.</summary>
      <returns>The <see cref="T:System.Type" /> of the named entity.</returns>
      <param name="name">A string that contains the name of the entity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ITypeProvider.GetType(System.String,System.Boolean)">
      <summary>Gets the <see cref="T:System.Type" /> of the named entity.</summary>
      <returns>The <see cref="T:System.Type" /> of the named entity.</returns>
      <param name="name">A string that contains the name of the entity.</param>
      <param name="throwOnError">A value that indicates whether to throw an exception if <paramref name="name" /> is not resolvable.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ITypeProvider.GetTypes">
      <summary>Creates and returns an array which contains each <see cref="T:System.Type" /> known to this instance.</summary>
      <returns>An array which contains each <see cref="T:System.Type" /> known to this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ITypeProvider.LocalAssembly">
      <summary>Temporary assembly that is generated during the compilation process to validate the types in the active project that is being compiled.</summary>
      <returns>The local <see cref="T:System.Reflection.Assembly" /> defined by this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ITypeProvider.ReferencedAssemblies">
      <summary>Gets a collection of all assemblies referenced by the <see cref="T:System.Type" />.</summary>
      <returns>A collection of all assemblies referenced by the <see cref="T:System.Type" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ITypeProvider.TypeLoadErrors">
      <summary>Gets an <see cref="T:System.Collections.IDictionary" /> of load error exceptions keyed by the <see cref="T:System.Object" /> causing the <see cref="T:System.Exception" />.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> of load error exceptions keyed by the <see cref="T:System.Object" /> causing the <see cref="T:System.Exception" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.ComponentModel.Compiler.ITypeProvider.TypeLoadErrorsChanged">
      <summary>Occurs when the collection <see cref="P:System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrors" /> is modified.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.ComponentModel.Compiler.ITypeProvider.TypesChanged">
      <summary>Occurs when the types in the type provider that implements this interface change. This can happen when an assembly or <see cref="T:System.CodeDom.CodeCompileUnit" /> is added or removed from the type provider.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService">
      <summary>Defines the interface implemented by the environment hosting the workflow designer and compiler to provide environment-specific compilation information during the validation and compilation processes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes">
      <summary>Gets a value that indicates whether types are checked.</summary>
      <returns>true if types are checked, otherwise false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.Language">
      <summary>Gets the programming language used by the environment, such as Visual Studio, when compiling the workflow.</summary>
      <returns>The name of the programming language used by the development environment.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.RootNamespace">
      <summary>Gets the root namespace set for the project. </summary>
      <returns>The name of the root namespace.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.PropertyValidationContext">
      <summary>Provides the context for validation of a <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.PropertyValidationContext.#ctor(System.Object,System.Reflection.PropertyInfo,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.PropertyValidationContext" /> class. </summary>
      <param name="propertyOwner">The <see cref="T:System.Object" /> that owns the property</param>
      <param name="propertyInfo">The associated <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <param name="propertyName">The name of the property.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyOwner" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> is a null reference (Visual Basic Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.PropertyValidationContext.#ctor(System.Object,System.Workflow.ComponentModel.DependencyProperty)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.PropertyValidationContext" /> class. </summary>
      <param name="propertyOwner">The <see cref="T:System.Object" /> that owns the property.</param>
      <param name="dependencyProperty">The associated <see cref="T:System.Workflow.ComponentModel.DependencyProperty" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyOwner" /> is a null reference (Visual Basic Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.PropertyValidationContext.Property">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> associated with this instance as an <see cref="T:System.Object" /> .</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> associated with this instance as an <see cref="T:System.Object" /> .</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.PropertyValidationContext.PropertyName">
      <summary>Gets the property name associated with this instance.</summary>
      <returns>The property name associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.PropertyValidationContext.PropertyOwner">
      <summary>Get the <see cref="T:System.Object" /> which owns the property associated with this instance.</summary>
      <returns>The <see cref="T:System.Object" /> which owns the property associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.TypeProvider">
      <summary>An implementation of <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> that acts as a container of types within the indicated assemblies and code compile units.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" /> class. </summary>
      <param name="serviceProvider">The encapsulated <see cref="T:System.IServiceProvider" /> for this instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly(System.Reflection.Assembly)">
      <summary>Adds an already-loaded assembly. It is the caller's responsibility to load the assembly, and <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" /> includes the types from this assembly for dispensing when <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType" /> is called.</summary>
      <param name="assembly">The <see cref="P:System.Type.Assembly" /> to add a reference for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is a null reference (Visual Basic Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference(System.String)">
      <summary>Adds a reference to the <see cref="P:System.Type.Assembly" /> to the internal list. This assembly is used for the <see cref="T:System.Type" /> lookup in the <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String)" /> method.</summary>
      <param name="path">The path of the <see cref="P:System.Type.Assembly" /> to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is a null reference (Visual Basic Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary>Adds a reference to the <see cref="T:System.CodeDom.CodeCompileUnit" /> to the internal list. This <see cref="T:System.CodeDom.CodeCompileUnit" /> is used for the <see cref="T:System.Type" /> lookup in the <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String)" /> method.</summary>
      <param name="codeCompileUnit">The <see cref="T:System.CodeDom.CodeCompileUnit" /> to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="codeCompileUnit" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="codeCompileUnit" /> is already referenced in this instance.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.TypeProvider.AssemblyNameResolver">
      <summary>Gets or sets the delegate that references a method with one parameter and one return value that returns the assembly display name in which a specified type belongs to.</summary>
      <returns>The delegate that references a method with one parameter and one return value that returns the assembly display name that a specified type belongs to.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" />. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetAssemblyName(System.Type)">
      <summary>Returns the assembly display name of the assembly in which the specified type is declared.</summary>
      <returns>The assembly display name of the assembly in which the specified type is declared.</returns>
      <param name="type">The type whose assembly name to get.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetEnumNames(System.Type)">
      <summary>Provides a string array that contains the names for the specified <see cref="T:System.Enum" /> in indexed order.</summary>
      <returns>The names for the specified <see cref="T:System.Enum" /> in indexed order.</returns>
      <param name="enumType">The type to obtain the names from.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> Is not an <see cref="T:System.Enum" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetEventHandlerType(System.Reflection.EventInfo)">
      <summary>Gets the <see cref="T:System.Type" /> of an <see cref="T:System.EventHandler" />, given a reference to an <see cref="T:System.Reflection.EventInfo" />.</summary>
      <returns>The <see cref="T:System.Type" /> of an <see cref="T:System.EventHandler" />, given a reference to an <see cref="T:System.Reflection.EventInfo" />.</returns>
      <param name="eventInfo">The <see cref="T:System.Reflection.EventInfo" /> to obtain the <see cref="T:System.EventHandler" /> type of.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="eventInfo" /> is a null reference (Visual Basic Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetService(System.Type)">
      <summary>Gets the <see cref="T:System.Object" /> that provides the designated service <see cref="T:System.Type" />.</summary>
      <returns>The <see cref="T:System.Object" /> that provides the designated service <see cref="T:System.Type" />.</returns>
      <param name="serviceType">The service <see cref="T:System.Type" /> that the <see cref="T:System.Object" /> is to provide.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String)">
      <summary>Gets the type from the set of assemblies added to the TypeProvider using <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly(System.Reflection.Assembly)" />, <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference(System.String)" />, or <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit(System.CodeDom.CodeCompileUnit)" />. </summary>
      <returns>The requested <see cref="T:System.Type" />.</returns>
      <param name="name">The type name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is a null reference (Nothing in Visual Basic)</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetType(System.String,System.Boolean)">
      <summary>Gets the type from the set of assemblies added to the TypeProvider using <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssembly(System.Reflection.Assembly)" />, <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddAssemblyReference(System.String)" />, or <see cref="M:System.Workflow.ComponentModel.Compiler.TypeProvider.AddCodeCompileUnit(System.CodeDom.CodeCompileUnit)" />.</summary>
      <returns>The requested <see cref="T:System.Type" />.</returns>
      <param name="name">The type name.</param>
      <param name="throwOnError">A value that indicates whether to throw an exception if <paramref name="name" /> is not resolvable.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is a null reference (Nothing in Visual Basic)</exception>
      <exception cref="T:System.Exception">
        <paramref name="name" /> is not resolvable and <paramref name="throwOnError" /> is true.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.GetTypes">
      <summary>Creates an array that contains each <see cref="T:System.Type" /> known to this instance.</summary>
      <returns>An array that contains each <see cref="T:System.Type" /> known to this instance.</returns>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException">Any <see cref="T:System.Type" /> fails to load.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.IsAssignable(System.Type,System.Type)">
      <summary>Indicates whether one type can be safely assigned to another type.</summary>
      <returns>true if the assignment can be safely made; otherwise false.</returns>
      <param name="toType">The target <see cref="T:System.Type" /> of the assignment.</param>
      <param name="fromType">The source <see cref="T:System.Type" /> of the assignment.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.IsEnum(System.Type)">
      <summary>Indicates whether a <see cref="T:System.Type" /> is of type <see cref="T:System.Enum" /> .</summary>
      <returns>true if the <see cref="T:System.Type" /> is an <see cref="T:System.Enum" /> ; otherwise false.</returns>
      <param name="type">The <see cref="T:System.Type" /> to be tested.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.IsSubclassOf(System.Type,System.Type)">
      <summary>Indicates whether a <see cref="T:System.Type" /> is a derived class of another <see cref="T:System.Type" /> .</summary>
      <returns>true if the tested relationship is true; otherwise false.</returns>
      <param name="subclass">The <see cref="T:System.Type" /> being tested as a derived class.</param>
      <param name="superClass">The <see cref="T:System.Type" /> being tested as the class.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.IsSupportedProperty(System.Reflection.PropertyInfo,System.Object)">
      <summary>Returns a value that determines whether the specified property is supported in the target .NET Framework.</summary>
      <returns>true if the specified property is supported in the target .NET Framework; otherwise, false.</returns>
      <param name="property">The property to resolve.</param>
      <param name="declaringInstance">The instance in which the specified property is declared.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.TypeProvider.IsSupportedPropertyResolver">
      <summary>Gets or sets the delegate that references a method with two parameters and one return value that determines whether a specified property is supported in the target .NET Framework.</summary>
      <returns>The delegate that references a method with two parameters and one return value that determines whether a specified property is supported in the target .NET Framework.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.TypeProvider.LocalAssembly">
      <summary>Gets a value that represents the locally defined <see cref="T:System.Reflection.Assembly" /> for this instance.</summary>
      <returns>The locally defined <see cref="T:System.Reflection.Assembly" /> for this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.TypeProvider.ReferencedAssemblies">
      <summary>Gets a collection of all assemblies referenced by the <see cref="T:System.Type" />.</summary>
      <returns>A collection of all assemblies referenced by the <see cref="T:System.Type" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.RefreshCodeCompileUnit(System.CodeDom.CodeCompileUnit,System.EventHandler)">
      <summary>Updates the <see cref="T:System.CodeDom.CodeCompileUnit" /> reference associated with this instance.</summary>
      <param name="codeCompileUnit">The <see cref="T:System.CodeDom.CodeCompileUnit" /> to refresh with.</param>
      <param name="refresher">The <see cref="T:System.EventHandler" /> to delegate this event to.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="codeCompileUnit" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">This instance already references the subject <see cref="T:System.CodeDom.CodeCompileUnit" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.RemoveAssembly(System.Reflection.Assembly)">
      <summary>Removes all references to the subject <see cref="T:System.Reflection.Assembly" /> from this instance.</summary>
      <param name="assembly">The <see cref="T:System.Reflection.Assembly" /> to remove from this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is a null reference (Nothing in Visual Basic)</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.RemoveAssemblyReference(System.String)">
      <summary>Removes a path-based <see cref="T:System.Reflection.Assembly" /> reference from this instance.</summary>
      <param name="path">The path of the <see cref="T:System.Reflection.Assembly" /> to be removed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="path" /> is a null reference (Nothing in Visual Basic)</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.RemoveCodeCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary>Removes all references to the subject <see cref="T:System.CodeDom.CodeCompileUnit" /> from this instance.</summary>
      <param name="codeCompileUnit">The <see cref="T:System.CodeDom.CodeCompileUnit" /> to be removed.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="codeCompileUnit" /> is a null reference (Nothing in Visual Basic)</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.TypeProvider.SetLocalAssembly(System.Reflection.Assembly)">
      <summary>Sets the value of the local <see cref="T:System.Reflection.Assembly" /> to the referenced <see cref="T:System.Reflection.Assembly" /> .</summary>
      <param name="assembly">The <see cref="T:System.Reflection.Assembly" /> used to set this value</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrors">
      <summary>Gets an <see cref="T:System.Collections.IDictionary" /> of load error exceptions keyed by the <see cref="T:System.Object" /> that causes the <see cref="T:System.Exception" />.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> of load error exceptions keyed by the <see cref="T:System.Object" /> that causes the <see cref="T:System.Exception" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrorsChanged">
      <summary>Occurs when the collection <see cref="P:System.Workflow.ComponentModel.Compiler.TypeProvider.TypeLoadErrors" /> is modified.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Workflow.ComponentModel.Compiler.TypeProvider.TypesChanged">
      <summary>Occurs when the collection of defined types is modified.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ValidationError">
      <summary>Represents the base class for all validation errors.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationError.#ctor(System.String,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> class; initializes the error text and error numbers for this instance.</summary>
      <param name="errorText">The associated error text for this instance.</param>
      <param name="errorNumber">The error number for this error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationError.#ctor(System.String,System.Int32,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> class, initializes the error text, error number and error type for this instance.</summary>
      <param name="errorText">The associated error text for this instance.</param>
      <param name="errorNumber">The error number for this error.</param>
      <param name="isWarning">A Boolean which is true if the error is considered a warning and false otherwise.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationError.#ctor(System.String,System.Int32,System.Boolean,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> class, initializing the error text, the error number, the error type and the property name associated with the error.</summary>
      <param name="errorText">The associated error text for this instance.</param>
      <param name="errorNumber">The error number for this error.</param>
      <param name="isWarning">A Boolean which is true if the error is considered a warning and false otherwise.</param>
      <param name="propertyName">The name of the property associated with this error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ValidationError.ErrorNumber">
      <summary>Gets the error number of this instance.</summary>
      <returns>The error number of this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ValidationError.ErrorText">
      <summary>Gets the error text for this instance.</summary>
      <returns>The error text for this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationError.GetNotSetValidationError(System.String)">
      <summary>Creates a new validation error defined for the error type of a property not being set.</summary>
      <returns>A new validation error defined for the error type of a property not being set.</returns>
      <param name="propertyName">The property associated with this error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ValidationError.IsWarning">
      <summary>Gets a value that indicates whether this instance is a warning.</summary>
      <returns>true if a warning; otherwise false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ValidationError.PropertyName">
      <summary>Gets or sets the name of the property that failed to validate. </summary>
      <returns>A <see cref="T:System.String" /> that contains the name of the property that failed to validate.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationError.ToString">
      <summary>Provides a string representation of this instance incorporating the error type (error or warning) the error number and the error text.</summary>
      <returns>A string representation of this instance incorporating the error type (error or warning) the error number and the error text.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ValidationError.UserData">
      <summary>Gets an <see cref="T:System.Collections.IDictionary" /> for the definition and storage of user-defined data related to this instance.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> for the definition and storage of user-defined data related to this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection">
      <summary>Holds a collection of <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> objects.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> class.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.Compiler.ValidationError})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> class from an <see cref="T:System.Collections.IEnumerable" /> collection of type <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /></summary>
      <param name="value">The <see cref="T:System.Collections.IEnumerable" /> collection of type <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection.#ctor(System.Workflow.ComponentModel.Compiler.ValidationErrorCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> class by using a <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" />.</summary>
      <param name="value">A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains validation errors.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection.AddRange(System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.Compiler.ValidationError})">
      <summary>Copies the collection of enumerable elements to the end of the collection.</summary>
      <param name="value">A collection of <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> elements to add to the end of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection.HasErrors">
      <summary>Indicates whether the collection contains <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> objects that indicate compilation errors.</summary>
      <returns>true if the activity has generated validation errors; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection.HasWarnings">
      <summary>This property indicates whether the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> contains at least one <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> object, which indicates a compilation warning.</summary>
      <returns>true if the activity has generated validation warnings; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection.ToArray">
      <summary>Returns a new instance of an array that contains all <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> objects that are contained in this collection.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> array of <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> classes.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ValidationManager">
      <summary>Enables the sharing of contextual information, such as property validation, parent activity, and so on, across validators during the compilation process.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationManager.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> class using the identified service provider.</summary>
      <param name="serviceProvider">An <see cref="T:System.IServiceProvider" /> that locates a GUID identified service.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationManager.#ctor(System.IServiceProvider,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> class using the identified service provider and indicates whether child <see cref="T:System.Workflow.ComponentModel.Activity" /> classes should be validated.</summary>
      <param name="serviceProvider">An <see cref="T:System.IServiceProvider" /> that locates a GUID identified service.</param>
      <param name="validateChildActivities">true to validate the child <see cref="T:System.Workflow.ComponentModel.Activity" /> classes of the current <see cref="T:System.Workflow.ComponentModel.Activity" />; otherwise, false.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ValidationManager.Context">
      <summary>Gets a value that indicates the stack object that a validator can use to make information available to nested validators.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> that a validator can use to make information available to nested validators.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationManager.GetService(System.Type)">
      <summary>Gets the service object of the specified <see cref="T:System.Type" />.</summary>
      <returns>A service object of type <paramref name="serviceType" />, or a null reference (Nothing in Visual Basic) if there is no service object of type <paramref name="serviceType" />.</returns>
      <param name="serviceType">An object that specifies the <see cref="T:System.Type" /> of service object to retrieve.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationManager.GetValidators(System.Type)">
      <summary>Returns an array of validators that are associated with a type by looking up the validator attribute applied on the type.</summary>
      <returns>An array of <see cref="T:System.Workflow.ComponentModel.Compiler.Validator" /> classes.</returns>
      <param name="type">The <see cref="T:System.Type" /> of <see cref="T:System.Workflow.ComponentModel.Compiler.Validator" /> class to find.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ValidationManager.ValidateChildActivities">
      <summary>Gets a value that indicates whether child <see cref="T:System.Workflow.ComponentModel.Activity" /> classes should be validated.</summary>
      <returns>true if child <see cref="T:System.Workflow.ComponentModel.Activity" /> classes should be validated; otherwise, false.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ValidationOption">
      <summary>Specifies the validation options in the <see cref="P:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute.ValidationOption" /> property.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.Compiler.ValidationOption.None">
      <summary>No validation performed.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Compiler.ValidationOption.Optional">
      <summary>Validation is optional. If value is present, it will be validated.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Compiler.ValidationOption.Required">
      <summary>Validation must be performed. Value must be present and will be validated.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute">
      <summary>Custom attribute that contains <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationOption" /> information. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute.#ctor(System.Workflow.ComponentModel.Compiler.ValidationOption)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute" /> class, with a value for <see cref="P:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute.ValidationOption" />.</summary>
      <param name="validationOption">The required <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationOption" /> enumeration value for this instance.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.ValidationOptionAttribute.ValidationOption">
      <summary>Gets the value of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationOption" /> associated with this instance.</summary>
      <returns>The value of the <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationOption" /> associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.Validator">
      <summary>Base class for all validator components.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.Validator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.Validator" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.Validator.GetFullPropertyName(System.Workflow.ComponentModel.Compiler.ValidationManager)">
      <summary>Helper method to extract the full property name.</summary>
      <returns>The full property name.</returns>
      <param name="manager">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> linked to the validation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> is null.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.Validator.Validate(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
      <summary>Validates the specified object and returns a collection of validation errors.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the validation errors resulting from this operation.</returns>
      <param name="manager">The validation manager linked to the validation.</param>
      <param name="obj">The <see cref="T:System.Object" /> to be validated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is a null reference (Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.Validator.ValidateActivityChange(System.Workflow.ComponentModel.Activity,System.Workflow.ComponentModel.ActivityChangeAction)">
      <summary>When overridden in a derived class, validates a change based on a specified <see cref="T:System.Workflow.ComponentModel.Activity" /> being added or removed. This function is called during the application of changes that are made to the workflow during dynamic updates.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> generated by the operation.</returns>
      <param name="activity">The specified <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <param name="action">The specified <see cref="T:System.Workflow.ComponentModel.ActivityChangeAction" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="action" /> is a null reference (Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.Validator.ValidateProperties(System.Workflow.ComponentModel.Compiler.ValidationManager,System.Object)">
      <summary>Helper method to automatically validate the specific objects properties.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the validation errors resulting from this operation.</returns>
      <param name="manager">The validation manager linked to the validation.</param>
      <param name="obj">The <see cref="T:System.Workflow.ComponentModel.Activity" /> to be validated.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is a null reference (Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.Validator.ValidateProperty(System.Reflection.PropertyInfo,System.Object,System.Object,System.Workflow.ComponentModel.Compiler.ValidationManager)">
      <summary>Performs validation on a property and returns a <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the results of that validation.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> that contains the results of that validation.</returns>
      <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo" /> on the subject property.</param>
      <param name="propertyOwner">The owner of the property.</param>
      <param name="propertyValue">The value of the property.</param>
      <param name="manager">A <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationManager" /> for this operation.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilationContext">
      <summary>Provides workflow compilation options for the current compilation or validation task.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilationContext.CheckTypes">
      <summary>Gets a value that indicates whether <see cref="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes" /> is enabled at the current scope.</summary>
      <returns>true if <see cref="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes" /> is enabled; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilationContext.CreateScope(System.IServiceProvider)">
      <summary>Initializes a <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilationContext" /> class at the current scope.</summary>
      <returns>A reference to the scope.</returns>
      <param name="serviceProvider">The workflow compiler options for the current scope.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilationContext.Current">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilationContext" /> that is available at the current scope.</summary>
      <returns>The workflow compilation context that is available at the current scope, or null if no compilation scope is initialized.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilationContext.GetAuthorizedTypes">
      <summary>Returns a list of types that the compiler allows in compiled workflows.</summary>
      <returns>A list of types that the compiler allows in compiled workflows.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilationContext.Language">
      <summary>Gets the workflow compiler options <see cref="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.Language" /> that is available at the current scope.</summary>
      <returns>The workflow compiler options programming language that is available at the current scope.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilationContext.RootNamespace">
      <summary>Gets the workflow compiler options <see cref="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.RootNamespace" /> that is available at the current scope.</summary>
      <returns>The workflow compiler options root namespace that is available at the current scope.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.WorkflowCompiler">
      <summary>Represents the compiler for workflows that are developed using C# or Visual Basic code and/or XAML markup. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompiler.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompiler" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompiler.Compile(System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters,System.String[])">
      <summary>Compiles a list of workflows contained in the files that are passed as parameters based on the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerResults" /> representing the results of the operation.</returns>
      <param name="parameters">The <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters" />.</param>
      <param name="files">A string array that contains the paths to the files to compile. These files can be either code files (such as .vb or .cs) or workflow markup files. Workflow markup files must have an .xoml extension to be recognized by the compiler.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parameters" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="files" /> is a null reference (Visual Basic Nothing).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerError">
      <summary>Represents a <see cref="T:System.CodeDom.Compiler.CompilerError" /> that is obtained during the workflow compilation process.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilerError.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerError" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerError" /> class. Includes initialization for several properties which define the error.</summary>
      <param name="fileName">A string containing the name of the source file that has the error.</param>
      <param name="line">An integer representing the line number of the error.</param>
      <param name="column">An integer representing the column position of the start of the error.</param>
      <param name="errorNumber">A string that contains the error number.</param>
      <param name="errorText">A string that contains text which describes the error.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilerError.#ctor(System.String,System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerError" /> class. Initializes the instance to define the source file name and <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" />.</summary>
      <param name="fileName">A string that contains the name of the source file that has the error.</param>
      <param name="exception">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" /> to associate with this instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="exception" /> is a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerError.PropertyName">
      <summary>Returns the property associated with the compiler error.</summary>
      <returns>The property associated with the compiler error.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilerError.ToString">
      <summary>Provides a string which represents this instance.</summary>
      <returns>A string which represents this instance/</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerError.UserData">
      <summary>Gets an <see cref="T:System.Collections.IDictionary" /> which can be accessed to read and write user-defined data associated with this instance.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> which can be accessed to read and write user-defined data associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerOptionsService">
      <summary>Provides a default implementation of <see cref="T:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilerOptionsService.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerOptionsService" /> class.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerOptionsService.CheckTypes">
      <summary>Gets a value that indicates whether the types in the workflow being compiled are checked against a list that allows or excludes types based on the value of the <see cref="P:System.Workflow.ComponentModel.Compiler.AuthorizedType.Authorized" /> property.</summary>
      <returns>true if <see cref="P:System.Workflow.ComponentModel.Compiler.IWorkflowCompilerOptionsService.CheckTypes" /> is enabled; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerOptionsService.Language">
      <summary>Gets the name of the programming language used by the environment.</summary>
      <returns>The name of the programming language used by the workflow compiler.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerOptionsService.RootNamespace">
      <summary>Gets the root namespace for the environment.</summary>
      <returns>The root namespace for the environment.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerOptionsService.TargetFrameworkMoniker">
      <summary>Gets the target .NET Framework version for the compiled workflow assembly.</summary>
      <returns>The target .NET Framework version for the compiled workflow assembly.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters">
      <summary>Represents parameters passed to <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompiler" /> during the compilation process.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters.#ctor(System.String[])">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters" /> class, with the names of the assemblies used in compilation.</summary>
      <param name="assemblyNames">The names of the assemblies used in compilation.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters.#ctor(System.String[],System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters" /> class, with the names of the assemblies used in compilation, and the name to apply to the output file.</summary>
      <param name="assemblyNames">The names of the assemblies used in compilation.</param>
      <param name="outputName">The name to apply to the output file.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters" /> class, with the names of the assemblies used in compilation, and the name to apply to the output file, and the designator for inclusion of debug information.</summary>
      <param name="assemblyNames">The names of the assemblies used in compilation.</param>
      <param name="outputName">The name to apply to the output file.</param>
      <param name="includeDebugInformation">Indicates whether a PDB file should be generated for debugging.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters.#ctor(System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters" /> class from an existing instance.</summary>
      <param name="parameters">The instance of <see cref="System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters)" /> used to initialize the new instance.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters.CompilerOptions">
      <summary>Gets or sets a string that contains command-line options for this compilation.</summary>
      <returns>A string that contains command-line options for this compilation.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters.GenerateCodeCompileUnitOnly">
      <summary>Gets or sets a value which indicates whether to generate only a <see cref="T:System.CodeDom.CodeCompileUnit" />, or to call the C# or Visual Basic compiler to generate the executable or DLL.</summary>
      <returns>A value which indicates whether to generate only a <see cref="T:System.CodeDom.CodeCompileUnit" /> , or to call the C# or Visual Basic compiler to generate the executable or DLL.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters.LanguageToUse">
      <summary>Gets or sets a string which contains the language to use in compilation of the <see cref="T:System.CodeDom.CodeCompileUnit" />.</summary>
      <returns>A string which contains the language to use in compilation of the <see cref="T:System.CodeDom.CodeCompileUnit" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters.LibraryPaths">
      <summary>Gets the property that represents a collection of directory names under which compiler looks for referenced assemblies.</summary>
      <returns>The property that represents a collection of directory names under which compiler looks for referenced assemblies.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerParameters.UserCodeCompileUnits">
      <summary>Gets or sets the collection of code compile units which will be used in this invocation of the workflow compiler.</summary>
      <returns>The collection of code compile units which will be used in this invocation of the workflow compiler.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.WorkflowCompilerResults">
      <summary>Represents the results of a workflow compilation. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowCompilerResults.CompiledUnit">
      <summary>Gets the <see cref="T:System.CodeDom.CodeCompileUnit" /> that was produced during compilation of the workflow.</summary>
      <returns>The <see cref="T:System.CodeDom.CodeCompileUnit" /> associated with this instance.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.WorkflowMarkupSourceAttribute">
      <summary>Attribute that contains information about a Workflow markup file. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowMarkupSourceAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowMarkupSourceAttribute" /> class, initializing the values of <see cref="P:System.Workflow.ComponentModel.Compiler.WorkflowMarkupSourceAttribute.FileName" /> and <see cref="P:System.Workflow.ComponentModel.Compiler.WorkflowMarkupSourceAttribute.MD5Digest" />.</summary>
      <param name="fileName">A string that contains the file name of the mark up file.</param>
      <param name="md5Digest">A string representing the <see cref="P:System.Workflow.ComponentModel.Compiler.WorkflowMarkupSourceAttribute.MD5Digest" />for the file.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowMarkupSourceAttribute.FileName">
      <summary>Gets the name of the file represented by this instance.</summary>
      <returns>The name of the file represented by this instance</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowMarkupSourceAttribute.MD5Digest">
      <summary>Gets the MD5 hash algorithm computed checksum that is associated with the workflow markup source file. </summary>
      <returns>A <see cref="T:System.String" /> that contains the checksum associated with the workflow markup source file.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException">
      <summary>Represents an <see cref="T:System.Exception" /> that occurs when a workflow does not pass validation. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException" /> class. The exception message is passed as a parameter.</summary>
      <param name="message">The exception message.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException" /> class. The exception message and the inner exception are passed as parameters.</summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The <see cref="P:System.Exception.InnerException" /> associated with this exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException.#ctor(System.String,System.Workflow.ComponentModel.Compiler.ValidationErrorCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException" /> class. The exception message and the errors collection are passed as parameters.</summary>
      <param name="message">The exception message.</param>
      <param name="errors">The <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationErrorCollection" /> associated with this exception.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException.Errors">
      <summary>Returns <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" />s that were obtained when creating/validating workflows.</summary>
      <returns>An array that contains each <see cref="T:System.Workflow.ComponentModel.Compiler.ValidationError" /> that caused this exception.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the <see cref="T:System.Workflow.ComponentModel.Compiler.WorkflowValidationFailedException" />. </summary>
      <param name="info">Reference to the object that holds the data needed to serialize and deserialize the exception.</param>
      <param name="context">Provides the means to serialize the exception data.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter">
      <summary>Provides a type converter to convert <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> classes to and from various other representations.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value indicating whether this converter can convert an object of the given source type to an <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> using the specified context.</summary>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
      <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type to convert. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value indicating whether this converter can convert an <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> to the destination type using the specified context.</summary>
      <returns>true if this converter can perform the conversion; otherwise, false.</returns>
      <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="destinationType">A <see cref="T:System.Type" /> that represents the type to convert the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> to. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the specified object to an <see cref="T:System.Workflow.ComponentModel.ActivityBind" />, using the specified context and culture information.</summary>
      <returns>The <see cref="T:System.Object" /> that represents the converted value.</returns>
      <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">An optional <see cref="T:System.Globalization.CultureInfo" />. If not supplied, the current culture is assumed.</param>
      <param name="valueToConvert">The <see cref="T:System.Object" /> to convert.</param>
      <exception cref="T:System.InvalidOperationException">An error occurred while converting <paramref name="valueToConvert" /> to an <see cref="T:System.Workflow.ComponentModel.ActivityBind" />.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts the specified <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> object to the specified type using the specified context and culture.</summary>
      <returns>The converted object.</returns>
      <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> into which the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> will be converted.</param>
      <param name="value">The <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> to convert.</param>
      <param name="destinationType">The <see cref="T:System.Type" /> to convert the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> to.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary>Returns a collection of properties for the type of array specified by the <paramref name="value" /> parameter using the specified context and attributes.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> with the properties that are exposed for this data type, or a null reference (Nothing in Visual Basic) if there are no properties.</returns>
      <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <param name="value">An <see cref="T:System.Object" /> that specifies the type of array for which to get properties.</param>
      <param name="attributes">An <see cref="T:System.Attribute" /> array that is used as a filter.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns a value indicating whether the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> supports properties using the specified context.</summary>
      <returns>true if <see cref="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> should be called to find the properties of this object; otherwise, false.</returns>
      <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns a collection of standard values for the <see cref="T:System.Workflow.ComponentModel.ActivityBind" /> data type using the specified context.</summary>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> that holds a standard set of valid values or a null reference (Nothing in Visual Basic) if the data type does not support a standard set of values.</returns>
      <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns whether the collection of standard values returned from <see cref="Overload:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetStandardValues" /> is an exclusive list of possible values, using the specified context.</summary>
      <returns>true if the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> returned from <see cref="Overload:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetStandardValues" /> is an exhaustive list of possible values; false if other values are possible.</returns>
      <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.</summary>
      <returns>true if <see cref="Overload:System.Workflow.ComponentModel.Design.ActivityBindTypeConverter.GetStandardValues" /> should be called to find a common set of values the object supports; otherwise, false.</returns>
      <param name="context">The <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs">
      <summary>Contains information about changes made to the activity associated with the designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs.#ctor(System.Workflow.ComponentModel.Activity,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary>Initializes an instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs" />.</summary>
      <param name="activity">The Activity associated with the designer that has changed.</param>
      <param name="member">The member of the Activity that has changed.</param>
      <param name="oldValue">The value of the member before the change.</param>
      <param name="newValue">The value of the member after the change.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs.Activity">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Activity" /> that has changed.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Activity" /> that has changed.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs.Member">
      <summary>The member of the <see cref="T:System.Workflow.ComponentModel.Activity" /> being changed.</summary>
      <returns>A <see cref="T:System.ComponentModel.MemberDescriptor" /> that describes the member that has changed.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs.NewValue">
      <summary>The new value of the member of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that has changed.</summary>
      <returns>The new value of the member that has changed.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs.OldValue">
      <summary>The old value of the member of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that has changed.</summary>
      <returns>The old value of the member that has changed.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesigner">
      <summary>Provides a mandatory base class for all activity designer components.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> class.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.AccessibilityObject">
      <summary>Gets an <see cref="T:System.Windows.Forms.AccessibleObject" /> that accessibility applications use to adjust the application UI for users who have impairments.</summary>
      <returns>The <see cref="T:System.Windows.Forms.AccessibleObject" /> associated with the control.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Activity">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with the designer.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with the designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Bounds">
      <summary>Gets a <see cref="T:System.Drawing.Rectangle" /> which contains the value for the enclosing rectangle of the designer in logical coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that encloses the designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.CanBeParentedTo(System.Workflow.ComponentModel.Design.CompositeActivityDesigner)">
      <summary>Gets a value that indicates if a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> can be set as the parent of the activity associated with the designer.</summary>
      <returns>true if a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> can be set as the parent of the activity associated with the designer; otherwise, false.</returns>
      <param name="parentActivityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> which can potentially be set as parent.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.CanConnect(System.Workflow.ComponentModel.Design.ConnectionPoint,System.Workflow.ComponentModel.Design.ConnectionPoint)">
      <summary>Returns a value that indicates whether a connection can be created between the specified connection point on the current activity designer and the specified connection point on a target activity designer.</summary>
      <returns>true to indicate that a connection can be created between source and target; otherwise, false.  </returns>
      <param name="source">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> to check on the current activity designer.</param>
      <param name="target">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> to check on the target activity designer.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.CreateView(System.ComponentModel.Design.ViewTechnology)">
      <summary>Creates a workflow view for the current activity designer using the specified ViewTechnology.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> that contains the current activity designer.</returns>
      <param name="viewTechnology">The ViewTechnology to use to create the workflow view.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.DesignerActions">
      <summary>Gets the array of actions associated with configuration errors.</summary>
      <returns>A read-only array of <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.DesignerTheme">
      <summary>Gets the current designer theme for the activity designer.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> that contains theme settings for the activity designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.Dispose">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> and optionally releases the managed resources.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.Dispose(System.Boolean)">
      <summary>Releases the resources used by the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <param name="disposing">true if the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> is being disposed; false if the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> is being finalized.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.DoDefaultAction">
      <summary>Performs the default UI action associated with the designer.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.EnableVisualResizing">
      <summary>Gets a value that indicates whether the activity designer can be resized in a free form designer.</summary>
      <returns>true if the activity designer can be resized in a <see cref="T:System.Workflow.ComponentModel.Design.FreeFormActivityDesigner" />; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.EnsureVisible">
      <summary>Shifts the visible area of the screen to guarantee that the specified designer is visible.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.Finalize">
      <summary>Provided as an override to <see cref="M:System.Object.Finalize" /> to clean up any resources deterministically.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.GetConnectionPoints(System.Workflow.ComponentModel.Design.DesignerEdges)">
      <summary>Returns a read-only collection of connection points for the activity designer along the specified DesignerEdges.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> generic read-only collection that is used as the points at which the activity designer can connect to other activity designers. </returns>
      <param name="edges">The DesignerEdges along which to gather the connection points.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.GetConnections(System.Workflow.ComponentModel.Design.DesignerEdges)">
      <summary>Returns a read-only collection of points that the designer uses for connections.</summary>
      <returns>A Point read-only collection that contains the connections to use for the activity designer.</returns>
      <param name="edges">The DesignerEdges on which to query for points.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.GetPreviewImage(System.Drawing.Graphics)">
      <summary>Gets the image of the activity designer on the specified <see cref="T:System.Drawing.Graphics" />.</summary>
      <returns>An <see cref="T:System.Drawing.Image" /> object that contains a bitmap used as a preview image in the drag-and-drop operations and in the <see cref="T:System.Workflow.Activities.ConditionedActivityGroup" /> preview pane.</returns>
      <param name="compatibleGraphics">The <see cref="T:System.Drawing.Graphics" /> object used to draw the image.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.GetRootDesigner(System.IServiceProvider)">
      <summary>Returns the designer associated with the design surface of the workflow.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> that is the <see cref="P:System.ComponentModel.Design.IDesignerHost.RootComponent" /> of the designer host.</returns>
      <param name="serviceProvider">An <see cref="T:System.Object" /> that implements <see cref="T:System.IServiceProvider" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.GetService(System.Type)">
      <summary>Tries to retrieve the specified type of service from the design mode site for the activity associated with the designer.</summary>
      <returns>An object implementing the requested service or a null reference (Nothing in Visual Basic) if the service cannot be resolved.</returns>
      <param name="serviceType">The type of service to request.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Glyphs">
      <summary>Gets a collection of glyphs with which to adorn the designer.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection" /> that contains the glyphs to display on the designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.HitTest(System.Drawing.Point)">
      <summary>Gets information about the ActivityDesigner at a specified point on the screen.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that contains information about the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> at a specified point.</returns>
      <param name="point">A <see cref="T:System.Drawing.Point" /> that represents a single x,y coordinate.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Image">
      <summary>Gets or sets the <see cref="T:System.Drawing.Image" /> associated with the designer.</summary>
      <returns>The <see cref="T:System.Drawing.Image" /> associated with the designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.ImageRectangle">
      <summary>Gets the value for the enclosing bounds of the image associated with the designer in logical coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.Initialize(System.Workflow.ComponentModel.Activity)">
      <summary>Initializes the designer with the associated <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> with which the designer should be initialized.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.Invalidate">
      <summary>Invalidates the designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.Invalidate(System.Drawing.Rectangle)">
      <summary>Invalidates the specified rectangle on the designer.</summary>
      <param name="rectangle">A <see cref="T:System.Drawing.Rectangle" /> that specifies the area on the workflow to invalidate.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.InvokingDesigner">
      <summary>Gets or sets the designer of the activity that invokes the activity associated with the current activity designer.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> to invoke the current activity designer. </returns>
      <exception cref="T:System.NotSupportedException">A set operation was attempted on <see cref="P:System.Workflow.ComponentModel.Design.ActivityDesigner.InvokingDesigner" />.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.IsCommentedActivity(System.Workflow.ComponentModel.Activity)">
      <summary>Returns a Boolean value that indicates whether the current designer's activity is commented or is inside a commented activity.</summary>
      <returns>true if the activity is commented or is inside a commented activity; otherwise, false.</returns>
      <param name="activity">
        <see cref="T:System.Workflow.ComponentModel.Activity" /> in the current activity designer. </param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.IsLocked">
      <summary>Gets a value that indicates whether the activity associated with the designer can be modified.</summary>
      <returns>true if the activity associated with the designer can be modified; otherwise, false. </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.IsPrimarySelection">
      <summary>Gets a value that indicates if the activity associated with the designer is the primary selection.</summary>
      <returns>true if the activity associated with the designer is the primary selection; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.IsRootDesigner">
      <summary>Gets a value that indicates whether the designer is a root designer.</summary>
      <returns>true if the designer is a root designer; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.IsSelected">
      <summary>Gets a value that indicates if the activity associated with the designer is selected.</summary>
      <returns>true if the activity associated with the designer is selected; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.IsSupportedActivityType(System.Type)">
      <summary>Returns a value that indicates whether the specified activity type is supported if the activity designer is a root designer.</summary>
      <returns>true if <paramref name="activityType" /> is a supported activity; otherwise, false. </returns>
      <param name="activityType">The <see cref="T:System.Type" /> is supported.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.IsVisible">
      <summary>Gets a value that indicates if the activity associated with the designer is visible on the workflow.</summary>
      <returns>true if the activity associated with the designer is visible on the workflow; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.LoadViewState(System.IO.BinaryReader)">
      <summary>Loads the view state of the designer from a binary stream.</summary>
      <param name="reader">A <see cref="T:System.IO.BinaryReader" /> used to restore the designer state.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Location">
      <summary>Gets or sets the location of the designer in logical coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.Point" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.MessageFilters">
      <summary>Gets a read-only collection of message filters that are associated with the activity designer.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" /> read-only collection that includes all standard message filters to associate with the activity designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.MinimumSize">
      <summary>Gets the minimum size for the activity designer.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> that represents the minimum size of the activity designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnActivityChanged(System.Workflow.ComponentModel.Design.ActivityChangedEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> when the activity it is associated with changes.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnBeginResizing(System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> when a user starts to visually resize the activity designer when the designer is in a <see cref="T:System.Workflow.ComponentModel.Design.FreeFormActivityDesigner" />.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnConnected(System.Workflow.ComponentModel.Design.ConnectionPoint,System.Workflow.ComponentModel.Design.ConnectionPoint)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> when a connection is established between two connection points.</summary>
      <param name="source">The source ConnectionPoint on the current activity designer.</param>
      <param name="target">The target ConnectionPoint on the activity designer to connect to. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragDrop(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)">
      <summary>Occurs when the drag drop operation is completed inside designer bounds.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragEnter(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)">
      <summary>Occurs when the drag drop operation is in progress and the pointer enters the designer bounds.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragLeave">
      <summary>Occurs when the drag drop operation is in progress and the pointer leaves the designer bounds.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)">
      <summary>Occurs when the drag drop operation is in progress and the pointer is within the designer bounds.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnEndResizing">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> when a user is finished visually resizing the activity designer when the designer is in a <see cref="T:System.Workflow.ComponentModel.Design.FreeFormActivityDesigner" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnExecuteDesignerAction(System.Workflow.ComponentModel.Design.DesignerAction)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> when the user clicks on the configuration errors associated with the designer.</summary>
      <param name="designerAction">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" /> associated with the configuration error. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="designerAction" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>Updates the visual cues for feedback supplied to the user when performing a drag operation.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>Occurs when a key is pressed when the designer has the keyboard focus.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
      <summary>Occurs when a key is released when the designer has keyboard focus.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnLayoutPosition(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Notifies the ActivityDesigner when a user repositions its visual cues or child activity designers.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnLayoutSize(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Returns the size of the visual cues or child activity designers on the ActivityDesigner.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> that contains the new size settings for the visual cues or child activity designers.</returns>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseCaptureChanged">
      <summary>Occurs when the mouse capture changes.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse button is clicked multiple times on the designer.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse button is pressed when the pointer is in designer bounds.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseDragBegin(System.Drawing.Point,System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the user starts to drag the mouse on the designer.</summary>
      <param name="initialDragPoint">A <see cref="T:System.Drawing.Point" /> that represents a single x,y coordinate.</param>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data..</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseDragEnd">
      <summary>Occurs when the user stops dragging the mouse on the designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseDragMove(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs on each movement of the mouse as the user drags the pointer over the designer.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseEnter(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse first enters the designer bounds.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseHover(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the pointer is in designer bounds.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseLeave">
      <summary>Occurs when the pointer leaves designer bounds.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the pointer is moving in designer bounds.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse button is released when the pointer is in designer bounds.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)">
      <summary>Draws the visual representation of the activity at design time.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnProcessMessage(System.Windows.Forms.Message)">
      <summary>Allows the designer to process raw Win32 messages.</summary>
      <param name="message">A Win32 <see cref="T:System.Windows.Forms.Message" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
      <summary>Controls whether the drag operation should continue.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" />  that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnResizing(System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> when a user is visually resizing it at design time. The method is only called if the activity designer is a child of a <see cref="T:System.Workflow.ComponentModel.Design.FreeFormActivityDesigner" />. </summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnScroll(System.Windows.Forms.ScrollBar,System.Int32)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> when a user changes the scroll position.</summary>
      <param name="sender">The <see cref="T:System.Windows.Forms.ScrollBar" /> on which the user changed position.</param>
      <param name="value">The new scroll position value.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnShowSmartTagVerbs(System.Drawing.Point)">
      <summary>Displays the designer verbs associated with a smart tag at the specified point.</summary>
      <param name="smartTagPoint">A <see cref="T:System.Drawing.Point" /> that designates the location to show the smart tag.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnSmartTagVisibilityChanged(System.Boolean)">
      <summary>Notifies the ActivityDesigner whether a smart tag should be displayed or hidden. </summary>
      <param name="visible">true to indicate the smart tag should be displayed; false to indicate the smart tag should be hidden.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnThemeChange(System.Workflow.ComponentModel.Design.ActivityDesignerTheme)">
      <summary>Notifies the designer that the associated theme has changed.</summary>
      <param name="newTheme">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> that contains the event data.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.ParentDesigner">
      <summary>Gets the parent designer of the existing designer.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />. If the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> is a root designer then the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> returned will be the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />; otherwise, the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> will be the parent <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.ParentView">
      <summary>Gets the workflow view that contains the current activity designer.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> that contains the current activity designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PerformLayout">
      <summary>Updates the layout of the designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PointToLogical(System.Drawing.Point)">
      <summary>Transforms a point from screen coordinate system to the activity designer coordinate system.</summary>
      <returns>A <see cref="T:System.Drawing.Point" /> that contains the transformed x,y coordinates.</returns>
      <param name="point">A <see cref="T:System.Drawing.Point" /> that contains the coordinates to transform.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PointToScreen(System.Drawing.Point)">
      <summary>Transforms a point from the activity designer coordinate system to the screen coordinate system.</summary>
      <returns>A <see cref="T:System.Drawing.Point" /> that contains the transformed x,y coordinates.</returns>
      <param name="point">A <see cref="T:System.Drawing.Point" /> that contains the coordinates to transform.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PostFilterAttributes(System.Collections.IDictionary)">
      <summary>When overridden in a derived class, it allows a designer to change or remove items from the set of attributes that it exposes through a TypeDescriptor.</summary>
      <param name="attributes">The <see cref="T:System.Collections.IDictionary" /> that contains the TypeID values of the attributes.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PostFilterEvents(System.Collections.IDictionary)">
      <summary>When overridden in a derived class, it allows the designer to change or remove items from the set of events that it exposes through a TypeDescriptor.</summary>
      <param name="events">The <see cref="T:System.Collections.IDictionary" /> that contains the event names of the class.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PostFilterProperties(System.Collections.IDictionary)">
      <summary>When overridden in a derived class, it allows a designer to change or remove items from the set of properties that it exposes through a TypeDescriptor.</summary>
      <param name="properties">The <see cref="T:System.Collections.IDictionary" /> that contains the property names of the class.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PreFilterAttributes(System.Collections.IDictionary)">
      <summary>When overridden in a derived class, it allows a designer to add items to the set of attributes that it exposes through a TypeDescriptor.</summary>
      <param name="attributes">The <see cref="T:System.Collections.IDictionary" /> that contains the TypeID values of the attributes.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PreFilterEvents(System.Collections.IDictionary)">
      <summary>When overridden in a derived class, it allows a designer to add items to the set of events that it exposes through a TypeDescriptor.</summary>
      <param name="events">The <see cref="T:System.Collections.IDictionary" /> that contains the event names of the class.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.PreFilterProperties(System.Collections.IDictionary)">
      <summary>When overridden in a derived class it allows a designer to add items to the set of properties that it exposes through a TypeDescriptor.</summary>
      <param name="properties">The <see cref="T:System.Collections.IDictionary" /> that contains the property names of the class.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.RectangleToLogical(System.Drawing.Rectangle)">
      <summary>Transforms a rectangle from the screen coordinate system to the activity designer coordinate system.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that describes the transformed coordinates.</returns>
      <param name="rectangle">A <see cref="T:System.Drawing.Rectangle" /> that describes the coordinates to transform.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.RectangleToScreen(System.Drawing.Rectangle)">
      <summary>Transforms a rectangle from the activity designer coordinate system to the screen coordinate system.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that describes the transformed coordinates.</returns>
      <param name="rectangle">A <see cref="T:System.Drawing.Rectangle" /> that describes the coordinates to transform.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.RefreshDesignerActions">
      <summary>Refreshes the configuration errors associated with the designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.RefreshDesignerVerbs">
      <summary>Refreshes the activity designer verbs associated with the designer by calling the status handler.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.SaveViewState(System.IO.BinaryWriter)">
      <summary>Stores the view state of the designer into a binary stream.</summary>
      <param name="writer">The <see cref="T:System.IO.BinaryWriter" />  into which the view state is stored.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.ShowInfoTip(System.String)">
      <summary>Shows the specified tooltip.</summary>
      <param name="infoTip">The text to display in the InfoTip.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.ShowInfoTip(System.String,System.String)">
      <summary>Displays the info tip for the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with the specified title and text.</summary>
      <param name="title">A string that contains the title of the info tip.</param>
      <param name="infoTip">A string that contains the info tip text to display.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.ShowInPlaceTip(System.String,System.Drawing.Rectangle)">
      <summary>Displays the specified tool tip in the specified rectangle location.</summary>
      <param name="infoTip">A string that contains the tool tip to display.</param>
      <param name="rectangle">A <see cref="T:System.Drawing.Rectangle" /> that defines the location at which to display the tool tip.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.ShowSmartTag">
      <summary>Gets a value that indicates if the activity should show a smart tag.</summary>
      <returns>true if the activity should show a SmartTag; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Size">
      <summary>Gets or sets the size of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> that represents the area of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.SmartTagRectangle">
      <summary>Gets the rectangle where the smart tag should be displayed.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.SmartTagVerbs">
      <summary>Gets a read-only collection of designer actions to associate with a smart tag on the activity designer. </summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" /> read-only collection to associate with the activity designer's smart tag.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesigner#Component">
      <summary>Gets the base component with which the activity designer is associated. </summary>
      <returns>The <see cref="T:System.ComponentModel.IComponent" /> with which the activity designer is associated.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesigner#DoDefaultAction">
      <summary>Performs the default action associated with the designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesigner#Initialize(System.ComponentModel.IComponent)">
      <summary>Initializes the designer with the associated activity.</summary>
      <param name="component">The IComponent to initialize the designer with.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesigner#Verbs">
      <summary>Gets the design-time verbs associated with the activity designer.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> that contains the design-time verbs associated with the activity designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesignerFilter#PostFilterAttributes(System.Collections.IDictionary)">
      <summary>When overridden in a derived class it allows a designer to change or remove items from the set of attributes that it exposes through a TypeDescriptor.</summary>
      <param name="attributes">The <see cref="T:System.Collections.IDictionary" /> that contains the TypeIDs of the attributes of the class.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesignerFilter#PostFilterEvents(System.Collections.IDictionary)">
      <summary>When overridden in a derived class it allows a designer to change or remove items from the set of events that it exposes through a TypeDescriptor.</summary>
      <param name="events">The <see cref="T:System.Collections.IDictionary" /> that contains the event names of the class.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesignerFilter#PostFilterProperties(System.Collections.IDictionary)">
      <summary>When overridden in a derived class it allows a designer to change or remove items from the set of properties that it exposes through a TypeDescriptor.</summary>
      <param name="properties">The <see cref="T:System.Collections.IDictionary" /> that contains the property names of the class.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesignerFilter#PreFilterAttributes(System.Collections.IDictionary)">
      <summary>When overridden in a derived class it allows a designer to add items to the set of attributes that it exposes through a TypeDescriptor.</summary>
      <param name="attributes">The <see cref="T:System.Collections.IDictionary" /> that contains the TypeIDs of the attributes of the class.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesignerFilter#PreFilterEvents(System.Collections.IDictionary)">
      <summary>When overridden in a derived class it allows a designer to add items to the set of events that it exposes through a TypeDescriptor.</summary>
      <param name="events">The <see cref="T:System.Collections.IDictionary" /> that contains the event names of the class.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IDesignerFilter#PreFilterProperties(System.Collections.IDictionary)">
      <summary>When overridden in a derived class it allows a designer to add items to the set of properties that it exposes through a TypeDescriptor.</summary>
      <param name="properties">The <see cref="T:System.Collections.IDictionary" /> that contains the property names of the class.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IRootDesigner#GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary>Returns a view object for the specified view technology.</summary>
      <returns>An object that represents the view for this designer.</returns>
      <param name="technology">A <see cref="T:System.ComponentModel.Design.ViewTechnology" /> for which to return the view object. </param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.System#ComponentModel#Design#IRootDesigner#SupportedTechnologies">
      <summary>Gets the array of technologies that the activity designer can support for its display. </summary>
      <returns>An array of supported <see cref="T:System.ComponentModel.Design.ViewTechnology" /> objects.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Drawing#Design#IToolboxUser#GetToolSupported(System.Drawing.Design.ToolboxItem)">
      <summary>Gets a value indicating whether the specified Toolbox item is supported by the current activity designer.</summary>
      <returns>true if the tool is supported by the toolbox and can be enabled; otherwise, false.</returns>
      <param name="toolboxItem">The <see cref="T:System.Drawing.Design.ToolboxItem" /> to test for support.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Drawing#Design#IToolboxUser#ToolPicked(System.Drawing.Design.ToolboxItem)">
      <summary>Selects the specified toolbox item.</summary>
      <param name="toolboxItem">The <see cref="T:System.Drawing.Design.ToolboxItem" />  to select.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Workflow#ComponentModel#Design#IPersistUIState#LoadViewState(System.IO.BinaryReader)">
      <summary>Restores the view state from a binary stream.</summary>
      <param name="reader">The <see cref="T:System.IO.BinaryReader" /> to load the view state from.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Workflow#ComponentModel#Design#IPersistUIState#SaveViewState(System.IO.BinaryWriter)">
      <summary>Saves the view state to a binary stream.</summary>
      <param name="writer">A <see cref="T:System.IO.BinaryWriter" /> to save the view state to.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Workflow#ComponentModel#Design#IWorkflowRootDesigner#InvokingDesigner">
      <summary>Gets or sets the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> that requested the activity designer be initialized. </summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> that requested the activity designer be initialized.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Workflow#ComponentModel#Design#IWorkflowRootDesigner#IsSupportedActivityType(System.Type)">
      <summary>Returns a value that indicates whether the specified type is supported on the current <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />. </summary>
      <returns>true if <paramref name="type" /> is supported on the current workflow designer; otherwise, false.</returns>
      <param name="activityType">The <see cref="T:System.Type" /> of the activity to check for support on the activity designer. </param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Workflow#ComponentModel#Design#IWorkflowRootDesigner#MessageFilters">
      <summary>Gets any message filters associated with the activity designer. </summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" /> read-only collection that contains any message filters associated with the workflow root designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.System#Workflow#ComponentModel#Design#IWorkflowRootDesigner#SupportsLayoutPersistence">
      <summary>Gets the value that indicates whether the actual workflow root designer supports the layout persistence.</summary>
      <returns>true when the designer supports layout persistence; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Text">
      <summary>Gets or sets the text to associate with the designer.</summary>
      <returns>A <see cref="T:System.String" /> that contains the text to associate with the designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.TextRectangle">
      <summary>Gets the value of the text rectangle in logical coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that contains the text associated with the designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesigner.Verbs">
      <summary>Gets the collection of verbs to be associated with the designer.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection" />. </returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject">
      <summary>Implements an accessible object that <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> classes use to adjust the designer user interface for users who have impairments.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.#ctor(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject" /> class by using the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <param name="activityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> which to apply the accessible object.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.ActivityDesigner">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to which the accessible object is applied.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to which the accessibility object is applied.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.Bounds">
      <summary>Gets the location and size of the accessible object.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds of the accessible object.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.DefaultAction">
      <summary>Gets a string that describes the default action of the activity designer. </summary>
      <returns>A description of the default action associated with the activity designer, or a null reference (Nothing in Visual Basic) if the object has no default action.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.Description">
      <summary>Gets a string that describes the visual appearance of the activity designer. </summary>
      <returns>A description of the activity designer's visual appearance, or a null reference (Nothing in Visual Basic) if the object has no description.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.DoDefaultAction">
      <summary>Performs the default action associated with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.GetService(System.Type)">
      <summary>Returns the service defined by the specified type that is associated with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>An <see cref="T:System.Object" /> that represents the requested service, or a null reference (Nothing in Visual Basic) if the service cannot be resolved.</returns>
      <param name="serviceType">The service <see cref="T:System.Type" /> to request.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.Help">
      <summary>Gets a description of what the activity associated with the activity designer does or how it is used.</summary>
      <returns>A string that contains the description of what the activity associated with the activity designer does or how it is used, or a null reference (Nothing in Visual Basic) if no help is defined.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.Name">
      <summary>Gets or sets the name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with the accessible object's <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>The name of the <see cref="T:System.Workflow.ComponentModel.Activity" /> or a null reference (Nothing in Visual Basic) if the property has not been set.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
      <summary>Returns the <see cref="T:System.Windows.Forms.AccessibleObject" /> associated with the location defined by the specified <see cref="T:System.Windows.Forms.AccessibleNavigation" />.</summary>
      <returns>The <see cref="T:System.Windows.Forms.AccessibleObject" /> at the specified location.</returns>
      <param name="navdir">One of the <see cref="T:System.Windows.Forms.AccessibleNavigation" /> values.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.Parent">
      <summary>Gets the parent of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject" />.</summary>
      <returns>The <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents the parent of the current <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject" /> or a null reference (Nothing in Visual Basic) if there it no parent accessible object.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.Role">
      <summary>Gets the role of the current <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject" />.</summary>
      <returns>One of the <see cref="T:System.Windows.Forms.AccessibleRole" /> values, or <see cref="F:System.Windows.Forms.AccessibleRole.None" /> if no role has been specified.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.Select(System.Windows.Forms.AccessibleSelection)">
      <summary>Modifies the selection or moves the keyboard focus of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject" />.</summary>
      <param name="flags">One of the <see cref="T:System.Windows.Forms.AccessibleSelection" /> values.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject.State">
      <summary>Gets the accessible state of the current <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerAccessibleObject" />.</summary>
      <returns>A combination of <see cref="T:System.Windows.Forms.AccessibleStates" /> values.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection">
      <summary>Exposes a generic <see cref="T:System.Collections.Generic.List`1" /> of designer glyphs associated with an activity designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection" /> class that is empty and has the default initial capacity. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.Design.DesignerGlyph})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection" /> class that contains elements copied from the specified generic collection of <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" />, and has sufficient capacity to accommodate the number of elements copied.</summary>
      <param name="glyphs">Enumerable generic collection containing <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" /> objects.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection.#ctor(System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection" /> class that contains elements copied from the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection" /> and has sufficient capacity to accommodate the number of elements copied. </summary>
      <param name="glyphs">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection" /> from which to copy collection elements.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs">
      <summary>Provides data for the layout event for the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs.#ctor(System.Drawing.Graphics,System.Workflow.ComponentModel.Design.ActivityDesignerTheme)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> class with the specified graphics and designer theme.</summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used the layout the designer.</param>
      <param name="designerTheme">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> to use for look and feel.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs.AmbientTheme">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> associated with the root workflow.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> that contains theme information for the designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs.DesignerTheme">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> associated with the designer.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> that describes the designer look and feel.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs.Graphics">
      <summary>Gets the <see cref="T:System.Drawing.Graphics" /> used to lay out the designer.</summary>
      <returns>The <see cref="T:System.Drawing.Graphics" /> object used to lay out the designer.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutSerializer">
      <summary>Serializes an activity designer layout used in a freeform designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutSerializer.#ctor">
      <summary>Serializes an activity designer layout used in a freeform designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutSerializer.CreateInstance(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Type)">
      <summary>Creates an instance of the specified <see cref="T:System.Type" /> using the specified <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" />.</summary>
      <returns>An instance of the specified <see cref="T:System.Type" />. </returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> supporting this operation.</param>
      <param name="type">The specified <see cref="T:System.Type" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutSerializer.GetProperties(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Retrieves information about all properties associated with the specified object.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> array that contains information about the properties associated with <paramref name="obj" />.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> supporting this operation.</param>
      <param name="obj">The <see cref="T:System.Object" /> to search for properties.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> or <paramref name="obj" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutSerializer.OnBeforeSerialize(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Performs required processing on obj before the serialization process begins.</summary>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> supporting this operation.</param>
      <param name="obj">The <see cref="T:System.Object" /> to search for properties.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaint">
      <summary>Provides static methods used to draw user interface elements on activity designer surfaces. This class cannot be inherited.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerPaint.Draw3DButton(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Single,System.Windows.Forms.ButtonState)">
      <summary>Draws a 3-dimensional button on the activity designer surface.</summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> on which to draw the 3-dimensional button.</param>
      <param name="image">The <see cref="T:System.Drawing.Image" /> to draw on the button.</param>
      <param name="bounds">The <see cref="T:System.Drawing.Rectangle" /> that defines the bounds of the button.</param>
      <param name="transparency">The single-precision floating-point number to specify the transparency level of the button.</param>
      <param name="buttonState">The <see cref="T:System.Windows.Forms.ButtonState" /> enumeration value to specify the appearance of the button.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphics" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerPaint.DrawExpandButton(System.Drawing.Graphics,System.Drawing.Rectangle,System.Boolean,System.Workflow.ComponentModel.Design.CompositeDesignerTheme)">
      <summary>Draws a button that is used to expand and collapse composite designers on the activity designer surface.</summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> on which to draw the button.</param>
      <param name="boundingRect">The <see cref="T:System.Drawing.Rectangle" /> that defines the bounds of the button.</param>
      <param name="drawExpanded">true to draw an expanded button; otherwise, false. </param>
      <param name="compositeDesignerTheme">The <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" /> associated with the activity designer used to render the button.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphics" /> or <paramref name="compositeDesignerTheme" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerPaint.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Workflow.ComponentModel.Design.DesignerContentAlignment,System.Single,System.Boolean)">
      <summary>Draws an image on the activity designer surface by using a <see cref="T:System.Drawing.Graphics" />, an <see cref="T:System.Drawing.Image" />, a source and destination <see cref="T:System.Drawing.Rectangle" />, an <see cref="T:System.Workflow.ComponentModel.Design.DesignerContentAlignment" />, a single-precision floating-point number, and a Boolean value.</summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> on which to draw the image.</param>
      <param name="image">The <see cref="T:System.Drawing.Image" /> to draw.</param>
      <param name="destination">The <see cref="T:System.Drawing.Rectangle" /> that defines the bounds of the image.</param>
      <param name="source">The <see cref="T:System.Drawing.Rectangle" /> that defines the source of the image.</param>
      <param name="alignment">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerContentAlignment" /> that specifies how the image is aligned in the bounding rectangle.</param>
      <param name="transparency">A single-precision floating-point number that defines the transparency settings for the image.</param>
      <param name="grayscale">true to draw the image in grayscales; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphics" />, <paramref name="image" />, <paramref name="destination" />, or <paramref name="source" /> contains a null reference (Nothing in Visual Basic).-or-<paramref name="transparency" /> is less than 0, or greater than 1.0f.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerPaint.DrawImage(System.Drawing.Graphics,System.Drawing.Image,System.Drawing.Rectangle,System.Workflow.ComponentModel.Design.DesignerContentAlignment)">
      <summary>Draws an image on the activity designer surface by using a <see cref="T:System.Drawing.Graphics" />, an <see cref="T:System.Drawing.Image" />, a <see cref="T:System.Drawing.Rectangle" />, and a <see cref="T:System.Workflow.ComponentModel.Design.DesignerContentAlignment" />.</summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> on which to draw the image.</param>
      <param name="image">The <see cref="T:System.Drawing.Image" /> to draw.</param>
      <param name="destination">The <see cref="T:System.Drawing.Rectangle" /> that defines the bounds of the image to draw.</param>
      <param name="alignment">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerContentAlignment" /> that specifies how the image is aligned in the bounding rectangle.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphics" />, <paramref name="image" />, or <paramref name="destination" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerPaint.DrawRoundedRectangle(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Rectangle,System.Int32)">
      <summary>Draws a rounded rectangle on the activity designer surface.</summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> on which to draw the rectangle.</param>
      <param name="drawingPen">The <see cref="T:System.Drawing.Pen" /> to draw the rectangle.</param>
      <param name="rectangle">The <see cref="T:System.Drawing.Rectangle" /> that defines the bounds of the rounded rectangle.</param>
      <param name="radius">The integer value of the radius to use for the rounded edges.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphics" /> or <paramref name="drawingPen" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerPaint.DrawText(System.Drawing.Graphics,System.Drawing.Font,System.String,System.Drawing.Rectangle,System.Drawing.StringAlignment,System.Workflow.ComponentModel.Design.TextQuality,System.Drawing.Brush)">
      <summary>Draws text on the activity designer surface.</summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> on which to draw the text.</param>
      <param name="font">The <see cref="T:System.Drawing.Font" /> used to draw the text</param>
      <param name="text">The text to draw.</param>
      <param name="boundingRect">The bounding <see cref="T:System.Drawing.Rectangle" /> in which the text must be drawn.</param>
      <param name="alignment">The <see cref="T:System.Drawing.StringAlignment" /> that specifies where the text is aligned in the bounding rectangle.</param>
      <param name="textQuality">The <see cref="T:System.Workflow.ComponentModel.Design.TextQuality" /> that specifies the quality setting to draw the text.</param>
      <param name="textBrush">The <see cref="T:System.Drawing.Brush" /> to draw the text.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="graphics" />, <paramref name="font" />, <paramref name="text" />, or <paramref name="textBrush" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerPaint.GetRoundedRectanglePath(System.Drawing.Rectangle,System.Int32)">
      <summary>Returns the graphics path used to draw the specified rounded rectangle.</summary>
      <returns>A <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> that draws the rounded path of the specified rectangle.</returns>
      <param name="rectangle">The <see cref="T:System.Drawing.Rectangle" /> for which to obtain the graphics path.</param>
      <param name="radius">An integer that defines the radius to use to draw the rounded corners.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="rectangle" /> is set to <see cref="P:System.Drawing.Rectangle.IsEmpty" />.-- or --<paramref name="radius" /> is less than or equal to 0.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs">
      <summary>Provides data for the <see cref="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)" />, <see cref="M:System.Workflow.ComponentModel.Design.ConnectionPoint.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs,System.Boolean)" />, <see cref="M:System.Workflow.ComponentModel.Design.Connector.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)" />, and <see cref="M:System.Workflow.ComponentModel.Design.DesignerGlyph.OnPaint(System.Drawing.Graphics,System.Boolean,System.Workflow.ComponentModel.Design.AmbientTheme,System.Workflow.ComponentModel.Design.ActivityDesigner)" /> methods and any overridden versions of OnPaint in classes that derive from them, when they are drawn on a workflow design surface.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs.#ctor(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Workflow.ComponentModel.Design.ActivityDesignerTheme)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> class with the specified graphics, clipping rectangle, viewport and designer theme. </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> used to draw the item.</param>
      <param name="clipRectangle">The <see cref="T:System.Drawing.Rectangle" /> that represents the rectangle in which to draw.</param>
      <param name="viewPort">The view port in which to draw.</param>
      <param name="designerTheme">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> associated with the object to draw.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs.AmbientTheme">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> associated with the workflow design surface.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> that contains theme information for the workflow.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs.ClipRectangle">
      <summary>Gets the <see cref="T:System.Drawing.Rectangle" /> in which to draw.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that describes the area to draw.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs.DesignerTheme">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> associated with the designer.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> that describes the designer look and feel.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs.Graphics">
      <summary>Gets the <see cref="T:System.Drawing.Graphics" /> used to draw the item on the workflow design surface.</summary>
      <returns>The <see cref="T:System.Drawing.Graphics" /> used to draw the item on the workflow design surface.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs">
      <summary>Provides data for the <see cref="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnBeginResizing(System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs)" /> and <see cref="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnResizing(System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs)" /> methods.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs.#ctor(System.Workflow.ComponentModel.Design.DesignerEdges,System.Drawing.Rectangle)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs" /> class by using the specified <see cref="T:System.Workflow.ComponentModel.Design.DesignerEdges" /> value and <see cref="T:System.Drawing.Rectangle" />. </summary>
      <param name="sizingEdge">A <see cref="T:System.Workflow.ComponentModel.Design.DesignerEdges" /> to use to resize the activity designer.</param>
      <param name="newBounds">A <see cref="T:System.Drawing.Rectangle" /> that represents the resized bounds of the activity designer.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs.Bounds">
      <summary>Gets the new bounding rectangle for the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the new bounds of the activity designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs.SizingEdge">
      <summary>Gets the designer edge used to resize the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> on the workflow design surface.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.DesignerEdges" /> used to resize the activity designer on the workflow design surface.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme">
      <summary>Provides the look and feel property settings to a designer in a design-time environment.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)">
      <summary>Initializes an instance of an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" />.</summary>
      <param name="theme">A <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> that contains the theme information for the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BackColorEnd">
      <summary>Gets or sets the <see cref="T:System.Drawing.Color" /> to end with when using a color gradient for the background color.</summary>
      <returns>The background ending <see cref="T:System.Drawing.Color" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BackColorStart">
      <summary>Gets or sets the starting color of the background when using a color gradient on the background.</summary>
      <returns>The background starting <see cref="T:System.Drawing.Color" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BackgroundStyle">
      <summary>Gets or sets the background style.</summary>
      <returns>A <see cref="T:System.Drawing.Drawing2D.LinearGradientMode" /> that describes the background style.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BoldFont">
      <summary>Gets the font for the theme.</summary>
      <returns>The <see cref="T:System.Drawing.Font" /> of the theme.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BorderColor">
      <summary>Gets or sets the <see cref="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BorderColor" /> for the theme.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> that represents the <see cref="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BorderColor" /> of the theme.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BorderPen">
      <summary>Gets the BorderPen for the theme.</summary>
      <returns>A <see cref="T:System.Drawing.Pen" /> that represents the <see cref="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BorderPen" /> of the theme.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BorderStyle">
      <summary>Gets or sets the style used for the border.</summary>
      <returns>A <see cref="T:System.Drawing.Drawing2D.DashStyle" /> enumeration that represents the style used for the border.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.BorderWidth">
      <summary>Gets the width of the border in pixels.</summary>
      <returns>The width of the border in pixels.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.DesignerGeometry">
      <summary>Gets the geometry of the designer.</summary>
      <returns>An enumeration that describes the geometry of the designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.DesignerImage">
      <summary>Gets the image associated with the designer.</summary>
      <returns>The <see cref="T:System.Drawing.Image" /> to display for the designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.DesignerImagePath">
      <summary>Gets or sets the image path for the designer.</summary>
      <returns>The image path for the designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources and optionally releases the managed resources used by <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" />.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.Font">
      <summary>Gets the font of the text used by the theme.</summary>
      <returns>The font of the designer theme.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.ForeColor">
      <summary>Gets or sets the color of the foreground.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> that represents the foreground color of the theme.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.ForegroundBrush">
      <summary>Gets the <see cref="T:System.Drawing.Brush" /> object associated with the theme.</summary>
      <returns>A <see cref="T:System.Drawing.Brush" /> object associated with the theme.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.ForegroundPen">
      <summary>Gets the <see cref="T:System.Drawing.Pen" /> used for painting the foreground of the theme.</summary>
      <returns>A <see cref="T:System.Drawing.Pen" /> that is used to paint the foreground of the theme.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.GetBackgroundBrush(System.Drawing.Rectangle)">
      <summary>Gets a brush used to paint the area specified by the rectangle passed.</summary>
      <returns>A <see cref="T:System.Drawing.Brush" /> that is used to fill interiors of graphical shapes such as rectangles, ellipses, pies, polygons, and paths.</returns>
      <param name="rectangle">A <see cref="T:System.Drawing.Rectangle" /> that specifies the location and size of the area on the background.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.ImageSize">
      <summary>Gets the size of the image of the theme.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> that represents the size of the image.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.Initialize">
      <summary>Initializes the designer theme.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.OnAmbientPropertyChanged(System.Workflow.ComponentModel.Design.AmbientProperty)">
      <summary>Called to signal changes to ambient settings.</summary>
      <param name="ambientProperty">The property that has changed.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerTheme.Size">
      <summary>Gets the size of the designer.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> that represents the size of the designer.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute">
      <summary>Specifies the theme class an activity designer uses on the workflow design surface. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute" /> class by using the specified designer theme type.</summary>
      <param name="designerThemeType">A <see cref="T:System.Type" /> that represents the designer theme to be associated with the designer class.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute.DesignerThemeType">
      <summary>Gets the type of the theme class that encapsulates the designer theme settings to apply to the activity designer.</summary>
      <returns>A <see cref="T:System.Type" /> that encapsulates the designer theme settings.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerThemeAttribute.Xml">
      <summary>Gets or sets an XML string that defines default property settings for the activity designer.</summary>
      <returns>A string that contains the default theme property settings in XML format.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb">
      <summary>Creates a new verb to be used with the designer using the associated verb group, text and event handler.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerVerb.#ctor(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Workflow.ComponentModel.Design.DesignerVerbGroup,System.String,System.EventHandler)">
      <summary>Initializes an instance of an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" /> by using an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />, a <see cref="T:System.Workflow.ComponentModel.Design.DesignerVerbGroup" /> value, a description of the verb, and an <see cref="T:System.EventHandler" />.</summary>
      <param name="activityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to associate with the new verb.</param>
      <param name="verbGroup">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerVerbGroup" /> in which the new verb belongs.</param>
      <param name="text">The description of the verb to show on the menu.</param>
      <param name="invokeHandler">The <see cref="T:System.EventHandler" /> that will handle the menu selection event.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="text" /> is empty or a null reference (Nothing in Visual Basic).-or-<paramref name="invokeHandler" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerVerb.#ctor(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Workflow.ComponentModel.Design.DesignerVerbGroup,System.String,System.EventHandler,System.EventHandler)">
      <summary>Initializes an instance of a <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" /> by using an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />, a <see cref="T:System.Workflow.ComponentModel.Design.DesignerVerbGroup" /> value, a description of the verb, and two <see cref="T:System.EventHandler" /> objects, one to handle menu selection events and the other to handle status updates. </summary>
      <param name="activityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to associate with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" />.</param>
      <param name="verbGroup">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerVerbGroup" /> in which this <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" /> belongs.</param>
      <param name="text">The description of the verb to show on the menu.</param>
      <param name="invokeHandler">The event handler that handles the menu selection event.</param>
      <param name="statusHandler">The event handler that handles status updates.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerVerb.CommandID">
      <summary>Gets a new <see cref="T:System.ComponentModel.Design.CommandID" /> for an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" />.</summary>
      <returns>A new <see cref="P:System.Workflow.ComponentModel.Design.ActivityDesignerVerb.CommandID" /> object.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerVerb.Group">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Design.DesignerVerbGroup" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" />.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.DesignerVerbGroup" /> object.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDesignerVerb.OleStatus">
      <summary>Gets an integer that describes the status of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" />.</summary>
      <returns>An int that describes the OleStatus of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" />.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection">
      <summary>Maintains a collection of <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" /> objects.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection.#ctor">
      <summary>Initializes an instance of an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection.#ctor(System.Collections.Generic.IEnumerable{System.Workflow.ComponentModel.Design.ActivityDesignerVerb})">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection" /> class by using the specified generic <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of verbs. </summary>
      <param name="verbs">A generic <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" /> objects. </param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs">
      <summary>Represents a class that provides data for the <see cref="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragDrop(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)" />, <see cref="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnDragEnter(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)" />, and <see cref="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnDragOver(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)" /> events in the workflow designer.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDragEventArgs.Activities">
      <summary>Gets a collection of activities upon which a drag-and-drop operation is performed.</summary>
      <returns>A read-only collection that contains all <see cref="T:System.Workflow.ComponentModel.Activity" /> objects on which the drag-and-drop operation is performed.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDragEventArgs.DragImageSnapPoint">
      <summary>Gets or sets the location where the activities are to be dropped on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Point" /> that defines the location on the workflow design surface where the activities will be dropped.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityDragEventArgs.DragInitiationPoint">
      <summary>Gets the <see cref="T:System.Drawing.Point" /> on the workflow design surface where a drag operation began.</summary>
      <returns>A <see cref="T:System.Drawing.Point" /> that defines the location on the workflow design surface where the drag operation began.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner">
      <summary>Displays a collection of child activity designers in a preview strip and, when a child designer is selected on the preview strip, displays the selected activity designer in preview or edit mode on a workflow design surface. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.AccessibilityObject">
      <summary>Gets an <see cref="T:System.Windows.Forms.AccessibleObject" /> that allows the designer to adjust its UI for users with disabilities.</summary>
      <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that allows the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> to adjust its UI for users who have impairments.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.ContainedDesigners">
      <summary>Gets a collection of activity designers that are displayed by the activity preview designer.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> read-only collection that contains the designers displayed by <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.CurrentDropTarget">
      <summary>Gets or sets the index of the current drop target in the array of drop targets returned by <see cref="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.GetDropTargets(System.Drawing.Point)" />.</summary>
      <returns>An integer that represents the index of the current drop target for the designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release the managed resources; otherwise, false. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.EnsureVisibleContainedDesigner(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Ensures that the specified activity designer is visible on the workflow design surface.</summary>
      <param name="containedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> for which to ensure visibility on the workflow design surface.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="containedDesigner" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.FirstSelectableObject">
      <summary>Gets the first selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
      <returns>An <see cref="T:System.Object" /> that is the first selectable object in the designer navigation order.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.GetConnectors">
      <summary>Returns an array of rectangles that bound the activity designer's connectors.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> array that defines the bounds of all connectors in the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.GetDropTargets(System.Drawing.Point)">
      <summary>Returns an array of rectangles that represent the valid drop locations within the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> array that represents the valid drop locations within the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</returns>
      <param name="dropPoint">The <see cref="T:System.Drawing.Point" /> that defines the x- and y-coordinates for the drop target.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.GetNextSelectableObject(System.Object,System.Workflow.ComponentModel.Design.DesignerNavigationDirection)">
      <summary>Returns the first selectable object that follows the specified object in the navigation order of the current <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
      <returns>The first selectable <see cref="T:System.Object" /> that follow <paramref name="obj" /> in the navigation order. </returns>
      <param name="obj">The current object in the navigation order.</param>
      <param name="direction">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerNavigationDirection" /> enumeration value that specifies the direction in which designer navigation occurs.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.Glyphs">
      <summary>Gets a read-only collection of glyphs that are associated with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" /> read-only collection that contains the glyphs associated with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.HelpText">
      <summary>Gets or sets the text to display when the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> contains no other activity designers. </summary>
      <returns>A string that contains the text to display on the designer surface</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.HitTest(System.Drawing.Point)">
      <summary>Returns information about the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> at the specified coordinates on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that contains information about the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> at the specified coordinates</returns>
      <param name="point">The <see cref="T:System.Drawing.Point" /> that contains the coordinates on the workflow design surface from which to gather information.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.Initialize(System.Workflow.ComponentModel.Activity)">
      <summary>Initializes the designer used by the specified activity.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> for which to initialize the designer.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.IsContainedDesignerVisible(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Returns a value that indicates whether the specified activity designer is visible in the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
      <returns>true if <paramref name="containedDesigner" /> is visible; otherwise, false. </returns>
      <param name="containedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to check.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="containedDesigner" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.LastSelectableObject">
      <summary>Gets the last selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
      <returns>The <see cref="T:System.Object" /> that is the last selectable object in the designer navigation order.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.LoadViewState(System.IO.BinaryReader)">
      <summary>Loads the view state of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> from a binary stream.</summary>
      <param name="reader">The <see cref="T:System.IO.BinaryReader" /> used to restore the designer view state.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> contains a null reference (Nothing in Visual Basic)</exception>
      <exception cref="T:System.Exception">The designer host associated with the designer is a null reference (Nothing).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.Location">
      <summary>Gets or sets the location of the designer in logical coordinates on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Point" /> that contains the x- and y-coordinates associated with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> on the workflow design surface.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnContainedActivitiesChanged(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)">
      <summary>Notifies the designer that the number of activities contained in the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> has changed.</summary>
      <param name="listChangeArgs">The <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="listChangeArgs" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnDragEnter(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> when a drag-drop operation is in progress and the user's mouse cursor enters the bounds of the designer.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnDragOver(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> when a drag-drop operation is in progress and the user's mouse cursor is inside the bounds of the designer.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnLayoutPosition(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Performs layout tasks to position visual cues and child designers on the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnLayoutSize(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Sets the size of the visual cues on the designers contained within the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> that contains the new size settings for the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</returns>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> when the user double-clicks on the surface of the activity designer.</summary>
      <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> when the user presses the mouse button down while the pointer is in designer bounds.</summary>
      <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnMouseLeave">
      <summary>Notifies the designer when the user moves the mouse cursor out of designer bounds. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>Notifies the designer when the user releases the mouse button in the designer bounds.</summary>
      <param name="e">The <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)">
      <summary>Draws the visual representation of the activity associated with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> at design time.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.OnThemeChange(System.Workflow.ComponentModel.Design.ActivityDesignerTheme)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> that its associated theme has changed.</summary>
      <param name="newTheme">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> that contains the updated theme property settings.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.PreviewedDesigner">
      <summary>Gets the designer to preview in the preview section of the activity designer.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to display in the preview section of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.  </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.RefreshDesignerActions">
      <summary>Updates the configuration errors associated with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.RefreshPreview">
      <summary>Updates the view displayed in the preview window of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.SaveViewState(System.IO.BinaryWriter)">
      <summary>Stores the current view state of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" /> to a binary stream.</summary>
      <param name="writer">The <see cref="T:System.IO.BinaryWriter" /> to which the current designer view state is stored. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> contains null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.ShowPreview">
      <summary>Gets or sets a value indicating whether the activity preview should be displayed in the designer. </summary>
      <returns>true to display the activity preview in the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />; otherwise, false. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner.Verbs">
      <summary>Gets the collection of verbs to associate with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection" /> that contains the verbs associated with <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesigner" />.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme">
      <summary>Provides theme settings for activity designers that use a preview mode on the workflow design surface. This class cannot be inherited. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme" /> class. </summary>
      <param name="theme">The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> that the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme" /> is associated with.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme.Initialize">
      <summary>Performs any additional initialization tasks for <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme" /> that is not performed by <see cref="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme.OnAmbientPropertyChanged(System.Workflow.ComponentModel.Design.AmbientProperty)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme" /> that the ambient property settings for the designer have changed. </summary>
      <param name="ambientProperty">The <see cref="T:System.Workflow.ComponentModel.Design.AmbientProperty" /> enumeration value that the activity preview designer theme should now use.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme.PreviewBackColor">
      <summary>Gets or sets the color set to associate with the background of the activity preview section of the designer.</summary>
      <returns>The <see cref="T:System.Drawing.Color" /> to associate with the background of the activity preview section of the designer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme.PreviewBorderColor">
      <summary>Gets or sets the color set to associate with the border of the activity preview section of the designer.</summary>
      <returns>The <see cref="T:System.Drawing.Color" /> to associate with the border of the activity preview section of the designer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ActivityPreviewDesignerTheme.PreviewForeColor">
      <summary>Gets or sets the color set to associate with the foreground of the activity preview section of the designer.</summary>
      <returns>The <see cref="T:System.Drawing.Color" /> to associate with the foreground of the activity preview section of the designer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ActivityToolboxItem">
      <summary>Provides a base class for all toolbox items associated with an activity in a workflow designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityToolboxItem.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityToolboxItem" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityToolboxItem.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityToolboxItem" /> class by using the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" />. </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds information to deserialize the toolbox item.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that provides the deserialization context for the toolbox item.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityToolboxItem.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityToolboxItem" /> class that creates the specified type of <see cref="T:System.Workflow.ComponentModel.Activity" /> component. </summary>
      <param name="type">The type of the <see cref="T:System.Workflow.ComponentModel.Activity" /> that the toolbox item will create. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityToolboxItem.CreateComponentsCore(System.ComponentModel.Design.IDesignerHost)">
      <summary>Creates an <see cref="T:System.Workflow.ComponentModel.Activity" /> component or an array of <see cref="T:System.Workflow.ComponentModel.Activity" /> components when the toolbox item is invoked.</summary>
      <returns>An array of created <see cref="T:System.ComponentModel.IComponent" /> objects.</returns>
      <param name="host">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> to host the toolbox item.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityToolboxItem.CreateComponentsWithUI(System.ComponentModel.Design.IDesignerHost)">
      <summary>Creates an <see cref="T:System.Workflow.ComponentModel.Activity" /> component or an array of <see cref="T:System.Workflow.ComponentModel.Activity" /> components that generate a dialog box on the design surface when the toolbox item is invoked.</summary>
      <returns>An array of created <see cref="T:System.ComponentModel.IComponent" /> objects.</returns>
      <param name="host">The <see cref="T:System.ComponentModel.Design.IDesignerHost" /> to host the toolbox item.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityToolboxItem.GetToolboxDisplayName(System.Type)">
      <summary>Gets the associated display name for the Toolbox item in the Toolbox.</summary>
      <returns>String representing the display name for the Toolbox item</returns>
      <param name="activityType">The type of the <see cref="T:System.Workflow.ComponentModel.Activity" /> to retrieve the display name for.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ActivityToolboxItem.GetToolboxImage(System.Type)">
      <summary>Gets the associated Image that is used to represent the Toolbox item in the Toolbox.</summary>
      <returns>Image object displayed in the Toolbox for a Toolbox item</returns>
      <param name="activityType">The type of the <see cref="T:System.Workflow.ComponentModel.Activity" /> to retrieve the Toolbox image for.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.AmbientProperty">
      <summary>Specifies the source of ambient theme settings for designer theme classes.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.AmbientProperty.DesignerSize">
      <summary>The ambient theme settings are obtained from the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> class associated with the activity designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.AmbientProperty.OperatingSystemSetting">
      <summary>The ambient theme settings are obtained from the operating system.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.AmbientTheme">
      <summary>Provides the look and feel property settings to a top-level workflow in a design-time environment.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.AmbientTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> class by using a <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" />. </summary>
      <param name="theme">The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> with which the ambient theme is associated.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.BackColor">
      <summary>Gets or sets the ambient back color on a workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the ambient background color. The default is white.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.BackgroundBrush">
      <summary>Gets the ambient brush used to fill graphical shapes displayed on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Brush" /> value that represents the background brush of the workflow on a design surface. </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.BoldFont">
      <summary>Gets the ambient bold font setting for the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Font" /> value that determines whether the text on the workflow design surface is bold. </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.BorderWidth">
      <summary>Gets the ambient border width for objects that are placed onto the workflow design surface. </summary>
      <returns>An integer that represents the border width of objects placed on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.CommentIndicatorBrush">
      <summary>Gets the ambient brush associated with commented designers on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Brush" /> that is associated with commented designers on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.CommentIndicatorColor">
      <summary>Gets or sets the ambient color associated with commented designers on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that is associated with commented designers on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.CommentIndicatorPen">
      <summary>Gets the ambient pen associated with commented designers on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Pen" /> value that is associated with commented designers on the workflow design surface. </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.DesignerSize">
      <summary>Gets or sets the ambient size settings for activity designers on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.DesignerSize" /> enumeration value that determines the size of activity designers on the workflow design surface. The default value is <see cref="F:System.Workflow.ComponentModel.Design.DesignerSize.Medium" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.AmbientTheme.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.DrawGrayscale">
      <summary>Gets or sets a value indicating whether the ambient theme associated with the workflow design surface draws grayscales. </summary>
      <returns>true if the ambient theme associated with the workflow draws grayscales; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.DrawRounded">
      <summary>Gets or sets a value indicating whether the ambient theme associated with the workflow design surface draws rounded shapes. </summary>
      <returns>true if the ambient theme associated with the workflow draws rounded shapes; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.DrawShadow">
      <summary>Gets or sets a value indicating whether the ambient theme associated with the workflow design surface draws shadows.</summary>
      <returns>true if the ambient theme associated with the workflow draws shadows; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.DropIndicatorBrush">
      <summary>Gets the ambient brush associated with an object that you drag onto the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Brush" /> associated with an object that you drag onto the workflow design surface. </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.DropIndicatorColor">
      <summary>Gets or sets the ambient color associated with an object that you drags onto the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value associated with an object that you drag onto the workflow design surface. </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.DropIndicatorPen">
      <summary>Gets the ambient pen associated with an object that you drag onto the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Pen" /> associated with an object that you drag onto the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.Font">
      <summary>Gets the ambient font settings for the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Font" /> that represents the ambient font settings for the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.FontName">
      <summary>Gets or sets the ambient font name for the workflow design surface. </summary>
      <returns>A string that represents the ambient font name for the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.ForeColor">
      <summary>Gets or sets the ambient fore color property for the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the ambient fore color for the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.ForegroundBrush">
      <summary>Gets the ambient foreground brush for the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Brush" /> value that represents the ambient foreground brush.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.ForegroundPen">
      <summary>Gets the ambient foreground pen for the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Pen" /> value that represents the ambient foreground pen.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.GlyphSize">
      <summary>Gets the ambient height and width of glyphs on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Size" /> value that represents the ambient height and width of glyphs on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.GridColor">
      <summary>Gets or sets the ambient grid color for the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the grid color for the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.GridSize">
      <summary>Gets the ambient size of the grid to display on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> value that represents the height and width of the grid to display on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.GridStyle">
      <summary>Gets or sets the ambient grid style for the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Drawing2D.DashStyle" /> value that represents the dash style for the grid. The default setting is <see cref="F:System.Drawing.Drawing2D.DashStyle.Dash" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.AmbientTheme.Initialize">
      <summary>Performs additional initialization tasks for the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> class that are not performed by the <see cref="M:System.Workflow.ComponentModel.Design.AmbientTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)" />.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.MajorGridBrush">
      <summary>Gets the ambient brush settings for major grids on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Brush" /> associated with the major grid on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.MajorGridPen">
      <summary>Gets the ambient pen settings for major grids on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Pen" /> associated with the major grid on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.Margin">
      <summary>Gets the ambient margin settings for the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> that represents the margin settings on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.MinorGridPen">
      <summary>Gets the ambient pen settings for minor grids on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Pen" /> associated with the minor grid on the workflow design surface.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.AmbientTheme.OnAmbientPropertyChanged(System.Workflow.ComponentModel.Design.AmbientProperty)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> when the value of the <see cref="T:System.Workflow.ComponentModel.Design.AmbientProperty" /> enumeration changes. </summary>
      <param name="ambientProperty">The <see cref="T:System.Workflow.ComponentModel.Design.AmbientProperty" /> enumeration value to which the setting was changed.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.ReadonlyIndicatorBrush">
      <summary>Gets the ambient brush used to fill graphical shapes associated with read-only items displayed on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Brush" /> that represents the brush associated with read-only items on the workflow on a design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.ReadonlyIndicatorColor">
      <summary>Gets or sets the ambient color for read-only items on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the ambient color for read-only items on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.SelectionForeColor">
      <summary>Gets or sets the ambient color for selected items on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the ambient color for read-only items on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.SelectionForegroundBrush">
      <summary>Gets the ambient foreground brush used to fill graphical shapes associated with selected items displayed on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Brush" /> that represents the brush associated with read-only items on the workflow on a design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.SelectionForegroundPen">
      <summary>Gets the ambient foreground pen settings for selected items on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Pen" /> associated with the foreground of selected items on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.SelectionPatternColor">
      <summary>Gets or sets the ambient pattern color for items that you select on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Color" /> value that represents the ambient pattern color for items that you select on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.SelectionPatternPen">
      <summary>Gets the ambient pen settings for the pattern associated with selected items on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Drawing.Pen" /> associated with the pattern of selected items on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.SelectionSize">
      <summary>Gets the ambient size of a selected item on the workflow design surface. </summary>
      <returns>A <see cref="T:System.Drawing.Size" /> that represents the ambient property settings for selected items on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.ShowConfigErrors">
      <summary>Gets or sets a value that indicates whether the workflow design surface displays configuration errors.</summary>
      <returns>true if the workflow design surface is to display configuration errors; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.ShowDesignerBorder">
      <summary>Gets or sets a value indicating whether the workflow design surface displays designer borders. </summary>
      <returns>true if the workflow design surface displays designer borders; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.ShowGrid">
      <summary>Gets or sets a value indicating whether grids will be shown on the workflow design surface. </summary>
      <returns>true if grids will be displayed on the workflow design surface; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.TextQuality">
      <summary>Gets or sets the text quality to display on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.TextQuality" /> that specifies the text quality settings to use on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.UseOperatingSystemSettings">
      <summary>Gets or sets a value indicating whether the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> uses the theme settings of the operating system. </summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> uses theme settings of the operating system; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.WatermarkAlignment">
      <summary>Gets or sets the ambient alignment settings for watermark images on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.DesignerContentAlignment" /> that specifies the ambient alignment settings for watermark images on the workflow design surface. The default is <see cref="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.BottomRight" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.WatermarkImagePath">
      <summary>Gets or sets the ambient path to the image to display as a watermark on the workflow design surface.</summary>
      <returns>A string that contains the ambient path to the image to display as a watermark on the workflow design surface. The default is an empty string.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.AmbientTheme.WorkflowWatermarkImage">
      <summary>Gets the ambient image to associate with the workflow design surface as its watermark.</summary>
      <returns>An <see cref="T:System.Drawing.Image" /> to use as a watermark on the workflow design surface.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.BindUITypeEditor">
      <summary>Represents a <see cref="T:System.Drawing.Design.UITypeEditor" /> that is associated with the properties that are bound, or can be bound, on an activity.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.BindUITypeEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.BindUITypeEditor" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.BindUITypeEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>Edits the value of the specified object using the editor style indicated by <see cref="Overload:System.Workflow.ComponentModel.Design.BindUITypeEditor.GetEditStyle" />.</summary>
      <returns>The new value of the object. </returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="serviceProvider">An <see cref="T:System.IServiceProvider" /> that the editor can use to obtain services.</param>
      <param name="value">The value of the object to edit.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.BindUITypeEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns the editor style used by the <see cref="Overload:System.Workflow.ComponentModel.Design.BindUITypeEditor.EditValue" /> method.</summary>
      <returns>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> value that indicates the style of editor used by <see cref="Overload:System.Workflow.ComponentModel.Design.BindUITypeEditor.EditValue" />.</returns>
      <param name="typeDescriptorContext">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.CommentGlyph">
      <summary>Provides a glyph for an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to display when a user disables an activity at design time. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CommentGlyph.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.CommentGlyph" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CommentGlyph.GetBounds(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Boolean)">
      <summary>Returns the bounds for the current comment glyph on the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds for the glyph.</returns>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with which the comment glyph is associated.</param>
      <param name="activated">true to indicate whether the glyph appears on the activity designer surface; otherwise, false. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CommentGlyph.OnPaint(System.Drawing.Graphics,System.Boolean,System.Workflow.ComponentModel.Design.AmbientTheme,System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Performs any tasks required to render the comment glyph on the activity designer surface. </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> to perform fill and drawing tasks.</param>
      <param name="activated">true to indicate that the glyph appears on the design surface; otherwise, false. </param>
      <param name="ambientTheme">The <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> to use to access ambient property settings.</param>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> from which to obtain information about user actions.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CommentGlyph.Priority">
      <summary>Gets the view priority of the glyph on the activity designer.</summary>
      <returns>An integer that represents the view priority of the glyph on the activity designer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner">
      <summary>Provides a designer that enables you to visually design composite activities.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.#ctor">
      <summary>When implemented in a derived class, initializes an instance of the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.AccessibilityObject">
      <summary>Gets a <see cref="T:System.Windows.Forms.AccessibleObject" /> that accessibility applications use to adjust the application look and feel for people with disabilities.</summary>
      <returns>The <see cref="T:System.Windows.Forms.AccessibleObject" /> associated with the control.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.CanExpandCollapse">
      <summary>Gets a value that indicates whether the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> can be collapsed.</summary>
      <returns>true if the specified composite activity designer can be collapsed; otherwise false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.CanInsertActivities(System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Gets a value that indicates whether activities can be inserted into the composite activity associated with the designer.</summary>
      <returns>true if activities can be inserted into the composite activity associated with the designer; otherwise false.</returns>
      <param name="insertLocation">The location to insert the activities.</param>
      <param name="activitiesToInsert">A read-only array of <see cref="T:System.Workflow.ComponentModel.Activity" /> to insert.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.CanMoveActivities(System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Gets a value that indicates whether activities contained within the composite activity can be moved out of the composite activity associated with the designer.</summary>
      <returns>true if the activities can be moved from the composite activity; otherwise false.</returns>
      <param name="moveLocation">The location from which to move the activities.</param>
      <param name="activitiesToMove">The read-only array of activities to move.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.CanRemoveActivities(System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Gets a value that indicates if activities can be removed from the composite activity associated with the designer.</summary>
      <returns>true if the activities can be removed from the composite activity; otherwise false.</returns>
      <param name="activitiesToRemove">A read-only array of activities to remove from the composite activity associated with the designer.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.ContainedDesigners">
      <summary>Gets the array of <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> contained within the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</summary>
      <returns>The read-only collection of <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.DeserializeActivitiesFromDataObject(System.IServiceProvider,System.Windows.Forms.IDataObject)">
      <summary>Deserializes items from an <see cref="T:System.Windows.Forms.IDataObject" /> received during a drag-and-drop operation or from the clipboard.</summary>
      <returns>An array of activities deserialized from an <see cref="T:System.Windows.Forms.IDataObject" />.</returns>
      <param name="serviceProvider">Component serialization service.</param>
      <param name="dataObj">Object that contains activities to deserialize.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true if the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> is being disposed; false if the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> is being finalized.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.EnsureVisibleContainedDesigner(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Verifies that the contained designer is visible.</summary>
      <param name="containedDesigner">The contained designer to make visible.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.ExpandButtonRectangle">
      <summary>Gets the <see cref="T:System.Drawing.Rectangle" /> that contains the expand or collapse button.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that encloses the expand or collapse button.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.Expanded">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> is expanded.</summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> is expanded; otherwise false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.FirstSelectableObject">
      <summary>Gets the first selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</summary>
      <returns>The first selectable object contained within the designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.GetIntersectingDesigners(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Drawing.Rectangle)">
      <summary>Retrieves designers belonging to the specified root activity that intersect a specified area.</summary>
      <returns>An array of <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> objects that intersect a portion of the Rectangle specified.</returns>
      <param name="topLevelDesigner">The top-level designer to analyze.</param>
      <param name="rectangle">Area within the top-level designer to analyze.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.GetNextSelectableObject(System.Object,System.Workflow.ComponentModel.Design.DesignerNavigationDirection)">
      <summary>Gets the object which is next in the order of navigation.</summary>
      <returns>The object that is next in the order of navigation.</returns>
      <param name="current">The current object in the navigation order.</param>
      <param name="direction">The direction to navigate. 0 = next; 1 = previous; 2 = left; 3 = right.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.Glyphs">
      <summary>Gets a collection of glyphs with which to adorn the composite activity designer.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection" /> that contains the glyphs to display on the designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.HitTest(System.Drawing.Point)">
      <summary>Gets information about the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> at a specified point on the screen.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that contains information about the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> at a specified point.</returns>
      <param name="point">A <see cref="T:System.Drawing.Point" /> that represents a single x and y coordinate.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.ImageRectangle">
      <summary>Gets the value for the enclosing bounds of the image associated with the designer in logical coordinates.</summary>
      <returns>A rectangle that encloses the <see cref="T:System.Drawing.Image" /> displayed for the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.Initialize(System.Workflow.ComponentModel.Activity)">
      <summary>Initializes the designer with the associated <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> with which the designer should be initialized.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.InsertActivities(System.Workflow.ComponentModel.Design.CompositeActivityDesigner,System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity},System.String)">
      <summary>Inserts activities into the designer at the specified location using a transaction.</summary>
      <param name="compositeActivityDesigner">The designer into which the activities will be inserted.</param>
      <param name="insertLocation">The location in the designer at which the activities will be inserted.</param>
      <param name="activitiesToInsert">The list of activities to insert.</param>
      <param name="undoTransactionDescription">Description for the designer transaction created by the insertion.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.InsertActivities(System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Inserts the specified activities in the designer at the specified location.</summary>
      <param name="insertLocation">The location in the designer to insert the activities.</param>
      <param name="activitiesToInsert">The list of activities to insert.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.IsContainedDesignerVisible(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Gets a value that indicates if the contained designer is visible.</summary>
      <returns>true if the contained designer is visible; otherwise false.</returns>
      <param name="containedDesigner">The designer contained within the CompositeActivityDesigner to test for visibility.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.IsEditable">
      <summary>Gets a value that indicates whether the designer can be edited.</summary>
      <returns>true if the designer can be edited; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.LastSelectableObject">
      <summary>Gets the last selectable object contained within the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</summary>
      <returns>The last selectable object contained within the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.LoadViewState(System.IO.BinaryReader)">
      <summary>Restores the view state from a binary stream.</summary>
      <param name="reader">The <see cref="T:System.IO.BinaryReader" /> from which to load the view state.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.Location">
      <summary>Gets or sets the location of the designer in logical coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.Point" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.MoveActivities(System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Moves activities from one designer to another.</summary>
      <param name="moveLocation">A <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> describing the location to which to move the activities.</param>
      <param name="activitiesToMove">The list of activities to move.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.MoveDesigners(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Boolean)">
      <summary>Moves a designer forward or backwards in index within the composite activity.</summary>
      <param name="activityDesigner">The ActivityDesigner to move.</param>
      <param name="moveBack">true to move the designer backwards; false to move the designer forward. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.OnContainedActivitiesChanged(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)">
      <summary>Occurs when more than one activities contained within the designers have changed. This occurs, for example, when a new child activity is added or an existing child activity is removed.</summary>
      <param name="listChangeArgs">An <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs" /> containing information about the change.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="listChangeArgs" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.OnContainedActivitiesChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)">
      <summary>Occurs when an activity or a group of activities contained within the designer are changing. This occurs, for example, when a new child activity is added or an existing child activity is removed.</summary>
      <param name="listChangeArgs">An <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs" /> that contains information about the change.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="listChangeArgs" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.OnContainedActivityChanged(System.Workflow.ComponentModel.Design.ActivityChangedEventArgs)">
      <summary>Occurs when an activity contained within the designer has changed.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs" /> that contains information about the change.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>Called when a key is pressed with the designer in focus.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.OnLayoutPosition(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Performs layout and positioning tasks for the contained visual cues or designers on the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> to reposition its child activities.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.OnLayoutSize(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Called to calculate the size needed for an activity based on its current state (collapsed or expanded) and its list of child activities.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> that contains the new size settings for the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</returns>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>Called when the mouse is clicked when the pointer is in designer bounds.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)">
      <summary>Draws the visual representation of a composite activity at design time.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> that contains the drawing data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.OnThemeChange(System.Workflow.ComponentModel.Design.ActivityDesignerTheme)">
      <summary>Notifies the designer that the associated theme has changed.</summary>
      <param name="designerTheme">A <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.PaintContainedDesigners(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)">
      <summary>Adjusts the clip region on the graphics object and calls <see cref="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)" /> on all contained designers.</summary>
      <param name="e">
        <see cref="T:System.EventArgs" /> to be used for painting.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.RemoveActivities(System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Removes a list of activities from the composite activity designer.</summary>
      <param name="activitiesToRemove">A list of activities to remove from the designer.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.RemoveActivities(System.IServiceProvider,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity},System.String)">
      <summary>Removes the list of activities from the designer using a transaction.</summary>
      <param name="serviceProvider">The service provider associated with the designer.</param>
      <param name="activitiesToRemove">The list of activities to remove.</param>
      <param name="transactionDescription">The description of the transaction created.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.SaveViewState(System.IO.BinaryWriter)">
      <summary>Saves the view state to a binary stream.</summary>
      <param name="writer">The <see cref="T:System.IO.BinaryWriter" /> into which the view state is stored.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.SerializeActivitiesToDataObject(System.IServiceProvider,System.Workflow.ComponentModel.Activity[])">
      <summary>Serializes an array of activities to an <see cref="T:System.Windows.Forms.IDataObject" /> that can be placed into the clipboard or used when initializing a drag and drop operation.</summary>
      <returns>
        <see cref="T:System.Windows.Forms.IDataObject" /> that contains serialized activities.</returns>
      <param name="serviceProvider">Component serialization service.</param>
      <param name="activities">Array of activities to serialize.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.TextRectangle">
      <summary>Gets the value of the description rectangle in logical coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.TitleHeight">
      <summary>Gets the height of the title area of the designer.</summary>
      <returns>The height in pixels of the title area of the designer.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.CompositeActivityDesignerLayoutSerializer">
      <summary>Serializes a composite activity designer layout used in a freeform designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesignerLayoutSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesignerLayoutSerializer" /> class.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeActivityDesignerLayoutSerializer.GetProperties(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Retrieves information about all properties associated with the specified object.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> array that contains information about the properties associated with <paramref name="obj" />.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> to search for properties.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.CompositeDesignerAccessibleObject">
      <summary>Implements an accessible object that <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> classes use to adjust the designer user interface for users who have impairments.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeDesignerAccessibleObject.#ctor(System.Workflow.ComponentModel.Design.CompositeActivityDesigner)">
      <summary> Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerAccessibleObject" /> class by using the specified <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</summary>
      <param name="activityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> to apply to the accessible object.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeDesignerAccessibleObject.GetChild(System.Int32)">
      <summary>Returns the child accessible object associated with the activity designer at the specified index location.</summary>
      <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> associated with the child <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> at the specified index location.</returns>
      <param name="index">The zero-based index of the child accessible object.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeDesignerAccessibleObject.GetChildCount">
      <summary>Returns the number of child accessible objects that belong to the <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerAccessibleObject" />.</summary>
      <returns>The number of children that belong to the <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerAccessibleObject" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeDesignerAccessibleObject.State">
      <summary>Gets the accessible state of the current <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerAccessibleObject" />.</summary>
      <returns>A combination of <see cref="T:System.Windows.Forms.AccessibleStates" /> values.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme">
      <summary>Provides theme settings to <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> objects.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" /> class. </summary>
      <param name="theme">The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> to associate with the composite designer theme.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorEndCap">
      <summary>Gets or sets a value that determines the shape that appears at the end of a connector.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.LineAnchor" /> enumeration value that defines the shape that appears at the end of the connector. The default value is <see cref="F:System.Workflow.ComponentModel.Design.LineAnchor.ArrowAnchor" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorSize">
      <summary>Gets the <see cref="T:System.Drawing.Size" /> of the connector.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> object that contains information about the height and width of the connector. </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ConnectorStartCap">
      <summary>Gets or sets a value that determines the shape that appears at the beginning of a connector.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.LineAnchor" /> enumeration value that defines the shape that appears at the beginning of the connector. The default value is <see cref="F:System.Workflow.ComponentModel.Design.LineAnchor.None" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ExpandButtonSize">
      <summary>Gets the <see cref="T:System.Drawing.Size" /> of the expand button on the composite activity designer.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> object that contains information about the height and width of the expand button on the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />. </returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.GetExpandButtonBackgroundBrush(System.Drawing.Rectangle)">
      <summary>Retrieves a brush that defines the background display properties of the expand button on the composite activity designer.</summary>
      <returns>A <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> object that uses the <paramref name="rectangle" /> parameter to define the button area in which the brush applies two colors in a linear gradient from the upper-left corner to the lower-right corner of the expand button.</returns>
      <param name="rectangle">The <see cref="T:System.Drawing.Rectangle" /> that defines the bounds of the expand button on the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.Initialize">
      <summary>Performs further initialization tasks beyond those provided by the <see cref="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)" /> constructor.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.OnAmbientPropertyChanged(System.Workflow.ComponentModel.Design.AmbientProperty)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" /> object that the ambient property settings for the designer have changed. </summary>
      <param name="ambientProperty">The <see cref="T:System.Workflow.ComponentModel.Design.AmbientProperty" /> enumeration value which the composite designer theme should now use.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.ShowDropShadow">
      <summary>Gets or sets a value indicating whether the composite designer theme will display drop shadows around the composite activity designer. </summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.CompositeDesignerTheme" /> displays drop shadows around the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkAlignment">
      <summary>Gets or sets the alignment of the watermark image in the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.DesignerContentAlignment" /> enumeration value that indicates where in the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> the watermark image will be placed. The default value is <see cref="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.BottomRight" />. </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImage">
      <summary>Gets the watermark image to use on the composite activity designer.</summary>
      <returns>The <see cref="T:System.Drawing.Image" /> object to use as the watermark for the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.CompositeDesignerTheme.WatermarkImagePath">
      <summary>Gets or sets the relative path to the watermark image to use on the composite activity designer.</summary>
      <returns>A string value that represents the relative path to the watermark image to use on the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ConfigErrorGlyph">
      <summary>Provides a glyph for an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to display when a user has not performed required designer actions at design time.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConfigErrorGlyph.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ConfigErrorGlyph" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConfigErrorGlyph.CanBeActivated">
      <summary>Gets a value indicating whether the <see cref="T:System.Workflow.ComponentModel.Design.ConfigErrorGlyph" /> can gain focus on the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with which it is associated. </summary>
      <returns>true if the designer glyph can be activated; otherwise, false. The default is true.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConfigErrorGlyph.GetBounds(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Boolean)">
      <summary>Returns the bounds for the glyph on the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds for the glyph.</returns>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with which the glyph is associated.</param>
      <param name="activated">true to indicate whether the glyph appears on the activity designer surface; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="designer" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConfigErrorGlyph.OnActivate(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Notifies the glyph that an action has been performed which has activated the glyph.</summary>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> on which the glyph is drawn.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConfigErrorGlyph.OnPaint(System.Drawing.Graphics,System.Boolean,System.Workflow.ComponentModel.Design.AmbientTheme,System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Performs any tasks required to render the glyph on the activity designer surface. </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> to perform fill and drawing tasks.</param>
      <param name="activated">true to indicate that the glyph appears on the design surface; otherwise, false. </param>
      <param name="ambientTheme">The <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> to use to access ambient property settings.</param>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> from which to obtain information about user actions.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConfigErrorGlyph.Priority">
      <summary>Gets the priority setting for the glyph on the activity designer surface.</summary>
      <returns>An integer value that represents the priority setting for the <see cref="T:System.Workflow.ComponentModel.Design.ConfigErrorGlyph" /> on the activity design surface.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ConnectionPoint">
      <summary>Represents a connection point that is displayed on the outer edges of an activity designer on a workflow design surface.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectionPoint.#ctor(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Workflow.ComponentModel.Design.DesignerEdges,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> class by using the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />, <see cref="T:System.Workflow.ComponentModel.Design.DesignerEdges" /> enumeration value, and an integer. </summary>
      <param name="associatedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to which the connection point belongs.</param>
      <param name="designerEdge">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerEdges" /> enumeration value that specifies where on the activity designer the connection point is located.</param>
      <param name="connectionIndex">An index location of the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="connectionIndex" /> is less than zero.-- or --<paramref name="connectionIndex" /> is greater than or equal to the number of connection points on <paramref name="associatedDesigner" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="associatedDesigner" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectionPoint.AssociatedDesigner">
      <summary>Gets the activity designer to which the connection point belongs.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to which the connection point belongs.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectionPoint.Bounds">
      <summary>Gets the bounding rectangle for the connection point.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> that bounds the <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectionPoint.ConnectionEdge">
      <summary>Gets the designer edge on which the connection point appears.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.DesignerEdges" /> that specifies the activity designer edge on which the <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> appears. </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectionPoint.ConnectionIndex">
      <summary>Gets the connection index for the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" />.</summary>
      <returns>An integer that represents the connection index for the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectionPoint.Equals(System.Object)">
      <summary>Returns a value that indicates whether the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> is equal to the specified object.</summary>
      <returns>true to indicate that the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> and <paramref name="obj" /> are equal; otherwise, false. </returns>
      <param name="obj">The object to compare with the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" />. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectionPoint.GetHashCode">
      <summary>Returns a hash code for the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" />.</summary>
      <returns>The hash code generated by the <see cref="P:System.Workflow.ComponentModel.Design.ConnectionPoint.ConnectionIndex" /> integer or the designer available through <see cref="P:System.Workflow.ComponentModel.Design.ConnectionPoint.AssociatedDesigner" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectionPoint.Location">
      <summary>Gets a point that represents the logical location of the <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> on the associated <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Drawing.Point" /> that represents the logical location of the <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> on the associated <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectionPoint.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs,System.Boolean)">
      <summary>Performs all tasks required to render the <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> on the activity designer surface.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> that contains the data</param>
      <param name="drawHighlighted">true to draw a highlighted connection point; otherwise, false. </param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.Connector">
      <summary>Represents a connector between two activity designers on a workflow design surface.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.#ctor(System.Workflow.ComponentModel.Design.ConnectionPoint,System.Workflow.ComponentModel.Design.ConnectionPoint)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> class. </summary>
      <param name="source">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> where drawing for the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> begins.</param>
      <param name="target">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> where drawing for the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> ends.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="target" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.Connector.AccessibilityObject">
      <summary>Gets an <see cref="T:System.Windows.Forms.AccessibleObject" /> that accessibility applications use to adjust the application UI for users who have impairments.</summary>
      <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that accessibility applications use to adjust the application UI for users who have impairments.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.Connector.Bounds">
      <summary>Gets the bounding rectangle for the connector on the workflow design surface.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> that bounds the connector on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.Connector.ConnectorModified">
      <summary>Gets the value that indicates whether the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> is modified.</summary>
      <returns>true if the connector is modified; otherwise false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.Connector.ConnectorSegments">
      <summary>Gets a read-only collection of points that contains all segments found in the <see cref="T:System.Workflow.ComponentModel.Design.Connector" />.</summary>
      <returns>A <see cref="T:System.Drawing.Point" /> read-only collection that contains all segments found in the <see cref="T:System.Workflow.ComponentModel.Design.Connector" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.Equals(System.Object)">
      <summary>Determines whether the current <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> is equal to the specified connector.</summary>
      <returns>true if the specified connector is equal to the current <see cref="T:System.Workflow.ComponentModel.Design.Connector" />; otherwise, false. </returns>
      <param name="obj">The <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> to compare with the current connector.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.Connector.ExcludedRoutingRectangles">
      <summary>Returns an empty array of Rectangle object. Derived classes populate this collection.</summary>
      <returns>A generic collection of Rectangle objects.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Workflow.ComponentModel.Design.Connector" />.</summary>
      <returns>A hash code for the current <see cref="T:System.Workflow.ComponentModel.Design.Connector" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.GetService(System.Type)">
      <summary>Returns a service object of the specified type if it is available.</summary>
      <returns>A service object of type <paramref name="serviceType" /> or a null reference (Nothing in Visual Basic) if there is no service object of type <paramref name="serviceType" />.  </returns>
      <param name="serviceType">The <see cref="T:System.Type" /> of the service object to return.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.HitTest(System.Drawing.Point)">
      <summary>Returns a value that indicates whether the specified point resides on the current <see cref="T:System.Workflow.ComponentModel.Design.Connector" />.</summary>
      <returns>true if <paramref name="point" /> resides on the current <see cref="T:System.Workflow.ComponentModel.Design.Connector" />; otherwise, false. </returns>
      <param name="point">The <see cref="T:System.Drawing.Point" /> to test. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.Invalidate">
      <summary>Invalidates the current <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> and causes it to be redrawn.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.Offset(System.Drawing.Size)">
      <summary>Changes the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> height and width using the settings defined in the specified <see cref="T:System.Drawing.Size" />.</summary>
      <param name="size">The <see cref="T:System.Drawing.Size" /> that contains the height and width settings to offset the connector.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.OnLayout(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> that layout operations are occurring. </summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)">
      <summary>Renders the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> on the workflow design surface.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> that contains the drawing data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.OnPaintEdited(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs,System.Drawing.Point[],System.Drawing.Point[])">
      <summary>Used for drawing the Connector when it is dragged from one state to another.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> object that specifies the graphics to use to draw the object and the clipping rectangle in which to draw it.</param>
      <param name="segments">Coordinates for the segments in the <see cref="T:System.Workflow.ComponentModel.Design.Connector" />.</param>
      <param name="segmentEditPoints">Coordinated for the edit points on the <see cref="T:System.Workflow.ComponentModel.Design.Connector" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.OnPaintSelected(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs,System.Boolean,System.Drawing.Point[])">
      <summary>Used for drawing a Connector that is selected by the user.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> object that specifies the graphics to use to draw the object and the clipping rectangle in which to draw it.</param>
      <param name="primarySelection">Not used.</param>
      <param name="segmentEditPoints">Coordinates for the edit points on the <see cref="T:System.Workflow.ComponentModel.Design.Connector" />.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.Connector.ParentDesigner">
      <summary>Gets the designer on which the connecter appears on the workflow design surface.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> on which the connector appears on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.Connector.ParentView">
      <summary>Gets the workflow view associated with the connector.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> that is associated with the connector.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.PerformLayout">
      <summary>Performs layout tasks for the <see cref="T:System.Workflow.ComponentModel.Design.Connector" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.SetConnectorSegments(System.Collections.Generic.ICollection{System.Drawing.Point})">
      <summary>Reroutes the connector from source to target if the connector has changed.</summary>
      <param name="segments">A <see cref="T:System.Drawing.Point" /> collection that represents the new connector segments to use for rerouting.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.Connector.Source">
      <summary>Gets or sets the <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> where drawing of the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> begins.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> where drawing of the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> begins.</returns>
      <exception cref="T:System.ArgumentException">When setting this property the source <see cref="P:System.Workflow.ComponentModel.Design.ConnectionPoint.AssociatedDesigner" /> does not match the target associated designer.  </exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Workflow.ComponentModel.Design.Connector.Source" /> was set to a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.Connector.System#IDisposable#Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Workflow.ComponentModel.Design.Connector" />. </summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.Connector.Target">
      <summary>Gets or sets the <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> where drawing of the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> ends.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> where drawing of the <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> ends.</returns>
      <exception cref="T:System.ArgumentException">When setting this property the source <see cref="P:System.Workflow.ComponentModel.Design.ConnectionPoint.AssociatedDesigner" /> does not match the target associated designer.  </exception>
      <exception cref="T:System.ArgumentNullException">
        <see cref="P:System.Workflow.ComponentModel.Design.Connector.Target" /> was set to a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ConnectorAccessibleObject">
      <summary>Provides information on connectors between activity designers that accessibility applications use to adjust an application's UI for users with impairments.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorAccessibleObject.#ctor(System.Workflow.ComponentModel.Design.Connector)">
      <summary>Initializes an instance of the <see cref="T:System.Workflow.ComponentModel.Design.ConnectorAccessibleObject" /> class using an instance of <see cref="T:System.Workflow.ComponentModel.Design.Connector" />.</summary>
      <param name="connector">An instance of <see cref="T:System.Workflow.ComponentModel.Design.Connector" />   which represents a connector between two activity designers on a workflow design surface.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectorAccessibleObject.Bounds">
      <summary>Gets the location and size of the accessible object.</summary>
      <returns>Rectangle containing location and size information for the accessible object</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorAccessibleObject.HitTest(System.Int32,System.Int32)">
      <summary>Retrieves the child object at the specified screen coordinates.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ConnectorAccessibleObject" /> the child object at the given screen coordinates. This method returns the calling object if the object itself is at the location specified. Returns a null reference (Nothing in Visual Basic) if no object is at the tested location.</returns>
      <param name="x">The horizontal screen coordinate.</param>
      <param name="y">The vertical screen coordinate.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectorAccessibleObject.Name">
      <summary>Gets or sets the object name.</summary>
      <returns>String value representing the name of the accessible object</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectorAccessibleObject.Parent">
      <summary>Gets the parent of an accessible object.</summary>
      <returns>Parent object for the accessible object</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectorAccessibleObject.Role">
      <summary>Gets the role of this accessible object.</summary>
      <returns>One of the values of AccessibleRole.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ConnectorEventArgs">
      <summary>Provides data for the <see cref="E:System.Workflow.ComponentModel.Design.FreeFormActivityDesigner.ConnectorAdded" />, <see cref="E:System.Workflow.ComponentModel.Design.FreeFormActivityDesigner.ConnectorRemoved" />, and <see cref="E:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ConnectorChanged" /> events.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectorEventArgs.Connector">
      <summary>Gets the connector object that is passed as a part of <see cref="T:System.Workflow.ComponentModel.Design.ConnectorEventArgs" />.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> object passed as part of <see cref="T:System.Workflow.ComponentModel.Design.ConnectorEventArgs" />.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ConnectorEventHandler">
      <summary>Represents the method that will handle the <see cref="E:System.Workflow.ComponentModel.Design.FreeFormActivityDesigner.ConnectorAdded" />, <see cref="E:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ConnectorRemoved" />, and <see cref="E:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ConnectorChanged" /> events of a <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />. </summary>
      <param name="sender">The source of the event.</param>
      <param name="e">A <see cref="T:System.Workflow.ComponentModel.Design.ConnectorEventArgs" /> that contains the event data.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo">
      <summary>Contains information about a connector at a specified coordinate in <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> and all classes that inherit from it.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo.#ctor(System.Workflow.ComponentModel.Design.CompositeActivityDesigner,System.Workflow.ComponentModel.Design.HitTestLocations,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo" /> class. </summary>
      <param name="compositeActivityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> that contains the connector.</param>
      <param name="flags">A <see cref="T:System.Workflow.ComponentModel.Design.HitTestLocations" /> that defines the location on the connector that the user clicked.</param>
      <param name="connector">The index identifier of the connector that was clicked.</param>
      <exception cref="T:System.ArgumentException">Prior to the constructor call the connector index was set to less than zero. </exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo.Bounds">
      <summary>Gets the bounding rectangle for the connector that was clicked.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> that bounds the connector that was clicked.  </returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo" />.</summary>
      <returns>true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo" />; otherwise, false.  </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo" />. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo.GetHashCode">
      <summary>Returns the hash code for the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo" />.</summary>
      <returns>The hash code for the current <see cref="T:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo.MapToIndex">
      <summary>Returns the index of the connector that the user clicked.</summary>
      <returns>The index of the connector that the user clicked.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ConnectorHitTestInfo.SelectableObject">
      <summary>Gets a selectable object associated with the hit area.</summary>
      <returns>A selectable <see cref="T:System.Object" /> associated with the area where the user clicked. </returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ConnectorLayoutSerializer">
      <summary>Serializes a connector layout.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorLayoutSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ConnectorLayoutSerializer" /> class.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorLayoutSerializer.CreateInstance(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Type)">
      <summary>Creates an instance of the specified <see cref="T:System.Type" /> using the specified <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" />.</summary>
      <returns>An instance of the specified <see cref="T:System.Type" />. </returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> supporting this operation.</param>
      <param name="type">The specified <see cref="T:System.Type" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorLayoutSerializer.GetConnectorConstructionArguments(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Type)">
      <summary>Gets a Dictionary collection filled with element name and their associated values from the current position in the xml reader associated with the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" />.</summary>
      <returns>Dictionary based collection containing the argument names and their associated values for the construction of the connector.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="type">The specified <see cref="T:System.Type" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorLayoutSerializer.GetProperties(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Retrieves information about all properties associated with the specified object.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> array that contains information about the properties associated with <paramref name="obj" />.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> to search for properties.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> or <paramref name="obj" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ConnectorLayoutSerializer.OnAfterDeserialize(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Performs processing of the object after the deserialization process.</summary>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> that was deserialized.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.DesignerAction">
      <summary>Associates an action taken on an activity designer on the workflow design surface with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerAction.#ctor(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Int32,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" /> class by using an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />, an integer, and a string.</summary>
      <param name="activityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> on which the designer action is taken.</param>
      <param name="actionId">An integer value that represents the identifier of the <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" />.</param>
      <param name="text">A string that represents the text associated with the designer action.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityDesigner" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="text" /> contains a null reference (Nothing) or its length is 0.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerAction.#ctor(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Int32,System.String,System.Drawing.Image)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" /> class by using <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />, an integer, a string, and an <see cref="T:System.Drawing.Image" />.</summary>
      <param name="activityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> on which the designer action is to appear.</param>
      <param name="actionId">An integer value that represents the identifier of the <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" />.</param>
      <param name="text">A string that represents the text associated with the designer action.</param>
      <param name="image">The <see cref="T:System.Drawing.Image" /> to be associated with the designer action.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activityDesigner" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="text" /> contains a null reference (Nothing) or its length is 0.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerAction.ActionId">
      <summary>Gets the identifier for the designer action.</summary>
      <returns>An integer that represents the identifier for the <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" /> object.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerAction.Image">
      <summary>Gets the image associated with the designer action.</summary>
      <returns>An <see cref="T:System.Drawing.Image" /> that is associated with the <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerAction.Invoke">
      <summary>Invokes the <see cref="M:System.Workflow.ComponentModel.Design.ActivityDesigner.OnExecuteDesignerAction(System.Workflow.ComponentModel.Design.DesignerAction)" /> method of the activity designer associated with the current designer action.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerAction.PropertyName">
      <summary>Represents the name of the property that the <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" /> is associated with.</summary>
      <returns>A <see cref="T:System.String" /> that contains the name of the property.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerAction.Text">
      <summary>Gets the text associated with the designer action.</summary>
      <returns>A string value that represents the text associated with the <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerAction.UserData">
      <summary>Gets a dictionary of user data associated with the designer action.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> that represents the user data associated with the <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" />.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.DesignerContentAlignment">
      <summary>Specifies where in the workflow designer that workflow content is aligned.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.Left">
      <summary>Workflow content is aligned to the left side of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.Top">
      <summary>Workflow content is aligned to the top of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.Right">
      <summary>Workflow content is aligned to the right side of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.Bottom">
      <summary>Workflow content is aligned to the bottom of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.Center">
      <summary>Workflow content is aligned to the center of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.TopLeft">
      <summary>Workflow content is aligned to the top left of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.TopCenter">
      <summary>Workflow content is aligned to the top center of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.TopRight">
      <summary>Workflow content is aligned to the top right of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.CenterLeft">
      <summary>Workflow content is aligned to the center left of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.CenterRight">
      <summary>Workflow content is aligned to the center right of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.BottomLeft">
      <summary>Workflow content is aligned to the bottom left of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.BottomCenter">
      <summary>Workflow content is aligned to the bottom center of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.BottomRight">
      <summary>Workflow content is aligned to the bottom right of the designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerContentAlignment.Fill">
      <summary>Workflow content is aligned to fill the designer.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.DesignerEdges">
      <summary>Specifies the edge or edges of an activity designer on a workflow design surface where design-time processing is performed, such as a <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> location on the activity designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerEdges.None">
      <summary>None of the edges of the activity designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerEdges.Left">
      <summary>The left edge of the activity designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerEdges.Top">
      <summary>The top edge of the activity designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerEdges.Right">
      <summary>The right edge of the activity designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerEdges.Bottom">
      <summary>The bottom edge of the activity designer.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerEdges.All">
      <summary>All edges of the activity designer.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.DesignerGeometry">
      <summary>Specifies the shape used by activity designers to render the corners of their design surface.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerGeometry.Rectangle">
      <summary>The corners of the design surface are straight.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerGeometry.RoundedRectangle">
      <summary>The corners of the design surface are rounded.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.DesignerGlyph">
      <summary>Draws a glyph at the top-most Z order position on an activity designer. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerGlyph.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" /> class. </summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerGlyph.CanBeActivated">
      <summary>Gets a value indicating whether the <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" /> can gain focus on the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with which it is associated. </summary>
      <returns>true if the designer glyph can be activated; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerGlyph.GetBounds(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Boolean)">
      <summary>Returns the bounds for the glyph on the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds for the glyph.</returns>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with which the glyph is associated.</param>
      <param name="activated">true to indicate whether the glyph appears on the activity designer surface; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="designer" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerGlyph.HighestPriority">
      <summary>Represents the highest priority possible for a <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" />. This value is a constant.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerGlyph.LowestPriority">
      <summary>Represents the lowest priority possible for a <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" />. This value is a constant.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerGlyph.NormalPriority">
      <summary>Represents the normal priority for a <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" />. This value is a constant.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerGlyph.OnActivate(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Indicates to the glyph that an action has been performed which has activated the glyph.</summary>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> on which the glyph is drawn.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerGlyph.OnPaint(System.Drawing.Graphics,System.Boolean,System.Workflow.ComponentModel.Design.AmbientTheme,System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>When overridden in a derived class, performs any tasks required to render the glyph on the activity designer surface. </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> to perform fill and drawing tasks.</param>
      <param name="activated">true to indicate that the glyph appears on the design surface; otherwise, false. </param>
      <param name="ambientTheme">The <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> to use to access ambient property settings.</param>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> from which to obtain information about user actions.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerGlyph.Priority">
      <summary>Gets the priority setting for the designer glyph on the activity design surface.</summary>
      <returns>An integer value that represents the priority setting for the <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" /> on the activity designer surface. A lower value indicates a higher priority and therefore draws the glyph at the top-most Z order position on an activity designer.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.DesignerNavigationDirection">
      <summary>Specifies values for navigating among designer objects.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerNavigationDirection.Down">
      <summary>Navigates down to the next activity in sequence.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerNavigationDirection.Up">
      <summary>Navigates up to the previous activity in sequence.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerNavigationDirection.Left">
      <summary>Navigates to the left in the workflow.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerNavigationDirection.Right">
      <summary>Navigates to the right in the workflow.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.DesignerSize">
      <summary>Specifies the size settings that theme classes use to control the size of <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> classes when they are rendered on a workflow design surface.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerSize.Small">
      <summary>The activity designer is small.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerSize.Medium">
      <summary>The activity designer is medium. </summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerSize.Large">
      <summary>The activity designer is large.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.DesignerTheme">
      <summary>Supplies base class implementation for all activity designer theme classes used in a workflow design-time environment.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.DesignerTheme" /> class by using a <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> object.</summary>
      <param name="theme">The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> with which the designer theme is associated.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerTheme.ApplyTo">
      <summary>Gets or sets the unqualified name of the designer type to which the designer theme is applied. </summary>
      <returns>The name of the designer type to which the designer theme is applied.</returns>
      <exception cref="T:System.Data.ReadOnlyException">A user attempted a set operation when the <see cref="P:System.Workflow.ComponentModel.Design.DesignerTheme.ReadOnly" /> property was set to true.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerTheme.ContainingTheme">
      <summary>Gets the workflow theme that encapsulates the designer theme. </summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> object associated with the <see cref="T:System.Workflow.ComponentModel.Design.DesignerTheme" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerTheme.DesignerType">
      <summary>Gets or sets the type of the designer associated with the designer theme.</summary>
      <returns>A <see cref="T:System.Type" /> that represents the designer to be associated with the current designer theme.</returns>
      <exception cref="T:System.Data.ReadOnlyException">A user attempted a set operation when the <see cref="P:System.Workflow.ComponentModel.Design.DesignerTheme.ReadOnly" /> property was set to true.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerTheme.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.DesignerTheme" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerTheme.Finalize">
      <summary>Allows the <see cref="T:System.Workflow.ComponentModel.Design.DesignerTheme" /> to attempt to free resources and perform other clean-up operations before it is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerTheme.Initialize">
      <summary>Performs further initialization tasks beyond those performed by <see cref="M:System.Workflow.ComponentModel.Design.DesignerTheme.#ctor(System.Workflow.ComponentModel.Design.WorkflowTheme)" />. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerTheme.OnAmbientPropertyChanged(System.Workflow.ComponentModel.Design.AmbientProperty)">
      <summary>Notifies the designer theme class that the ambient property settings for the designer have changed. </summary>
      <param name="ambientProperty">The <see cref="T:System.Workflow.ComponentModel.Design.AmbientProperty" /> enumeration value that the designer theme should now use.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerTheme.ReadOnly">
      <summary>Gets a value that indicates whether the designer theme is read-only. </summary>
      <returns>true if <see cref="T:System.Workflow.ComponentModel.Design.DesignerTheme" /> is read-only; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerTheme.System#IDisposable#Dispose">
      <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.DesignerVerbGroup">
      <summary>Specifies the grouping area on a context menu or a workflow designer menu in which an activity designer verb is to appear.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerVerbGroup.General">
      <summary>The general designer verb group.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerVerbGroup.View">
      <summary>The view designer verb group.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerVerbGroup.Edit">
      <summary>The edit designer verb group.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerVerbGroup.Options">
      <summary>The options designer verb group.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerVerbGroup.Actions">
      <summary>The actions designer verb group.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.DesignerVerbGroup.Misc">
      <summary>The miscellaneous designer verb group.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.DesignerView">
      <summary>Serves as a repository for information about the views supported by the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> or classes that inherit from it.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerView.#ctor(System.Int32,System.String,System.Drawing.Image)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" /> class by using an integer, a string, and an <see cref="T:System.Drawing.Image" />.</summary>
      <param name="viewId">The integer identifier for the designer view.</param>
      <param name="text">The string that specifies the name of the designer view.</param>
      <param name="image">The <see cref="T:System.Drawing.Image" /> associated with the designer view. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="viewId" /> or <paramref name="text" /> contains null.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerView.#ctor(System.Int32,System.String,System.Drawing.Image,System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" /> class by using an integer, a string, an <see cref="T:System.Drawing.Image" />, and an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <param name="viewId">The integer identifier for the designer view.</param>
      <param name="text">The string that specifies the name of the designer view.</param>
      <param name="image">The <see cref="T:System.Drawing.Image" /> associated with the designer view. </param>
      <param name="associatedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> associated with the designer view.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="viewId" />, <paramref name="text" />, or <paramref name="associatedDesigner" /> contains null.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerView.AssociatedDesigner">
      <summary>Gets the activity designer associated with the designer view.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerView.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Object" /> is equal to the current designer view.</summary>
      <returns>true if <paramref name="obj" /> and the current <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" /> are equal; otherwise, false.  </returns>
      <param name="obj">An <see cref="T:System.Object" /> to compare to the current <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerView.GetHashCode">
      <summary>Serves as a hash function for the <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" /> and is suitable for use in hashing algorithms and data structures like a hash table.</summary>
      <returns>A hash code for the current <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerView.Image">
      <summary>Gets the image associated with the designer view.</summary>
      <returns>The <see cref="T:System.Drawing.Image" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerView.OnActivate">
      <summary>Notifies the designer when the view is activated.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.DesignerView.OnDeactivate">
      <summary>Notifies the designer when the view is deactivated.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerView.Text">
      <summary>Gets the name of the designer view.</summary>
      <returns>A string that contains the name of the <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerView.UserData">
      <summary>Gets the dictionary of user data associated with the designer view.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> that contains the user data associated with the <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.DesignerView.ViewId">
      <summary>Gets the identifier associated with the designer view.</summary>
      <returns>An integer that contains the identifier for the <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" />.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner">
      <summary>Provides a customizable activity designer surface for users to visually modify on a workflow design surface.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> class. </summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.AccessibilityObject">
      <summary>Gets an <see cref="T:System.Windows.Forms.AccessibleObject" /> that accessibility applications use to adjust the application UI for users who have impairments.</summary>
      <returns>The <see cref="T:System.Windows.Forms.AccessibleObject" /> associated with the control.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.AddConnector(System.Workflow.ComponentModel.Design.ConnectionPoint,System.Workflow.ComponentModel.Design.ConnectionPoint)">
      <summary>Adds a connector to the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> that was added to the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</returns>
      <param name="source">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> location to begin drawing the connector.</param>
      <param name="target">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> location to finish drawing the connector.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> or <paramref name="target" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">The <see cref="P:System.Workflow.ComponentModel.Design.ConnectionPoint.AssociatedDesigner" /> property for <paramref name="source" /> or <paramref name="target" /> contains a null reference (Nothing).</exception>
      <exception cref="T:System.InvalidOperationException">The current <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> is not the container for the connector to add.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.AutoSize">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> is resized automatically when a user resizes the designer's child designers. </summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> is resized automatically; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.AutoSizeMargin">
      <summary>Gets or sets the margin size to render around the child designers when the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> is automatically resized.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> that represents the size of the margin to render around the child designers of the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.AutoSizeMode">
      <summary>Gets or sets the <see cref="T:System.Windows.Forms.AutoSizeMode" /> settings for the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Windows.Forms.AutoSizeMode" /> for the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />. The default setting is <see cref="F:System.Windows.Forms.AutoSizeMode.GrowOnly" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.BringToFront(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Brings the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to the top of the z-order of the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <param name="containedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to bring to the top of the z-order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="containedDesigner" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="containedDesigner" /> is not found in the <see cref="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.ContainedDesigners" /> collection.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.CanConnectContainedDesigners(System.Workflow.ComponentModel.Design.ConnectionPoint,System.Workflow.ComponentModel.Design.ConnectionPoint)">
      <summary>Returns a value that indicates whether the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> can create a connection between the specified connection point on a source child activity designer and the specified connection point on a target child activity designer. </summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> can draw a connector between source and target activity designers; otherwise, false. </returns>
      <param name="source">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> to check on the source activity designer.</param>
      <param name="target">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> to check on the target activity designer.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.CanExpandCollapse">
      <summary>Gets a value that indicates whether the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> can be collapsed on a workflow design surface.</summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> can be collapsed; otherwise false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.CanResizeContainedDesigner(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Returns a value that indicates whether a user can visually resize the specified child activity designer in the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />. </summary>
      <returns>true if a user can visually resize the specified activity designer; otherwise, false. </returns>
      <param name="containedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to check.</param>
    </member>
    <member name="E:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ConnectorAdded">
      <summary>Occurs when a <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> is added to the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />. </summary>
    </member>
    <member name="E:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ConnectorChanged">
      <summary>Occurs when a user changes the <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> locations associated with a <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> displayed by the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />. </summary>
    </member>
    <member name="E:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ConnectorRemoved">
      <summary>Occurs when a user removes a connector from the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />. </summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.Connectors">
      <summary>Gets a read-only collection of connectors that are associated with the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <returns>A read-only collection that contains all <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> objects associated with the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.CreateConnector(System.Workflow.ComponentModel.Design.ConnectionPoint,System.Workflow.ComponentModel.Design.ConnectionPoint)">
      <summary>Creates a connector between the two specified connection points.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> that was created.</returns>
      <param name="source">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> location to begin drawing the connector.</param>
      <param name="target">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> location to finish drawing the connector.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true if thedesigner is being disposed; false if the designer is being finalized.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.EnableUserDrawnConnectors">
      <summary>Gets or sets a value that indicates whether users can drag and draw connectors on the free-form activity designer surface. </summary>
      <returns>true if users can drag and draw connectors on the free-form activity designer surface; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.EnableVisualResizing">
      <summary>Gets a value that indicates whether the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> can be visually resized on the workflow design surface. </summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> can be visually resized; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.FirstSelectableObject">
      <summary>Gets the first selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <returns>The first selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.GetNextSelectableObject(System.Object,System.Workflow.ComponentModel.Design.DesignerNavigationDirection)">
      <summary>Returns the first selectable object that follows the specified object in the navigation order of the current <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <returns>The first selectable <see cref="T:System.Object" /> that follows the <paramref name="obj" /> parameter in the navigation order.</returns>
      <param name="current">The current <see cref="T:System.Object" /> in the navigation order.</param>
      <param name="navigate">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerNavigationDirection" /> enumeration value that determines the navigation order of the designer.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.Glyphs">
      <summary>Gets the collection of glyphs that are displayed on the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection" /> that contains the glyphs displayed on the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.HitTest(System.Drawing.Point)">
      <summary>Returns information about the FreeformActivityDesigner at the specified coordinates on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that contains information about the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> at the specified coordinates</returns>
      <param name="point">The <see cref="T:System.Drawing.Point" /> that contains the coordinates on the workflow design surface from which to gather information.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.Initialize(System.Workflow.ComponentModel.Activity)">
      <summary>Initializes the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> by using the specified <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> with which to initialize the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.InsertActivities(System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Adds the specified read-only collection of activities to the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> at the specified location on the workflow design surface.</summary>
      <param name="insertLocation">The <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that specifies the location to add the activities.</param>
      <param name="activitiesToInsert">The <see cref="T:System.Workflow.ComponentModel.Activity" /> read-only collection that contains the activities to add to the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.LastSelectableObject">
      <summary>Gets the last selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Object" /> that is the last selectable object in the designer navigation order.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.Location">
      <summary>Gets or sets the location of the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> in logical coordinates.</summary>
      <returns>A Point that represents the location of the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> in logical coordinates.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.MinimumSize">
      <summary>Gets the minimum size settings for the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> that represents the smallest possible size for the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />. </returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.MoveActivities(System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Moves activities to a specified location within the design surface.</summary>
      <param name="moveLocation">Location to move activities to.</param>
      <param name="activitiesToMove">Collection that contains the activities to move to <paramref name="moveLocation." /></param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.MoveContainedDesigner(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Drawing.Point)">
      <summary>Moves the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to the specified location.</summary>
      <param name="containedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to move.</param>
      <param name="newLocation">The <see cref="T:System.Drawing.Point" /> that represents the designer's new location. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="containedDesigner" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="containedDesigner" /> is not found in the <see cref="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.ContainedDesigners" /> collection.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnConnectorAdded(System.Workflow.ComponentModel.Design.ConnectorEventArgs)">
      <summary>Raises the <see cref="E:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ConnectorAdded" /> event. </summary>
      <param name="e">A <see cref="T:System.Workflow.ComponentModel.Design.ConnectorEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnConnectorChanged(System.Workflow.ComponentModel.Design.ConnectorEventArgs)">
      <summary>Raises the <see cref="E:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ConnectorChanged" /> event. </summary>
      <param name="e">A <see cref="T:System.Workflow.ComponentModel.Design.ConnectorEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnConnectorRemoved(System.Workflow.ComponentModel.Design.ConnectorEventArgs)">
      <summary>Raises the <see cref="E:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ConnectorRemoved" /> event. </summary>
      <param name="e">A <see cref="T:System.Workflow.ComponentModel.Design.ConnectorEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnContainedActivitiesChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> when a child activity is added or deleted from its Activities collection.</summary>
      <param name="listChangeArgs">The <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs" /> that contains information about the added or removed activities.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnContainedDesignersConnected(System.Workflow.ComponentModel.Design.ConnectionPoint,System.Workflow.ComponentModel.Design.ConnectionPoint)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> when a connection has been established between two of its contained activity designers.</summary>
      <param name="source">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> location to begin drawing the connector.</param>
      <param name="target">The <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> location to finish drawing the connector.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnDragDrop(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> when a drag-drop operation is completed within the bounds of its design surface. </summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that defines the operation event arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnDragOver(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> when a drag-drop operation is in progress and the user's mouse cursor is inside the bounds of the designer.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that defines the operation event arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>Occurs when a key is pressed when the designer has the keyboard focus. </summary>
      <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnLayoutPosition(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Performs layout tasks to position visual cues and child designers on the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that defines the operation event arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnLayoutSize(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> when the size of the visual cues on the designers displayed by the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> have changed.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> that represents the new size of the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> on the workflow design surface.</returns>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that defines the operation event arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnResizing(System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> when a user is visually resizing it at design time.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerResizeEventArgs" /> that defines the operation event arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.OnThemeChange(System.Workflow.ComponentModel.Design.ActivityDesignerTheme)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> that its associated theme has changed.</summary>
      <param name="newTheme">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> that contains the updated theme property settings.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.RemoveConnector(System.Workflow.ComponentModel.Design.Connector)">
      <summary>Removes the specified <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> from the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" />.</summary>
      <param name="connector">The <see cref="T:System.Workflow.ComponentModel.Design.Connector" /> to remove. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="connector" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ResizeContainedDesigner(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Drawing.Size)">
      <summary>Resizes the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to the dimensions of specified size.</summary>
      <param name="containedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to resize.</param>
      <param name="newSize">The <see cref="T:System.Drawing.Size" /> that represents the new dimensions of the designer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="containedDesigner" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="containedDesigner" /> is not found in the <see cref="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.ContainedDesigners" /> collection.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.SendToBack(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Sets the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to the bottom of the z-order of the FreeformActivityDesigner.</summary>
      <param name="containedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to set to the back of the z-order.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="containedDesigner" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="containedDesigner" /> is not found in the <see cref="P:System.Workflow.ComponentModel.Design.CompositeActivityDesigner.ContainedDesigners" /> collection.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.FreeformActivityDesigner.ShowConnectorsInForeground">
      <summary>Gets a value that indicates whether the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> draws connectors in the foreground of its design surface. </summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesigner" /> draws connectors in the foreground of its design surface; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.FreeformActivityDesignerLayoutSerializer">
      <summary>Serializes freeform activity designer specific layout information.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesignerLayoutSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.FreeformActivityDesignerLayoutSerializer" /> class.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.FreeformActivityDesignerLayoutSerializer.GetProperties(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Retrieves information about all properties associated with the specified object.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> array that contains information about the properties associated with <paramref name="obj" />.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> to search for properties.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.HitTestInfo">
      <summary>Contains information about a part of the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> at a specified coordinate.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.HitTestInfo.#ctor(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Workflow.ComponentModel.Design.HitTestLocations)">
      <summary>Initializes an instance of a <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> object.</summary>
      <param name="designer">The associated <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</param>
      <param name="location">The location on the associated <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> that was clicked.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.HitTestInfo.AssociatedDesigner">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> class.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> class.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.HitTestInfo.Bounds">
      <summary>Returns the bounds of the area hit.</summary>
      <returns>A rectangle that encloses the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> object or an empty rectangle if the <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> object is not associated with a designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.HitTestInfo.HitLocation">
      <summary>Contains information about where the hit occurred.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.HitTestLocations" /> that describes the area hit.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.HitTestInfo.MapToIndex">
      <summary>Returns the index of the hit designer.</summary>
      <returns>The index of the designer hit by the <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.HitTestInfo.Nowhere">
      <summary>Gets an empty <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" />.</summary>
      <returns>An empty <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.HitTestInfo.SelectableObject">
      <summary>Gets a selectable object associated with the hit area.</summary>
      <returns>A selectable object associated with the hit area or a null reference (Nothing in Visual Basic) if no designer is associated with the <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.HitTestInfo.UserData">
      <summary>Gets the user data associated with the <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" />.</summary>
      <returns>A new dictionary for user data, or a reference to the existing user data.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.HitTestLocations">
      <summary>Describes the area of the designer that contains the point passed to a <see cref="M:System.Workflow.ComponentModel.Design.ActivityDesigner.HitTest(System.Drawing.Point)" /> method.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.HitTestLocations.None">
      <summary>Indicates that no part of the designer was hit.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.HitTestLocations.Designer">
      <summary>Indicates that any part of the designer was hit.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.HitTestLocations.ActionArea">
      <summary>Indicates the area contained by the expand button was hit.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.HitTestLocations.Left">
      <summary>Indicates that the left part of the designer was hit.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.HitTestLocations.Top">
      <summary>Indicates the top of the designer was hit.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.HitTestLocations.Right">
      <summary>Indicates the right part of the designer was hit.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.HitTestLocations.Bottom">
      <summary>Indicates that the bottom of the designer was hit. </summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.HitTestLocations.Connector">
      <summary>Indicates that a connector on the designer was hit.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.IDesignerGlyphProvider">
      <summary>Defines the method that glyph provider classes use to generate an array of glyphs to display on an activity designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IDesignerGlyphProvider.GetGlyphs(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Returns an array of glyphs that are associated with the specified activity designer.</summary>
      <returns>An array of <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" /> objects to render to the activity designer.</returns>
      <param name="activityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> object for which to retrieve the glyphs.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.IDesignerGlyphProviderService">
      <summary>Allows activity designer developers to add custom glyph providers to an activity designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IDesignerGlyphProviderService.AddGlyphProvider(System.Workflow.ComponentModel.Design.IDesignerGlyphProvider)">
      <summary>Adds a class that implements the <see cref="T:System.Workflow.ComponentModel.Design.IDesignerGlyphProvider" /> interface to the list of glyph providers that an activity designer uses.</summary>
      <param name="glyphProvider">The <see cref="T:System.Workflow.ComponentModel.Design.IDesignerGlyphProvider" /> to add.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.IDesignerGlyphProviderService.GlyphProviders">
      <summary>Gets a generic read-only collection of designer glyph providers.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.IDesignerGlyphProvider" /> read-only collection.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IDesignerGlyphProviderService.RemoveGlyphProvider(System.Workflow.ComponentModel.Design.IDesignerGlyphProvider)">
      <summary>Removes the class that implements the <see cref="T:System.Workflow.ComponentModel.Design.IDesignerGlyphProvider" /> interface to the list of glyph providers that an activity designer uses.</summary>
      <param name="glyphProvider">The <see cref="T:System.Workflow.ComponentModel.Design.IDesignerGlyphProvider" /> to remove.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.IDesignerVerbProvider">
      <summary>Defines a means for an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to return its designer verbs.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IDesignerVerbProvider.GetVerbs(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Returns the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerb" /> collection associated with the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />. </summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection" /> that contains the verbs associated with the <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</returns>
      <param name="activityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> for which to return the activity verb collection.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.IDesignerVerbProviderService">
      <summary>Allows activity designer developers to add custom designer verb providers to an activity designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IDesignerVerbProviderService.AddVerbProvider(System.Workflow.ComponentModel.Design.IDesignerVerbProvider)">
      <summary>Adds a class that implements the <see cref="T:System.Workflow.ComponentModel.Design.IDesignerVerbProvider" /> interface to the list of verb providers that an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> uses.</summary>
      <param name="verbProvider">The <see cref="T:System.Workflow.ComponentModel.Design.IDesignerVerbProvider" /> to add.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IDesignerVerbProviderService.RemoveVerbProvider(System.Workflow.ComponentModel.Design.IDesignerVerbProvider)">
      <summary>Removes a class that implements the <see cref="T:System.Workflow.ComponentModel.Design.IDesignerVerbProvider" /> interface to the list of verb providers that an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> uses.</summary>
      <param name="verbProvider">The <see cref="T:System.Workflow.ComponentModel.Design.IDesignerVerbProvider" /> to remove.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.IDesignerVerbProviderService.VerbProviders">
      <summary>Gets an <see cref="T:System.Workflow.ComponentModel.Design.IDesignerVerbProvider" /> read-only collection.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.IDesignerVerbProvider" /> read-only collection. </returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.IExtendedUIService">
      <summary>Defines the methods that workflow designer hosts can call to perform advanced UI operations. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService.AddAssemblyReference(System.Reflection.AssemblyName)">
      <summary>Instructs the workflow designer host to add an assembly reference for the current project to access.</summary>
      <param name="assemblyName">An <see cref="T:System.Reflection.AssemblyName" /> that identifies the assembly to add. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService.AddDesignerActions(System.Workflow.ComponentModel.Design.DesignerAction[])">
      <summary>Adds an array of designer actions to the list of available user actions in the workflow designer host. </summary>
      <param name="actions">A <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" /> array that contains the actions to add.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService.AddWebReference(System.Uri@,System.Type@)">
      <summary>Adds a reference to a Web resource to a project in a workflow designer.</summary>
      <returns>A <see cref="T:System.Windows.Forms.DialogResult" /> value that indicates the return value of the Add Web Reference dialog box.</returns>
      <param name="url">When this method returns, contains a <see cref="T:System.Uri" /> that represents the universal resource locator (URL) of the Web resource to provide the project access to. This parameter is passed uninitialized. </param>
      <param name="proxyClass">When this method returns, contains a <see cref="T:System.Type" /> of the proxy class associated with the Web resource. This parameter is passed uninitialized. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService.GetProxyClassForUrl(System.Uri)">
      <summary>Returns the type of the proxy class associated with the specified universal resource locator (URL).</summary>
      <returns>The <see cref="T:System.Type" /> of the proxy class.</returns>
      <param name="url">A <see cref="T:System.Uri" /> that represents a URL.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService.GetSelectedPropertyContext">
      <summary>Provides contextual information about the current component.</summary>
      <returns>Returns property context.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService.GetUrlForProxyClass(System.Type)">
      <summary>Returns the universal resource locator (URL) for the Web resource associated with the specified proxy class.</summary>
      <returns>The URL for the Web resource associated with the proxy class.</returns>
      <param name="proxyClass">The <see cref="T:System.Type" /> associated with the proxy class.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService.GetXsdProjectItemsInfo">
      <summary>Returns the types that are generated for the XSD schema that is added to the workflow project.</summary>
      <returns>The types that are generated for the XSD schema that is added to the workflow project.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService.NavigateToProperty(System.String)">
      <summary>Navigates to the specified property in the property browser of the workflow designer host. </summary>
      <returns>true if the property was navigated to successfully; otherwise, false.</returns>
      <param name="propName">The name of the property to navigate to.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService.RemoveDesignerActions">
      <summary>Deletes all designer actions in the task list associated with the workflow designer host. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService.ShowToolsOptions">
      <summary>Displays the tools options associated with the workflow designer host.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.IExtendedUIService2">
      <summary>Defines the methods that workflow designer hosts can call to determine the environment settings.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService2.GetReflectionAssembly(System.Reflection.AssemblyName)">
      <summary>Returns the assembly loaded in reflection context for the current target framework.</summary>
      <returns>The assembly loaded in reflection context for the current target framework.</returns>
      <param name="assemblyName">The assembly name.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService2.GetRuntimeType(System.Type)">
      <summary>Returns the current runtime type for the specified reflection type. The reflection type depends on the target .NET Framework version.</summary>
      <returns>The current runtime type.</returns>
      <param name="reflectionType">The reflection type that depends on the target .NET Framework version.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService2.GetTargetFrameworkVersion">
      <summary>Returns the target .NET Framework version of the current project.</summary>
      <returns>The target .NET Framework version of the current project.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IExtendedUIService2.IsSupportedType(System.Type)">
      <summary>Returns a value that indicates whether the specified type is supported in the current target .NET Framework version.</summary>
      <returns>true if the specified type is supported in the current target .NET Framework version; otherwise, false.</returns>
      <param name="type">The type to check.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.IIdentifierCreationService">
      <summary>Provides a mechanism to create uniquely named identifiers throughout a specified range of activities.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IIdentifierCreationService.EnsureUniqueIdentifiers(System.Workflow.ComponentModel.CompositeActivity,System.Collections.ICollection)">
      <summary>Provides a mechanism to ensure that Activities added to a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> are uniquely named.</summary>
      <param name="parentActivity">The <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> that will contain the uniquely named activities.</param>
      <param name="childActivities">A collection of activities to ensure that activities are uniquely named.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IIdentifierCreationService.ValidateIdentifier(System.Workflow.ComponentModel.Activity,System.String)">
      <summary>Provides a mechanism to test that an identifier is unique within an <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> against which to test the identifier.</param>
      <param name="identifier">The identifier to test for validity.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.IMemberCreationService">
      <summary>Defines methods to dynamically create, update and remove code elements for a type at design time. Methods are also provided that allow you to display code at design time.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.CreateEvent(System.String,System.String,System.Type,System.Workflow.ComponentModel.Compiler.AttributeInfo[],System.Boolean)">
      <summary>Creates an event on the specified class by using the specified event name, event type and attributes.</summary>
      <param name="className">A string that contains the class name to add the event to.</param>
      <param name="eventName">A string that defines the name of the event.</param>
      <param name="eventType">The <see cref="T:System.Type" /> assigned to the event.</param>
      <param name="attributes">An <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" /> array that contains information on all attributes to assign to the event.</param>
      <param name="emitDependencyProperty">true to emit any dependency properties associated with the event; otherwise, false. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.CreateField(System.String,System.String,System.Type,System.Type[],System.CodeDom.MemberAttributes,System.CodeDom.CodeSnippetExpression,System.Boolean)">
      <summary>Creates a field on the specified class by using the specified field name, field type, parameter types, attributes and literal initialization expression.</summary>
      <param name="className">A string that defines the name of the class to add the field.</param>
      <param name="fieldName">A string that defines the name of the field.</param>
      <param name="fieldType">The <see cref="T:System.Type" /> of the new field. </param>
      <param name="genericParameterTypes">A <see cref="T:System.Type" /> array of any parameters associated with the field.</param>
      <param name="attributes">A <see cref="T:System.CodeDom.MemberAttributes" /> that defines the member attribute identifier for the field.</param>
      <param name="initializationExpression">A <see cref="T:System.CodeDom.CodeSnippetExpression" /> that contains the literal expression of the field.</param>
      <param name="overwriteExisting">true to delete any existing fields on <paramref name="className" /> when creating the new field; otherwise, false. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.CreateProperty(System.String,System.String,System.Type,System.Workflow.ComponentModel.Compiler.AttributeInfo[],System.Boolean,System.Boolean,System.Boolean,System.Type,System.Boolean)">
      <summary>Creates a property on the specified class by using the specified property name, property type and attributes.</summary>
      <param name="className">A string that defines the name of the class to add the field.</param>
      <param name="propertyName">A string that defines the name of the field.</param>
      <param name="propertyType">The <see cref="T:System.Type" /> of the new property. </param>
      <param name="attributes">An <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" /> array that contains information on all attributes to assign to the property.</param>
      <param name="emitDependencyProperty">true to emit any dependency properties associated with the property; otherwise, false.</param>
      <param name="isMetaProperty">true to create the property as a meta property; otherwise, false. </param>
      <param name="isAttached">true to indicate that the emitted dependency property has its <see cref="P:System.Workflow.ComponentModel.DependencyProperty.IsAttached" /> property set to true; otherwise, false. </param>
      <param name="ownerType">The <see cref="T:System.Type" /> that is declaring the dependency property.</param>
      <param name="isReadOnly">true to create the property as a read-only property; false to create the property as a read-write property.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.RemoveEvent(System.String,System.String,System.Type)">
      <summary>Removes the specified event from the specified class.</summary>
      <param name="className">A string that contains the name of the class from which to remove the event.</param>
      <param name="eventName">A string that contains the name of the event to remove.</param>
      <param name="eventType">The <see cref="T:System.Type" /> associated with the event to remove.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.RemoveProperty(System.String,System.String,System.Type)">
      <summary>Removes the specified property from the specified class.</summary>
      <param name="className">A string that contains the name of the class from which to remove the property.</param>
      <param name="propertyName">A string that contains the name of the property to remove.</param>
      <param name="propertyType">The <see cref="T:System.Type" /> of the property to remove.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.ShowCode">
      <summary>Displays code for the new member on a workflow design surface.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.ShowCode(System.Workflow.ComponentModel.Activity,System.String,System.Type)">
      <summary>Displays code for the new member on a workflow design surface by using the specified <see cref="T:System.Workflow.ComponentModel.Activity" />, the specified method and the specified delegate type.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with the code to display.</param>
      <param name="methodName">The name of the method to display.</param>
      <param name="delegateType">The <see cref="T:System.Type" /> of the delegate associated with the method to display.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.UpdateBaseType(System.String,System.Type)">
      <summary>Updates the base type to associate with the specified class.</summary>
      <param name="className">A string that contains the name of the class to update with a new base type.</param>
      <param name="baseType">The <see cref="T:System.Type" /> to be the new base type for the class.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.UpdateEvent(System.String,System.String,System.Type,System.String,System.Type,System.Workflow.ComponentModel.Compiler.AttributeInfo[],System.Boolean,System.Boolean)">
      <summary>Sets a new name and type to an existing event on the specified class.</summary>
      <param name="className">A string that contains the name of the class that contains the event to update.</param>
      <param name="oldEventName">A string that contains the name of the existing event.</param>
      <param name="oldEventType">The <see cref="T:System.Type" /> associated with the existing event.</param>
      <param name="newEventName">A string that contains the new name of the updated event.</param>
      <param name="newEventType">The <see cref="T:System.Type" /> to associate with the updated event.</param>
      <param name="attributes">An <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" /> array that contains information on all attributes to assign to the updated event.</param>
      <param name="emitDependencyProperty">true to update the event to emit a dependency property; otherwise, false.</param>
      <param name="isMetaProperty">true to set the event as a meta property; otherwise, false. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.UpdateProperty(System.String,System.String,System.Type,System.String,System.Type,System.Workflow.ComponentModel.Compiler.AttributeInfo[],System.Boolean,System.Boolean)">
      <summary>Sets a new name and type to a property on the specified class.</summary>
      <param name="className">A string that contains the name of the class on which the property to update resides.</param>
      <param name="oldPropertyName">A string that contains the existing name of the property.</param>
      <param name="oldPropertyType">The <see cref="T:System.Type" /> associated with the existing property.</param>
      <param name="newPropertyName">A string that contains the new name of the property.</param>
      <param name="newPropertyType">The <see cref="T:System.Type" /> to associate with the updated version of the property.</param>
      <param name="attributes">An <see cref="T:System.Workflow.ComponentModel.Compiler.AttributeInfo" /> array that contains information on all attributes to assign to the updated property.</param>
      <param name="emitDependencyProperty">true to update the property emit a dependency property; otherwise, false.</param>
      <param name="isMetaProperty">true to set the property as a meta property; otherwise, false. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IMemberCreationService.UpdateTypeName(System.String,System.String)">
      <summary>Updates the name of the specified class.</summary>
      <param name="oldClassName">A string that contains the existing name of the class.</param>
      <param name="newClassName">A string that contains the new name to assign to the class.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.IPersistUIState">
      <summary>Defines methods that workflow designers and activity designers use to save UI state information to and restore UI state information from a binary stream. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IPersistUIState.LoadViewState(System.IO.BinaryReader)">
      <summary>Restores the UI state of a designer from a binary stream.</summary>
      <param name="reader">The <see cref="T:System.IO.BinaryReader" /> from which to restore the designer state.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IPersistUIState.SaveViewState(System.IO.BinaryWriter)">
      <summary>Stores the UI state of a designer to a binary stream.</summary>
      <param name="writer">The <see cref="T:System.IO.BinaryWriter" /> to use to store the state.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ITypeFilterProvider">
      <summary>Provides members that classes use to filter types that are displayed in class browser dialog boxes that are displayed by the workflow designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(System.Type,System.Boolean)">
      <summary>Returns a value that indicates whether the specified type can be filtered.</summary>
      <returns>true if the specified type can be filtered; otherwise, false. </returns>
      <param name="type">The <see cref="T:System.Type" /> to check for filtering.</param>
      <param name="throwOnError">true to throw an exception when the <see cref="M:System.Workflow.ComponentModel.Design.ITypeFilterProvider.CanFilterType(System.Type,System.Boolean)" /> is processed; otherwise, false. </param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ITypeFilterProvider.FilterDescription">
      <summary>Gets the description for the filter to be displayed on the class browser dialog box.</summary>
      <returns>A string value that contains the description of the filter.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ITypeProviderCreator">
      <summary>Defines a group of methods that classes can use to create a type provider for an activity or workflow designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ITypeProviderCreator.GetLocalAssembly(System.Object)">
      <summary>Returns the local assembly associated with the specified object.</summary>
      <returns>The <see cref="T:System.Reflection.Assembly" /> associated with <paramref name="obj" />.</returns>
      <param name="obj">The <see cref="T:System.Object" /> for which to obtain the local assembly.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ITypeProviderCreator.GetTransientAssembly(System.Reflection.AssemblyName)">
      <summary>Returns the transient assembly associated with the specified assembly name.</summary>
      <returns>The transient <see cref="T:System.Reflection.Assembly" /> associated with <paramref name="assemblyName" />.</returns>
      <param name="assemblyName">The <see cref="T:System.Reflection.AssemblyName" /> for which to retrieve the transient assembly.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ITypeProviderCreator.GetTypeProvider(System.Object)">
      <summary>Returns the type provider associated with the specified object. </summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Compiler.ITypeProvider" /> to perform type provider tasks for <paramref name="obj" />.</returns>
      <param name="obj">The <see cref="T:System.Object" /> for which to return the type provider.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ITypeProviderCreator.GetTypeResolutionService(System.Object)">
      <summary>Returns a service that can retrieve an assembly or type by name for the specified object.</summary>
      <returns>The <see cref="T:System.ComponentModel.Design.ITypeResolutionService" /> to use to retrieve an assembly or type.</returns>
      <param name="obj">The <see cref="T:System.Object" /> for which to retrieve the type resolution service.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.IWorkflowRootDesigner">
      <summary>Defines the invoking designer and message filters properties and the method that determines whether an activity is supported for all workflow root designers.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.InvokingDesigner">
      <summary>Gets or sets the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> that requested the workflow root designer to be initialized.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> that requested the workflow root designer to be initialized.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.IsSupportedActivityType(System.Type)">
      <summary>Returns a value that indicates whether the specified type is supported on the current workflow designer.</summary>
      <returns>true if <paramref name="type" /> is supported on the current workflow designer; otherwise, false. </returns>
      <param name="activityType">The <see cref="T:System.Type" /> to check for support on the designer.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.MessageFilters">
      <summary>Gets any message filters associated with the workflow root designer. </summary>
      <returns>A WorkflowDesignerMessageFilter read-only collection that contains any message filters associated with the workflow root designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.IWorkflowRootDesigner.SupportsLayoutPersistence">
      <summary>Gets the value that indicates whether the actual workflow root designer supports the layout persistence.</summary>
      <returns>true when the designer supports layout persistence; otherwise, false.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.LineAnchor">
      <summary>Determines the shapes of connector points on a workflow design surface.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.None">
      <summary>There is no connector point.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.Arrow">
      <summary>The connector point is an arrow.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.ArrowAnchor">
      <summary>The connector point is an arrow anchor.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.Diamond">
      <summary>The connector point is a diamond.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.DiamondAnchor">
      <summary>The connector point is an diamond anchor.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.Round">
      <summary>The connector point is a circle.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.RoundAnchor">
      <summary>The connector point is a circle anchor.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.Rectangle">
      <summary>The connector point is a rectangle.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.RectangleAnchor">
      <summary>The connector point is a rectangle anchor.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.RoundedRectangle">
      <summary>The connector point is a rounded rectangle.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.LineAnchor.RoundedRectangleAnchor">
      <summary>The connector point is a rounded rectangle anchor.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.LockedActivityGlyph">
      <summary>Provides a glyph for an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to display when the activity associated with the designer cannot be modified.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.LockedActivityGlyph.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.LockedActivityGlyph" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.LockedActivityGlyph.GetBounds(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Boolean)">
      <summary>Returns the bounds for the glyph on the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds for the glyph.</returns>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with which the glyph is associated.</param>
      <param name="activated">true to indicate whether the glyph appears on the activity designer surface; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="designer" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.LockedActivityGlyph.OnPaint(System.Drawing.Graphics,System.Boolean,System.Workflow.ComponentModel.Design.AmbientTheme,System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Performs any tasks required to render the glyph on the activity designer surface. </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> to perform fill and drawing tasks.</param>
      <param name="activated">true to indicate that the glyph appears on the design surface; otherwise, false. </param>
      <param name="ambientTheme">The <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> to use to access ambient property settings.</param>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> from which to obtain information about user actions.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.LockedActivityGlyph.Priority">
      <summary>Gets the priority setting for the glyph on the activity design surface.</summary>
      <returns>An integer value that represents the priority setting for the <see cref="T:System.Workflow.ComponentModel.Design.LockedActivityGlyph" /> on the activity design surface.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner">
      <summary>Provides methods and properties for all activity designers that display parallel vertical layouts on a workflow design surface.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.CanMoveActivities(System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Returns a value that indicates whether child activities of the activity associated with the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" /> can be moved.</summary>
      <returns>true if the activities can be moved from the parent activity; otherwise false.</returns>
      <param name="moveLocation">The <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that describes the location to move the activities to.</param>
      <param name="activitiesToMove">The <see cref="T:System.Workflow.ComponentModel.Activity" /> read-only collection that contains the activities to move.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.CanRemoveActivities(System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Returns a value that indicates whether child activities of the activity associated with the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" /> can be deleted.</summary>
      <returns>true if the activities can be deleted from the parent activity; otherwise false.</returns>
      <param name="activitiesToRemove">The read-only collection of activities to remove.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.FirstSelectableObject">
      <summary>Gets the first selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</summary>
      <returns>An <see cref="T:System.Object" /> that is the first selectable object in the designer navigation order.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.GetDropTargets(System.Drawing.Point)">
      <summary>Returns array of rectangles that represent the valid drop locations within the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> array that represents the valid drop locations within the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</returns>
      <param name="dropPoint">The <see cref="T:System.Drawing.Point" /> that defines the x- and y-coordinates for the drop target.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.GetNextSelectableObject(System.Object,System.Workflow.ComponentModel.Design.DesignerNavigationDirection)">
      <summary>Returns the first selectable object that follows the specified object in the navigation order of the current <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</summary>
      <returns>An <see cref="T:System.Object" /> that follows the specified object.</returns>
      <param name="obj">The current <see cref="T:System.Object" /> in the navigation order.</param>
      <param name="direction">A <see cref="T:System.Workflow.ComponentModel.Design.DesignerNavigationDirection" /> enumeration value that determines the navigation order of the designer.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.LastSelectableObject">
      <summary>Gets the last selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Object" /> that is the last selectable object in the designer navigation order.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.OnCreateNewBranch">
      <summary>Indicates that the user has created a new branch activity on the activity associated with the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> that was added as the new branch of the activity associated with the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.OnLayoutPosition(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Performs layout tasks to position visual cues and child designers on the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the layout arguments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.OnLayoutSize(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Sets the size of the visual cues on the designers contained within the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> that contains the new size settings for the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</returns>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the layout arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)">
      <summary>Draws the visual representation of the activity associated with the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" /> at design time.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> that contains the drawing arguments.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ParallelActivityDesigner.Verbs">
      <summary>Gets the collection of designer verbs to be associated with the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerVerbCollection" /> that contains the designer verbs to associate with the <see cref="T:System.Workflow.ComponentModel.Design.ParallelActivityDesigner" />. </returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ReadOnlyActivityGlyph">
      <summary>Provides a glyph for an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> to display when the activity it is associated with is set to read only at design time.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ReadOnlyActivityGlyph.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ReadOnlyActivityGlyph" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ReadOnlyActivityGlyph.GetBounds(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Boolean)">
      <summary>Returns the bounds for the glyph on the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds for the glyph.</returns>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with which the glyph is associated.</param>
      <param name="activated">true to indicate whether the glyph appears on the activity designer surface; otherwise, false. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="designer" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ReadOnlyActivityGlyph.OnPaint(System.Drawing.Graphics,System.Boolean,System.Workflow.ComponentModel.Design.AmbientTheme,System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Performs any tasks required to render the glyph on the activity designer surface. </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> to perform fill and drawing tasks.</param>
      <param name="activated">true to indicate that the glyph appears on the design surface; otherwise, false. </param>
      <param name="ambientTheme">The <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> to use to access ambient property settings.</param>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> from which to obtain information about user actions.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ReadOnlyActivityGlyph.Priority">
      <summary>Gets the priority setting for the glyph on the activity designer surface.</summary>
      <returns>An integer value that represents the priority setting for the <see cref="T:System.Workflow.ComponentModel.Design.ReadOnlyActivityGlyph" /> on the activity designer surface.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.SelectionGlyph">
      <summary>Provides methods and properties for all glyph classes that an <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> displays when it is selected on the workflow design surface.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SelectionGlyph.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.SelectionGlyph" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SelectionGlyph.GetBounds(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Boolean)">
      <summary>Returns the bounds for the selection glyph on the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds for the glyph.</returns>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with which the selection glyph is associated.</param>
      <param name="activated">true to indicate whether the selection glyph appears on the activity designer surface; otherwise, false. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SelectionGlyph.GetGrabHandles(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Returns an array of rectangles that represents the selected glyph's grab handles. </summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> array of the grab handles to display on the selected glyph.</returns>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with which the selection glyph is associated.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SelectionGlyph.IsPrimarySelection">
      <summary>When overridden in a derived class, gets a value indicating whether the selection glyph is the primary of all selected glyphs on the design surface. </summary>
      <returns>true if the selection glyph is the primary selected glyph on the activity designer; otherwise, false. </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SelectionGlyph.OnPaint(System.Drawing.Graphics,System.Boolean,System.Workflow.ComponentModel.Design.AmbientTheme,System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Performs any tasks required to render the glyph on the activity designer surface. </summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> to perform fill and drawing tasks.</param>
      <param name="activated">true to indicate that the glyph appears on the design surface; otherwise, false. </param>
      <param name="ambientTheme">The <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> to use to access ambient property settings.</param>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> from which to obtain information about user actions.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SelectionGlyph.Priority">
      <summary>Gets the view priority of the glyph on the activity designer.</summary>
      <returns>An integer that represents the view priority of the glyph on the activity designer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.SequenceDesigner">
      <summary>Provides design-time support for <see cref="T:System.Workflow.Activities.SequenceActivity" /> and all classes that derive from it.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequenceDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.SequenceDesigner" /> class. </summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.SequenceDesignerAccessibleObject">
      <summary>Implements an accessibility object that SequentialActivityDesigner classes use to adjust the designer user interface for users who have impairments.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequenceDesignerAccessibleObject.#ctor(System.Workflow.ComponentModel.Design.SequentialActivityDesigner)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.SequenceDesignerAccessibleObject" /> class by using the specified <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />. </summary>
      <param name="activityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" /> to apply to the accessible object.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequenceDesignerAccessibleObject.GetChild(System.Int32)">
      <summary>Retrieves the accessible child that corresponds to the specified index location.</summary>
      <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents the accessible child corresponding to the specified index.</returns>
      <param name="index">The zero-based index for the accessible child.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequenceDesignerAccessibleObject.GetChildCount">
      <summary>Retrieves the number of children that belong to the accessible object.</summary>
      <returns>An integer that represents the number of children that belong to the accessible object. </returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequenceDesignerAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
      <summary>Navigates to another accessible object.</summary>
      <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents the specified <see cref="T:System.Windows.Forms.AccessibleNavigation" /> value.</returns>
      <param name="navdir">One of the <see cref="T:System.Windows.Forms.AccessibleNavigation" /> values.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner">
      <summary>Defines properties and methods for all activity designers that have a sequential vertical layout on the workflow design surface.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" /> class. </summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.AccessibilityObject">
      <summary>Gets an <see cref="T:System.Windows.Forms.AccessibleObject" /> that allows the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" /> to adjust its UI for users who have disabilities. </summary>
      <returns>The <see cref="T:System.Windows.Forms.AccessibleObject" /> to associate with the designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.CanExpandCollapse">
      <summary>Gets a value indicating whether the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" /> can be expanded and collapsed on the workflow designer surface. </summary>
      <returns>true if the designer can be expanded and collapsed on the workflow design surface; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.Expanded">
      <summary>Gets or sets a value indicating whether the designer is expanded on the workflow design surface. </summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" /> is expanded on the workflow design surface; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.FirstSelectableObject">
      <summary>Gets the first selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</summary>
      <returns>An <see cref="T:System.Object" /> that is the first selectable object in the designer navigation order.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.GetConnectors">
      <summary>Returns an array of rectangles that bound the activity designer's connectors.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> array that bounds the connectors.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.GetDropTargets(System.Drawing.Point)">
      <summary>Returns array of rectangles that represent the valid drop locations within the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> array that represents the valid drop locations within the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</returns>
      <param name="dropPoint">The <see cref="T:System.Drawing.Point" /> that defines the x- and y-coordinates for the drop target.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.GetNextSelectableObject(System.Object,System.Workflow.ComponentModel.Design.DesignerNavigationDirection)">
      <summary>Returns the first selectable object that follows the specified object in the navigation order of the current <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</summary>
      <returns>The first selectable <see cref="T:System.Object" /> that follows the <paramref name="obj" /> parameter in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />. </returns>
      <param name="obj">The current object in the navigation order.</param>
      <param name="direction">A <see cref="T:System.Workflow.ComponentModel.Design.DesignerNavigationDirection" /> enumeration value that determines the navigation order of the designer.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.Glyphs">
      <summary>Gets a read-only collection of glyphs that are associated with the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.DesignerGlyph" /> read-only collection that contains all of the glyphs to display on the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.HelpText">
      <summary>Gets or sets the text to display when the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" /> contains no other activity designers.</summary>
      <returns>A string that contains the text to display on the designer surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.HelpTextRectangle">
      <summary>Gets the rectangle that serves as the bounds for the text displayed by the <see cref="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.HelpText" /> property.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that serves as the bounds for the text displayed by the <see cref="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.HelpText" /> property.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.HelpTextSize">
      <summary>Gets the height and width of the text to display in the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" /> when it contains no child activity designers.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> that defines the height and width of the text displayed by <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" /> when it contains no child activity designers. By default <see cref="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.HelpTextSize" /> is set to a newly initialized <see cref="T:System.Drawing.Size" />. </returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.HitTest(System.Drawing.Point)">
      <summary>Returns information about the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" /> at the specified point on the workflow design surface.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that contains information about the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</returns>
      <param name="point">The <see cref="T:System.Drawing.Point" /> location on the workflow design surface from which to gather information.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.Initialize(System.Workflow.ComponentModel.Activity)">
      <summary>Initializes the designer by using the specified activity.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> with which to initialize the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.LastSelectableObject">
      <summary>Gets the last selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Object" /> that is the last selectable object in the designer navigation order.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.OnLayoutPosition(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Performs layout tasks to position visual cues and child designers on the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the layout arguments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.OnLayoutSize(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Sets the size of the visual cues on the designers contained within the <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> that contains the new size settings for <see cref="T:System.Workflow.ComponentModel.Design.SequentialActivityDesigner" />. </returns>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the layout arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialActivityDesigner.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)">
      <summary>Draws the visual representation of activity at design time.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> that contains the drawing arguments.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter">
      <summary>Represents a header or footer that is associated with a <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.#ctor(System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" /> class. </summary>
      <param name="parent">The SequentialWorkflowRootDesigner with which the </param>
      <param name="isHeader">true to indicate that the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" /> is a header; false to indicate that the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" /> is a footer. </param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.AssociatedDesigner">
      <summary>Gets the root designer to which the header or footer is applied.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" /> to which the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" /> is applied.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.Bounds">
      <summary>Gets the bounding rectangle of the header or footer on the workflow design surface.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> that bounds the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" /> on the workflow design surface.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.Image">
      <summary>Gets or sets the image associated with the header or footer.</summary>
      <returns>The <see cref="T:System.Drawing.Image" /> to associate with the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.ImageRectangle">
      <summary>Gets the bounding rectangle for the image associated with the header or footer.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> that defines the bounds for the <see cref="P:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.Image" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.OnLayout(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" /> when the elements it contains are repositioned by the user.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)">
      <summary>Draws the header or footer associated with the workflow root designer on the design surface.</summary>
      <param name="e">An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.Text">
      <summary>Gets or sets the text description associated with the header or footer.</summary>
      <returns>The string that contains the text description associated with the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.TextRectangle">
      <summary>Gets the bounding rectangle for the text associated with the header or footer.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> that defines the bounds for the <see cref="P:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter.Text" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" />.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner">
      <summary>Contains properties and methods to provide consistent look and feel to all root designers on a workflow design surface.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.CanBeParentedTo(System.Workflow.ComponentModel.Design.CompositeActivityDesigner)">
      <summary>Returns a value that indicates whether a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" /> can be set as the parent of the activity associated with the designer.</summary>
      <returns>true to allow the activity associated with <paramref name="parentActivityDesigner" /> to be the parent of the activity associated with the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />; otherwise, false. </returns>
      <param name="parentActivityDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> to check.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.CanExpandCollapse">
      <summary>Gets a value indicating whether the designer can be expanded and collapsed. </summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" /> can be expanded and collapsed; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.Footer">
      <summary>Gets the footer associated with the root designer.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" /> that represents the footer associated with the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.GetInnerConnections(System.Workflow.ComponentModel.Design.DesignerEdges)">
      <summary>Returns a read-only collection of points that represent the inner connection of the designer. </summary>
      <returns>A collection that contains the <see cref="T:System.Workflow.ComponentModel.Design.ConnectionPoint" /> objects used for a connectable designer.</returns>
      <param name="edges">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerEdges" /> on which to gather the collection of connection points.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.Glyphs">
      <summary>Gets the collection of glyphs that are displayed on the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerGlyphCollection" /> that contains the glyphs displayed on the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.Header">
      <summary>Gets the header associated with the root designer.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowHeaderFooter" /> that represents the header associated with the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.Image">
      <summary>Gets the image associated with the designer.</summary>
      <returns>The <see cref="T:System.Drawing.Image" /> to associate with the designer.  </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.ImageRectangle">
      <summary>Gets the value for the enclosing bounds of the image associated with the designer in logical coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that encloses the <see cref="T:System.Drawing.Image" /> displayed for the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.InvokingDesigner">
      <summary>Gets or sets the <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> that requested the sequential workflow root designer to be initialized.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> that requested the workflow root designer to be initialized.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.MinimumSize">
      <summary>Gets the minimum size for the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> that represents the minimum size of the sequential workflow designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.OnLayoutSize(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Sets the size of the visual cues on the designers contained within the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> that represents the size of the visual cues on the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</returns>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the layout arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.OnPaint(System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs)">
      <summary>Draws any headers and footers associated with the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerPaintEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.OnSmartTagVisibilityChanged(System.Boolean)">
      <summary>Notifies the designer whether smart tags are to be shown or hidden on the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</summary>
      <param name="visible">true to display smart tags on the designer surface; otherwise, false.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.ShowSmartTag">
      <summary>Gets a value indicating whether the root designer displays smart tags.</summary>
      <returns>true if the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" /> displays smart tags; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.SmartTagRectangle">
      <summary>Gets the rectangle on the designer surface in which to display a smart tag.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that defines the bounds in which to display the smart tag.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.Text">
      <summary>Gets the description associated with the designer.</summary>
      <returns>A string that contains the description associated with the designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner.TitleHeight">
      <summary>Gets the height of the title area of the designer.</summary>
      <returns>An integer that represents the height of the title area of the <see cref="T:System.Workflow.ComponentModel.Design.SequentialWorkflowRootDesigner" />.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ShadowGlyph">
      <summary>Provides a drop shadow for display by <see cref="T:System.Workflow.ComponentModel.Design.CompositeActivityDesigner" /> classes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ShadowGlyph.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ShadowGlyph" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ShadowGlyph.GetBounds(System.Workflow.ComponentModel.Design.ActivityDesigner,System.Boolean)">
      <summary>Returns the bounds for the glyph on the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds for the glyph.</returns>
      <param name="designer">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> with which the glyph is associated.</param>
      <param name="activated">true to indicate whether the glyph appears on the activity designer surface; otherwise, false. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ShadowGlyph.Priority">
      <summary>Gets the priority setting for the glyph on the activity designer surface.</summary>
      <returns>An integer value that represents the priority setting for the <see cref="T:System.Workflow.ComponentModel.Design.ShadowGlyph" /> on the activity designer surface.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner">
      <summary>Provides common methods and properties for composite activity designers that contain structured layouts. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> class. </summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.ActiveView">
      <summary>Gets or sets the <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" /> that contains information about the current designer view displayed by the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" /> that contains information about the current view displayed by the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.CanInsertActivities(System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Returns a value that indicates whether the specified activities can be added to the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> at the specified location on the workflow design surface.</summary>
      <returns>true if the specified activities can be inserted at the specified location on the workflow design surface; otherwise, false. </returns>
      <param name="insertLocation">The <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that contains the screen location at which to attempt to insert the activities.</param>
      <param name="activitiesToInsert">The <see cref="T:System.Workflow.ComponentModel.Activity" /> read-only collection that contains the activities to add.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.CanRemoveActivities(System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Returns a value that indicates whether the specified activities can be removed from the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
      <returns>true if the specified activities can be removed; otherwise, false. </returns>
      <param name="activitiesToRemove">The <see cref="T:System.Workflow.ComponentModel.Activity" /> read-only collection that contains the activities to remove.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.ContainedDesigners">
      <summary>Gets a generic read-only collection that contains all activity designers that are children of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> read-only collection that contains the child designers.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.CurrentDropTarget">
      <summary>Gets or sets the index of the current drop target in the array of drop targets returned by <see cref="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.GetDropTargets(System.Drawing.Point)" />.</summary>
      <returns>An integer that represents the index of the current drop target for the designer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.DrawConnectors(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Point[],System.Workflow.ComponentModel.Design.LineAnchor,System.Workflow.ComponentModel.Design.LineAnchor)">
      <summary>Draws all of the connectors to display on the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
      <param name="graphics">The <see cref="T:System.Drawing.Graphics" /> on which to draw the connectors.</param>
      <param name="pen">The <see cref="T:System.Drawing.Pen" /> to draw the connectors.</param>
      <param name="points">The <see cref="T:System.Drawing.Point" /> array that contains the endpoints for each of the connectors to draw.</param>
      <param name="startCap">A <see cref="T:System.Workflow.ComponentModel.Design.LineAnchor" /> that determines the graphic to draw at connector start points.</param>
      <param name="endCap">A <see cref="T:System.Workflow.ComponentModel.Design.LineAnchor" /> that determines the graphic to draw at connector end points.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.EnsureVisibleContainedDesigner(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Ensures that the specified activity designer is visible on the workflow design surface.</summary>
      <param name="containedDesigner">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> for which to ensure visibility on the workflow design surface.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.FirstSelectableObject">
      <summary>Gets the first selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
      <returns>An <see cref="T:System.Object" /> that is the first selectable object in the designer navigation order.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.GetDropTargets(System.Drawing.Point)">
      <summary>Returns an array of valid drop locations on the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> surface. </summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> array that represents the valid drop locations on the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> surface.</returns>
      <param name="dropPoint">The <see cref="T:System.Drawing.Point" /> to query the design surface with.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.GetInnerConnections(System.Workflow.ComponentModel.Design.DesignerEdges)">
      <summary>Returns a read-only collection of points that represent the inner connection points for the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
      <returns>A <see cref="T:System.Drawing.Point" /> generic read-only collection that contains the inner connection points for the designer.</returns>
      <param name="edges">The DesignerEdges along which to search for connection points. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.GetNextSelectableObject(System.Object,System.Workflow.ComponentModel.Design.DesignerNavigationDirection)">
      <summary>Returns the first selectable object that follows the specified object in the navigation order for the current <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />. </summary>
      <returns>The first selectable <see cref="T:System.Object" /> that follows the <paramref name="obj" /> parameter in the navigation order. </returns>
      <param name="current">The current object in the navigation order.</param>
      <param name="direction">A <see cref="T:System.Workflow.ComponentModel.Design.DesignerNavigationDirection" /> that determines the navigation order of the designer.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.Initialize(System.Workflow.ComponentModel.Activity)">
      <summary>Initializes the designer by using the specified activity.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> with which to initialize the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.InsertActivities(System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Adds the specified activities to the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> at the specified location on the workflow design surface.</summary>
      <param name="insertLocation">The <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that specifies the location to add the activities.</param>
      <param name="activitiesToInsert">The <see cref="T:System.Workflow.ComponentModel.Activity" /> read-only collection that contains the activities to add to the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.LastSelectableObject">
      <summary>Gets the last selectable object in the navigation order of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Object" /> that is the last selectable object in the designer navigation order.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.LoadViewState(System.IO.BinaryReader)">
      <summary>Loads the view state of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> from a binary stream.</summary>
      <param name="reader">A <see cref="T:System.IO.BinaryReader" /> used to restore the designer view state.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.MinimumSize">
      <summary>Gets the minimum size settings for the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> that represents the smallest possible size for the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.MoveActivities(System.Workflow.ComponentModel.Design.HitTestInfo,System.Collections.ObjectModel.ReadOnlyCollection{System.Workflow.ComponentModel.Activity})">
      <summary>Moves the specified activities from one designer displayed in the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> to another.</summary>
      <param name="moveLocation">The <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that contains the location on the workflow design surface to move the activities.</param>
      <param name="activitiesToMove">The <see cref="T:System.Workflow.ComponentModel.Activity" /> read-only collection to move.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.OnActivityChanged(System.Workflow.ComponentModel.Design.ActivityChangedEventArgs)">
      <summary>Notifies the designer when the activity associated with it changes.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityChangedEventArgs" /> that contains information about the changed activity.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.OnContainedActivitiesChanging(System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when more than one of the activities it contains has changed. </summary>
      <param name="listChangeArgs">The <see cref="T:System.Workflow.ComponentModel.ActivityCollectionChangeEventArgs" /> that contains information about the activities that changed.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.OnDragDrop(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when a drag-drop operation is completed with the bounds of its design surface.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that defines the operation event arguments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.OnDragEnter(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when a drag-drop operation is in progress and the user's mouse cursor enters the bounds of the designer.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that defines the operation event arguments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.OnDragLeave">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when a drag-drop operation is in progress and the user's mouse cursor leaves the bounds of the designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.OnDragOver(System.Workflow.ComponentModel.Design.ActivityDragEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when a drag-drop operation is in progress and the user's mouse cursor is inside the bounds of the designer.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDragEventArgs" /> that defines the operation event arguments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.OnLayoutPosition(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Performs layout tasks to position visual cues and child designers on the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</summary>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the layout arguments.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="e" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.OnLayoutSize(System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when the size of the visual cues on the designers displayed by the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> have changed.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> that represents the new size of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> on the workflow design surface.</returns>
      <param name="e">The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerLayoutEventArgs" /> that contains the layout arguments.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.OnShowSmartTagVerbs(System.Drawing.Point)">
      <summary>Displays the designer verbs associated with a smart tag at a specified location on the workflow design surface.</summary>
      <param name="smartTagPoint">The <see cref="T:System.Drawing.Point" /> that represents the location on the workflow design surface for which to show <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" /> objects.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.OnViewChanged(System.Workflow.ComponentModel.Design.DesignerView)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> when the current designer view changes.</summary>
      <param name="view">The <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" /> that is to be set.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.SaveViewState(System.IO.BinaryWriter)">
      <summary>Stores the current view state of the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> to a binary stream.</summary>
      <param name="writer">The <see cref="T:System.IO.BinaryWriter" /> to which the current designer view state is stored.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.ShowSmartTag">
      <summary>Gets a value indicating whether the <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> displays smart tags.</summary>
      <returns>true if the designer displays smart tags; otherwise, false. </returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.SmartTagVerbs">
      <summary>Gets a read-only collection of designer actions that are associated with the smart tags on the designer.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.DesignerAction" /> read-only collection that contains all the actions associated with the smart tags on the designer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner.Views">
      <summary>Get a read-only collection of designer views that the current <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" /> hosts.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.DesignerView" /> read-only collection that contains the views hosted by the current <see cref="T:System.Workflow.ComponentModel.Design.StructuredCompositeActivityDesigner" />.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.TextQuality">
      <summary>Specifies the text rendering settings for the AmbientTheme class.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.TextQuality.Aliased">
      <summary>The ambient text quality setting is aliased.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.TextQuality.AntiAliased">
      <summary>The ambient text quality setting is antialiased.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ThemeConfigurationDialog">
      <summary>Represents a common dialog box that allows the user to specify a workflow theme to apply to a workflow design surface. This class cannot be inherited. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ThemeConfigurationDialog.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ThemeConfigurationDialog" /> class by using an <see cref="T:System.IServiceProvider" />. </summary>
      <param name="serviceProvider">The service provider that provides custom support to the <see cref="T:System.Workflow.ComponentModel.Design.ThemeConfigurationDialog" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.ThemeConfigurationDialog.#ctor(System.IServiceProvider,System.Workflow.ComponentModel.Design.WorkflowTheme)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.ThemeConfigurationDialog" /> class by using an <see cref="T:System.IServiceProvider" /> and <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" />. </summary>
      <param name="serviceProvider">The service provider that provides custom support to the <see cref="T:System.Workflow.ComponentModel.Design.ThemeConfigurationDialog" />.</param>
      <param name="theme">The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> to be highlighted in the theme configuration dialog box in the workflow designer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> contains a null reference (Nothing in Visual Basic).</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.ThemeConfigurationDialog.ComposedTheme">
      <summary>Gets the workflow theme that is highlighted in the theme configuration dialog box in the workflow designer.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> that is highlighted in the theme configuration dialog box in the workflow designer.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.ThemeType">
      <summary>Specifies the type of theme displayed in the Options dialog box.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.ThemeType.Default">
      <summary>The theme settings are provided by the default workflow theme.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.ThemeType.System">
      <summary>The theme settings are provided by the operating system. </summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.ThemeType.UserDefined">
      <summary>The theme settings are provided by user-defined themes.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.TypeBrowserDialog">
      <summary>Represents a dialog box that allows the user to choose a type. This class cannot be inherited. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.TypeBrowserDialog.#ctor(System.IServiceProvider,System.Workflow.ComponentModel.Design.ITypeFilterProvider,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.TypeBrowserDialog" /> class by using an <see cref="T:System.IServiceProvider" />, an <see cref="T:System.Workflow.ComponentModel.Design.ITypeFilterProvider" />, and a string. </summary>
      <param name="serviceProvider">The <see cref="T:System.IServiceProvider" /> from which the dialog obtains services.</param>
      <param name="filterProvider">The <see cref="T:System.Workflow.ComponentModel.Design.ITypeFilterProvider" /> from which to obtain type filtering services.</param>
      <param name="selectedTypeName">The name of the selected type.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.TypeBrowserDialog.#ctor(System.IServiceProvider,System.Workflow.ComponentModel.Design.ITypeFilterProvider,System.String,System.Workflow.ComponentModel.Compiler.TypeProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.TypeBrowserDialog" /> class by using an <see cref="T:System.IServiceProvider" />, an <see cref="T:System.Workflow.ComponentModel.Design.ITypeFilterProvider" />, a string, and a <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" />.</summary>
      <param name="serviceProvider">The <see cref="T:System.IServiceProvider" /> from which to obtain services.</param>
      <param name="filterProvider">The <see cref="T:System.Workflow.ComponentModel.Design.ITypeFilterProvider" /> from which to obtain type filtering services.</param>
      <param name="selectedTypeName">The name of the selected type.</param>
      <param name="typeProvider">The <see cref="T:System.Workflow.ComponentModel.Compiler.TypeProvider" /> that allows access local assemblies to load in the type browser dialog. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.TypeBrowserDialog.SelectedType">
      <summary>Gets the type selected by the user in the type browser dialog box.</summary>
      <returns>The <see cref="T:System.Type" /> selected by the user in the type browser dialog box.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.TypeBrowserDialog.System#ComponentModel#ISite#Component">
      <summary>Gets the component to associate with the type browser dialog box.</summary>
      <returns>The <see cref="T:System.ComponentModel.IComponent" /> to bind to the <see cref="T:System.Workflow.ComponentModel.Design.TypeBrowserDialog" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.TypeBrowserDialog.System#ComponentModel#ISite#Container">
      <summary>Gets the container to associate with the type browser dialog.</summary>
      <returns>The <see cref="T:System.ComponentModel.IContainer" /> to associate with the <see cref="T:System.Workflow.ComponentModel.Design.TypeBrowserDialog" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.TypeBrowserDialog.System#ComponentModel#ISite#DesignMode">
      <summary>Gets a value that indicates whether the type browser dialog is in design mode. </summary>
      <returns>true if <see cref="T:System.Workflow.ComponentModel.Design.TypeBrowserDialog" /> is in design mode; otherwise, false. The default is true.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.TypeBrowserDialog.System#ComponentModel#ISite#Name">
      <summary>Gets or sets name of the component associated with the type browser dialog.</summary>
      <returns>The name of the component associated with the type browser dialog.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.TypeBrowserDialog.System#IServiceProvider#GetService(System.Type)">
      <summary>Retrieves the service object for the specified type.</summary>
      <returns>A service object of type <paramref name="serviceType" />, or a null reference (Nothing in Visual Basic) if there is no service object of type <paramref name="serviceType" />.</returns>
      <param name="serviceType">The <see cref="T:System.Type" /> of service object to retrieve.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.TypeBrowserEditor">
      <summary>Provides a user interface for representing and editing the values the Windows Workflow Foundation types in an object browser associated with a workflow designer.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.TypeBrowserEditor.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.TypeBrowserEditor" /> class. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.TypeBrowserEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>Edits the value of the specified object using the editor style indicated by <see cref="Overload:System.Workflow.ComponentModel.Design.TypeBrowserEditor.GetEditStyle" />.</summary>
      <returns>The new value of the object. </returns>
      <param name="typeDescriptorContext">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="serviceProvider">An <see cref="T:System.IServiceProvider" /> that the editor can use to obtain services.</param>
      <param name="value">The <see cref="T:System.Object" /> to edit.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeDescriptorContext" /> or <paramref name="serviceProvider" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.Exception">
        <see cref="M:System.IServiceProvider.GetService(System.Type)" /> returns a null reference (Nothing) when it attempts to obtain the type provider. </exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.TypeBrowserEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>Returns the editor style used by the <see cref="Overload:System.Workflow.ComponentModel.Design.TypeBrowserEditor.EditValue" /> method.</summary>
      <returns>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> value that indicates the style of editor used by <see cref="Overload:System.Workflow.ComponentModel.Design.TypeBrowserEditor.EditValue" />. Unless overridden by an inheriting class, this method returns <see cref="F:System.Drawing.Design.UITypeEditorEditStyle.Modal" />.</returns>
      <param name="typeDescriptorContext">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.TypeFilterProviderAttribute">
      <summary>Specifies the class a type or member uses to filter the types that are displayed in the class browser dialog box. This class cannot be inherited. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.TypeFilterProviderAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.TypeFilterProviderAttribute" /> class by using the specified type name. </summary>
      <param name="typeName">A string that contains the name of the type that implements <see cref="T:System.Workflow.ComponentModel.Design.ITypeFilterProvider" /> to apply to the class or member.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.TypeFilterProviderAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.TypeFilterProviderAttribute" /> class. </summary>
      <param name="type">A <see cref="T:System.Type" /> that implements <see cref="T:System.Workflow.ComponentModel.Design.ITypeFilterProvider" /> to apply to the class or member.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.TypeFilterProviderAttribute.TypeFilterProviderTypeName">
      <summary>Gets the name of the type that implements <see cref="T:System.Workflow.ComponentModel.Design.ITypeFilterProvider" />.</summary>
      <returns>A string that contains the name of the type that implements  <see cref="T:System.Workflow.ComponentModel.Design.ITypeFilterProvider" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader">
      <summary>Provides common designer loader functionality that can be used to implement custom workflow designer loaders.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.AddActivityToDesigner(System.Workflow.ComponentModel.Activity)">
      <summary>Adds an activity to the designer host after it has been added to the parent activities collection.</summary>
      <param name="activity">
        <see cref="T:System.Workflow.ComponentModel.Activity" /> to add.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.Dispose">
      <summary>Releases all resources used by the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader" />. </summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.FileName">
      <summary>When overridden in a derived class, gets the file name of the designer to load. </summary>
      <returns>A string that contains the file name of the designer to load.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.Flush">
      <summary>Writes pending changes to the location that the designer was loaded from.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.ForceReload">
      <summary>When overridden in a derived class, causes <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader" /> to reload the designer. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.GetFileReader(System.String)">
      <summary>When overridden in a derived class, retrieves an object that <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader" /> uses to read from the specified file. </summary>
      <returns>A <see cref="T:System.IO.TextReader" /> to read the specified file.</returns>
      <param name="filePath">A string that contains a path to the file to read from.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.GetFileWriter(System.String)">
      <summary>When overridden in a derived class, gets an object that the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader" /> uses to write to the specified file. </summary>
      <returns>A <see cref="T:System.IO.TextWriter" /> to write to the file.</returns>
      <param name="filePath">A string that contains the path to the file to write to.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.InDebugMode">
      <summary>Gets a value that indicates whether the workflow should be loaded in debug mode.  </summary>
      <returns>true if the workflow should be loaded in debug mode; otherwise, false. The default is false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.Initialize">
      <summary>Initializes the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader" /> with any services required by the designer loader host.  </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.LoadDesignerLayout(System.Xml.XmlReader,System.Collections.IList@)">
      <summary>Applies the serialized layout to the root designer in the current designer host.</summary>
      <param name="layoutReader">An <see cref="T:System.Xml.XmlReader" /> that is created for the serialized layout.</param>
      <param name="layoutLoadErrors">List of errors that occurred during the deserialization.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.LoadDesignerLayoutFromResource(System.Type,System.String,System.Collections.IList@)">
      <summary>Retrieves the specified resource and calls the <see cref="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.LoadDesignerLayout(System.Xml.XmlReader,System.Collections.IList@)" /> method that applies the serialized layout to the root designer in the current designer host.</summary>
      <param name="type">
        <see cref="T:System.Type" /> that the resource is associated with.</param>
      <param name="manifestResourceName">Name of the resource.</param>
      <param name="errors">Errors encountered during the call to <see cref="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.LoadDesignerLayout(System.Xml.XmlReader,System.Collections.IList@)" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.OnEndLoad(System.Boolean,System.Collections.ICollection)">
      <summary>Called when loading of the designer is completed.</summary>
      <param name="successful">true if load operation is successful; otherwise, false.</param>
      <param name="errors">Contains the load errors.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.PerformFlush(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
      <summary>Writes cached changes to the location that the designer was loaded from.</summary>
      <param name="serializationManager">Class that implements the <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> interface, which manages design-time serialization.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.PerformLoad(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
      <summary>Loads the designer from a design document.</summary>
      <param name="serializationManager">Class that implements the <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> interface, which manages design-time serialization.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.RemoveActivityFromDesigner(System.Workflow.ComponentModel.Activity)">
      <summary>Removes an activity from the designer host after it has been added to the parent activities collection.</summary>
      <param name="activity">Activity to be removed from the designer.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.SaveDesignerLayout(System.Xml.XmlWriter,System.Workflow.ComponentModel.Design.ActivityDesigner,System.Collections.IList@)">
      <summary>Serializes the designer layout.</summary>
      <param name="layoutWriter">XmlWriter that is used to serialize the layout into.</param>
      <param name="rootDesigner">Root activity from which you get the layout information.</param>
      <param name="layoutSaveErrors">Errors encountered during serialization.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowDesignerLoader.TargetFrameworkTypeDescriptionProvider">
      <summary>Gets the <see cref="T:System.ComponentModel.TypeDescriptor" /> metadata of the target .NET Framework.</summary>
      <returns>The <see cref="T:System.ComponentModel.TypeDescriptor" /> metadata of the target .NET Framework.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter">
      <summary>Provides a base class for all workflow message filters.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.#ctor">
      <summary>When implemented in a derived class, initializes an instance of a <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.Dispose">
      <summary>Releases the resources used by the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.Finalize">
      <summary>Attempts to free resources by calling Dispose(false) before the object is reclaimed by garbage collection.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.Initialize(System.Workflow.ComponentModel.Design.WorkflowView)">
      <summary>Initializes the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" /> with the associated <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <param name="parentView">The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> to associate with the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" />.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.MessageHitTestContext">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> that describes the context of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" />.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.HitTestInfo" /> object that contains information about the context of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnDragDrop(System.Windows.Forms.DragEventArgs)">
      <summary>Occurs when the mouse button is released above an object during a drag operation. </summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnDragEnter(System.Windows.Forms.DragEventArgs)">
      <summary>Occurs when the mouse pointer enters the bounds of an object during a drag operation.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnDragLeave">
      <summary>Occurs when the mouse pointer leaves the bounds of an object during a drag operation.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnDragOver(System.Windows.Forms.DragEventArgs)">
      <summary>Occurs when the mouse pointer moves within the bounds of an object during a drag operation.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>Occurs during a drag operation.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>Occurs when a key is pressed.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
      <summary>Occurs when a key is released.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnLayout(System.Windows.Forms.LayoutEventArgs)">
      <summary>Occurs when child objects should be repositioned.</summary>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.LayoutEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnMouseCaptureChanged">
      <summary>Occurs when the items selected by dragging the mouse changes.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when you double-click the mouse.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when a mouse button is clicked.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnMouseEnter(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse pointer enters the bounds of an object.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnMouseHover(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse pointer pauses above an object.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnMouseLeave">
      <summary>Occurs when the mouse pointer leaves the bounds of an object.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse pointer moves while within the bounds of an object.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse button is released.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse wheel moves.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnPaint(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,System.Workflow.ComponentModel.Design.AmbientTheme)">
      <summary>Occurs when a paint message is received.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains information about the event.</param>
      <param name="viewPort">A <see cref="T:System.Drawing.Rectangle" /> that describes the area to be painted.</param>
      <param name="ambientTheme">A <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> used to obtain information about the theme.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnPaintWorkflowAdornments(System.Windows.Forms.PaintEventArgs,System.Drawing.Rectangle,System.Workflow.ComponentModel.Design.AmbientTheme)">
      <summary>Occurs when the workflow should repaint its adornments.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A PaintEventArgs that contains information about the event.</param>
      <param name="viewPort">A Rectangle that describes the area to be painted.</param>
      <param name="ambientTheme">An AmbientTheme used to obtain information about the theme.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
      <summary>Occurs during a drag operation.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="eventArgs">A <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnScroll(System.Windows.Forms.ScrollBar,System.Int32)">
      <summary>Occurs when a user scrolls in a workflow designer.</summary>
      <returns>true if the message is handled; otherwise, false. </returns>
      <param name="sender">The <see cref="T:System.Windows.Forms.ScrollBar" /> that the user scrolled.</param>
      <param name="value">The position of the scroll bar.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnShowContextMenu(System.Drawing.Point)">
      <summary>Occurs when the workflow should show a context menu.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="screenMenuPoint">The point at which to the context menu is shown.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.OnThemeChange">
      <summary>Occurs when the theme of the workflow changes.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.ParentView">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> that is associated with the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter.ProcessMessage(System.Windows.Forms.Message)">
      <summary>Occurs when a raw Win32 message must be processed.</summary>
      <returns>true if the message is handled; otherwise, false.</returns>
      <param name="message">The Message to handle.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.WorkflowMenuCommands">
      <summary>Defines a set of <see cref="T:System.ComponentModel.Design.CommandID" /> fields that each corresponds to a command function provided by the workflow designers. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowMenuCommands" /> class.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.BreakpointActionMenu">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the breakpoint action menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.BreakpointConditionMenu">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the breakpoint condition menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.BreakpointConstraintsMenu">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the breakpoint constraints menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.BreakpointHitCountMenu">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the breakpoint hit count menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.BreakpointLocationMenu">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the breakpoint location menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ChangeTheme">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.CommandID" /> for the change theme menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ClearBreakpointsMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the clear breakpoints menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Collapse">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the collapse menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.CopyToClipboard">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the copy menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.CreateTheme">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the create theme menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.DebugCommandSetId">
      <summary>Provides a unique identifier for the debug command set. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.DebugStepBranchMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the debug step branch menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.DebugStepInstanceMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the debug step instance menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.DebugWorkflowGroupId">
      <summary>Provides a unique identifier for the debug workflow group of menus. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.DefaultFilter">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the default filter menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.DefaultPage">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the default page menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.DesignerActionsMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the designer actions menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.DesignerProperties">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the designer properties menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Disable">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the disable menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Enable">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the enable menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.EnableBreakpointMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the enable breakpoint menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ExecutionStateMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the execution state menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Expand">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the expand menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.FirstZoomCommand">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom first menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.GotoDisassemblyMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the goto disassembly menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.InsertBreakpointMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the insert breakpoint menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.InsertTracePointMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the insert tracepoint menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.LastZoomCommand">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom last menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.MenuGuid">
      <summary>Provides a unique identifier for the menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.NewDataBreakpointMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the new data breakpoint menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.NewFileTracePointMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the new file tracepoint menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.PageDown">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the PageDown menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.PageLayoutMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the page layout menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.PageSetup">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the page setup menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.PageUp">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the PageUp menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Pan">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the pan menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.PanMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the pan menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Print">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the print menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.PrintPreview">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the print preview menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.PrintPreviewPage">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the print preview page menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.RunToCursorMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the run to cursor menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.SaveAsImage">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the save as image menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.SelectionMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the selection menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.SetNextStatementMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the set next statement menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ShowAll">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the show all menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ShowNextStatementMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the show next statement menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ToggleBreakpointMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the toggle breakpoint menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.VerbGroupActions">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the verb group actions menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.VerbGroupDesignerActions">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the verb group designer actions menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.VerbGroupEdit">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the edit verb group menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.VerbGroupGeneral">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the general verb group menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.VerbGroupMisc">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the miscellaneous verb group menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.VerbGroupOptions">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the options verb group menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.VerbGroupView">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the view verb group menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.WorkflowCommandSetId">
      <summary>Provides a unique identifier for the workflow command set. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.WorkflowToolBar">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the workflow toolbar menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Zoom100Mode">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom 100% menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Zoom150Mode">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom 150% menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Zoom200Mode">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom 200% menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Zoom300Mode">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom 300% menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Zoom400Mode">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom 400% menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Zoom50Mode">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom 50% menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.Zoom75Mode">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom 75% menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ZoomIn">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom in menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ZoomLevelCombo">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom level combo menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ZoomLevelListHandler">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom level list handler menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ZoomMenu">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom menu. This field is read-only.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Design.WorkflowMenuCommands.ZoomOut">
      <summary>A <see cref="T:System.ComponentModel.Design.CommandID" /> that can be used to access the zoom out menu. This field is read-only.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.WorkflowOutline">
      <summary>Renders the document outline for the workflow currently being designed in the workflow designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutline" /> class by using an object that retrieves a service object. </summary>
      <param name="serviceProvider">The <see cref="T:System.IServiceProvider" /> that retrieves a service object for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutline" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">The hosting environment obtained through <paramref name="serviceProvider" /> is null (Nothing).- or -The design surface obtained through <paramref name="serviceProvider" /> is null (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.CreateNewNode(System.Workflow.ComponentModel.Activity)">
      <summary>Creates a new node for an <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutlineNode" /> for the activity.</returns>
      <param name="activity">Activity for which a new node must be created.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutline" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources. </param>
    </member>
    <member name="E:System.Workflow.ComponentModel.Design.WorkflowOutline.Expanding">
      <summary>Event raised when the TreeView for the document outline is expanding.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.GetNode(System.Workflow.ComponentModel.Activity)">
      <summary>Retrieves the node in the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutline" /> associated with the specified <see cref="T:System.Workflow.ComponentModel.Activity" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutlineNode" /> that is associated with <paramref name="activity" />.</returns>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with the node to retrieve.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.GetService(System.Type)">
      <summary>Returns an object that represents a service provided by the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutline" /> or by its <see cref="T:System.ComponentModel.Container" />.</summary>
      <returns>An <see cref="T:System.Object" /> that represents a service provided by <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutline" />.</returns>
      <param name="serviceType">The <see cref="T:System.Type" /> that represents the service provided by the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutline" />.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowOutline.NeedsExpandAll">
      <summary>Gets or sets a value that indicates whether the document outline TreeView needs to be expanded.</summary>
      <returns>true if the document outline TreeView needs to be expanded; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.OnBeginUpdate">
      <summary>Called when the control is starting to update the <see cref="P:System.Workflow.ComponentModel.Design.WorkflowOutline.TreeView" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.OnEndUpdate">
      <summary>Called when the control is finished updating the <see cref="P:System.Workflow.ComponentModel.Design.WorkflowOutline.TreeView" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.OnLoad(System.EventArgs)">
      <summary>Raises the <see cref="E:System.Windows.Forms.Form.Load" /> event.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains the event data.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.OnNodeAdded(System.Workflow.ComponentModel.Design.WorkflowOutlineNode)">
      <summary>Called after a new node that is not null is added to the activity tree.</summary>
      <param name="node">Node that was added to the activity tree.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.OnNodeSelected(System.Workflow.ComponentModel.Design.WorkflowOutlineNode)">
      <summary>Called when the user selects a node in the activity tree.</summary>
      <param name="node">Node that was selected.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.OnRefreshNode(System.Workflow.ComponentModel.Design.WorkflowOutlineNode)">
      <summary>Called when the node is refreshed.</summary>
      <param name="node">Workflow outline node that was refreshed.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.RefreshNode(System.Workflow.ComponentModel.Design.WorkflowOutlineNode,System.Boolean)">
      <summary>Forces a node to be refreshed.</summary>
      <param name="nodeToUpdate">Node that must be updated.</param>
      <param name="refreshChildNodes">Boolean value that indicates whether child nodes must be updated.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.RefreshWorkflowOutline">
      <summary>Refreshes color and icons of all document outline nodes.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutline.ReloadWorkflowOutline">
      <summary>Reloads the document outline control.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowOutline.RootNode">
      <summary>Gets the root node of the root provider.</summary>
      <returns>A <see cref="T:System.Windows.Forms.TreeNode" /> that is the root node.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowOutline.TreeView">
      <summary>Retrieves the <see cref="T:System.Windows.Forms.TreeView" /> control used to display the document outline</summary>
      <returns>The <see cref="T:System.Windows.Forms.TreeView" /> control used to display the document outline.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.WorkflowOutlineNode">
      <summary>Represents a node in a workflow outline document displayed in the workflow designer.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutlineNode.#ctor(System.Workflow.ComponentModel.Activity)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutlineNode" /> class by using an activity.</summary>
      <param name="activity">The <see cref="T:System.Workflow.ComponentModel.Activity" /> to associate with the node.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="activity" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowOutlineNode.Activity">
      <summary>Gets the activity associated with the node.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Activity" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutlineNode" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutlineNode.OnActivityRename(System.String)">
      <summary>Changes the text displayed in the label of the workflow outline node to the specified name. </summary>
      <param name="newName">A string that contains the name to display in the label of the workflow outline node.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowOutlineNode.RefreshNode">
      <summary>Updates property settings on the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowOutlineNode" />.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.WorkflowPageSetupDialog">
      <summary>Represents the page setup dialog for the workflow designer when a user selects the Page Setup… command. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowPageSetupDialog.#ctor(System.IServiceProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowPageSetupDialog" /> class. </summary>
      <param name="serviceProvider">The <see cref="T:System.IServiceProvider" /> from which the dialog obtains services.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.WorkflowTheme">
      <summary>Provides the look and feel property settings to a workflow in design-time environment.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.#ctor">
      <summary>Initializes a new instance of a <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" />.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.AmbientTheme">
      <summary>Gets the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" />.</summary>
      <returns>An <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" /> that describes default values for the look and feel of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.Clone">
      <summary>Creates a duplicate theme.</summary>
      <returns>An object that represents the newly-cloned theme.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.ContainingFileDirectory">
      <summary>Gets the directory part of the <see cref="P:System.Workflow.ComponentModel.Design.WorkflowTheme.FilePath" />.</summary>
      <returns>The directory part of the <see cref="P:System.Workflow.ComponentModel.Design.WorkflowTheme.FilePath" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.CreateStandardTheme(System.Workflow.ComponentModel.Design.ThemeType)">
      <summary>Creates a standard theme.</summary>
      <returns>A new <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" />.</returns>
      <param name="standardThemeType">The <see cref="T:System.Workflow.ComponentModel.Design.ThemeType" /> of the standard theme to create.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.CurrentTheme">
      <summary>Gets or sets the current theme.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> that is used for display settings.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.Description">
      <summary>Gets or sets the description of the theme.</summary>
      <returns>The description of the theme.</returns>
      <exception cref="T:System.InvalidOperationException">The property value cannot be set because the workflow theme is read-only.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.DesignerThemes">
      <summary>Gets a list of designer themes associated with the workflow.</summary>
      <returns>A list of designer themes associated with the workflow.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.EnableChangeNotification">
      <summary>Sets or gets the state of change notification.</summary>
      <returns>true to enable change notification; otherwise, false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.FilePath">
      <summary>Gets or sets the file path for the theme.</summary>
      <returns>The file path to the theme.</returns>
      <exception cref="T:System.InvalidOperationException">The property value cannot be set because the workflow theme is read-only.</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.GenerateThemeFilePath">
      <summary>Generates a file path for the theme.</summary>
      <returns>A new, unique file path for the theme.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.GetDesignerTheme(System.Workflow.ComponentModel.Design.ActivityDesigner)">
      <summary>Gets the theme for the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesignerTheme" /> associated with the specified <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" />.</returns>
      <param name="designer">The activity designer from which to retrieve the theme.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.Load(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.String)">
      <summary>Loads a new theme from the specified path using a serialization manager.</summary>
      <returns>A new <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> loaded from the file path specified using the serialization manager specified.</returns>
      <param name="serializationManager">The serialization manager to use to load the theme.</param>
      <param name="themeFilePath">The file path from which to load the theme.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.Load(System.String)">
      <summary>Loads the theme from the specified file path.</summary>
      <returns>A new <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> loaded from the filename specified.</returns>
      <param name="themeFilePath">The file path to the theme.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.LoadThemeSettingFromRegistry">
      <summary>Loads a theme from the registry.</summary>
      <returns>A <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" /> loaded from the registry.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.LookupPath">
      <summary>Gets the file path from the registry.</summary>
      <returns>The file path from the registry to the theme.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.Name">
      <summary>Gets or sets the name of the theme.</summary>
      <returns>The name of the theme.</returns>
      <exception cref="T:System.InvalidOperationException">The property value cannot be set because the workflow theme is read-only.</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.ReadOnly">
      <summary>Gets or sets a value that indicates whether the workflow theme is read-only. </summary>
      <returns>true if the workflow theme is read-only; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.RegistryKeyPath">
      <summary>Gets the registry key path for the theme.</summary>
      <returns>The registry key for the theme.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.Save(System.String)">
      <summary>Saves a theme to a file.</summary>
      <param name="themeFilePath">The file in which to save the WorkflowTheme.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.SaveThemeSettingToRegistry">
      <summary>Saves a theme to the registry.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.StandardThemes">
      <summary>Gets the list of standard themes.</summary>
      <returns>A list of available themes.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowTheme.System#IDisposable#Dispose">
      <summary>Releases the managed resources used by the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowTheme" />.</summary>
    </member>
    <member name="E:System.Workflow.ComponentModel.Design.WorkflowTheme.ThemeChanged">
      <summary>Occurs when a theme changes.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.Type">
      <summary>Gets the type of the theme.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ThemeType" /> of the theme. Possible values are Default, System, and UserDefined.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowTheme.Version">
      <summary>Gets or sets the version of the theme.</summary>
      <returns>The version information for the theme.</returns>
      <exception cref="T:System.InvalidOperationException">The property value cannot be set because the workflow theme is read-only.</exception>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.WorkflowView">
      <summary>Provides a design surface, which renders a visual representation of process flow.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.#ctor">
      <summary>Initializes an instance of a <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.#ctor(System.IServiceProvider)">
      <summary>Initializes an instance of a <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> with the specified service provider.</summary>
      <param name="serviceProvider">An object that implements the <see cref="T:System.IServiceProvider" /> interface.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.AddDesignerMessageFilter(System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter)">
      <summary>Adds a <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" /> to the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <param name="designerMessageFilter">The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" /> to add to the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.ClientPointToLogical(System.Drawing.Point)">
      <summary>Converts a <see cref="T:System.Drawing.Point" /> from client coordinates to logical coordinates.</summary>
      <returns>The <see cref="T:System.Drawing.Point" /> converted from client coordinates to logical coordinates.</returns>
      <param name="clientPoint">The <see cref="T:System.Drawing.Point" /> to convert from client coordinates to logical coordinates.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.ClientRectangleToLogical(System.Drawing.Rectangle)">
      <summary>Converts a <see cref="T:System.Drawing.Rectangle" /> from client coordinates to logical coordinates.</summary>
      <returns>The <see cref="T:System.Drawing.Rectangle" /> converted from client coordinates to logical coordinates.</returns>
      <param name="rectangle">The <see cref="T:System.Drawing.Rectangle" /> to convert from client to logical coordinates.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.ClientSizeToLogical(System.Drawing.Size)">
      <summary>Converts a <see cref="T:System.Drawing.Size" /> from client to logical coordinates.</summary>
      <returns>The <see cref="T:System.Drawing.Size" /> converted from client coordinates to logical coordinates.</returns>
      <param name="clientSize">The <see cref="T:System.Drawing.Size" /> to convert from client to logical coordinates.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.CreateAccessibilityInstance">
      <summary>Creates a new <see cref="T:System.Windows.Forms.AccessibleObject" /> for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>A new <see cref="T:System.Windows.Forms.AccessibleObject" /> for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> and optionally releases the managed resources.</summary>
      <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.EnableFitToScreen">
      <summary>Enables the button on the design surface that, when clicked, changes the zoom level of the workflow design surface so that the entire workflow is displayed in the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>true if the dynamic button is enabled; otherwise, false. </returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.EnsureVisible(System.Object)">
      <summary>Ensures that the <see cref="T:System.Object" /> passed is visible, expanding parent objects and scrolling the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> as necessary.</summary>
      <param name="selectableObject">The object to make visible.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="selectableObject" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.FitToScreenSize">
      <summary>Changes the zoom level of the workflow design surface so that the entire workflow is displayed in the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.FitToWorkflowSize">
      <summary>Changes the zoom level to one hundred percent to display the full size of the workflow in the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.GetService(System.Type)">
      <summary>Gets the service object of the specified type, if it is available.</summary>
      <returns>If the <paramref name="serviceType" /> is typeof(<see cref="T:System.ComponentModel.Design.CommandID" />) then GetService returns a specific <see cref="T:System.ComponentModel.Design.CommandID" />; otherwise, GetService returns a <see cref="T:System.Object" /> implementing the requested service, or a null reference (Nothing in Visual Basic) if the service cannot be resolved.</returns>
      <param name="serviceType">The <see cref="T:System.Type" /> of the service to retrieve.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.HScrollBar">
      <summary>Gets the horizontal scrollbar for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>A <see cref="T:System.Windows.Forms.ScrollBar" /> you can use to adjust the settings and visibility of the horizontal scrollbar.</returns>
    </member>
    <member name="E:System.Workflow.ComponentModel.Design.WorkflowView.Idle">
      <summary>Occurs when the WorkflowView finishes processing and is about to enter the idle state.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.InvalidateClientRectangle(System.Drawing.Rectangle)">
      <summary>Invalidates the specified <see cref="T:System.Drawing.Rectangle" /> and causes it to be repainted.</summary>
      <param name="clientRectangle">The <see cref="T:System.Drawing.Rectangle" />, in client coordinates, to invalidate and cause to be repainted.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.InvalidateLogicalRectangle(System.Drawing.Rectangle)">
      <summary>Invalidates the specified <see cref="T:System.Drawing.Rectangle" /> and causes it to be repainted.</summary>
      <param name="logicalRectangle">The <see cref="T:System.Drawing.Rectangle" />, in logical coordinates, to invalidate and cause to be repainted.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.LoadViewState(System.IO.Stream)">
      <summary>Restores view-state information from a binary stream.</summary>
      <param name="viewState">A <see cref="T:System.IO.BinaryReader" /> used to restore the view state.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.LogicalPointToClient(System.Drawing.Point)">
      <summary>Converts a <see cref="T:System.Drawing.Point" /> from logical to client coordinates.</summary>
      <returns>The <see cref="T:System.Drawing.Point" /> converted from logical to client coordinates.</returns>
      <param name="logicalPoint">The <see cref="T:System.Drawing.Point" /> to convert to client coordinates.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.LogicalPointToScreen(System.Drawing.Point)">
      <summary>Converts a <see cref="T:System.Drawing.Point" /> from logical to screen coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.Point" /> converted from logical to screen coordinates.</returns>
      <param name="logicalPoint">The <see cref="T:System.Drawing.Point" /> to convert to screen coordinates.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.LogicalRectangleToClient(System.Drawing.Rectangle)">
      <summary>Converts a <see cref="T:System.Drawing.Rectangle" /> from logical to client coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> converted from logical to client coordinates.</returns>
      <param name="rectangle">The <see cref="T:System.Drawing.Rectangle" /> to convert to client coordinates.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.LogicalSizeToClient(System.Drawing.Size)">
      <summary>Converts a <see cref="T:System.Drawing.Size" /> from logical to client coordinates.</summary>
      <returns>A <see cref="T:System.Drawing.Size" /> converted from logical to client coordinates.</returns>
      <param name="logicalSize">The <see cref="T:System.Drawing.Size" /> to convert to client coordinates.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnControlAdded(System.Windows.Forms.ControlEventArgs)">
      <summary>Occurs when a control is added to the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.ControlEventArgs" /> that contains the event data.</param>
      <exception cref="T:System.InvalidOperationException">If the control added is not a <see cref="P:System.Workflow.ComponentModel.Design.WorkflowView.HScrollBar" /> or <see cref="P:System.Workflow.ComponentModel.Design.WorkflowView.VScrollBar" /></exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnDragDrop(System.Windows.Forms.DragEventArgs)">
      <summary>Occurs when a dragged item is dropped onto the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <param name="dragEventArgs">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnDragEnter(System.Windows.Forms.DragEventArgs)">
      <summary>Occurs when an item is dragged into the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> bounds.</summary>
      <param name="dragEventArgs">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnDragLeave(System.EventArgs)">
      <summary>Occurs when the cursor leaves the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> during a drag operation.</summary>
      <param name="e">A <see cref="T:System.EventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnDragOver(System.Windows.Forms.DragEventArgs)">
      <summary>Occurs when a drag-drop operation is in progress and the pointer is within the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> bounds.</summary>
      <param name="dragEventArgs">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)">
      <summary>Occurs during a drag operation.</summary>
      <param name="gfbevent">A <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
      <summary>Occurs when a key is pressed while the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> has focus.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnKeyUp(System.Windows.Forms.KeyEventArgs)">
      <summary>Occurs when a key is released while the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> has focus.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that provides data about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnLayout(System.Windows.Forms.LayoutEventArgs)">
      <summary>Occurs when the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> should reposition child controls.</summary>
      <param name="levent">A <see cref="T:System.Windows.Forms.LayoutEventArgs" /> that provides data for the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseCaptureChanged(System.EventArgs)">
      <summary>Occurs when the items selected by dragging the mouse changes.</summary>
      <param name="e">A <see cref="T:System.EventArgs" /> that provides data about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> is double-clicked.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse pointer is over the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> and a mouse button is pressed.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseEnter(System.EventArgs)">
      <summary>Occurs when the mouse pointer enters the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <param name="e">An <see cref="T:System.EventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseHover(System.EventArgs)">
      <summary>Occurs when the mouse hovers over the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <param name="e">A <see cref="T:System.EventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseLeave(System.EventArgs)">
      <summary>Occurs when the mouse pointer leaves the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <param name="e">A <see cref="T:System.EventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse moves over the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when a mouse button is released over the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnMouseWheel(System.Windows.Forms.MouseEventArgs)">
      <summary>Occurs when the mouse wheel moves when the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> has focus.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnPaint(System.Windows.Forms.PaintEventArgs)">
      <summary>Occurs when the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> is redrawn.</summary>
      <param name="e">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)">
      <summary>Occurs during a drag operation and allows the drag source to determine whether the drag option should be canceled.</summary>
      <param name="qcdevent">A <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" /> that contains information about the event.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnRootDesignerChanged">
      <summary>Called when a different designer is set as the new root designer of the design surface.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.OnZoomChanged">
      <summary>Called when the zoom level is changed.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.PerformLayout(System.Boolean)">
      <summary>Forces the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> to apply layout logic to all its child controls.</summary>
      <param name="immediateUpdate">true to cause the layout to update immediately; otherwise, false.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.PrintDocument">
      <summary>Gets the <see cref="T:System.Drawing.Printing.PrintDocument" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>A <see cref="P:System.Workflow.ComponentModel.Design.WorkflowView.PrintDocument" /> object that sends output to a printer.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.PrintPreviewMode">
      <summary>Gets or sets the print preview mode of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>true if print preview mode is active; otherwise, false.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.RemoveDesignerMessageFilter(System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter)">
      <summary>Removes an associated <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" />.</summary>
      <param name="designerMessageFilter">The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowDesignerMessageFilter" /> to remove from the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.RootDesigner">
      <summary>Gets or sets the root designer for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>The <see cref="T:System.Workflow.ComponentModel.Design.ActivityDesigner" /> associated with the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</returns>
    </member>
    <member name="E:System.Workflow.ComponentModel.Design.WorkflowView.RootDesignerChanged">
      <summary>Raised when the root designer is changed.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.SaveViewState(System.IO.Stream)">
      <summary>Saves the view-state to a binary stream. </summary>
      <param name="viewState">A <see cref="T:System.IO.BinaryReader" /> used to store the view state.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.SaveWorkflowImage(System.IO.Stream,System.Drawing.Imaging.ImageFormat)">
      <summary>Saves an image of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> to the specified stream using the specified image format. </summary>
      <param name="stream">The <see cref="T:System.IO.Stream" /> to save the workflow view image to.</param>
      <param name="imageFormat">The <see cref="T:System.Drawing.Imaging.ImageFormat" /> to use to save the workflow view image.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="imageFormat" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.SaveWorkflowImage(System.String,System.Drawing.Imaging.ImageFormat)">
      <summary>Saves an image of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> to the specified file using the specified image format. </summary>
      <param name="imageFile">The path to the file in which to store the workflow view image.</param>
      <param name="imageFormat">The <see cref="T:System.Drawing.Imaging.ImageFormat" /> to use to save the workflow view image.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="imageFile" /> or <paramref name="imageFormat" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.SaveWorkflowImageToClipboard">
      <summary>Saves an image of the WorkflowView to the clipboard.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.ScreenPointToLogical(System.Drawing.Point)">
      <summary>Converts a <see cref="T:System.Drawing.Point" /> from screen coordinates to logical coordinates.</summary>
      <returns>The <see cref="T:System.Drawing.Point" /> converted from screen coordinates to logical coordinates.</returns>
      <param name="screenPoint">The <see cref="T:System.Drawing.Point" /> to convert from screen coordinates to logical coordinates.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.ScrollPosition">
      <summary>Gets or sets the position of the scrollbar on the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>A point describing the location of the scrollbar in screen coordinates.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.ShadowDepth">
      <summary>Gets or sets the <see cref="P:System.Workflow.ComponentModel.Design.WorkflowView.ShadowDepth" /> for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>The shadow depth in pixels.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.ShowInfoTip(System.String)">
      <summary>Shows the InfoTip for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> with the specified text.</summary>
      <param name="text">The text to display on the InfoTip.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="infoTipText" /> is a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.ShowInfoTip(System.String,System.String)">
      <summary>Shows the InfoTip for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> with the specified title and text.</summary>
      <param name="title">The title of the InfoTip to display.</param>
      <param name="text">The text of the InfoTip to display.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="title" /> is a null reference (Nothing in Visual Basic).-or-<paramref name="infoTipText" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.ShowInPlaceToolTip(System.String,System.Drawing.Rectangle)">
      <summary>Shows a ToolTip at the specified location.</summary>
      <param name="toolTipText">The text to display.</param>
      <param name="toolTipRectangle">The <see cref="T:System.Drawing.Rectangle" /> specifying the location on the screen to place the ToolTip.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.System#IServiceProvider#GetService(System.Type)">
      <summary>Gets the service of the specified type, if it is available.</summary>
      <returns>An <see cref="T:System.Object" /> implementing the requested service, or a null reference (Nothing in Visual Basic) if the service cannot be resolved.</returns>
      <param name="serviceType">The <paramref name="Type" /> of the service to retrieve.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.System#Windows#Forms#IMessageFilter#PreFilterMessage(System.Windows.Forms.Message@)">
      <summary>Filters out a message before it is dispatched.</summary>
      <returns>true to filter the message and stop it from being dispatched; false to allow the message to continue to the next filter or control.</returns>
      <param name="m">The message to be dispatched. You cannot modify this message.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.ViewPortRectangle">
      <summary>Gets the current <see cref="P:System.Workflow.ComponentModel.Design.WorkflowView.ViewPortRectangle" /> for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that describes the area on the screen that is visible.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.ViewPortSize">
      <summary>Gets the size of the visible area for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>A Size that describes the visible area of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.VScrollBar">
      <summary>Gets the vertical scrollbar associated with the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>A <see cref="T:System.Windows.Forms.ScrollBar" /> you can use to adjust the settings and visibility of the horizontal scrollbar.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowView.WndProc(System.Windows.Forms.Message@)">
      <summary>Processes Windows messages.</summary>
      <param name="m">The Windows Message to process.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowView.Zoom">
      <summary>Gets or sets the zoom level of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <returns>The zoom level of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</returns>
      <exception cref="T:System.NotSupportedException">If the zoom level is less than the minimum zoom level of the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" />-or-if the zoom level exceeds the maximum zoom level of the <see cref="T:System.Workflow.ComponentModel.Design.AmbientTheme" />.</exception>
    </member>
    <member name="E:System.Workflow.ComponentModel.Design.WorkflowView.ZoomChanged">
      <summary>Occurs when the zoom setting for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> changes.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject">
      <summary>Implements an accessibility object that <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> classes use to adjust the designer user interface for users with disabilities.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject.#ctor(System.Workflow.ComponentModel.Design.WorkflowView)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject" /> class by using the specified <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" />.</summary>
      <param name="workflowView">The <see cref="T:System.Workflow.ComponentModel.Design.WorkflowView" /> to associate with the accessible object.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject.Bounds">
      <summary>Gets the location and size of the accessible object.</summary>
      <returns>A <see cref="T:System.Drawing.Rectangle" /> that represents the bounds of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject.DefaultAction">
      <summary>Gets a string that describes the default action of the accessible object. Not all objects have a default action.</summary>
      <returns>A string that contains a description of the default action for the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject" />, or a null reference (Nothing in Visual Basic) if the accessible object has no default action.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject.Description">
      <summary>Gets a string that describes the visual appearance of the specified accessible object. Not all accessible objects have a description.</summary>
      <returns>A description of the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject" /> visual appearance to the user, or a null reference (Nothing in Visual Basic) if the object does not have a description.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject.GetChild(System.Int32)">
      <summary>Returns the accessible child object associated with the specified index.</summary>
      <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents the accessible child object corresponding to the specified index.</returns>
      <param name="index">The zero-based index of the accessible child object to retrieve.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject.GetChildCount">
      <summary>Retrieves the number of children that belong to the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject" />.</summary>
      <returns>An integer that represents the number of child objects that belong to the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject" />.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject.Help">
      <summary>Gets a description of what the accessible object does or how the accessible object is used.</summary>
      <returns>A string that contains the description of what the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject" /> does or how it is used or a null reference (Nothing in Visual Basic) if no help is defined.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject.Name">
      <summary>Gets or sets the accessible object name.</summary>
      <returns>A string that contains the <see cref="T:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject" /> name, or a null reference (Nothing in Visual Basic) if the property has not been set.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject.Navigate(System.Windows.Forms.AccessibleNavigation)">
      <summary>Navigates to another accessible object.</summary>
      <returns>An <see cref="T:System.Windows.Forms.AccessibleObject" /> that represents one of the <see cref="T:System.Windows.Forms.AccessibleNavigation" /> values.</returns>
      <param name="navdir">One of the <see cref="T:System.Windows.Forms.AccessibleNavigation" /> values.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Design.WorkflowViewAccessibleObject.Role">
      <summary>Gets the role of the accessible object.</summary>
      <returns>One of the <see cref="T:System.Windows.Forms.AccessibleRole" /> values. <see cref="F:System.Windows.Forms.AccessibleRole.None" /> is returned if no role has been specified</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager">
      <summary>Manages serialization of activities into designer-generated source code segments before compilation.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.#ctor(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager" /> class. </summary>
      <param name="manager">The <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> to associate with this instance.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>Adds the specified serialization provider to the serialization manager.</summary>
      <param name="provider">The <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" /> to be added.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.Context">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> associated with <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager" />. </summary>
      <returns>The <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> associated with the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>Creates an instance of the specified type and adds it to a collection of named instances.</summary>
      <returns>The newly created object instance.</returns>
      <param name="type">The data <see cref="T:System.Type" /> to create.</param>
      <param name="arguments">An <see cref="T:System.Collections.ICollection" /> of arguments to pass to the constructor for the specified type. </param>
      <param name="name">The name assigned to the resulting object. This name can be used to access the object later through <see cref="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.GetInstance(System.String)" />.If null is passed, the object is created but cannot be accessed by name.</param>
      <param name="addToContainer">true to add the object to the design container; otherwise, false. The object must implement <see cref="T:System.ComponentModel.IComponent" /> for this to have any effect.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.GetInstance(System.String)">
      <summary>Gets an <see cref="T:System.Object" /> of the specified name, or null if that <see cref="T:System.Object" /> does not exist.</summary>
      <returns>An <see cref="T:System.Object" /> of the specified name, or null if that <see cref="T:System.Object" /> does not exist.</returns>
      <param name="name">The name of the <see cref="T:System.Object" /> to obtain.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.GetName(System.Object)">
      <summary>Gets the name of the specified <see cref="T:System.Object" />, or null if the <see cref="T:System.Object" /> has no name.</summary>
      <returns>A <see cref="T:System.String" /> that contains the name of the <see cref="T:System.Object" />.</returns>
      <param name="value">The <see cref="T:System.Object" /> to obtain the name for.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary>Gets a serializer of the requested type for the specified <see cref="T:System.Object" /> type.</summary>
      <returns>A serializer of the requested type for the specified <see cref="T:System.Object" /> type.</returns>
      <param name="objectType">The <see cref="T:System.Type" /> of the <see cref="T:System.Object" /> for which to obtain the serializer.</param>
      <param name="serializerType">The <see cref="T:System.Type" /> of serializer to retrieve.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.GetService(System.Type)">
      <summary>Gets an <see cref="T:System.Object" /> that provides a service of the specified <see cref="T:System.Type" />. </summary>
      <returns>A <see cref="T:System.Object" /> that provides a service of the specified <see cref="T:System.Type" />.</returns>
      <param name="serviceType">The <see cref="T:System.Type" /> of service to be provided. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.GetType(System.String)">
      <summary>Gets a <see cref="T:System.Type" /> of the specified name.</summary>
      <returns>An instance of the <see cref="T:System.Type" />, or a null reference (Nothing in Visual Basic) if the <see cref="T:System.Type" /> cannot be loaded.</returns>
      <param name="typeName">The fully qualified name of the <see cref="T:System.Type" /> to load.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.Properties">
      <summary>Gets a <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that contains a read-only collection of type <see cref="T:System.ComponentModel.PropertyDescriptor" />.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that contains a read-only collection of type <see cref="T:System.ComponentModel.PropertyDescriptor" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>Removes a custom serialization provider from the serialization manager.</summary>
      <param name="provider">The provider to remove. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.ReportError(System.Object)">
      <summary>Reports an error in serialization.</summary>
      <param name="errorInformation">An <see cref="T:System.Object" /> that contains the error to report. </param>
    </member>
    <member name="E:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.ResolveName">
      <summary>Occurs when <see cref="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.GetName(System.Object)" /> cannot locate the specified name in the serialization manager name table.</summary>
    </member>
    <member name="E:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.SerializationComplete">
      <summary>Occurs when serialization is complete.</summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.SerializationManager">
      <summary>Gets the <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> associated with the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager" />.</summary>
      <returns>The <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> associated with the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializationManager.SetName(System.Object,System.String)">
      <summary>Sets the name of the specified existing <see cref="T:System.Object" />.</summary>
      <param name="instance">The <see cref="T:System.Object" /> instance to name.</param>
      <param name="name">A <see cref="T:System.String" /> that contains the name to give the instance.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializer">
      <summary>Represents a class that provides the CodeDOM serialization services to an activity at design time.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializer" /> class. </summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializer.MarkupFileNameProperty">
      <summary>The name of the markup file to write to.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>Serializes the specified object into a CodeDOM object.</summary>
      <returns>A CodeDOM object representing the object that has been serialized.</returns>
      <param name="manager">The serialization manager to use during the serialization process.</param>
      <param name="obj">An <see cref="T:System.Object" /> that derives from <see cref="T:System.Workflow.ComponentModel.Activity" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> or <paramref name="obj" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> cannot be converted to an <see cref="T:System.Workflow.ComponentModel.Activity" />.</exception>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer">
      <summary>Provides extensible Application Markup Language (XAML) serialization services for an <see cref="T:System.Workflow.ComponentModel.Activity" /> at design time.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer.CreateInstance(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Type)">
      <summary>Creates an instance of the specified <see cref="T:System.Type" /> using the specified <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" />.</summary>
      <returns>A reference to the newly created <see cref="T:System.Object" />.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> to use in this instance creation.</param>
      <param name="type">The <see cref="T:System.Type" /> to create.</param>
    </member>
    <member name="F:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer.EndColumnProperty">
      <summary>The index of the last character in the activity definition.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer.EndLineProperty">
      <summary>The index of the last line in the activity definition.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer.OnAfterSerialize(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer" /> that an object has just been serialized.</summary>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> that was serialized.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer.OnBeforeSerialize(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer" /> that an object is about to be serialized. </summary>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> to be serialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" />, <paramref name="obj" />, or <paramref name="writer" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not of type <see cref="T:System.Workflow.ComponentModel.Activity" />.</exception>
    </member>
    <member name="F:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer.StartColumnProperty">
      <summary>The index of the first character in the activity definition.</summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Serialization.ActivityMarkupSerializer.StartLineProperty">
      <summary>The index of the first line in the activity definition.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector">
      <summary>Selects the surrogate that can be used to serialize an <see cref="T:System.Workflow.ComponentModel.Activity" />. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector" /> class. </summary>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector.Default">
      <summary>Gets the default <see cref="T:System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector" />. This property is read-only.</summary>
      <returns>The default <see cref="T:System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector" /> that can be used to serialize an <see cref="T:System.Workflow.ComponentModel.Activity" />.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivitySurrogateSelector.GetSurrogate(System.Type,System.Runtime.Serialization.StreamingContext,System.Runtime.Serialization.ISurrogateSelector@)">
      <summary>Finds the surrogate that represents the specified type, starting with the specified surrogate selector for the specified serialization context.</summary>
      <returns>The appropriate surrogate for the specified type and context.</returns>
      <param name="type">The <see cref="T:System.Type" /> for which to obtain a surrogate.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that serves as the source or destination context for the current serialization.</param>
      <param name="selector">When this method returns, contains an <see cref="T:System.Runtime.Serialization.ISurrogateSelector" /> that holds a reference to the surrogate selector where the appropriate surrogate was found. This parameter is passed uninitialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.ActivityTypeCodeDomSerializer">
      <summary>Serializes an <see cref="T:System.Workflow.ComponentModel.Activity" /> to a new type.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityTypeCodeDomSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityTypeCodeDomSerializer" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityTypeCodeDomSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
      <summary>Deserializes the specified type declaration.</summary>
      <returns>The deserialized <see cref="T:System.Object" />.</returns>
      <param name="manager">The serialization manager to use for deserialization.</param>
      <param name="declaration">The <see cref="T:System.CodeDom.CodeTypeDeclaration" /> to use for deserialization.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityTypeCodeDomSerializer.GetInitializeMethod(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration,System.Object)">
      <summary>Returns the method where the statements used to serialize a member are stored.</summary>
      <returns>The <see cref="T:System.CodeDom.CodeMemberMethod" /> used to emit all of the initialization code for the given member.</returns>
      <param name="manager">The serialization manager to use for serialization.</param>
      <param name="typeDecl">The <see cref="T:System.CodeDom.CodeTypeDeclaration" /> to use for serialization.</param>
      <param name="value">The <see cref="T:System.Object" /> to use for serialization.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" />, <paramref name="typeDecl" />, or <paramref name="value" /> contains a null reference (Nothing in Visual Basic). </exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityTypeCodeDomSerializer.GetInitializeMethods(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.CodeDom.CodeTypeDeclaration)">
      <summary>Returns an array of methods to be interpreted during deserialization.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeMemberMethod" /> array of methods to be interpreted during serialization.</returns>
      <param name="manager">The serialization manager to use for serialization.</param>
      <param name="typeDecl">The <see cref="T:System.CodeDom.CodeTypeDeclaration" /> to use for serialization.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> or <paramref name="typeDecl" /> contains a null reference (Nothing in Visual Basic). </exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ActivityTypeCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Collections.ICollection)">
      <summary>Serializes the specified object by creating a new type declaration that defines that object.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> that defines the specified object.</returns>
      <param name="manager">The serialization manager to use for serialization.</param>
      <param name="root">The <see cref="T:System.Object" /> to serialize.</param>
      <param name="members">An optional collection of members. Can be a null reference (Nothing in Visual Basic) or an empty collection.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> or <paramref name="root" /> contains a null reference (Nothing).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="root" /> cannot be converted to an <see cref="T:System.Workflow.ComponentModel.Activity" />.</exception>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.CompositeActivityMarkupSerializer">
      <summary>Provides extensible Application Markup Language (XAML) serialization services for a <see cref="T:System.Workflow.ComponentModel.CompositeActivity" />.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.CompositeActivityMarkupSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.CompositeActivityMarkupSerializer" /> class. </summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.ConstructorArgumentAttribute">
      <summary>Carries argument name information for the decorated class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ConstructorArgumentAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.ConstructorArgumentAttribute" /> class, initializing the <see cref="P:System.Workflow.ComponentModel.Serialization.ConstructorArgumentAttribute.ArgumentName" /> property.</summary>
      <param name="argumentName">A string that contains the argument name.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.ConstructorArgumentAttribute.ArgumentName">
      <summary>Gets the string representing the argument name.</summary>
      <returns>The string representing the argument name.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.ContentPropertyAttribute">
      <summary>Contains the name for the content property of the decorated class. Marking a type with this attribute causes the data in that type to be serialized without the enclosing property name tags. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ContentPropertyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.ContentPropertyAttribute" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.ContentPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.ContentPropertyAttribute" /> class, initializing the <see cref="P:System.Workflow.ComponentModel.Serialization.ContentPropertyAttribute.Name" /> property.</summary>
      <param name="name">A <see cref="T:System.String" /> that contains the value for the <see cref="P:System.Workflow.ComponentModel.Serialization.ContentPropertyAttribute.Name" /> property.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.ContentPropertyAttribute.Name">
      <summary>Gets the <see cref="T:System.String" /> representing the name of the content property.</summary>
      <returns>The <see cref="T:System.String" /> representing the name of the content property.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.DependencyObjectCodeDomSerializer">
      <summary>Provides <see cref="T:System.Workflow.ComponentModel.DependencyObject" /> objects with CodeDOM serialization services. This is the base class from which other CodeDOM serializers, such as the <see cref="T:System.Workflow.ComponentModel.Serialization.ActivityCodeDomSerializer" />, are inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.DependencyObjectCodeDomSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.DependencyObjectCodeDomSerializer" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.DependencyObjectCodeDomSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
      <summary>Serializes the specified object into a CodeDOM object.</summary>
      <returns>A CodeDOM object that represents the object that has been serialized.</returns>
      <param name="manager">The serialization manager to use during serialization.</param>
      <param name="obj">The <see cref="T:System.Object" /> to serialize.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="manager" /> or <paramref name="obj" /> contains a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj " />cannot be converted to a <see cref="T:System.Workflow.ComponentModel.DependencyObject" />.</exception>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.MarkupExtension">
      <summary>Represents the abstract class for all Markup extensions for types. This class must be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.MarkupExtension.#ctor">
      <summary>When implemented in a derived class, initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.MarkupExtension" /> class. This class must be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.MarkupExtension.ProvideValue(System.IServiceProvider)">
      <summary>When overridden in a derived class, provides the value for the underlying type, by optional use of an <see cref="T:System.IServiceProvider" />.</summary>
      <returns>The <see cref="T:System.Object" /> representing the encapsulated type.</returns>
      <param name="provider">The specified <see cref="T:System.IServiceProvider" />.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.RuntimeNamePropertyAttribute">
      <summary>Carries the run-time name for an <see cref="T:System.Object" /> decorated with this <see cref="T:System.Attribute" />. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.RuntimeNamePropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.RuntimeNamePropertyAttribute" /> class, initializing the <see cref="P:System.Workflow.ComponentModel.Serialization.RuntimeNamePropertyAttribute.Name" /> for this instance.</summary>
      <param name="name">A string that contains the name to associate with this instance.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.RuntimeNamePropertyAttribute.Name">
      <summary>Gets the run-time name carried by this instance.</summary>
      <returns>A string that contains the run-time name carried by this instance.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException">
      <summary>The exception that is thrown by methods that perform serialization and deserialization. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" /> class by using serialized data.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the serialized object data about the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" /> being thrown.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the context information about the source or destination of the bits the serializer was using.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" /> class by using the specified error message.</summary>
      <param name="message">A string that contains message that describes the error.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" /> class by using an error message and an exception.</summary>
      <param name="message">A string that contains message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" />. If <paramref name="innerException" /> is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" /> class by using an error message, an exception, and the line and column numbers that caused the exception to be thrown.</summary>
      <param name="message">A string that contains message that describes the error.</param>
      <param name="innerException">The exception that is the cause of the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" />. If <paramref name="innerException" /> is not a null reference (Nothing in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
      <param name="lineNumber">The line number in the object or XOML file that caused the exception to be thrown.</param>
      <param name="columnNumber">The column position in the object or XOML file that caused the exception to be thrown.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" /> class by using an error message and the line and column numbers that caused the exception to be thrown.</summary>
      <param name="message">A string that contains message that describes the error.</param>
      <param name="lineNumber">The line number in the object or XOML file that caused the exception to be thrown.</param>
      <param name="columnNumber">The column position in the object or XOML file that caused the exception to be thrown.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Sets the specified <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" />.</summary>
      <param name="info">A <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that contains the serialized object data about the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException" /> being thrown.</param>
      <param name="context">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains the context information about the source or destination of the bits the serializer was using.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException.LineNumber">
      <summary>Gets the line number in the object or XOML file that caused the exception to be thrown.</summary>
      <returns>An integer that represents the line number on which the exception was thrown.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationException.LinePosition">
      <summary>Gets the column position in the object or XOML file that caused the exception to be thrown.</summary>
      <returns>An integer that represents the column position that caused the exception to be thrown.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager">
      <summary>Manages design-time serialization to and from extensible Application Markup Language (XAML) for workflows.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.#ctor(System.ComponentModel.Design.Serialization.IDesignerSerializationManager)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> class by using the specified <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" />. </summary>
      <param name="manager">The <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> with which to initialize the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>Adds the specified serialization provider to the serialization manager.</summary>
      <param name="provider">The <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" /> to add.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.Context">
      <summary>Gets a stack-based, user-defined storage area that is useful for communication between serializers.</summary>
      <returns>A <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> that contains information about the current object being serialized.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary>Returns a serializer of the specified type for an object of the specified type.</summary>
      <returns>The requested serializer, or a null reference (Nothing in Visual Basic) if no appropriate serializer can be located.</returns>
      <param name="objectType">The <see cref="T:System.Type" /> for which to retrieve the serializer.</param>
      <param name="serializerType">The <see cref="T:System.Type" /> of the serializer to retrieve.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.GetService(System.Type)">
      <summary>Returns a service object of the specified type.</summary>
      <returns>A service object of type <paramref name="serviceType" />, or a null reference (Nothing in Visual Basic) if there is no service object of type <paramref name="serviceType" />.</returns>
      <param name="serviceType">The <see cref="T:System.Type" /> of service object to return.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.GetType(System.String)">
      <summary>Returns a type of the specified name.</summary>
      <returns>The <see cref="T:System.Type" /> associated with <paramref name="typeName" />. </returns>
      <param name="typeName">The fully-qualified name of the <see cref="T:System.Type" /> to load.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.GetType(System.Xml.XmlQualifiedName)">
      <summary>Returns that type associated with the specified XML qualified name.</summary>
      <returns>The <see cref="T:System.Type" /> associated with <paramref name="xmlQualifiedName" />.</returns>
      <param name="xmlQualifiedName">The <see cref="T:System.Xml.XmlQualifiedName" /> of the type to load.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlQualifiedName" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.GetXmlQualifiedName(System.Type,System.String@)">
      <summary>Returns the XML-qualified name associated with the specified type.</summary>
      <returns>The <see cref="T:System.Xml.XmlQualifiedName" /> associated with <paramref name="type" />.</returns>
      <param name="type">The <see cref="T:System.Type" /> for which to return the XML-qualified name.</param>
      <param name="prefix">When this method returns, contains the XML prefix for the qualified name or an empty string if no prefix is defined. This parameter is passed uninitialized. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.LocalAssembly">
      <summary>Gets or sets the assembly that is associated with the current serializer. </summary>
      <returns>The <see cref="T:System.Reflection.Assembly" /> that is associated with the current serializer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary>Removes a custom serialization provider from the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" />.</summary>
      <param name="provider">The <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider" /> to remove. This provider must be added using <see cref="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" />.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.ReportError(System.Object)">
      <summary>Reports an error in serialization.</summary>
      <param name="errorInformation">The error to report. </param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.SerializationManager">
      <summary>Gets or sets the serialization manager to use with the current serializer.</summary>
      <returns>The <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> to use with the current serializer.</returns>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary>Creates an instance of the specified type and adds it to a collection of named instances. </summary>
      <returns>The newly created object.</returns>
      <param name="type">The <see cref="T:System.Type" /> to create.</param>
      <param name="arguments">An <see cref="T:System.Collections.ICollection" /> that contains the arguments for <paramref name="type" />.</param>
      <param name="name">The name of the object. This name can be used to access the object later using <see cref="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" />. If a null reference (Nothing in Visual Basic) is passed, the object is still created but cannot be accessed by name.</param>
      <param name="addToContainer">true to add the object to the design container; otherwise, false. </param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)">
      <summary>Returns an instance of a created object of the specified name.</summary>
      <returns>An instance of the object with the given name, or a null reference (Nothing in Visual Basic) if no object by that name can be found.</returns>
      <param name="name">The name of the object to retrieve.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)">
      <summary>Returns the name of the specified object.</summary>
      <returns>The name of the object, or a null reference (Nothing in Visual Basic) if the object is unnamed.</returns>
      <param name="value">The <see cref="T:System.Object" /> for which to retrieve the name.</param>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Properties">
      <summary>Gets a collection of properties that can be serialized with available serializers.</summary>
      <returns>A <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> that contains the properties to serialize.</returns>
    </member>
    <member name="E:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#ResolveName">
      <summary>Occurs when <see cref="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" /> cannot locate the specified name in the serialization manager's name table. </summary>
    </member>
    <member name="E:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SerializationComplete">
      <summary>Occurs when serialization is complete.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SetName(System.Object,System.String)">
      <summary>Sets the name of the specified existing object.</summary>
      <param name="instance">The object to name.</param>
      <param name="name">The name to assign to the object.</param>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer">
      <summary>Provides the extensible Application Markup Language (XAML) serialization services to workflows at design time.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer" /> class. </summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.AddChild(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object,System.Object)">
      <summary>Adds a child object to the specified object.</summary>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> to use in this operation.</param>
      <param name="parentObject">The <see cref="T:System.Object" /> to which to add the child object.</param>
      <param name="childObj">The <see cref="T:System.Object" /> to add.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="parentObject" /> or<paramref name=" childObj" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.CanSerializeToString(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Returns a Boolean that indicates whether the specified object can be serialized to a string.</summary>
      <returns>true if the specified object can be serialized to a string; otherwise, false.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> used to serialize this object.</param>
      <param name="value">The specified <see cref="T:System.Object" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.ClearChildren(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Removes all child objects from the specified object.</summary>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> supporting this operation.</param>
      <param name="obj">The <see cref="T:System.Object" /> from which to remove all child objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is a null reference (Nothing).</exception>
    </member>
    <member name="F:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.ClrNamespacesProperty">
      <summary>Represents an attached <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that is used to define which assemblies to reference for custom activities.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.CreateInstance(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Type)">
      <summary>Creates an instance of the specified <see cref="T:System.Type" /> using the specified <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" />.</summary>
      <returns>An instance of the specified <see cref="T:System.Type" />. </returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> supporting this operation.</param>
      <param name="type">The specified <see cref="T:System.Type" /></param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Xml.XmlReader)">
      <summary>Deserializes workflow markup into an <see cref="T:System.Object" /> using the specified serialization manager.</summary>
      <returns>An <see cref="T:System.Object" /> that contains the definition of the workflow defined in the workflow markup file or stream.</returns>
      <param name="serializationManager">An object that implements the <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> interface, such as <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" />.</param>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> that contains the workflow definition.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.Deserialize(System.Xml.XmlReader)">
      <summary>Deserializes workflow markup into an <see cref="T:System.Object" />.</summary>
      <returns>An <see cref="T:System.Object" /> that contains the definition of the workflow defined in the workflow markup file or stream.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> that contains the workflow definition.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.DeserializeFromString(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Type,System.String)">
      <summary>Deserializes extensible Application Markup Language (XAML) content from the specified string according to the given type of the property to deserialize.</summary>
      <returns>The deserialized <see cref="T:System.Object" />.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the deserialization process.</param>
      <param name="propertyType">The <see cref="T:System.Type" /> associated with the property to deserialize. </param>
      <param name="value">A string that contains the XAML to deserialize. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" />, <paramref name="propertyType" />, or <paramref name="value" />, contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="F:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.EventsProperty">
      <summary>Represents an attached <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that defines the names for event handler properties.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.GetChildren(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Retrieves a list of child objects for the specified object</summary>
      <returns>An <see cref="T:System.Collections.IList" /> that contains the child objects of <paramref name="obj" />.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> which supports this operation.</param>
      <param name="obj">The <see cref="T:System.Object" /> from which to retrieve child objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> or <paramref name="serializationManager" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.GetEvents(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Retrieves information about all events associated with the specified <see cref="T:System.Object" />.</summary>
      <returns>An <see cref="T:System.Reflection.EventInfo" /> array that contains information about the events associated with <paramref name="obj" />.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the deserialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> to search for event objects.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> or <paramref name="obj" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.GetProperties(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Retrieves information about all properties associated with the specified object.</summary>
      <returns>A <see cref="T:System.Reflection.PropertyInfo" /> array that contains information about the properties associated with <paramref name="obj" />.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> to search for properties. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> or <paramref name="obj" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.OnAfterDeserialize(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Overridden. Notifies the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer" /> that an object has just been deserialized.</summary>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> that was deserialized.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.OnAfterSerialize(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer" /> that an object has just been serialized.</summary>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> that was serialized.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.OnBeforeDeserialize(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Overridden. Notifies the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer" /> that an object is about to be deserialized.</summary>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that managed the deserialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> that was deserialized.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.OnBeforeSerialize(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Notifies the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer" /> that <see cref="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.Serialize(System.Xml.XmlWriter,System.Object)" /> is about to run.</summary>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="obj">The <see cref="T:System.Object" /> to be serialized.</param>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Xml.XmlWriter,System.Object)">
      <summary>Serializes the specified <see cref="T:System.Object" /> into a workflow markup file or stream using the specified serialization manager.</summary>
      <param name="serializationManager">An object that implements the <see cref="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager" /> interface, such as <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializationManager" />.</param>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> that contains the stream or file used in serializing.</param>
      <param name="obj">The object to be serialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is a null reference (Nothing).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.Serialize(System.Xml.XmlWriter,System.Object)">
      <summary>Serializes the specified <see cref="T:System.Object" /> into a workflow markup file or stream.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> that contains the stream or file used in serializing.</param>
      <param name="obj">The object to be serialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is a null reference (Nothing).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.SerializeToString(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Serializes the specified <see cref="T:System.Object" /> to a string.</summary>
      <returns>A string that contains the serialized <see cref="T:System.Object" />.</returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize to a string.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> or <paramref name="value" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.ShouldSerializeValue(System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager,System.Object)">
      <summary>Returns a value that indicates whether the <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer" /> should serialize the specified <see cref="T:System.Object" />.</summary>
      <returns>true to indicate <paramref name="value" /> should be serialized; otherwise, false.  </returns>
      <param name="serializationManager">The <see cref="T:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializationManager" /> that manages the serialization process.</param>
      <param name="value">The <see cref="T:System.Object" /> to check.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serializationManager" /> contains a null reference (Nothing in Visual Basic).</exception>
    </member>
    <member name="F:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.XClassProperty">
      <summary>Represents an attached <see cref="T:System.Workflow.ComponentModel.DependencyProperty" /> that defines the type name, which will be created during compilation. </summary>
    </member>
    <member name="F:System.Workflow.ComponentModel.Serialization.WorkflowMarkupSerializer.XCodeProperty">
      <summary>Represents a code example, embedded into XAML x:Code element.</summary>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute">
      <summary>Can be optionally applied to a workflow assembly. It defines a mapping between a common language runtime namespace that is defined in the current assembly and an XML namespace. This information is used in extensible Application Markup Language (XAML) serialization/deserialization when activities or workflows that are defined in the assembly decorated with this attribute are used. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute" /> class, initializing <see cref="P:System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute.XmlNamespace" /> and <see cref="P:System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute.ClrNamespace" /> properties.</summary>
      <param name="xmlNamespace">A <see cref="T:System.String" /> that contains the value for <see cref="P:System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute.XmlNamespace" />.</param>
      <param name="clrNamespace">A <see cref="T:System.String" /> that contains the value for <see cref="P:System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute.ClrNamespace" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> is a null reference (Nothing in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clrNamespace" /> is a null reference (Nothing).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute.AssemblyName">
      <summary>Gets or sets a <see cref="T:System.String" /> that represents the <see cref="P:System.Type.Assembly" /> name of the decorated class.</summary>
      <returns>A <see cref="T:System.String" /> that represents the <see cref="P:System.Type.Assembly" /> name of the decorated class.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute.ClrNamespace">
      <summary>Gets a <see cref="T:System.String" /> that represents the name of the CLR namespace of the decorated class.</summary>
      <returns>A <see cref="T:System.String" /> that represents the name of the CLR namespace of the decorated class.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.XmlnsDefinitionAttribute.XmlNamespace">
      <summary>Gets a <see cref="T:System.String" /> that represents the name of the XML namespace of the decorated class.</summary>
      <returns>A <see cref="T:System.String" /> that represents the name of the XML namespace of the decorated class.</returns>
    </member>
    <member name="T:System.Workflow.ComponentModel.Serialization.XmlnsPrefixAttribute">
      <summary>Contains XML namespace and prefix information for the decorated class. This class cannot be inherited.</summary>
    </member>
    <member name="M:System.Workflow.ComponentModel.Serialization.XmlnsPrefixAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Workflow.ComponentModel.Serialization.XmlnsPrefixAttribute" /> class, initializing <see cref="P:System.Workflow.ComponentModel.Serialization.XmlnsPrefixAttribute.XmlNamespace" /> and <see cref="P:System.Workflow.ComponentModel.Serialization.XmlnsPrefixAttribute.Prefix" />.</summary>
      <param name="xmlNamespace">A <see cref="T:System.String" /> that contains the value for <see cref="P:System.Workflow.ComponentModel.Serialization.XmlnsPrefixAttribute.XmlNamespace" />.</param>
      <param name="prefix">A <see cref="T:System.String" /> that contains the value for <see cref="P:System.Workflow.ComponentModel.Serialization.XmlnsPrefixAttribute.Prefix" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> is a null reference (Visual Basic Nothing).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefix" /> is a null reference (Visual Basic Nothing).</exception>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.XmlnsPrefixAttribute.Prefix">
      <summary>Gets the <see cref="T:System.String" /> that contains the value of the prefix for the decorated class.</summary>
      <returns>The <see cref="T:System.String" /> that contains the value of the prefix for the decorated class.</returns>
    </member>
    <member name="P:System.Workflow.ComponentModel.Serialization.XmlnsPrefixAttribute.XmlNamespace">
      <summary>Gets the <see cref="T:System.String" /> that contains the value of the XML namespace for the decorated class.</summary>
      <returns>The <see cref="T:System.String" /> that contains the value of the XML namespace for the decorated class.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Xaml.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xaml</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute">
      <summary>Notates types for legacy reporting of XAML markup extension characteristics.</summary>
    </member>
    <member name="M:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute" /> class. </summary>
      <param name="type">The return type that this attribute reports. </param>
    </member>
    <member name="P:System.Windows.Markup.AcceptedMarkupExtensionExpressionTypeAttribute.Type">
      <summary>Gets or sets the return type that this attribute reports. </summary>
      <returns>The return type that this attribute reports. </returns>
    </member>
    <member name="T:System.Windows.Markup.AmbientAttribute">
      <summary>Specifies that a property or type should be treated as ambient. The ambient concept relates to how XAML processors determine type owners of members.</summary>
    </member>
    <member name="M:System.Windows.Markup.AmbientAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.AmbientAttribute" /> class.</summary>
    </member>
    <member name="T:System.Windows.Markup.ArrayExtension">
      <summary>Implements x:Array support for general CLR XAML processor implementation.</summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ArrayExtension" /> class. This creates an empty array. </summary>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Array)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ArrayExtension" /> class based on the provided raw array.</summary>
      <param name="elements">The array to populate the extension with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ArrayExtension" /> class and initializes the type of the array. </summary>
      <param name="arrayType">The object type of the new array.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="arrayType" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddChild(System.Object)">
      <summary>Appends the supplied object to the end of the array. </summary>
      <param name="value">The object to add to the end of the array.</param>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.AddText(System.String)">
      <summary>Adds a text node as a new array item.</summary>
      <param name="text">The text to add to the end of the array.</param>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Items">
      <summary>Gets the contents of the array. Settable in XAML through XAML collection setting syntax.</summary>
      <returns>The array contents.</returns>
    </member>
    <member name="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)">
      <summary>Returns an array that is sized to the number of objects supplied in the <see cref="P:System.Windows.Markup.ArrayExtension.Items" /> values. </summary>
      <returns>The created array.</returns>
      <param name="serviceProvider">An object that can provide services for the markup extension.</param>
      <exception cref="T:System.InvalidOperationException">Provided a value for an array that did not provide a type.-or-There is a type mismatch between the declared type of the array and one of its members. This case will have an inner exception of <see cref="T:System.InvalidCastException" />.</exception>
    </member>
    <member name="P:System.Windows.Markup.ArrayExtension.Type">
      <summary>Gets or sets the type of array to be created when calling <see cref="M:System.Windows.Markup.ArrayExtension.ProvideValue(System.IServiceProvider)" />.</summary>
      <returns>The type of the array.</returns>
    </member>
    <member name="T:System.Windows.Markup.ConstructorArgumentAttribute">
      <summary>Specifies that a property can be initialized by using a non-default constructor parameter of the specified name. This information is primarily for XAML serialization.</summary>
    </member>
    <member name="M:System.Windows.Markup.ConstructorArgumentAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ConstructorArgumentAttribute" /> class.</summary>
      <param name="argumentName">The name of the constructor that will initialize the associated property.</param>
    </member>
    <member name="P:System.Windows.Markup.ConstructorArgumentAttribute.ArgumentName">
      <summary>Gets the name parameter of the constructor that will initialize the associated property.</summary>
      <returns>The name of the constructor. Assuming CLR backing, this corresponds to the <see cref="P:System.Reflection.ParameterInfo.Name" /> of the relevant constructor parameter.</returns>
    </member>
    <member name="T:System.Windows.Markup.ContentPropertyAttribute">
      <summary>Indicates which property of a type is the XAML content property. A XAML processor uses this information when processing XAML child elements of XAML representations of the attributed type.</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ContentPropertyAttribute" /> class, by using the specified name.</summary>
      <param name="name">The property name for the property that is the content property.</param>
    </member>
    <member name="P:System.Windows.Markup.ContentPropertyAttribute.Name">
      <summary>Gets the name of the property that is the content property.</summary>
      <returns>The name of the property that is the content property.</returns>
    </member>
    <member name="T:System.Windows.Markup.ContentWrapperAttribute">
      <summary>Specifies one or more types on the associated collection type that will be used to wrap foreign content.</summary>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> class. </summary>
      <param name="contentWrapper">The <see cref="T:System.Type" /> that is declared as a content wrapper for the collection type.</param>
    </member>
    <member name="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper">
      <summary>Gets the type that is declared as a content wrapper for the collection type associated with this attribute.</summary>
      <returns>The type that is declared as a content wrapper for the collection type.</returns>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> is equivalent this <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> by comparing the <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" /> properties.</summary>
      <returns>true if the <see cref="P:System.Windows.Markup.ContentWrapperAttribute.ContentWrapper" /> properties are equal; otherwise, false.</returns>
      <param name="obj">The <see cref="T:System.Windows.Markup.ContentWrapperAttribute" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Markup.ContentWrapperAttribute.GetHashCode">
      <summary>Gets a hash code for this instance.</summary>
      <returns>An integer hash code</returns>
    </member>
    <member name="P:System.Windows.Markup.ContentWrapperAttribute.TypeId">
      <summary>Gets a unique identifier for this attribute. </summary>
      <returns>A unique identifier for the attribute.</returns>
    </member>
    <member name="T:System.Windows.Markup.DateTimeValueSerializer">
      <summary>Converts instances of <see cref="T:System.String" /> to and from instances of <see cref="T:System.DateTime" />.</summary>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.DateTimeValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified <see cref="T:System.String" /> can be convert to an instance of <see cref="T:System.DateTime" />.</summary>
      <returns>true if the value can be converted; otherwise, false.</returns>
      <param name="value">The string to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Determines if the specified object can be converted to a <see cref="T:System.String" />.</summary>
      <returns>true if <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts a <see cref="T:System.String" /> into a <see cref="T:System.DateTime" />.</summary>
      <returns>A new instance of <see cref="T:System.DateTime" /> based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert into a <see cref="T:System.DateTime" />.</param>
      <param name="context">Context information that is used for conversion.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Markup.DateTimeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Converts an instance of <see cref="T:System.DateTime" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the specified <see cref="T:System.DateTime" />.</returns>
      <param name="value">The object to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> is not a <see cref="T:System.DateTime" /> or is null.</exception>
    </member>
    <member name="T:System.Windows.Markup.DependsOnAttribute">
      <summary>Indicates that the associated property is dependent on the value of another property.</summary>
    </member>
    <member name="M:System.Windows.Markup.DependsOnAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.DependsOnAttribute" /> class.</summary>
      <param name="name">The property that the property associated with this <see cref="T:System.Windows.Markup.DependsOnAttribute" /> depends on.</param>
    </member>
    <member name="P:System.Windows.Markup.DependsOnAttribute.Name">
      <summary>Gets the name of the related property declared in this <see cref="T:System.Windows.Markup.DependsOnAttribute" />.</summary>
      <returns>The name of the related property.</returns>
    </member>
    <member name="P:System.Windows.Markup.DependsOnAttribute.TypeId">
      <summary>Gets a unique identifier for this <see cref="T:System.Windows.Markup.DependsOnAttribute" />. </summary>
      <returns>The unique identifier.</returns>
    </member>
    <member name="T:System.Windows.Markup.DictionaryKeyPropertyAttribute">
      <summary>Specifies a property of the associated class that provides the implicit key value. Implicit keys are used for keys rather than explicit x:Key attributes defined in XAML for an item in <see cref="T:System.Collections.IDictionary" /> collections.</summary>
    </member>
    <member name="M:System.Windows.Markup.DictionaryKeyPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.DictionaryKeyPropertyAttribute" /> class.</summary>
      <param name="name">The name of the property that provides the implicit key value.</param>
    </member>
    <member name="P:System.Windows.Markup.DictionaryKeyPropertyAttribute.Name">
      <summary>Gets the name of the property that provides the implicit key value.</summary>
      <returns>The name of the property that provides the implicit key value.</returns>
    </member>
    <member name="T:System.Windows.Markup.IComponentConnector">
      <summary>Provides markup compile and tools support for named XAML elements and for attaching event handlers to them.</summary>
    </member>
    <member name="M:System.Windows.Markup.IComponentConnector.Connect(System.Int32,System.Object)">
      <summary>Attaches events and names to compiled content. </summary>
      <param name="connectionId">An identifier token to distinguish calls.</param>
      <param name="target">The target to connect events and names to.</param>
    </member>
    <member name="M:System.Windows.Markup.IComponentConnector.InitializeComponent">
      <summary>Loads the compiled page of a component.</summary>
    </member>
    <member name="T:System.Windows.Markup.INameScope">
      <summary>Defines a contract for how names of elements should be accessed within a particular XAML namescope, and how to enforce uniqueness of names within that XAML namescope. </summary>
    </member>
    <member name="M:System.Windows.Markup.INameScope.FindName(System.String)">
      <summary>Returns an object that has the provided identifying name. </summary>
      <returns>The object, if found. Returns null if no object of that name was found.</returns>
      <param name="name">The name identifier for the object being requested.</param>
    </member>
    <member name="M:System.Windows.Markup.INameScope.RegisterName(System.String,System.Object)">
      <summary>Registers the provided name into the current XAML namescope. </summary>
      <param name="name">The name to register.</param>
      <param name="scopedElement">The specific element that the provided <paramref name="name" /> refers to.</param>
    </member>
    <member name="M:System.Windows.Markup.INameScope.UnregisterName(System.String)">
      <summary>Unregisters the provided name from the current XAML namescope. </summary>
      <param name="name">The name to unregister.</param>
    </member>
    <member name="T:System.Windows.Markup.INameScopeDictionary">
      <summary>Unifies enumerable, collection, and dictionary support that are useful for exposing a dictionary of names in a XAML namescope.</summary>
    </member>
    <member name="T:System.Windows.Markup.IProvideValueTarget">
      <summary>Represents a service that reports situational object-property relationships for markup extension evaluation.</summary>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetObject">
      <summary>Gets the target object being reported.</summary>
      <returns>The target object being reported.</returns>
    </member>
    <member name="P:System.Windows.Markup.IProvideValueTarget.TargetProperty">
      <summary>Gets an identifier for the target property being reported.</summary>
      <returns>An identifier for the target property being reported.</returns>
    </member>
    <member name="T:System.Windows.Markup.IQueryAmbient">
      <summary>Queries for whether a specified property should be treated as ambient in the current scope.</summary>
    </member>
    <member name="M:System.Windows.Markup.IQueryAmbient.IsAmbientPropertyAvailable(System.String)">
      <summary>Queries for whether a specified named property can be considered ambient in the current scope.</summary>
      <returns>true if the requested property can be considered ambient; otherwise, false.</returns>
      <param name="propertyName">The name of the property to check for ambience state.</param>
    </member>
    <member name="T:System.Windows.Markup.IUriContext">
      <summary>Represents a service that can use application context to resolve a provided relative URI to an absolute URI.</summary>
    </member>
    <member name="P:System.Windows.Markup.IUriContext.BaseUri">
      <summary>Gets or sets the base URI of the current application context. </summary>
      <returns>The base URI of the application context.</returns>
    </member>
    <member name="T:System.Windows.Markup.IValueSerializerContext">
      <summary>Defines a context that is provided to a <see cref="T:System.Windows.Markup.ValueSerializer" />. The context can be used to enable special cases of serialization or different modes of serialization.</summary>
    </member>
    <member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary>Gets a <see cref="T:System.Windows.Markup.ValueSerializer" /> for the given property descriptor.</summary>
      <returns>A <see cref="T:System.Windows.Markup.ValueSerializer" /> capable of serializing the specified property.</returns>
      <param name="descriptor">The descriptor of the property being converted.</param>
    </member>
    <member name="M:System.Windows.Markup.IValueSerializerContext.GetValueSerializerFor(System.Type)">
      <summary>Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> associated with the specified type.</summary>
      <returns>A <see cref="T:System.Windows.Markup.ValueSerializer" /> capable of serializing the specified type.</returns>
      <param name="type">The type of the value being converted.</param>
    </member>
    <member name="T:System.Windows.Markup.IXamlTypeResolver">
      <summary>Represents a service that resolves from named elements in XAML markup to the appropriate CLR type.</summary>
    </member>
    <member name="M:System.Windows.Markup.IXamlTypeResolver.Resolve(System.String)">
      <summary>Resolves a named XAML type to the corresponding CLR <see cref="T:System.Type" />.</summary>
      <returns>The <see cref="T:System.Type" /> that <paramref name="qualifiedTypeName" /> resolves to </returns>
      <param name="qualifiedTypeName">The XAML type name to resolve. The type name is optionally qualified by the prefix for a XML namespace. Otherwise the current default XML namespace is assumed.</param>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtension">
      <summary>Provides a base class for XAML markup extensions.</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtension.#ctor">
      <summary>Initializes a new instance of a class derived from <see cref="T:System.Windows.Markup.MarkupExtension" />. </summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)">
      <summary>When implemented in a derived class, returns an object that is set as the value of the target property for this markup extension. </summary>
      <returns>The object value to set on the property where the extension is applied. </returns>
      <param name="serviceProvider">Object that can provide services for the markup extension.</param>
    </member>
    <member name="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute">
      <summary>Reports the type that a markup extension can return.</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" />  class using the provided <see cref="T:System.Type" />.</summary>
      <param name="returnType">The return type that this  .NET Framework attribute reports.</param>
    </member>
    <member name="M:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.#ctor(System.Type,System.Type)">
      <summary>Do not use, see Remarks.</summary>
      <param name="returnType">The return type that this  .NET Framework attribute reports.</param>
      <param name="expressionType">Do not use; see Remarks.</param>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ExpressionType">
      <summary>Do not use; see Remarks.</summary>
      <returns>Do not use; see Remarks.</returns>
    </member>
    <member name="P:System.Windows.Markup.MarkupExtensionReturnTypeAttribute.ReturnType">
      <summary>Gets the <see cref="T:System.Windows.Markup.MarkupExtension" /> return type that this .NET Framework attribute reports.</summary>
      <returns>The type-safe return type of the specific <see cref="M:System.Windows.Markup.MarkupExtension.ProvideValue(System.IServiceProvider)" /> implementation of the markup extension where the <see cref="T:System.Windows.Markup.MarkupExtensionReturnTypeAttribute" />  .NET Framework attribute is applied.</returns>
    </member>
    <member name="T:System.Windows.Markup.MemberDefinition">
      <summary>Provides the base class that is used for a markup technique of defining members of a class in declarative XAML.</summary>
    </member>
    <member name="M:System.Windows.Markup.MemberDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.MemberDefinition" /> class. </summary>
    </member>
    <member name="P:System.Windows.Markup.MemberDefinition.Name">
      <summary>When implemented in a derived class, gets or sets the name of the member to define.</summary>
      <returns>The name of the member to define.</returns>
    </member>
    <member name="T:System.Windows.Markup.NameReferenceConverter">
      <summary>Provides type conversion to convert a string name into an object reference to the object with that name, or to return the name of an object from the object graph.</summary>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.NameReferenceConverter" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns whether this converter can convert an object of one type to another object. </summary>
      <returns>true if this converter can perform the conversion; otherwise, false. </returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="sourceType">A <see cref="T:System.Type" /> that represents the type you want to convert from. </param>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Returns a value that indicates whether the converter can convert an object to the specified destination type. </summary>
      <returns>true if the converter can perform the conversion; otherwise, false.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="destinationType">The type to convert to.</param>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Converts the provided object to another object, using the specified context and culture information. </summary>
      <returns>The returned object, which is potentially any object that is type-mapped in the relevant backing assemblies and capable of being declared in XAML with a XAML name reference.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The reference name string to convert.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="value" /> is a null string or empty string.-or-<see cref="T:System.Xaml.IXamlNameResolver" /> service is missing or invalid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Markup.NameReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Converts an object to the specified type. This is intended to return XAML reference names for objects in an object graph.</summary>
      <returns>The reference name of the input <paramref name="value" /> object.</returns>
      <param name="context">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context. </param>
      <param name="culture">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The object to retrieve the reference name for.</param>
      <param name="destinationType">The type to return. You should always reference the <see cref="T:System.String" /> type.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Xaml.IXamlNameProvider" /> service is missing or invalid.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="context" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Markup.NameScopePropertyAttribute">
      <summary>Specifies a property of the associated class that provides the XAML namescope value.</summary>
    </member>
    <member name="M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" /> class with the specified name.</summary>
      <param name="name">The name of the property on the attributed type that provides the XAML namescope.</param>
    </member>
    <member name="M:System.Windows.Markup.NameScopePropertyAttribute.#ctor(System.String,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.NameScopePropertyAttribute" /> class with the specified name and type.</summary>
      <param name="name">The name of the attachable member that provides the XAML name scope.</param>
      <param name="type">The owner type of the attachable member that provides the XAML name scope.</param>
    </member>
    <member name="P:System.Windows.Markup.NameScopePropertyAttribute.Name">
      <summary>Gets the name of the property that provides the XAML namescope.</summary>
      <returns>A string value that is the name of the property that provides the XAML namescope.</returns>
    </member>
    <member name="P:System.Windows.Markup.NameScopePropertyAttribute.Type">
      <summary>Gets the owner type of the attached property that provides the XAML namescope support.</summary>
      <returns>A <see cref="T:System.Type" /> value that is the owner type of the attached property that provides the XAML namescope support, or null. See Remarks.</returns>
    </member>
    <member name="T:System.Windows.Markup.NullExtension">
      <summary>Implements a XAML markup extension in order to return a null object, which you can use to explicitly set values to null in XAML. </summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.NullExtension" /> class. </summary>
    </member>
    <member name="M:System.Windows.Markup.NullExtension.ProvideValue(System.IServiceProvider)">
      <summary>Provides null to use as a value as the output of this markup extension. </summary>
      <returns>A null reference.</returns>
      <param name="serviceProvider">An object that can provide services for the markup extension implementation.</param>
    </member>
    <member name="T:System.Windows.Markup.PropertyDefinition">
      <summary>Supports a markup technique of defining properties of a class in declarative XAML.</summary>
    </member>
    <member name="M:System.Windows.Markup.PropertyDefinition.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.PropertyDefinition" /> class. </summary>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Attributes">
      <summary>Gets a list of associated CLR attributes.</summary>
      <returns>A list of associated attributes.</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Modifier">
      <summary>Gets or sets the access level of the defined property.</summary>
      <returns>The access level of the defined property, as a string.</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Name">
      <summary>Gets or sets the name of the property to define.</summary>
      <returns>The name of the property to define.</returns>
    </member>
    <member name="P:System.Windows.Markup.PropertyDefinition.Type">
      <summary>Gets or sets the <see cref="T:System.Xaml.XamlType" /> of the property to define.</summary>
      <returns>The XAML type identifier of the property to define.</returns>
    </member>
    <member name="T:System.Windows.Markup.Reference">
      <summary>Implements the {x:Reference} markup extension.</summary>
    </member>
    <member name="M:System.Windows.Markup.Reference.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.Reference" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.Reference.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.Reference" /> class with the <paramref name="name" /> argument.</summary>
      <param name="name">The XAML name of the element to reference.</param>
    </member>
    <member name="P:System.Windows.Markup.Reference.Name">
      <summary>Gets or sets the XAML name to obtain the reference for.</summary>
      <returns>The XAML name of the element to obtain the reference for.</returns>
    </member>
    <member name="M:System.Windows.Markup.Reference.ProvideValue(System.IServiceProvider)">
      <summary>Returns an object that is the value of the target property. For the <see cref="T:System.Windows.Markup.Reference" /> type, this is the object that the provided <see cref="P:System.Windows.Markup.Reference.Name" /> references.</summary>
      <returns>The value of the target property. This is potentially any object that is type-mapped in the relevant backing assemblies.</returns>
      <param name="serviceProvider">A class that implements the <see cref="T:System.Xaml.IXamlNameResolver" /> service. </param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="serviceProvider" /> value does not implement the <see cref="T:System.Xaml.IXamlNameResolver" /> service.-or-<see cref="P:System.Windows.Markup.Reference.Name" /> value has not been set through construction or positional usage.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Markup.RootNamespaceAttribute">
      <summary>Represents an assembly level attribute that is used to identify the value of the RootNamespace property in a Visual Studio project file.</summary>
    </member>
    <member name="M:System.Windows.Markup.RootNamespaceAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.RootNamespaceAttribute" /> class.</summary>
      <param name="nameSpace">The root namespace value.</param>
    </member>
    <member name="P:System.Windows.Markup.RootNamespaceAttribute.Namespace">
      <summary>Gets the string that corresponds to the value of the RootNamespace property in a Visual Studio project file.</summary>
      <returns>The string that corresponds to the value of the RootNamespace property in a Visual Studio project file.</returns>
    </member>
    <member name="T:System.Windows.Markup.RuntimeNamePropertyAttribute">
      <summary>Represents a type-level attribute that reports which property of the type maps to the XAML x:Name attribute.</summary>
    </member>
    <member name="M:System.Windows.Markup.RuntimeNamePropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" /> class.</summary>
      <param name="name">The name of the property to use as the x:Name equivalent of the class.</param>
    </member>
    <member name="P:System.Windows.Markup.RuntimeNamePropertyAttribute.Name">
      <summary>Gets the name of the runtime name property that is specified by this <see cref="T:System.Windows.Markup.RuntimeNamePropertyAttribute" />.</summary>
      <returns>The name of the property.</returns>
    </member>
    <member name="T:System.Windows.Markup.StaticExtension">
      <summary>Implements a markup extension that returns static field and property references. </summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.StaticExtension" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.StaticExtension" /> class using the provided <paramref name="member" /> string.</summary>
      <param name="member">A string that identifies the member to make a reference to. This string uses the format prefix:typeName.fieldOrPropertyName. prefix is the mapping prefix for a XAML namespace, and is only required to reference static values that are not mapped to the default XAML namespace.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.Member">
      <summary>Gets or sets a member name string that is used to resolve a static field or property based on the service-provided type resolver.</summary>
      <returns>A string that identifies the member to make a reference to. See Remarks.</returns>
      <exception cref="T:System.ArgumentNullException">Attempted to set <see cref="P:System.Windows.Markup.StaticExtension.Member" />  to null.</exception>
    </member>
    <member name="P:System.Windows.Markup.StaticExtension.MemberType">
      <summary>Gets or sets the <see cref="T:System.Type" /> that defines the static member to return.</summary>
      <returns>The <see cref="T:System.Type" /> that defines the static member to return.</returns>
      <exception cref="T:System.ArgumentNullException">Attempted to set <see cref="P:System.Windows.Markup.StaticExtension.MemberType" />  to null.</exception>
    </member>
    <member name="M:System.Windows.Markup.StaticExtension.ProvideValue(System.IServiceProvider)">
      <summary>Returns an object value to set on the property where you apply this extension. For <see cref="T:System.Windows.Markup.StaticExtension" />, the return value is the static value that is evaluated for the requested static member.</summary>
      <returns>The static value to set on the property where the extension is applied. </returns>
      <param name="serviceProvider">An object that can provide services for the markup extension. The service provider is expected to provide a service that implements a type resolver (<see cref="T:System.Windows.Markup.IXamlTypeResolver" />).</param>
      <exception cref="T:System.InvalidOperationException">The <paramref name="member" /> value for the extension is null at the time of evaluation.</exception>
      <exception cref="T:System.ArgumentException">Some part of the <paramref name="member" /> string did not parse properly-or-<paramref name="serviceProvider" /> did not provide a service for <see cref="T:System.Windows.Markup.IXamlTypeResolver" />-or-<paramref name="member" /> value did not resolve to a static member.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> is null.</exception>
    </member>
    <member name="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute">
      <summary>Indicates to XAML processors that the whitespace surrounding elements of the type in markup should be trimmed when serializing.</summary>
    </member>
    <member name="M:System.Windows.Markup.TrimSurroundingWhitespaceAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.TrimSurroundingWhitespaceAttribute" /> class.</summary>
    </member>
    <member name="T:System.Windows.Markup.TypeExtension">
      <summary>Implements a markup extension that returns a <see cref="T:System.Type" /> based on a string input. </summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.TypeExtension" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.TypeExtension" /> class, initializing the <see cref="P:System.Windows.Markup.TypeExtension.TypeName" /> value based on the provided <paramref name="typeName" /> string.</summary>
      <param name="typeName">A string that identifies the type to make a reference to. This string uses the format prefix:className. prefix is the mapping prefix for a XAML namespace, and is only required to reference types that are not mapped to the default XAML namespace.</param>
      <exception cref="T:System.ArgumentNullException">Attempted to specify <paramref name="typeName" /> as null.</exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.TypeExtension" /> class, declaring the type directly.</summary>
      <param name="type">The type to be represented by this <see cref="T:System.Windows.Markup.TypeExtension" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null</exception>
    </member>
    <member name="M:System.Windows.Markup.TypeExtension.ProvideValue(System.IServiceProvider)">
      <summary>Returns an object that should be set on the property where this extension is applied. For <see cref="T:System.Windows.Markup.TypeExtension" /> , this is the <see cref="T:System.Type" /> value as evaluated for the requested type name.</summary>
      <returns>The <see cref="T:System.Type" /> to set on the property where the extension is applied. </returns>
      <param name="serviceProvider">Object that can provide services for the markup extension. The provider is expected to provide a service for <see cref="T:System.Windows.Markup.IXamlTypeResolver" />.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="member" /> value for the extension is null.</exception>
      <exception cref="T:System.ArgumentException">Some part of the <paramref name="typeName" /> string did not parse properly.-or-<paramref name="serviceProvider" /> did not provide a service for <see cref="T:System.Windows.Markup.IXamlTypeResolver" />-or-<paramref name="typeName" /> value did not resolve to a type.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceProvider" /> is null</exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.Type">
      <summary>Gets or sets the type information for this extension.</summary>
      <returns>The established type. For runtime purposes, this may be null for get access, but cannot be set to null.</returns>
      <exception cref="T:System.ArgumentNullException">Attempted to set to null.</exception>
    </member>
    <member name="P:System.Windows.Markup.TypeExtension.TypeName">
      <summary>Gets or sets the type name represented by this markup extension.</summary>
      <returns>A string that identifies the type. This string uses the format prefix:className. (prefix is the mapping prefix for an XML namespace, and is only required to reference types that are not mapped to the default XML namespace for WPF (http://schemas.microsoft.com/winfx/2006/xaml/presentation).</returns>
      <exception cref="T:System.ArgumentNullException">Attempted to set to null.</exception>
    </member>
    <member name="T:System.Windows.Markup.UidPropertyAttribute">
      <summary>Indicates the CLR property of a class that provides the x:Uid Attribute value.</summary>
    </member>
    <member name="M:System.Windows.Markup.UidPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.UidPropertyAttribute" /> class.</summary>
      <param name="name">The name of the property that provides the x:Uid Attribute value.</param>
    </member>
    <member name="P:System.Windows.Markup.UidPropertyAttribute.Name">
      <summary>Gets the name of the CLR property that represents the x:Uid Attribute value.</summary>
      <returns>The name of the CLR property that represents x:Uid Attribute.</returns>
    </member>
    <member name="T:System.Windows.Markup.UsableDuringInitializationAttribute">
      <summary>Indicates whether this type is built top-down during XAML object graph creation.</summary>
    </member>
    <member name="M:System.Windows.Markup.UsableDuringInitializationAttribute.#ctor(System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.UsableDuringInitializationAttribute" /> class.</summary>
      <param name="usable">Defines whether the associated class is usable during initialization.</param>
    </member>
    <member name="P:System.Windows.Markup.UsableDuringInitializationAttribute.Usable">
      <summary>Gets a value that indicates whether the associated class is usable during initialization.</summary>
      <returns>true if the associated class is usable during initialization; otherwise, false.</returns>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializer">
      <summary>Abstract class that defines conversion behavior for serialization from an object representation.</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ValueSerializer" /> class.</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>When overridden in a derived class, determines whether the specified <see cref="T:System.String" /> can be converted to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.</summary>
      <returns>true if the value can be converted; otherwise, false.</returns>
      <param name="value">The string to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion. </param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>When overridden in a derived class, determines whether the specified object can be converted into a <see cref="T:System.String" />.</summary>
      <returns>true if the <paramref name="value" /> can be converted into a <see cref="T:System.String" />; otherwise, false.</returns>
      <param name="value">The object to evaluate for conversion.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>When overridden in a derived class, converts a <see cref="T:System.String" /> to an instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports.</summary>
      <returns>A new instance of the type that the implementation of <see cref="T:System.Windows.Markup.ValueSerializer" /> supports based on the supplied <paramref name="value" />.</returns>
      <param name="value">The string to convert.</param>
      <param name="context">Context information that is used for conversion.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted.</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>When overridden in a derived class, converts the specified object to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the specified object.</returns>
      <param name="value">The object to convert into a string.</param>
      <param name="context">Context information that is used for conversion.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted.</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetConvertFromException(System.Object)">
      <summary>Returns an exception to throw when a conversion cannot be performed.</summary>
      <returns>An <see cref="T:System.Exception" /> object for the exception to throw when a ConvertFrom conversion cannot be performed.</returns>
      <param name="value">The object that could not be converted.</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetConvertToException(System.Object,System.Type)">
      <summary>Returns an exception to throw when a conversion cannot be performed.</summary>
      <returns>An <see cref="T:System.Exception" /> object for the exception to throw when a ConvertTo conversion cannot be performed.</returns>
      <param name="value">The object that could not be converted.</param>
      <param name="destinationType">A type that represents the type the conversion was trying to convert to.</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor)">
      <summary>Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for a property, by passing a CLR property descriptor for the property.</summary>
      <returns>The serializer associated with the specified property. May return null.</returns>
      <param name="descriptor">The CLR property descriptor for the property to be serialized.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descriptor" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.ComponentModel.PropertyDescriptor,System.Windows.Markup.IValueSerializerContext)">
      <summary>Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified property, using the specified context.</summary>
      <returns>The serializer associated with the specified property.</returns>
      <param name="descriptor">Descriptor for the property to be serialized.</param>
      <param name="context">Context information that is used for conversion.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="descriptor" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type)">
      <summary>Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified type.</summary>
      <returns>The serializer associated with the specified type. May return null.</returns>
      <param name="type">The type to get the <see cref="T:System.Windows.Markup.ValueSerializer" /> for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.GetSerializerFor(System.Type,System.Windows.Markup.IValueSerializerContext)">
      <summary>Gets the <see cref="T:System.Windows.Markup.ValueSerializer" /> declared for the specified type, using the specified context.</summary>
      <returns>The serializer associated with the specified type.</returns>
      <param name="type">The type to get the <see cref="T:System.Windows.Markup.ValueSerializer" /> for.</param>
      <param name="context">Context information that is used for conversion.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializer.TypeReferences(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>Gets an enumeration of the types referenced by the <see cref="T:System.Windows.Markup.ValueSerializer" />.</summary>
      <returns>The types converted by this serializer.</returns>
      <param name="value">The value being serialized.</param>
      <param name="context">Context information that is used for conversion.</param>
    </member>
    <member name="T:System.Windows.Markup.ValueSerializerAttribute">
      <summary>Identifies the <see cref="T:System.Windows.Markup.ValueSerializer" /> class that a type or property should use when it is serialized.</summary>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> class, using an assembly qualified type name string.</summary>
      <param name="valueSerializerTypeName">The assembly qualified type name string for the <see cref="T:System.Windows.Markup.ValueSerializer" /> class to use.</param>
    </member>
    <member name="M:System.Windows.Markup.ValueSerializerAttribute.#ctor(System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.ValueSerializerAttribute" /> class, using the specified type.</summary>
      <param name="valueSerializerType">A type that represents the type of the <see cref="T:System.Windows.Markup.ValueSerializer" /> class.</param>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerType">
      <summary>Gets the type of the <see cref="T:System.Windows.Markup.ValueSerializer" /> class reported by this attribute.</summary>
      <returns>The type of the <see cref="T:System.Windows.Markup.ValueSerializer" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.ValueSerializerAttribute.ValueSerializerTypeName">
      <summary>Gets the assembly qualified name of the <see cref="T:System.Windows.Markup.ValueSerializer" /> type for this type or property.</summary>
      <returns>The assembly qualified name of the type.</returns>
    </member>
    <member name="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute">
      <summary>Indicates that a collection type should be processed as being whitespace significant by a XAML processor.</summary>
    </member>
    <member name="M:System.Windows.Markup.WhitespaceSignificantCollectionAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.WhitespaceSignificantCollectionAttribute" /> class.</summary>
    </member>
    <member name="T:System.Windows.Markup.XamlDeferLoadAttribute">
      <summary>Indicates that a class or property has a deferred load usage for XAML (such as a template behavior), and reports the class that enables the deferring behavior and its destination/content type.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlDeferLoadAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" /> class, using string names of types. </summary>
      <param name="loaderType">The string name of the type for the implementation to use for the defer load behavior.</param>
      <param name="contentType">The string name of the type for the destination/content type of the defer load behavior.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="loaderType" /> or <paramref name="contentType" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Markup.XamlDeferLoadAttribute.#ctor(System.Type,System.Type)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlDeferLoadAttribute" /> class, using CLR <see cref="T:System.Type" /> values. </summary>
      <param name="loaderType">The CLR <see cref="T:System.Type" /> value for the implementation to use for the defer load behavior.</param>
      <param name="contentType">The CLR <see cref="T:System.Type" /> value for the destination/content type of the defer load behavior.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="loaderType" /> or <paramref name="contentType" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.ContentType">
      <summary>Gets the CLR <see cref="T:System.Type" /> value for the destination/content type of the defer load behavior.</summary>
      <returns>The CLR <see cref="T:System.Type" /> value for the destination/content type of the defer load behavior.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.ContentTypeName">
      <summary>Gets the string name of the type for the implementation to use for the defer load behavior.</summary>
      <returns>The string name of the type for the converter to use for the defer load behavior.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.LoaderType">
      <summary>Gets the CLR <see cref="T:System.Type" /> value for the implementation to use for the defer load behavior.</summary>
      <returns>The CLR <see cref="T:System.Type" /> value for the implementation to use for the defer load behavior.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlDeferLoadAttribute.LoaderTypeName">
      <summary>Gets the string name of the type for the destination/content type of the defer load behavior.</summary>
      <returns>The string name of the type for the destination/content type of the defer load behavior.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute">
      <summary>Indicates that a class can use a markup extension to provide a value, and references a handler to use for markup extension set operations.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionAttribute" /> class. </summary>
      <param name="xamlSetMarkupExtensionHandler">The name of the handler to use for markup extension set operations.</param>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionAttribute.XamlSetMarkupExtensionHandler">
      <summary>Gets the name of the handler to use for markup extension set operations.</summary>
      <returns>The name of the handler to use for markup extension set operations.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs">
      <summary>Provides data for callbacks that are invoked when a XAML object writer sets a value using a markup extension.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.#ctor(System.Xaml.XamlMember,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" /> class. </summary>
      <param name="member">XAML type system / schema information for the member being set.</param>
      <param name="value">The markup extension reference to provide for the member being set.</param>
      <param name="serviceProvider">Service provider information passed to the markup extension.</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.CallBase">
      <summary>Provides a way to invoke a callback as defined on a base class of the current acting type.</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.MarkupExtension">
      <summary>Gets the <see cref="T:System.Windows.Markup.MarkupExtension" /> reference that is relevant to this <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />.</summary>
      <returns>The markup extension reference that is relevant to this <see cref="T:System.Windows.Markup.XamlSetMarkupExtensionEventArgs" />.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetMarkupExtensionEventArgs.ServiceProvider">
      <summary>Gets service provider information that was passed to the markup extension.</summary>
      <returns>Service provider information that was passed to the markup extension.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetTypeConverterAttribute">
      <summary>Indicates that a class can use a type converter to provide a value, and references a handler to use for type converter setting cases.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" /> class.</summary>
      <param name="xamlSetTypeConverterHandler">The name of the handler to use for type converter setting operations.</param>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterAttribute.XamlSetTypeConverterHandler">
      <summary>Gets the <paramref name="xamlSetTypeConverterHandler" /> initialization value (the handler name) specified in the <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />.</summary>
      <returns>The <paramref name="xamlSetTypeConverterHandler" /> value specified in the <see cref="T:System.Windows.Markup.XamlSetTypeConverterAttribute" />.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetTypeConverterEventArgs">
      <summary>Provides data for callbacks that are invoked when a XAML writer sets a value using a type converter call.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterEventArgs.#ctor(System.Xaml.XamlMember,System.ComponentModel.TypeConverter,System.Object,System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlSetTypeConverterEventArgs" /> class. </summary>
      <param name="member">XAML type system / schema information for the member being set.</param>
      <param name="typeConverter">The specific type converter instance being invoked.</param>
      <param name="value">The value to provide for the member being set.</param>
      <param name="serviceProvider">Service provider information that can be used by the <paramref name="typeConverter" /> class.</param>
      <param name="cultureInfo">Culture information that can be used by the <paramref name="typeConverter" /> class when calling <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> and other methods.</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetTypeConverterEventArgs.CallBase">
      <summary>Provides a way to invoke a callback as defined on a base class of the current acting type.</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.CultureInfo">
      <summary>Gets <see cref="T:System.Globalization.CultureInfo" /> information that can be used by the type converter class when calling <see cref="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)" /> and other methods.</summary>
      <returns>Culture information that can be used by the type converter class </returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.ServiceProvider">
      <summary>Gets <see cref="T:System.IServiceProvider" /> information that can be used by the type converter class.</summary>
      <returns>Service provider information that can be used by the <paramref name="typeConverter" /> class.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetTypeConverterEventArgs.TypeConverter">
      <summary>Gets the <see cref="T:System.ComponentModel.TypeConverter" /> instance that is invoked and provides type conversion behavior.</summary>
      <returns>The type converter that provides type conversion behavior.</returns>
    </member>
    <member name="T:System.Windows.Markup.XamlSetValueEventArgs">
      <summary>Provides data for callbacks that are invoked when a <see cref="T:System.Xaml.XamlObjectWriter" /> sets certain values.</summary>
    </member>
    <member name="M:System.Windows.Markup.XamlSetValueEventArgs.#ctor(System.Xaml.XamlMember,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> class. </summary>
      <param name="member">XAML type system / schema information for the member being set.</param>
      <param name="value">The value to provide for the member.</param>
    </member>
    <member name="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase">
      <summary>When overridden in a derived class, provides a way to invoke a SetValue callback as defined on a base class of the current acting type.</summary>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Handled">
      <summary>Gets or sets a value that determines whether a caller that is using the <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> can use the values without having to call <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" />.</summary>
      <returns>true if the values were useful and calling <see cref="M:System.Windows.Markup.XamlSetValueEventArgs.CallBase" /> is not necessary; otherwise, false.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Member">
      <summary>Gets XAML type system / schema information for the member being set.</summary>
      <returns>XAML type system / schema information for the member being set.</returns>
    </member>
    <member name="P:System.Windows.Markup.XamlSetValueEventArgs.Value">
      <summary>Gets the value to provide for the member being set.</summary>
      <returns>The value to provide for the member being set.</returns>
    </member>
    <member name="T:System.Windows.Markup.XData">
      <summary>Represents literal data that can appear as the value for a Value node.</summary>
    </member>
    <member name="M:System.Windows.Markup.XData.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XData" /> class. </summary>
    </member>
    <member name="P:System.Windows.Markup.XData.Text">
      <summary>Gets or sets the literal value string that this <see cref="T:System.Windows.Markup.XData" /> wraps.</summary>
      <returns>The literal value string.</returns>
    </member>
    <member name="P:System.Windows.Markup.XData.XmlReader">
      <summary>Gets or sets a reader for the literal data.</summary>
      <returns>A reader for the literal data.</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlLangPropertyAttribute">
      <summary>Identifies the property to associate with the xml:lang attribute.</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlLangPropertyAttribute.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XmlLangPropertyAttribute" /> class.</summary>
      <param name="name">The property name to associate with the xml:lang attribute.</param>
    </member>
    <member name="P:System.Windows.Markup.XmlLangPropertyAttribute.Name">
      <summary>Gets the name of the property that is specified in this attribute.</summary>
      <returns>The name of the property.</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsCompatibleWithAttribute">
      <summary>Specifies that a namespace (typically one that is indicated in a previously defined <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" />) is subsumed by a new namespace.</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsCompatibleWithAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new of the <see cref="T:System.Windows.Markup.XmlnsCompatibleWithAttribute" /> class.</summary>
      <param name="oldNamespace">The reference XML namespace URI.</param>
      <param name="newNamespace">The subsuming XML namespace URI.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oldNamespace" /> or <paramref name="newNamespace" /> are null.</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.NewNamespace">
      <summary>Gets the subsuming namespace URI reported by this attribute.</summary>
      <returns>The subsuming namespace URI reported in the attribute.</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsCompatibleWithAttribute.OldNamespace">
      <summary>Gets the reference namespace URI reported by this attribute.</summary>
      <returns>The reference namespace URI.</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsDefinitionAttribute">
      <summary>Specifies a mapping on a per-assembly basis between an XML namespace and a CLR namespace, which is then used for type resolution by a XAML object writer.</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsDefinitionAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XmlnsDefinitionAttribute" /> class.</summary>
      <param name="xmlNamespace">The XML namespace URI.</param>
      <param name="clrNamespace">The CLR namespace.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> or <paramref name="clrNamespace" /> are null.</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.AssemblyName">
      <summary>Gets or sets the name of the assembly associated with the attribute. </summary>
      <returns>The assembly name.</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.ClrNamespace">
      <summary>Gets the CLR namespace specified in this attribute </summary>
      <returns>The CLR namespace, specified as a string.</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsDefinitionAttribute.XmlNamespace">
      <summary>Gets the XML namespace URI specified in this attribute.</summary>
      <returns>The XML namespace URI.</returns>
    </member>
    <member name="T:System.Windows.Markup.XmlnsPrefixAttribute">
      <summary>Identifies a recommended prefix to associate with an XML namespace for XAML usage, when writing elements and attributes in a XAML file (serialization).</summary>
    </member>
    <member name="M:System.Windows.Markup.XmlnsPrefixAttribute.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Markup.XmlnsPrefixAttribute" /> class.</summary>
      <param name="xmlNamespace">The XML namespace URI.</param>
      <param name="prefix">The recommended prefix string.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlNamespace" /> or <paramref name="prefix" /> is null.</exception>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.Prefix">
      <summary>Gets the recommended prefix associated with this attribute.</summary>
      <returns>The recommended prefix string.</returns>
    </member>
    <member name="P:System.Windows.Markup.XmlnsPrefixAttribute.XmlNamespace">
      <summary>Gets the XAML namespace URI associated with this attribute.</summary>
      <returns>The XAML namespace URI. </returns>
    </member>
    <member name="T:System.Xaml.AmbientPropertyValue">
      <summary>Reports information about an ambient property, as part of an <see cref="T:System.Xaml.IAmbientProvider" /> implementation.</summary>
    </member>
    <member name="M:System.Xaml.AmbientPropertyValue.#ctor(System.Xaml.XamlMember,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.AmbientPropertyValue" /> class.</summary>
      <param name="property">The identifier that represents the ambient property.</param>
      <param name="value">The value to report.</param>
    </member>
    <member name="P:System.Xaml.AmbientPropertyValue.RetrievedProperty">
      <summary>Gets the XAML type system identifier (<see cref="T:System.Xaml.XamlMember" />) that represents the ambient property.</summary>
      <returns>The identifier that represents the ambient property</returns>
    </member>
    <member name="P:System.Xaml.AmbientPropertyValue.Value">
      <summary>Gets the ambient property's value.</summary>
      <returns>The ambient property's value.</returns>
    </member>
    <member name="T:System.Xaml.AttachableMemberIdentifier">
      <summary>Provides a XAML type system identifier representation for attachable members that matches the <paramref name="declaringType" />.<paramref name="memberName" /> string form for attachable member usage.</summary>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.#ctor(System.Type,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.AttachableMemberIdentifier" /> class.</summary>
      <param name="declaringType">The <paramref name="declaringType" /> component of the identifier, which should match the name of the <see cref="P:System.Xaml.XamlMember.Type" /> of its XAML type system information.</param>
      <param name="memberName">The <paramref name="memberName" /> component of the identifier, which should match the <see cref="P:System.Xaml.XamlMember.Name" /> of its XAML type system information.</param>
    </member>
    <member name="P:System.Xaml.AttachableMemberIdentifier.DeclaringType">
      <summary>Gets or sets the <paramref name="declaringType" /> component value of the <see cref="T:System.Xaml.AttachableMemberIdentifier" />.</summary>
      <returns>The <paramref name="declaringType" /> component value of the <see cref="T:System.Xaml.AttachableMemberIdentifier" />.</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.Equals(System.Object)">
      <summary>Determines whether this instance of <see cref="T:System.Xaml.AttachableMemberIdentifier" /> and a specified object, which must also be a <see cref="T:System.Xaml.AttachableMemberIdentifier" /> object, have the same value.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.Xaml.AttachableMemberIdentifier" />  and its value is the same as this instance; otherwise, false. </returns>
      <param name="obj">An object (must be <see cref="T:System.Xaml.AttachableMemberIdentifier" />  in order to have a possibility of evaluating true). </param>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.Equals(System.Xaml.AttachableMemberIdentifier)">
      <summary>Determines whether this instance and another specified <see cref="T:System.Xaml.AttachableMemberIdentifier" /> object have the same value</summary>
      <returns>true if the objects have the same value; otherwise, false.</returns>
      <param name="other">The <see cref="T:System.Xaml.AttachableMemberIdentifier" /> to compare with the current <see cref="T:System.Xaml.AttachableMemberIdentifier" />. </param>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Xaml.AttachableMemberIdentifier" />. </summary>
      <returns>An integer hash code. </returns>
    </member>
    <member name="P:System.Xaml.AttachableMemberIdentifier.MemberName">
      <summary>Gets or sets the <paramref name="memberName" /> component value of the <see cref="T:System.Xaml.AttachableMemberIdentifier" />.</summary>
      <returns>The <paramref name="memberName" /> component value of the <see cref="T:System.Xaml.AttachableMemberIdentifier" />.</returns>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.op_Equality(System.Xaml.AttachableMemberIdentifier,System.Xaml.AttachableMemberIdentifier)">
      <summary>Determines whether two specified <see cref="T:System.Xaml.AttachableMemberIdentifier" /> objects have the same value. </summary>
      <returns>true if the value of <paramref name="left" /> is the same as the value of <paramref name="right" />; otherwise, false. </returns>
      <param name="left">A <see cref="T:System.Xaml.AttachableMemberIdentifier" />, or null.</param>
      <param name="right">A <see cref="T:System.Xaml.AttachableMemberIdentifier" />, or null.</param>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.op_Inequality(System.Xaml.AttachableMemberIdentifier,System.Xaml.AttachableMemberIdentifier)">
      <summary>Determines whether two specified <see cref="T:System.Xaml.AttachableMemberIdentifier" /> objects have different values. </summary>
      <returns>true if the value of <paramref name="left" /> is different than the value of <paramref name="right" />; otherwise, false.</returns>
      <param name="left">A <see cref="T:System.Xaml.AttachableMemberIdentifier" />, or null.</param>
      <param name="right">A <see cref="T:System.Xaml.AttachableMemberIdentifier" />, or null.</param>
    </member>
    <member name="M:System.Xaml.AttachableMemberIdentifier.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Xaml.AttachableMemberIdentifier" />. </summary>
      <returns>A <see cref="T:System.String" /> that represents the current <see cref="T:System.Xaml.AttachableMemberIdentifier" />. </returns>
    </member>
    <member name="T:System.Xaml.AttachablePropertyServices">
      <summary>Provides static helper methods that obtain values and accessor method information from an attachable property, and work with an attached property store.</summary>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.CopyPropertiesTo(System.Object,System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)">
      <summary>Copies all attachable property / value pairs from a specified attachable property store and into a destination array.</summary>
      <param name="instance">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />, or any  nonnull object to use a static default attachable property store.</param>
      <param name="array">The destination array. The array is a generic array, should be passed undimensioned, and should have components of <see cref="T:System.Xaml.AttachableMemberIdentifier" /> and object.</param>
      <param name="index">The source index at which to copy.</param>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.GetAttachedPropertyCount(System.Object)">
      <summary>Returns the count of the attachable property entries in the specified store.</summary>
      <returns>The integer count of entries in the store.</returns>
      <param name="instance">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />, or any non-null object to use a static default attachable property store.</param>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.RemoveProperty(System.Object,System.Xaml.AttachableMemberIdentifier)">
      <summary>Removes the entry for the specified attachable property from the specified store.</summary>
      <returns>true if an attachable property entry for <paramref name="name" /> was found in the store and removed; otherwise, false.</returns>
      <param name="instance">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />, or any non-null object to use a static default attachable property store.</param>
      <param name="name">The identifier for the attachable property entry to remove.</param>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.SetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object)">
      <summary>Sets a value for the specified attachable property in the specified store.</summary>
      <param name="instance">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />, or any non-null object to use a static default attachable property store.</param>
      <param name="name">The identifier for the attachable property entry to set.</param>
      <param name="value">The value to set.</param>
      <exception cref="T:System.InvalidOperationException">Could not set a value in the store. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.TryGetProperty(System.Object,System.Xaml.AttachableMemberIdentifier,System.Object@)">
      <summary>Attempts to get a value for the specified attachable property in the specified store. Does not throw an exception if the specific attachable property does not exist in the store.</summary>
      <returns>true if an attachable property entry for <paramref name="name" /> was found in the store and a value was posted to <paramref name="value" />; otherwise, false.</returns>
      <param name="instance">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />, or any nonnull object to use a static default attachable property store.</param>
      <param name="name">The string name identifier for the attachable property entry to get.</param>
      <param name="value">Out parameter. Destination object for the value if <paramref name="name" /> exists in the store and has a value.</param>
    </member>
    <member name="M:System.Xaml.AttachablePropertyServices.TryGetProperty``1(System.Object,System.Xaml.AttachableMemberIdentifier,``0@)">
      <summary>Attempts to get a value for the specified attachable property in the specified store, using a generic output form. Does not throw an exception if the specific attachable property does not exist in the store.</summary>
      <returns>true if an attachable property entry for <paramref name="name" /> was found in the store and a value was posted to <paramref name="value" />; otherwise, false.</returns>
      <param name="instance">A specific attachable property store that implements <see cref="T:System.Xaml.IAttachedPropertyStore" />, or any non-null object to use a static default attachable property store.</param>
      <param name="name">The identifier for the attachable property entry to get.</param>
      <param name="value">Out parameter. Destination object for the value if <paramref name="name" /> exists in the store and has a value.</param>
      <typeparam name="T">The expected type of the output.</typeparam>
    </member>
    <member name="T:System.Xaml.IAmbientProvider">
      <summary>Represents a service that can return information items of ambient properties or ambient types to type converters and markup extensions.</summary>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary>Returns an enumerable set of ambient property information items for the requested set of properties.</summary>
      <returns>An enumerable set of ambient property information for the requested set of properties. The property information of each <see cref="T:System.Xaml.AmbientPropertyValue" /> returned will match one of the input <paramref name="properties" />.</returns>
      <param name="ceilingTypes">Specifies one or more types that should stop the evaluation when they are encountered traversing upward in the object graph. This type holds the desired ambient property. May be null.</param>
      <param name="properties">Specifies one or more property identifier objects that identify the properties to be considered ambient.</param>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetAllAmbientValues(System.Xaml.XamlType[])">
      <summary>Returns an enumerable set of object instances of possible ambient types for the requested types.</summary>
      <returns>An enumerable set of objects for the requested set.</returns>
      <param name="types">The set of types from which to retrieve ambient type information.</param>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Collections.Generic.IEnumerable{System.Xaml.XamlType},System.Xaml.XamlMember[])">
      <summary>Returns a single ambient property information item from the requested set of properties, based on which such property is first encountered.</summary>
      <returns>A single ambient property information item for the first ambient property value from the <paramref name="properties" /> list that is found. </returns>
      <param name="ceilingTypes">Specifies one or more types that should stop the evaluation when they are encountered traversing upward in the object graph. This type holds the desired ambient property.</param>
      <param name="properties">Specifies one or more objects that identify the properties to be considered ambient.</param>
    </member>
    <member name="M:System.Xaml.IAmbientProvider.GetFirstAmbientValue(System.Xaml.XamlType[])">
      <summary>Returns the first matching object that is a possible ambient type for the requested types.</summary>
      <returns>The first result object for the requested set.</returns>
      <param name="types">The set of types from which to retrieve ambient type information.</param>
    </member>
    <member name="T:System.Xaml.IAttachedPropertyStore">
      <summary>Represents an attachable member store for an object where attachable members are set. This attachable member store can then be referenced with <see cref="T:System.Xaml.AttachablePropertyServices" />.</summary>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.CopyPropertiesTo(System.Collections.Generic.KeyValuePair{System.Xaml.AttachableMemberIdentifier,System.Object}[],System.Int32)">
      <summary>Copies all attachable member / value pairs from this attachable member store and into a destination array.</summary>
      <param name="array">The destination array. The array is a generic array, should be passed undimensioned, and should have components of <see cref="T:System.Xaml.AttachableMemberIdentifier" /> and object.</param>
      <param name="index">The source index at which to copy.</param>
    </member>
    <member name="P:System.Xaml.IAttachedPropertyStore.PropertyCount">
      <summary>Gets the count of the attachable member entries in this attachable member store.</summary>
      <returns>The integer count of entries in the store.</returns>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.RemoveProperty(System.Xaml.AttachableMemberIdentifier)">
      <summary>Removes the entry for the specified attachable member from this attachable member store.</summary>
      <returns>true if an attachable member entry for <paramref name="name" /> was found in the store and removed; otherwise, false.</returns>
      <param name="attachableMemberIdentifier">The XAML type system identifier for the attachable member entry to remove.</param>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.SetProperty(System.Xaml.AttachableMemberIdentifier,System.Object)">
      <summary>Sets a value for the specified attachable member in the specified store.</summary>
      <param name="attachableMemberIdentifier">The XAML type system identifier for the attachable member entry to set.</param>
      <param name="value">The value to set.</param>
    </member>
    <member name="M:System.Xaml.IAttachedPropertyStore.TryGetProperty(System.Xaml.AttachableMemberIdentifier,System.Object@)">
      <summary>Attempts to get a value for the specified attachable member in the specified store. </summary>
      <returns>true if an attachable member entry for <paramref name="name" /> was found in the store and a value was posted to <paramref name="value" />; otherwise, false.</returns>
      <param name="attachableMemberIdentifier">The XAML type system identifier for the attachable member entry to get.</param>
      <param name="value">Out parameter. Destination object for the value if <paramref name="attachableMemberIdentifier" /> exists in the store and has a value.</param>
    </member>
    <member name="T:System.Xaml.IDestinationTypeProvider">
      <summary>Represents a service that can return a type system identifier for the destination type. The destination type is relevant for cases where there is an indirect reporting of destination type for a set operation based on reflection or other mechanisms.</summary>
    </member>
    <member name="M:System.Xaml.IDestinationTypeProvider.GetDestinationType">
      <summary>Returns the CLR <see cref="T:System.Type" /> that identifies the destination type for the relevant type converter or markup extension, at the current position in a XAML node stream and using active schema context.</summary>
      <returns>A CLR <see cref="T:System.Type" /> value for the destination type.</returns>
    </member>
    <member name="T:System.Xaml.INamespacePrefixLookup">
      <summary>Represents a service that can return the recommended prefix for a XAML namespace mapping to consumers such as design environments or serializers.</summary>
    </member>
    <member name="M:System.Xaml.INamespacePrefixLookup.LookupPrefix(System.String)">
      <summary>Returns the recommended prefix to use in XAML markup, based on a specified XAML namespace identifier.</summary>
      <returns>The recommended prefix.</returns>
      <param name="ns">The XAML namespace identifier to get a prefix for, specified as a string (not URI).</param>
    </member>
    <member name="T:System.Xaml.IRootObjectProvider">
      <summary>Describes a service that can return the root object of markup being parsed.</summary>
    </member>
    <member name="P:System.Xaml.IRootObjectProvider.RootObject">
      <summary>Gets the root object from markup or from an object graph.</summary>
      <returns>The root object.</returns>
    </member>
    <member name="T:System.Xaml.IXamlIndexingReader">
      <summary>Provides a service that represents indexed node control for a simple implementation of a node based XAML reader.</summary>
    </member>
    <member name="P:System.Xaml.IXamlIndexingReader.Count">
      <summary>Gets the number of nodes in the current external node set.</summary>
      <returns>The number of nodes in the current external node set.</returns>
    </member>
    <member name="P:System.Xaml.IXamlIndexingReader.CurrentIndex">
      <summary>Gets or sets the index number of the current reader position in terms of the indexed list of nodes.</summary>
      <returns>The index number of the current reader position.</returns>
    </member>
    <member name="T:System.Xaml.IXamlLineInfo">
      <summary>Describes a service for reporting text line information in XAML reader implementations.</summary>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.HasLineInfo">
      <summary>Gets a value that specifies whether line information is available.</summary>
      <returns>true if line information is available; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.LineNumber">
      <summary>Gets the line number to report.</summary>
      <returns>The line number to report.</returns>
    </member>
    <member name="P:System.Xaml.IXamlLineInfo.LinePosition">
      <summary>Gets the line position to report.</summary>
      <returns>The line position to report.</returns>
    </member>
    <member name="T:System.Xaml.IXamlLineInfoConsumer">
      <summary>Describes a service where a XAML writer can use reported line information, and potentially include it in the output.</summary>
    </member>
    <member name="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)">
      <summary>Collects line information.</summary>
      <param name="lineNumber">The line number to potentially use in output.</param>
      <param name="linePosition">The line position to potentially use in output.</param>
    </member>
    <member name="P:System.Xaml.IXamlLineInfoConsumer.ShouldProvideLineInfo">
      <summary>Gets a value that determines whether a line information service should provide values and therefore also call <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> when relevant.</summary>
      <returns>true if line information is used by the implementation; otherwise, false.</returns>
    </member>
    <member name="T:System.Xaml.IXamlNameProvider">
      <summary>Provides a service that is used during save/write operations to input an object and return a XAML name (x:Name).</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameProvider.GetName(System.Object)">
      <summary>Retrieves the name of the provided object graph object.</summary>
      <returns>The x:Name of the requested object.</returns>
      <param name="value">The object to get the name for.</param>
    </member>
    <member name="T:System.Xaml.IXamlNameResolver">
      <summary>Describes a service that can return objects specified by name, or alternatively returns a token. The service can also return an enumerable set of all named objects that are in the XAML namescope.</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetAllNamesAndValuesInScope">
      <summary>Returns an enumerable set of all named objects in the XAML namescope.</summary>
      <returns>An enumerable set of <see cref="T:System.Collections.Generic.KeyValuePair`2" /> objects. For each <see cref="T:System.Collections.Generic.KeyValuePair`2" />, the <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> component is a string, the <see cref="P:System.Collections.Generic.KeyValuePair`2.Value" /> component is the object that uses the <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> name in the XAML namescope.</returns>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Returns an object that can correct for certain markup patterns that produce forward references.</summary>
      <returns>An object that provides a token for lookup behavior to be evaluated later.</returns>
      <param name="names">Collection of names that are relevant.</param>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
      <summary>Returns an object that can correct for certain markup patterns that produce forward references.</summary>
      <returns>An object that provides a token for lookup behavior to be evaluated later.</returns>
      <param name="names">Collection of names that are relevant.</param>
      <param name="canAssignDirectly">true to have the implementation immediately assign the resolved name reference to the target property. false to call the user code for a reparse. The default behavior is false.</param>
    </member>
    <member name="P:System.Xaml.IXamlNameResolver.IsFixupTokenAvailable">
      <summary>Gets a value that determines whether calling <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Object,System.Collections.Generic.IEnumerable{System.String})" /> is available in order to resolve a name into a token for forward resolution.</summary>
      <returns>true if <see cref="M:System.Xaml.IXamlNameResolver.GetFixupToken(System.Object,System.Collections.Generic.IEnumerable{System.String})" /> is available as an implementation that returns a useful token for forward resolution, otherwise, false.</returns>
    </member>
    <member name="E:System.Xaml.IXamlNameResolver.OnNameScopeInitializationComplete">
      <summary>Occurs when a XAML processor has registered all the relevant names to the backing XAML namescope.</summary>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.Resolve(System.String)">
      <summary>Resolves an object from a name reference.</summary>
      <returns>The resolved object.</returns>
      <param name="name">The name reference to resolve.</param>
    </member>
    <member name="M:System.Xaml.IXamlNameResolver.Resolve(System.String,System.Boolean@)">
      <summary>Resolves an object from a name reference, and provides a tracking value that reports whether the object is fully initialized for object graph purposes.</summary>
      <returns>An object that provides a token for lookup behavior to be evaluated later.</returns>
      <param name="name">The name reference to resolve.</param>
      <param name="isFullyInitialized">true if the returned object has any dependencies on unresolved references; otherwise, false.</param>
    </member>
    <member name="T:System.Xaml.IXamlNamespaceResolver">
      <summary>Describes a service that can return a XAML namespace based on its prefix as mapped in XAML markup.</summary>
    </member>
    <member name="M:System.Xaml.IXamlNamespaceResolver.GetNamespace(System.String)">
      <summary>Retrieves a XAML namespace for the provided prefix string.</summary>
      <returns>The requested XAML namespace identifier as a string (not a URI).</returns>
      <param name="prefix">The prefix to retrieve the XAML namespace for.</param>
    </member>
    <member name="M:System.Xaml.IXamlNamespaceResolver.GetNamespacePrefixes">
      <summary>Returns all possible prefix-XAML namespace mappings (<see cref="T:System.Xaml.NamespaceDeclaration" /> values) that are available in the active schema context.</summary>
      <returns>An enumerable set of <see cref="T:System.Xaml.NamespaceDeclaration" /> values. To get the prefix strings specifically, get the <see cref="P:System.Xaml.NamespaceDeclaration.Prefix" /> value from each value returned.</returns>
    </member>
    <member name="T:System.Xaml.IXamlObjectWriterFactory">
      <summary>Represents a service that generates a <see cref="T:System.Xaml.XamlObjectWriter" /> based on current internal parser context.</summary>
    </member>
    <member name="M:System.Xaml.IXamlObjectWriterFactory.GetParentSettings">
      <summary>Returns the <see cref="T:System.Xaml.XamlObjectWriterSettings" /> from the original internal parser context.</summary>
      <returns>Settings from the original internal parser context.</returns>
    </member>
    <member name="M:System.Xaml.IXamlObjectWriterFactory.GetXamlObjectWriter(System.Xaml.XamlObjectWriterSettings)">
      <summary>Returns a <see cref="T:System.Xaml.XamlObjectWriter" /> based on active schema context.</summary>
      <returns>A <see cref="T:System.Xaml.XamlObjectWriter" /> with the specified settings.</returns>
      <param name="settings">Settings to use for construction and initialization of the <see cref="T:System.Xaml.XamlObjectWriter" />.</param>
    </member>
    <member name="T:System.Xaml.IXamlSchemaContextProvider">
      <summary>Represents a service that provides XAML schema context information to type converters and markup extensions.</summary>
    </member>
    <member name="P:System.Xaml.IXamlSchemaContextProvider.SchemaContext">
      <summary>Gets the <see cref="T:System.Xaml.XamlSchemaContext" /> reported by the service.</summary>
      <returns>The XAML schema context reported by the service.</returns>
    </member>
    <member name="T:System.Xaml.NamespaceDeclaration">
      <summary>Declares the identifier and a prefix for a XAML namespace, by storing these string values as separate properties.</summary>
    </member>
    <member name="M:System.Xaml.NamespaceDeclaration.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.NamespaceDeclaration" /> class with initial property values.</summary>
      <param name="ns">The XAML namespace identifier, as a string. May be null or empty.</param>
      <param name="prefix">The string prefix used for the namespace in prefix mappings. May be null or empty. Empty string may connote the default XAML namespace.</param>
    </member>
    <member name="P:System.Xaml.NamespaceDeclaration.Namespace">
      <summary>Gets the XAML namespace identifier component of a <see cref="T:System.Xaml.NamespaceDeclaration" />.</summary>
      <returns>The identifier of the XAML namespace.</returns>
    </member>
    <member name="P:System.Xaml.NamespaceDeclaration.Prefix">
      <summary>Gets the prefix to use for mapping and usage of <see cref="P:System.Xaml.NamespaceDeclaration.Namespace" />.</summary>
      <returns>The prefix string for this <see cref="T:System.Xaml.NamespaceDeclaration" />.</returns>
    </member>
    <member name="T:System.Xaml.XamlBackgroundReader">
      <summary>Implements a double-buffered <see cref="T:System.Xaml.XamlReader" /> that can split reading and writing to different threads.</summary>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.#ctor(System.Xaml.XamlReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlBackgroundReader" /> class. </summary>
      <param name="wrappedReader">The <see cref="T:System.Xaml.XamlReader" /> that this <see cref="T:System.Xaml.XamlBackgroundReader" /> is based on. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="wrappedReader" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Xaml.XamlBackgroundReader" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release managed resources.</param>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.HasLineInfo">
      <summary>Gets a value that specifies whether line information is available.</summary>
      <returns>true if line information is available; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.IsEof">
      <summary>Gets a value that reports whether the reader position is at the end of file.</summary>
      <returns>true if the position is at the end of the file; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.LineNumber">
      <summary>Gets the line number to report.</summary>
      <returns>The line number to report.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.LinePosition">
      <summary>Gets the line position to report.</summary>
      <returns>The line position to report.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Member">
      <summary>Gets the current member at the reader position, if the reader position is on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />.</summary>
      <returns>The current member, or null if the position is not on a member.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Namespace">
      <summary>Gets the XAML namespace from the current node.</summary>
      <returns>The XAML namespace if available, otherwise null.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>A value of the <see cref="T:System.Xaml.XamlNodeType" /> enumeration.</returns>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.Read">
      <summary>Provides the next XAML node from the source, if a node is available. </summary>
      <returns>true if a node is available; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.SchemaContext">
      <summary>Gets an object that provides schema context information for the information set.</summary>
      <returns>An object that provides schema context information for the information set.</returns>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.StartThread">
      <summary>Creates and starts a new <see cref="T:System.Threading.Thread" /> (<see cref="T:System.Threading.ParameterizedThreadStart" /> constructed) that handles a named thread for the <see cref="T:System.Xaml.XamlReader" /> .</summary>
      <exception cref="T:System.InvalidOperationException">Thread is already started.</exception>
    </member>
    <member name="M:System.Xaml.XamlBackgroundReader.StartThread(System.String)">
      <summary>Creates and starts a new <see cref="T:System.Threading.Thread" /> (<see cref="T:System.Threading.ParameterizedThreadStart" /> constructed) that handles a named thread for the <see cref="T:System.Xaml.XamlReader" />, using a provided thread name.</summary>
      <param name="threadName">Name for the thread.</param>
      <exception cref="T:System.InvalidOperationException">Thread is already started.</exception>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Type">
      <summary>Gets the <see cref="T:System.Xaml.XamlType" /> of the current node.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> of the current node, or null if the current reader position is not on an object.</returns>
    </member>
    <member name="P:System.Xaml.XamlBackgroundReader.Value">
      <summary>Gets the value of the current node.</summary>
      <returns>The value of the current node, or null if the current reader position is not on a <see cref="F:System.Xaml.XamlNodeType.Value" /> node type.</returns>
    </member>
    <member name="T:System.Xaml.XamlDeferringLoader">
      <summary>Represents a XAML reader behavior that loads and returns deferred content.</summary>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDeferringLoader" /> class. </summary>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.Load(System.Xaml.XamlReader,System.IServiceProvider)">
      <summary>Loads XAML content in a deferred mode, based on a <see cref="T:System.Xaml.XamlReader" /> and certain required services from a service provider.</summary>
      <returns>The root object for the node stream of the input <see cref="T:System.Xaml.XamlReader" />.</returns>
      <param name="xamlReader">The initiating reader that is then returned on calls to <see cref="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)" />.</param>
      <param name="serviceProvider">Service provider for required services.</param>
    </member>
    <member name="M:System.Xaml.XamlDeferringLoader.Save(System.Object,System.IServiceProvider)">
      <summary>Commits a value for deferred loading.</summary>
      <returns>A reader that can be used to obtain the deferred value as XAML node information.</returns>
      <param name="value">The input value to commit for deferred loading.</param>
      <param name="serviceProvider">Service provider for required services.</param>
    </member>
    <member name="T:System.Xaml.XamlDirective">
      <summary>Provides the XAML type system identifier for a member that is also a XAML directive. The identifier is used by XAML readers and XAML writers during processing of member nodes (when the XAML reader is positioned on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />, and <see cref="P:System.Xaml.XamlMember.IsDirective" /> is true).</summary>
    </member>
    <member name="M:System.Xaml.XamlDirective.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,System.Xaml.XamlType,System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter},System.Xaml.Schema.AllowedMemberLocations)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDirective" /> class, specifying values for each of the possible per-case values of a <see cref="T:System.Xaml.XamlDirective" />. </summary>
      <param name="xamlNamespaces">A set of XAML namespaces where this <see cref="T:System.Xaml.XamlDirective" /> can exist, passed as an enumerable set of the identifier strings..</param>
      <param name="name">The identifying name of the <see cref="T:System.Xaml.XamlDirective" />.</param>
      <param name="xamlType">The XAML type that backs the <see cref="T:System.Xaml.XamlDirective" />.</param>
      <param name="typeConverter">The type converter that this <see cref="T:System.Xaml.XamlDirective" /> uses for text syntax conversion.</param>
      <param name="allowedLocation">A value of the <see cref="T:System.Xaml.Schema.AllowedMemberLocations" /> enumeration.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlDirective.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDirective" /> class, specifying values for a name and a single XAML namespace. Use this signature only when you want or expect <see cref="P:System.Xaml.XamlMember.IsUnknown" /> to report true for the directive.</summary>
      <param name="xamlNamespace">The primary XAML namespace where this <see cref="T:System.Xaml.XamlDirective" /> can exist.</param>
      <param name="name">The identifying name of the <see cref="T:System.Xaml.XamlDirective" />.</param>
    </member>
    <member name="P:System.Xaml.XamlDirective.AllowedLocation">
      <summary>Gets a value that specifies the XAML node types where the directive can be specified.</summary>
      <returns>A value of the enumeration. The default is the enumeration default, <see cref="F:System.Xaml.Schema.AllowedMemberLocations.None" />.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.GetHashCode">
      <summary>Returns the hash code for this object.</summary>
      <returns>An integer hash code.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.GetXamlNamespaces">
      <summary>Returns a list of XAML namespaces where this XAML member can exist. </summary>
      <returns>A list of XAML namespace identifiers as strings.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupCustomAttributeProvider">
      <summary>Returns an <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation. This implementation always returns null.</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupDeferringLoader">
      <summary>Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for deferred loading of XAML declared objects. This implementation always returns null.</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupDependsOn">
      <summary>Returns a list of <see cref="T:System.Xaml.XamlMember" /> objects. These report the members where dependency relationships for initialization order exist relative to this <see cref="T:System.Xaml.XamlMember" />. This implementation always returns null.</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupInvoker">
      <summary>Returns a <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> associated with a <see cref="T:System.Xaml.XamlDirective" />.</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information for this <see cref="T:System.Xaml.XamlMember" />.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsAmbient">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlMember" /> is reported as being an ambient property.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsEvent">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlDirective" /> represents an event.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsReadOnly">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlDirective" /> represents an intended read-only property.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsReadPublic">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlDirective" /> represents a property that has a public get accessor.</summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsUnknown">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlDirective" /> represents a member that is not resolvable by the backing system used for type and member resolution.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlDirective" /> represents a non-resolvable member; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsWriteOnly">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlDirective" /> represents an intended write-only property.</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupIsWritePublic">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlDirective" /> represents a property that has a public set accessor.</summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupTargetType">
      <summary>Returns the <see cref="T:System.Xaml.XamlType" /> of the type where the <see cref="T:System.Xaml.XamlMember" /> can exist. This implementation always returns null.</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupType">
      <summary>Returns the <see cref="T:System.Xaml.XamlType" /> of the type used by the member. </summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> of the type used by the member. </returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupTypeConverter">
      <summary>Returns a type converter implementation that is associated with this <see cref="T:System.Xaml.XamlDirective" />.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> instance with <see cref="T:System.ComponentModel.TypeConverter" /> constraint, or null.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingGetter">
      <summary>Returns a get accessor that is associated with this <see cref="T:System.Xaml.XamlDirective" />. This implementation always returns null.</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingMember">
      <summary>Returns a CLR reflection <see cref="T:System.Reflection.MemberInfo" /> that is associated with this <see cref="T:System.Xaml.XamlDirective" />. This implementation always returns null.</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.LookupUnderlyingSetter">
      <summary>Returns a set accessor that is associated with this <see cref="T:System.Xaml.XamlDirective" />. This implementation always returns null.</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="M:System.Xaml.XamlDirective.ToString">
      <summary>Returns a string representation of this <see cref="T:System.Xaml.XamlDirective" />.</summary>
      <returns>A string representation of this <see cref="T:System.Xaml.XamlDirective" />.</returns>
    </member>
    <member name="T:System.Xaml.XamlDuplicateMemberException">
      <summary>The exception that is thrown when a XAML writer attempts to write a value for a duplicate member into the same object node. </summary>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDuplicateMemberException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDuplicateMemberException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDuplicateMemberException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDuplicateMemberException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.#ctor(System.Xaml.XamlMember,System.Xaml.XamlType)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDuplicateMemberException" /> class with the relevant member and type information to report.</summary>
      <param name="member">The XAML member identifier to report.</param>
      <param name="type">The XAML type identifier to report as the parent type.</param>
    </member>
    <member name="P:System.Xaml.XamlDuplicateMemberException.DuplicateMember">
      <summary>Gets or sets the XAML member identifier for the property to report as a duplicate.</summary>
      <returns>The <see cref="T:System.Xaml.XamlMember" /> (XAML member identifier) to report.</returns>
    </member>
    <member name="M:System.Xaml.XamlDuplicateMemberException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlDuplicateMemberException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.XamlDuplicateMemberException.ParentType">
      <summary>Gets or sets the XAML type identifier to report as the parent type.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> (XAML type identifier) to report as the parent type.</returns>
    </member>
    <member name="T:System.Xaml.XamlException">
      <summary>The exception that is thrown for general XAML reader or XAML writer exception cases. See Remarks.</summary>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="M:System.Xaml.XamlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlException" /> class with a specified error message , inner exception, and line information.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. </param>
      <param name="lineNumber">Line number to report to debugging or line information consumers.</param>
      <param name="linePosition">Line position to report to debugging or line information consumers.</param>
    </member>
    <member name="M:System.Xaml.XamlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Implements <see cref="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" /> and provides serialization support for the line information data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.XamlException.LineNumber">
      <summary>Gets or sets the line number component of XAML text line information that the exception reports.</summary>
      <returns>The  line number component of XAML text line information.</returns>
    </member>
    <member name="P:System.Xaml.XamlException.LinePosition">
      <summary>Gets or sets the line position component of XAML text line information that the exception reports.</summary>
      <returns>The  line position component of XAML text line information.</returns>
    </member>
    <member name="P:System.Xaml.XamlException.Message">
      <summary>Gets or sets the exception message with line information appended, if line information is available.</summary>
      <returns>The exception message with line information appended.</returns>
    </member>
    <member name="T:System.Xaml.XamlInternalException">
      <summary>The exception that is thrown for cases of internal inconsistencies during XAML reading and XAML writing. </summary>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlInternalException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlInternalException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlInternalException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Xaml.XamlInternalException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlInternalException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Xaml.XamlLanguage">
      <summary>Defines constants that provide strings or objects that are useful for XAML markup or programming with XAML types. These strings or objects are relevant to XAML language concepts, to the implementation of XAML language concepts in .NET XAML services, or both.</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AllDirectives">
      <summary>Gets a read-only generic collection of each individual <see cref="T:System.Xaml.XamlDirective" /> identifier that is defined in System.Xaml.</summary>
      <returns>A read-only generic collection of each individual <see cref="T:System.Xaml.XamlDirective" /> identifier that is defined in System.Xaml.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AllTypes">
      <summary>Gets a read-only generic collection of individual <see cref="T:System.Xaml.XamlType" /> values that match or alias a XAML language intrinsic and are defined in System.Xaml.</summary>
      <returns>A read-only generic collection of each individual <see cref="T:System.Xaml.XamlType" /> that matches a XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Arguments">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the Arguments of a factory method or a generic usage.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the Arguments of a factory method or generic usage.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Array">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Array XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Array XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.AsyncRecords">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the AsyncRecords pseudomember.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the AsyncRecords pseudomember.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Base">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the base directive from XML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the base directive from XML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Boolean">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Boolean XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Boolean XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Byte">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Byte XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Byte XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Char">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Char XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Char XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Class">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the Class directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the Class directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ClassAttributes">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the ClassAttributes directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the ClassAttributes directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ClassModifier">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the ClassModifier directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the ClassModifier directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Code">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for Code per [MS-XAML].</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for Code per [MS-XAML].</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.ConnectionId">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> that identifies a connection point for wiring events to handlers.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> that identifies a connection point for wiring events to handlers.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Decimal">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Decimal XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Decimal XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Double">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Double XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Double XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.FactoryMethod">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> that identifies a factory method for XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> that identifies a factory method for XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.FieldModifier">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the FieldModifier directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the FieldModifier directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Initialization">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the Initialization directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the Initialization directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int16">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Int16 XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Int16 XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int32">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Int32 XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Int32 XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Int64">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Int64 XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Int64 XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Items">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the Items directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the Items directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Key">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the Key directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the Key directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Lang">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the lang directive from XML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the lang directive from XML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Member">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the type that is the item type of <see cref="P:System.Xaml.XamlLanguage.Members" />.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the type that is the item type of <see cref="P:System.Xaml.XamlLanguage.Members" />.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Members">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the Members concept in XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the Members concept in XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Name">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the Name directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the Name directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Null">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Null/NullExtension XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Null/NullExtension XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Object">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Object XAML language concept.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Object XAML language concept.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.PositionalParameters">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the PositionalParameters directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the PositionalParameters directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Property">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Property concept in XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Property concept in XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Reference">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> that represents a Reference for XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> that represents a Reference for XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Shared">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the Shared directive for XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the Shared directive for XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Single">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Single XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Single XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Space">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the space directive from XML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the space directive from XML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Static">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Static/StaticExtension XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Static/StaticExtension XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.String">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the String XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the String XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Subclass">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the Subclass directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the Subclass directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.SynchronousMode">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> that enables loading XAML asynchronously if the XAML processor supports such a mode.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> that enables loading XAML asynchronously.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.TimeSpan">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the TimeSpan concept in XAML language.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the TimeSpan XAML language concept.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Type">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Type/TypeExtension XAML language intrinsic.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Type/TypeExtension XAML language intrinsic.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.TypeArguments">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the TypeArguments directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the TypeArguments directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Uid">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the Uid directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the Uid directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.UnknownContent">
      <summary>Gets a <see cref="T:System.Xaml.XamlDirective" /> for the UnknownContent directive from XAML.</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> for the UnknownContent directive from XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.Uri">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the Uri XAML language concept.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> for the Uri XAML language concept.</returns>
    </member>
    <member name="F:System.Xaml.XamlLanguage.Xaml2006Namespace">
      <summary>Gets a string value for the string that identifies the XAML (2006) language namespace. That namespace corresponds to the XAML (2006) "x" prefixed namespace as defined in [MS-XAML] Section 5.1.1.</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XamlNamespaces">
      <summary>Gets a collection of the namespace identifiers for XAML.</summary>
      <returns>A collection of the namespace identifiers for XAML.</returns>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XData">
      <summary>Gets a <see cref="T:System.Xaml.XamlType" /> for the XAML type that backs an XData block in XAML. See [MS-XAML] Section 5.2.23.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> for the XAML type that backs an XData block.</returns>
    </member>
    <member name="F:System.Xaml.XamlLanguage.Xml1998Namespace">
      <summary>Gets a string value for the string that identifies the XML (1998) language namespace. That namespace corresponds to the XML "xml" prefixed namespace as referenced in [MS-XAML] Section 5.1.2.</summary>
    </member>
    <member name="P:System.Xaml.XamlLanguage.XmlNamespaces">
      <summary>Gets a collection of the namespace identifiers for XML.</summary>
      <returns>A collection of the namespace identifiers for XML.</returns>
    </member>
    <member name="T:System.Xaml.XamlMember">
      <summary>Provides the XAML type system identifier for members of XAML types. The identifier is used by XAML readers and writers during processing of member nodes (when the reader is positioned on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />).</summary>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class, based on reflection <see cref="T:System.Reflection.EventInfo" /> and a <see cref="T:System.Xaml.XamlSchemaContext" />.</summary>
      <param name="eventInfo">The reflection <see cref="T:System.Reflection.EventInfo" /> representing the event member.</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class, based on reflection <see cref="T:System.Reflection.EventInfo" /> and a <see cref="T:System.Xaml.XamlSchemaContext" />, along with <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information.</summary>
      <param name="eventInfo">The reflection <see cref="T:System.Reflection.EventInfo" /> representing the event member.</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</param>
      <param name="invoker">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that handles runtime reflection calls against the <see cref="T:System.Xaml.XamlMember" />.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class, based on reflection <see cref="T:System.Reflection.PropertyInfo" /> and a <see cref="T:System.Xaml.XamlSchemaContext" />.</summary>
      <param name="propertyInfo">The reflection <see cref="T:System.Reflection.PropertyInfo" /> representing the property member.</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class, based on reflection <see cref="T:System.Reflection.PropertyInfo" /> and a <see cref="T:System.Xaml.XamlSchemaContext" />, along with <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information.</summary>
      <param name="propertyInfo">The reflection <see cref="T:System.Reflection.PropertyInfo" /> representing the property member.</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</param>
      <param name="invoker">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that handles runtime reflection calls against the <see cref="T:System.Xaml.XamlMember" />.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class, specifically for a <see cref="T:System.Xaml.XamlMember" /> that represents an attachable property.</summary>
      <param name="attachablePropertyName">The string name of the attachable property.</param>
      <param name="getter">The reflection <see cref="T:System.Reflection.MethodInfo" /> for the get accessor of the attachable member's backing implementation.</param>
      <param name="setter">The reflection <see cref="T:System.Reflection.MethodInfo" /> for the set accessor of the attachable member's backing implementation.</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class, specifically for a <see cref="T:System.Xaml.XamlMember" /> that represents an attachable property, along with <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information.</summary>
      <param name="attachablePropertyName">The string name of the attachable property.</param>
      <param name="getter">The reflection <see cref="T:System.Reflection.MethodInfo" /> for the get accessor of the attachable member's backing implementation.</param>
      <param name="setter">The reflection <see cref="T:System.Reflection.MethodInfo" /> for the set accessor of the attachable member's backing implementation.</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</param>
      <param name="invoker">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that handles runtime reflection calls against the <see cref="T:System.Xaml.XamlMember" />.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class, specifically for a <see cref="T:System.Xaml.XamlMember" /> that represents an attachable event.</summary>
      <param name="attachableEventName">The string name of the attachable event.</param>
      <param name="adder">The reflection <see cref="T:System.Reflection.MethodInfo" /> for the handler add method of the attachable member's backing implementation.</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class, specifically for a <see cref="T:System.Xaml.XamlMember" /> that represents an attachable event, along with <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information.</summary>
      <param name="attachableEventName">The string name of the attachable event.</param>
      <param name="adder">The reflection <see cref="T:System.Reflection.MethodInfo" />for the handler add method of the attachable member's backing implementation.</param>
      <param name="schemaContext">
        <see cref="T:System.Xaml.XamlSchemaContext" /> context that qualifies the member.</param>
      <param name="invoker">The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation that handles runtime reflection calls against the <see cref="T:System.Xaml.XamlMember" />.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlMember" /> class, using a string name and declaring <see cref="T:System.Xaml.XamlType" /> information. A <see cref="T:System.Xaml.XamlMember" /> constructed with this signature has significant limitations; see Remarks.</summary>
      <param name="name">The string name of the member.</param>
      <param name="declaringType">
        <see cref="T:System.Xaml.XamlType" /> information for the declaring type.</param>
      <param name="isAttachable">true if the member is attachable; otherwise, false.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> or <paramref name="declaringType" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.XamlMember.DeclaringType">
      <summary>Gets the <see cref="T:System.Xaml.XamlType" /> for the type that declares the member associated with this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> for the type that declares the member associated with this <see cref="T:System.Xaml.XamlMember" />.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DeferringLoader">
      <summary>Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for deferred loading of XAML declared objects.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Xaml.XamlDeferringLoader" /> constraint on the generic.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.DependsOn">
      <summary>Gets a list of <see cref="T:System.Xaml.XamlMember" /> objects. These report the members where dependency relationships for initialization order exist relative to this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>A list of <see cref="T:System.Xaml.XamlMember" /> objects.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.Equals(System.Object)">
      <summary>Indicates whether the current object is equal to another object.</summary>
      <returns>true if the current object is equal to the <paramref name="obj" /> parameter; otherwise, false.</returns>
      <param name="obj">The object to compare with this object.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.GetHashCode">
      <summary>Returns the hash code for this object.</summary>
      <returns>An integer hash code.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.GetXamlNamespaces">
      <summary>Returns a list of XAML namespaces where this XAML member can exist. </summary>
      <returns>A list of XAML namespace identifiers as strings. </returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Invoker">
      <summary>Gets the <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation associated with this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>The <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> implementation associated with this <see cref="T:System.Xaml.XamlMember" />.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsAmbient">
      <summary>Gets a value indicating whether this <see cref="T:System.Xaml.XamlMember" /> is reported as being an ambient property.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> is reported as being an ambient property; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsAttachable">
      <summary>Gets a value indicating whether this <see cref="T:System.Xaml.XamlMember" /> is an attachable member.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> is an attachable member; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsDirective">
      <summary>Gets a value indicating whether this <see cref="T:System.Xaml.XamlMember" /> is a XAML directive.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> is a XAML directive; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsEvent">
      <summary>Gets a value indicating whether this <see cref="T:System.Xaml.XamlMember" /> represents an event member.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents an event; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsNameValid">
      <summary>Gets a value indicating whether this <see cref="T:System.Xaml.XamlMember" /> is initialized with a valid xamlName string as its <see cref="P:System.Xaml.XamlMember.Name" />.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> is initialized with a valid xamlName string; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsReadOnly">
      <summary>Gets a value indicating whether this <see cref="T:System.Xaml.XamlMember" /> represents a read-only member.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents a read-only member; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsReadPublic">
      <summary>Gets a value indicating whether this <see cref="T:System.Xaml.XamlMember" /> represents a member with a callable public get accessor.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents a callable public get accessor; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsUnknown">
      <summary>Gets a value indicating whether the member is not resolvable by the backing system used for type and member resolution.</summary>
      <returns>true if the member is not resolvable. false if the member is resolvable.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsWriteOnly">
      <summary>Gets a value indicating whether this <see cref="T:System.Xaml.XamlMember" /> represents a write-only member.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents a write-only member; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.IsWritePublic">
      <summary>Gets a value indicating whether this <see cref="T:System.Xaml.XamlMember" /> represents a member with a callable public set accessor.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents a callable public set accessor; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupCustomAttributeProvider">
      <summary>When implemented in a derived class, returns an <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation.</summary>
      <returns>An <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupDeferringLoader">
      <summary>Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for deferred loading of XAML declared objects.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Xaml.XamlDeferringLoader" /> constraint on the generic.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupDependsOn">
      <summary>Returns a list of <see cref="T:System.Xaml.XamlMember" /> objects. These report the members where dependency relationships for initialization order exist relative to this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>A list of <see cref="T:System.Xaml.XamlMember" /> objects.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupInvoker">
      <summary>Returns a <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> associated with this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>
        <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> information for this <see cref="T:System.Xaml.XamlMember" />, or null.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsAmbient">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlMember" /> is reported as being an ambient property.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> is reported as being an ambient property; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsEvent">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents an event.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents an event; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsReadOnly">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents an intended read-only property.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents an intended read-only property; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsReadPublic">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents a property that has a public get accessor.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents a property with a public get accessor; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsUnknown">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents a member that is not resolvable by the backing system used for type and member resolution.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents a non-resolvable member; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsWriteOnly">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents a member that has a public set accessor but not a public get accessor.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents a write-only member; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupIsWritePublic">
      <summary>Returns whether this <see cref="T:System.Xaml.XamlMember" /> represents a member that has a public set accessor.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlMember" /> represents a writeable member; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupTargetType">
      <summary>Returns the <see cref="T:System.Xaml.XamlType" /> of the type where the <see cref="T:System.Xaml.XamlMember" /> can exist.</summary>
      <returns>The type where the <see cref="T:System.Xaml.XamlMember" /> can exist. See Remarks.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupType">
      <summary>Returns the <see cref="T:System.Xaml.XamlType" /> of the type used by the member. See Remarks.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> of the type used by the member. See Remarks.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupTypeConverter">
      <summary>Returns a type converter implementation that is associated with this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> instance with <see cref="T:System.ComponentModel.TypeConverter" /> constraint, or null.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingGetter">
      <summary>Returns a get accessor that is associated with this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> for the associated get accessor, or null.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingMember">
      <summary>Returns a CLR reflection <see cref="T:System.Reflection.MemberInfo" /> that is associated with this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>A CLR reflection <see cref="T:System.Reflection.MemberInfo" /> that is associated with this <see cref="T:System.Xaml.XamlMember" />, or null.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupUnderlyingSetter">
      <summary>Returns a set accessor that is associated with this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> for the associated set accessor, or null.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.LookupValueSerializer">
      <summary>Returns a value serializer implementation that is associated with this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> instance with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint, or null.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Name">
      <summary>Gets the xamlName name string that declares this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>The xamlName name string that declares this <see cref="T:System.Xaml.XamlMember" />.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
      <summary>Determines whether two specified <see cref="T:System.Xaml.XamlMember" /> objects have the same value.</summary>
      <returns>true if the value of <paramref name="xamlMember1" /> is the same as the value of <paramref name="xamlMember1" />; otherwise, false.</returns>
      <param name="xamlMember1">A <see cref="T:System.Xaml.XamlMember" /> or null.</param>
      <param name="xamlMember2">A <see cref="T:System.Xaml.XamlMember" /> or null.</param>
    </member>
    <member name="M:System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)">
      <summary>Determines whether two specified <see cref="T:System.Xaml.XamlMember" /> objects have different values.</summary>
      <returns>true if the value of <paramref name="xamlMember1" /> is different from the value of <paramref name="xamlMember2" />; otherwise, false.</returns>
      <param name="xamlMember1">A <see cref="T:System.Xaml.XamlMember" /> or null.</param>
      <param name="xamlMember2">A <see cref="T:System.Xaml.XamlMember" /> or null.</param>
    </member>
    <member name="P:System.Xaml.XamlMember.PreferredXamlNamespace">
      <summary>Gets the single XAML namespace URI that identifies the primary XAML namespace for this <see cref="T:System.Xaml.XamlMember" />. </summary>
      <returns>The identifier for the primary XAML namespace for this <see cref="T:System.Xaml.XamlMember" />, as a string.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.SerializationVisibility">
      <summary>Gets a <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> value, which indicates how a visual designer should process the member.</summary>
      <returns>A value of the <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> enumeration. The default is <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.TargetType">
      <summary>Gets the <see cref="T:System.Xaml.XamlType" /> of the type where the <see cref="T:System.Xaml.XamlMember" /> can exist.</summary>
      <returns>The type where the <see cref="T:System.Xaml.XamlMember" /> can exist. See Remarks.</returns>
    </member>
    <member name="M:System.Xaml.XamlMember.ToString">
      <summary>Returns a string representation of this <see cref="T:System.Xaml.XamlMember" />.</summary>
      <returns>A string representation of this <see cref="T:System.Xaml.XamlMember" />.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.Type">
      <summary>Gets the <see cref="T:System.Xaml.XamlType" /> of the type used by the member. See Remarks.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> of the type used by the member. See Remarks.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.TypeConverter">
      <summary>Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for type conversion construction of XAML declared objects.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.ComponentModel.TypeConverter" /> constraint on the generic.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.UnderlyingMember">
      <summary>Gets <see cref="T:System.Reflection.MemberInfo" /> that is available for a member constructed by <see cref="T:System.Reflection.PropertyInfo" />, <see cref="T:System.Reflection.MethodInfo" />, or <see cref="T:System.Reflection.EventInfo" />.</summary>
      <returns>
        <see cref="T:System.Reflection.MemberInfo" /> information as cast from the initial constructor parameters. A <see cref="T:System.Xaml.XamlMember" /> constructed with the <see cref="M:System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)" /> signature returns null.</returns>
    </member>
    <member name="P:System.Xaml.XamlMember.ValueSerializer">
      <summary>Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for value serialization of XAML declared objects.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint on the generic.</returns>
    </member>
    <member name="T:System.Xaml.XamlNodeList">
      <summary>Provides a list of XAML nodes for usages such as writing XAML nodes in a deferred manner.</summary>
    </member>
    <member name="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlNodeList" /> class, using a provided schema context.</summary>
      <param name="schemaContext">The schema context to use for node operations.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeList.#ctor(System.Xaml.XamlSchemaContext,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlNodeList" /> class, using a provided schema context and list size.</summary>
      <param name="schemaContext">The schema context to use for node operations.</param>
      <param name="size">The intended item count of the list.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlNodeList.Clear">
      <summary>Clears the items in this list.</summary>
    </member>
    <member name="P:System.Xaml.XamlNodeList.Count">
      <summary>Gets the number of nodes in this <see cref="T:System.Xaml.XamlNodeList" />.</summary>
      <returns>The number of nodes in this <see cref="T:System.Xaml.XamlNodeList" />.</returns>
    </member>
    <member name="M:System.Xaml.XamlNodeList.GetReader">
      <summary>Returns a XAML reader implementation delegate.</summary>
      <returns>A XAML reader implementation delegate.</returns>
      <exception cref="T:System.Xaml.XamlException">The <see cref="T:System.Xaml.XamlNodeList" /> is still in Write mode.-or-The writer used for the node list has no schema context.</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeList.Writer">
      <summary>Gets the associated XAML writer.</summary>
      <returns>The associated XAML writer. </returns>
    </member>
    <member name="T:System.Xaml.XamlNodeQueue">
      <summary>Provides a buffer for writing nodes and reading them again.</summary>
    </member>
    <member name="M:System.Xaml.XamlNodeQueue.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlNodeQueue" /> class, using a provided schema context.</summary>
      <param name="schemaContext">The schema context to use for node operations.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlSchemaContext" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Count">
      <summary>Gets the number of nodes in the <see cref="T:System.Xaml.XamlNodeQueue" />.</summary>
      <returns>The number of nodes in the <see cref="T:System.Xaml.XamlNodeQueue" />.</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.IsEmpty">
      <summary>Gets a value that determines whether this <see cref="T:System.Xaml.XamlNodeQueue" /> does not contain nodes.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlNodeQueue" /> does not contain nodes. false if this <see cref="T:System.Xaml.XamlNodeQueue" /> contains nodes.</returns>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Reader">
      <summary>Gets a XAML reader implementation delegate.</summary>
      <returns>A XAML reader implementation delegate.</returns>
      <exception cref="T:System.Xaml.XamlException">The writer used for the node list has no schema context.</exception>
    </member>
    <member name="P:System.Xaml.XamlNodeQueue.Writer">
      <summary>Gets the associated XAML writer.</summary>
      <returns>The associated XAML writer. </returns>
    </member>
    <member name="T:System.Xaml.XamlNodeType">
      <summary>Describes the type of the node currently being processed by a XAML reader.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.None">
      <summary>Not a true node (for instance might be end of file).</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.StartObject">
      <summary>The reader is at the start of an object node.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.GetObject">
      <summary>The reader is within an object node and writing a default or implicit value, rather than being a specified object value.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.EndObject">
      <summary>The reader is at the end of an object node.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.StartMember">
      <summary>The reader is at the start of a member node.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.EndMember">
      <summary>The reader is at the end of a member node.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.Value">
      <summary>The reader is within a node and processing a value.</summary>
    </member>
    <member name="F:System.Xaml.XamlNodeType.NamespaceDeclaration">
      <summary>The reader is within an XML namespace declaration.</summary>
    </member>
    <member name="T:System.Xaml.XamlObjectEventArgs">
      <summary>Provides data for callbacks that can be inserted in the sequence for object initialization and property setting performed by <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectEventArgs.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectEventArgs" /> class. </summary>
      <param name="instance">The object instance that is relevant to the event data.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectEventArgs.Instance">
      <summary>Gets the object instance that is relevant to the event data.</summary>
      <returns>The object instance that is relevant to the event data.</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectReader">
      <summary>Provides a <see cref="T:System.Xaml.XamlReader" /> implementation that reads object graphs and generates a XAML node stream.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReader" /> class.</summary>
      <param name="instance">The root of the object tree / object graph to read.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlObjectReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReader" /> class with the specified reader settings.</summary>
      <param name="instance">The root of the object tree to read.</param>
      <param name="settings">A settings object.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReader" /> class with the specified schema context.</summary>
      <param name="instance">The root of the object tree to read.</param>
      <param name="schemaContext">The schema context for the reader to use.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.#ctor(System.Object,System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReader" /> class with the specified schema context and reader settings.</summary>
      <param name="instance">The root of the object tree to read.</param>
      <param name="schemaContext">The schema context for the reader to use.</param>
      <param name="settings">A settings object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Instance">
      <summary>Gets the object instance that is available at the current reader position.</summary>
      <returns>The object instance at the current reader position, or null if the reader position is not on an object.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.IsEof">
      <summary>Gets a value that reports whether the reader position is at the end of the file.</summary>
      <returns>true if the reader position is at the end of the file; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Member">
      <summary>Gets the current <see cref="T:System.Xaml.XamlMember" /> at the reader position, if the reader position is on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />.</summary>
      <returns>The current member, or null if the reader position is not on a member.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Namespace">
      <summary>Gets the XAML namespace declaration from the current reader position.</summary>
      <returns>The XAML namespace declaration if the reader is positioned on a <see cref="F:System.Xaml.XamlNodeType.NamespaceDeclaration" />; otherwise, null.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>The type of the current node.</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectReader.Read">
      <summary>Provides the next XAML node from the source object graph, if a node is available. </summary>
      <returns>true if a node is available; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.SchemaContext">
      <summary>Gets an object that provides schema information for the information set.</summary>
      <returns>An object that provides schema information for the information set.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Type">
      <summary>Gets the <see cref="T:System.Xaml.XamlType" /> of the object at the current reader position.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> of the object at the current reader position, or null if the position is not on an object.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectReader.Value">
      <summary>Gets the value of the node at the current reader position.</summary>
      <returns>The value of the current node, or null if the reader position is not on a <see cref="F:System.Xaml.XamlNodeType.Value" /> node type.</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectReaderException">
      <summary>The exception that is thrown by several <see cref="T:System.Xaml.XamlObjectReader" /> internal helper APIs. </summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReaderException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReaderException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReaderException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReaderException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Xaml.XamlObjectReaderSettings">
      <summary>Specifies processing rules or option settings for a <see cref="T:System.Xaml.XamlObjectReader" />.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectReaderSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectReaderSettings" /> class.</summary>
    </member>
    <member name="P:System.Xaml.XamlObjectReaderSettings.RequireExplicitContentVisibility">
      <summary>Gets or sets a value that determines whether writers that use the associated <see cref="T:System.Xaml.XamlObjectReader" /> for context should use designer settings for writing out content.</summary>
      <returns>true if writers with this context should use designer settings for writing out content in non-<see cref="P:System.Xaml.XamlMember.IsWritePublic" /> cases. false if designer settings should be ignored.</returns>
    </member>
    <member name="T:System.Xaml.XamlObjectWriter">
      <summary>Creates an object graph from a source XAML node stream.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriter" /> class that is based on the context that is used by a <see cref="T:System.Xaml.XamlReader" />.</summary>
      <param name="schemaContext">A schema context that is shared with the XAML reader that provides nodes for writing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.#ctor(System.Xaml.XamlSchemaContext,System.Xaml.XamlObjectWriterSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriter" /> class that is based on the context that is used by a <see cref="T:System.Xaml.XamlReader" /> and its settings.</summary>
      <param name="schemaContext">A schema context that is shared with the XAML reader that provides nodes for writing.</param>
      <param name="settings">A settings object that specifies certain options for <see cref="T:System.Xaml.XamlObjectWriter" /> behavior and output.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.Clear">
      <summary>Resets all possible frames and clears the object graph.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources that are used by the <see cref="T:System.Xaml.XamlObjectWriter" />, and optionally, releases the managed resources. </summary>
      <param name="disposing">true to release the managed resources; otherwise, false.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterBeginInit(System.Object)">
      <summary>Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler" /> method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
      <param name="value">The object to report on. The object is packaged into <see cref="T:System.Xaml.XamlObjectEventArgs" /> when the handler is invoked.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterEndInit(System.Object)">
      <summary>Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler" /> method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
      <param name="value">The object to report on. This is packaged into <see cref="T:System.Xaml.XamlObjectEventArgs" /> when the handler is invoked.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnAfterProperties(System.Object)">
      <summary>Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler" /> referenced method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
      <param name="value">The object to report on. This is packaged into <see cref="T:System.Xaml.XamlObjectEventArgs" /> when the handler is invoked.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnBeforeProperties(System.Object)">
      <summary>Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler" /> referenced method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
      <param name="value">Value to pass through <see cref="T:System.Xaml.XamlObjectEventArgs" /> when the handler is invoked.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.OnSetValue(System.Object,System.Xaml.XamlMember,System.Object)">
      <summary>Invokes any <see cref="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler" /> referenced method that is associated with <see cref="T:System.Xaml.XamlObjectWriterSettings" /> for this writer, as long as <paramref name="handled" /> in <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" /> event data is not true.</summary>
      <returns>A Boolean value that is set by any associated handler; otherwise, false. See Remarks.</returns>
      <param name="eventSender">Object to report to the handler as the source.</param>
      <param name="member">The name of the property to set, which is passed to the handler as part of <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />.</param>
      <param name="value">The value to provide for the property named by <paramref name="property" />, which is passed to the handler as part of <see cref="T:System.Windows.Markup.XamlSetValueEventArgs" />.</param>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.Result">
      <summary>Gets the last object written. Can be null if the writer is in certain scopes.</summary>
      <returns>The last object written, or null. See Remarks.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.RootNameScope">
      <summary>Gets the <see cref="T:System.Windows.Markup.INameScope" /> service that maintains the XAML namescope for the absolute node root of the XAML object writer.</summary>
      <returns>The <see cref="T:System.Windows.Markup.INameScope" /> service that maintains the XAML namescope for the current root of the object writer.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.SchemaContext">
      <summary>Gets the active schema context.</summary>
      <returns>The schema context.</returns>
      <exception cref="T:System.InvalidOperationException">Attempted to use the set accessor.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.SetLineInfo(System.Int32,System.Int32)">
      <summary>Implements <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> and provides line information for exceptions.</summary>
      <param name="lineNumber">The line number from the reader.</param>
      <param name="linePosition">The line position from the reader.</param>
    </member>
    <member name="P:System.Xaml.XamlObjectWriter.ShouldProvideLineInfo">
      <summary>Gets a value that reports whether a line information service should provide values and therefore, also call <see cref="M:System.Xaml.IXamlLineInfoConsumer.SetLineInfo(System.Int32,System.Int32)" /> when relevant.</summary>
      <returns>true if line information is used by the writer; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteEndMember">
      <summary>Closes the current member scope, and may write the value of the member scope while it closes. The new scope becomes the parent object scope of the member.</summary>
      <exception cref="T:System.Xaml.XamlObjectWriterException">Failed to create member value from inner text/value.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteEndObject">
      <summary>Closes the current object scope in the writer. The new object scope becomes the parent member scope (or it becomes the root scope if the method closes the root object).</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteGetObject">
      <summary>Writes out an object for cases where the specified object is a default or implicit value of the parent property, instead of being specified as an object value in the input XAML node set.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>Defines a namespace declaration that applies to the next object scope or member scope.</summary>
      <param name="namespaceDeclaration">The namespace declaration to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceDeclaration" /> is null.</exception>
      <exception cref="T:System.ArgumentException">A component of <paramref name="namespaceDeclaration" /> is null.</exception>
      <exception cref="T:System.Xaml.XamlObjectReaderException">Attempted to write a XAML namespace node in an invalid scope.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>Writes a new member node into the current object scope, and the scope becomes a new member scope.</summary>
      <param name="property">The XAML property to write. Typically you obtain this value from a XAML reader.</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">
        <paramref name="property" /> has <see cref="P:System.Xaml.XamlMember.IsUnknown" /> set to true.-or-<see cref="P:System.Xaml.XamlLanguage.UnknownContent" /> passed, but not a content property.-or-Attempted to write a start member in an invalid scope.</exception>
      <exception cref="T:System.Xaml.XamlDuplicateMemberException">
        <paramref name="property" /> specifies a property that is already explicitly set in the parent object scope.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>Writes an object node into the current scope, and sets the scope to a new object scope.</summary>
      <param name="xamlType">The type to write. Typically you obtain this value from a XAML reader.</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">Processing an <see cref="P:System.Xaml.XamlType.IsUnknown" /> type, and cannot create an object.-or-Attempted to write a start object in an invalid scope.</exception>
      <exception cref="T:System.Xaml.XamlParseException">Attempted to write root object when root object was already provided in the settings. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlObjectWriter.WriteValue(System.Object)">
      <summary>Writes a value to the current member scope. If the current scope is inside a collection, dictionary, or array object, the value should be added to the collection, dictionary, or array.</summary>
      <param name="value">The value to write.</param>
      <exception cref="T:System.Xaml.XamlObjectWriterException">Attempted to write value in an invalid scope.</exception>
    </member>
    <member name="T:System.Xaml.XamlObjectWriterException">
      <summary>The exception that is thrown when a XAML writer (such as <see cref="T:System.Xaml.XamlObjectWriter" /> class) encounters an error while attempting to produce object graphs from a XAML node stream. </summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriterException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriterException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriterException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriterException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Xaml.XamlObjectWriterSettings">
      <summary>Provides specific XAML writer settings for <see cref="T:System.Xaml.XamlObjectWriter" />.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriterSettings" /> class.</summary>
    </member>
    <member name="M:System.Xaml.XamlObjectWriterSettings.#ctor(System.Xaml.XamlObjectWriterSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlObjectWriterSettings" /> class that is based on the copy of an existing instance.</summary>
      <param name="settings">The settings instance to copy.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="settings" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AccessLevel">
      <summary>Gets or sets <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> permissions that the XAML writer observes.</summary>
      <returns>The <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> permissions.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterBeginInitHandler">
      <summary>Gets or sets a reference to a callback that is invoked by the XAML writer at the <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> phase of the object lifetime for each created object.</summary>
      <returns>A callback that is invoked by the XAML writer at the <see cref="M:System.ComponentModel.ISupportInitialize.BeginInit" /> phase of object lifetime.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterEndInitHandler">
      <summary>Gets or sets a reference to a callback that is invoked by the XAML writer at the <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> phase of the object lifetime for each created object.</summary>
      <returns>A callback that is invoked by the XAML writer at the <see cref="M:System.ComponentModel.ISupportInitialize.EndInit" /> phase of object lifetime.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.AfterPropertiesHandler">
      <summary>Gets or sets a reference to a callback that is invoked by the XAML writer at the post-member-write phase of the object lifetime for each created object.</summary>
      <returns>A callback that is invoked by the XAML writer at the post-member-write phase of object lifetime.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.BeforePropertiesHandler">
      <summary>Gets or sets a reference to a callback that is invoked by the XAML writer at the pre-member-write phase of the object lifetime for each created object.</summary>
      <returns>A callback that is invoked by the XAML writer at the pre-member-write phase of object lifetime.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope">
      <summary>Gets or sets the XAML namescope to use for registering names from the XAML writer if <see cref="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope" /> is true.</summary>
      <returns>The XAML namescope to use for registering names. The default is null.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.IgnoreCanConvert">
      <summary>Gets or sets a value that specifies whether the XAML writer should ignore (not call) <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> implementations on a <see cref="T:System.ComponentModel.TypeConverter" /> in type-converter situations.</summary>
      <returns>true if the XAML writer ignores <see cref="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)" /> implementations; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.PreferUnconvertedDictionaryKeys">
      <summary>Gets or sets a value that determines whether to disable a default <see cref="T:System.Xaml.XamlObjectWriter" /> feature that runs type conversion on the <paramref name="K" /> component of a <see cref="T:System.Collections.Generic.Dictionary`2" /> before writing the object graph representation.</summary>
      <returns>true if <paramref name="K" /> type conversion for a <see cref="T:System.Collections.Generic.Dictionary`2" /> object should be disabled. false if performing <paramref name="K" /> type conversion for a <see cref="T:System.Collections.Generic.Dictionary`2" /> object applies. The default is false.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.RegisterNamesOnExternalNamescope">
      <summary>Gets or sets a value that determines whether name registration should occur against the specified <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" />.</summary>
      <returns>true if name registration should occur against the <see cref="P:System.Xaml.XamlObjectWriterSettings.ExternalNameScope" />; false if name registration should occur into the parent XAML namescope. The default is false.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.RootObjectInstance">
      <summary>Gets or sets a preexisting root object for <see cref="T:System.Xaml.XamlObjectWriter" /> operations.</summary>
      <returns>A preexisting root object for <see cref="T:System.Xaml.XamlObjectWriter" /> operations.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SkipDuplicatePropertyCheck">
      <summary>Gets or sets a value that determines whether the XAML writer omits to check for the code path that checks for duplicate properties. </summary>
      <returns>true if the duplicate property check should be omitted; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.SkipProvideValueOnRoot">
      <summary>Gets or sets a value that indicates whether the <see cref="T:System.Xaml.XamlObjectWriter" /> should omit a call ProvideValue on a markup extension, which is relevant when the markup extension represents the root of an object graph. </summary>
      <returns>true if the <see cref="T:System.Xaml.XamlObjectWriter" /> should omit to call ProvideValue on a markup extension; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlObjectWriterSettings.XamlSetValueHandler">
      <summary>Gets or sets the handler to use when the object writer calls into a CLR-implemented SetValue for dependency properties.</summary>
      <returns>A handler implementation that handles this case.</returns>
    </member>
    <member name="T:System.Xaml.XamlParseException">
      <summary>The exception that is thrown when a XAML reader cannot process elements of the reader source into a XAML node stream.</summary>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlParseException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlParseException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlParseException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Xaml.XamlParseException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlParseException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Xaml.XamlReader">
      <summary>Provides base definitions for classes that consume XAML input and produce XAML node streams.</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.#ctor">
      <summary>Initializes the <see cref="T:System.Xaml.XamlReader" /> class.</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.Close">
      <summary>Closes the XAML node stream.</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Xaml.XamlReader" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release the managed resources; otherwise, false.</param>
    </member>
    <member name="P:System.Xaml.XamlReader.IsDisposed">
      <summary>Gets whether <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> has been called.</summary>
      <returns>true if <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> has been called; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.IsEof">
      <summary>When implemented in a derived class, gets a value that reports whether the reader position is at end of file.</summary>
      <returns>true if the position is at the conceptual end of file of the XAML node stream; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Member">
      <summary>When implemented in a derived class, gets the current member at the reader position, if the reader position is on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />.</summary>
      <returns>The current member; or null if the position is not on a member.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Namespace">
      <summary>When implemented in a derived class, gets the XAML namespace information from the current node.</summary>
      <returns>The XAML namespace information, if it is available; otherwise, null.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.NodeType">
      <summary>When implemented in a derived class, gets the type of the current node.</summary>
      <returns>A value of the <see cref="T:System.Xaml.XamlNodeType" /> enumeration.</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.Read">
      <summary>When implemented in a derived class, provides the next XAML node from the source, if a node is available. </summary>
      <returns>true if a node is available; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.ReadSubtree">
      <summary>Returns a <see cref="T:System.Xaml.XamlReader" /> based on the current <see cref="T:System.Xaml.XamlReader" />, where the returned <see cref="T:System.Xaml.XamlReader" /> is used to iterate through a subtree of the XAML node structure.</summary>
      <returns>A new XAML reader instance for the subtree.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.SchemaContext">
      <summary>When implemented in a derived class, gets an object that provides XAML schema context information for the information set.</summary>
      <returns>An object that provides XAML schema context information for the information set.</returns>
    </member>
    <member name="M:System.Xaml.XamlReader.Skip">
      <summary>Skips the current node and advances the reader position to the next node.</summary>
    </member>
    <member name="M:System.Xaml.XamlReader.System#IDisposable#Dispose">
      <summary>Releases all resources used by the current instance of the <see cref="T:System.Xaml.XamlReader" /> class.</summary>
    </member>
    <member name="P:System.Xaml.XamlReader.Type">
      <summary>When implemented in a derived class, gets the <see cref="T:System.Xaml.XamlType" /> of the current node.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> of the current node; or null, if the current reader position is not on an object.</returns>
    </member>
    <member name="P:System.Xaml.XamlReader.Value">
      <summary>When implemented in a derived class, gets the value of the current node.</summary>
      <returns>The value of the current node; or null, if the current reader position is not on a <see cref="F:System.Xaml.XamlNodeType.Value" /> node type.</returns>
    </member>
    <member name="T:System.Xaml.XamlReaderSettings">
      <summary>Specifies processing rules or option settings for a <see cref="T:System.Xaml.XamlReader" /> implementation.</summary>
    </member>
    <member name="M:System.Xaml.XamlReaderSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlReaderSettings" /> class.</summary>
    </member>
    <member name="M:System.Xaml.XamlReaderSettings.#ctor(System.Xaml.XamlReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlReaderSettings" /> class based on values in another <see cref="T:System.Xaml.XamlReaderSettings" /> object .</summary>
      <param name="settings">An existing <see cref="T:System.Xaml.XamlReaderSettings" /> object.</param>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.AllowProtectedMembersOnRoot">
      <summary>Gets or sets a value that indicates whether the root object may include members that have a protected code access model when it reports the XAML type representation.</summary>
      <returns>true if the root object may include members that have a protected code access model; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.BaseUri">
      <summary>Gets or sets the base URI that is used to resolve relative paths.</summary>
      <returns>The base URI to use.</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.IgnoreUidsOnPropertyElements">
      <summary>Gets or sets a value that specifies whether the reader should ignore values for x:Uid attributes that exist on property elements.</summary>
      <returns>true if the reader should ignore values for x:Uid attributes on property elements. false if the reader should process x:Uid attributes on property elements. The default is false.</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.LocalAssembly">
      <summary>Gets or sets the object that represents the current local assembly for processing. This assembly information is used for calls to helper APIs such as <see cref="M:System.Xaml.XamlType.GetAllMembers" />.</summary>
      <returns>A CLR reflection <see cref="T:System.Reflection.Assembly" /> object.</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.ProvideLineInfo">
      <summary>Gets or sets a value that specifies whether the reader can provide line number and position.</summary>
      <returns>true if the reader can provide line number and position information; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlReaderSettings.ValuesMustBeString">
      <summary>Gets or sets a value that specifies whether the reader enforces that all Value nodes are processed as a String type.</summary>
      <returns>true if the reader uses String exclusively for Value nodes; otherwise, false. The default is false.</returns>
    </member>
    <member name="T:System.Xaml.XamlSchemaContext">
      <summary>Defines a reusable context for interpreting or mapping XAML types and the types in assemblies that underlie them.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContext" /> class.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContext" /> class based on a set of reference assemblies.</summary>
      <param name="referenceAssemblies">An enumerable set of assemblies (each specified by <see cref="T:System.Reflection.Assembly" /> values).</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContext" /> class based on a set of reference assemblies and a settings object.</summary>
      <param name="referenceAssemblies">An enumerable set of assemblies (each specified by <see cref="T:System.Reflection.Assembly" /> values).</param>
      <param name="settings">The settings object to use to construct the <see cref="T:System.Xaml.XamlSchemaContext" />.</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContext" /> class based on a settings object.</summary>
      <param name="settings">The settings object to use to construct the <see cref="T:System.Xaml.XamlSchemaContext" />.</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.Finalize">
      <summary>Provides a nonstandard Finalize implementation that does not invoke Dispose.</summary>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces">
      <summary>Gets a value that specifies whether a XAML schema and its context use fully qualified assembly names in the values returned by the lookup API.</summary>
      <returns>true if a XAML schema and its context use fully qualified assembly names in the values returned by the lookup APIs; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces">
      <summary>Searches the assemblies held by this <see cref="T:System.Xaml.XamlSchemaContext" /> and returns a set of namespaces. </summary>
      <returns>An enumerable set of namespace identifiers. These are provided as strings (not necessarily true URIs).</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)">
      <summary>Searches the assemblies held by this <see cref="T:System.Xaml.XamlSchemaContext" /> and returns a set of types from the specified XAML namespace. </summary>
      <returns>An enumerable set of XAML types (<see cref="T:System.Xaml.XamlType" /> objects).</returns>
      <param name="xamlNamespace">The XAML namespace to return types for.</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)">
      <summary>Gets a string that is reported as the preferred prefix for consumers to use when mapping the specified XAML namespace.</summary>
      <returns>A string that consumers should use when mapping the specified XAML namespace for markup use.</returns>
      <param name="xmlns">The XAML namespace to get the preferred prefix for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlns" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)">
      <summary>Returns a value converter that can convert to the requested <paramref name="targetType." /></summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, with constraint matching the constraint placed on the method call.</returns>
      <param name="converterType">The converter implementation.</param>
      <param name="targetType">The desired conversion destination type.</param>
      <typeparam name="TConverterBase">The specific converter base class. </typeparam>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)">
      <summary>Returns a <see cref="T:System.Xaml.XamlDirective" /> value that represents a directive (either for the XAML language, or for a particular implementation).</summary>
      <returns>A <see cref="T:System.Xaml.XamlDirective" /> object that represents the requested directive.</returns>
      <param name="xamlNamespace">The XAML namespace that contains the named directive.</param>
      <param name="name">The name of the directive to get.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlNamespace" /> or <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])">
      <summary>Returns a <see cref="T:System.Xaml.XamlType" /> based on a XAML namespace, a string for type name, and type arguments for a possible generic type.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> that matches the input criteria.</returns>
      <param name="xamlNamespace">The XAML namespace that contains the desired type.</param>
      <param name="name">String name of the desired type.</param>
      <param name="typeArguments">Initialization type arguments for a generic type.</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Type)">
      <summary>Returns a <see cref="T:System.Xaml.XamlType" /> based on a CLR type identifier.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> that matches the input <paramref name="type" />.</returns>
      <param name="type">The type to get a <see cref="T:System.Xaml.XamlType" /> for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)">
      <summary>Returns a <see cref="T:System.Xaml.XamlType" /> based on a XAML system type name.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> that matches the input <paramref name="xamlTypeName" />.</returns>
      <param name="xamlTypeName">The XAML type name to get a <see cref="T:System.Xaml.XamlType" /> for.</param>
      <exception cref="T:System.ArgumentException">A component of <paramref name="xamlTypeName" /> (<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> or <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" />) is null.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlTypeName" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)">
      <summary>Called when operations use this schema context to resolve an assembly that is required in order to resolve the XAML namespaces it contains.</summary>
      <returns>The resolved assembly.</returns>
      <param name="assemblyName">The name of the assembly to load. See Remarks.</param>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.ReferenceAssemblies">
      <summary>Gets an enumerable set of reference assemblies for the schema context.</summary>
      <returns>An enumerable set of reference assemblies for the schema context.</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity">
      <summary>Gets a value that specifies whether a XAML schema and its context support markup extensions where there are two constructors with the same arity (number of input parameters).</summary>
      <returns>true if the schema context permits markup extensions with duplicate arity; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)">
      <summary>Returns success or failure of a request for a compatible XAML namespace, with a successful request reporting that XAML namespace as an out parameter.</summary>
      <returns>true if <paramref name="compatibleNamespace" /> contains a usable result; otherwise, false.</returns>
      <param name="xamlNamespace">The xmlns string  for the XAML namespace to be checked for a compatible result.</param>
      <param name="compatibleNamespace">If successful, the xmlns string for a compatible XAML namespace.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlNamespace" /> is null.</exception>
    </member>
    <member name="T:System.Xaml.XamlSchemaContextSettings">
      <summary>Provides optional settings for a <see cref="T:System.Xaml.XamlSchemaContext" />.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContextSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContextSettings" /> class.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaContextSettings.#ctor(System.Xaml.XamlSchemaContextSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaContextSettings" /> class by copying the values of an existing <see cref="T:System.Xaml.XamlSchemaContextSettings" /> instance.</summary>
      <param name="settings">An existing <see cref="T:System.Xaml.XamlSchemaContextSettings" />. </param>
    </member>
    <member name="P:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces">
      <summary>Gets or sets a value that specifies whether a XAML schema and its context use fully qualified assembly names in the values returned by the lookup API.</summary>
      <returns>true if a XAML schema and its context use fully qualified assembly names in the values returned by the lookup APIs; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity">
      <summary>Gets or sets a value that specifies whether a XAML schema and its context support markup extensions where there are two constructors with the same arity (number of input parameters).</summary>
      <returns>true if the schema context permits markup extensions with duplicate arity; otherwise, false.</returns>
    </member>
    <member name="T:System.Xaml.XamlSchemaException">
      <summary>The exception that is thrown when a binding system or other schema representation system for XAML reports an exception to the schema context.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Xaml.XamlSchemaException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlSchemaException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Xaml.XamlServices">
      <summary>Provides higher-level services (static methods) for the common XAML tasks of reading XAML and writing an object graph; or reading an object graph and writing XAML file output for serialization purposes.</summary>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.IO.Stream)">
      <summary>Loads a <see cref="T:System.IO.Stream" /> source for a XAML reader and outputs an object graph.</summary>
      <returns>The output object graph.</returns>
      <param name="stream">The stream to load as input.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.IO.TextReader)">
      <summary>Creates a XAML reader from a <see cref="T:System.IO.TextReader" />, and returns an object tree.</summary>
      <returns>The output object graph.</returns>
      <param name="textReader">The <see cref="T:System.IO.TextReader" /> to use as the basis for the created <see cref="T:System.Xml.XmlReader" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.String)">
      <summary>Loads a <see cref="T:System.IO.Stream" /> source for a XAML reader and outputs an object graph.</summary>
      <returns>The output object graph.</returns>
      <param name="fileName">The file name to load and use as source.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> input is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.Xaml.XamlReader)">
      <summary>Loads a specific XAML reader implementation and returns an object graph.</summary>
      <returns>The output object graph.</returns>
      <param name="xamlReader">The XAML reader implementation to use as the reader for this Load operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> input is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Load(System.Xml.XmlReader)">
      <summary>Loads a specific XML reader implementation and returns an object graph.</summary>
      <returns>The output object graph.</returns>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> implementation to use as the reader for this Load operation.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> input is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Parse(System.String)">
      <summary>Reads XAML as string output and returns an object graph.</summary>
      <returns>The output object graph.</returns>
      <param name="xaml">The XAML string input to parse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xaml" /> input is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.IO.Stream,System.Object)">
      <summary>Processes a provided object graph into a XAML node representation and then into an output stream for serialization.</summary>
      <param name="stream">The destination stream.</param>
      <param name="instance">The root of the object graph to process.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> input is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.IO.TextWriter,System.Object)">
      <summary>Processes a provided object graph into a XAML node representation and then into an output that goes to the provided <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="writer">The <see cref="T:System.IO.TextWriter" /> that writes the output.</param>
      <param name="instance">The root of the object graph to process.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> input is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Object)">
      <summary>Processes a provided object tree into a XAML node representation, and returns a string representation of the output XAML.</summary>
      <returns>The XAML markup output as a string. </returns>
      <param name="instance">The root of the object graph to process.</param>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.String,System.Object)">
      <summary>Processes a provided object graph into a XAML node representation and then writes it to an output file at a provided location.</summary>
      <param name="fileName">The name and location of the file to write the output to.</param>
      <param name="instance">The root of the object graph to process.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="fileName" /> is an empty string.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Xaml.XamlWriter,System.Object)">
      <summary>Processes a provided object graph into a XAML node representation and then writes it to the provided XAML writer.</summary>
      <param name="writer">The <see cref="T:System.Xaml.XamlWriter" /> implementation to use.</param>
      <param name="instance">The root of the object graph to process.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> input is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Save(System.Xml.XmlWriter,System.Object)">
      <summary>Processes a provided object graph into a XAML node representation and then writes it to the provided <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> implementation to use.</param>
      <param name="instance">The root of the object graph to process.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> input is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter)">
      <summary>Connects a <see cref="T:System.Xaml.XamlReader" /> and a <see cref="T:System.Xaml.XamlWriter" /> to use a common XAML node set intermediary. Potentially transforms the content, depending on the types of readers and writers that are provided.</summary>
      <param name="xamlReader">The <see cref="T:System.Xaml.XamlReader" /> implementation to use.</param>
      <param name="xamlWriter">The <see cref="T:System.Xaml.XamlWriter" /> to use.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> or <paramref name="xamlWriter" /> input is null.</exception>
      <exception cref="T:System.Xaml.XamlException">The XAML schema context does not match between the provided <paramref name="xamlReader" /> and <paramref name="xamlWriter" />.</exception>
    </member>
    <member name="M:System.Xaml.XamlServices.Transform(System.Xaml.XamlReader,System.Xaml.XamlWriter,System.Boolean)">
      <summary>Connects a <see cref="T:System.Xaml.XamlReader" /> and a <see cref="T:System.Xaml.XamlWriter" /> to use a common XAML node set intermediary. Potentially transforms the content, depending on the types of readers and writers that are provided. Provides a parameter for specifying whether to close the writer after the call is completed.</summary>
      <param name="xamlReader">The <see cref="T:System.Xaml.XamlReader" /> implementation to use.</param>
      <param name="xamlWriter">The <see cref="T:System.Xaml.XamlWriter" /> to use.</param>
      <param name="closeWriter">true to close the writer after the call is complete; false to leave the writer active at the last written position.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlReader" /> or <paramref name="xamlWriter" /> input is null.</exception>
      <exception cref="T:System.Xaml.XamlException">The XAML schema context does not match between the provided <paramref name="xamlReader" /> and <paramref name="xamlWriter" />.</exception>
    </member>
    <member name="T:System.Xaml.XamlType">
      <summary>Reports information about XAML types as part of the overall XAML system that is implemented in System.Xaml.</summary>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class that is based on a string name for the type.</summary>
      <param name="typeName">The name of the type to create.</param>
      <param name="typeArguments">The type arguments for cases where the <see cref="T:System.Xaml.XamlType" /> is generic. May be (and often is) null.</param>
      <param name="schemaContext">Context for the XAML reader.</param>
      <exception cref="T:System.ArgumentNullException">One or more of <paramref name="typeName" /> or <paramref name="schemaContext" /> are null.</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.String,System.String,System.Collections.Generic.IList{System.Xaml.XamlType},System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class that is based on the XAML namespace and a string name for the type. This constructor is exclusively for analysis and XAML-node recording of types that are known to not have backing in the supporting type system and XAML schema context.</summary>
      <param name="unknownTypeNamespace">The XAML namespace for the type, as a string.</param>
      <param name="unknownTypeName">The name of the type in the provided <paramref name="unknownTypeNamespace" /> XAML namespace.</param>
      <param name="typeArguments">The type arguments for cases where the <see cref="T:System.Xaml.XamlType" /> is generic. May be (and often is) null.</param>
      <param name="schemaContext">The context for the XAML reader.</param>
      <exception cref="T:System.ArgumentNullException">One or more of <paramref name="unknownTypeNamespace" />, <paramref name="unknownTypeName" />, or <paramref name="schemaContext" /> are null.</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class that is based on the underlying CLR type information.</summary>
      <param name="underlyingType">The underlying CLR <see cref="T:System.Type" /> for the XAML type to construct.</param>
      <param name="schemaContext">The context for the XAML reader.</param>
      <exception cref="T:System.ArgumentNullException">One or more of <paramref name="underlyingType" /> or <paramref name="schemaContext" /> are null.</exception>
    </member>
    <member name="M:System.Xaml.XamlType.#ctor(System.Type,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlTypeInvoker)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlType" /> class that is based on underlying type information and a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> implementation.</summary>
      <param name="underlyingType">The underlying type for the XAML type to construct.</param>
      <param name="schemaContext">The context for the XAML reader.</param>
      <param name="invoker">The <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> implementation that handles run-time reflection calls against the <see cref="T:System.Xaml.XamlType" />.</param>
      <exception cref="T:System.ArgumentNullException">One or more of <paramref name="underlyingType" /> or <paramref name="schemaContext" /> are null.</exception>
    </member>
    <member name="P:System.Xaml.XamlType.AllowedContentTypes">
      <summary>Gets a read-only collection of the types that are usable as the <see cref="P:System.Xaml.XamlType.ContentProperty" /> value for this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A read-only collection of possible content types.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.BaseType">
      <summary>Gets the <see cref="T:System.Xaml.XamlType" /> for the immediate base type of this XAML type. Determination of this value is based on the underlying type of this <see cref="T:System.Xaml.XamlType" /> and schema context.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> for the immediate base type of this XAML type.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.CanAssignTo(System.Xaml.XamlType)">
      <summary>Returns a value that indicates whether an instance of this <see cref="T:System.Xaml.XamlType" /> has the specified <see cref="T:System.Xaml.XamlType" /> in its list of assignable types.</summary>
      <returns>true if <paramref name="xamlType" /> is in the assignable types list; otherwise, false.</returns>
      <param name="xamlType">The type to check assignment from.</param>
    </member>
    <member name="P:System.Xaml.XamlType.ConstructionRequiresArguments">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> must have arguments (generic constraints through x:TypeArguments, initialization text, or other XAML techniques) to construct a valid instance of the type.</summary>
      <returns>true if construction of an instance requires some argument value; otherwise, false. </returns>
    </member>
    <member name="P:System.Xaml.XamlType.ContentProperty">
      <summary>Gets the <see cref="T:System.Xaml.XamlMember" /> information for the content property of this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> information for the content property of this <see cref="T:System.Xaml.XamlType" />. May be null if no content property exists.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ContentWrappers">
      <summary>Gets the types that are used to wrap content for a content property when it is not a strict type match, such as strings in a strongly typed Collection&lt;T&gt;.</summary>
      <returns>A read-only collection of possible content wrapper types; otherwise, null. See Remarks.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.DeferringLoader">
      <summary>Gets the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> that represents the deferred loading conversion behavior for this type.</summary>
      <returns>The <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Xaml.XamlDeferringLoader" /> constraint that represents the deferred loading behavior for this type.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.Equals(System.Object)">
      <summary>Indicates whether the current object is equal to another object.</summary>
      <returns>true if the current object is equal to the <paramref name="obj" /> parameter; otherwise, false.</returns>
      <param name="obj">The object to compare with this object.</param>
    </member>
    <member name="M:System.Xaml.XamlType.Equals(System.Xaml.XamlType)">
      <summary>Indicates whether the current object is equal to another object of the same type.</summary>
      <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:System.Xaml.XamlType.GetAliasedProperty(System.Xaml.XamlDirective)">
      <summary>Returns the XAML member that is aliased to a XAML directive by this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>The aliased member, if found; otherwise, null.</returns>
      <param name="directive">The directive to find the aliased member.</param>
    </member>
    <member name="M:System.Xaml.XamlType.GetAllAttachableMembers">
      <summary>Returns a collection that contains all the attachable properties that are exposed by this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A collection that contains zero or more <see cref="T:System.Xaml.XamlMember" /> values.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAllMembers">
      <summary>Returns a collection that contains all the members that are exposed by this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A collection that contains zero or more <see cref="T:System.Xaml.XamlMember" /> values.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetAttachableMember(System.String)">
      <summary>Specifies the name of the attachable member of the <see cref="T:System.Xaml.XamlMember" /> object from this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A <see cref="T:System.Xaml.XamlMember" /> object for the requested attachable member; otherwise, null, if no attachable member by that name exists.</returns>
      <param name="name">The name of the attachable member to get, in ownerTypeName.MemberName form.</param>
    </member>
    <member name="M:System.Xaml.XamlType.GetHashCode">
      <summary>Returns the hash code for this object.</summary>
      <returns>An integer hash code.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.GetMember(System.String)">
      <summary>Returns a specific member from this <see cref="T:System.Xaml.XamlType" /> by name.</summary>
      <returns>The <see cref="T:System.Xaml.XamlMember" /> information for the member, if such a member was found; otherwise, null.</returns>
      <param name="name">The name of the member to get (as a string).</param>
    </member>
    <member name="M:System.Xaml.XamlType.GetPositionalParameters(System.Int32)">
      <summary>For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A list of <see cref="T:System.Xaml.XamlType" /> values, where each <see cref="T:System.Xaml.XamlType" /> is the type for that position in the syntax. You must specify the types in the same order when you supply markup input for the markup extension.</returns>
      <param name="parameterCount">The count (arity) of the particular syntax or constructor mode that you want information about.</param>
    </member>
    <member name="M:System.Xaml.XamlType.GetXamlNamespaces">
      <summary>Returns a list of string identifiers for XAML namespaces that the type is included in.</summary>
      <returns>A list of string values, where each string is the URI identifier for a XAML namespace.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.Invoker">
      <summary>Gets the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> implementation that is associated with this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>The <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> implementation that is associated with this <see cref="T:System.Xaml.XamlType" />.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsAmbient">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents an ambient type, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents an ambient type; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsArray">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents an array.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents an array; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsCollection">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a collection.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a collection; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsConstructible">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a constructible type, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a constructible type; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsDictionary">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a dictionary, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a dictionary; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsGeneric">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a generic type.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a generic type; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsMarkupExtension">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a markup extension.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a markup extension; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNameScope">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a XAML namescope, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a XAML namescope; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNameValid">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> is initialized by using a valid xamlName string as its <see cref="P:System.Xaml.XamlType.Name" />.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> is initialized by using a valid xamlName string; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsNullable">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a nullable type, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a nullable type; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsPublic">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a public type in the relevant type system.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a public type; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsUnknown">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a type that cannot be resolved in the underlying type system.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents an unresolvable type; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsUsableDuringInitialization">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> is built top-down during XAML initialization.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> is built top-down during XAML initialization; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsWhitespaceSignificantCollection">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a white-space significant collection, as per the XML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a white-space significant collection; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.IsXData">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents XML XDATA, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents XDATA; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ItemType">
      <summary>Gets a value that provides the type information for the Items property of this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> object for the type of the items in the collection; otherwise, null, if this <see cref="T:System.Xaml.XamlType" /> does not represent a collection.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.KeyType">
      <summary>Gets a value that provides the type information for the key property of this <see cref="T:System.Xaml.XamlType" />, if the <see cref="T:System.Xaml.XamlType" /> represents a dictionary.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> object for the type of the dictionary usage key; otherwise, null, if this <see cref="T:System.Xaml.XamlType" /> does not represent a dictionary.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAliasedProperty(System.Xaml.XamlDirective)">
      <summary>Returns the XAML member that is aliased to a XAML directive by this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>The aliased member, if found; otherwise, null.</returns>
      <param name="directive">The directive to find the aliased member for.</param>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllAttachableMembers">
      <summary>Returns an enumerable set that contains all attachable properties that are exposed by this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>An enumerable set that contains zero or more <see cref="T:System.Xaml.XamlMember" /> values; otherwise, null.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllMembers">
      <summary>Returns an enumerable set that contains all the members that are exposed by this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>An enumerable set that contains zero or more <see cref="T:System.Xaml.XamlMember" /> values.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAllowedContentTypes">
      <summary>Returns a list of the types that are usable as the <see cref="P:System.Xaml.XamlType.ContentProperty" /> value for this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A list of possible content types.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupAttachableMember(System.String)">
      <summary>Returns a specific attachable <see cref="T:System.Xaml.XamlMember" /> object from this <see cref="T:System.Xaml.XamlType" /> by name.</summary>
      <returns>A <see cref="T:System.Xaml.XamlMember" /> object for the requested attachable member; otherwise, null, if no attachable member by that name exists.</returns>
      <param name="name"></param>
    </member>
    <member name="M:System.Xaml.XamlType.LookupBaseType">
      <summary>Returns the <see cref="T:System.Xaml.XamlType" /> for the immediate base type of this XAML type. Determination of this value is based on the underlying type of this <see cref="T:System.Xaml.XamlType" /> and schema context.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> for the immediate base type of this XAML type.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupCollectionKind">
      <summary>Returns a value of the <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> enumeration that declares which specific collection type this <see cref="T:System.Xaml.XamlType" /> uses.</summary>
      <returns>A value of the <see cref="T:System.Xaml.Schema.XamlCollectionKind" /> enumeration </returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupConstructionRequiresArguments">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> must have arguments (generic constraints through x:TypeArguments, initialization text, or other XAML techniques) to construct a valid instance of the type.</summary>
      <returns>true if construction of an instance requires some argument value; otherwise, false. </returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupContentProperty">
      <summary>Returns <see cref="T:System.Xaml.XamlMember" /> information for the content property of this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>
        <see cref="T:System.Xaml.XamlMember" /> information for the content property of this <see cref="T:System.Xaml.XamlType" />. May be null.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupContentWrappers">
      <summary>Gets a list of <see cref="T:System.Xaml.XamlType" /> values that represent the content wrappers for this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A list of <see cref="T:System.Xaml.XamlType" /> values that represent the content wrappers for this <see cref="T:System.Xaml.XamlType" />.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupCustomAttributeProvider">
      <summary>When implemented in a derived class, returns an <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation.</summary>
      <returns>An <see cref="T:System.Reflection.ICustomAttributeProvider" /> implementation.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupDeferringLoader">
      <summary>Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, which is used for deferred loading of XAML-declared objects.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> that has a <see cref="T:System.Xaml.XamlDeferringLoader" /> constraint on the generic.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupInvoker">
      <summary>Returns a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is associated with this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>The <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> information for this <see cref="T:System.Xaml.XamlType" />; otherwise, null.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsAmbient">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents an ambient type, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents an ambient type; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsConstructible">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a constructible type, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a constructible type; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsMarkupExtension">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a markup extension.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a markup extension; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsNameScope">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a XAML namescope, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a XAML namescope; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsNullable">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a nullable type, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a nullable type; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsPublic">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a public type in the relevant type system.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a public type; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsUnknown">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a type that cannot be resolved in the underlying type system.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a nonresolvable type; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsWhitespaceSignificantCollection">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents a white-space significant collection, as per the XML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a white-space significant collection; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupIsXData">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> represents XML XDATA, as per the XAML definition.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents XDATA; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupItemType">
      <summary>Returns a value that provides the type information for the Items property of this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> object for the type of the items in the collection; otherwise, null if this <see cref="T:System.Xaml.XamlType" /> does not represent a collection.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupKeyType">
      <summary>Returns a value that provides the type information for the key property of this <see cref="T:System.Xaml.XamlType" />, if the <see cref="T:System.Xaml.XamlType" /> represents a dictionary.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> object for the type of the key for dictionary usage, or null if this <see cref="T:System.Xaml.XamlType" /> does not represent a dictionary,</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupMarkupExtensionReturnType">
      <summary>Returns a value that provides the type information for the returned ProvideValue of this <see cref="T:System.Xaml.XamlType" />, if it represents a markup extension.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> object for the return type for markup extension usage; otherwise, null, if this <see cref="T:System.Xaml.XamlType" /> does not represent a markup extension.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupMember(System.String,System.Boolean)">
      <summary>Returns a specific member from this <see cref="T:System.Xaml.XamlType" /> by name.</summary>
      <returns>The <see cref="T:System.Xaml.XamlMember" /> information for the member, if a member was found; otherwise, null.</returns>
      <param name="name">The name of the member to get (as a string).</param>
      <param name="skipReadOnlyCheck">true to return a member even if that member has a true value for <see cref="P:System.Xaml.XamlMember.IsReadOnly" />; false to not return a <see cref="P:System.Xaml.XamlMember.IsReadOnly" /> member. The default is false.</param>
    </member>
    <member name="M:System.Xaml.XamlType.LookupPositionalParameters(System.Int32)">
      <summary>For markup extension types, returns the types of the positional parameters that are supported in a specific markup extension usage for this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A list of <see cref="T:System.Xaml.XamlType" /> values where each such <see cref="T:System.Xaml.XamlType" /> is the type for that position in the syntax. You must specify those types in the same order when supplying markup input for the markup extension.</returns>
      <param name="parameterCount">The count (arity) of the particular syntax or constructor mode that you want information about.</param>
    </member>
    <member name="M:System.Xaml.XamlType.LookupSetMarkupExtensionHandler">
      <summary>Returns a handler to use for the set operations of markup extensions.</summary>
      <returns>A handler to use for the set operations of markup extensions.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupSetTypeConverterHandler">
      <summary>Returns a handler to use for type converter setting cases.</summary>
      <returns>A handler to use for type converter setting cases.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupTrimSurroundingWhitespace">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> should serialize with trimmed surrounding white space.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> should serialize with trimmed surrounding white space; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupTypeConverter">
      <summary>Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.ComponentModel.TypeConverter" /> constraint that represents type-conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.ComponentModel.TypeConverter" /> constraint that represents type-conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />; otherwise, null.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupUnderlyingType">
      <summary>Returns the CLR <see cref="T:System.Type" /> that underlies this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>The CLR <see cref="T:System.Type" /> that underlies this <see cref="T:System.Xaml.XamlType" />; otherwise, null.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupUsableDuringInitialization">
      <summary>Returns a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> is built top-down during XAML initialization.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> is built top-down during XAML initialization; otherwise, false.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.LookupValueSerializer">
      <summary>Returns a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint that represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint that represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />; otherwise, null.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.MarkupExtensionReturnType">
      <summary>Gets a value that provides the type information for the returned ProvideValue of this <see cref="T:System.Xaml.XamlType" />, if it represents a markup extension.</summary>
      <returns>A <see cref="T:System.Xaml.XamlType" /> object for the return type for markup extension usage; otherwise, null, if this <see cref="T:System.Xaml.XamlType" /> does not represent a markup extension.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.Name">
      <summary>Gets the string name of the type that this <see cref="T:System.Xaml.XamlType" /> represents.</summary>
      <returns>The string name of this XAML type.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.op_Equality(System.Xaml.XamlType,System.Xaml.XamlType)">
      <summary>Determines whether two specified <see cref="T:System.Xaml.XamlType" /> objects have the same value.</summary>
      <returns>true if the value of <paramref name="xamlType1" /> is the same as the value of <paramref name="xamlType2" />; otherwise, false.</returns>
      <param name="xamlType1">A <see cref="T:System.Xaml.XamlType" /> or null.</param>
      <param name="xamlType2">A <see cref="T:System.Xaml.XamlType" /> or null.</param>
    </member>
    <member name="M:System.Xaml.XamlType.op_Inequality(System.Xaml.XamlType,System.Xaml.XamlType)">
      <summary>Determines whether two specified <see cref="T:System.Xaml.XamlType" /> objects have different values.</summary>
      <returns>true if the value of <paramref name="xamlType1" /> differs from the value of <paramref name="xamlType2" />; otherwise, false.</returns>
      <param name="xamlType1">A <see cref="T:System.Xaml.XamlType" /> or null.</param>
      <param name="xamlType2">A <see cref="T:System.Xaml.XamlType" /> or null.</param>
    </member>
    <member name="P:System.Xaml.XamlType.PreferredXamlNamespace">
      <summary>Gets the single XAML namespace that is the primary XAML namespace for this <see cref="T:System.Xaml.XamlType" />. </summary>
      <returns>The identifier, as a string, of the primary XAML namespace for this XAML type.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.SchemaContext">
      <summary>Gets the active <see cref="T:System.Xaml.XamlSchemaContext" /> for processing this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>The active <see cref="T:System.Xaml.XamlSchemaContext" /> for processing this <see cref="T:System.Xaml.XamlType" />.</returns>
    </member>
    <member name="M:System.Xaml.XamlType.ToString">
      <summary>Returns a string representation of this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A string representation of this <see cref="T:System.Xaml.XamlType" />.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TrimSurroundingWhitespace">
      <summary>Gets a value that indicates whether this <see cref="T:System.Xaml.XamlType" /> has white-space handling behavior that trims the surrounding white space in its content.</summary>
      <returns>true if this <see cref="T:System.Xaml.XamlType" /> represents a type that uses white-space trimming; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TypeArguments">
      <summary>Gets a list of type arguments for cases where this <see cref="T:System.Xaml.XamlType" /> represents a generic.</summary>
      <returns>A list of type argument types; otherwise, null, if this <see cref="T:System.Xaml.XamlType" /> does not represent a generic.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.TypeConverter">
      <summary>Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.ComponentModel.TypeConverter" /> constraint that represents type conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.ComponentModel.TypeConverter" /> constraint that represents type conversion behavior for values of this <see cref="T:System.Xaml.XamlType" />.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.UnderlyingType">
      <summary>Gets the CLR <see cref="T:System.Type" /> that underlies this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>The CLR <see cref="T:System.Type" /> that underlies this <see cref="T:System.Xaml.XamlType" />.</returns>
    </member>
    <member name="P:System.Xaml.XamlType.ValueSerializer">
      <summary>Gets a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint that represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />.</summary>
      <returns>A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> with <see cref="T:System.Windows.Markup.ValueSerializer" /> constraint that represents value serialization behavior for values of this <see cref="T:System.Xaml.XamlType" />; otherwise, null.</returns>
    </member>
    <member name="T:System.Xaml.XamlWriter">
      <summary>Provides base implementation and base class definition for a XAML writer.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlWriter" /> class.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.Close">
      <summary>Closes the XAML writer object.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by the <see cref="T:System.Xaml.XamlWriter" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release the managed resources; otherwise, false.</param>
    </member>
    <member name="P:System.Xaml.XamlWriter.IsDisposed">
      <summary>Gets whether <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" /> has been called.</summary>
      <returns>true if <see cref="M:System.Xaml.XamlWriter.Dispose(System.Boolean)" /> has been called; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlWriter.SchemaContext">
      <summary>When implemented in a derived class, gets the active XAML schema context.</summary>
      <returns>The active schema context.</returns>
    </member>
    <member name="M:System.Xaml.XamlWriter.System#IDisposable#Dispose">
      <summary>See <see cref="M:System.IDisposable.Dispose" />.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteEndMember">
      <summary>When implemented in a derived class, writes the representation of an end member node.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteEndObject">
      <summary>When implemented in a derived class, writes the representation of an end object node.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteGetObject">
      <summary>When implemented in a derived class, writes out an object for cases where the object in question is a default or implicit value of the property being set, rather than being specified as a discrete object value in the input XAML node set.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>When implemented in a derived class, writes a XAML namespace declaration node.</summary>
      <param name="namespaceDeclaration">The namespace declaration to write.</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteNode(System.Xaml.XamlReader)">
      <summary>Performs switching based on node type from the XAML reader (<see cref="P:System.Xaml.XamlReader.NodeType" />) and calls the relevant Write method for the writer implementation.</summary>
      <param name="reader">The reader to use for node determination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="reader" /> is null.</exception>
      <exception cref="T:System.NotImplementedException">Default implementation encountered a <see cref="T:System.Xaml.XamlNodeType" /> that is not in the default enumeration.</exception>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>When implemented in a derived class, writes the representation of a start member node.</summary>
      <param name="xamlMember">The member node to write.</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>When implemented in a derived class, writes the representation of a start object node.</summary>
      <param name="type">The XAML type of the object to write.</param>
    </member>
    <member name="M:System.Xaml.XamlWriter.WriteValue(System.Object)">
      <summary>When implemented in a derived class, writes a value node.</summary>
      <param name="value">The value to write.</param>
    </member>
    <member name="T:System.Xaml.XamlWriterSettings">
      <summary>Provides initialization settings for a <see cref="T:System.Xaml.XamlWriter" /> implementation.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriterSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlWriterSettings" /> class.</summary>
    </member>
    <member name="M:System.Xaml.XamlWriterSettings.#ctor(System.Xaml.XamlWriterSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlWriterSettings" /> class based on existing settings.</summary>
      <param name="settings">An existing <see cref="T:System.Xaml.XamlWriterSettings" /> object.</param>
    </member>
    <member name="T:System.Xaml.XamlXmlReader">
      <summary>Processes XAML markup from XML files by using an <see cref="T:System.Xml.XmlReader" /> intermediary, and produces a XAML node stream.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on a stream.</summary>
      <param name="stream">The initial stream to load into the reader.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on a stream, with a supplied XAML schema context.</summary>
      <param name="stream">The initial stream to load into the reader.</param>
      <param name="schemaContext">The XAML schema context for XAML processing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.-or-<paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on a stream, with a supplied XAML schema context and XAML-specific settings.</summary>
      <param name="stream">The initial stream to load into the reader.</param>
      <param name="schemaContext">The XAML schema context for XAML processing.</param>
      <param name="settings">Specific reader settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.-or-<paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.Stream,System.Xaml.XamlXmlReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on a stream, with XAML-specific settings.</summary>
      <param name="stream">The initial stream to load into the reader.</param>
      <param name="settings">Specific reader settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on a <see cref="T:System.IO.TextReader" />.</summary>
      <param name="textReader">The <see cref="T:System.IO.TextReader" /> to use for initialization.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on a <see cref="T:System.IO.TextReader" />, with a supplied schema context and XAML-specific settings.</summary>
      <param name="textReader">The <see cref="T:System.IO.TextReader" /> to use for initialization.</param>
      <param name="schemaContext">The XAML schema context for XAML processing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> is null.-or-<paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on a <see cref="T:System.IO.TextReader" />, with a supplied schema context and XAML-specific settings.</summary>
      <param name="textReader">The <see cref="T:System.IO.TextReader" /> to use for initialization.</param>
      <param name="schemaContext">The XAML schema context for XAML processing.</param>
      <param name="settings">Specific reader settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> is null.-or-<paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.IO.TextReader,System.Xaml.XamlXmlReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on a <see cref="T:System.IO.TextReader" />, with XAML-specific settings.</summary>
      <param name="textReader">The <see cref="T:System.IO.TextReader" /> to use for initialization.</param>
      <param name="settings">Specific reader settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textReader" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on a file name of a file to load into a default XML reader.</summary>
      <param name="fileName">The name of the XML file to load.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on the file name of a file to load into a default XML reader, with a supplied XAML schema context.</summary>
      <param name="fileName">The name of the file to load.</param>
      <param name="schemaContext">The XAML schema context for XAML processing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is null.-or-<paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on the file name of a file to load into a default XML reader, with a supplied XAML schema context and XAML-specific reader settings.</summary>
      <param name="fileName">The name of the XML file to load.</param>
      <param name="schemaContext">The XAML schema context for XAML processing.</param>
      <param name="settings">Specific reader settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is null.-or-<paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.String,System.Xaml.XamlXmlReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, based on the file name of a file to load into a default XML reader, with XAML-specific reader settings.</summary>
      <param name="fileName">The name of the XML file to load.</param>
      <param name="settings">Specific reader settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, using the provided <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> to use as the intermediary XML processor.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, using the provided <see cref="T:System.Xml.XmlReader" /> and schema context.</summary>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> to use as the intermediary XML processor.</param>
      <param name="schemaContext">The XAML schema context for XAML processing.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> is null.-or-<paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, using the provided <see cref="T:System.Xml.XmlReader" />, schema context, and reader settings.</summary>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> to use as the intermediary XML processor.</param>
      <param name="schemaContext">The XAML schema context for XAML processing.</param>
      <param name="settings">Specific reader settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> is null.-or-<paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.#ctor(System.Xml.XmlReader,System.Xaml.XamlXmlReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReader" /> class, using the provided <see cref="T:System.Xml.XmlReader" /> and reader settings.</summary>
      <param name="xmlReader">The <see cref="T:System.Xml.XmlReader" /> to use as the intermediary XML processor.</param>
      <param name="settings">Specific reader settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlReader" /> is null.-or-<paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.HasLineInfo">
      <summary>Gets a value that specifies whether line information is available.</summary>
      <returns>true if line information is available; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.IsEof">
      <summary>Gets a value that reports whether the reader position is at the end of file.</summary>
      <returns>true if the position is at the end of the file; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.LineNumber">
      <summary>Gets the line number to report.</summary>
      <returns>The line number to report.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.LinePosition">
      <summary>Gets the line position to report.</summary>
      <returns>The line position to report.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Member">
      <summary>Gets the current member at the reader position, if the current reader position is on a <see cref="F:System.Xaml.XamlNodeType.StartMember" />.</summary>
      <returns>The current member; or null, if the current reader position is not on a member.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Namespace">
      <summary>Gets the XAML namespace from the current node.</summary>
      <returns>The XAML namespace from the current node, if it is available; otherwise, null.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>A value of the <see cref="T:System.Xaml.XamlNodeType" /> enumeration.</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlReader.Read">
      <summary>Provides the next XAML node from the loaded source, if a XAML node is available. </summary>
      <returns>true if a node is available; otherwise, false.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.SchemaContext">
      <summary>Gets an object that provides schema information for the information set.</summary>
      <returns>An object that provides schema information for the information set.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Type">
      <summary>Gets the <see cref="T:System.Xaml.XamlType" /> of the current node.</summary>
      <returns>The <see cref="T:System.Xaml.XamlType" /> of the current node; or null, if the position is not on an object.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReader.Value">
      <summary>Gets the value of the current node.</summary>
      <returns>The value of the current node; or null, if the position is not on a <see cref="F:System.Xaml.XamlNodeType.Value" /> node type.</returns>
    </member>
    <member name="T:System.Xaml.XamlXmlReaderSettings">
      <summary>Specifies processing rules or option settings for the <see cref="T:System.Xaml.XamlXmlReader" /> XAML reader implementation.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReaderSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReaderSettings" /> class.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlReaderSettings.#ctor(System.Xaml.XamlXmlReaderSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlReaderSettings" /> class by copying settings from an existing <see cref="T:System.Xaml.XamlXmlReaderSettings" />.</summary>
      <param name="settings">The existing <see cref="T:System.Xaml.XamlXmlReaderSettings" /> to copy.</param>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.CloseInput">
      <summary>Gets or sets a value that indicates whether the underlying stream or text reader should be closed when the <see cref="T:System.Xaml.XamlXmlReader" /> is closed.</summary>
      <returns>true to close the underlying stream or reader when the <see cref="T:System.Xaml.XamlXmlReader" /> is closed; otherwise, false. The default is false.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.SkipXmlCompatibilityProcessing">
      <summary>Gets or sets a value that determines whether the reader should differ from the default <see cref="T:System.Xaml.XamlXmlReader" /> behavior of how markup compatibility content is processed.</summary>
      <returns>true to use the initiating reader directly, which means XML compatibility markup separately is processed as part of the main stream. false to use the default behavior, which processes XML compatibility separately. The default is false.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.XmlLang">
      <summary>Gets or sets the language setting value that the reader may promote to writers that write xml:lang attributes in nodes.</summary>
      <returns>The string to use for possible xml:lang output that is based on the reader.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlReaderSettings.XmlSpacePreserve">
      <summary>Gets or sets a value that determines whether the reader may promote to writers that write xml:space attributes in nodes.</summary>
      <returns>true if writers that are processing the XAML node stream should potentially write xml:space="preserve" in output; false to not write xml:space attributes.</returns>
    </member>
    <member name="T:System.Xaml.XamlXmlWriter">
      <summary>Uses a <see cref="T:System.IO.TextWriter" /> or <see cref="T:System.Xml.XmlWriter" /> support class to write XAML nodes to text or markup.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriter" /> class from a stream.</summary>
      <param name="stream">The stream to write.</param>
      <param name="schemaContext">The XAML schema context for the XAML writer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> is null.-or-<paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.Stream,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriter" /> class from a stream, using a writer settings object.</summary>
      <param name="stream">The stream to write.</param>
      <param name="schemaContext">The XAML schema context for the XAML writer.</param>
      <param name="settings">An instance of <see cref="T:System.Xaml.XamlXmlWriterSettings" />, which typically has specific non-default settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" /> or <paramref name="schemaContext" /> is null</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.TextWriter,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriter" /> class from a <see cref="T:System.IO.TextWriter" /> basis.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> that writes the output.</param>
      <param name="schemaContext">The XAML schema context for the XAML writer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textWriter" /> or <paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.IO.TextWriter,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriter" /> class from a <see cref="T:System.IO.TextWriter" /> basis by using a settings object.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> that writes the output.</param>
      <param name="schemaContext">The XAML schema context for the XAML writer.</param>
      <param name="settings">An instance of <see cref="T:System.Xaml.XamlXmlWriterSettings" />, which typically has specific non-default settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="textWriter" /> or <paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.Xml.XmlWriter,System.Xaml.XamlSchemaContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriter" /> class from a <see cref="T:System.Xml.XmlWriter" /> basis.</summary>
      <param name="xmlWriter">The <see cref="T:System.Xml.XmlWriter" /> that writes the output.</param>
      <param name="schemaContext">The XAML schema context for the XAML writer.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlWriter" /> or <paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.#ctor(System.Xml.XmlWriter,System.Xaml.XamlSchemaContext,System.Xaml.XamlXmlWriterSettings)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriter" /> class from a <see cref="T:System.Xml.XmlWriter" /> basis by using a settings object.</summary>
      <param name="xmlWriter">The <see cref="T:System.Xml.XmlWriter" /> that writes the output.</param>
      <param name="schemaContext">The XAML schema context for the XAML writer.</param>
      <param name="settings">An instance of <see cref="T:System.Xaml.XamlXmlWriterSettings" />, which typically has specific non-default settings.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlWriter" /> or <paramref name="schemaContext" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.Dispose(System.Boolean)">
      <summary>Releases the unmanaged resources used by <see cref="T:System.Xaml.XamlXmlWriter" /> and optionally releases the managed resources. </summary>
      <param name="disposing">true to release the unmanaged resources; otherwise, false.</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.Flush">
      <summary>Calls the Flush method of the underlying <see cref="T:System.Xml.XmlWriter" /> or <see cref="T:System.IO.TextWriter" />, which writes anything that is currently in the buffer, and then closes the writer.</summary>
    </member>
    <member name="P:System.Xaml.XamlXmlWriter.SchemaContext">
      <summary>Gets the XAML schema context that this <see cref="T:System.Xaml.XamlXmlWriter" /> uses for processing.</summary>
      <returns>The XAML schema context that this <see cref="T:System.Xaml.XamlXmlWriter" /> uses for XAML processing.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriter.Settings">
      <summary>Gets the writer settings that this <see cref="T:System.Xaml.XamlXmlWriter" /> uses for XAML processing.</summary>
      <returns>The writer settings that this <see cref="T:System.Xaml.XamlXmlWriter" /> uses for XAML processing.</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteEndMember">
      <summary>Writes a XAML end member node to the underlying <see cref="T:System.Xml.XmlWriter" /> or <see cref="T:System.IO.TextWriter" />. Throws an exception if the current position of the XAML node stream is not within a member, or if the internal writer state does not support writing to an end member.</summary>
      <exception cref="T:System.InvalidOperationException">The current position of the XAML node stream is not within a member.</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">The current writer state does not support writing an end member.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteEndObject">
      <summary>Writes a XAML end object node to the underlying <see cref="T:System.Xml.XmlWriter" /> or <see cref="T:System.IO.TextWriter" />. Throws an exception if the current position of the XAML node stream being processed is incompatible with writing an end object.</summary>
      <exception cref="T:System.InvalidOperationException">The current position of the XAML node stream is within a member; or it is not in a scope where an end member can be written.</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">The current writer state does not support writing an end object.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteGetObject">
      <summary>Writes an object for cases where the specified object is a default or implicit value of the property being written, instead of being specified as an object value in the input XAML node set.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteNamespace(System.Xaml.NamespaceDeclaration)">
      <summary>Writes namespace information to the underlying <see cref="T:System.Xml.XmlWriter" /> or <see cref="T:System.IO.TextWriter" />. May throw an exception for certain states; however, may instead defer writing the namespace information until the writer and the XAML node stream being processed reaches a position where a XAML namespace declaration can be inserted.</summary>
      <param name="namespaceDeclaration">The XAML namespace declaration to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="namespaceDeclaration" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="namespaceDeclaration" /> is not a valid XAML namespace declaration (has a null prefix or null identifier component).</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">The current writer state does not support writing a XAML namespace declaration.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteStartMember(System.Xaml.XamlMember)">
      <summary>Writes a XAML start member node to the underlying <see cref="T:System.Xml.XmlWriter" /> or <see cref="T:System.IO.TextWriter" />. Throws an exception if the current position of the XAML node stream is within another member, or if it is not in a scope or writer state where a start member can be written.</summary>
      <param name="property">The XAML member identifier for the member to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="property" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="property" /> is not a valid <see cref="T:System.Xaml.XamlMember" />.</exception>
      <exception cref="T:System.InvalidOperationException">The current position of the XAML node stream does not support writing a start member.</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">The writer state is not valid for writing a start member.-or-The XAML writer attempted to write a duplicate member. This may have a more precise inner exception.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteStartObject(System.Xaml.XamlType)">
      <summary>Writes a XAML start object node to the underlying <see cref="T:System.Xml.XmlWriter" /> or <see cref="T:System.IO.TextWriter" />. Throws an exception if the current position of the XAML node stream is not in a scope where a start object can be written, or if the writer is not in a state that can write a start object.</summary>
      <param name="type">The <see cref="T:System.Xaml.XamlType" /> (XAML type identifier) for the object to write.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> is not a valid <see cref="T:System.Xaml.XamlType" />.</exception>
      <exception cref="T:System.InvalidOperationException">The current position of the XAML node stream is not valid for writing a new start object.</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">The state of the XAML writer is not valid for writing a new start object.</exception>
    </member>
    <member name="M:System.Xaml.XamlXmlWriter.WriteValue(System.Object)">
      <summary>Writes a XAML value node to the underlying <see cref="T:System.Xml.XmlWriter" /> or <see cref="T:System.IO.TextWriter" />. Throws an exception if the current position of the XAML node stream does not support writing a value, or the writer is in a state where a value cannot be written.</summary>
      <param name="value">The value information to write.</param>
      <exception cref="T:System.InvalidOperationException">The current position of the XAML node stream is not valid for writing a value.</exception>
      <exception cref="T:System.Xaml.XamlXmlWriterException">The XAML writer state does not support writing a value node.</exception>
      <exception cref="T:System.ArgumentException">Attempted to write a value that was not null or a string.</exception>
    </member>
    <member name="T:System.Xaml.XamlXmlWriterException">
      <summary>The exception that is thrown by some <see cref="T:System.Xaml.XamlXmlWriter" /> APIs. </summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriterException" /> class with a system-supplied message that describes the error.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriterException" /> class with serialized data.</summary>
      <param name="info">The object that holds the serialized object data. </param>
      <param name="context">The contextual information about the source or destination. </param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriterException" /> class with a specified message that describes the error.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriterException" /> class with a specified error message and a reference to the inner exception that is the cause of this exception.</summary>
      <param name="message">The message that describes the exception. The caller of this constructor is required to ensure that this string has been localized for the current system culture. </param>
      <param name="innerException">The exception that is the cause of the current exception. If the <paramref name="innerException" /> parameter is not null, the current exception is raised in a catch block that handles the inner exception. </param>
    </member>
    <member name="T:System.Xaml.XamlXmlWriterSettings">
      <summary>Provides initialization settings for the <see cref="T:System.Xaml.XamlXmlWriter" /> XAML writer implementation.</summary>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterSettings.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.XamlXmlWriterSettings" /> class.</summary>
    </member>
    <member name="P:System.Xaml.XamlXmlWriterSettings.AssumeValidInput">
      <summary>Gets or sets a value that specifies whether the <see cref="T:System.Xaml.XamlXmlWriter" /> always assumes valid XAML input for purposes of duplicate resolution or other error checking.</summary>
      <returns>true to have the <see cref="T:System.Xaml.XamlXmlWriter" /> skip certain validation or error checks, such as throwing exceptions on duplicate members. false to have the <see cref="T:System.Xaml.XamlXmlWriter" /> process with exceptions if invalid XAML is encountered. The default is false.</returns>
    </member>
    <member name="P:System.Xaml.XamlXmlWriterSettings.CloseOutput">
      <summary>Gets or sets a value that specifies whether the <see cref="T:System.Xaml.XamlXmlWriter" /> should close immediately on Dispose or other operations (potentially leaving incomplete and thus invalid XAML written), or should instead write out the buffer before closing.</summary>
      <returns>true to close <see cref="T:System.Xaml.XamlXmlWriter" /> immediately on Dispose or similar operations. false to write out the remaining buffer before the <see cref="T:System.Xaml.XamlXmlWriter" /> is released. The default is false.</returns>
    </member>
    <member name="M:System.Xaml.XamlXmlWriterSettings.Copy">
      <summary>Returns a copy of this <see cref="T:System.Xaml.XamlXmlWriterSettings" /> instance.</summary>
      <returns>The returned copy.</returns>
    </member>
    <member name="T:System.Xaml.Permissions.XamlAccessLevel">
      <summary>Defines access control to assemblies and types for purposes of XAML loading.</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.Assembly)">
      <summary>Returns a <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> instance based on an assembly requested by <see cref="T:System.Reflection.Assembly" />.</summary>
      <returns>A <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> instance, with the <paramref name="assembly" /> value used as source information for <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />. </returns>
      <param name="assembly">The assembly for the request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessTo(System.Reflection.AssemblyName)">
      <summary>Returns a <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> instance based on an assembly requested by <see cref="T:System.Reflection.AssemblyName" />.</summary>
      <returns>A <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> instance, with the <paramref name="assemblyName" /> value used as source information for <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" />. </returns>
      <param name="assemblyName">The assembly name for the request.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyName" /> is not a valid fully qualified assembly name.</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName">
      <summary>Gets the <see cref="T:System.Reflection.AssemblyName" /> of the assembly for which this <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> determines permissions.</summary>
      <returns>The <see cref="T:System.Reflection.AssemblyName" /> of the assembly for which this <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> determines permissions.</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.String)">
      <summary>Returns a <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> instance based on a specific type specified by its qualified name.</summary>
      <returns>A <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> instance, with the <paramref name="assemblyQualifiedTypeName" /> value used as source information for <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" /> and <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> determined by reflection on the type. </returns>
      <param name="assemblyQualifiedTypeName">A string that is parsed as an assembly-qualified type name.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assemblyQualifiedTypeName" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assemblyQualifiedTypeName" /> is not a valid assembly-qualified type name.-or-Assembly name within <paramref name="assemblyQualifiedTypeName" /> is not a valid assembly name.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessTo(System.Type)">
      <summary>Returns a <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> instance based on a specific type specified by <see cref="T:System.Type" />.</summary>
      <returns>A <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> instance, with the <paramref name="type" /> value used as source information for <see cref="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName" /> and <see cref="P:System.Xaml.Permissions.XamlAccessLevel.AssemblyAccessToAssemblyName" /> determined by reflection on the type. </returns>
      <param name="type">The <see cref="T:System.Type" /> to request access for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlAccessLevel.PrivateAccessToTypeName">
      <summary>Gets the unqualified string name of the type for which this <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> determines permissions.</summary>
      <returns>The unqualified string name of the type for which this <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> determines permissions.</returns>
    </member>
    <member name="T:System.Xaml.Permissions.XamlLoadPermission">
      <summary>Declares permissions for loading types from assemblies that are used by a XAML reader or writer.</summary>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Collections.Generic.IEnumerable{System.Xaml.Permissions.XamlAccessLevel})">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> class, using an enumerable set of specific <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> values.</summary>
      <param name="allowedAccess">An enumerable set of specific <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> values.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" /> is null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="allowedAccess" /> contained invalid information, such as a null item.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Security.Permissions.PermissionState)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> class, using existing permissions.</summary>
      <param name="state">A <see cref="T:System.Security.Permissions.PermissionState" /> enumeration value.</param>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.#ctor(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> class, using a single <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> value.</summary>
      <param name="allowedAccess">The defining <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> value.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="allowedAccess" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess">
      <summary>Gets the list of all <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> values that this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> represents.</summary>
      <returns>A read-only list of <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> values, or null. See Remarks.</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Copy">
      <summary>Creates and returns an identical copy of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />.</summary>
      <returns>A copy of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />.</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.FromXml(System.Security.SecurityElement)">
      <summary>Reconstructs a security object with a specified state from an XML encoding.</summary>
      <param name="elem">The XML encoding to use to reconstruct the security object. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elem" /> is null. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="elem" /> does not contain the XML encoding for a <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />.-or- The version attribute within <paramref name="elem" /> is not supported. </exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Includes(System.Xaml.Permissions.XamlAccessLevel)">
      <summary>Returns whether this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> includes a specified <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> in its <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" /> list.</summary>
      <returns>true if <paramref name="requestedAccess" /> exists as an item in the <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" /> list of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />. Otherwise, false.</returns>
      <param name="requestedAccess">The specific <see cref="T:System.Xaml.Permissions.XamlAccessLevel" /> to check for.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="requestedAccess" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Intersect(System.Security.IPermission)">
      <summary>Creates and returns a <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> that is the intersection of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> and the specified permission.</summary>
      <returns>A new permission that represents the intersection of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> and the specified <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />. This new permission is null if the intersection is empty.</returns>
      <param name="target">A <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> to intersect with the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />. Can be null.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not null or is not a <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsSubsetOf(System.Security.IPermission)">
      <summary>Determines whether the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> is a subset of the specified permission.</summary>
      <returns>true if the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> is a subset of the specified permission; otherwise, false.</returns>
      <param name="target">A permission that is to be tested for the subset relationship. Can be null.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="target" /> is not null or is not a <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />.</exception>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.IsUnrestricted">
      <summary>Returns whether this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> denotes unrestricted permissions.</summary>
      <returns>true if this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> denotes unrestricted permissions. false if this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> has specific access level restrictions in <see cref="P:System.Xaml.Permissions.XamlLoadPermission.AllowedAccess" />, or has no permissions. </returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.ToXml">
      <summary>Creates an XML encoding of this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> and its current state.</summary>
      <returns>An XML encoding of this <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />, including any state information.</returns>
    </member>
    <member name="M:System.Xaml.Permissions.XamlLoadPermission.Union(System.Security.IPermission)">
      <summary>Creates a permission that is the union of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> and the specified permission.</summary>
      <returns>A new <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> that represents the union of the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" /> and the specified <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />.</returns>
      <param name="other">A <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />  to combine with the current <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />. Can be null.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="other" /> is not null or is not a <see cref="T:System.Xaml.Permissions.XamlLoadPermission" />.</exception>
    </member>
    <member name="T:System.Xaml.Schema.AllowedMemberLocations">
      <summary>Specifies the syntax restrictions enforced on a property when it is set in XAML, as reported by a <see cref="T:System.Xaml.XamlDirective" />.</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.None">
      <summary>Property cannot be set in XAML at all. This is the default.</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.Attribute">
      <summary>Property can be set in XAML attribute syntax.</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement">
      <summary>Property can be set in XAML property element syntax.</summary>
    </member>
    <member name="F:System.Xaml.Schema.AllowedMemberLocations.Any">
      <summary>Property can be set in either <see cref="F:System.Xaml.Schema.AllowedMemberLocations.Attribute" /> or <see cref="F:System.Xaml.Schema.AllowedMemberLocations.MemberElement" /> location. (This enumeration member is defined as the combination of those values.)</summary>
    </member>
    <member name="T:System.Xaml.Schema.ShouldSerializeResult">
      <summary>Defines serialization behavior as reported by a <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.Default">
      <summary>Unknown, defer to the type of the member.</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.True">
      <summary>Serialize the result.</summary>
    </member>
    <member name="F:System.Xaml.Schema.ShouldSerializeResult.False">
      <summary>Do not serialize the result.</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlCollectionKind">
      <summary>Describes the collection metaphor (if any) used by a XAML member.</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.None">
      <summary>XAML member does not support a collection.</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Collection">
      <summary>XAML member supports a list or a collection.</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Dictionary">
      <summary>XAML member supports a dictionary (key-value pairs).</summary>
    </member>
    <member name="F:System.Xaml.Schema.XamlCollectionKind.Array">
      <summary>XAML member supports an array collection.</summary>
    </member>
    <member name="T:System.Xaml.Schema.XamlMemberInvoker">
      <summary>Provides an extension point that can access member characteristics of a XAML member through techniques other than reflection.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> class. </summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.#ctor(System.Xaml.XamlMember)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> class, based on a provided <see cref="T:System.Xaml.XamlMember" />.</summary>
      <param name="member">The <see cref="T:System.Xaml.XamlMember" /> value for the specific XAML member relevant to this <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="member" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.GetValue(System.Object)">
      <summary>Gets a value of the relevant property from an instance.</summary>
      <returns>The requested property value.</returns>
      <param name="instance">An instance of the owner type for the member.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlMember" />.-or-Invoked this method on a write-only member.-or-<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.SetValue(System.Object,System.Object)">
      <summary>Sets a value of the relevant property on an instance.</summary>
      <param name="instance">An instance of the owner type for the member.</param>
      <param name="value">The property value to set.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
      <exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlMemberInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlMember" />.-or-Invoked this method on a read-only member.-or-<see cref="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlMemberInvoker.ShouldSerializeValue(System.Object)">
      <summary>Indicates whether the value needs to be persisted by serialization processes.</summary>
      <returns>A value of the enumeration.</returns>
      <param name="instance">The instance with the property to be examined for persistence.</param>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter">
      <summary>Gets the <see cref="T:System.Reflection.MethodInfo" /> for the CLR method that gets values for the property that is relevant for this <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> for the CLR method that gets values for the property that is relevant for this <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />, or null.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter">
      <summary>Gets the <see cref="T:System.Reflection.MethodInfo" /> for the CLR method that sets values for the property that is relevant for this <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</summary>
      <returns>The <see cref="T:System.Reflection.MethodInfo" /> for the CLR method that sets values for the property that is relevant for this <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />, or null.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker">
      <summary>Provides a static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</summary>
      <returns>A static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlMemberInvoker" />.</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeInvoker">
      <summary>Provides an extension point that can construct instances of a XAML type through techniques other than reflection and constructors.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.#ctor(System.Xaml.XamlType)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> class, based on a provided <see cref="T:System.Xaml.XamlType" />.</summary>
      <param name="type">The <see cref="T:System.Xaml.XamlType" /> value for the specific XAML type relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.AddToCollection(System.Object,System.Object)">
      <summary>Adds the provided item to an instance of the type that is relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />. </summary>
      <param name="instance">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
      <param name="item">The item to add.</param>
      <exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.-or-Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a collection.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
      <exception cref="T:System.Xaml.XamlSchemaException">
        <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this<see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> returns null.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.AddToDictionary(System.Object,System.Object,System.Object)">
      <summary>Adds the provided key and item value to an instance of the type that is relevant to this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />. </summary>
      <param name="instance">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
      <param name="key">Dictionary key for the item to add.</param>
      <param name="item">The item value to add.</param>
      <exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.-or-Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a dictionary.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
      <exception cref="T:System.Xaml.XamlSchemaException">
        <see cref="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)" /> for this<see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> returns null.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.CreateInstance(System.Object[])">
      <summary>Creates an object instance based on the construction-initiated <see cref="T:System.Xaml.XamlType" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
      <returns>The created instance based on the construction-initiated <see cref="T:System.Xaml.XamlType" /> for this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</returns>
      <param name="arguments">An array of objects that supply the x:ConstructorArgs for the instance. May be null for types that do not require or use x:ConstructorArgs.</param>
      <exception cref="T:System.MissingMethodException">Could not resolve a constructor.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetAddMethod(System.Xaml.XamlType)">
      <summary>Returns the relevant Add method for a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is relevant to a collection or dictionary. </summary>
      <returns>CLR <see cref="T:System.Reflection.MethodInfo" /> information for the Add method, or null.</returns>
      <param name="contentType">
        <see cref="T:System.Xaml.XamlType" /> for the item type that is used by the Add method.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="contentType" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetEnumeratorMethod">
      <summary>Returns an object representing a method that can enumerate over items.</summary>
      <returns>
        <see cref="T:System.Reflection.MethodInfo" /> for an enumerator method, or null.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeInvoker.GetItems(System.Object)">
      <summary>Returns an <see cref="T:System.Collections.IEnumerator" /> object representing the set of items.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> object, or null.</returns>
      <param name="instance">An instance of the type specified by the <see cref="T:System.Xaml.XamlType" /> used for constructing this <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</param>
      <exception cref="T:System.NotSupportedException">Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> that is based on an unknown <see cref="T:System.Xaml.XamlType" />.-or-Invoked this method on a <see cref="T:System.Xaml.Schema.XamlTypeInvoker" /> where the relevant type is not a collection or dictionary.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instance" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.SetMarkupExtensionHandler">
      <summary>Gets the handler to use when a <see cref="T:System.Xaml.XamlObjectWriter" /> calls into an implemented <see cref="T:System.Windows.Markup.MarkupExtension" />.</summary>
      <returns>A handler implementation that handles this case.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.SetTypeConverterHandler">
      <summary>Gets the handler to use when a <see cref="T:System.Xaml.XamlObjectWriter" /> calls into a CLR-implemented <see cref="T:System.ComponentModel.TypeConverter" />.</summary>
      <returns>A handler implementation that handles this case.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeInvoker.UnknownInvoker">
      <summary>Provides a static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</summary>
      <returns>A static value that represents an unknown, not fully implemented <see cref="T:System.Xaml.Schema.XamlTypeInvoker" />.</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeName">
      <summary>Provides a means to specify a XAML type in terms of name and namespace.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeName" /> class.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeName" /> class, based on name and namespace strings.</summary>
      <param name="xamlNamespace">The XAML namespace that contains name.</param>
      <param name="name">The name of the type to create a <see cref="T:System.Xaml.Schema.XamlTypeName" /> for.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.Xaml.Schema.XamlTypeName})">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeName" /> class, based on name and namespace strings as well as an array of type arguments.</summary>
      <param name="xamlNamespace">The XAML namespace that contains <paramref name="name" />.</param>
      <param name="name">The name of the type to create a <see cref="T:System.Xaml.Schema.XamlTypeName" /> for.</param>
      <param name="typeArguments">An array of type arguments, each of which must be a <see cref="T:System.Xaml.Schema.XamlTypeName" />.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.#ctor(System.Xaml.XamlType)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeName" /> class, based on an existing <see cref="T:System.Xaml.XamlType" />.</summary>
      <param name="xamlType">An existing <see cref="T:System.Xaml.XamlType" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xamlType" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.Name">
      <summary>Gets the name used to construct this <see cref="T:System.Xaml.Schema.XamlTypeName" />.</summary>
      <returns>The name of the type.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.Namespace">
      <summary>Gets the XAML namespace identifier used to construct this <see cref="T:System.Xaml.Schema.XamlTypeName" />.</summary>
      <returns>The XAML namespace identifier.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.Parse(System.String,System.Xaml.IXamlNamespaceResolver)">
      <summary>Provides a <see cref="T:System.Xaml.Schema.XamlTypeName" /> value based on a type name and an object that can resolve a markup prefix into a namespace.</summary>
      <returns>The created <see cref="T:System.Xaml.Schema.XamlTypeName" />.</returns>
      <param name="typeName">The type name to create a <see cref="T:System.Xaml.Schema.XamlTypeName" /> value for.</param>
      <param name="namespaceResolver">An object or service provider that implements <see cref="T:System.Xaml.IXamlNamespaceResolver" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> or <paramref name="namespaceResolver" /> is null.</exception>
      <exception cref="T:System.FormatException">String cannot be parsed.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ParseList(System.String,System.Xaml.IXamlNamespaceResolver)">
      <summary>Provides a <see cref="T:System.Xaml.Schema.XamlTypeName" /> value based on a string that can specify multiple type names, and an object that can resolve a markup prefix into a namespace.</summary>
      <returns>The created <see cref="T:System.Xaml.Schema.XamlTypeName" />.</returns>
      <param name="typeNameList">A string that contains multiple types. See Remarks. </param>
      <param name="namespaceResolver">An object or service provider that implements <see cref="T:System.Xaml.IXamlNamespaceResolver" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeNameList" /> or <paramref name="namespaceResolver" /> is null.</exception>
      <exception cref="T:System.FormatException">String cannot be parsed.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString">
      <summary>Converts the value of this <see cref="T:System.Xaml.Schema.XamlTypeName" /> to its equivalent string representation.</summary>
      <returns>The equivalent string representation of this <see cref="T:System.Xaml.Schema.XamlTypeName" /> .</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString(System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName},System.Xaml.INamespacePrefixLookup)">
      <summary>Converts the value of this <see cref="T:System.Xaml.Schema.XamlTypeName" /> to its equivalent string representation, which can be used in markup syntax for an object element usage of multiple types.</summary>
      <returns>A concatenated string of all type results.</returns>
      <param name="typeNameList">A list of types.</param>
      <param name="prefixLookup">A service reference for prefix lookup.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="prefixLookup" /> or <paramref name="typeNameList" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.ToString(System.Xaml.INamespacePrefixLookup)">
      <summary>Converts the value of this <see cref="T:System.Xaml.Schema.XamlTypeName" /> to its equivalent string representation, which can be used in markup syntax for an object element usage of a type.</summary>
      <returns>A prefixed usage string.</returns>
      <param name="prefixLookup">A service reference for prefix lookup.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Xaml.Schema.XamlTypeName.Namespace" /> for this <see cref="T:System.Xaml.Schema.XamlTypeName" /> is null.-or-<see cref="P:System.Xaml.Schema.XamlTypeName.Name" /> is not valid.-or-Could not look up the prefix.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.TryParse(System.String,System.Xaml.IXamlNamespaceResolver,System.Xaml.Schema.XamlTypeName@)">
      <summary>Provides a <see cref="T:System.Xaml.Schema.XamlTypeName" /> value based on a type name and an object that can resolve a markup prefix into a namespace.</summary>
      <returns>true if the parse was successful and <paramref name="result" /> contains a useful value; otherwise, false.</returns>
      <param name="typeName">The type name to create a <see cref="T:System.Xaml.Schema.XamlTypeName" /> value for.</param>
      <param name="namespaceResolver">An object or service provider that implements <see cref="T:System.Xaml.IXamlNamespaceResolver" />.</param>
      <param name="result">Out parameter that contains the created <see cref="T:System.Xaml.Schema.XamlTypeName" /> if the return value is true.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeName" /> or <paramref name="namespaceResolver" /> is null.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeName.TryParseList(System.String,System.Xaml.IXamlNamespaceResolver,System.Collections.Generic.IList{System.Xaml.Schema.XamlTypeName}@)">
      <summary>Provides a <see cref="T:System.Xaml.Schema.XamlTypeName" /> value based on a string that can specify multiple type names, and an object that can resolve a markup prefix into a namespace.</summary>
      <returns>true if the parse was successful and <paramref name="result" /> contains a useful value; otherwise, false.</returns>
      <param name="typeNameList">A string that contains multiple types. See Remarks. </param>
      <param name="namespaceResolver">An object or service provider that implements <see cref="T:System.Xaml.IXamlNamespaceResolver" />.</param>
      <param name="result">Out parameter that contains the created <see cref="T:System.Xaml.Schema.XamlTypeName" /> if the return value is true.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="typeNameList" /> or <paramref name="namespaceResolver" /> is null.</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlTypeName.TypeArguments">
      <summary>Gets the type arguments used to construct this <see cref="T:System.Xaml.Schema.XamlTypeName" />.</summary>
      <returns>The type arguments, if any. May be null.</returns>
    </member>
    <member name="T:System.Xaml.Schema.XamlTypeTypeConverter">
      <summary>Converts a <see cref="T:System.Xaml.XamlType" /> object to and from a string that represents the type name. This functionality is used for XAML extensibility by markup definitions, via <see cref="T:System.Windows.Markup.PropertyDefinition" />.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlTypeTypeConverter" /> class.</summary>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an object of the specified type can be converted to an instance of <see cref="T:System.Xaml.XamlType" />, using the specified context.</summary>
      <returns>true if this converter can perform the operation; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="sourceType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>Determines whether an instance of <see cref="T:System.Xaml.XamlType" /> can be converted to the specified type, using the specified context.</summary>
      <returns>true if this converter can perform the operation; otherwise, false.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="destinationType">The type being evaluated for conversion.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>Attempts to convert the specified object to a <see cref="T:System.Xaml.XamlType" />, using the specified context.</summary>
      <returns>The converted object.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="value">The object to convert.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlTypeTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>Attempts to convert a <see cref="T:System.Xaml.XamlType" /> to the specified type, using the specified context.</summary>
      <returns>The converted object.</returns>
      <param name="context">A format context that provides information about the environment from which this converter is being invoked.</param>
      <param name="culture">Culture specific information.</param>
      <param name="value">The object to convert.</param>
      <param name="destinationType">The type to convert the object to.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" /> cannot be converted.</exception>
    </member>
    <member name="T:System.Xaml.Schema.XamlValueConverter`1">
      <summary>Provides a common API surface for techniques that generate initialization or serialization values for XAML based on input other than the eventual destination type. This includes markup extensions and type converters.</summary>
      <typeparam name="TConverterBase">The CLR base class for the particular converter that this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> represents. Typically this is one of the following: <see cref="T:System.ComponentModel.TypeConverter" />; <see cref="T:System.Windows.Markup.MarkupExtension" />; <see cref="T:System.Windows.Markup.ValueSerializer" />; </typeparam>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> class, based on a converter implementing <see cref="T:System.Type" /> and the target/destination type of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</summary>
      <param name="converterType">The <see cref="T:System.Type" /> that implements the converter behavior.</param>
      <param name="targetType">The target/destination <see cref="T:System.Xaml.XamlType" /> of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.#ctor(System.Type,System.Xaml.XamlType,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> class, based on a converter implementing <see cref="T:System.Type" /> the target/destination type of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, and a string name.</summary>
      <param name="converterType">The <see cref="T:System.Type" /> that implements the converter behavior.</param>
      <param name="targetType">The target/destination <see cref="T:System.Xaml.XamlType" /> of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</param>
      <param name="name">The string name.</param>
      <exception cref="T:System.ArgumentException">All three parameters are null (at least one is required to be non-null).</exception>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.ConverterInstance">
      <summary>Gets a created instance of the converter implementation.</summary>
      <returns>A created instance of the converter implementation, or null.</returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.ConverterType">
      <summary>Gets the <see cref="T:System.Type" /> for the class that implements the converter behavior.</summary>
      <returns>The <see cref="T:System.Type" /> for the class that implements the converter behavior.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.CreateInstance">
      <summary>Returns an instance of the converter implementation.</summary>
      <returns>An instance of the converter implementation, or null.</returns>
      <exception cref="T:System.Xaml.XamlSchemaException">Converter did not implement the correct base type.</exception>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Object)">
      <summary>Determines whether this instance of <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> and a specified object, which must also be a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object, have the same value.</summary>
      <returns>true if <paramref name="obj" /> is a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> and its value is the same as this instance; otherwise, false. </returns>
      <param name="obj">The object to compare.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.Equals(System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>Determines whether this instance of <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> and another <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> object have the same value.</summary>
      <returns>true if <paramref name="other" /> is a <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> and its value is the same as this instance; otherwise, false. </returns>
      <param name="other">The <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />  to compare.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.GetHashCode">
      <summary>Returns the hash code for this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />. </summary>
      <returns>An integer hash code. </returns>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.Name">
      <summary>Gets a string name for this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</summary>
      <returns>A string name for this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.op_Equality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>Determines whether two specified <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> objects have the same value. </summary>
      <returns>true if the value of <paramref name="converter1" /> is the same as the value of <paramref name="converter2" />; otherwise, false. </returns>
      <param name="converter1">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, or null.</param>
      <param name="converter2">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, or null.</param>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.op_Inequality(System.Xaml.Schema.XamlValueConverter{`0},System.Xaml.Schema.XamlValueConverter{`0})">
      <summary>Determines whether two specified <see cref="T:System.Xaml.Schema.XamlValueConverter`1" /> objects have different values. </summary>
      <returns>true if the value of <paramref name="converter1" /> is different than the value of <paramref name="converter2" />; otherwise, false. </returns>
      <param name="converter1">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, or null.</param>
      <param name="converter2">A <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />, or null.</param>
    </member>
    <member name="P:System.Xaml.Schema.XamlValueConverter`1.TargetType">
      <summary>Gets the target/destination <see cref="T:System.Xaml.XamlType" /> of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</summary>
      <returns>The target/destination <see cref="T:System.Xaml.XamlType" /> of the <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />.</returns>
    </member>
    <member name="M:System.Xaml.Schema.XamlValueConverter`1.ToString">
      <summary>Returns a <see cref="T:System.String" /> that represents this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />. </summary>
      <returns>A <see cref="T:System.String" /> that represents this <see cref="T:System.Xaml.Schema.XamlValueConverter`1" />. </returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\UIAutomationClient.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>UIAutomationClient</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Automation.AndCondition">
      <summary>Represents a combination of two or more <see cref="T:System.Windows.Automation.PropertyCondition" /> objects that must both be true for a match.</summary>
    </member>
    <member name="M:System.Windows.Automation.AndCondition.#ctor(System.Windows.Automation.Condition[])">
      <summary>Creates a <see cref="T:System.Windows.Automation.PropertyCondition" /> that is true if all the subconditions are true. </summary>
      <param name="conditions">Two or more subconditions.</param>
    </member>
    <member name="M:System.Windows.Automation.AndCondition.GetConditions">
      <summary>Retrieves an array of the subconditions for this condition. </summary>
    </member>
    <member name="T:System.Windows.Automation.Automation">
      <summary>Contains methods and fields for UI Automation client applications.</summary>
    </member>
    <member name="M:System.Windows.Automation.Automation.AddAutomationEventHandler(System.Windows.Automation.AutomationEvent,System.Windows.Automation.AutomationElement,System.Windows.Automation.TreeScope,System.Windows.Automation.AutomationEventHandler)">
      <summary>Registers a method that handles UI Automation events.</summary>
      <param name="eventId">The identifier for the event the method will handle.</param>
      <param name="element">The UI Automation element to associate with the event handler.</param>
      <param name="scope">The scope of events to be handled; that is, whether they are on the element itself, or on its ancestors and descendants.</param>
      <param name="eventHandler">The method to call when the specified event occurs.</param>
    </member>
    <member name="M:System.Windows.Automation.Automation.AddAutomationFocusChangedEventHandler(System.Windows.Automation.AutomationFocusChangedEventHandler)">
      <summary>Registers a method that will handle focus-changed events.</summary>
      <param name="eventHandler">The method to call when the event occurs.</param>
    </member>
    <member name="M:System.Windows.Automation.Automation.AddAutomationPropertyChangedEventHandler(System.Windows.Automation.AutomationElement,System.Windows.Automation.TreeScope,System.Windows.Automation.AutomationPropertyChangedEventHandler,System.Windows.Automation.AutomationProperty[])">
      <summary>Registers a method that will handle property-changed events.</summary>
      <param name="element">The UI Automation element with which to associate the event handler.</param>
      <param name="scope">The scope of events to be handled; that is, whether they are on the element itself, or on its ancestors and children.</param>
      <param name="eventHandler">The method to call when the event occurs.</param>
      <param name="properties">The UI Automation properties of interest.</param>
    </member>
    <member name="M:System.Windows.Automation.Automation.AddStructureChangedEventHandler(System.Windows.Automation.AutomationElement,System.Windows.Automation.TreeScope,System.Windows.Automation.StructureChangedEventHandler)">
      <summary>Registers the method that will handle structure-changed events.</summary>
      <param name="element">The UI Automation element with which to associate the event handler.</param>
      <param name="scope">The scope of events to be handled; that is, whether they are on the element itself, or on its ancestors and descendants.</param>
      <param name="eventHandler">The method to call when the structure-changed event occurs.</param>
    </member>
    <member name="M:System.Windows.Automation.Automation.Compare(System.Int32[],System.Int32[])">
      <summary>Compares two integer arrays containing run-time identifiers (IDs) to determine whether their content is the same.</summary>
      <returns>true if the compared run-time IDs refer to the same user interface (UI) element; otherwise false.</returns>
      <param name="runtimeId1">The first run-time ID to compare.</param>
      <param name="runtimeId2">The second run-time ID to compare.</param>
    </member>
    <member name="M:System.Windows.Automation.Automation.Compare(System.Windows.Automation.AutomationElement,System.Windows.Automation.AutomationElement)">
      <summary>Compares two UI Automation elements, returning true if both refer to the same UI element.</summary>
      <returns>true if the run time identifiers of the UI elements are the same; otherwise false.</returns>
      <param name="el1">The first UI Automation element to compare.</param>
      <param name="el2">The second UI Automation element to compare.</param>
    </member>
    <member name="F:System.Windows.Automation.Automation.ContentViewCondition">
      <summary>Represents a predefined view of the UI Automation tree that includes only UI Automation elements that can contain content.</summary>
    </member>
    <member name="F:System.Windows.Automation.Automation.ControlViewCondition">
      <summary>Represents a predefined view of the UI Automation tree that includes only UI Automation elements that are controls.</summary>
    </member>
    <member name="M:System.Windows.Automation.Automation.PatternName(System.Windows.Automation.AutomationPattern)">
      <summary>Retrieves the name of the specified control pattern.</summary>
      <returns>The friendly name of the control pattern, or a null reference (Nothing in Microsoft Visual Basic .NET) if the specified pattern is not found.</returns>
      <param name="pattern">The identifier of the control pattern.</param>
    </member>
    <member name="M:System.Windows.Automation.Automation.PropertyName(System.Windows.Automation.AutomationProperty)">
      <summary>Retrieves the name of the specified UI Automation property.</summary>
      <returns>The friendly name of the UI Automation property, or a null reference (Nothing in Microsoft Visual Basic .NET) if the specified UI Automation property is not found.</returns>
      <param name="property">The UI Automation property identifier of the named property.</param>
    </member>
    <member name="F:System.Windows.Automation.Automation.RawViewCondition">
      <summary>Represents a predefined view of the UI Automation tree that includes all UI Automation elements.</summary>
    </member>
    <member name="M:System.Windows.Automation.Automation.RemoveAllEventHandlers">
      <summary>Removes all registered UI Automation event handlers. </summary>
    </member>
    <member name="M:System.Windows.Automation.Automation.RemoveAutomationEventHandler(System.Windows.Automation.AutomationEvent,System.Windows.Automation.AutomationElement,System.Windows.Automation.AutomationEventHandler)">
      <summary>Removes the specified UI Automation event handler.</summary>
      <param name="eventId">An event identifier.</param>
      <param name="element">The UI Automation element on which to remove the event handler.</param>
      <param name="eventHandler">The handler method that was passed to <see cref="M:System.Windows.Automation.Automation.AddAutomationEventHandler(System.Windows.Automation.AutomationEvent,System.Windows.Automation.AutomationElement,System.Windows.Automation.TreeScope,System.Windows.Automation.AutomationEventHandler)" /> for the specified event identifier and UI Automation element.</param>
    </member>
    <member name="M:System.Windows.Automation.Automation.RemoveAutomationFocusChangedEventHandler(System.Windows.Automation.AutomationFocusChangedEventHandler)">
      <summary>Removes the specified focus-changed event handler.</summary>
      <param name="eventHandler">A handler method that was passed to <see cref="M:System.Windows.Automation.Automation.AddAutomationFocusChangedEventHandler(System.Windows.Automation.AutomationFocusChangedEventHandler)" /></param>
    </member>
    <member name="M:System.Windows.Automation.Automation.RemoveAutomationPropertyChangedEventHandler(System.Windows.Automation.AutomationElement,System.Windows.Automation.AutomationPropertyChangedEventHandler)">
      <summary>Removes the specified property-changed event handler.</summary>
      <param name="element">The UI Automation element from which to remove the event handler.</param>
      <param name="eventHandler">A handler method that was passed to <see cref="M:System.Windows.Automation.Automation.AddAutomationPropertyChangedEventHandler(System.Windows.Automation.AutomationElement,System.Windows.Automation.TreeScope,System.Windows.Automation.AutomationPropertyChangedEventHandler,System.Windows.Automation.AutomationProperty[])" /> for the specified UI Automation element.</param>
    </member>
    <member name="M:System.Windows.Automation.Automation.RemoveStructureChangedEventHandler(System.Windows.Automation.AutomationElement,System.Windows.Automation.StructureChangedEventHandler)">
      <summary>Removes the specified structure-changed event handler.</summary>
      <param name="element">The UI Automation element from which to remove the event handler.</param>
      <param name="eventHandler">A handler method that was passed to <see cref="M:System.Windows.Automation.Automation.AddStructureChangedEventHandler(System.Windows.Automation.AutomationElement,System.Windows.Automation.TreeScope,System.Windows.Automation.StructureChangedEventHandler)" /> for the specified UI Automation element.</param>
    </member>
    <member name="T:System.Windows.Automation.AutomationElement">
      <summary>Represents a UI Automation element in the UI Automation tree, and contains values used as identifiers by UI Automation client applications.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.AcceleratorKeyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AcceleratorKey" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.AccessKeyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AccessKey" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.AsyncContentLoadedEvent">
      <summary>Identifies an event raised during asynchronous content-loading.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.AutomationFocusChangedEvent">
      <summary>Identifies an event that is raised when the focus has changed.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.AutomationIdProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AutomationId" /> property, which is used to identify elements.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.AutomationPropertyChangedEvent">
      <summary>Identifies a property-changed event.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.BoundingRectangleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.BoundingRectangle" /> property.</summary>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.AutomationElement" /> object.</summary>
      <returns>A structure containing the cached property values for the <see cref="T:System.Windows.Automation.AutomationElement" />.</returns>
      <exception cref="T:System.InvalidOperationException">There are no cached properties. </exception>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.CachedChildren">
      <summary>Gets the cached child elements of this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The collection of child elements. This collection can be empty if the element has no children.</returns>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
      <exception cref="T:System.InvalidOperationException">No request was made to cache the children of this element.</exception>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.CachedParent">
      <summary>Gets the cached parent of this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The parent element. The return value can be null if the specified element has no parent—for example, if this element is the root node.</returns>
      <exception cref="T:System.InvalidOperationException">No parent element is cached.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.ClassNameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ClassName" /> property. </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.ClickablePointProperty">
      <summary>Identifies the clickable point property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.ControlTypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ControlType" /> property. </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.CultureProperty">
      <summary>Identifies the culture property.</summary>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.Current">
      <summary>Gets the current property values of the <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>A structure containing the current property values.</returns>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Windows.Automation.AutomationElement" /> has the same value as this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>true if the specified <see cref="T:System.Windows.Automation.AutomationElement" /> is equal to this <see cref="T:System.Windows.Automation.AutomationElement" />;otherwise false.</returns>
      <param name="obj">An <see cref="T:System.Windows.Automation.AutomationElement" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.FindAll(System.Windows.Automation.TreeScope,System.Windows.Automation.Condition)">
      <summary>Returns all <see cref="T:System.Windows.Automation.AutomationElement" /> objects that satisfy the specified condition.</summary>
      <returns>A collection of objects that satisfies the specified condition. If there are no matches, an empty collection is returned.</returns>
      <param name="scope">A bitwise combination of values that specifies the scope of the search.</param>
      <param name="condition">The object containing the criteria to match.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.FindFirst(System.Windows.Automation.TreeScope,System.Windows.Automation.Condition)">
      <summary>Returns the first child or descendant element that matches the specified condition.</summary>
      <returns>The first element that satisfies the condition, or null if no match is found.</returns>
      <param name="scope">A bitwise combination of values that specifies the scope of the search.</param>
      <param name="condition">The object containing the criteria to match.</param>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.FocusedElement">
      <summary>Gets the <see cref="T:System.Windows.Automation.AutomationElement" /> that currently has focus.</summary>
      <returns>The focused UI element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.FrameworkIdProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.FrameworkId" /> property. </summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.FromHandle(System.IntPtr)">
      <summary>Retrieves a new <see cref="T:System.Windows.Automation.AutomationElement" /> object for the user interface (UI) item referenced by the specified window handle.</summary>
      <returns>An <see cref="T:System.Windows.Automation.AutomationElement" /> for the UI item identified by <paramref name="hwnd" />.</returns>
      <param name="hwnd">The handle of the UI element.         </param>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.FromLocalProvider(System.Windows.Automation.Provider.IRawElementProviderSimple)">
      <summary>Retrieves a new <see cref="T:System.Windows.Automation.AutomationElement" /> object from a local <see cref="T:System.Windows.Automation.Provider.IRawElementProviderSimple" /> implementation.</summary>
      <returns>An <see cref="T:System.Windows.Automation.AutomationElement" /> that represents the element served by the provider object.</returns>
      <param name="localImpl">The provider object.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.FromPoint(System.Windows.Point)">
      <summary>Retrieves a new <see cref="T:System.Windows.Automation.AutomationElement" /> object for the user interface (UI) item at specified point on the desktop.</summary>
      <returns>The UI item at the specified point.</returns>
      <param name="pt">The physical screen coordinates on the desktop at which to locate the UI element.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetCachedPattern(System.Windows.Automation.AutomationPattern)">
      <summary>Retrieves the specified pattern from the cache of this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>An object representing the specified pattern. If there are no matching patterns, null is returned.</returns>
      <param name="pattern">The identifier of the pattern to retrieve.</param>
      <exception cref="T:System.InvalidOperationException">The requested pattern is not in the cache or is not supported by the element.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetCachedPropertyValue(System.Windows.Automation.AutomationProperty)">
      <summary>Retrieves the value of the specified property from the cache of this <see cref="T:System.Windows.Automation.AutomationElement" />. An appropriate default value for the property type is returned for properties not explicitly supported by the target user interface (UI) element.</summary>
      <returns>An object containing the value of the specified property.</returns>
      <param name="property">The identifier of the property to retrieve.</param>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The user interface (UI) for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetCachedPropertyValue(System.Windows.Automation.AutomationProperty,System.Boolean)">
      <summary>Retrieves the value of the specified property from the cache of this <see cref="T:System.Windows.Automation.AutomationElement" />, optionally ignoring any default property.</summary>
      <returns>An object containing the value of the specified property, or <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> if the element does not supply a value and <paramref name="ignoreDefaultValue" /> is true.</returns>
      <param name="property">The identifier of the property to retrieve.</param>
      <param name="ignoreDefaultValue">A value that specifies whether a default value should be ignored if the specified property is not supported.</param>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetClickablePoint">
      <summary>Retrieves a point on the <see cref="T:System.Windows.Automation.AutomationElement" /> that can be clicked.</summary>
      <returns>The physical screen coordinates of a point that can be used by a client to click on this element.</returns>
      <exception cref="T:System.Windows.Automation.NoClickablePointException">There is no clickable point.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetCurrentPattern(System.Windows.Automation.AutomationPattern)">
      <summary>Retrieves the specified pattern object on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The pattern object, if the specified pattern is currently supported by the <see cref="T:System.Windows.Automation.AutomationElement" />.</returns>
      <param name="pattern">The identifier of the pattern to retrieve.</param>
      <exception cref="T:System.InvalidOperationException">The pattern is not supported by the element.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetCurrentPropertyValue(System.Windows.Automation.AutomationProperty)">
      <summary>Retrieves the value of the specified property on this <see cref="T:System.Windows.Automation.AutomationElement" />. An appropriate default value for the property type is returned for properties not explicitly supported by the target user interface (UI) element.</summary>
      <returns>An object containing the value of the specified property.</returns>
      <param name="property">The UI Automation property identifier specifying which property to retrieve.</param>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetCurrentPropertyValue(System.Windows.Automation.AutomationProperty,System.Boolean)">
      <summary>Retrieves the value of the specified property on this <see cref="T:System.Windows.Automation.AutomationElement" />, optionally ignoring any default property.</summary>
      <returns>An object containing the value of the specified property, or <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> if the element does not supply a value and <paramref name="ignoreDefaultValue" /> is true.</returns>
      <param name="property">The UI Automation property identifier specifying which property to retrieve.</param>
      <param name="ignoreDefaultValue">A value that specifies whether a default value should be ignored if the specified property is supported.</param>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetHashCode">
      <summary>Retrieves the hash code for this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The 32-bit signed integer hash code.</returns>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetRuntimeId">
      <summary>Retrieves the unique identifier assigned to the user interface (UI) item. </summary>
      <returns>An array of integers representing the run-time identifier.</returns>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetSupportedPatterns">
      <summary>Retrieves the control patterns that this <see cref="T:System.Windows.Automation.AutomationElement" /> supports.</summary>
      <returns>An array of <see cref="T:System.Windows.Automation.AutomationPattern" /> objects that represent the supported control patterns.</returns>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetSupportedProperties">
      <summary>Retrieves the identifiers of properties supported by the element.</summary>
      <returns>An array of supported property identifiers.</returns>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.GetUpdatedCache(System.Windows.Automation.CacheRequest)">
      <summary>Retrieves a new <see cref="T:System.Windows.Automation.AutomationElement" /> with an updated cache.</summary>
      <returns>A new <see cref="T:System.Windows.Automation.AutomationElement" /> that has an updated cache.</returns>
      <param name="request">The patterns and properties to include in the updated cache.</param>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.HasKeyboardFocusProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.HasKeyboardFocus" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.HelpTextProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.HelpText" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsContentElementProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsContentElement" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsControlElementProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsControlElement" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsDockPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.DockPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsEnabledProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled" /> property, which specifies whether the user interface (UI) item referenced by the <see cref="T:System.Windows.Automation.AutomationElement" /> is enabled.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsExpandCollapsePatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.ExpandCollapsePattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsGridItemPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.GridItemPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsGridPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.GridPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsInvokePatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.InvokePattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsItemContainerPatternAvailableProperty"></member>
    <member name="F:System.Windows.Automation.AutomationElement.IsKeyboardFocusableProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsKeyboardFocusable" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsMultipleViewPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.MultipleViewPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsOffscreenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsOffscreen" /> property, which indicates whether the user interface (UI) item is visible on the screen. </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsPasswordProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsPassword" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsRangeValuePatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.RangeValuePattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsRequiredForFormProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsRequiredForForm" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsScrollItemPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.ScrollItemPattern" /> control pattern is available for this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsScrollPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.ScrollPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsSelectionItemPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.SelectionItemPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsSelectionPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.SelectionPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsSynchronizedInputPatternAvailableProperty"></member>
    <member name="F:System.Windows.Automation.AutomationElement.IsTableItemPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.TableItemPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsTablePatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.TablePattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsTextPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.TextPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsTogglePatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.TogglePattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsTransformPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.TransformPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsValuePatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.ValuePattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.IsVirtualizedItemPatternAvailableProperty"></member>
    <member name="F:System.Windows.Automation.AutomationElement.IsWindowPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.WindowPattern" /> control pattern is available on this <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.ItemStatusProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ItemStatus" /> property, which specifies the status of the visual representation of a complex item. </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.ItemTypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ItemType" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.LabeledByProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.LabeledBy" /> property, which identifies the label associated with a control.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.LayoutInvalidatedEvent">
      <summary>Identifies the event that is raised when the layout is invalidated.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.LocalizedControlTypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.LocalizedControlType" /> property in the local language.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.MenuClosedEvent">
      <summary>Identifies the event that is raised when a menu is closed.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.MenuOpenedEvent">
      <summary>Identifies the event that is raised when a menu is opened.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.NameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.Name" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.NativeWindowHandleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.NativeWindowHandle" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.NotSupported">
      <summary>Indicates that a property is not supported.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.op_Equality(System.Windows.Automation.AutomationElement,System.Windows.Automation.AutomationElement)">
      <summary>Returns a value indicating whether the specified <see cref="T:System.Windows.Automation.AutomationElement" /> objects refer to the same user interface (UI) element.</summary>
      <returns>true if the two <see cref="T:System.Windows.Automation.AutomationElement" /> objects refer to the same UI element; otherwise false.</returns>
      <param name="left">The first <see cref="T:System.Windows.Automation.AutomationElement" /> to compare. </param>
      <param name="right">The second <see cref="T:System.Windows.Automation.AutomationElement" /> to compare.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.op_Inequality(System.Windows.Automation.AutomationElement,System.Windows.Automation.AutomationElement)">
      <summary>Returns a value indicating whether the specified <see cref="T:System.Windows.Automation.AutomationElement" /> objects refer to different user interface (UI) elements.</summary>
      <returns>true if the two objects refer to different UI elements; otherwise false.</returns>
      <param name="left">The first <see cref="T:System.Windows.Automation.AutomationElement" /> to compare. </param>
      <param name="right">The second <see cref="T:System.Windows.Automation.AutomationElement" /> to compare. </param>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.OrientationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.Orientation" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.ProcessIdProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ProcessId" /> property.</summary>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.RootElement">
      <summary>Gets the root <see cref="T:System.Windows.Automation.AutomationElement" /> for the current desktop.</summary>
      <returns>The root element.</returns>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.RuntimeIdProperty">
      <summary>Identifies the property that contains the runtime identifier of the element.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.SetFocus">
      <summary>Sets focus on the <see cref="T:System.Windows.Automation.AutomationElement" />. </summary>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">The UI for the <see cref="T:System.Windows.Automation.AutomationElement" /> no longer exists.</exception>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.StructureChangedEvent">
      <summary>Identifies the event that is raised when the UI Automation tree structure is changed.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.ToolTipClosedEvent">
      <summary>Identifies the event that is raised when a tooltip is closed.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElement.ToolTipOpenedEvent">
      <summary>Identifies the event that is raised when a tooltip is opened.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.TryGetCachedPattern(System.Windows.Automation.AutomationPattern,System.Object@)">
      <summary>Retrieves a control pattern from the cache.</summary>
      <returns>true if the pattern is in the cache; false if it is not in the cache or not supported.</returns>
      <param name="pattern">The identifier of the control pattern to retrieve.</param>
      <param name="patternObject">On return, contains the pattern if it is in the cache; otherwise null.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.TryGetClickablePoint(System.Windows.Point@)">
      <summary>Retrieves a point within the element that can be clicked.</summary>
      <returns>true if there is a point that is clickable; otherwise false.</returns>
      <param name="pt">When this method returns, contains the physical screen coordinates of a clickable point.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationElement.TryGetCurrentPattern(System.Windows.Automation.AutomationPattern,System.Object@)">
      <summary>Retrieves an object that implements a control pattern.</summary>
      <returns>true if the pattern is supported; otherwise false.</returns>
      <param name="pattern">The identifier of the control pattern to retrieve.</param>
      <param name="patternObject">On return, the control pattern if it is supported; otherwise null.</param>
    </member>
    <member name="T:System.Windows.Automation.AutomationElement.AutomationElementInformation">
      <summary>Contains the property accessors used by the <see cref="P:System.Windows.Automation.AutomationElement.Cached" /> or <see cref="P:System.Windows.Automation.AutomationElement.Current" /> properties.</summary>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AcceleratorKey">
      <summary>Gets a string containing the accelerator key combinations for the element.</summary>
      <returns>The sequence of key combinations that invoke an action associated with the element.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AccessKey">
      <summary>Gets a string containing the access key character for the element.</summary>
      <returns>The character, associated with an element, that is used to activate that element.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AutomationId">
      <summary>Gets a string containing the UI Automation identifier (ID) for the element.</summary>
      <returns>An ID for an element that is unique among siblings within its container.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.BoundingRectangle">
      <summary>Gets the coordinates of the rectangle that completely encloses the element.</summary>
      <returns>The point coordinates of the enclosing rectangle.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ClassName">
      <summary>Gets a string containing the class name of the element as assigned by the control developer.</summary>
      <returns>The class name assigned by the control developer.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ControlType">
      <summary>Gets the <see cref="T:System.Windows.Automation.ControlType" /> of the element.</summary>
      <returns>The interaction model for this element. The default value is <see cref="F:System.Windows.Automation.ControlType.Custom" />.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.FrameworkId">
      <summary>Gets the name of the underlying UI framework.</summary>
      <returns>The name of the UI framework, such as "Win32", "WinForm", or "DirectUI". The default value is an empty string.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.HasKeyboardFocus">
      <summary>Gets a value that indicates whether the element has keyboard focus.</summary>
      <returns>true if the element has keyboard focus; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.HelpText">
      <summary>Gets the help text associated with the element.</summary>
      <returns>The tooltip help text for the element.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsContentElement">
      <summary>Gets a value that specifies whether the element is a content element.</summary>
      <returns>true if the element is a content element; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsControlElement">
      <summary>Gets a value that indicates whether the element is viewed as a control.</summary>
      <returns>true if the element is viewed as a control; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled">
      <summary>Gets a value that indicates whether the user interface (UI) item referenced by the UI Automation element is enabled.</summary>
      <returns>true if the control is enabled; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsKeyboardFocusable">
      <summary>Gets a value that indicates whether the UI Automation element can accept keyboard focus.</summary>
      <returns>true if the control can receive keyboard focus; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsOffscreen">
      <summary>Gets a value that indicates whether the UI Automation element is visible on the screen. </summary>
      <returns>true if the control is not visible; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsPassword">
      <summary>Gets a value that indicates whether the UI Automation element contains protected content.</summary>
      <returns>true if the element contains protected content; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsRequiredForForm">
      <summary>Gets a value that indicates whether the UI Automation element is required to be filled out on a form. </summary>
      <returns>true if the element is required to be filled out; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ItemStatus">
      <summary>Gets a description of the status of an item within an element.</summary>
      <returns>The description of the status.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ItemType">
      <summary>Gets a description of the type of an item.</summary>
      <returns>A localized string that describes the item.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.LabeledBy">
      <summary>Gets the element that contains the text label for this element.</summary>
      <returns>The element that is the label for this element.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.LocalizedControlType">
      <summary>Gets a description of the control type.</summary>
      <returns>A localized description of the control type, such as "button".</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.Name">
      <summary>Gets the name of the element.</summary>
      <returns>The name of the user interface (UI) element.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.NativeWindowHandle">
      <summary>Gets the handle of the element's window.</summary>
      <returns>The handle of the window, if one exists; otherwise 0.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.Orientation">
      <summary>Gets the orientation of the control.</summary>
      <returns>The orientation.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ProcessId">
      <summary>Gets the process identifier (ID) of this element.</summary>
      <returns>The ID of the process that hosts the element. The default value for the property is 0.</returns>
    </member>
    <member name="T:System.Windows.Automation.AutomationElementCollection">
      <summary>Represents a collection of <see cref="T:System.Windows.Automation.AutomationElement" /> objects.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationElementCollection.CopyTo(System.Array,System.Int32)">
      <summary>Copies the collection's elements to an array, starting at the specified index in the target array. </summary>
      <param name="array">The destination of the elements copied from the collection.</param>
      <param name="index">The zero-based index in the target array where copying should begin.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationElementCollection.CopyTo(System.Windows.Automation.AutomationElement[],System.Int32)">
      <summary>Copies the collection's elements to a specialized array instance, starting at the specified index in the target array. </summary>
      <param name="array">The destination of the elements copied from the collection.</param>
      <param name="index">The zero-based index in the target array where copying should begin.</param>
      <exception cref="T:System.ArgumentException">The destination array is not large enough, or <paramref name="index" /> is outside the bounds of the array.</exception>
    </member>
    <member name="P:System.Windows.Automation.AutomationElementCollection.Count">
      <summary>Gets the number of elements in this collection.</summary>
      <returns>The number of elements.</returns>
    </member>
    <member name="M:System.Windows.Automation.AutomationElementCollection.GetEnumerator">
      <summary>Returns an enumerator that can be used to iterate through the items in the collection.</summary>
      <returns>An enumerator that can be used to iterate through the <see cref="T:System.Windows.Automation.AutomationElementCollection" />.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElementCollection.IsSynchronized">
      <summary>Gets a value indicating whether the <see cref="T:System.Windows.Automation.AutomationElementCollection" /> object is synchronized (thread-safe).</summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationElementCollection.Item(System.Int32)">
      <summary>Gets the <see cref="T:System.Windows.Automation.AutomationElement" /> at the specified index.</summary>
      <returns>The <see cref="T:System.Windows.Automation.AutomationElement" /> at the specified index. </returns>
      <param name="index">The zero-based index of the element in the collection.</param>
      <exception cref="T:System.IndexOutOfRangeException">A negative integer was specified for <paramref name="index" />, or <paramref name="index" /> is greater than or equal to <see cref="P:System.Windows.Automation.AutomationElementCollection.Count" />.</exception>
    </member>
    <member name="P:System.Windows.Automation.AutomationElementCollection.SyncRoot">
      <summary>Gets an object that can be used to synchronize access to the <see cref="T:System.Windows.Automation.AutomationElementCollection" /> collection.</summary>
      <returns>An object that can be used to synchronize access to the collection.</returns>
    </member>
    <member name="T:System.Windows.Automation.AutomationElementMode">
      <summary>Contains values that specify the type of reference to use when returning UI Automation elements. These values are used in the <see cref="P:System.Windows.Automation.CacheRequest.AutomationElementMode" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementMode.None">
      <summary>Specifies that returned elements have no reference to the underlying UI and contain only cached information. This mode might be used, for example, to retrieve the names of items in a list box without obtaining references to the items themselves.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementMode.Full">
      <summary>Specifies that returned elements have a full reference to the underlying UI. </summary>
    </member>
    <member name="T:System.Windows.Automation.AutomationFocusChangedEventArgs">
      <summary>Provides data for a focus-changed event.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationFocusChangedEventArgs.#ctor(System.Int32,System.Int32)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.AutomationFocusChangedEventArgs" /> class.</summary>
      <param name="idObject">The identifier (ID) of the object that received focus.</param>
      <param name="idChild">The child ID of the object that received focus.</param>
    </member>
    <member name="P:System.Windows.Automation.AutomationFocusChangedEventArgs.ChildId">
      <summary>Gets the child Microsoft Active Accessibility identifier of the object receiving focus.</summary>
      <returns>The identifier.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationFocusChangedEventArgs.ObjectId">
      <summary>Gets the identifier (ID) of the Microsoft Active Accessibility object that generated the event.</summary>
      <returns>The ID of the user interface (UI) element that is receiving focus. For possible values, see Object Identifiers in the Microsoft Active Accessibility documentation.</returns>
    </member>
    <member name="T:System.Windows.Automation.AutomationFocusChangedEventHandler">
      <summary>Represents the method implemented by the UI Automation client application to handle the event raised by a UI Automation provider when the focus has changed.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">Information about the event.</param>
    </member>
    <member name="T:System.Windows.Automation.BasePattern">
      <summary>Provides the base implementation for control pattern classes.</summary>
    </member>
    <member name="M:System.Windows.Automation.BasePattern.Finalize">
      <summary>Frees resources and performs other cleanup operations before the object is reclaimed by garbage collection.</summary>
    </member>
    <member name="T:System.Windows.Automation.CacheRequest">
      <summary>Specifies properties and patterns that the UI Automation framework caches when an <see cref="T:System.Windows.Automation.AutomationElement" /> is obtained.</summary>
    </member>
    <member name="M:System.Windows.Automation.CacheRequest.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.CacheRequest" /> class. </summary>
    </member>
    <member name="M:System.Windows.Automation.CacheRequest.Activate">
      <summary>Sets this <see cref="T:System.Windows.Automation.CacheRequest" /> as the active specification for the items that are returned when an <see cref="T:System.Windows.Automation.AutomationElement" /> is requested on the same thread.</summary>
      <returns>The object that can be used to dispose the <see cref="T:System.Windows.Automation.CacheRequest" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationPattern)">
      <summary>Adds the specified <see cref="T:System.Windows.Automation.AutomationPattern" /> identifier to this <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
      <param name="pattern">An identifier specifying a pattern to cache.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Automation.CacheRequest" /> is active.</exception>
    </member>
    <member name="M:System.Windows.Automation.CacheRequest.Add(System.Windows.Automation.AutomationProperty)">
      <summary>Adds the specified <see cref="T:System.Windows.Automation.AutomationProperty" /> identifier to this <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
      <param name="property">An identifier specifying a property value to cache.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Windows.Automation.CacheRequest" /> is active.</exception>
    </member>
    <member name="P:System.Windows.Automation.CacheRequest.AutomationElementMode">
      <summary>Gets or sets a value that specifies whether returned elements should contain full references to the underlying user interface (UI), or only cached information. </summary>
      <returns>
        <see cref="F:System.Windows.Automation.AutomationElementMode.Full" /> if the returned elements have a full reference to the underlying user interface (UI); otherwise <see cref="F:System.Windows.Automation.AutomationElementMode.None" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.CacheRequest.Clone">
      <summary>Creates a copy of this <see cref="T:System.Windows.Automation.CacheRequest" />.</summary>
      <returns>A modifiable copy of the current object.</returns>
    </member>
    <member name="P:System.Windows.Automation.CacheRequest.Current">
      <summary>Gets the <see cref="T:System.Windows.Automation.CacheRequest" /> that is active on the current thread.</summary>
      <returns>The active <see cref="T:System.Windows.Automation.CacheRequest" />.</returns>
    </member>
    <member name="M:System.Windows.Automation.CacheRequest.Pop">
      <summary>Removes the active <see cref="T:System.Windows.Automation.CacheRequest" /> from the internal stack for the current thread.</summary>
      <exception cref="T:System.InvalidOperationException">An attempt was made to remove a cache request that was not the last one pushed onto the stack.</exception>
    </member>
    <member name="M:System.Windows.Automation.CacheRequest.Push">
      <summary>Places the <see cref="T:System.Windows.Automation.CacheRequest" /> on the internal state stack, making it the active request on the current thread.</summary>
    </member>
    <member name="P:System.Windows.Automation.CacheRequest.TreeFilter">
      <summary>Gets or sets a value specifying the view of the UI Automation element tree to use when caching.</summary>
      <returns>The view of the UI Automation element tree. The default view is <see cref="F:System.Windows.Automation.Automation.ControlViewCondition" />.</returns>
    </member>
    <member name="P:System.Windows.Automation.CacheRequest.TreeScope">
      <summary>Gets or sets a value that specifies whether caching is done only for the root of the subtree, or also for its children or descendants.</summary>
      <returns>One or more of <see cref="F:System.Windows.Automation.TreeScope.Element" />, <see cref="F:System.Windows.Automation.TreeScope.Children" />, <see cref="F:System.Windows.Automation.TreeScope.Descendants" />, or <see cref="F:System.Windows.Automation.TreeScope.Subtree" />. The default value is <see cref="F:System.Windows.Automation.TreeScope.Element" />.</returns>
      <exception cref="T:System.ArgumentException">An attempt was made to set the property to <see cref="F:System.Windows.Automation.TreeScope.Parent" /> or <see cref="F:System.Windows.Automation.TreeScope.Ancestors" />.</exception>
    </member>
    <member name="T:System.Windows.Automation.ClientSettings">
      <summary>Contains methods that make client-side providers available to the client.</summary>
    </member>
    <member name="M:System.Windows.Automation.ClientSettings.RegisterClientSideProviderAssembly(System.Reflection.AssemblyName)">
      <summary>Registers an assembly that contains client-side providers.</summary>
      <param name="assemblyName">Name of the assembly.</param>
      <exception cref="T:System.Windows.Automation.ProxyAssemblyNotLoadedException">The assembly could not be loaded.</exception>
    </member>
    <member name="M:System.Windows.Automation.ClientSettings.RegisterClientSideProviders(System.Windows.Automation.ClientSideProviderDescription[])">
      <summary>Registers client-side providers.</summary>
      <param name="clientSideProviderDescription">An array of provider descriptions.</param>
      <exception cref="T:System.Windows.Automation.ProxyAssemblyNotLoadedException">The assembly could not be loaded.</exception>
    </member>
    <member name="T:System.Windows.Automation.ClientSideProviderDescription">
      <summary>Describes the scope of a client-side UI Automation provider so that it can be registered with the UI Automation client application.</summary>
    </member>
    <member name="M:System.Windows.Automation.ClientSideProviderDescription.#ctor(System.Windows.Automation.ClientSideProviderFactoryCallback,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ClientSideProviderDescription" /> class.</summary>
      <param name="clientSideProviderFactoryCallback">The method that creates the client-side provider for a window.</param>
      <param name="className">The class name of the windows that the provider is used for.</param>
    </member>
    <member name="M:System.Windows.Automation.ClientSideProviderDescription.#ctor(System.Windows.Automation.ClientSideProviderFactoryCallback,System.String,System.String,System.Windows.Automation.ClientSideProviderMatchIndicator)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ClientSideProviderDescription" /> class.</summary>
      <param name="clientSideProviderFactoryCallback">The method that creates the client-side provider for a window.</param>
      <param name="className">The class name of the window that the provider is used for.</param>
      <param name="imageName">The name of the executable or DLL for the process where the window resides.</param>
      <param name="flags">Flags that specify behavior when matching window class names.</param>
    </member>
    <member name="P:System.Windows.Automation.ClientSideProviderDescription.ClassName">
      <summary>Gets the class name of the windows that the provider is used for.</summary>
      <returns>The window class name.</returns>
    </member>
    <member name="P:System.Windows.Automation.ClientSideProviderDescription.ClientSideProviderFactoryCallback">
      <summary>Gets the method that creates the client-side provider.</summary>
      <returns>The callback method.</returns>
    </member>
    <member name="P:System.Windows.Automation.ClientSideProviderDescription.Flags">
      <summary>Gets the flags that specify behavior when matching window class names.</summary>
      <returns>A bitwise combination of values.</returns>
    </member>
    <member name="P:System.Windows.Automation.ClientSideProviderDescription.ImageName">
      <summary>Gets the name of the executable or dynamic-link library (DLL) for the process where the window resides.</summary>
      <returns>The image name.</returns>
    </member>
    <member name="T:System.Windows.Automation.ClientSideProviderFactoryCallback">
      <summary>Represents the method that creates a client-side UI Automation provider for a window.</summary>
      <param name="hwnd">The window for which the provider is created.</param>
      <param name="idChild">The child ID of the object.</param>
      <param name="idObject">The ID of the object.</param>
    </member>
    <member name="T:System.Windows.Automation.ClientSideProviderMatchIndicator">
      <summary>Contains values that specify behavior when matching class names in a <see cref="T:System.Windows.Automation.ClientSideProviderDescription" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.ClientSideProviderMatchIndicator.None">
      <summary>No special flags.</summary>
    </member>
    <member name="F:System.Windows.Automation.ClientSideProviderMatchIndicator.AllowSubstringMatch">
      <summary>Specifies that substring comparison is used for comparing class names.</summary>
    </member>
    <member name="F:System.Windows.Automation.ClientSideProviderMatchIndicator.DisallowBaseClassNameMatch">
      <summary>Specifies that the base class of the object is not used when matching window class names.</summary>
    </member>
    <member name="T:System.Windows.Automation.Condition">
      <summary>Base type for conditions used in filtering when searching for elements in the UI Automation tree.</summary>
    </member>
    <member name="F:System.Windows.Automation.Condition.FalseCondition">
      <summary>Represents a <see cref="T:System.Windows.Automation.Condition" /> that always evaluates to false.</summary>
    </member>
    <member name="F:System.Windows.Automation.Condition.TrueCondition">
      <summary>Represents a <see cref="T:System.Windows.Automation.Condition" /> that always evaluates to true. </summary>
    </member>
    <member name="T:System.Windows.Automation.DockPattern">
      <summary>Represents controls that expose their dock properties within a docking container. </summary>
    </member>
    <member name="P:System.Windows.Automation.DockPattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.DockPattern" />.</summary>
      <returns>A structure containing the cached UI Automation property values for the control pattern.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="P:System.Windows.Automation.DockPattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.DockPattern" />.</summary>
      <returns>A structure containing the current UI Automation property values for the control pattern.</returns>
    </member>
    <member name="F:System.Windows.Automation.DockPattern.DockPositionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.DockPattern.DockPatternInformation.DockPosition" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.DockPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.DockPattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.DockPattern.SetDockPosition(System.Windows.Automation.DockPosition)">
      <summary>Docks the <see cref="T:System.Windows.Automation.AutomationElement" /> at the requested <see cref="T:System.Windows.Automation.DockPosition" /> within a docking container.</summary>
      <param name="dockPosition">The dock position relative to the boundaries of the docking container and other elements within the container.</param>
      <exception cref="T:System.InvalidOperationException">When a control is not able to execute the requested dock style.</exception>
    </member>
    <member name="T:System.Windows.Automation.DockPattern.DockPatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.DockPattern" /> object using its <see cref="P:System.Windows.Automation.DockPattern.Current" /> or <see cref="P:System.Windows.Automation.DockPattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.DockPattern.DockPatternInformation.DockPosition">
      <summary>Retrieves the <see cref="T:System.Windows.Automation.DockPosition" /> of an <see cref="T:System.Windows.Automation.AutomationElement" /> within a docking container.</summary>
      <returns>The <see cref="T:System.Windows.Automation.DockPosition" /> of the element, relative to the boundaries of the docking container and other elements within the container.</returns>
    </member>
    <member name="T:System.Windows.Automation.ExpandCollapsePattern">
      <summary>Represents controls that visually expand to display content and collapse to hide content.</summary>
    </member>
    <member name="P:System.Windows.Automation.ExpandCollapsePattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.ExpandCollapsePattern" />.</summary>
      <returns>A structure containing the cached UI Automation property values for the control pattern.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="M:System.Windows.Automation.ExpandCollapsePattern.Collapse">
      <summary>Hides all descendant nodes, controls, or content of the <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Windows.Automation.ExpandCollapsePattern.Collapse" /> is called when the <see cref="T:System.Windows.Automation.ExpandCollapseState" /> = <see cref="F:System.Windows.Automation.ExpandCollapseState.LeafNode" />.</exception>
    </member>
    <member name="P:System.Windows.Automation.ExpandCollapsePattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.ExpandCollapsePattern" />.</summary>
      <returns>A structure containing the current UI Automation property values for the control pattern.</returns>
    </member>
    <member name="M:System.Windows.Automation.ExpandCollapsePattern.Expand">
      <summary>Displays all child nodes, controls, or content of the <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Windows.Automation.ExpandCollapsePattern.Expand" /> is called when the <see cref="T:System.Windows.Automation.ExpandCollapseState" /> = <see cref="F:System.Windows.Automation.ExpandCollapseState.LeafNode" />.</exception>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapsePattern.ExpandCollapseStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.ExpandCollapsePattern.ExpandCollapsePatternInformation.ExpandCollapseState" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapsePattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ExpandCollapsePattern" /> control pattern.</summary>
    </member>
    <member name="T:System.Windows.Automation.ExpandCollapsePattern.ExpandCollapsePatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.ExpandCollapsePattern" /> object using its <see cref="P:System.Windows.Automation.ExpandCollapsePattern.Current" /> or <see cref="P:System.Windows.Automation.ExpandCollapsePattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.ExpandCollapsePattern.ExpandCollapsePatternInformation.ExpandCollapseState">
      <summary>Gets the <see cref="T:System.Windows.Automation.ExpandCollapseState" /> of the <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.ExpandCollapseState" /> of <see cref="T:System.Windows.Automation.AutomationElement" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.GridItemPattern">
      <summary>Represents child controls of containers that support <see cref="T:System.Windows.Automation.GridPattern" />.</summary>
    </member>
    <member name="P:System.Windows.Automation.GridItemPattern.Cached">
      <summary>Gets the cached property values for this <see cref="T:System.Windows.Automation.GridItemPattern" />.</summary>
      <returns>The cached property values.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="F:System.Windows.Automation.GridItemPattern.ColumnProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.GridItemPattern.GridItemPatternInformation.Column" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPattern.ColumnSpanProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.GridItemPattern.GridItemPatternInformation.ColumnSpan" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPattern.ContainingGridProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.GridItemPattern.GridItemPatternInformation.ContainingGrid" /> property. </summary>
    </member>
    <member name="P:System.Windows.Automation.GridItemPattern.Current">
      <summary>Gets the current property values for this <see cref="T:System.Windows.Automation.GridItemPattern" />.</summary>
      <returns>The current property values.</returns>
    </member>
    <member name="F:System.Windows.Automation.GridItemPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.GridItemPattern" /> control pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPattern.RowProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.GridItemPattern.GridItemPatternInformation.Row" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPattern.RowSpanProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.GridItemPattern.GridItemPatternInformation.RowSpan" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.GridItemPattern.GridItemPatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.GridItemPattern" /> object using its <see cref="P:System.Windows.Automation.GridItemPattern.Current" /> or <see cref="P:System.Windows.Automation.GridItemPattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.GridItemPattern.GridItemPatternInformation.Column">
      <summary>Gets the ordinal number of the column that contains the cell or item.</summary>
      <returns>A zero-based ordinal number that identifies the column containing the cell or item. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Automation.GridItemPattern.GridItemPatternInformation.ColumnSpan">
      <summary>Gets the number of columns spanned by a cell or item.</summary>
      <returns>The number of columns spanned. The default value is 1.</returns>
    </member>
    <member name="P:System.Windows.Automation.GridItemPattern.GridItemPatternInformation.ContainingGrid">
      <summary>Gets a UI Automation element that supports <see cref="T:System.Windows.Automation.GridPattern" /> and represents the container of the cell or item.</summary>
      <returns>A UI Automation element that supports the GridPattern and represents the table cell or item container. The default is a null reference (Nothing in Microsoft Visual Basic .NET).</returns>
    </member>
    <member name="P:System.Windows.Automation.GridItemPattern.GridItemPatternInformation.Row">
      <summary>Gets the ordinal number of the row that contains the cell or item.</summary>
      <returns>A zero-based ordinal number that identifies the row containing the table cell or item. The default value is 0.</returns>
    </member>
    <member name="P:System.Windows.Automation.GridItemPattern.GridItemPatternInformation.RowSpan">
      <summary>Gets the number of rows spanned by a cell or item.</summary>
      <returns>The number of rows spanned. The default value is 1.</returns>
    </member>
    <member name="T:System.Windows.Automation.GridPattern">
      <summary>Represents controls that act as containers for a collection of child elements. The children of this control support <see cref="T:System.Windows.Automation.GridItemPattern" /> and are organized in a two-dimensional logical coordinate system that can be traversed by row and column.</summary>
    </member>
    <member name="P:System.Windows.Automation.GridPattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.GridPattern" />.</summary>
      <returns>A structure containing the cached UI Automation property values for the control pattern.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="F:System.Windows.Automation.GridPattern.ColumnCountProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.GridPattern.GridPatternInformation.ColumnCount" /> property.</summary>
    </member>
    <member name="P:System.Windows.Automation.GridPattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.GridPattern" />.</summary>
      <returns>A structure containing the current UI Automation property values for the control pattern.</returns>
    </member>
    <member name="M:System.Windows.Automation.GridPattern.GetItem(System.Int32,System.Int32)">
      <summary>Retrieves an <see cref="T:System.Windows.Automation.AutomationElement" /> that represents the specified cell.</summary>
      <returns>An <see cref="T:System.Windows.Automation.AutomationElement" /> that represents the retrieved cell.</returns>
      <param name="row">The ordinal number of the row of interest.</param>
      <param name="column">The ordinal number of the column of interest.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Either the requested row or column coordinate is less than zero.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The requested row coordinate is larger than the <see cref="P:System.Windows.Automation.GridPattern.GridPatternInformation.RowCount" /> or the column coordinate is larger than the <see cref="P:System.Windows.Automation.GridPattern.GridPatternInformation.ColumnCount" />.</exception>
    </member>
    <member name="F:System.Windows.Automation.GridPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.GridPattern" /> control pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridPattern.RowCountProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.GridPattern.GridPatternInformation.RowCount" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.GridPattern.GridPatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.GridPattern" /> object using its <see cref="P:System.Windows.Automation.GridPattern.Current" /> or <see cref="P:System.Windows.Automation.GridPattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.GridPattern.GridPatternInformation.ColumnCount">
      <summary>Gets the number of columns in a grid.</summary>
      <returns>The total number of columns in a grid.</returns>
    </member>
    <member name="P:System.Windows.Automation.GridPattern.GridPatternInformation.RowCount">
      <summary>Gets the total number of rows in a grid.</summary>
      <returns>The total number of rows in a grid.</returns>
    </member>
    <member name="T:System.Windows.Automation.InvokePattern">
      <summary>Represents controls that initiate or perform a single, unambiguous action and do not maintain state when activated.</summary>
    </member>
    <member name="M:System.Windows.Automation.InvokePattern.Invoke">
      <summary>Sends a request to activate a control and initiate its single, unambiguous action.</summary>
      <exception cref="T:System.InvalidOperationException">The element does not support the <see cref="T:System.Windows.Automation.InvokePattern" /> control pattern or is hidden or blocked.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">The element is not enabled. Can be raised when a UI Automation provider has implemented its own handling of the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled" /> property.</exception>
    </member>
    <member name="F:System.Windows.Automation.InvokePattern.InvokedEvent">
      <summary>Identifies the event raised when a control is invoked or activated. </summary>
    </member>
    <member name="F:System.Windows.Automation.InvokePattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.InvokePattern" /> control pattern. </summary>
    </member>
    <member name="T:System.Windows.Automation.ItemContainerPattern">
      <summary>Represents an object that manages items and supports retrieving an item by property value. </summary>
    </member>
    <member name="M:System.Windows.Automation.ItemContainerPattern.FindItemByProperty(System.Windows.Automation.AutomationElement,System.Windows.Automation.AutomationProperty,System.Object)">
      <summary>Retrieves an element by the specified property value.</summary>
      <returns>The first item that matches the search criterion; otherwise, null if no items match.</returns>
      <param name="startAfter">The item in the container after which to begin the search.</param>
      <param name="property">The property that contains the value to retrieve.</param>
      <param name="value">The value to retrieve.</param>
    </member>
    <member name="F:System.Windows.Automation.ItemContainerPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ItemContainerPattern" /> control pattern.</summary>
    </member>
    <member name="T:System.Windows.Automation.MultipleViewPattern">
      <summary>Represents controls that provide, and are able to switch between, multiple representations of the same set of information or child controls.</summary>
    </member>
    <member name="P:System.Windows.Automation.MultipleViewPattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.MultipleViewPattern" />.</summary>
      <returns>A structure containing the cached UI Automation property values for the control pattern.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="P:System.Windows.Automation.MultipleViewPattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.MultipleViewPattern" />.</summary>
      <returns>A structure containing the current UI Automation property values for the control pattern.</returns>
    </member>
    <member name="F:System.Windows.Automation.MultipleViewPattern.CurrentViewProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.MultipleViewPattern.MultipleViewPatternInformation.CurrentView" /> property.</summary>
    </member>
    <member name="M:System.Windows.Automation.MultipleViewPattern.GetViewName(System.Int32)">
      <summary>Retrieves the name of a control-specific view.</summary>
      <returns>A localized string representing the control-specific view name.</returns>
      <param name="viewId">The control-specific view identifier.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="viewId" /> is not a member of the supported views collection.</exception>
    </member>
    <member name="F:System.Windows.Automation.MultipleViewPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.MultipleViewPattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.MultipleViewPattern.SetCurrentView(System.Int32)">
      <summary>Sets the current control-specific view. </summary>
      <param name="viewId">A control-specific view identifier.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="viewId" /> is not a member of the supported views collection.</exception>
    </member>
    <member name="F:System.Windows.Automation.MultipleViewPattern.SupportedViewsProperty">
      <summary>Identifies the property that gets the control-specific collection of views.</summary>
    </member>
    <member name="T:System.Windows.Automation.MultipleViewPattern.MultipleViewPatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.MultipleViewPattern" /> object using its <see cref="P:System.Windows.Automation.MultipleViewPattern.Current" /> or <see cref="P:System.Windows.Automation.MultipleViewPattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.MultipleViewPattern.MultipleViewPatternInformation.CurrentView">
      <summary>Retrieves the current control-specific view.</summary>
      <returns>The integer value for the current view of the <see cref="T:System.Windows.Automation.AutomationElement" />. The default value is 0.</returns>
    </member>
    <member name="M:System.Windows.Automation.MultipleViewPattern.MultipleViewPatternInformation.GetSupportedViews">
      <summary>Retrieves a collection of control-specific view identifiers.</summary>
      <returns>A collection of integer values that identify the views available for an <see cref="T:System.Windows.Automation.AutomationElement" />. The default is an empty integer array.</returns>
    </member>
    <member name="T:System.Windows.Automation.NotCondition">
      <summary>Represents a <see cref="T:System.Windows.Automation.Condition" /> that is the negative of a specified <see cref="T:System.Windows.Automation.Condition" />.</summary>
    </member>
    <member name="M:System.Windows.Automation.NotCondition.#ctor(System.Windows.Automation.Condition)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.NotCondition" /> class.</summary>
      <param name="condition">The condition to negate.</param>
    </member>
    <member name="P:System.Windows.Automation.NotCondition.Condition">
      <summary>Gets the <see cref="T:System.Windows.Automation.Condition" /> that this <see cref="T:System.Windows.Automation.NotCondition" /> negates. </summary>
      <returns>The <see cref="T:System.Windows.Automation.Condition" /> that this <see cref="T:System.Windows.Automation.NotCondition" /> negates.</returns>
    </member>
    <member name="T:System.Windows.Automation.OrCondition">
      <summary>Represents a combination of two or more conditions where a match exists if any one of the conditions is true.</summary>
    </member>
    <member name="M:System.Windows.Automation.OrCondition.#ctor(System.Windows.Automation.Condition[])">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.OrCondition" /> class.</summary>
      <param name="conditions">Two or more conditions, any one of which may be true for a match.</param>
    </member>
    <member name="M:System.Windows.Automation.OrCondition.GetConditions">
      <summary>Retrieves the conditions that are combined in this condition.</summary>
      <returns>The conditions combined in this condition.</returns>
    </member>
    <member name="T:System.Windows.Automation.PropertyCondition">
      <summary>Represents a <see cref="T:System.Windows.Automation.Condition" /> that tests whether a property has a specified value.</summary>
    </member>
    <member name="M:System.Windows.Automation.PropertyCondition.#ctor(System.Windows.Automation.AutomationProperty,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.PropertyCondition" /> class.</summary>
      <param name="property">The property to test.</param>
      <param name="value">The value to test the property for.</param>
    </member>
    <member name="M:System.Windows.Automation.PropertyCondition.#ctor(System.Windows.Automation.AutomationProperty,System.Object,System.Windows.Automation.PropertyConditionFlags)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.PropertyCondition" /> class, with flags.</summary>
      <param name="property">The property to test.</param>
      <param name="value">The value to test the property for.</param>
      <param name="flags">Flags that affect the comparison.</param>
    </member>
    <member name="P:System.Windows.Automation.PropertyCondition.Flags">
      <summary>Gets the flags used for testing the property value.</summary>
    </member>
    <member name="P:System.Windows.Automation.PropertyCondition.Property">
      <summary>Gets the property that this condition is testing.</summary>
    </member>
    <member name="P:System.Windows.Automation.PropertyCondition.Value">
      <summary>Gets the property value that this condition is testing.</summary>
    </member>
    <member name="T:System.Windows.Automation.PropertyConditionFlags">
      <summary>Contains values that specify how a property value is tested in a <see cref="T:System.Windows.Automation.PropertyCondition" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.PropertyConditionFlags.None">
      <summary>Specifies that the property value is tested using default behavior (case-sensitive comparison for strings).</summary>
    </member>
    <member name="F:System.Windows.Automation.PropertyConditionFlags.IgnoreCase">
      <summary>Specifies that comparison with a string property value is not case-sensitive.</summary>
    </member>
    <member name="T:System.Windows.Automation.RangeValuePattern">
      <summary>Represents a control that can be set to a value within a range.</summary>
    </member>
    <member name="P:System.Windows.Automation.RangeValuePattern.Cached">
      <summary>Gets the cached property values for this <see cref="T:System.Windows.Automation.RangeValuePattern" />.</summary>
      <returns>The cached property values.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="P:System.Windows.Automation.RangeValuePattern.Current">
      <summary>Gets the current property values for this <see cref="T:System.Windows.Automation.RangeValuePattern" />.</summary>
      <returns>The current property values.</returns>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePattern.IsReadOnlyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.IsReadOnly" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePattern.LargeChangeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.LargeChange" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePattern.MaximumProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Maximum" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePattern.MinimumProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Minimum" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.RangeValuePattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.RangeValuePattern.SetValue(System.Double)">
      <summary>Sets the value associated with the UI Automation element.</summary>
      <param name="value">The new value of the element.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" /> is less than the minimum or greater than the maximum value of the element.</exception>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePattern.SmallChangeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.SmallChange" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePattern.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Value" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.RangeValuePattern" /> object using its <see cref="P:System.Windows.Automation.TransformPattern.Current" /> or <see cref="P:System.Windows.Automation.TransformPattern.Cached" /> accessors. </summary>
    </member>
    <member name="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.IsReadOnly">
      <summary>Gets a value that specifies whether the value of a UI Automation element is read-only. </summary>
      <returns>true if the value is read-only; false if it can be modified. The default is true.</returns>
    </member>
    <member name="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.LargeChange">
      <summary>Gets the control-specific large-change value which is added to or subtracted from the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> property.</summary>
      <returns>The large-change value or null if the element does not support <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.LargeChange" />. The default value is 0.0.</returns>
    </member>
    <member name="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Maximum">
      <summary>Gets the maximum range value supported by the UI Automation element.</summary>
      <returns>The maximum value supported by the UI Automation element or null if the element does not support <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Maximum" />. The default value is 0.0.</returns>
    </member>
    <member name="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Minimum">
      <summary>Gets the minimum range value supported by the UI Automation element.</summary>
      <returns>The minimum value supported by the UI Automation element or null if the element does not support <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Minimum" />. The default value is 0.0.</returns>
    </member>
    <member name="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.SmallChange">
      <summary>Gets the small-change value, unique to the UI Automation element, which is added to or subtracted from the elements <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Value" /> property.</summary>
      <returns>The small-change value unique to the UI Automation element or null if the element does not support <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.SmallChange" />. The default value is 0.0.</returns>
    </member>
    <member name="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Value">
      <summary>Gets the current value of the UI Automation element.</summary>
      <returns>The current value of the UI Automation element or null if the element does not support <see cref="P:System.Windows.Automation.RangeValuePattern.RangeValuePatternInformation.Value" />. The default value is 0.0.</returns>
    </member>
    <member name="T:System.Windows.Automation.ScrollItemPattern">
      <summary>Represents child controls of containers that support the <see cref="T:System.Windows.Automation.ScrollPattern" /> control pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollItemPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ScrollItemPattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.ScrollItemPattern.ScrollIntoView">
      <summary>Scrolls the content area of a container object in order to display the <see cref="T:System.Windows.Automation.AutomationElement" /> within the visible region (viewport) of the container.</summary>
      <exception cref="T:System.InvalidOperationException">The item could not be scrolled into view.</exception>
    </member>
    <member name="T:System.Windows.Automation.ScrollPattern">
      <summary>Represents controls that act as scrollable containers for a collection of child elements. The children of this element support <see cref="T:System.Windows.Automation.ScrollItemPattern" />.</summary>
    </member>
    <member name="P:System.Windows.Automation.ScrollPattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.ScrollPattern" />.</summary>
      <returns>A structure containing the cached UI Automation property values for the control pattern.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="P:System.Windows.Automation.ScrollPattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.ScrollPattern" />.</summary>
      <returns>A structure containing the current UI Automation property values for the control pattern.</returns>
    </member>
    <member name="F:System.Windows.Automation.ScrollPattern.HorizontallyScrollableProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.HorizontallyScrollable" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPattern.HorizontalScrollPercentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.HorizontalScrollPercent" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPattern.HorizontalViewSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.HorizontalViewSize" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPattern.NoScroll">
      <summary>Specifies that scrolling should not be performed.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ScrollPattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.ScrollPattern.Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)">
      <summary>Scrolls the visible region of the content area horizontally and vertically.</summary>
      <param name="horizontalAmount">The horizontal increment specific to the control. <see cref="F:System.Windows.Automation.ScrollPattern.NoScroll" /> should be passed in if the control cannot be scrolled in this direction.</param>
      <param name="verticalAmount">The vertical increment specific to the control. <see cref="F:System.Windows.Automation.ScrollPattern.NoScroll" /> should be passed in if the control cannot be scrolled in this direction.</param>
      <exception cref="T:System.ArgumentException">A control supports <see cref="F:System.Windows.Automation.ScrollAmount.SmallIncrement" /> values exclusively for horizontal or vertical scrolling but a <see cref="F:System.Windows.Automation.ScrollAmount.LargeIncrement" /> value is passed in.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt is made to scroll in an unsupported direction.</exception>
    </member>
    <member name="M:System.Windows.Automation.ScrollPattern.ScrollHorizontal(System.Windows.Automation.ScrollAmount)">
      <summary>Scrolls the currently visible region of the content area, horizontally, the specified <see cref="T:System.Windows.Automation.ScrollAmount" />.</summary>
      <param name="amount">The horizontal <see cref="T:System.Windows.Automation.ScrollAmount" /> increment specific to the control.</param>
      <exception cref="T:System.ArgumentException">If a control supports <see cref="F:System.Windows.Automation.ScrollAmount.SmallIncrement" /> values exclusively for horizontal or vertical scrolling but a <see cref="F:System.Windows.Automation.ScrollAmount.LargeIncrement" /> value is passed in.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt is made to scroll in an unsupported direction.</exception>
    </member>
    <member name="M:System.Windows.Automation.ScrollPattern.ScrollVertical(System.Windows.Automation.ScrollAmount)">
      <summary>Scrolls the currently visible region of the content area, vertically, the specified <see cref="T:System.Windows.Automation.ScrollAmount" />.</summary>
      <param name="amount">The vertical <see cref="T:System.Windows.Automation.ScrollAmount" /> increment specific to the control.</param>
      <exception cref="T:System.ArgumentException">If a control supports <see cref="F:System.Windows.Automation.ScrollAmount.SmallIncrement" /> values exclusively for horizontal or vertical scrolling but a <see cref="F:System.Windows.Automation.ScrollAmount.LargeIncrement" /> value is passed in.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt is made to scroll in an unsupported direction.</exception>
    </member>
    <member name="M:System.Windows.Automation.ScrollPattern.SetScrollPercent(System.Double,System.Double)">
      <summary>Sets the horizontal and/or vertical scroll position as a percentage of the total content area within the <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <param name="horizontalPercent">The percentage of the total horizontal content area. <see cref="F:System.Windows.Automation.ScrollPattern.NoScroll" /> should be passed in if the control cannot be scrolled in this direction.</param>
      <param name="verticalPercent">The percentage of the total vertical content area. <see cref="F:System.Windows.Automation.ScrollPattern.NoScroll" /> should be passed in if the control cannot be scrolled in this direction.</param>
      <exception cref="T:System.ArgumentException">A value that cannot be converted to a double is passed in.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A value greater than 100 or less than 0 is passed in (except -1, which is equivalent to <see cref="F:System.Windows.Automation.ScrollPattern.NoScroll" />). The <see cref="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.HorizontalScrollPercent" /> and <see cref="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.VerticalScrollPercent" /> values are normalized to either 0% or 100%. </exception>
      <exception cref="T:System.InvalidOperationException">An attempt is made to scroll in an unsupported direction.</exception>
    </member>
    <member name="F:System.Windows.Automation.ScrollPattern.VerticallyScrollableProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.VerticallyScrollable" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPattern.VerticalScrollPercentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.VerticalScrollPercent" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPattern.VerticalViewSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.VerticalViewSize" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.ScrollPattern.ScrollPatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.ScrollPattern" /> object using its <see cref="P:System.Windows.Automation.ScrollPattern.Current" /> or <see cref="P:System.Windows.Automation.ScrollPattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.HorizontallyScrollable">
      <summary>Gets a value that indicates whether the UI Automation element can scroll horizontally.</summary>
      <returns>true if the UI Automation element can scroll horizontally; otherwise false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.HorizontalScrollPercent">
      <summary>Gets the current horizontal scroll position.</summary>
      <returns>The horizontal scroll position as a percentage of the total content area within the UI Automation element. The default value is 0.0.</returns>
    </member>
    <member name="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.HorizontalViewSize">
      <summary>Gets the current horizontal view size.</summary>
      <returns>The horizontal size of the viewable region as a percentage of the total content area within the UI Automation element. The default value is 100.0.</returns>
    </member>
    <member name="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.VerticallyScrollable">
      <summary>Retrieves a value that indicates whether the UI Automation element can scroll vertically.</summary>
      <returns>true if the UI Automation element can scroll horizontally; otherwise false. The default value is false.</returns>
    </member>
    <member name="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.VerticalScrollPercent">
      <summary>Gets the current vertical scroll position.</summary>
      <returns>The vertical scroll position as a percentage of the total content area within the UI Automation element. The default value is 0.0.</returns>
    </member>
    <member name="P:System.Windows.Automation.ScrollPattern.ScrollPatternInformation.VerticalViewSize">
      <summary>Gets the current vertical view size.</summary>
      <returns>The vertical size of the viewable region as a percentage of the total content area within the UI Automation element. The default value is 100.0.</returns>
    </member>
    <member name="T:System.Windows.Automation.SelectionItemPattern">
      <summary>Represents selectable child items of container controls that support <see cref="T:System.Windows.Automation.SelectionPattern" />.</summary>
    </member>
    <member name="M:System.Windows.Automation.SelectionItemPattern.AddToSelection">
      <summary>Adds the current element to the collection of selected items.</summary>
      <exception cref="T:System.InvalidOperationException">An attempt is made to add a selection to a single-selection container where <see cref="F:System.Windows.Automation.SelectionPattern.CanSelectMultipleProperty" /> = false and another element is already selected.</exception>
    </member>
    <member name="P:System.Windows.Automation.SelectionItemPattern.Cached">
      <summary>Gets the cached property values for this <see cref="T:System.Windows.Automation.SelectionItemPattern" />.</summary>
      <returns>The cached property values.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="P:System.Windows.Automation.SelectionItemPattern.Current">
      <summary>Gets the current property values for this <see cref="T:System.Windows.Automation.SelectionItemPattern" />.</summary>
      <returns>The current property values.</returns>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPattern.ElementAddedToSelectionEvent">
      <summary>Identifies the event raised when an item is added to a collection of selected items.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPattern.ElementRemovedFromSelectionEvent">
      <summary>Identifies the event raised when an item is removed from a collection of selected items.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPattern.ElementSelectedEvent">
      <summary>Identifies the event that is raised when a call to any of <see cref="M:System.Windows.Automation.SelectionItemPattern.Select" />, <see cref="M:System.Windows.Automation.SelectionItemPattern.AddToSelection" />, or <see cref="M:System.Windows.Automation.SelectionItemPattern.RemoveFromSelection" /> results in a single item being selected.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPattern.IsSelectedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.SelectionItemPattern.SelectionItemPatternInformation.IsSelected" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.SelectionItemPattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.SelectionItemPattern.RemoveFromSelection">
      <summary>Removes the current element from the collection of selected items.</summary>
      <exception cref="T:System.InvalidOperationException">An attempt is made to remove a selection from a selection container where one item is selected and <see cref="F:System.Windows.Automation.SelectionPattern.IsSelectionRequiredProperty" /> = true.</exception>
    </member>
    <member name="M:System.Windows.Automation.SelectionItemPattern.Select">
      <summary>Deselects any selected items and then selects the current element.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPattern.SelectionContainerProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.SelectionItemPattern.SelectionItemPatternInformation.SelectionContainer" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.SelectionItemPattern.SelectionItemPatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.SelectionItemPattern" /> object using its <see cref="P:System.Windows.Automation.SelectionItemPattern.Current" /> or <see cref="P:System.Windows.Automation.SelectionItemPattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.SelectionItemPattern.SelectionItemPatternInformation.IsSelected">
      <summary>Gets a value that indicates whether an item is selected. </summary>
      <returns>true if the item is selected; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.SelectionItemPattern.SelectionItemPatternInformation.SelectionContainer">
      <summary>Gets the <see cref="T:System.Windows.Automation.AutomationElement" /> that supports the <see cref="T:System.Windows.Automation.SelectionPattern" /> control pattern and acts as the container for the calling object.</summary>
      <returns>The container object. The default is a null reference (Nothing in Microsoft Visual Basic .NET).</returns>
    </member>
    <member name="T:System.Windows.Automation.SelectionPattern">
      <summary>Represents a control that acts as a container for a collection of selectable child items. The children of this element support the <see cref="T:System.Windows.Automation.SelectionItemPattern" />.</summary>
    </member>
    <member name="P:System.Windows.Automation.SelectionPattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.SelectionPattern" />.</summary>
      <returns>A structure containing the cached UI Automation property values for the control pattern.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="F:System.Windows.Automation.SelectionPattern.CanSelectMultipleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.SelectionPattern.SelectionPatternInformation.CanSelectMultiple" /> property.</summary>
    </member>
    <member name="P:System.Windows.Automation.SelectionPattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.SelectionPattern" />.</summary>
      <returns>A structure containing the current UI Automation property values for the control pattern.</returns>
    </member>
    <member name="F:System.Windows.Automation.SelectionPattern.InvalidatedEvent">
      <summary>Identifies the event that is raised when a selection in a container has changed significantly and requires sending more addition and removal events than the <see cref="F:System.Windows.Automation.Provider.AutomationInteropProvider.InvalidateLimit" /> constant permits.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPattern.IsSelectionRequiredProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.SelectionPattern.SelectionPatternInformation.IsSelectionRequired" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.SelectionPattern" /> control pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPattern.SelectionProperty">
      <summary>Identifies the property that gets the selected items in a container.</summary>
    </member>
    <member name="T:System.Windows.Automation.SelectionPattern.SelectionPatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.SelectionPattern" /> object using its <see cref="P:System.Windows.Automation.SelectionPattern.Current" /> or <see cref="P:System.Windows.Automation.SelectionPattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.SelectionPattern.SelectionPatternInformation.CanSelectMultiple">
      <summary>Gets a value that specifies whether the container allows more than one child element to be selected concurrently.</summary>
      <returns>true if the control supports multiple selection; otherwise false.</returns>
    </member>
    <member name="M:System.Windows.Automation.SelectionPattern.SelectionPatternInformation.GetSelection">
      <summary>Retrieves all items in the selection container that are selected. </summary>
      <returns>The collection of selected items. The default is an empty array.</returns>
    </member>
    <member name="P:System.Windows.Automation.SelectionPattern.SelectionPatternInformation.IsSelectionRequired">
      <summary>Gets a value that specifies whether the container requires at least one child item to be selected. </summary>
      <returns>true if the control requires at least one item to be selected; otherwise false.</returns>
    </member>
    <member name="T:System.Windows.Automation.SynchronizedInputPattern">
      <summary>Represents objects that support synchronized input events.</summary>
    </member>
    <member name="M:System.Windows.Automation.SynchronizedInputPattern.Cancel">
      <summary>Stops listening for input.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputPattern.InputDiscardedEvent">
      <summary>Identifies the event raised when WPF discards input.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputPattern.InputReachedOtherElementEvent">
      <summary>Identifies the event raised when the input was received by an element other than the one currently listening for the input.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputPattern.InputReachedTargetEvent">
      <summary>Identifies the event raised when the input was received by the element currently listening for the input.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.SynchronizedInputPattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.SynchronizedInputPattern.StartListening(System.Windows.Automation.SynchronizedInputType)">
      <summary>Designates that the provider start listening for input of the specified type.</summary>
      <param name="inputType">The type of input to listen for.</param>
    </member>
    <member name="T:System.Windows.Automation.TableItemPattern">
      <summary>Represents the child controls of containers that support <see cref="T:System.Windows.Automation.TablePattern" />. </summary>
    </member>
    <member name="P:System.Windows.Automation.TableItemPattern.Cached">
      <summary>Gets the cached property values for this <see cref="T:System.Windows.Automation.TableItemPattern" />.</summary>
      <returns>The cached property values.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="F:System.Windows.Automation.TableItemPattern.ColumnHeaderItemsProperty">
      <summary>Identifies the property that retrieves all the column headers associated with a table item or cell.</summary>
    </member>
    <member name="P:System.Windows.Automation.TableItemPattern.Current">
      <summary>Gets the current property values for this <see cref="T:System.Windows.Automation.TableItemPattern" />.</summary>
      <returns>The current property values.</returns>
    </member>
    <member name="F:System.Windows.Automation.TableItemPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.TableItemPattern" /> control pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.TableItemPattern.RowHeaderItemsProperty">
      <summary>Identifies the property that retrieves all the row headers associated with a table item or cell.</summary>
    </member>
    <member name="T:System.Windows.Automation.TableItemPattern.TableItemPatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.TableItemPattern" /> object using its <see cref="P:System.Windows.Automation.TableItemPattern.Current" /> or <see cref="P:System.Windows.Automation.TableItemPattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.TableItemPattern.TableItemPatternInformation.Column">
      <summary>Gets the ordinal number of the column containing the table cell or item.</summary>
      <returns>A zero-based ordinal number representing the column containing the table cell or item.</returns>
    </member>
    <member name="P:System.Windows.Automation.TableItemPattern.TableItemPatternInformation.ColumnSpan">
      <summary>Gets the number of columns spanned by a table cell or item.</summary>
      <returns>The number of columns spanned. The default value is 1.</returns>
    </member>
    <member name="P:System.Windows.Automation.TableItemPattern.TableItemPatternInformation.ContainingGrid">
      <summary>Gets a UI Automation element that supports the GridPattern control pattern and represents the table cell or item container.</summary>
      <returns>A UI Automation element that supports the GridPattern control pattern and represents the table cell or item container.</returns>
    </member>
    <member name="M:System.Windows.Automation.TableItemPattern.TableItemPatternInformation.GetColumnHeaderItems">
      <summary>Retrieves all the column headers associated with a table item or cell.</summary>
      <returns>A collection of column header elements. The default is an empty array.</returns>
    </member>
    <member name="M:System.Windows.Automation.TableItemPattern.TableItemPatternInformation.GetRowHeaderItems">
      <summary>Retrieves all the row headers associated with a table item or cell.</summary>
      <returns>A collection of row header elements. The default is an empty array.</returns>
    </member>
    <member name="P:System.Windows.Automation.TableItemPattern.TableItemPatternInformation.Row">
      <summary>Gets the ordinal number of the row containing the table cell or item.</summary>
      <returns>A zero-based ordinal number representing the column containing the table cell or item.</returns>
    </member>
    <member name="P:System.Windows.Automation.TableItemPattern.TableItemPatternInformation.RowSpan">
      <summary>Gets the number of rows spanned by a table cell or item.</summary>
      <returns>The number of columns spanned. The default value is 1.</returns>
    </member>
    <member name="T:System.Windows.Automation.TablePattern">
      <summary>Represents controls that act as containers for a collection of child elements. The children of this element support <see cref="T:System.Windows.Automation.TableItemPattern" /> and are organized in a two-dimensional logical coordinate system that can be traversed by row and column. </summary>
    </member>
    <member name="P:System.Windows.Automation.TablePattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.TablePattern" />.</summary>
      <returns>A structure containing the cached UI Automation property values for the control pattern.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="F:System.Windows.Automation.TablePattern.ColumnHeadersProperty">
      <summary>Identifies the property that gets the collection of column headers for a table.</summary>
    </member>
    <member name="P:System.Windows.Automation.TablePattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.TablePattern" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.TablePattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.TablePattern" /> control pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.TablePattern.RowHeadersProperty">
      <summary>Identifies the property that gets the collection of row headers for a table.</summary>
    </member>
    <member name="F:System.Windows.Automation.TablePattern.RowOrColumnMajorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.TablePattern.TablePatternInformation.RowOrColumnMajor" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.TablePattern.TablePatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.TablePattern" /> object using its <see cref="P:System.Windows.Automation.TablePattern.Current" /> or <see cref="P:System.Windows.Automation.TablePattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.TablePattern.TablePatternInformation.ColumnCount">
      <summary>Gets the total number of columns in a table.</summary>
      <returns>The total number of columns in a table. The default value is zero.</returns>
    </member>
    <member name="M:System.Windows.Automation.TablePattern.TablePatternInformation.GetColumnHeaders">
      <summary>Retrieves a collection of <see cref="T:System.Windows.Automation.AutomationElement" />s representing all the column headers in a table.</summary>
      <returns>A collection of <see cref="T:System.Windows.Automation.AutomationElement" />s. The default is an empty array.</returns>
    </member>
    <member name="M:System.Windows.Automation.TablePattern.TablePatternInformation.GetRowHeaders">
      <summary>Retrieves a collection of <see cref="T:System.Windows.Automation.AutomationElement" />s representing all the row headers in a table.</summary>
      <returns>A collection of <see cref="T:System.Windows.Automation.AutomationElement" />s. The default is an empty array.</returns>
    </member>
    <member name="P:System.Windows.Automation.TablePattern.TablePatternInformation.RowCount">
      <summary>Gets the total number of rows in a table.</summary>
      <returns>The total number of rows in a table. The default value is zero.</returns>
    </member>
    <member name="P:System.Windows.Automation.TablePattern.TablePatternInformation.RowOrColumnMajor">
      <summary>Retrieves the primary direction of traversal (<see cref="F:System.Windows.Automation.RowOrColumnMajor.ColumnMajor" />, <see cref="F:System.Windows.Automation.RowOrColumnMajor.RowMajor" />, <see cref="F:System.Windows.Automation.RowOrColumnMajor.Indeterminate" />) for the table.</summary>
      <returns>The primary direction of traversal. The default is <see cref="F:System.Windows.Automation.RowOrColumnMajor.Indeterminate" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.TextPattern">
      <summary>Represents controls that contain text.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.AnimationStyleAttribute">
      <summary>Identifies the <see cref="T:System.Windows.Automation.Text.AnimationStyle" /> attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.BackgroundColorAttribute">
      <summary>Identifies the BackgroundColor attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.BulletStyleAttribute">
      <summary>Identifies the <see cref="T:System.Windows.Automation.Text.BulletStyle" /> attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.CapStyleAttribute">
      <summary>Identifies the <see cref="T:System.Windows.Automation.Text.CapStyle" /> attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.CultureAttribute">
      <summary>Identifies the Culture (<see cref="T:System.Globalization.CultureInfo" />) attribute of a text range down to the sub-language level; for example, French–Switzerland (fr-CH) instead of French (fr). </summary>
    </member>
    <member name="P:System.Windows.Automation.TextPattern.DocumentRange">
      <summary>Gets a text range that encloses the main text of a document. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.FontNameAttribute">
      <summary>Identifies the FontName attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.FontSizeAttribute">
      <summary>Identifies the FontSize attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.FontWeightAttribute">
      <summary>Identifies the FontWeight attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.ForegroundColorAttribute">
      <summary>Identifies the ForegroundColor (COLORREF) attribute of a text range. </summary>
    </member>
    <member name="M:System.Windows.Automation.TextPattern.GetSelection">
      <summary>Retrieves a collection of disjoint text ranges associated with the current text selection or selections. </summary>
      <returns>A collection of disjoint text ranges.</returns>
      <exception cref="T:System.InvalidOperationException">The text container does not support text selection.</exception>
    </member>
    <member name="M:System.Windows.Automation.TextPattern.GetVisibleRanges">
      <summary>Retrieves an array of disjoint text ranges from a text container where each text range begins with the first partially visible line through to the end of the last partially visible line. </summary>
      <returns>The collection of visible text ranges within the container or an empty array. Null is never returned.</returns>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.HorizontalTextAlignmentAttribute">
      <summary>Identifies the <see cref="T:System.Windows.Automation.Text.HorizontalTextAlignment" /> attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.IndentationFirstLineAttribute">
      <summary>Identifies the IndentationFirstLine (<see cref="P:System.Windows.Documents.Paragraph.TextIndent" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.IndentationLeadingAttribute">
      <summary>Identifies the IndentationLeading(<see cref="P:System.Windows.Documents.Paragraph.TextIndent" />) attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.IndentationTrailingAttribute">
      <summary>Identifies the IndentationTrailing(<see cref="P:System.Windows.Documents.Paragraph.TextIndent" />) attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.IsHiddenAttribute">
      <summary>Identifies the IsHidden attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.IsItalicAttribute">
      <summary>Identifies the IsItalic (<see cref="T:System.Windows.FontStyle" />) attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.IsReadOnlyAttribute">
      <summary>Identifies the IsReadOnly attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.IsSubscriptAttribute">
      <summary>Identifies the IsSubscript (<see cref="T:System.Windows.FontVariants" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.IsSuperscriptAttribute">
      <summary>Identifies the IsSuperscript (<see cref="T:System.Windows.FontVariants" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.MarginBottomAttribute">
      <summary>Identifies the MarginBottom (<see cref="T:System.Drawing.Printing.PageSettings" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.MarginLeadingAttribute">
      <summary>Identifies the MarginLeading (<see cref="T:System.Drawing.Printing.PageSettings" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.MarginTopAttribute">
      <summary>Identifies the MarginTop (<see cref="T:System.Drawing.Printing.PageSettings" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.MarginTrailingAttribute">
      <summary>Identifies the MarginTrailing (<see cref="T:System.Drawing.Printing.PageSettings" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.MixedAttributeValue">
      <summary>Identifies whether the value of a given attribute varies over a text range in a rich edit control.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.OutlineStylesAttribute">
      <summary>Identifies the OutlineStyles (<see cref="T:System.Windows.Automation.Text.OutlineStyles" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.OverlineColorAttribute">
      <summary>Identifies the OverlineColor attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.OverlineStyleAttribute">
      <summary>Identifies the OverlineStyle (<see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.TextPattern" /> pattern. </summary>
    </member>
    <member name="M:System.Windows.Automation.TextPattern.RangeFromChild(System.Windows.Automation.AutomationElement)">
      <summary>Retrieves a text range enclosing a child element such as an image, hyperlink, Microsoft Excel spreadsheet, or other embedded object. </summary>
      <returns>A range that spans the child element.</returns>
      <param name="childElement">The enclosed object.</param>
      <exception cref="T:System.ArgumentNullException">The child element is null.</exception>
      <exception cref="T:System.InvalidOperationException">The element is not a child of the text container.</exception>
    </member>
    <member name="M:System.Windows.Automation.TextPattern.RangeFromPoint(System.Windows.Point)">
      <summary>Returns the degenerate (empty) text range nearest to the specified screen coordinates. </summary>
      <returns>A degenerate range nearest the specified location. Null is never returned.</returns>
      <param name="screenLocation">The location in screen coordinates.</param>
      <exception cref="T:System.ArgumentException">A given point is outside the <see cref="T:System.Windows.Automation.AutomationElement" /> associated with the text pattern.</exception>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.StrikethroughColorAttribute">
      <summary>Identifies the StrikethroughColor attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.StrikethroughStyleAttribute">
      <summary>Identifies the StrikethroughStyle (<see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" />) attribute of a text range.</summary>
    </member>
    <member name="P:System.Windows.Automation.TextPattern.SupportedTextSelection">
      <summary>Gets a value that specifies whether a text provider supports selection and, if so, the type of selection supported.</summary>
      <returns>One of None, Single, or Multiple from <see cref="T:System.Windows.Automation.SupportedTextSelection" />.</returns>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.TabsAttribute">
      <summary>Identifies the Tabs attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.TextChangedEvent">
      <summary>Identifies the event raised whenever textual content is modified.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.TextFlowDirectionsAttribute">
      <summary>Identifies the TextFlowDirections (<see cref="T:System.Windows.Automation.Text.FlowDirections" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.TextSelectionChangedEvent">
      <summary>Identifies the event raised when the text selection is modified. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.UnderlineColorAttribute">
      <summary>Identifies the UnderlineColor attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPattern.UnderlineStyleAttribute">
      <summary>Identifies the UnderlineStyle (<see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" />) attribute of a text range. </summary>
    </member>
    <member name="T:System.Windows.Automation.TogglePattern">
      <summary>Represents a control that can cycle through a set of states and maintain a state once set. </summary>
    </member>
    <member name="P:System.Windows.Automation.TogglePattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.TogglePattern" />.</summary>
      <returns>A structure containing the cached UI Automation property values for the control pattern.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="P:System.Windows.Automation.TogglePattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.TogglePattern" />.</summary>
      <returns>A structure containing the current UI Automation property values for the control pattern.</returns>
    </member>
    <member name="F:System.Windows.Automation.TogglePattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.TogglePattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.TogglePattern.Toggle">
      <summary>Cycles through the toggle states of an <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.TogglePattern.ToggleStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.TogglePattern.TogglePatternInformation.ToggleState" />property.</summary>
    </member>
    <member name="T:System.Windows.Automation.TogglePattern.TogglePatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.TogglePattern" /> object using its <see cref="P:System.Windows.Automation.TogglePattern.Current" /> or <see cref="P:System.Windows.Automation.TogglePattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.TogglePattern.TogglePatternInformation.ToggleState">
      <summary>Retrieves the toggle state of the <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.ToggleState" /> of the <see cref="T:System.Windows.Automation.AutomationElement" />. The default value is <see cref="F:System.Windows.Automation.ToggleState.Indeterminate" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.TransformPattern">
      <summary>Represents a control that can be moved, resized, or rotated within a two-dimensional space.</summary>
    </member>
    <member name="P:System.Windows.Automation.TransformPattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.TransformPattern" />.</summary>
      <returns>A structure containing the cached UI Automation property values for the control pattern.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="F:System.Windows.Automation.TransformPattern.CanMoveProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanMove" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.TransformPattern.CanResizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanResize" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.TransformPattern.CanRotateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanRotate" /> property.</summary>
    </member>
    <member name="P:System.Windows.Automation.TransformPattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.TransformPattern" />.</summary>
      <returns>A structure containing the current UI Automation property values for the control pattern.</returns>
    </member>
    <member name="M:System.Windows.Automation.TransformPattern.Move(System.Double,System.Double)">
      <summary>Moves the control.</summary>
      <param name="x">Absolute screen coordinates of the left side of the control.</param>
      <param name="y">Absolute screen coordinates of the top of the control.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanMove" /> property is false.</exception>
    </member>
    <member name="F:System.Windows.Automation.TransformPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.TransformPattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.TransformPattern.Resize(System.Double,System.Double)">
      <summary>Resizes the control.</summary>
      <param name="width">The new width of the window, in pixels.</param>
      <param name="height">The new height of the window, in pixels.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanResize" /> property is false.</exception>
    </member>
    <member name="M:System.Windows.Automation.TransformPattern.Rotate(System.Double)">
      <summary>Rotates the control.</summary>
      <param name="degrees">The number of degrees to rotate the element. A positive number rotates clockwise; a negative number rotates counterclockwise.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanRotate" /> property is false.</exception>
    </member>
    <member name="T:System.Windows.Automation.TransformPattern.TransformPatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.TransformPattern" /> object using its <see cref="P:System.Windows.Automation.TransformPattern.Current" /> or <see cref="P:System.Windows.Automation.TransformPattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanMove">
      <summary>Gets a value that specifies whether the UI Automation element can be moved.</summary>
      <returns>true if the element can be moved; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanResize">
      <summary>Gets a value that specifies whether the UI Automation element can be resized.</summary>
      <returns>true if the element can be resized; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.TransformPattern.TransformPatternInformation.CanRotate">
      <summary>Gets a value that specifies whether the UI Automation element can be rotated.</summary>
      <returns>true if the element can be rotated; otherwise false.</returns>
    </member>
    <member name="T:System.Windows.Automation.TreeWalker">
      <summary>Provides methods and properties used to navigate the UI Automation tree. </summary>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.#ctor(System.Windows.Automation.Condition)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.TreeWalker" /> class.</summary>
      <param name="condition">The view of the UI Automation element tree that <see cref="T:System.Windows.Automation.TreeWalker" /> will navigate.</param>
    </member>
    <member name="P:System.Windows.Automation.TreeWalker.Condition">
      <summary>Gets the object that defines the view for the <see cref="T:System.Windows.Automation.TreeWalker" /> object.</summary>
      <returns>The condition that defines the view. This is the value that was passed to the constructor.</returns>
    </member>
    <member name="F:System.Windows.Automation.TreeWalker.ContentViewWalker">
      <summary>Represents a predefined <see cref="T:System.Windows.Automation.TreeWalker" /> containing a view of elements in the tree that are marked as content controls.</summary>
    </member>
    <member name="F:System.Windows.Automation.TreeWalker.ControlViewWalker">
      <summary>Represents a predefined <see cref="T:System.Windows.Automation.TreeWalker" /> containing a view of elements in the tree that are marked as controls.</summary>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.GetFirstChild(System.Windows.Automation.AutomationElement)">
      <summary>Retrieves the first child element of the specified <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The first child element, or a null reference (Nothing in Microsoft Visual Basic .NET) if there is no such element.</returns>
      <param name="element">The element from which to retrieve the first child.</param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.GetFirstChild(System.Windows.Automation.AutomationElement,System.Windows.Automation.CacheRequest)">
      <summary>Retrieves the first child element of the specified <see cref="T:System.Windows.Automation.AutomationElement" /> and caches properties and patterns.</summary>
      <returns>The first child element, or a null reference (Nothing in Microsoft Visual Basic .NET) if there is no such element.</returns>
      <param name="element">The element from which to retrieve the first child.</param>
      <param name="request">A cache request object specifying properties and patterns on the returned <see cref="T:System.Windows.Automation.AutomationElement" /> to cache.</param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.GetLastChild(System.Windows.Automation.AutomationElement)">
      <summary>Retrieves the last child element of the specified <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The <see cref="T:System.Windows.Automation.AutomationElement" /> that is the last child element, or a null reference (Nothing in Microsoft Visual Basic .NET) if there is no such element.</returns>
      <param name="element">The element from which to retrieve the last child.</param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.GetLastChild(System.Windows.Automation.AutomationElement,System.Windows.Automation.CacheRequest)">
      <summary>Retrieves the last child element of the specified <see cref="T:System.Windows.Automation.AutomationElement" /> and caches properties and patterns.</summary>
      <returns>The last element, or a null reference (Nothing in Microsoft Visual Basic .NET) if there is no such element.</returns>
      <param name="element">The element from which to retrieve the last child.</param>
      <param name="request">A cache request object specifying properties and patterns on the returned <see cref="T:System.Windows.Automation.AutomationElement" /> to cache.</param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.GetNextSibling(System.Windows.Automation.AutomationElement)">
      <summary> Retrieves the next sibling element of the specified <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The next sibling element, or a null reference (Nothing in Microsoft Visual Basic .NET) if there is no such element.</returns>
      <param name="element">The <see cref="T:System.Windows.Automation.AutomationElement" /> from which to retrieve the next sibling.</param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.GetNextSibling(System.Windows.Automation.AutomationElement,System.Windows.Automation.CacheRequest)">
      <summary>Retrieves the next sibling element of the specified <see cref="T:System.Windows.Automation.AutomationElement" /> and caches properties and patterns.</summary>
      <returns>The next sibling element, or a null reference (Nothing in Microsoft Visual Basic .NET) if there is no such element.</returns>
      <param name="element">The element from which to retrieve the next sibling.</param>
      <param name="request">A cache request object specifying properties and patterns on the returned <see cref="T:System.Windows.Automation.AutomationElement" /> to cache.</param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.GetParent(System.Windows.Automation.AutomationElement)">
      <summary>Retrieves the parent element of the specified <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The parent element, or a null reference (Nothing in Microsoft Visual Basic .NET) if the specified element is the root element in the tree, or if the parent element is not visible in the current view.</returns>
      <param name="element">The element whose parent is to be returned.</param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.GetParent(System.Windows.Automation.AutomationElement,System.Windows.Automation.CacheRequest)">
      <summary>Retrieves the parent element of the specified <see cref="T:System.Windows.Automation.AutomationElement" /> and caches properties and patterns.</summary>
      <returns>The parent element, or a null reference (Nothing in Microsoft Visual Basic .NET) if the specified element is the root element in the tree, or the parent element is not visible in this view.</returns>
      <param name="element">The element whose parent is to be returned. </param>
      <param name="request">A cache request object specifying members on the returned <see cref="T:System.Windows.Automation.AutomationElement" /> to cache. </param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.GetPreviousSibling(System.Windows.Automation.AutomationElement)">
      <summary>Retrieves the previous sibling of the specified <see cref="T:System.Windows.Automation.AutomationElement" />.</summary>
      <returns>The previous sibling element, or a null reference (Nothing in Microsoft Visual Basic .NET) if there is no such element.</returns>
      <param name="element">The element from which to retrieve the previous sibling.</param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.GetPreviousSibling(System.Windows.Automation.AutomationElement,System.Windows.Automation.CacheRequest)">
      <summary>Retrieves the previous sibling of the specified <see cref="T:System.Windows.Automation.AutomationElement" /> and caches properties and patterns.</summary>
      <returns>The previous sibling element, or a null reference (Nothing in Microsoft Visual Basic .NET) if there is no such element.</returns>
      <param name="element">The element from which to retrieve the previous sibling.</param>
      <param name="request">A cache request object specifying properties and patterns on the returned <see cref="T:System.Windows.Automation.AutomationElement" /> to cache.</param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.Normalize(System.Windows.Automation.AutomationElement)">
      <summary>Retrieves the node itself, if it satisfies the <see cref="P:System.Windows.Automation.TreeWalker.Condition" />, or the nearest parent or ancestor node that satisfies the <see cref="P:System.Windows.Automation.TreeWalker.Condition" />.</summary>
      <returns>The nearest <see cref="T:System.Windows.Automation.AutomationElement" /> in the current view. If the navigation up the ancestor chain reaches the root element, the root element is returned.</returns>
      <param name="element">The element from which to start the normalization.</param>
    </member>
    <member name="M:System.Windows.Automation.TreeWalker.Normalize(System.Windows.Automation.AutomationElement,System.Windows.Automation.CacheRequest)">
      <summary>Retrieves the node itself, if it satisfies the <see cref="P:System.Windows.Automation.TreeWalker.Condition" />, or the nearest parent or ancestor node that satisfies the <see cref="P:System.Windows.Automation.TreeWalker.Condition" />, and caches properties and patterns.</summary>
      <returns>The nearest <see cref="T:System.Windows.Automation.AutomationElement" /> in the current view. If the navigation up the ancestor chain reaches the root element, the root element is returned.</returns>
      <param name="element">The element from which to start the normalization.</param>
      <param name="request">A cache request object specifying properties and patterns on the returned <see cref="T:System.Windows.Automation.AutomationElement" /> to cache.</param>
    </member>
    <member name="F:System.Windows.Automation.TreeWalker.RawViewWalker">
      <summary>Represents a predefined <see cref="T:System.Windows.Automation.TreeWalker" /> containing a view of all the elements in the tree.</summary>
    </member>
    <member name="T:System.Windows.Automation.ValuePattern">
      <summary>Represents a control that has an intrinsic value that does not span a range and can be represented as a string. This string may or may not be editable depending on the control and its settings.</summary>
    </member>
    <member name="P:System.Windows.Automation.ValuePattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.ValuePattern" />.</summary>
      <returns>The cached property values.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="P:System.Windows.Automation.ValuePattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.ValuePattern" />.</summary>
      <returns>The current property values.</returns>
    </member>
    <member name="F:System.Windows.Automation.ValuePattern.IsReadOnlyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.ValuePattern.ValuePatternInformation.IsReadOnly" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ValuePattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ValuePattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.ValuePattern.SetValue(System.String)">
      <summary>Sets the value of the control.</summary>
      <param name="value"></param>
      <exception cref="T:System.InvalidOperationException">The control is read-only.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">The control is not enabled.</exception>
    </member>
    <member name="F:System.Windows.Automation.ValuePattern.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.ValuePattern.ValuePatternInformation.Value" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.ValuePattern.ValuePatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.ValuePattern" /> object using its <see cref="P:System.Windows.Automation.ValuePattern.Current" /> or <see cref="P:System.Windows.Automation.ValuePattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.ValuePattern.ValuePatternInformation.IsReadOnly">
      <summary>Gets a value that specifies whether the value of a UI Automation element is read-only. </summary>
      <returns>true if the value is read-only; false if it can be modified.</returns>
    </member>
    <member name="P:System.Windows.Automation.ValuePattern.ValuePatternInformation.Value">
      <summary>Gets the value of the UI Automation element.</summary>
      <returns>The value of the UI Automation element as a string. The default is an empty string.</returns>
    </member>
    <member name="T:System.Windows.Automation.VirtualizedItemPattern">
      <summary>Represents items inside containers that are virtualized and need to be made fully accessible as UI Automation elements.</summary>
    </member>
    <member name="F:System.Windows.Automation.VirtualizedItemPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.VirtualizedItemPattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.VirtualizedItemPattern.Realize">
      <summary>Makes the virtual item fully accessible as a UI Automation element.</summary>
    </member>
    <member name="T:System.Windows.Automation.WindowPattern">
      <summary>Represents a control that provides fundamental window-based functionality within a traditional graphical user interface (GUI).</summary>
    </member>
    <member name="P:System.Windows.Automation.WindowPattern.Cached">
      <summary>Gets the cached UI Automation property values for this <see cref="T:System.Windows.Automation.WindowPattern" />.</summary>
      <returns>A structure containing the cached UI Automation property values for the control pattern.</returns>
      <exception cref="T:System.InvalidOperationException">The requested property is not in the cache.</exception>
    </member>
    <member name="F:System.Windows.Automation.WindowPattern.CanMaximizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.CanMaximize" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPattern.CanMinimizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.CanMinimize" /> property.</summary>
    </member>
    <member name="M:System.Windows.Automation.WindowPattern.Close">
      <summary>Attempts to close the current window.</summary>
      <exception cref="T:System.InvalidOperationException">The control is unable to perform the requested action.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">When the control is no longer available.</exception>
    </member>
    <member name="P:System.Windows.Automation.WindowPattern.Current">
      <summary>Gets the current UI Automation property values for this <see cref="T:System.Windows.Automation.WindowPattern" />.</summary>
      <returns>A structure containing the current UI Automation property values for the control pattern.</returns>
    </member>
    <member name="F:System.Windows.Automation.WindowPattern.IsModalProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.IsModal" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPattern.IsTopmostProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.IsTopmost" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPattern.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.WindowPattern" /> control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.WindowPattern.SetWindowVisualState(System.Windows.Automation.WindowVisualState)">
      <summary>Changes the <see cref="T:System.Windows.Automation.WindowVisualState" /> of the window. </summary>
      <param name="state">The requested <see cref="T:System.Windows.Automation.WindowVisualState" /> of the window.</param>
      <exception cref="T:System.InvalidOperationException">A control does not support a requested behavior.</exception>
    </member>
    <member name="M:System.Windows.Automation.WindowPattern.WaitForInputIdle(System.Int32)">
      <summary>Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first. </summary>
      <returns>true if the window has entered the idle state; false if the timeout occurred.</returns>
      <param name="milliseconds">The amount of time, in milliseconds, to wait for the associated process to become idle. The maximum is <see cref="F:System.Int32.MaxValue" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">The parameter passed in is not a valid number.</exception>
    </member>
    <member name="F:System.Windows.Automation.WindowPattern.WindowClosedEvent">
      <summary>Identifies the event that is raised when a window is closed.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPattern.WindowInteractionStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.WindowInteractionState" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPattern.WindowOpenedEvent">
      <summary>Identifies the event that is raised when a window is opened.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPattern.WindowVisualStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.WindowVisualState" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.WindowPattern.WindowPatternInformation">
      <summary>Provides access to the property values of a <see cref="T:System.Windows.Automation.WindowPattern" /> object using its <see cref="P:System.Windows.Automation.WindowPattern.Current" /> or <see cref="P:System.Windows.Automation.WindowPattern.Cached" /> accessors.</summary>
    </member>
    <member name="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.CanMaximize">
      <summary>Gets a value that specifies whether the <see cref="T:System.Windows.Automation.AutomationElement" /> can be maximized.</summary>
      <returns>true if the <see cref="T:System.Windows.Automation.AutomationElement" /> can be maximized; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.CanMinimize">
      <summary>Gets a value that specifies whether the current <see cref="T:System.Windows.Automation.AutomationElement" /> can be minimized. </summary>
      <returns>true if the <see cref="T:System.Windows.Automation.AutomationElement" /> can be minimized; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.IsModal">
      <summary>Gets a value that specifies whether the <see cref="T:System.Windows.Automation.AutomationElement" /> is modal.</summary>
      <returns>true if the <see cref="T:System.Windows.Automation.AutomationElement" /> is modal; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.IsTopmost">
      <summary>Gets a value that specifies whether the <see cref="T:System.Windows.Automation.AutomationElement" /> is the topmost element in the z-order.</summary>
      <returns>true if the <see cref="T:System.Windows.Automation.AutomationElement" /> is topmost; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.WindowInteractionState">
      <summary>Gets the <see cref="T:System.Windows.Automation.WindowInteractionState" /> of the <see cref="T:System.Windows.Automation.AutomationElement" />. </summary>
      <returns>The <see cref="T:System.Windows.Automation.WindowInteractionState" /> of the <see cref="T:System.Windows.Automation.AutomationElement" />. The default value is <see cref="F:System.Windows.Automation.WindowInteractionState.Running" />.</returns>
    </member>
    <member name="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.WindowVisualState">
      <summary>Gets the <see cref="T:System.Windows.Automation.WindowVisualState" /> of the <see cref="T:System.Windows.Automation.AutomationElement" />. </summary>
      <returns>The <see cref="T:System.Windows.Automation.WindowVisualState" /> of the <see cref="T:System.Windows.Automation.AutomationElement" />. The default value is <see cref="F:System.Windows.Automation.WindowVisualState.Normal" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.Text.TextPatternRange">
      <summary>Represents a span of continuous text in a <see cref="T:System.Windows.Automation.TextPattern" /> container. </summary>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.AddToSelection">
      <summary>Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</summary>
      <exception cref="T:System.InvalidOperationException">If text provider does not support multiple, disjoint selections (for example, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> must have a value of Multiple).</exception>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.Clone">
      <summary>Retrieves a new <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> identical to the original <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> and inheriting all properties of the original. </summary>
      <returns>The new text range. A null reference (Nothing in Microsoft Visual Basic .NET) is never returned.</returns>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.Compare(System.Windows.Automation.Text.TextPatternRange)">
      <summary>Returns a <see cref="T:System.Boolean" /> value indicating whether the span (the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> endpoint to the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint) of a text range is the same as another text range. </summary>
      <returns>true if the span of both text ranges is identical; otherwise false. </returns>
      <param name="range">A text range to compare. </param>
      <exception cref="T:System.ArgumentException">If the range being compared does not come from the same text provider.</exception>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
      <summary>Returns an <see cref="T:System.Int32" /> indicating whether two text ranges have identical endpoints.  </summary>
      <returns>Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint. Returns zero if the caller's endpoint is at the same location as the target endpoint. Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint. </returns>
      <param name="endpoint">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the caller.</param>
      <param name="targetRange">The target range for comparison.</param>
      <param name="targetEndpoint">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the target.</param>
      <exception cref="T:System.ArgumentNullException">If range is a null reference (Nothing in Microsoft Visual Basic .NET).</exception>
      <exception cref="T:System.ArgumentException">If range is from another container.</exception>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
      <summary>Expands the text range to the specified <see cref="T:System.Windows.Automation.Text.TextUnit" />.</summary>
      <param name="unit">The textual unit.</param>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.FindAttribute(System.Windows.Automation.AutomationTextAttribute,System.Object,System.Boolean)">
      <summary>Returns a text range subset that has the specified attribute value. </summary>
      <returns>A text range having a matching attribute and attribute value; otherwise null (Nothing in Microsoft Visual Basic .NET). </returns>
      <param name="attribute">The attribute to search for.</param>
      <param name="value">The attribute value to search for. This value must match the type specified for the attribute. </param>
      <param name="backward">true if the last occurring text range should be returned instead of the first; otherwise false. </param>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.FindText(System.String,System.Boolean,System.Boolean)">
      <summary>Returns a text range subset that contains the specified text. </summary>
      <returns>A text range matching the specified text; otherwise null (Nothing in Microsoft Visual Basic .NET). </returns>
      <param name="text">The text string to search for. </param>
      <param name="backward">true if the last occurring text range should be returned instead of the first; otherwise false. </param>
      <param name="ignoreCase">true if case should be ignored; otherwise false. </param>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.GetAttributeValue(System.Windows.Automation.AutomationTextAttribute)">
      <summary>Returns the value of the specified attribute across the entire text range. </summary>
      <returns>Returns the value of the specified attribute. For example, GetAttributeValue(TextPattern.FontNameAttribute) would return a string that represents the font name, if unique, of the text range while GetAttributeValue(TextPattern.IsItalicAttribute) would return a boolean.Returns <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /> if the value of the specified attribute varies over the text range.Returns <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> if the specified attribute is not supported by the provider or the control. </returns>
      <param name="attribute">The text attribute.</param>
      <exception cref="T:System.ArgumentException">If the specified attribute is not valid.</exception>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.GetBoundingRectangles">
      <summary>Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</summary>
      <returns>An array of bounding rectangles for each full or partial line of text in a text range.An empty array for a degenerate text range.An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.</returns>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.GetChildren">
      <summary>Retrieves a collection of all embedded objects that fall within the text range. </summary>
      <returns>A collection of all child objects that fall within the range. Children that overlap with the range but are not entirely enclosed by it will also be included in the collection.Returns an empty collection if there are no child objects.</returns>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.GetEnclosingElement">
      <summary>Returns the innermost <see cref="T:System.Windows.Automation.AutomationElement" /> that encloses the text range. </summary>
      <returns>The innermost element enclosing the caller. </returns>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.GetText(System.Int32)">
      <summary>Returns the plain text of the text range. </summary>
      <returns>The plain text of the text range, possibly truncated at the specified <paramref name="maxLength" />. </returns>
      <param name="maxLength">The maximum length of the string to return. Use -1 if no limit is required. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="maxLength" /> is less than -1.</exception>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
      <summary>Moves the text range the specified number of text units.</summary>
      <returns>The number of units actually moved. This can be less than the number requested if either of the new text range endpoints is greater than or less than the <see cref="P:System.Windows.Automation.TextPattern.DocumentRange" /> endpoints. </returns>
      <param name="unit">The text unit boundary. </param>
      <param name="count">The number of text units to move. A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect. </param>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextPatternRange,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
      <summary>Moves one endpoint of a text range to the specified endpoint of a second text range. </summary>
      <param name="endpoint">The endpoint to move.</param>
      <param name="targetRange">Another range from the same text provider.</param>
      <param name="targetEndpoint">An endpoint on the other range.</param>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
      <summary>Moves one endpoint of the text range the specified number of <see cref="T:System.Windows.Automation.Text.TextUnit" />s within the document range. </summary>
      <returns>The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.</returns>
      <param name="endpoint">The endpoint to move.</param>
      <param name="unit">The textual unit for moving.</param>
      <param name="count">The number of units to move. A positive count moves the endpoint forward. A negative count moves backward. A count of 0 has no effect.</param>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.RemoveFromSelection">
      <summary>Removes a highlighted section of text, corresponding to the calling text range <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints, from an existing collection of highlighted text in a text container that supports multiple, disjoint selections.</summary>
      <exception cref="T:System.InvalidOperationException">If text provider does not support multiple, disjoint selections (for example, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> must have a value of Multiple).</exception>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.ScrollIntoView(System.Boolean)">
      <summary>Causes the text control to scroll vertically until the text range is visible in the viewport. </summary>
      <param name="alignToTop">true if the text control should be scrolled so the text range is flush with the top of the viewport; false if it should be flush with the bottom of the viewport. </param>
      <exception cref="T:System.InvalidOperationException">If scrolling is not supported by the control.</exception>
    </member>
    <member name="M:System.Windows.Automation.Text.TextPatternRange.Select">
      <summary>Highlights text in the text control corresponding to the text range <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints.</summary>
      <exception cref="T:System.InvalidOperationException">Occurs when text selection is not supported by the text control.</exception>
    </member>
    <member name="P:System.Windows.Automation.Text.TextPatternRange.TextPattern">
      <summary>Gets the <see cref="T:System.Windows.Automation.TextPattern" /> associated with the text range. </summary>
      <returns>The text provider.</returns>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.Xml.Linq.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xml.Linq</name>
  </assembly>
  <members>
    <member name="T:System.Xml.Linq.Extensions">
      <summary>Contains the LINQ to XML extension methods.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of elements that contains the ancestors of every node in the source collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the ancestors of every node in the source collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XNode" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of elements that contains the ancestors of every node in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the ancestors of every node in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</param>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XNode" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>Returns a collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the ancestors of every element in the source collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.AncestorsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of elements that contains every element in the source collection, and the ancestors of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the ancestors of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>Returns a collection of the attributes of every element in the source collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the attributes of every element in the source collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Attributes(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the attributes of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains a filtered collection of the attributes of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.DescendantNodes``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of the descendant nodes of every document and element in the source collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the descendant nodes of every document and element in the source collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XContainer" /> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.DescendantNodesAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>Returns a collection of nodes that contains every element in the source collection, and the descendant nodes of every element in the source collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains every element in the source collection, and the descendant nodes of every element in the source collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of elements that contains the descendant elements of every element and document in the source collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the descendant elements of every element and document in the source collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XContainer" /> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of elements that contains the descendant elements of every element and document in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the descendant elements of every element and document in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XContainer" /> that contains the source collection.</param>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
      <summary>Returns a collection of elements that contains every element in the source collection, and the descendent elements of every element in the source collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the descendent elements of every element in the source collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.DescendantsAndSelf(System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement},System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of elements that contains every element in the source collection, and the descendents of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains every element in the source collection, and the descendents of every element in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of the child elements of every element and document in the source collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the child elements of every element or document in the source collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Elements``1(System.Collections.Generic.IEnumerable{``0},System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the child elements of every element and document in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the child elements of every element and document in the source collection. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the source collection.</param>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.InDocumentOrder``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of nodes that contains all nodes in the source collection, sorted in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains all nodes in the source collection, sorted in document order.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XNode" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Nodes``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Returns a collection of the child nodes of every document and element in the source collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the child nodes of every document and element in the source collection.</returns>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XContainer" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Remove(System.Collections.Generic.IEnumerable{System.Xml.Linq.XAttribute})">
      <summary>Removes every attribute in the source collection from its parent element.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the source collection.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.Extensions.Remove``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>Removes every node in the source collection from its parent node.</summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contains the source collection.</param>
      <typeparam name="T">The type of the objects in <paramref name="source" />, constrained to <see cref="T:System.Xml.Linq.XNode" />.</typeparam>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.Linq.LoadOptions">
      <summary>Specifies load options when parsing XML. </summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.None">
      <summary>Does not preserve insignificant white space or load base URI and line information.</summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.PreserveWhitespace">
      <summary>Preserves insignificant white space while parsing.</summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.SetBaseUri">
      <summary>Requests the base URI information from the <see cref="T:System.Xml.XmlReader" />, and makes it available via the <see cref="P:System.Xml.Linq.XObject.BaseUri" /> property.</summary>
    </member>
    <member name="F:System.Xml.Linq.LoadOptions.SetLineInfo">
      <summary>Requests the line information from the <see cref="T:System.Xml.XmlReader" /> and makes it available via properties on <see cref="T:System.Xml.Linq.XObject" />.</summary>
    </member>
    <member name="T:System.Xml.Linq.ReaderOptions">
      <summary>Specifies whether to omit duplicate namespaces when loading an <see cref="T:System.Xml.Linq.XDocument" /> with an <see cref="T:System.Xml.XmlReader" />.</summary>
    </member>
    <member name="F:System.Xml.Linq.ReaderOptions.None">
      <summary>No reader options specified.</summary>
    </member>
    <member name="F:System.Xml.Linq.ReaderOptions.OmitDuplicateNamespaces">
      <summary>Omit duplicate namespaces when loading the <see cref="T:System.Xml.Linq.XDocument" />.</summary>
    </member>
    <member name="T:System.Xml.Linq.SaveOptions">
      <summary>Specifies serialization options.</summary>
    </member>
    <member name="F:System.Xml.Linq.SaveOptions.None">
      <summary>Format (indent) the XML while serializing.</summary>
    </member>
    <member name="F:System.Xml.Linq.SaveOptions.DisableFormatting">
      <summary>Preserve all insignificant white space while serializing.</summary>
    </member>
    <member name="F:System.Xml.Linq.SaveOptions.OmitDuplicateNamespaces">
      <summary>Remove the duplicate namespace declarations while serializing.</summary>
    </member>
    <member name="T:System.Xml.Linq.XAttribute">
      <summary>Represents an XML attribute.</summary>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XAttribute)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XAttribute" /> class from another <see cref="T:System.Xml.Linq.XAttribute" /> object. </summary>
      <param name="other">An <see cref="T:System.Xml.Linq.XAttribute" /> object to copy from.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="other" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.#ctor(System.Xml.Linq.XName,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XAttribute" /> class from the specified name and value. </summary>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> of the attribute.</param>
      <param name="value">An <see cref="T:System.Object" /> containing the value of the attribute.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="name" /> or <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.EmptySequence">
      <summary>Gets an empty collection of attributes.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> containing an empty collection.</returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.IsNamespaceDeclaration">
      <summary>Determines if this attribute is a namespace declaration.</summary>
      <returns>true if this attribute is a namespace declaration; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.Name">
      <summary>Gets the expanded name of this attribute.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> containing the name of this attribute.</returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.NextAttribute">
      <summary>Gets the next attribute of the parent element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XAttribute" /> containing the next attribute of the parent element.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XAttribute" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Attribute" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTime">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.DateTime" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.DateTime" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTime}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.DateTime" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Decimal}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Decimal" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Double}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Double" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Decimal">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Decimal" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.DateTimeOffset">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.DateTimeOffset" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Guid">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Guid" />.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Guid" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Guid}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Guid" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.TimeSpan}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.TimeSpan" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.DateTimeOffset}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.TimeSpan">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.TimeSpan" />.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.TimeSpan" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.TimeSpan" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Double">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Double" />.</summary>
      <returns>A <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Double" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Double" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int32">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to an <see cref="T:System.Int32" />.</summary>
      <returns>A <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Int32" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Int32" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int32}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt32">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.UInt32" />.</summary>
      <returns>A <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.UInt32" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.UInt32" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.String">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.String" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Boolean">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Boolean" />.</summary>
      <returns>A <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Boolean" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Boolean" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Boolean}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Boolean" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt32}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.UInt32" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.UInt64}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.UInt64" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Single">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Single" />.</summary>
      <returns>A <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Single" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Single" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Single}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Single" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Int64">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to an <see cref="T:System.Int64" />.</summary>
      <returns>A <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.Int64" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Int64" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.Nullable{System.Int64}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.Int64" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.op_Explicit(System.Xml.Linq.XAttribute)~System.UInt64">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.UInt64" />.</summary>
      <returns>A <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute" /> to cast to <see cref="T:System.UInt64" />.</param>
      <exception cref="T:System.FormatException">The attribute does not contain a valid <see cref="T:System.UInt64" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="attribute" /> parameter is null.</exception>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.PreviousAttribute">
      <summary>Gets the previous attribute of the parent element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XAttribute" /> containing the previous attribute of the parent element.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.Remove">
      <summary>Removes this attribute from its parent element.</summary>
      <exception cref="T:System.InvalidOperationException">The parent element is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.SetValue(System.Object)">
      <summary>Sets the value of this attribute.</summary>
      <param name="value">The value to assign to this attribute.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> is an <see cref="T:System.Xml.Linq.XObject" />.</exception>
    </member>
    <member name="M:System.Xml.Linq.XAttribute.ToString">
      <summary>Converts the current <see cref="T:System.Xml.Linq.XAttribute" /> object to a string representation.</summary>
      <returns>A <see cref="T:System.String" /> containing the XML text representation of an attribute and its value.</returns>
    </member>
    <member name="P:System.Xml.Linq.XAttribute.Value">
      <summary>Gets or sets the value of this attribute.</summary>
      <returns>A <see cref="T:System.String" /> containing the value of this attribute.</returns>
      <exception cref="T:System.ArgumentNullException">When setting, the <paramref name="value" /> is null.</exception>
    </member>
    <member name="T:System.Xml.Linq.XCData">
      <summary>Represents a text node that contains CDATA. </summary>
    </member>
    <member name="M:System.Xml.Linq.XCData.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XCData" /> class. </summary>
      <param name="value">A string that contains the value of the <see cref="T:System.Xml.Linq.XCData" /> node.</param>
    </member>
    <member name="M:System.Xml.Linq.XCData.#ctor(System.Xml.Linq.XCData)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XCData" /> class. </summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XCData" /> node to copy from.</param>
    </member>
    <member name="P:System.Xml.Linq.XCData.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XCData" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.CDATA" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XCData.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes this CDATA object to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.Linq.XComment">
      <summary>Represents an XML comment. </summary>
    </member>
    <member name="M:System.Xml.Linq.XComment.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XComment" /> class with the specified string content. </summary>
      <param name="value">A string that contains the contents of the new <see cref="T:System.Xml.Linq.XComment" /> object.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XComment.#ctor(System.Xml.Linq.XComment)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XComment" /> class from an existing comment node. </summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XComment" /> node to copy from.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="other" /> parameter is null.</exception>
    </member>
    <member name="P:System.Xml.Linq.XComment.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XComment" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Comment" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XComment.Value">
      <summary>Gets or sets the string value of this comment.</summary>
      <returns>A <see cref="T:System.String" /> that contains the string value of this comment.</returns>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XComment.WriteTo(System.Xml.XmlWriter)">
      <summary>Write this comment to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.Linq.XContainer">
      <summary>Represents a node that can contain other nodes.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Add(System.Object)">
      <summary>Adds the specified content as children of this <see cref="T:System.Xml.Linq.XContainer" />.</summary>
      <param name="content">A content object containing simple content or a collection of content objects to be added.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Add(System.Object[])">
      <summary>Adds the specified content as children of this <see cref="T:System.Xml.Linq.XContainer" />.</summary>
      <param name="content">A parameter list of content objects.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.AddFirst(System.Object)">
      <summary>Adds the specified content as the first children of this document or element.</summary>
      <param name="content">A content object containing simple content or a collection of content objects to be added.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.AddFirst(System.Object[])">
      <summary>Adds the specified content as the first children of this document or element.</summary>
      <param name="content">A parameter list of content objects.</param>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XContainer.CreateWriter">
      <summary>Creates an <see cref="T:System.Xml.XmlWriter" /> that can be used to add nodes to the <see cref="T:System.Xml.Linq.XContainer" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlWriter" /> that is ready to have content written to it.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XContainer.DescendantNodes">
      <summary>Returns a collection of the descendant nodes for this document or element, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> containing the descendant nodes of the <see cref="T:System.Xml.Linq.XContainer" />, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Descendants">
      <summary>Returns a collection of the descendant elements for this document or element, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the descendant elements of the <see cref="T:System.Xml.Linq.XContainer" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Descendants(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the descendant elements for this document or element, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the descendant elements of the <see cref="T:System.Xml.Linq.XContainer" /> that match the specified <see cref="T:System.Xml.Linq.XName" />.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Element(System.Xml.Linq.XName)">
      <summary>Gets the first (in document order) child element with the specified <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>A <see cref="T:System.Xml.Linq.XElement" /> that matches the specified <see cref="T:System.Xml.Linq.XName" />, or null.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Elements">
      <summary>Returns a collection of the child elements of this element or document, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the child elements of this <see cref="T:System.Xml.Linq.XContainer" />, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Elements(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the child elements of this element or document, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> containing the children of the <see cref="T:System.Xml.Linq.XContainer" /> that have a matching <see cref="T:System.Xml.Linq.XName" />, in document order.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="P:System.Xml.Linq.XContainer.FirstNode">
      <summary>Get the first child node of this node.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNode" /> containing the first child node of the <see cref="T:System.Xml.Linq.XContainer" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Xml.Linq.XContainer.LastNode">
      <summary>Get the last child node of this node.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNode" /> containing the last child node of the <see cref="T:System.Xml.Linq.XContainer" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XContainer.Nodes">
      <summary>Returns a collection of the child nodes of this element or document, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> containing the contents of this <see cref="T:System.Xml.Linq.XContainer" />, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XContainer.RemoveNodes">
      <summary>Removes the child nodes from this document or element.</summary>
    </member>
    <member name="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object)">
      <summary>Replaces the children nodes of this document or element with the specified content.</summary>
      <param name="content">A content object containing simple content or a collection of content objects that replace the children nodes.</param>
    </member>
    <member name="M:System.Xml.Linq.XContainer.ReplaceNodes(System.Object[])">
      <summary>Replaces the children nodes of this document or element with the specified content.</summary>
      <param name="content">A parameter list of content objects.</param>
    </member>
    <member name="T:System.Xml.Linq.XDeclaration">
      <summary>Represents an XML declaration.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XDeclaration.#ctor(System.String,System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDeclaration" /> class with the specified version, encoding, and standalone status.</summary>
      <param name="version">The version of the XML, usually "1.0".</param>
      <param name="encoding">The encoding for the XML document.</param>
      <param name="standalone">A string containing "yes" or "no" that specifies whether the XML is standalone or requires external entities to be resolved.</param>
    </member>
    <member name="M:System.Xml.Linq.XDeclaration.#ctor(System.Xml.Linq.XDeclaration)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDeclaration" /> class from another <see cref="T:System.Xml.Linq.XDeclaration" /> object. </summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XDeclaration" /> used to initialize this <see cref="T:System.Xml.Linq.XDeclaration" /> object.</param>
    </member>
    <member name="P:System.Xml.Linq.XDeclaration.Encoding">
      <summary>Gets or sets the encoding for this document.</summary>
      <returns>A <see cref="T:System.String" /> containing the code page name for this document.</returns>
    </member>
    <member name="P:System.Xml.Linq.XDeclaration.Standalone">
      <summary>Gets or sets the standalone property for this document.</summary>
      <returns>A <see cref="T:System.String" /> containing the standalone property for this document.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDeclaration.ToString">
      <summary>Provides the declaration as a formatted string.</summary>
      <returns>A <see cref="T:System.String" /> that contains the formatted XML string.</returns>
    </member>
    <member name="P:System.Xml.Linq.XDeclaration.Version">
      <summary>Gets or sets the version property for this document.</summary>
      <returns>A <see cref="T:System.String" /> containing the version property for this document.</returns>
    </member>
    <member name="T:System.Xml.Linq.XDocument">
      <summary>Represents an XML document. </summary>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class. </summary>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor(System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class with the specified content.</summary>
      <param name="content">A parameter list of content objects to add to this document.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDeclaration,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class with the specified <see cref="T:System.Xml.Linq.XDeclaration" /> and content.</summary>
      <param name="declaration">An <see cref="T:System.Xml.Linq.XDeclaration" /> for the document.</param>
      <param name="content">The content of the document.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.#ctor(System.Xml.Linq.XDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XDocument" /> class from an existing <see cref="T:System.Xml.Linq.XDocument" /> object.</summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XDocument" /> object that will be copied.</param>
    </member>
    <member name="P:System.Xml.Linq.XDocument.Declaration">
      <summary>Gets or sets the XML declaration for this document.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDeclaration" /> that contains the XML declaration for this document.</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocument.DocumentType">
      <summary>Gets the Document Type Definition (DTD) for this document.</summary>
      <returns>A <see cref="T:System.Xml.Linq.XDocumentType" /> that contains the DTD for this document.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.Stream)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> instance by using the specified stream.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> object that reads the data that is contained in the stream. </returns>
      <param name="stream">The stream that contains the XML data.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> object that reads the data that is contained in the stream.</returns>
      <param name="stream">The stream containing the XML data.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a <see cref="T:System.IO.TextReader" />. </summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified <see cref="T:System.IO.TextReader" />.</returns>
      <param name="textReader">A <see cref="T:System.IO.TextReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a <see cref="T:System.IO.TextReader" />, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</returns>
      <param name="textReader">A <see cref="T:System.IO.TextReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.String)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file. </summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified file.</returns>
      <param name="uri">A URI string that references the file to load into a new <see cref="T:System.Xml.Linq.XDocument" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.String,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a file, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified file.</returns>
      <param name="uri">A URI string that references the file to load into a new <see cref="T:System.Xml.Linq.XDocument" />.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from an <see cref="T:System.Xml.XmlReader" />. </summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the contents of the specified <see cref="T:System.Xml.XmlReader" />.</returns>
      <param name="reader">A <see cref="T:System.Xml.XmlReader" /> that contains the content for the <see cref="T:System.Xml.Linq.XDocument" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />, optionally setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</returns>
      <param name="reader">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XDocument" />.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies whether to load base URI and line information.</param>
    </member>
    <member name="P:System.Xml.Linq.XDocument.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XDocument" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Document" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Parse(System.String)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a string.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> populated from the string that contains XML.</returns>
      <param name="text">A string that contains XML.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Parse(System.String,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XDocument" /> from a string, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XDocument" /> populated from the string that contains XML.</returns>
      <param name="text">A string that contains XML.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    </member>
    <member name="P:System.Xml.Linq.XDocument.Root">
      <summary>Gets the root element of the XML Tree for this document.</summary>
      <returns>The root <see cref="T:System.Xml.Linq.XElement" /> of the XML tree.</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.Stream)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XDocument" /> to the specified <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XDocument" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter)">
      <summary>Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="textWriter">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XDocument" /> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.String)">
      <summary>Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a file.</summary>
      <param name="fileName">A string that contains the name of the file.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.String,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to a file, optionally disabling formatting.</summary>
      <param name="fileName">A string that contains the name of the file.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.Save(System.Xml.XmlWriter)">
      <summary>Serialize this <see cref="T:System.Xml.Linq.XDocument" /> to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XDocument" /> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocument.WriteTo(System.Xml.XmlWriter)">
      <summary>Write this document to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.Linq.XDocumentType">
      <summary>Represents an XML Document Type Definition (DTD). </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XDocumentType.#ctor(System.String,System.String,System.String,System.String)">
      <summary>Initializes an instance of the <see cref="T:System.Xml.Linq.XDocumentType" /> class. </summary>
      <param name="name">A <see cref="T:System.String" /> that contains the qualified name of the DTD, which is the same as the qualified name of the root element of the XML document.</param>
      <param name="publicId">A <see cref="T:System.String" /> that contains the public identifier of an external public DTD.</param>
      <param name="systemId">A <see cref="T:System.String" /> that contains the system identifier of an external private DTD.</param>
      <param name="internalSubset">A <see cref="T:System.String" /> that contains the internal subset for an internal DTD.</param>
    </member>
    <member name="M:System.Xml.Linq.XDocumentType.#ctor(System.Xml.Linq.XDocumentType)">
      <summary>Initializes an instance of the <see cref="T:System.Xml.Linq.XDocumentType" /> class from another <see cref="T:System.Xml.Linq.XDocumentType" /> object.</summary>
      <param name="other">An <see cref="T:System.Xml.Linq.XDocumentType" /> object to copy from.</param>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.InternalSubset">
      <summary>Gets or sets the internal subset for this Document Type Definition (DTD).</summary>
      <returns>A <see cref="T:System.String" /> that contains the internal subset for this Document Type Definition (DTD).</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.Name">
      <summary>Gets or sets the name for this Document Type Definition (DTD).</summary>
      <returns>A <see cref="T:System.String" /> that contains the name for this Document Type Definition (DTD).</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XDocumentType" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.DocumentType" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.PublicId">
      <summary>Gets or sets the public identifier for this Document Type Definition (DTD).</summary>
      <returns>A <see cref="T:System.String" /> that contains the public identifier for this Document Type Definition (DTD).</returns>
    </member>
    <member name="P:System.Xml.Linq.XDocumentType.SystemId">
      <summary>Gets or sets the system identifier for this Document Type Definition (DTD).</summary>
      <returns>A <see cref="T:System.String" /> that contains the system identifier for this Document Type Definition (DTD).</returns>
    </member>
    <member name="M:System.Xml.Linq.XDocumentType.WriteTo(System.Xml.XmlWriter)">
      <summary>Write this <see cref="T:System.Xml.Linq.XDocumentType" /> to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.Linq.XElement">
      <summary>Represents an XML element.</summary>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from another <see cref="T:System.Xml.Linq.XElement" /> object.</summary>
      <param name="other">An <see cref="T:System.Xml.Linq.XElement" /> object to copy from.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name. </summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name and content.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</param>
      <param name="content">The contents of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XName,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class with the specified name and content.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</param>
      <param name="content">The initial content of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.#ctor(System.Xml.Linq.XStreamingElement)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from an <see cref="T:System.Xml.Linq.XStreamingElement" /> object.</summary>
      <param name="other">An <see cref="T:System.Xml.Linq.XStreamingElement" /> that contains unevaluated queries that will be iterated for the contents of this <see cref="T:System.Xml.Linq.XElement" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.AncestorsAndSelf">
      <summary>Returns a collection of elements that contain this element, and the ancestors of this element. </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and the ancestors of this element. </returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.AncestorsAndSelf(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of elements that contain this element, and the ancestors of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and the ancestors of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Attribute(System.Xml.Linq.XName)">
      <summary>Returns the <see cref="T:System.Xml.Linq.XAttribute" /> of this <see cref="T:System.Xml.Linq.XElement" /> that has the specified <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XAttribute" /> that has the specified <see cref="T:System.Xml.Linq.XName" />; null if there is no attribute with the specified name.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> of the <see cref="T:System.Xml.Linq.XAttribute" /> to get.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Attributes">
      <summary>Returns a collection of attributes of this element.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> of attributes of this element.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.Attributes(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of attributes of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XAttribute" /> that contains the attributes of this element. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.DescendantNodesAndSelf">
      <summary>Returns a collection of nodes that contain this element, and all descendant nodes of this element, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> that contain this element, and all descendant nodes of this element, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.DescendantsAndSelf">
      <summary>Returns a collection of elements that contain this element, and all descendant elements of this element, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of elements that contain this element, and all descendant elements of this element, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.DescendantsAndSelf(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of elements that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contain this element, and all descendant elements of this element, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="P:System.Xml.Linq.XElement.EmptySequence">
      <summary>Gets an empty collection of elements.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains an empty collection.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.FirstAttribute">
      <summary>Gets the first attribute of this element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XAttribute" /> that contains the first attribute of this element.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XElement.GetDefaultNamespace">
      <summary>Gets the default <see cref="T:System.Xml.Linq.XNamespace" /> of this <see cref="T:System.Xml.Linq.XElement" />.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the default namespace of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XElement.GetNamespaceOfPrefix(System.String)">
      <summary>Gets the namespace associated with a particular prefix for this <see cref="T:System.Xml.Linq.XElement" />.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNamespace" /> for the namespace associated with the prefix for this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="prefix">A string that contains the namespace prefix to look up.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XElement.GetPrefixOfNamespace(System.Xml.Linq.XNamespace)">
      <summary>Gets the prefix associated with a namespace for this <see cref="T:System.Xml.Linq.XElement" />.</summary>
      <returns>A <see cref="T:System.String" /> that contains the namespace prefix.</returns>
      <param name="ns">An <see cref="T:System.Xml.Linq.XNamespace" /> to look up.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:System.Xml.Linq.XElement.HasAttributes">
      <summary>Gets a value indicating whether this element as at least one attribute.</summary>
      <returns>true if this element has at least one attribute; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.HasElements">
      <summary>Gets a value indicating whether this element has at least one child element.</summary>
      <returns>true if this element has at least one child element; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.IsEmpty">
      <summary>Gets a value indicating whether this element contains no content.</summary>
      <returns>true if this element contains no content; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.LastAttribute">
      <summary>Gets the last attribute of this element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XAttribute" /> that contains the last attribute of this element.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.Stream)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance by using the specified stream.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data that is contained in the stream.</returns>
      <param name="stream">The stream that contains the XML data.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.Stream,System.Xml.Linq.LoadOptions)">
      <summary>Creates a new <see cref="T:System.Xml.Linq.XElement" /> instance by using the specified stream, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> object used to read the data that the stream contains.</returns>
      <param name="stream">The stream containing the XML data.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> object that specifies whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.TextReader)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />. </summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</returns>
      <param name="textReader">A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.IO.TextReader,System.Xml.Linq.LoadOptions)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from a <see cref="T:System.IO.TextReader" />, optionally preserving white space and retaining line information. </summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.IO.TextReader" />.</returns>
      <param name="textReader">A <see cref="T:System.IO.TextReader" /> that will be read for the <see cref="T:System.Xml.Linq.XElement" /> content.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.String)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.</returns>
      <param name="uri">A URI string referencing the file to load into a new <see cref="T:System.Xml.Linq.XElement" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.String,System.Xml.Linq.LoadOptions)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from a file, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the contents of the specified file.</returns>
      <param name="uri">A URI string referencing the file to load into an <see cref="T:System.Xml.Linq.XElement" />.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />. </summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</returns>
      <param name="reader">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Load(System.Xml.XmlReader,System.Xml.Linq.LoadOptions)">
      <summary>Loads an <see cref="T:System.Xml.Linq.XElement" /> from an <see cref="T:System.Xml.XmlReader" />, optionally preserving white space, setting the base URI, and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> that contains the XML that was read from the specified <see cref="T:System.Xml.XmlReader" />.</returns>
      <param name="reader">A <see cref="T:System.Xml.XmlReader" /> that will be read for the content of the <see cref="T:System.Xml.Linq.XElement" />.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    </member>
    <member name="P:System.Xml.Linq.XElement.Name">
      <summary>Gets or sets the name of this element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> that contains the name of this element.</returns>
    </member>
    <member name="P:System.Xml.Linq.XElement.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XElement" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Element" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Decimal">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Decimal" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Decimal}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Decimal" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Decimal" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTime">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.DateTime" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.DateTime" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Single}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Single" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Single" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Double">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Double" />.</summary>
      <returns>A <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Double" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Double" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Double}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Double" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Double" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTime}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTime" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.DateTime" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.TimeSpan}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.TimeSpan" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.TimeSpan" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Guid">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Guid" />.</summary>
      <returns>A <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Guid" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Guid}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Guid" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Guid" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.DateTimeOffset">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XAttribute" /> to a <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>A <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.DateTimeOffset" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.DateTimeOffset}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to an <see cref="T:System.Nullable`1" /> of <see cref="T:System.DateTimeOffset" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.DateTimeOffset" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.TimeSpan">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.TimeSpan" />.</summary>
      <returns>A <see cref="T:System.TimeSpan" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.TimeSpan" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.TimeSpan" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int32">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to an <see cref="T:System.Int32" />.</summary>
      <returns>A <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Int32" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Int32" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int32}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int32" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Int32" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt32">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.UInt32" />.</summary>
      <returns>A <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.UInt32" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.UInt32" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.String">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.String" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Boolean">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Boolean" />.</summary>
      <returns>A <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Boolean" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Boolean" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Boolean}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Boolean" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Boolean" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.UInt64">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.UInt64" />.</summary>
      <returns>A <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.UInt64" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.UInt64" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt64}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt64" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.UInt64" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Single">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Single" />.</summary>
      <returns>A <see cref="T:System.Single" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Single" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Single" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.UInt32}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.UInt32" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.UInt32" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Int64">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to an <see cref="T:System.Int64" />.</summary>
      <returns>A <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Int64" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Int64" /> value.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="element" /> parameter is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.op_Explicit(System.Xml.Linq.XElement)~System.Nullable{System.Int64}">
      <summary>Cast the value of this <see cref="T:System.Xml.Linq.XElement" /> to a <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</summary>
      <returns>A <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" /> that contains the content of this <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="element">The <see cref="T:System.Xml.Linq.XElement" /> to cast to <see cref="T:System.Nullable`1" /> of <see cref="T:System.Int64" />.</param>
      <exception cref="T:System.FormatException">The element does not contain a valid <see cref="T:System.Int64" /> value.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.Parse(System.String)">
      <summary>Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.</returns>
      <param name="text">A <see cref="T:System.String" /> that contains XML.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Parse(System.String,System.Xml.Linq.LoadOptions)">
      <summary>Load an <see cref="T:System.Xml.Linq.XElement" /> from a string that contains XML, optionally preserving white space and retaining line information.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" /> populated from the string that contains XML.</returns>
      <param name="text">A <see cref="T:System.String" /> that contains XML.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.LoadOptions" /> that specifies white space behavior, and whether to load base URI and line information.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.RemoveAll">
      <summary>Removes nodes and attributes from this <see cref="T:System.Xml.Linq.XElement" />.</summary>
    </member>
    <member name="M:System.Xml.Linq.XElement.RemoveAttributes">
      <summary>Removes the attributes of this <see cref="T:System.Xml.Linq.XElement" />.</summary>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAll(System.Object)">
      <summary>Replaces the child nodes and the attributes of this element with the specified content.</summary>
      <param name="content">The content that will replace the child nodes and attributes of this element.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAll(System.Object[])">
      <summary>Replaces the child nodes and the attributes of this element with the specified content.</summary>
      <param name="content">A parameter list of content objects.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object)">
      <summary>Replaces the attributes of this element with the specified content.</summary>
      <param name="content">The content that will replace the attributes of this element.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.ReplaceAttributes(System.Object[])">
      <summary>Replaces the attributes of this element with the specified content.</summary>
      <param name="content">A parameter list of content objects.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.Stream)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XElement" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XElement" /> to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> object that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter)">
      <summary>Serialize this element to a <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="textWriter">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this element to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.String)">
      <summary>Serialize this element to a file.</summary>
      <param name="fileName">A <see cref="T:System.String" /> that contains the name of the file.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.String,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this element to a file, optionally disabling formatting.</summary>
      <param name="fileName">A <see cref="T:System.String" /> that contains the name of the file.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.Save(System.Xml.XmlWriter)">
      <summary>Serialize this element to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.SetAttributeValue(System.Xml.Linq.XName,System.Object)">
      <summary>Sets the value of an attribute, adds an attribute, or removes an attribute. </summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the attribute to change.</param>
      <param name="value">The value to assign to the attribute. The attribute is removed if the value is null. Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XAttribute.Value" /> property of the attribute.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.SetElementValue(System.Xml.Linq.XName,System.Object)">
      <summary>Sets the value of a child element, adds a child element, or removes a child element.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the child element to change.</param>
      <param name="value">The value to assign to the child element. The child element is removed if the value is null. Otherwise, the value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property of the child element.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> is an instance of <see cref="T:System.Xml.Linq.XObject" />.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.SetValue(System.Object)">
      <summary>Sets the value of this element.</summary>
      <param name="value">The value to assign to this element. The value is converted to its string representation and assigned to the <see cref="P:System.Xml.Linq.XElement.Value" /> property.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="value" /> is an <see cref="T:System.Xml.Linq.XObject" />.</exception>
    </member>
    <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>Gets an XML schema definition that describes the XML representation of this object.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>Generates an object from its XML representation.</summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> from which the object is deserialized.</param>
    </member>
    <member name="M:System.Xml.Linq.XElement.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>Converts an object into its XML representation.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to which this object is serialized.</param>
    </member>
    <member name="P:System.Xml.Linq.XElement.Value">
      <summary>Gets or sets the concatenated text contents of this element.</summary>
      <returns>A <see cref="T:System.String" /> that contains all of the text content of this element. If there are multiple text nodes, they will be concatenated.</returns>
    </member>
    <member name="M:System.Xml.Linq.XElement.WriteTo(System.Xml.XmlWriter)">
      <summary>Write this element to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.Linq.XName">
      <summary>Represents a name of an XML element or attribute. </summary>
    </member>
    <member name="M:System.Xml.Linq.XName.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Xml.Linq.XName" /> is equal to this <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>true if the specified <see cref="T:System.Xml.Linq.XName" /> is equal to the current <see cref="T:System.Xml.Linq.XName" />; otherwise false.</returns>
      <param name="obj">The <see cref="T:System.Xml.Linq.XName" /> to compare to the current <see cref="T:System.Xml.Linq.XName" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.Get(System.String)">
      <summary>Gets an <see cref="T:System.Xml.Linq.XName" /> object from an expanded name.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</returns>
      <param name="expandedName">A <see cref="T:System.String" /> that contains an expanded XML name in the format {namespace}localname.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.Get(System.String,System.String)">
      <summary>Gets an <see cref="T:System.Xml.Linq.XName" /> object from a local name and a namespace.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> object created from the specified local name and namespace.</returns>
      <param name="localName">A local (unqualified) name.</param>
      <param name="namespaceName">An XML namespace.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.GetHashCode">
      <summary>Gets a hash code for this <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XName" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XName.LocalName">
      <summary>Gets the local (unqualified) part of the name.</summary>
      <returns>A <see cref="T:System.String" /> that contains the local (unqualified) part of the name.</returns>
    </member>
    <member name="P:System.Xml.Linq.XName.Namespace">
      <summary>Gets the namespace part of the fully qualified name.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace part of the name.</returns>
    </member>
    <member name="P:System.Xml.Linq.XName.NamespaceName">
      <summary>Returns the URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>The URI of the <see cref="T:System.Xml.Linq.XNamespace" /> for this <see cref="T:System.Xml.Linq.XName" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are equal.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are equal; otherwise false.</returns>
      <param name="left">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName">
      <summary>Converts a string formatted as an expanded XML name (that is,{namespace}localname) to an <see cref="T:System.Xml.Linq.XName" /> object.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> object constructed from the expanded name.</returns>
      <param name="expandedName">A string that contains an expanded XML name in the format {namespace}localname.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XName" /> are not equal.</summary>
      <returns>true if <paramref name="left" /> and <paramref name="right" /> are not equal; otherwise false.</returns>
      <param name="left">The first <see cref="T:System.Xml.Linq.XName" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Xml.Linq.XName" /> to compare.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.System#IEquatable{T}#Equals(System.Xml.Linq.XName)">
      <summary>Indicates whether the current <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>true if this <see cref="T:System.Xml.Linq.XName" /> is equal to the specified <see cref="T:System.Xml.Linq.XName" />, otherwise false.</returns>
      <param name="other">The <see cref="T:System.Xml.Linq.XName" /> to compare with this <see cref="T:System.Xml.Linq.XName" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data required to serialize the target object.</summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext" />) for this serialization.</param>
    </member>
    <member name="M:System.Xml.Linq.XName.ToString">
      <summary>Returns the expanded XML name in the format {namespace}localname.</summary>
      <returns>A <see cref="T:System.String" /> that contains the expanded XML name in the format {namespace}localname.</returns>
    </member>
    <member name="T:System.Xml.Linq.XNamespace">
      <summary>Represents an XML namespace. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.Equals(System.Object)">
      <summary>Determines whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</summary>
      <returns>A <see cref="T:System.Boolean" /> that indicates whether the specified <see cref="T:System.Xml.Linq.XNamespace" /> is equal to the current <see cref="T:System.Xml.Linq.XNamespace" />.</returns>
      <param name="obj">The <see cref="T:System.Xml.Linq.XNamespace" /> to compare to the current <see cref="T:System.Xml.Linq.XNamespace" />.</param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.Get(System.String)">
      <summary>Gets an <see cref="T:System.Xml.Linq.XNamespace" /> for the specified Uniform Resource Identifier (URI).</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNamespace" /> created from the specified URI.</returns>
      <param name="namespaceName">A <see cref="T:System.String" /> that contains a namespace URI.</param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.GetHashCode">
      <summary>Gets a hash code for this <see cref="T:System.Xml.Linq.XNamespace" />.</summary>
      <returns>An <see cref="T:System.Int32" /> that contains the hash code for the <see cref="T:System.Xml.Linq.XNamespace" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.GetName(System.String)">
      <summary>Returns an <see cref="T:System.Xml.Linq.XName" /> object created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> created from this <see cref="T:System.Xml.Linq.XNamespace" /> and the specified local name.</returns>
      <param name="localName">A <see cref="T:System.String" /> that contains a local name.</param>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.NamespaceName">
      <summary>Gets the Uniform Resource Identifier (URI) of this namespace.</summary>
      <returns>A <see cref="T:System.String" /> that contains the URI of the namespace.</returns>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.None">
      <summary>Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to no namespace.</summary>
      <returns>The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to no namespace.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Addition(System.Xml.Linq.XNamespace,System.String)">
      <summary>Combines an <see cref="T:System.Xml.Linq.XNamespace" /> object with a local name to create an <see cref="T:System.Xml.Linq.XName" />.</summary>
      <returns>The new <see cref="T:System.Xml.Linq.XName" /> constructed from the namespace and local name.</returns>
      <param name="ns">An <see cref="T:System.Xml.Linq.XNamespace" /> that contains the namespace.</param>
      <param name="localName">A <see cref="T:System.String" /> that contains the local name.</param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Equality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are equal.</summary>
      <returns>A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are equal.</returns>
      <param name="left">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Implicit(System.String)~System.Xml.Linq.XNamespace">
      <summary>Converts a string containing a Uniform Resource Identifier (URI) to an <see cref="T:System.Xml.Linq.XNamespace" />.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNamespace" /> constructed from the URI string.</returns>
      <param name="namespaceName">A <see cref="T:System.String" /> that contains the namespace URI.</param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.op_Inequality(System.Xml.Linq.XNamespace,System.Xml.Linq.XNamespace)">
      <summary>Returns a value indicating whether two instances of <see cref="T:System.Xml.Linq.XNamespace" /> are not equal.</summary>
      <returns>A <see cref="T:System.Boolean" /> that indicates whether <paramref name="left" /> and <paramref name="right" /> are not equal.</returns>
      <param name="left">The first <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</param>
      <param name="right">The second <see cref="T:System.Xml.Linq.XNamespace" /> to compare.</param>
    </member>
    <member name="M:System.Xml.Linq.XNamespace.ToString">
      <summary>Returns the URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</summary>
      <returns>The URI of this <see cref="T:System.Xml.Linq.XNamespace" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.Xml">
      <summary>Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the XML URI (http://www.w3.org/XML/1998/namespace).</summary>
      <returns>The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the XML URI (http://www.w3.org/XML/1998/namespace).</returns>
    </member>
    <member name="P:System.Xml.Linq.XNamespace.Xmlns">
      <summary>Gets the <see cref="T:System.Xml.Linq.XNamespace" /> object that corresponds to the xmlns URI (http://www.w3.org/2000/xmlns/).</summary>
      <returns>The <see cref="T:System.Xml.Linq.XNamespace" /> that corresponds to the xmlns URI (http://www.w3.org/2000/xmlns/).</returns>
    </member>
    <member name="T:System.Xml.Linq.XNode">
      <summary>Represents the abstract concept of a node (element, comment, document type, processing instruction, or text node) in the XML tree.  </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddAfterSelf(System.Object)">
      <summary>Adds the specified content immediately after this node.</summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added after this node.</param>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddAfterSelf(System.Object[])">
      <summary>Adds the specified content immediately after this node.</summary>
      <param name="content">A parameter list of content objects.</param>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object)">
      <summary>Adds the specified content immediately before this node.</summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added before this node.</param>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.AddBeforeSelf(System.Object[])">
      <summary>Adds the specified content immediately before this node.</summary>
      <param name="content">A parameter list of content objects.</param>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.Ancestors">
      <summary>Returns a collection of the ancestor elements of this node.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the ancestor elements of this node.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.Ancestors(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the ancestor elements of this node. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the ancestor elements of this node. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.The nodes in the returned collection are in reverse document order.This method uses deferred execution.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.CompareDocumentOrder(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>Compares two nodes to determine their relative XML document order.</summary>
      <returns>An int containing 0 if the nodes are equal; -1 if <paramref name="n1" /> is before <paramref name="n2" />; 1 if <paramref name="n1" /> is after <paramref name="n2" />.</returns>
      <param name="n1">First <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <param name="n2">Second <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <exception cref="T:System.InvalidOperationException">The two nodes do not share a common ancestor.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.CreateReader">
      <summary>Creates an <see cref="T:System.Xml.XmlReader" /> for this node.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> that can be used to read this node and its descendants.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XNode.CreateReader(System.Xml.Linq.ReaderOptions)">
      <summary>Creates an <see cref="T:System.Xml.XmlReader" /> with the options specified by the <paramref name="readerOptions" /> parameter.</summary>
      <returns>An <see cref="T:System.Xml.XmlReader" /> object.</returns>
      <param name="readerOptions">A <see cref="T:System.Xml.Linq.ReaderOptions" /> object that specifies whether to omit duplicate namespaces.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.DeepEquals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>Compares the values of two nodes, including the values of all descendant nodes.</summary>
      <returns>true if the nodes are equal; otherwise false.</returns>
      <param name="n1">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <param name="n2">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
    </member>
    <member name="P:System.Xml.Linq.XNode.DocumentOrderComparer">
      <summary>Gets a comparer that can compare the relative position of two nodes.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNodeDocumentOrderComparer" /> that can compare the relative position of two nodes.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsAfterSelf">
      <summary>Returns a collection of the sibling elements after this node, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements after this node, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsAfterSelf(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the sibling elements after this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements after this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsBeforeSelf">
      <summary>Returns a collection of the sibling elements before this node, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements before this node, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ElementsBeforeSelf(System.Xml.Linq.XName)">
      <summary>Returns a filtered collection of the sibling elements before this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> of the sibling elements before this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName" /> are included in the collection.</returns>
      <param name="name">The <see cref="T:System.Xml.Linq.XName" /> to match.</param>
    </member>
    <member name="P:System.Xml.Linq.XNode.EqualityComparer">
      <summary>Gets a comparer that can compare two nodes for value equality.</summary>
      <returns>A <see cref="T:System.Xml.Linq.XNodeEqualityComparer" /> that can compare two nodes for value equality.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.IsAfter(System.Xml.Linq.XNode)">
      <summary>Determines if the current node appears after a specified node in terms of document order.</summary>
      <returns>true if this node appears after the specified node; otherwise false.</returns>
      <param name="node">The <see cref="T:System.Xml.Linq.XNode" /> to compare for document order.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.IsBefore(System.Xml.Linq.XNode)">
      <summary>Determines if the current node appears before a specified node in terms of document order.</summary>
      <returns>true if this node appears before the specified node; otherwise false.</returns>
      <param name="node">The <see cref="T:System.Xml.Linq.XNode" /> to compare for document order.</param>
    </member>
    <member name="P:System.Xml.Linq.XNode.NextNode">
      <summary>Gets the next sibling node of this node.</summary>
      <returns>The <see cref="T:System.Xml.Linq.XNode" /> that contains the next sibling node.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XNode.NodesAfterSelf">
      <summary>Returns a collection of the sibling nodes after this node, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the sibling nodes after this node, in document order.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.NodesBeforeSelf">
      <summary>Returns a collection of the sibling nodes before this node, in document order.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XNode" /> of the sibling nodes before this node, in document order.</returns>
    </member>
    <member name="P:System.Xml.Linq.XNode.PreviousNode">
      <summary>Gets the previous sibling node of this node.</summary>
      <returns>The <see cref="T:System.Xml.Linq.XNode" /> that contains the previous sibling node.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XNode.ReadFrom(System.Xml.XmlReader)">
      <summary>Creates an <see cref="T:System.Xml.Linq.XNode" /> from an <see cref="T:System.Xml.XmlReader" />.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XNode" /> that contains the node and its descendant nodes that were read from the reader. The runtime type of the node is determined by the node type (<see cref="P:System.Xml.Linq.XObject.NodeType" />) of the first node encountered in the reader.</returns>
      <param name="reader">An <see cref="T:System.Xml.XmlReader" /> positioned at the node to read into this <see cref="T:System.Xml.Linq.XNode" />.</param>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlReader" /> is not positioned on a recognized node type.</exception>
      <exception cref="T:System.Xml.XmlException">The underlying <see cref="T:System.Xml.XmlReader" /> throws an exception.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XNode.Remove">
      <summary>Removes this node from its parent.</summary>
      <exception cref="T:System.InvalidOperationException">The parent is null.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNode.ReplaceWith(System.Object)">
      <summary>Replaces this node with the specified content.</summary>
      <param name="content">Content that replaces this node.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.ReplaceWith(System.Object[])">
      <summary>Replaces this node with the specified content.</summary>
      <param name="content">A parameter list of the new content.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.ToString">
      <summary>Returns the indented XML for this node.</summary>
      <returns>A <see cref="T:System.String" /> containing the indented XML.</returns>
    </member>
    <member name="M:System.Xml.Linq.XNode.ToString(System.Xml.Linq.SaveOptions)">
      <summary>Returns the XML for this node, optionally disabling formatting.</summary>
      <returns>A <see cref="T:System.String" /> containing the XML.</returns>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XNode.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes this node to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.Linq.XNodeDocumentOrderComparer">
      <summary>Contains functionality to compare nodes for their document order. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeDocumentOrderComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XNodeDocumentOrderComparer" /> class. </summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeDocumentOrderComparer.Compare(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>Compares two nodes to determine their relative document order.</summary>
      <returns>An <see cref="T:System.Int32" /> that contains 0 if the nodes are equal; -1 if <paramref name="x" /> is before <paramref name="y" />; 1 if <paramref name="x" /> is after <paramref name="y" />.</returns>
      <param name="x">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <param name="y">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <exception cref="T:System.InvalidOperationException">The two nodes do not share a common ancestor.</exception>
    </member>
    <member name="M:System.Xml.Linq.XNodeDocumentOrderComparer.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary>Compares two nodes to determine their relative document order.</summary>
      <returns>An <see cref="T:System.Int32" /> that contains 0 if the nodes are equal; -1 if <paramref name="x" /> is before <paramref name="y" />; 1 if <paramref name="x" /> is after <paramref name="y" />.</returns>
      <param name="x">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <param name="y">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <exception cref="T:System.InvalidOperationException">The two nodes do not share a common ancestor.</exception>
      <exception cref="T:System.ArgumentException">The two nodes are not derived from <see cref="T:System.Xml.Linq.XNode" />.</exception>
    </member>
    <member name="T:System.Xml.Linq.XNodeEqualityComparer">
      <summary>Compares nodes to determine whether they are equal. This class cannot be inherited. </summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XNodeEqualityComparer" /> class. </summary>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.Equals(System.Xml.Linq.XNode,System.Xml.Linq.XNode)">
      <summary>Compares the values of two nodes.</summary>
      <returns>A <see cref="T:System.Boolean" /> indicating if the nodes are equal.</returns>
      <param name="x">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <param name="y">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.GetHashCode(System.Xml.Linq.XNode)">
      <summary>Returns a hash code based on an <see cref="T:System.Xml.Linq.XNode" />.</summary>
      <returns>A <see cref="T:System.Int32" /> that contains a value-based hash code for the node.</returns>
      <param name="obj">The <see cref="T:System.Xml.Linq.XNode" /> to hash.</param>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
      <summary>Compares the values of two nodes.</summary>
      <returns>true if the nodes are equal; otherwise false.</returns>
      <param name="x">The first <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
      <param name="y">The second <see cref="T:System.Xml.Linq.XNode" /> to compare.</param>
    </member>
    <member name="M:System.Xml.Linq.XNodeEqualityComparer.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
      <summary>Returns a hash code based on the value of a node.</summary>
      <returns>A <see cref="T:System.Int32" /> that contains a value-based hash code for the node.</returns>
      <param name="obj">The node to hash.</param>
    </member>
    <member name="T:System.Xml.Linq.XObject">
      <summary>Represents a node or an attribute in an XML tree. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XObject.AddAnnotation(System.Object)">
      <summary>Adds an object to the annotation list of this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <param name="annotation">An <see cref="T:System.Object" /> that contains the annotation to add.</param>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotation``1">
      <summary>Get the first annotation object of the specified type from this <see cref="T:System.Xml.Linq.XObject" />. </summary>
      <returns>The first annotation object that matches the specified type, or null if no annotation is of the specified type.</returns>
      <typeparam name="T">The type of the annotation to retrieve.</typeparam>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotation(System.Type)">
      <summary>Gets the first annotation object of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>The <see cref="T:System.Object" /> that contains the first annotation object that matches the specified type, or null if no annotation is of the specified type.</returns>
      <param name="type">The <see cref="T:System.Type" /> of the annotation to retrieve.</param>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotations``1">
      <summary>Gets a collection of annotations of the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the annotations for this <see cref="T:System.Xml.Linq.XObject" />.</returns>
      <typeparam name="T">The type of the annotations to retrieve.</typeparam>
    </member>
    <member name="M:System.Xml.Linq.XObject.Annotations(System.Type)">
      <summary>Gets a collection of annotations of the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Object" /> that contains the annotations that match the specified type for this <see cref="T:System.Xml.Linq.XObject" />.</returns>
      <param name="type">The <see cref="T:System.Type" /> of the annotations to retrieve.</param>
    </member>
    <member name="P:System.Xml.Linq.XObject.BaseUri">
      <summary>Gets the base URI for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>A <see cref="T:System.String" /> that contains the base URI for this <see cref="T:System.Xml.Linq.XObject" />.</returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="E:System.Xml.Linq.XObject.Changed">
      <summary>Raised when this <see cref="T:System.Xml.Linq.XObject" /> or any of its descendants have changed.</summary>
    </member>
    <member name="E:System.Xml.Linq.XObject.Changing">
      <summary>Raised when this <see cref="T:System.Xml.Linq.XObject" /> or any of its descendants are about to change.</summary>
    </member>
    <member name="P:System.Xml.Linq.XObject.Document">
      <summary>Gets the <see cref="T:System.Xml.Linq.XDocument" /> for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>The <see cref="T:System.Xml.Linq.XDocument" /> for this <see cref="T:System.Xml.Linq.XObject" />. </returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.NodeType">
      <summary>Gets the node type for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>The node type for this <see cref="T:System.Xml.Linq.XObject" />. </returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.Parent">
      <summary>Gets the parent <see cref="T:System.Xml.Linq.XElement" /> of this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>The parent <see cref="T:System.Xml.Linq.XElement" /> of this <see cref="T:System.Xml.Linq.XObject" />.</returns>
    </member>
    <member name="M:System.Xml.Linq.XObject.RemoveAnnotations``1">
      <summary>Removes the annotations of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <typeparam name="T">The type of annotations to remove.</typeparam>
    </member>
    <member name="M:System.Xml.Linq.XObject.RemoveAnnotations(System.Type)">
      <summary>Removes the annotations of the specified type from this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <param name="type">The <see cref="T:System.Type" /> of annotations to remove.</param>
    </member>
    <member name="M:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#HasLineInfo">
      <summary>Gets a value indicating whether or not this <see cref="T:System.Xml.Linq.XObject" /> has line information.</summary>
      <returns>true if the <see cref="T:System.Xml.Linq.XObject" /> has line information, otherwise false.</returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LineNumber">
      <summary>Gets the line number that the underlying <see cref="T:System.Xml.XmlReader" /> reported for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>An <see cref="T:System.Int32" /> that contains the line number reported by the <see cref="T:System.Xml.XmlReader" /> for this <see cref="T:System.Xml.Linq.XObject" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XObject.System#Xml#IXmlLineInfo#LinePosition">
      <summary>Gets the line position that the underlying <see cref="T:System.Xml.XmlReader" /> reported for this <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <returns>An <see cref="T:System.Int32" /> that contains the line position reported by the <see cref="T:System.Xml.XmlReader" /> for this <see cref="T:System.Xml.Linq.XObject" />.</returns>
    </member>
    <member name="T:System.Xml.Linq.XObjectChange">
      <summary>Specifies the event type when an event is raised for an <see cref="T:System.Xml.Linq.XObject" />.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Add">
      <summary>An <see cref="T:System.Xml.Linq.XObject" /> has been or will be added to an <see cref="T:System.Xml.Linq.XContainer" />.</summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Remove">
      <summary>An <see cref="T:System.Xml.Linq.XObject" /> has been or will be removed from an <see cref="T:System.Xml.Linq.XContainer" />.</summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Name">
      <summary>An <see cref="T:System.Xml.Linq.XObject" /> has been or will be renamed.</summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChange.Value">
      <summary>The value of an <see cref="T:System.Xml.Linq.XObject" /> has been or will be changed. In addition, a change in the serialization of an empty element (either from an empty tag to start/end tag pair or vice versa) raises this event.</summary>
    </member>
    <member name="T:System.Xml.Linq.XObjectChangeEventArgs">
      <summary>Provides data for the <see cref="E:System.Xml.Linq.XObject.Changing" /> and <see cref="E:System.Xml.Linq.XObject.Changed" /> events.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XObjectChangeEventArgs.#ctor(System.Xml.Linq.XObjectChange)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XObjectChangeEventArgs" /> class. </summary>
      <param name="objectChange">An <see cref="T:System.Xml.Linq.XObjectChange" /> that contains the event arguments for LINQ to XML events.</param>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Add">
      <summary>Event argument for an <see cref="F:System.Xml.Linq.XObjectChange.Add" /> change event.</summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Name">
      <summary>Event argument for a <see cref="F:System.Xml.Linq.XObjectChange.Name" /> change event.</summary>
    </member>
    <member name="P:System.Xml.Linq.XObjectChangeEventArgs.ObjectChange">
      <summary>Gets the type of change.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XObjectChange" /> that contains the type of change.</returns>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Remove">
      <summary>Event argument for a <see cref="F:System.Xml.Linq.XObjectChange.Remove" /> change event.</summary>
    </member>
    <member name="F:System.Xml.Linq.XObjectChangeEventArgs.Value">
      <summary>Event argument for a <see cref="F:System.Xml.Linq.XObjectChange.Value" /> change event.</summary>
    </member>
    <member name="T:System.Xml.Linq.XProcessingInstruction">
      <summary>Represents an XML processing instruction. </summary>
    </member>
    <member name="M:System.Xml.Linq.XProcessingInstruction.#ctor(System.String,System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XProcessingInstruction" /> class. </summary>
      <param name="target">A <see cref="T:System.String" /> containing the target application for this <see cref="T:System.Xml.Linq.XProcessingInstruction" />.</param>
      <param name="data">The string data for this <see cref="T:System.Xml.Linq.XProcessingInstruction" />.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="target" /> or <paramref name="data" /> parameter is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="target" /> does not follow the constraints of an XML name.</exception>
    </member>
    <member name="M:System.Xml.Linq.XProcessingInstruction.#ctor(System.Xml.Linq.XProcessingInstruction)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XProcessingInstruction" /> class. </summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XProcessingInstruction" /> node to copy from.</param>
    </member>
    <member name="P:System.Xml.Linq.XProcessingInstruction.Data">
      <summary>Gets or sets the string value of this processing instruction.</summary>
      <returns>A <see cref="T:System.String" /> that contains the string value of this processing instruction.</returns>
      <exception cref="T:System.ArgumentNullException">The string <paramref name="value" /> is null.</exception>
    </member>
    <member name="P:System.Xml.Linq.XProcessingInstruction.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XProcessingInstruction" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.ProcessingInstruction" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XProcessingInstruction.Target">
      <summary>Gets or sets a string containing the target application for this processing instruction.</summary>
      <returns>A <see cref="T:System.String" /> containing the target application for this processing instruction.</returns>
      <exception cref="T:System.ArgumentNullException">The string <paramref name="value" /> is null.</exception>
      <exception cref="T:System.ArgumentException">The <paramref name="target" /> does not follow the constraints of an XML name.</exception>
    </member>
    <member name="M:System.Xml.Linq.XProcessingInstruction.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes this processing instruction to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> to write this processing instruction to.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.Linq.XStreamingElement">
      <summary>Represents elements in an XML tree that supports deferred streaming output.</summary>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XElement" /> class from the specified <see cref="T:System.Xml.Linq.XName" />.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the name of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XStreamingElement" /> class with the specified name and content.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</param>
      <param name="content">The contents of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.#ctor(System.Xml.Linq.XName,System.Object[])">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XStreamingElement" /> class with the specified name and content.</summary>
      <param name="name">An <see cref="T:System.Xml.Linq.XName" /> that contains the element name.</param>
      <param name="content">The contents of the element.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Add(System.Object)">
      <summary>Adds the specified content as children to this <see cref="T:System.Xml.Linq.XStreamingElement" />.</summary>
      <param name="content">Content to be added to the streaming element.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Add(System.Object[])">
      <summary>Adds the specified content as children to this <see cref="T:System.Xml.Linq.XStreamingElement" />.</summary>
      <param name="content">Content to be added to the streaming element.</param>
    </member>
    <member name="P:System.Xml.Linq.XStreamingElement.Name">
      <summary>Gets or sets the name of this streaming element.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XName" /> that contains the name of this streaming element.</returns>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XStreamingElement" /> to the specified <see cref="T:System.IO.Stream" />.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.Stream,System.Xml.Linq.SaveOptions)">
      <summary>Outputs this <see cref="T:System.Xml.Linq.XStreamingElement" /> to the specified <see cref="T:System.IO.Stream" />, optionally specifying formatting behavior.</summary>
      <param name="stream">The stream to output this <see cref="T:System.Xml.Linq.XDocument" /> to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> object that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter)">
      <summary>Serialize this streaming element to a <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="textWriter">A <see cref="T:System.IO.TextWriter" /> that the <see cref="T:System.Xml.Linq.XStreamingElement" /> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.IO.TextWriter,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this streaming element to a <see cref="T:System.IO.TextWriter" />, optionally disabling formatting.</summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> to output the XML to.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.String)">
      <summary>Serialize this streaming element to a file.</summary>
      <param name="fileName">A <see cref="T:System.String" /> that contains the name of the file.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.String,System.Xml.Linq.SaveOptions)">
      <summary>Serialize this streaming element to a file, optionally disabling formatting.</summary>
      <param name="fileName">A <see cref="T:System.String" /> that contains the name of the file.</param>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> object that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.Save(System.Xml.XmlWriter)">
      <summary>Serialize this streaming element to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">A <see cref="T:System.Xml.XmlWriter" /> that the <see cref="T:System.Xml.Linq.XElement" /> will be written to.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.ToString">
      <summary>Returns the formatted (indented) XML for this streaming element.</summary>
      <returns>A <see cref="T:System.String" /> containing the indented XML.</returns>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.ToString(System.Xml.Linq.SaveOptions)">
      <summary>Returns the XML for this streaming element, optionally disabling formatting.</summary>
      <returns>A <see cref="T:System.String" /> containing the XML.</returns>
      <param name="options">A <see cref="T:System.Xml.Linq.SaveOptions" /> that specifies formatting behavior.</param>
    </member>
    <member name="M:System.Xml.Linq.XStreamingElement.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes this streaming element to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.Linq.XText">
      <summary>Represents a text node. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Linq.XText.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XText" /> class. </summary>
      <param name="value">The <see cref="T:System.String" /> that contains the value of the <see cref="T:System.Xml.Linq.XText" /> node.</param>
    </member>
    <member name="M:System.Xml.Linq.XText.#ctor(System.Xml.Linq.XText)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.Linq.XText" /> class from another <see cref="T:System.Xml.Linq.XText" /> object.</summary>
      <param name="other">The <see cref="T:System.Xml.Linq.XText" /> node to copy from.</param>
    </member>
    <member name="P:System.Xml.Linq.XText.NodeType">
      <summary>Gets the node type for this node.</summary>
      <returns>The node type. For <see cref="T:System.Xml.Linq.XText" /> objects, this value is <see cref="F:System.Xml.XmlNodeType.Text" />.</returns>
    </member>
    <member name="P:System.Xml.Linq.XText.Value">
      <summary>Gets or sets the value of this node.</summary>
      <returns>A <see cref="T:System.String" /> that contains the value of this node.</returns>
    </member>
    <member name="M:System.Xml.Linq.XText.WriteTo(System.Xml.XmlWriter)">
      <summary>Writes this node to an <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="writer">An <see cref="T:System.Xml.XmlWriter" /> into which this method will write.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.Schema.Extensions">
      <summary>This class contains the LINQ to XML extension methods for XSD validation. </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute)">
      <summary>Gets the post-schema-validation infoset (PSVI) of a validated attribute.</summary>
      <returns>A <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> that contains the post-schema-validation infoset for an <see cref="T:System.Xml.Linq.XAttribute" />.</returns>
      <param name="source">An <see cref="T:System.Xml.Linq.XAttribute" /> that has been previously validated.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement)">
      <summary>Gets the post-schema-validation infoset (PSVI) of a validated element.</summary>
      <returns>A <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> that contains the post-schema-validation infoset (PSVI) for an <see cref="T:System.Xml.Linq.XElement" />.</returns>
      <param name="source">An <see cref="T:System.Xml.Linq.XElement" /> that has been previously validated.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary>This method validates that an <see cref="T:System.Xml.Linq.XAttribute" /> conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <param name="source">The <see cref="T:System.Xml.Linq.XAttribute" /> to validate.</param>
      <param name="partialValidationType">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</param>
      <param name="validationEventHandler">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors. If null, throws an exception upon validation errors.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Thrown for XML Schema Definition Language (XSD) validation errors.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)">
      <summary>Validates that an <see cref="T:System.Xml.Linq.XAttribute" /> conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</summary>
      <param name="source">The <see cref="T:System.Xml.Linq.XAttribute" /> to validate.</param>
      <param name="partialValidationType">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</param>
      <param name="validationEventHandler">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors. If null, throws an exception upon validation errors.</param>
      <param name="addSchemaInfo">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Thrown for XML Schema Definition Language (XSD) validation errors.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary>This method validates that an <see cref="T:System.Xml.Linq.XDocument" /> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <param name="source">The <see cref="T:System.Xml.Linq.XDocument" /> to validate.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</param>
      <param name="validationEventHandler">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors. If null, throws an exception upon validation errors.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Thrown for XML Schema Definition Language (XSD) validation errors.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)">
      <summary>Validates that an <see cref="T:System.Xml.Linq.XDocument" /> conforms to an XSD in an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</summary>
      <param name="source">The <see cref="T:System.Xml.Linq.XDocument" /> to validate.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</param>
      <param name="validationEventHandler">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors. If null, throws an exception upon validation errors.</param>
      <param name="addSchemaInfo">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Thrown for XML Schema Definition Language (XSD) validation errors.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)">
      <summary>This method validates that an <see cref="T:System.Xml.Linq.XElement" /> sub-tree conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />.</summary>
      <param name="source">The <see cref="T:System.Xml.Linq.XElement" /> to validate.</param>
      <param name="partialValidationType">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</param>
      <param name="validationEventHandler">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors. If null, throws an exception upon validation errors.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Thrown for XML Schema Definition Language (XSD) validation errors.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)">
      <summary>Validates that an <see cref="T:System.Xml.Linq.XElement" /> sub-tree conforms to a specified <see cref="T:System.Xml.Schema.XmlSchemaObject" /> and an <see cref="T:System.Xml.Schema.XmlSchemaSet" />, optionally populating the XML tree with the post-schema-validation infoset (PSVI).</summary>
      <param name="source">The <see cref="T:System.Xml.Linq.XElement" /> to validate.</param>
      <param name="partialValidationType">An <see cref="T:System.Xml.Schema.XmlSchemaObject" /> that specifies the sub-tree to validate.</param>
      <param name="schemas">An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> to validate against.</param>
      <param name="validationEventHandler">A <see cref="T:System.Xml.Schema.ValidationEventHandler" /> for an event that occurs when the reader encounters validation errors. If null, throws an exception upon validation errors.</param>
      <param name="addSchemaInfo">A <see cref="T:System.Boolean" /> indicating whether to populate the post-schema-validation infoset (PSVI).</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">Thrown for XML Schema Definition Language (XSD) validation errors.</exception>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:System.Xml.XPath.Extensions">
      <summary>This class contains the LINQ to XML extension methods that enable you to evaluate XPath expressions.</summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode)">
      <summary>Creates an <see cref="T:System.Xml.XPath.XPathNavigator" /> for an <see cref="T:System.Xml.Linq.XNode" />.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> that can process XPath queries.</returns>
      <param name="node">An <see cref="T:System.Xml.Linq.XNode" /> that can process XPath queries.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XPath.Extensions.CreateNavigator(System.Xml.Linq.XNode,System.Xml.XmlNameTable)">
      <summary>Creates an <see cref="T:System.Xml.XPath.XPathNavigator" /> for an <see cref="T:System.Xml.Linq.XNode" />. The <see cref="T:System.Xml.XmlNameTable" /> enables more efficient XPath expression processing.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> that can process XPath queries.</returns>
      <param name="node">An <see cref="T:System.Xml.Linq.XNode" /> that can process an XPath query.</param>
      <param name="nameTable">A <see cref="T:System.Xml.XmlNameTable" /> to be used by <see cref="T:System.Xml.XPath.XPathNavigator" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String)">
      <summary>Evaluates an XPath expression.</summary>
      <returns>An object that can contain a bool, a double, a string, or an <see cref="T:System.Collections.Generic.IEnumerable`1" />. </returns>
      <param name="node">The <see cref="T:System.Xml.Linq.XNode" /> on which to evaluate the XPath expression.</param>
      <param name="expression">A <see cref="T:System.String" /> that contains an XPath expression.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XPath.Extensions.XPathEvaluate(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>Evaluates an XPath expression, resolving namespace prefixes using the specified <see cref="T:System.Xml.IXmlNamespaceResolver" />.</summary>
      <returns>An object that contains the result of evaluating the expression. The object can be a bool, a double, a string, or an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</returns>
      <param name="node">The <see cref="T:System.Xml.Linq.XNode" /> on which to evaluate the XPath expression.</param>
      <param name="expression">A <see cref="T:System.String" /> that contains an XPath expression.</param>
      <param name="resolver">A <see cref="T:System.Xml.IXmlNamespaceResolver" /> for the namespace prefixes in the XPath expression.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String)">
      <summary>Selects an <see cref="T:System.Xml.Linq.XElement" /> using a XPath expression.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" />, or null.</returns>
      <param name="node">The <see cref="T:System.Xml.Linq.XNode" /> on which to evaluate the XPath expression.</param>
      <param name="expression">A <see cref="T:System.String" /> that contains an XPath expression.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XPath.Extensions.XPathSelectElement(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>Selects an <see cref="T:System.Xml.Linq.XElement" /> using a XPath expression, resolving namespace prefixes using the specified <see cref="T:System.Xml.IXmlNamespaceResolver" />.</summary>
      <returns>An <see cref="T:System.Xml.Linq.XElement" />, or null.</returns>
      <param name="node">The <see cref="T:System.Xml.Linq.XNode" /> on which to evaluate the XPath expression.</param>
      <param name="expression">A <see cref="T:System.String" /> that contains an XPath expression.</param>
      <param name="resolver">An <see cref="T:System.Xml.IXmlNamespaceResolver" /> for the namespace prefixes in the XPath expression.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String)">
      <summary>Selects a collection of elements using an XPath expression.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the selected elements.</returns>
      <param name="node">The <see cref="T:System.Xml.Linq.XNode" /> on which to evaluate the XPath expression.</param>
      <param name="expression">A <see cref="T:System.String" /> that contains an XPath expression.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:System.Xml.XPath.Extensions.XPathSelectElements(System.Xml.Linq.XNode,System.String,System.Xml.IXmlNamespaceResolver)">
      <summary>Selects a collection of elements using an XPath expression, resolving namespace prefixes using the specified <see cref="T:System.Xml.IXmlNamespaceResolver" />.</summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Xml.Linq.XElement" /> that contains the selected elements.</returns>
      <param name="node">The <see cref="T:System.Xml.Linq.XNode" /> on which to evaluate the XPath expression.</param>
      <param name="expression">A <see cref="T:System.String" /> that contains an XPath expression.</param>
      <param name="resolver">A <see cref="T:System.Xml.IXmlNamespaceResolver" /> for the namespace prefixes in the XPath expression.</param>
      <filterpriority>2</filterpriority>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\UIAutomationClientsideProviders.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>UIAutomationClientsideProviders</name>
  </assembly>
  <members>
    <member name="T:UIAutomationClientsideProviders.UIAutomationClientSideProviders">
      <summary>Enables applications to discover client-side UI Automation providers.</summary>
    </member>
    <member name="F:UIAutomationClientsideProviders.UIAutomationClientSideProviders.ClientSideProviderDescriptionTable">
      <summary>Provides information about client-side UI Automation providers.</summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\UIAutomationProvider.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>UIAutomationProvider</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Automation.Provider.AutomationInteropProvider">
      <summary>Provides support for communication between UI Automation providers and UI Automation client applications.</summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.AutomationInteropProvider.AppendRuntimeId">
      <summary>Contains a value that, when returned as the first element of the array passed by the UI Automation provider to <see cref="M:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId" />, indicates that the ID is partial and should be appended to the ID provided by the base provider.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.AutomationInteropProvider.ClientsAreListening">
      <summary>Gets a value that specifies whether any UI Automation client application is subscribed to UI Automation events.</summary>
      <returns>true if a client is subscribed to events; otherwise false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.AutomationInteropProvider.HostProviderFromHandle(System.IntPtr)">
      <summary>Returns a UI Automation provider that represents the specified window. </summary>
      <returns>The raw element provider for the specified window.</returns>
      <param name="hwnd">The handle of the window.</param>
    </member>
    <member name="F:System.Windows.Automation.Provider.AutomationInteropProvider.InvalidateLimit">
      <summary>Specifies the maximum number of events to send before batching. </summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.AutomationInteropProvider.ItemsInvalidateLimit"></member>
    <member name="M:System.Windows.Automation.Provider.AutomationInteropProvider.RaiseAutomationEvent(System.Windows.Automation.AutomationEvent,System.Windows.Automation.Provider.IRawElementProviderSimple,System.Windows.Automation.AutomationEventArgs)">
      <summary>Raises a pattern event or a custom event.</summary>
      <param name="eventId">The event identifier.</param>
      <param name="provider">The element associated with the event.</param>
      <param name="e">Information about the event.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.AutomationInteropProvider.RaiseAutomationPropertyChangedEvent(System.Windows.Automation.Provider.IRawElementProviderSimple,System.Windows.Automation.AutomationPropertyChangedEventArgs)">
      <summary>Raises an event when a UI Automation property has changed. </summary>
      <param name="element">The element associated with the event.</param>
      <param name="e">Information about the event.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.AutomationInteropProvider.RaiseStructureChangedEvent(System.Windows.Automation.Provider.IRawElementProviderSimple,System.Windows.Automation.StructureChangedEventArgs)">
      <summary>Raises an event when the UI Automation tree has changed.</summary>
      <param name="provider">The element associated with the event.</param>
      <param name="e">Information about the event.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.AutomationInteropProvider.ReturnRawElementProvider(System.IntPtr,System.IntPtr,System.IntPtr,System.Windows.Automation.Provider.IRawElementProviderSimple)">
      <summary>Returns the UI automation provider for an element in response to a WM_GETOBJECT message. </summary>
      <returns>A pointer to data that should be assigned to <see cref="P:System.Windows.Forms.Message.Result" /> before passing the message to the base window procedure.</returns>
      <param name="hwnd">Handle of the element's window.</param>
      <param name="wParam">The wParam member of the WM_GETOBJECT message.</param>
      <param name="lParam">The lParam member of the WM_GETOBJECT message.</param>
      <param name="el">The UI Automation provider for the element.</param>
    </member>
    <member name="F:System.Windows.Automation.Provider.AutomationInteropProvider.RootObjectId">
      <summary>Contains a value used in the lParam member of a WM_GETOBJECT message, indicating that the server should return a reference to the root raw element provider. </summary>
    </member>
    <member name="T:System.Windows.Automation.Provider.IDockProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that expose their dock properties within a docking container. </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IDockProvider.DockPosition">
      <summary>Gets the current <see cref="T:System.Windows.Automation.DockPosition" /> of the control within a docking container.</summary>
      <returns>The <see cref="T:System.Windows.Automation.DockPosition" /> of the control, relative to the boundaries of the docking container and other elements within the container.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IDockProvider.SetDockPosition(System.Windows.Automation.DockPosition)">
      <summary>Docks the control within a docking container.</summary>
      <param name="dockPosition">The dock position, relative to the boundaries of the docking container and other elements within the container.</param>
    </member>
    <member name="T:System.Windows.Automation.Provider.IExpandCollapseProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that visually expand to display content and collapse to hide content.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IExpandCollapseProvider.Collapse">
      <summary>Hides all nodes, controls, or content that are descendants of the control.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IExpandCollapseProvider.Expand">
      <summary>Displays all child nodes, controls, or content of the control.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState">
      <summary>Gets the state, expanded or collapsed, of the control.</summary>
      <returns>The state, expanded or collapsed, of the control.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IGridItemProvider">
      <summary>Exposes methods and properties to support UI Automation client access to individual child controls of containers that implement <see cref="T:System.Windows.Automation.Provider.IGridProvider" />. </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.Column">
      <summary>Gets the ordinal number of the column that contains the cell or item.</summary>
      <returns>A zero-based ordinal number that identifies the column containing the cell or item.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan">
      <summary>Gets the number of columns spanned by a cell or item.</summary>
      <returns>The number of columns spanned. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid">
      <summary>Gets a UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.IGridProvider" /> and represents the container of the cell or item.</summary>
      <returns>A UI Automation provider that implements the <see cref="T:System.Windows.Automation.GridPattern" /> and represents the cell or item container. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.Row">
      <summary>Gets the ordinal number of the row that contains the cell or item.</summary>
      <returns>A zero-based ordinal number that identifies the row containing the cell or item. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridItemProvider.RowSpan">
      <summary>Gets the number of rows spanned by a cell or item.</summary>
      <returns>The number of rows spanned. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IGridProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that act as containers for a collection of child elements. The children of this element must implement <see cref="T:System.Windows.Automation.Provider.IGridItemProvider" /> and be organized in a two-dimensional logical coordinate system that can be traversed (that is, a UI Automation client can move to adjacent controls) by using the keyboard.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridProvider.ColumnCount">
      <summary>Gets the total number of columns in a grid.</summary>
      <returns>The total number of columns in a grid.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IGridProvider.GetItem(System.Int32,System.Int32)">
      <summary>Retrieves the UI Automation provider for the specified cell.</summary>
      <returns>The UI Automation provider for the specified cell.</returns>
      <param name="row">The ordinal number of the row of interest.</param>
      <param name="column">The ordinal number of the column of interest.</param>
    </member>
    <member name="P:System.Windows.Automation.Provider.IGridProvider.RowCount">
      <summary>Gets the total number of rows in a grid.</summary>
      <returns>The total number of rows in a grid.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IInvokeProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that initiate or perform a single, unambiguous action and do not maintain state when activated. </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IInvokeProvider.Invoke">
      <summary>Sends a request to activate a control and initiate its single, unambiguous action.</summary>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">If the control is not enabled.</exception>
    </member>
    <member name="T:System.Windows.Automation.Provider.IItemContainerProvider">
      <summary>Exposes a method to enable applications to find an element in a container, such as a virtualized list.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IItemContainerProvider.FindItemByProperty(System.Windows.Automation.Provider.IRawElementProviderSimple,System.Int32,System.Object)">
      <summary>Retrieves an element by the specified property value.</summary>
      <returns>The first item that matches the search criterion; otherwise, null if no items match.</returns>
      <param name="startAfter">The item in the container after which to begin the search.</param>
      <param name="propertyId">The property that contains the value to retrieve.</param>
      <param name="value">The value to retrieve.</param>
    </member>
    <member name="T:System.Windows.Automation.Provider.IMultipleViewProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that provide, and are able to switch between, multiple representations of the same set of information or child controls.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IMultipleViewProvider.CurrentView">
      <summary>Gets the current control-specific view.</summary>
      <returns>The value for the current view of the UI Automation element. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IMultipleViewProvider.GetSupportedViews">
      <summary>Retrieves a collection of control-specific view identifiers.</summary>
      <returns>A collection of values that identifies the views available for a UI Automation element. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IMultipleViewProvider.GetViewName(System.Int32)">
      <summary>Retrieves the name of a control-specific view.</summary>
      <returns>A localized name for the view.</returns>
      <param name="viewId">The view identifier.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="viewId" /> is not a member of the supported views collection.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.IMultipleViewProvider.SetCurrentView(System.Int32)">
      <summary>Sets the current control-specific view. </summary>
      <param name="viewId">A view identifier.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="viewId" /> is not a member of the supported views collection.</exception>
    </member>
    <member name="T:System.Windows.Automation.Provider.IRangeValueProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that can be set to a value within a range.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly">
      <summary>Gets a value that specifies whether the value of a control is read-only. </summary>
      <returns>true if the value is read-only; false if it can be modified. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange">
      <summary>Gets the value that is added to or subtracted from the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> property when a large change is made, such as with the PAGE DOWN key.</summary>
      <returns>The large-change value supported by the control or null (Nothing in Microsoft Visual Basic .NET) if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" />. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum">
      <summary>Gets the maximum range value supported by the control.</summary>
      <returns>The maximum value supported by the control or null (Nothing in Microsoft Visual Basic .NET) if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum" />. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum">
      <summary>Gets the minimum range value supported by the control.</summary>
      <returns>The minimum value supported by the control or null (Nothing in Microsoft Visual Basic .NET) if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum" />. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRangeValueProvider.SetValue(System.Double)">
      <summary>Sets the value of the control.</summary>
      <param name="value">The value to set.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">When <paramref name="value" /> is less than the minimum or greater than the maximum value of the control.</exception>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange">
      <summary>Gets the value that is added to or subtracted from the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> property when a small change is made, such as with an arrow key.</summary>
      <returns>The small-change value or null (Nothing in Microsoft Visual Basic .NET) if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" />. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRangeValueProvider.Value">
      <summary>Gets the value of the control.</summary>
      <returns>The value of the control or null (Nothing in Microsoft Visual Basic .NET) if the control does not support <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IRawElementProviderAdviseEvents">
      <summary>Exposes methods that are called to notify the root element of a fragment when a UI Automation client application begins or ends listening for events. </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderAdviseEvents.AdviseEventAdded(System.Int32,System.Int32[])">
      <summary>Notifies the UI Automation provider when a UI Automation client begins listening for a specific event, including a property-changed event. </summary>
      <param name="eventId">The identifier of the event being added.</param>
      <param name="properties">The identifiers of the properties being added, or null if the event listener being added is not listening for property events.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderAdviseEvents.AdviseEventRemoved(System.Int32,System.Int32[])">
      <summary>Notifies the UI Automation provider when a UI Automation client stops listening for a specific event, including a property-changed event. </summary>
      <param name="eventId">The identifier of the event being removed</param>
      <param name="properties">The identifiers of the properties being removed, or null if the event listener being removed is not listening for property events.</param>
    </member>
    <member name="T:System.Windows.Automation.Provider.IRawElementProviderFragment">
      <summary>Exposes methods and properties on user interface (UI) elements that are part of a structure more than one level deep, such as a list box or a list item. Implemented by UI Automation providers.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRawElementProviderFragment.BoundingRectangle">
      <summary>Gets the bounding rectangle of this element.</summary>
      <returns>The bounding rectangle, in screen coordinates.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRawElementProviderFragment.FragmentRoot">
      <summary>Retrieves the root node of the fragment.</summary>
      <returns>The root node. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderFragment.GetEmbeddedFragmentRoots">
      <summary>Retrieves an array of fragment roots that are embedded in the UI Automation element tree rooted at the current element.</summary>
      <returns>An array of root fragments, or null.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderFragment.GetRuntimeId">
      <summary>Retrieves the runtime identifier of an element. </summary>
      <returns>The unique run-time identifier of the element.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderFragment.Navigate(System.Windows.Automation.Provider.NavigateDirection)">
      <summary>Retrieves the UI Automation element in a specified direction within the tree.</summary>
      <returns>The element in the specified direction, or null if there is no element in that direction</returns>
      <param name="direction">The direction in which to navigate.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderFragment.SetFocus">
      <summary>Sets the focus to this element. </summary>
    </member>
    <member name="T:System.Windows.Automation.Provider.IRawElementProviderFragmentRoot">
      <summary>Exposes methods and properties on the root element in a fragment. </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderFragmentRoot.ElementProviderFromPoint(System.Double,System.Double)">
      <summary>Retrieves the element in this fragment that is at the specified point. </summary>
      <returns>The provider for the child element at the specified point, if one exists, or the root provider if the point is on this element but not on any child element. Otherwise returns null.</returns>
      <param name="x">The X coordinate,.</param>
      <param name="y">The Y coordinate.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderFragmentRoot.GetFocus">
      <summary>Retrieves the element in this fragment that has the input focus.</summary>
      <returns>The provider for the element in this fragment that has the input focus, if any; otherwise, a null reference (Nothing in Visual Basic).</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IRawElementProviderHwndOverride">
      <summary>Exposes a method that enables repositioning of window-based elements within the  UI Automation tree of the fragment. </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderHwndOverride.GetOverrideProviderForHwnd(System.IntPtr)">
      <summary>Retrieves a UI automation provider for the specified element. </summary>
      <returns>The provider for the specified element, or a null reference (Nothing in Microsoft Visual Basic .NET) if the element's default provider is not being overridden.</returns>
      <param name="hwnd">The window handle of the element.</param>
    </member>
    <member name="T:System.Windows.Automation.Provider.IRawElementProviderSimple">
      <summary>Provides methods and properties that expose basic information about a UI element.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderSimple.GetPatternProvider(System.Int32)">
      <summary>Retrieves an object that provides support for a control pattern on a UI Automation element.</summary>
      <returns>Object that implements the pattern interface, or null if the pattern is not supported.</returns>
      <param name="patternId">Identifier of the pattern.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.IRawElementProviderSimple.GetPropertyValue(System.Int32)">
      <summary>Retrieves the value of a property supported by the UI Automation provider.</summary>
      <returns>The property value, or a null if the property is not supported by this provider, or <see cref="F:System.Windows.Automation.AutomationElementIdentifiers.NotSupported" /> if it is not supported at all.</returns>
      <param name="propertyId">The property identifier.</param>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRawElementProviderSimple.HostRawElementProvider">
      <summary>Gets a base provider for this element.</summary>
      <returns>The base provider, or null.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IRawElementProviderSimple.ProviderOptions">
      <summary>Gets a value that specifies characteristics of the UI Automation provider; for example, whether it is a client-side or server-side provider. </summary>
      <returns>Either <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ClientSideProvider" /> or <see cref="F:System.Windows.Automation.Provider.ProviderOptions.ServerSideProvider" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IScrollItemProvider">
      <summary>Exposes methods and properties to support UI Automation client access to individual child controls of containers that implement <see cref="T:System.Windows.Automation.Provider.IScrollProvider" />.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IScrollItemProvider.ScrollIntoView">
      <summary>Scrolls the content area of a container object in order to display the control within the visible region (viewport) of the container.</summary>
      <exception cref="T:System.InvalidOperationException">The item cannot be scrolled into view.</exception>
    </member>
    <member name="T:System.Windows.Automation.Provider.IScrollProvider">
      <summary>Exposes methods and properties to support UI Automation client access to a control that acts as a scrollable container for a collection of child objects. The children of this control must implement <see cref="T:System.Windows.Automation.Provider.IScrollItemProvider" />.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.HorizontallyScrollable">
      <summary>Gets a value that indicates whether the control can scroll horizontally.</summary>
      <returns>true if the control can scroll horizontally; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalScrollPercent">
      <summary>Gets the current horizontal scroll position.</summary>
      <returns>The horizontal scroll position as a percentage of the total content area within the control.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalViewSize">
      <summary>Gets the current horizontal view size.</summary>
      <returns>The horizontal size of the viewable region as a percentage of the total content area within the control. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IScrollProvider.Scroll(System.Windows.Automation.ScrollAmount,System.Windows.Automation.ScrollAmount)">
      <summary>Scrolls the visible region of the content area horizontally and vertically.</summary>
      <param name="horizontalAmount">The horizontal increment specific to the control. <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> should be passed in if the control cannot be scrolled in this direction.</param>
      <param name="verticalAmount">The vertical increment specific to the control. <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> should be passed in if the control cannot be scrolled in this direction.</param>
      <exception cref="T:System.ArgumentException">If a control supports <see cref="F:System.Windows.Automation.ScrollAmount.SmallIncrement" /> values exclusively for horizontal or vertical scrolling but a <see cref="F:System.Windows.Automation.ScrollAmount.LargeIncrement" /> value is passed in.</exception>
      <exception cref="T:System.InvalidOperationException">An attempt is made to scroll in an unsupported direction.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.IScrollProvider.SetScrollPercent(System.Double,System.Double)">
      <summary>Sets the horizontal and vertical scroll position as a percentage of the total content area within the control.</summary>
      <param name="horizontalPercent">The horizontal position as a percentage of the content area's total range. <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> should be passed in if the control cannot be scrolled in this direction.</param>
      <param name="verticalPercent">The vertical position as a percentage of the content area's total range. <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" /> should be passed in if the control cannot be scrolled in this direction.</param>
      <exception cref="T:System.ArgumentException">A value that cannot be converted to a double is passed in.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">A value greater than 100 or less than 0 is passed in (except -1, which is equivalent to <see cref="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll" />). The <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalScrollPercent" /> and <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticalScrollPercent" /> values are normalized to either 100 percent or 0 percent. </exception>
      <exception cref="T:System.InvalidOperationException">An attempt is made to scroll in an unsupported direction.</exception>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.VerticallyScrollable">
      <summary>Gets a value that indicates whether the control can scroll vertically.</summary>
      <returns>true if the control can scroll vertically; otherwise false. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.VerticalScrollPercent">
      <summary>Gets the current vertical scroll position.</summary>
      <returns>The vertical scroll position as a percentage of the total content area within the control. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IScrollProvider.VerticalViewSize">
      <summary>Gets the vertical view size.</summary>
      <returns>The vertical size of the viewable region as a percentage of the total content area within the control. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ISelectionItemProvider">
      <summary>Exposes methods and properties to support UI Automation client access to individual, selectable child controls of containers that implement <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISelectionItemProvider.AddToSelection">
      <summary>Adds the current element to the collection of selected items.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected">
      <summary>Gets a value that indicates whether an item is selected. </summary>
      <returns>true if the element is selected; otherwise false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISelectionItemProvider.RemoveFromSelection">
      <summary>Removes the current element from the collection of selected items.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISelectionItemProvider.Select">
      <summary>Deselects any selected items and then selects the current element.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ISelectionItemProvider.SelectionContainer">
      <summary>Gets the UI Automation provider that implements <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" /> and acts as the container for the calling object.</summary>
      <returns>The provider that supports <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ISelectionProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that act as containers for a collection of individual, selectable child items. The children of this control must implement <see cref="T:System.Windows.Automation.Provider.ISelectionItemProvider" />.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple">
      <summary>Gets a value that specifies whether the UI Automation provider allows more than one child element to be selected concurrently.</summary>
      <returns>true if multiple selection is allowed; otherwise false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISelectionProvider.GetSelection">
      <summary>Retrieves a UI Automation provider for each child element that is selected.</summary>
      <returns>A collection of UI Automation providers. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired">
      <summary>Gets a value that specifies whether the UI Automation provider requires at least one child element to be selected.</summary>
      <returns>true if selection is required; otherwise false.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ISynchronizedInputProvider">
      <summary>Exposes methods to facilitate UI Automation client access to controls that support synchronized input.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISynchronizedInputProvider.Cancel">
      <summary>Stops listening for input.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ISynchronizedInputProvider.StartListening(System.Windows.Automation.SynchronizedInputType)">
      <summary>Designates that the provider start listening for input of the specified type.</summary>
      <param name="inputType">The type of input to listen for.</param>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITableItemProvider">
      <summary>Exposes methods and properties to support UI Automation client access to child controls of containers that implement <see cref="T:System.Windows.Automation.Provider.ITableProvider" />. </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITableItemProvider.GetColumnHeaderItems">
      <summary>Retrieves a collection of UI Automation providers representing all the column headers associated with a table item or cell.</summary>
      <returns>A collection of UI Automation providers. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITableItemProvider.GetRowHeaderItems">
      <summary>Retrieves a collection of UI Automation providers representing all the row headers associated with a table item or cell.</summary>
      <returns>A collection of UI Automation providers. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITableProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that act as containers for a collection of child elements. The children of this element must implement <see cref="T:System.Windows.Automation.Provider.ITableItemProvider" /> and be organized in a two-dimensional logical coordinate system that can be traversed (that is, a UI Automation client can move to adjacent controls) by using the keyboard.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITableProvider.GetColumnHeaders">
      <summary>Gets a collection of UI Automation providers that represents all the column headers in a table.</summary>
      <returns>A collection of UI Automation providers. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITableProvider.GetRowHeaders">
      <summary>Retrieves a collection of UI Automation providers that represents all row headers in the table.</summary>
      <returns>A collection of UI Automation providers.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITableProvider.RowOrColumnMajor">
      <summary>Retrieves the primary direction of traversal for the table.</summary>
      <returns>The primary direction of traversal. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITextProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that contain text.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITextProvider.DocumentRange">
      <summary>Gets a text range that encloses the main text of a document. </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextProvider.GetSelection">
      <summary>Retrieves a collection of disjoint text ranges associated with the current text selection or selections. </summary>
      <returns>A collection of disjoint text ranges.</returns>
      <exception cref="T:System.InvalidOperationException">If the UI Automation provider does not support text selection.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextProvider.GetVisibleRanges">
      <summary>Retrieves an array of disjoint text ranges from a text container where each text range begins with the first partially visible line through to the end of the last partially visible line. </summary>
      <returns>The collection of visible text ranges within the container or an empty array. A null reference (Nothing in Microsoft Visual Basic .NET) is never returned.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextProvider.RangeFromChild(System.Windows.Automation.Provider.IRawElementProviderSimple)">
      <summary>Retrieves a text range enclosing a child element such as an image, hyperlink, or other embedded object. </summary>
      <returns>A range that spans the child element.</returns>
      <param name="childElement">The enclosed object.</param>
      <exception cref="T:System.ArgumentException">If the child element is a null reference (Nothing in Microsoft Visual Basic .NET).</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextProvider.RangeFromPoint(System.Windows.Point)">
      <summary>Returns the degenerate (empty) text range nearest to the specified screen coordinates. </summary>
      <returns>A degenerate range nearest the specified location. A null reference (Nothing in Microsoft Visual Basic .NET) is never returned.</returns>
      <param name="screenLocation">The location in screen coordinates. </param>
      <exception cref="T:System.ArgumentException">If a given point is outside the UI Automation element associated with the text pattern.</exception>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection">
      <summary>Gets a value that specifies whether a text provider supports selection and, if so, the type of selection supported.</summary>
      <returns>One of None, Single, or Multiple from <see cref="T:System.Windows.Automation.SupportedTextSelection" />.</returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITextRangeProvider">
      <summary>Exposes methods and properties to support UI Automation client access to a span of continuous text in a text container that implements <see cref="T:System.Windows.Automation.Provider.ITextProvider" />.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection">
      <summary>Adds to the collection of highlighted text in a text container that supports multiple, disjoint selections.</summary>
      <exception cref="T:System.InvalidOperationException">If text provider does not support multiple, disjoint selections (that is, <see cref="P:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection" /> must have a value of Multiple).</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.Clone">
      <summary>Returns a new <see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /> identical to the original <see cref="T:System.Windows.Automation.Provider.ITextRangeProvider" /> and inheriting all properties of the original. </summary>
      <returns>The new text range. A null reference (Nothing in Microsoft Visual Basic .NET) is never returned.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)">
      <summary>Returns a value that indicates whether the span (the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> endpoint to the <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint) of a text range is the same as another text range. </summary>
      <returns>true if the span of both text ranges is identical; otherwise false. </returns>
      <param name="range">A text range to compare</param>
      <exception cref="T:System.ArgumentException">If the range being compared does not come from the same text provider.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
      <summary>Returns a value that specifies whether two text ranges have identical endpoints.  </summary>
      <returns>Returns a negative value if the caller's endpoint occurs earlier in the text than the target endpoint. Returns zero if the caller's endpoint is at the same location as the target endpoint. Returns a positive value if the caller's endpoint occurs later in the text than the target endpoint. </returns>
      <param name="endpoint">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the caller.</param>
      <param name="targetRange">The target range for comparison.</param>
      <param name="targetEndpoint">The <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> or <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoint of the target.</param>
      <exception cref="T:System.ArgumentException">If <paramref name="targetRange" /> is from a different text provider.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)">
      <summary>Expands the text range to the specified text unit.</summary>
      <param name="unit">The textual unit.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)">
      <summary>Returns a text range subset that has the specified attribute value. </summary>
      <returns>A text range having a matching attribute and attribute value; otherwise null (Nothing in Microsoft Visual Basic .NET). </returns>
      <param name="attribute">The attribute to search for.</param>
      <param name="value">The attribute value to search for. This value must match the type specified for the attribute. </param>
      <param name="backward">true if the last occurring text range should be returned instead of the first; otherwise false. </param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)">
      <summary>Returns a text range subset that contains the specified text.</summary>
      <returns>A text range matching the specified text; otherwise null (Nothing in Microsoft Visual Basic .NET).</returns>
      <param name="text">The text string to search for.</param>
      <param name="backward">true if the last occurring text range should be returned instead of the first; otherwise false.</param>
      <param name="ignoreCase">true if case should be ignored; otherwise false.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)">
      <summary>Retrieves the value of the specified attribute across the text range. </summary>
      <returns>Retrieves an object representing the value of the specified attribute. For example, GetAttributeValue(TextPattern.FontNameAttribute) would return a string that represents the font name of the text range while GetAttributeValue(TextPattern.IsItalicAttribute) would return a value of type <see cref="T:System.Boolean" />.Returns <see cref="F:System.Windows.Automation.TextPattern.MixedAttributeValue" /> if the value of the specified attribute varies over the text range.Returns <see cref="F:System.Windows.Automation.AutomationElement.NotSupported" /> if the specified attribute is not supported by the provider or the control. </returns>
      <param name="attribute">The text attribute.</param>
      <exception cref="T:System.ArgumentException">If the specified attribute is not valid.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles">
      <summary>Retrieves a collection of bounding rectangles for each fully or partially visible line of text in a text range.</summary>
      <returns>An array of bounding rectangles for each full or partial line of text in a text range.An empty array for a degenerate range.An empty array for a text range that has screen coordinates placing it completely off-screen, scrolled out of view, or obscured by an overlapping window.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.GetChildren">
      <summary>Retrieves a collection of all embedded objects that fall within the text range. </summary>
      <returns>A collection of child objects that fall within the range. Children that overlap with the text range but are not entirely enclosed by it will also be included in the collection.Returns an empty collection if there are no child objects.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement">
      <summary>Returns the innermost control that encloses the text range. </summary>
      <returns>The enclosing control, typically the text provider that supplies the text range. However, if the text provider supports child elements such as tables or hyperlinks, then the enclosing element could be a descendant of the text provider. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)">
      <summary>Retrieves the plain text of the range. </summary>
      <returns>The plain text of the text range, possibly truncated at the specified <paramref name="maxLength" />. </returns>
      <param name="maxLength">The maximum length of the string to return. Use -1 if no limit is required.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="maxLength" /> is less than -1.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)">
      <summary>Moves the text range the specified number of text units.</summary>
      <returns>The number of units actually moved. This can be less than the number requested if either of the new text range endpoints is greater than or less than the <see cref="P:System.Windows.Automation.Provider.ITextProvider.DocumentRange" /> endpoints. </returns>
      <param name="unit">The text unit boundary.</param>
      <param name="count">The number of text units to move.A positive value moves the text range forward, a negative value moves the text range backward, and 0 has no effect.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)">
      <summary>Moves one endpoint of a text range to the specified endpoint of a second text range. </summary>
      <param name="endpoint">The endpoint to move.</param>
      <param name="targetRange">Another range from the same text provider.</param>
      <param name="targetEndpoint">An endpoint on the other range.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)">
      <summary>Moves one endpoint of the text range the specified number of text units within the document range. </summary>
      <returns>The number of units actually moved, which can be less than the number requested if moving the endpoint runs into the beginning or end of the document.</returns>
      <param name="endpoint">The endpoint to move.</param>
      <param name="unit">The textual unit for moving.</param>
      <param name="count">The number of units to move. A positive value moves the endpoint forward. A negative value moves backward. A value of 0 has no effect.</param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection">
      <summary>Removes a highlighted section of text, corresponding to the caller's <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints, from the collection of highlighted text in a text container that supports multiple, disjoint selections.</summary>
      <exception cref="T:System.InvalidOperationException">If text provider does not support multiple, disjoint selections (for example, <see cref="P:System.Windows.Automation.TextPattern.SupportedTextSelection" /> must have a value of Multiple).</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)">
      <summary>Causes the text control to scroll vertically until the text range is visible in the viewport. </summary>
      <param name="alignToTop">true if the text control should be scrolled so the text range is flush with the top of the viewport; false if it should be flush with the bottom of the viewport. </param>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITextRangeProvider.Select">
      <summary>Highlights text in the text control corresponding to the text range <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" /> endpoints. </summary>
      <exception cref="T:System.InvalidOperationException">Occurs when text selection is not supported by the text control.</exception>
    </member>
    <member name="T:System.Windows.Automation.Provider.IToggleProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that can cycle through a set of states and maintain a state once set.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IToggleProvider.Toggle">
      <summary>Cycles through the toggle states of a control.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IToggleProvider.ToggleState">
      <summary>Gets the toggle state of the control.</summary>
      <returns>The <see cref="T:System.Windows.Automation.ToggleState" /> of the control. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.ITransformProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that can be moved, resized, or rotated within a two-dimensional space.</summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITransformProvider.CanMove">
      <summary>Gets a value that specifies whether the control can be moved.</summary>
      <returns>true if the element can be moved; otherwise false. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITransformProvider.CanResize">
      <summary>Gets a value that specifies whether the UI Automation element can be resized.</summary>
      <returns>true if the element can be resized; otherwise false. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.ITransformProvider.CanRotate">
      <summary>Gets a value that specifies whether the control can be rotated.</summary>
      <returns>true if the element can be rotated; otherwise false. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITransformProvider.Move(System.Double,System.Double)">
      <summary>Moves the control.</summary>
      <param name="x">Absolute screen coordinates of the left side of the control.</param>
      <param name="y">Absolute screen coordinates of the top of the control.</param>
      <exception cref="T:System.InvalidOperationException">If the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanMove" /> property is false.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITransformProvider.Resize(System.Double,System.Double)">
      <summary>Resizes the control. </summary>
      <param name="width">The new width of the window, in pixels.</param>
      <param name="height">The new height of the window, in pixels.</param>
      <exception cref="T:System.InvalidOperationException">If the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanResize" /> property is false.</exception>
    </member>
    <member name="M:System.Windows.Automation.Provider.ITransformProvider.Rotate(System.Double)">
      <summary>Rotates the control.</summary>
      <param name="degrees">The number of degrees to rotate the control. A positive number rotates clockwise; a negative number rotates counterclockwise.</param>
      <exception cref="T:System.InvalidOperationException">If the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanRotate" /> property is false.</exception>
    </member>
    <member name="T:System.Windows.Automation.Provider.IValueProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls having an intrinsic value that does not span a range and that can be represented as a string. </summary>
    </member>
    <member name="P:System.Windows.Automation.Provider.IValueProvider.IsReadOnly">
      <summary>Gets a value that specifies whether the value of a control is read-only. </summary>
      <returns>true if the value is read-only; false if it can be modified. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IValueProvider.SetValue(System.String)">
      <summary>Sets the value of a control.</summary>
      <param name="value"></param>
      <exception cref="T:System.InvalidOperationException">If locale-specific information is passed to a control in an incorrect format such as an incorrectly formatted date. </exception>
      <exception cref="T:System.ArgumentException">If a new value cannot be converted from a string to a format the control recognizes.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotEnabledException">When an attempt is made to manipulate a control that is not enabled.</exception>
    </member>
    <member name="P:System.Windows.Automation.Provider.IValueProvider.Value">
      <summary>Gets the value of the control.</summary>
      <returns>The value of the control as a string. </returns>
    </member>
    <member name="T:System.Windows.Automation.Provider.IVirtualizedItemProvider">
      <summary>Exposes a method to support the virtualized item control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IVirtualizedItemProvider.Realize">
      <summary>Makes the virtual item fully accessible as a UI Automation element.</summary>
    </member>
    <member name="T:System.Windows.Automation.Provider.IWindowProvider">
      <summary>Exposes methods and properties to support UI Automation client access to controls that provide fundamental window-based functionality within a traditional graphical user interface (GUI). </summary>
    </member>
    <member name="M:System.Windows.Automation.Provider.IWindowProvider.Close">
      <summary>Attempts to close the window.</summary>
      <exception cref="T:System.InvalidOperationException">When the control is unable to perform the requested action.</exception>
      <exception cref="T:System.Windows.Automation.ElementNotAvailableException">When the target element is no longer available (for example, the window has closed).</exception>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.InteractionState">
      <summary>Gets the interaction state of the window. </summary>
      <returns>The <see cref="T:System.Windows.Automation.WindowInteractionState" /> of the control. </returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.IsModal">
      <summary>Gets a value that specifies whether the window is modal.</summary>
      <returns>true if the window is modal; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.IsTopmost">
      <summary>Gets a value that specifies whether the window is the topmost element in the z-order.</summary>
      <returns>true if the window is topmost; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.Maximizable">
      <summary>Gets a value that specifies whether the window can be maximized.</summary>
      <returns>true if the window can be maximized; otherwise false.</returns>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.Minimizable">
      <summary>Gets a value that specifies whether the window can be minimized. </summary>
      <returns>true if the window can be minimized; otherwise false.</returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IWindowProvider.SetVisualState(System.Windows.Automation.WindowVisualState)">
      <summary>Changes the visual state of the window. For example, minimizes or maximizes it.</summary>
      <param name="state">The requested visual state of the window.</param>
      <exception cref="T:System.InvalidOperationException">When the control does not support the requested behavior.</exception>
    </member>
    <member name="P:System.Windows.Automation.Provider.IWindowProvider.VisualState">
      <summary>Gets the visual state of the window. </summary>
      <returns>The visual state of the window. </returns>
    </member>
    <member name="M:System.Windows.Automation.Provider.IWindowProvider.WaitForInputIdle(System.Int32)">
      <summary>Causes the calling code to block for the specified time or until the associated process enters an idle state, whichever completes first. </summary>
      <returns>true if the window has entered the idle state; false if the timeout occurred.</returns>
      <param name="milliseconds">The amount of time, in milliseconds, to wait for the associated process to become idle. The maximum is <see cref="F:System.Int32.MaxValue" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">When the parameter passed in is not a valid number.</exception>
    </member>
    <member name="T:System.Windows.Automation.Provider.NavigateDirection">
      <summary>Contains values used to specify the direction of navigation within the UI Automation tree.</summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.NavigateDirection.Parent">
      <summary>The navigation direction is toward the parent.</summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.NavigateDirection.NextSibling">
      <summary>The navigation direction is to the next sibling. </summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.NavigateDirection.PreviousSibling">
      <summary>The navigation direction is to the previous sibling. </summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.NavigateDirection.FirstChild">
      <summary>The navigation direction is to the first child. </summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.NavigateDirection.LastChild">
      <summary>The navigation direction is to the last child. </summary>
    </member>
    <member name="T:System.Windows.Automation.Provider.ProviderOptions">
      <summary>Contains values that specify the type of UI Automation provider. </summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.ProviderOptions.ClientSideProvider">
      <summary>The UI Automation provider is a client-side provider. </summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.ProviderOptions.ServerSideProvider">
      <summary>The UI Automation provider is a server-side provider. </summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.ProviderOptions.NonClientAreaProvider">
      <summary>The UI Automation provider is a non-client-area provider. </summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.ProviderOptions.OverrideProvider">
      <summary>The UI Automation provider overrides another provider.</summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.ProviderOptions.ProviderOwnsSetFocus">
      <summary>The UI Automation provider handles its own focus, and does not want UI Automation to set focus to the nearest window on its behalf when <see cref="M:System.Windows.Automation.AutomationElement.SetFocus" /> is called. This option is typically used by providers for windows that appear to take focus without actually receiving Win32 focus, such as menus and drop-down menus.</summary>
    </member>
    <member name="F:System.Windows.Automation.Provider.ProviderOptions.UseComThreading">
      <summary />
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\UIAutomationTypes.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>UIAutomationTypes</name>
  </assembly>
  <members>
    <member name="T:System.Windows.Automation.AsyncContentLoadedEventArgs">
      <summary>Provides data for a <see cref="F:System.Windows.Automation.AutomationElement.AsyncContentLoadedEvent" />. </summary>
    </member>
    <member name="M:System.Windows.Automation.AsyncContentLoadedEventArgs.#ctor(System.Windows.Automation.AsyncContentLoadedState,System.Double)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.AsyncContentLoadedEventArgs" /> class.</summary>
      <param name="asyncContentState">The state of content loading.</param>
      <param name="percentComplete">Percentage of content that has been loaded.</param>
    </member>
    <member name="P:System.Windows.Automation.AsyncContentLoadedEventArgs.AsyncContentLoadedState">
      <summary>Gets the state of the content loading. </summary>
      <returns>One of the <see cref="T:System.Windows.Automation.AsyncContentLoadedState" /> values.</returns>
    </member>
    <member name="P:System.Windows.Automation.AsyncContentLoadedEventArgs.PercentComplete">
      <summary>Gets the percentage of content that has been loaded. </summary>
      <returns>The percentage of content that has been loaded.</returns>
    </member>
    <member name="T:System.Windows.Automation.AsyncContentLoadedState">
      <summary>Contains values that specify the state of the content being loaded into a content element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AsyncContentLoadedState.Beginning">
      <summary>Specifies that asynchronous loading of the content into the UI Automation element is beginning.</summary>
    </member>
    <member name="F:System.Windows.Automation.AsyncContentLoadedState.Progress">
      <summary>Specifies that asynchronous loading of the content into the UI Automation element is in progress. UI Automation providers should specify the percent complete so that client applications will know how much more content remains.</summary>
    </member>
    <member name="F:System.Windows.Automation.AsyncContentLoadedState.Completed">
      <summary>Specifies that asynchronous loading of the content into the UI Automation element is complete.</summary>
    </member>
    <member name="T:System.Windows.Automation.AutomationElementIdentifiers">
      <summary>Contains values used as identifiers by UI Automation providers.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AcceleratorKeyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AcceleratorKey" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AccessKeyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AccessKey" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AsyncContentLoadedEvent">
      <summary>Identifies an event raised during asynchronous content-loading.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AutomationFocusChangedEvent">
      <summary>Identifies an event that is raised when the focus has changed.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AutomationIdProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.AutomationId" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.AutomationPropertyChangedEvent">
      <summary>Identifies a property-changed event.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.BoundingRectangleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.BoundingRectangle" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ClassNameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ClassName" /> property. </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ClickablePointProperty">
      <summary>Identifies the <see cref="F:System.Windows.Automation.AutomationElement.ClickablePointProperty" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ControlTypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ControlType" /> property. </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.CultureProperty">
      <summary>Identifies the culture property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.FrameworkIdProperty">
      <summary>Identifies the property that contains the underlying framework's name for the element. </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.HasKeyboardFocusProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.HasKeyboardFocus" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.HelpTextProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.HelpText" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsContentElementProperty">
      <summary>Identifies the property that indicates whether the element contains content that is valuable to the end user.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsControlElementProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsControlElement" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsDockPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.DockPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsEnabledProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsEnabled" /> property, which specifies whether the user interface (UI) item referenced by the <see cref="T:System.Windows.Automation.AutomationElement" /> is enabled.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsExpandCollapsePatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.ExpandCollapsePattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsGridItemPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.GridItemPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsGridPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.GridPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsInvokePatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.InvokePattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsItemContainerPatternAvailableProperty"></member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsKeyboardFocusableProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsKeyboardFocusable" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsMultipleViewPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.MultipleViewPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsOffscreenProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsOffscreen" /> property, which indicates whether the UI Automation element is visible. </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsPasswordProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsPassword" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsRangeValuePatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.RangeValuePattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsRequiredForFormProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.IsRequiredForForm" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsScrollItemPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.ScrollItemPattern" /> is available for this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsScrollPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.ScrollPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsSelectionItemPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.SelectionItemPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsSelectionPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.SelectionPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsSynchronizedInputPatternAvailableProperty"></member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsTableItemPatternAvailableProperty">
      <summary>Identifies the property that indicates whether the <see cref="T:System.Windows.Automation.TableItemPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsTablePatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.TablePattern" /> is available on this UI Automation element. </summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsTextPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.TextPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsTogglePatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.TogglePattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsTransformPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.TransformPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsValuePatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.ValuePattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsVirtualizedItemPatternAvailableProperty"></member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.IsWindowPatternAvailableProperty">
      <summary>Identifies the property that indicates whether <see cref="T:System.Windows.Automation.WindowPattern" /> is available on this UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ItemStatusProperty">
      <summary>Identifies the property that specifies the status of the visual representation of a complex item.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ItemTypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ItemType" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.LabeledByProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.LabeledBy" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.LayoutInvalidatedEvent">
      <summary>Identifies the event that is raised when the layout is invalidated.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.LocalizedControlTypeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.LocalizedControlType" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.MenuClosedEvent">
      <summary>Identifies the event that is raised when a menu is closed.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.MenuOpenedEvent">
      <summary>Identifies the event that is raised when a menu is opened.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.NameProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.Name" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.NativeWindowHandleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.NativeWindowHandle" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.NotSupported">
      <summary>Indicates that a property is not supported.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.OrientationProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.Orientation" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ProcessIdProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.AutomationElement.AutomationElementInformation.ProcessId" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.RuntimeIdProperty">
      <summary>Identifies the property that contains the runtime identifier of the element.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.StructureChangedEvent">
      <summary>Identifies the event that is raised when the UI Automation tree structure is changed.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ToolTipClosedEvent">
      <summary>Identifies the event that is raised when a ToolTip is closed.</summary>
    </member>
    <member name="F:System.Windows.Automation.AutomationElementIdentifiers.ToolTipOpenedEvent">
      <summary>Identifies the event that is raised when a ToolTip is opened.</summary>
    </member>
    <member name="T:System.Windows.Automation.AutomationEvent">
      <summary>Identifies a UI Automation event.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationEvent.LookupById(System.Int32)">
      <summary>Retrieves an <see cref="T:System.Windows.Automation.AutomationEvent" /> that encapsulates the specified numerical identifier.</summary>
      <returns>A new <see cref="T:System.Windows.Automation.AutomationEvent" />.</returns>
      <param name="id">Identifier of the event.</param>
    </member>
    <member name="T:System.Windows.Automation.AutomationEventArgs">
      <summary>Provides data for UI Automation events that are passed to an <see cref="T:System.Windows.Automation.AutomationEventHandler" /> delegate.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationEventArgs.#ctor(System.Windows.Automation.AutomationEvent)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.AutomationEventArgs" /> class.</summary>
      <param name="eventId">The event identifier.</param>
    </member>
    <member name="P:System.Windows.Automation.AutomationEventArgs.EventId">
      <summary>Gets the event identifier.</summary>
      <returns>The event identifier.</returns>
    </member>
    <member name="T:System.Windows.Automation.AutomationEventHandler">
      <summary>Represents the method implemented by the UI Automation client application to handle an event raised by a UI Automation provider. </summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">Information about the event.</param>
    </member>
    <member name="T:System.Windows.Automation.AutomationIdentifier">
      <summary>Base class for types that identify control types, events, patterns, properties, and text attributes in UI Automation.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationIdentifier.CompareTo(System.Object)">
      <summary>Compares this <see cref="T:System.Windows.Automation.AutomationIdentifier" /> with another <see cref="T:System.Windows.Automation.AutomationIdentifier" />.</summary>
      <returns>The hash code of this object minus the hash code of <paramref name="obj" />.</returns>
      <param name="obj">The object to compare this one with.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> is null.</exception>
    </member>
    <member name="M:System.Windows.Automation.AutomationIdentifier.Equals(System.Object)">
      <summary>Returns a value indicating whether the supplied <see cref="T:System.Windows.Automation.AutomationIdentifier" /> is equivalent to this <see cref="T:System.Windows.Automation.AutomationIdentifier" />.</summary>
      <returns>true if the objects are equivalent; otherwise false.</returns>
      <param name="obj">An <see cref="T:System.Windows.Automation.AutomationIdentifier" /> object to compare with this identifier.</param>
    </member>
    <member name="M:System.Windows.Automation.AutomationIdentifier.GetHashCode">
      <summary>Returns the hash code for this UI Automation identifier.</summary>
      <returns>A 32-bit signed integer hash code.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationIdentifier.Id">
      <summary>Gets the underlying numerical identifier.</summary>
      <returns>The underlying identifier.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationIdentifier.ProgrammaticName">
      <summary>Gets the registered programmatic name.</summary>
      <returns>The programmatic name.</returns>
    </member>
    <member name="T:System.Windows.Automation.AutomationPattern">
      <summary>Identifies a control pattern.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationPattern.LookupById(System.Int32)">
      <summary>Retrieves an <see cref="T:System.Windows.Automation.AutomationPattern" /> that encapsulates a specified numerical identifier.</summary>
      <returns>The <see cref="T:System.Windows.Automation.AutomationPattern" /> specified by <paramref name="id" />.</returns>
      <param name="id">Identifier of the pattern.</param>
    </member>
    <member name="T:System.Windows.Automation.AutomationProperty">
      <summary>Identifies a property of an <see cref="T:System.Windows.Automation.AutomationElement" />. </summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationProperty.LookupById(System.Int32)">
      <summary>Retrieves an <see cref="T:System.Windows.Automation.AutomationProperty" /> that encapsulates a specified numerical identifier.</summary>
      <param name="id">The property identifier.</param>
    </member>
    <member name="T:System.Windows.Automation.AutomationPropertyChangedEventArgs">
      <summary>Provides information about a property-changed event.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationPropertyChangedEventArgs.#ctor(System.Windows.Automation.AutomationProperty,System.Object,System.Object)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.AutomationPropertyChangedEventArgs" /> class.</summary>
      <param name="property">The identifier of the property that has changed.</param>
      <param name="oldValue">The previous value of the property.</param>
      <param name="newValue">The new value of the property.</param>
    </member>
    <member name="P:System.Windows.Automation.AutomationPropertyChangedEventArgs.NewValue">
      <summary>Gets the new value of a property that has changed.</summary>
      <returns>The new value of the property.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationPropertyChangedEventArgs.OldValue">
      <summary>Gets the old value of a property that has changed.</summary>
      <returns>The previous value of the property, or null (Nothing in Microsoft Visual Basic .NET) if the previous value is not readily available.</returns>
    </member>
    <member name="P:System.Windows.Automation.AutomationPropertyChangedEventArgs.Property">
      <summary>Gets an <see cref="T:System.Windows.Automation.AutomationProperty" /> identifier indicating which property changed.</summary>
      <returns>The identifier of the property that has changed.</returns>
    </member>
    <member name="T:System.Windows.Automation.AutomationPropertyChangedEventHandler">
      <summary>Represents the method implemented by the UI Automation client application to handle the event raised by a UI Automation provider when a property has changed.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">Information about the event.</param>
    </member>
    <member name="T:System.Windows.Automation.AutomationTextAttribute">
      <summary>Identifies UI Automation text attributes.</summary>
    </member>
    <member name="M:System.Windows.Automation.AutomationTextAttribute.LookupById(System.Int32)">
      <summary>Retrieves a <see cref="T:System.Windows.Automation.AutomationTextAttribute" /> that encapsulates a specified numerical identifier.</summary>
      <param name="id">The numerical identifier.</param>
    </member>
    <member name="T:System.Windows.Automation.ControlType">
      <summary>Identifies the type of a user interface (UI) control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Button">
      <summary>Identifies a button control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Calendar">
      <summary>Identifies a calendar control, such as a date-picker.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.CheckBox">
      <summary>Identifies a check box control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.ComboBox">
      <summary>Identifies a combo box control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Custom">
      <summary>Identifies a control that is not one of the defined control types.  </summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.DataGrid">
      <summary>Identifies a data grid control. </summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.DataItem">
      <summary>Identifies a data item control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Document">
      <summary>Identifies a document control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Edit">
      <summary>Identifies an edit control, such as a text box.</summary>
    </member>
    <member name="M:System.Windows.Automation.ControlType.GetNeverSupportedPatterns">
      <summary>Retrieves the pattern identifiers that are not supported by the control type.</summary>
      <returns>An array of UI Automation pattern identifiers.</returns>
    </member>
    <member name="M:System.Windows.Automation.ControlType.GetRequiredPatternSets">
      <summary>Retrieves an array of sets of required patterns. </summary>
      <returns>An array of sets of required patterns.</returns>
    </member>
    <member name="M:System.Windows.Automation.ControlType.GetRequiredProperties">
      <summary>Retrieves an array of the required property identifiers (IDs) for this control type.</summary>
      <returns>An array of property IDs. </returns>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Group">
      <summary>Identifies a group control, which acts as a container for other controls.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Header">
      <summary>Identifies a header control, which is a container for the labels of rows and columns of information. </summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.HeaderItem">
      <summary>Identifies a header item, which is the label for a row or column of information. </summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Hyperlink">
      <summary>Identifies a hyperlink control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Image">
      <summary>Identifies an image control. </summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.List">
      <summary>Identifies a list control, such as a list box.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.ListItem">
      <summary>Identifies a list item control, which is a child item of a list control.  </summary>
    </member>
    <member name="P:System.Windows.Automation.ControlType.LocalizedControlType">
      <summary>Gets a description of the control type. </summary>
      <returns>A localized description of the control type, such as "button". </returns>
    </member>
    <member name="M:System.Windows.Automation.ControlType.LookupById(System.Int32)">
      <summary>Retrieves a <see cref="T:System.Windows.Automation.ControlType" /> that encapsulates a specified numerical identifier. </summary>
      <param name="id">Identifier of the control type.</param>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Menu">
      <summary>Identifies a menu control, such as a top-level menu in an application window.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.MenuBar">
      <summary>Identifies a menu bar control, which generally contains a set of top-level menus. </summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.MenuItem">
      <summary>Identifies a menu item control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Pane">
      <summary>Identifies a pane control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.ProgressBar">
      <summary>Identifies a progress bar control, which visually indicates the progress of a lengthy operation.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.RadioButton">
      <summary>Identifies a radio button control, which is a selection mechanism allowing exactly one selected item in a group.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.ScrollBar">
      <summary>Identifies a scroll bar control, such as a scroll bar in an application window.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Separator">
      <summary>Identifies a separator, which creates a visual division in controls like menus and toolbars. </summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Slider">
      <summary>Identifies a slider control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Spinner">
      <summary>Identifies a spinner control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.SplitButton">
      <summary>Identifies a split button, which is a button that performs a default action and can also expand to a list of other possible actions. </summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.StatusBar">
      <summary>Identifies a status bar control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Tab">
      <summary>Identifies a tab control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.TabItem">
      <summary>Identifies a tab item control, which represents a page of a tab control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Table">
      <summary>Identifies a table.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Text">
      <summary>Identifies an edit control, such as a text box or rich text box.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Thumb">
      <summary>Identifies the control in a scrollbar that can be dragged to a different position.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.TitleBar">
      <summary>Identifies the caption bar on a window. </summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.ToolBar">
      <summary>Identifies a toolbar, such as the control that contains a set of command buttons in an application window.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.ToolTip">
      <summary>Identifies a tooltip control, an informational window that appears as a result of moving the pointer over a control or sometimes when tabbing to a control using the keyboard.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Tree">
      <summary>Identifies a tree control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.TreeItem">
      <summary>Identifies a node in a <see cref="F:System.Windows.Automation.ControlType.TreeItem" /> control.</summary>
    </member>
    <member name="F:System.Windows.Automation.ControlType.Window">
      <summary>Identifies a window frame, which contains child objects. </summary>
    </member>
    <member name="T:System.Windows.Automation.DockPatternIdentifiers">
      <summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.IDockProvider" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPatternIdentifiers.DockPositionProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IDockProvider.DockPosition" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.DockPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.DockPattern" /> pattern.</summary>
    </member>
    <member name="T:System.Windows.Automation.DockPosition">
      <summary>Contains values that specify the dock position of an object, represented by a <see cref="T:System.Windows.Automation.DockPattern" />, within a docking container.</summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Top">
      <summary>Indicates that the UI Automation element is docked along the top edge of the docking container. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Left">
      <summary>Indicates that the UI Automation element is docked along the left edge of the docking container. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Bottom">
      <summary>Indicates that the UI Automation element is docked along the bottom edge of the docking container. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Right">
      <summary>Indicates that the UI Automation element is docked along the right edge of the docking container. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.Fill">
      <summary>Indicates that the UI Automation element is docked along all edges of the docking container and fills all available space within the container. </summary>
    </member>
    <member name="F:System.Windows.Automation.DockPosition.None">
      <summary>Indicates that the UI Automation element is not docked to any edge of the docking container. </summary>
    </member>
    <member name="T:System.Windows.Automation.ElementNotAvailableException">
      <summary>Contains information about the exception that is raised when an attempt is made to access an UI Automation element corresponding to a part of the user interface that is no longer available.</summary>
    </member>
    <member name="M:System.Windows.Automation.ElementNotAvailableException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotAvailableException" /> class. </summary>
    </member>
    <member name="M:System.Windows.Automation.ElementNotAvailableException.#ctor(System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotAvailableException" /> class with a reference to the inner exception that caused this exception. </summary>
      <param name="innerException">The exception that caused this exception.</param>
    </member>
    <member name="M:System.Windows.Automation.ElementNotAvailableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotAvailableException" /> class with serialization information. </summary>
      <param name="info">Data needed to serialize or deserialize the object. </param>
      <param name="context">The source and destination of the serialized stream.</param>
    </member>
    <member name="M:System.Windows.Automation.ElementNotAvailableException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotAvailableException" /> class with a specified error message. </summary>
      <param name="message">The description of the error.</param>
    </member>
    <member name="M:System.Windows.Automation.ElementNotAvailableException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotAvailableException" /> class with a specified error message and a reference to the inner exception that caused this exception. </summary>
      <param name="message">The description of the error.</param>
      <param name="innerException">The exception that caused this exception.</param>
    </member>
    <member name="M:System.Windows.Automation.ElementNotAvailableException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Retrieves data needed to serialize the target object. </summary>
      <param name="info">Data needed to serialize or deserialize the object.</param>
      <param name="context">The destination of the serialized stream.</param>
    </member>
    <member name="T:System.Windows.Automation.ElementNotEnabledException">
      <summary>Contains information about the exception that is raised when an attempt is made to manipulate a control that is not enabled. </summary>
    </member>
    <member name="M:System.Windows.Automation.ElementNotEnabledException.#ctor">
      <summary> Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotEnabledException" /> class. </summary>
    </member>
    <member name="M:System.Windows.Automation.ElementNotEnabledException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotEnabledException" /> class with serialization information.</summary>
      <param name="info">Data needed to serialize or deserialize the object. </param>
      <param name="context">The source and destination of the serialized stream.</param>
    </member>
    <member name="M:System.Windows.Automation.ElementNotEnabledException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotEnabledException" /> class with a specified error message. </summary>
      <param name="message">The description of the error.</param>
    </member>
    <member name="M:System.Windows.Automation.ElementNotEnabledException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ElementNotEnabledException" /> class with a specified error message and a reference to the inner exception that caused this exception. </summary>
      <param name="message">The description of the error.</param>
      <param name="innerException">The exception that caused this exception.</param>
    </member>
    <member name="M:System.Windows.Automation.ElementNotEnabledException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Retrieves data needed to serialize the target object. </summary>
      <param name="info">Data needed to serialize or deserialize the object.</param>
      <param name="context">The destination of the serialized stream.</param>
    </member>
    <member name="T:System.Windows.Automation.ExpandCollapsePatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IExpandCollapseProvider" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapsePatternIdentifiers.ExpandCollapseStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IExpandCollapseProvider.ExpandCollapseState" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapsePatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ExpandCollapsePattern" /> control pattern.</summary>
    </member>
    <member name="T:System.Windows.Automation.ExpandCollapseState">
      <summary>Contains values that specify the <see cref="T:System.Windows.Automation.ExpandCollapseState" /> of a UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapseState.Collapsed">
      <summary>No child nodes, controls, or content of the UI Automation element are displayed. </summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapseState.Expanded">
      <summary>All child nodes, controls or content of the UI Automation element are displayed. </summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapseState.PartiallyExpanded">
      <summary>Some, but not all, child nodes, controls, or content of the UI Automation element are displayed. </summary>
    </member>
    <member name="F:System.Windows.Automation.ExpandCollapseState.LeafNode">
      <summary>The UI Automation element has no child nodes, controls, or content to display. </summary>
    </member>
    <member name="T:System.Windows.Automation.GridItemPatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IGridItemProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.ColumnProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.Column" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.ColumnSpanProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.ColumnSpan" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.ContainingGridProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.ContainingGrid" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.GridItemPattern" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.RowProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.Row" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridItemPatternIdentifiers.RowSpanProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridItemProvider.RowSpan" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.GridPatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IGridProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridPatternIdentifiers.ColumnCountProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridProvider.ColumnCount" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.GridPattern" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.GridPatternIdentifiers.RowCountProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IGridProvider.RowCount" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.InvokePatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IInvokeProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.InvokePatternIdentifiers.InvokedEvent">
      <summary>Identifies the event raised when a control is activated. </summary>
    </member>
    <member name="F:System.Windows.Automation.InvokePatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.InvokePattern" /> control pattern. </summary>
    </member>
    <member name="T:System.Windows.Automation.ItemContainerPatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IItemContainerProvider" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.ItemContainerPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ItemContainerPattern" /> control pattern.</summary>
    </member>
    <member name="T:System.Windows.Automation.MultipleViewPatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IMultipleViewProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.MultipleViewPatternIdentifiers.CurrentViewProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IMultipleViewProvider.CurrentView" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.MultipleViewPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.MultipleViewPattern" /> control pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.MultipleViewPatternIdentifiers.SupportedViewsProperty">
      <summary>Identifies the property that gets the control-specific collection of views.</summary>
    </member>
    <member name="T:System.Windows.Automation.NoClickablePointException">
      <summary>Contains information about the exception that is raised when <see cref="M:System.Windows.Automation.AutomationElement.GetClickablePoint" /> is called on a UI Automation element that has no clickable point.</summary>
    </member>
    <member name="M:System.Windows.Automation.NoClickablePointException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.NoClickablePointException" /> class.</summary>
    </member>
    <member name="M:System.Windows.Automation.NoClickablePointException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.NoClickablePointException" /> class with serialization information.</summary>
      <param name="info">Data needed to serialize or deserialize the object. </param>
      <param name="context">The source and destination of the serialized stream.</param>
    </member>
    <member name="M:System.Windows.Automation.NoClickablePointException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.NoClickablePointException" /> class with a specified error message.</summary>
      <param name="message">The description of the error.</param>
    </member>
    <member name="M:System.Windows.Automation.NoClickablePointException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.NoClickablePointException" /> class with a specified error message and a reference to the inner exception that caused this exception.</summary>
      <param name="message">The description of the error.</param>
      <param name="innerException">The exception that caused this exception.</param>
    </member>
    <member name="M:System.Windows.Automation.NoClickablePointException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Retrieves data needed to serialize the target object. </summary>
      <param name="info">Data needed to serialize or deserialize the object.</param>
      <param name="context">The destination of the serialized stream.</param>
    </member>
    <member name="T:System.Windows.Automation.OrientationType">
      <summary>Contains values that specify the orientation of a control.</summary>
    </member>
    <member name="F:System.Windows.Automation.OrientationType.None">
      <summary>Specifies that the control has no orientation.</summary>
    </member>
    <member name="F:System.Windows.Automation.OrientationType.Horizontal">
      <summary>Specifies that the control has horizontal orientation.</summary>
    </member>
    <member name="F:System.Windows.Automation.OrientationType.Vertical">
      <summary>Specifies that the control has vertical orientation.</summary>
    </member>
    <member name="T:System.Windows.Automation.ProxyAssemblyNotLoadedException">
      <summary>Contains information about an exception that is raised when there is a problem loading an assembly that contains client-side providers</summary>
    </member>
    <member name="M:System.Windows.Automation.ProxyAssemblyNotLoadedException.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ProxyAssemblyNotLoadedException" /> class. Used internally.</summary>
    </member>
    <member name="M:System.Windows.Automation.ProxyAssemblyNotLoadedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ProxyAssemblyNotLoadedException" /> class with serialization information. Used internally.</summary>
      <param name="info">Data needed to serialize or deserialize the object.</param>
      <param name="context">The source and destination of the serialized stream.</param>
    </member>
    <member name="M:System.Windows.Automation.ProxyAssemblyNotLoadedException.#ctor(System.String)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ProxyAssemblyNotLoadedException" /> class with an error message. Used internally.</summary>
      <param name="message">The description of the error.</param>
    </member>
    <member name="M:System.Windows.Automation.ProxyAssemblyNotLoadedException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.ProxyAssemblyNotLoadedException" /> class with a specified error message and a reference to the inner exception that caused this exception. Used internally.</summary>
      <param name="message">The description of the error.</param>
      <param name="innerException">The exception that caused this exception.</param>
    </member>
    <member name="M:System.Windows.Automation.ProxyAssemblyNotLoadedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Retrieves data needed to serialize the target object. Used internally.</summary>
      <param name="info">Data needed to serialize or deserialize the object.</param>
      <param name="context">The destination of the serialized stream.</param>
    </member>
    <member name="T:System.Windows.Automation.RangeValuePatternIdentifiers">
      <summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.IRangeValueProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.IsReadOnlyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.IsReadOnly" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.LargeChangeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.LargeChange" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.MaximumProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Maximum" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.MinimumProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Minimum" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.Pattern">
      <summary>Identifies this pattern as a <see cref="T:System.Windows.Automation.RangeValuePattern" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.SmallChangeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.SmallChange" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.RangeValuePatternIdentifiers.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IRangeValueProvider.Value" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.RowOrColumnMajor">
      <summary>Contains values that specify whether data in a table should be read primarily by row or by column.</summary>
    </member>
    <member name="F:System.Windows.Automation.RowOrColumnMajor.RowMajor">
      <summary>Specifies that data in the table should be read row by row. </summary>
    </member>
    <member name="F:System.Windows.Automation.RowOrColumnMajor.ColumnMajor">
      <summary>Specifies that data in the table should be read column by column </summary>
    </member>
    <member name="F:System.Windows.Automation.RowOrColumnMajor.Indeterminate">
      <summary>Specifies that the best way to present the data is indeterminate.</summary>
    </member>
    <member name="T:System.Windows.Automation.ScrollAmount">
      <summary>Contains values used by <see cref="T:System.Windows.Automation.ScrollPattern" /> to indicate the direction and distance to scroll.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.LargeDecrement">
      <summary>Specifies that scrolling is done in large decrements, equivalent to PageUp or clicking on a blank part of a scrollbar. If PageUp is not a relevant amount for the control and/or no scrollbar exists, the value represents an amount equal to the current visible window. </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.SmallDecrement">
      <summary>Specifies that scrolling is done in small decrements, equivalent to pressing an arrow key or clicking the arrow button on a scrollbar. </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.NoAmount">
      <summary>Specifies that scrolling should not be performed.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.LargeIncrement">
      <summary>Specifies that scrolling is done in large increments, equivalent to a PageDown or clicking on the track of a scrollbar component. If a PageDown is not a relevant amount for the control and/or no scrollbar exists, the value represents an amount equal to the current visible region. </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollAmount.SmallIncrement">
      <summary>Specifies that scrolling is done in small increments, equivalent to pressing an arrow key or clicking the arrow button on a scrollbar. </summary>
    </member>
    <member name="T:System.Windows.Automation.ScrollItemPatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IScrollItemProvider" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollItemPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ScrollItemPattern" /> pattern.</summary>
    </member>
    <member name="T:System.Windows.Automation.ScrollPatternIdentifiers">
      <summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.IScrollProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.HorizontallyScrollableProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontallyScrollable" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.HorizontalScrollPercentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalScrollPercent" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.HorizontalViewSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.HorizontalViewSize" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.NoScroll">
      <summary>Specifies that scrolling should not be performed.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ScrollPattern" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.VerticallyScrollableProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticallyScrollable" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.VerticalScrollPercentProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticalScrollPercent" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ScrollPatternIdentifiers.VerticalViewSizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IScrollProvider.VerticalViewSize" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.SelectionItemPatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.ISelectionItemProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPatternIdentifiers.ElementAddedToSelectionEvent">
      <summary>Identifies the event raised when an item is added to a collection of selected items.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPatternIdentifiers.ElementRemovedFromSelectionEvent">
      <summary>Identifies the event raised when an item is removed from a collection of selected items.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPatternIdentifiers.ElementSelectedEvent">
      <summary>Identifies the event that is raised when a single item is selected (causing all previously selected items to become deselected).</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPatternIdentifiers.IsSelectedProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionItemProvider.IsSelected" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.SelectionItemPattern" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionItemPatternIdentifiers.SelectionContainerProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.SelectionItemPattern.SelectionItemPatternInformation.SelectionContainer" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.SelectionPatternIdentifiers">
      <summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.ISelectionProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPatternIdentifiers.CanSelectMultipleProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionProvider.CanSelectMultiple" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPatternIdentifiers.InvalidatedEvent">
      <summary>Identifies the event that is raised when a selection in a container has changed significantly and requires sending more addition and removal events than the <see cref="F:System.Windows.Automation.Provider.AutomationInteropProvider.InvalidateLimit" /> constant permits.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPatternIdentifiers.IsSelectionRequiredProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ISelectionProvider.IsSelectionRequired" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.SelectionPattern" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.SelectionPatternIdentifiers.SelectionProperty">
      <summary>Identifies the property that gets the selected items in a container.</summary>
    </member>
    <member name="T:System.Windows.Automation.StructureChangedEventArgs">
      <summary>Contains information about the event that is raised when the UI Automation tree structure has changed.</summary>
    </member>
    <member name="M:System.Windows.Automation.StructureChangedEventArgs.#ctor(System.Windows.Automation.StructureChangeType,System.Int32[])">
      <summary>Initializes a new instance of the <see cref="P:System.Windows.Automation.StructureChangedEventArgs.StructureChangeType" /> class, specifying the type of change and the identifier (ID) of the element whose structure changed.</summary>
      <param name="structureChangeType">A single value that specifies the type of change.</param>
      <param name="runtimeId">The runtime identifier (ID) of the UI Automation element whose structure changed. See Remarks.</param>
    </member>
    <member name="M:System.Windows.Automation.StructureChangedEventArgs.GetRuntimeId">
      <summary>Retrieves the UI Automation runtime identifier (ID) of the UI Automation element whose structure changed.</summary>
      <returns>The runtime ID of the UI Automation element whose structure changed.</returns>
    </member>
    <member name="P:System.Windows.Automation.StructureChangedEventArgs.StructureChangeType">
      <summary>Gets a value indicating the type of change that occurred in the UI Automation tree structure.</summary>
      <returns>The type of changed that occurred.</returns>
    </member>
    <member name="T:System.Windows.Automation.StructureChangedEventHandler">
      <summary>Represents the method implemented by the client application to handle the event raised when the UI Automation tree structure has changed.</summary>
      <param name="sender">The object that raised the event.</param>
      <param name="e">Information about the event.</param>
    </member>
    <member name="T:System.Windows.Automation.StructureChangeType">
      <summary>Contains values that specify changes in the structure of the Microsoft UI Automation element tree.</summary>
    </member>
    <member name="F:System.Windows.Automation.StructureChangeType.ChildAdded">
      <summary>A child element was added to the UI Automation element tree.</summary>
    </member>
    <member name="F:System.Windows.Automation.StructureChangeType.ChildRemoved">
      <summary>A child element was removed from the UI Automation element tree.</summary>
    </member>
    <member name="F:System.Windows.Automation.StructureChangeType.ChildrenInvalidated">
      <summary>Child elements were invalidated in the UI Automation element tree. This might mean that one or more children were added or removed, depending on the UI Automation providers implementation.</summary>
    </member>
    <member name="F:System.Windows.Automation.StructureChangeType.ChildrenBulkAdded">
      <summary>Child elements were added to the UI Automation element tree.</summary>
    </member>
    <member name="F:System.Windows.Automation.StructureChangeType.ChildrenBulkRemoved">
      <summary>Child elements were removed from the UI Automation element tree.</summary>
    </member>
    <member name="F:System.Windows.Automation.StructureChangeType.ChildrenReordered">
      <summary>The order of the child elements in the UI Automation element tree changed.</summary>
    </member>
    <member name="T:System.Windows.Automation.SupportedTextSelection">
      <summary>Contains values that specify whether a text provider supports selection and, if so, whether it supports a single, continuous selection or multiple, disjoint selections.</summary>
    </member>
    <member name="F:System.Windows.Automation.SupportedTextSelection.None">
      <summary>Does not support text selections.</summary>
    </member>
    <member name="F:System.Windows.Automation.SupportedTextSelection.Single">
      <summary>Supports a single, continuous text selection.</summary>
    </member>
    <member name="F:System.Windows.Automation.SupportedTextSelection.Multiple">
      <summary>Supports multiple, disjoint text selections.</summary>
    </member>
    <member name="T:System.Windows.Automation.SynchronizedInputPatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.ISynchronizedInputProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputPatternIdentifiers.InputDiscardedEvent">
      <summary>Identifies the event raised when the input was discarded by WPF. </summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputPatternIdentifiers.InputReachedOtherElementEvent">
      <summary>Identifies the event raised when the input was received by an element other than the one currently listening for the input.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputPatternIdentifiers.InputReachedTargetEvent">
      <summary>Identifies the event raised when the input was received by the element currently listening for the input.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.SynchronizedInputPattern" /> control pattern.</summary>
    </member>
    <member name="T:System.Windows.Automation.SynchronizedInputType">
      <summary>Contains values that specify the type of synchronized input. </summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputType.KeyUp">
      <summary>A key has been released.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputType.KeyDown">
      <summary>A key has been pressed.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputType.MouseLeftButtonUp">
      <summary>The left mouse button has been released.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputType.MouseLeftButtonDown">
      <summary>The left mouse button has been pressed.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputType.MouseRightButtonUp">
      <summary>The right mouse button has been released.</summary>
    </member>
    <member name="F:System.Windows.Automation.SynchronizedInputType.MouseRightButtonDown">
      <summary>The right mouse button has been pressed.</summary>
    </member>
    <member name="T:System.Windows.Automation.TableItemPatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.ITableItemProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.TableItemPatternIdentifiers.ColumnHeaderItemsProperty">
      <summary>Identifies the property that retrieves all the column headers associated with a table item or cell.</summary>
    </member>
    <member name="F:System.Windows.Automation.TableItemPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.TableItemPattern" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.TableItemPatternIdentifiers.RowHeaderItemsProperty">
      <summary>Identifies the property that retrieves all the row headers associated with a table item or cell.</summary>
    </member>
    <member name="T:System.Windows.Automation.TablePatternIdentifiers">
      <summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.TablePattern" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.TablePatternIdentifiers.ColumnHeadersProperty">
      <summary>Identifies the property that calls the <see cref="M:System.Windows.Automation.Provider.ITableProvider.GetColumnHeaders" /> method.</summary>
    </member>
    <member name="F:System.Windows.Automation.TablePatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.TablePattern" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.TablePatternIdentifiers.RowHeadersProperty">
      <summary>Identifies the property that calls the <see cref="M:System.Windows.Automation.Provider.ITableProvider.GetRowHeaders" /> method.</summary>
    </member>
    <member name="F:System.Windows.Automation.TablePatternIdentifiers.RowOrColumnMajorProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.TablePattern.TablePatternInformation.RowOrColumnMajor" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.TextPatternIdentifiers">
      <summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.ITextProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute">
      <summary>Identifies the <see cref="T:System.Windows.Automation.Text.AnimationStyle" /> attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.BackgroundColorAttribute">
      <summary>Identifies the BackgroundColor attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.BulletStyleAttribute">
      <summary>Identifies the <see cref="T:System.Windows.Automation.Text.BulletStyle" /> attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.CapStyleAttribute">
      <summary>Identifies the <see cref="T:System.Windows.Automation.Text.CapStyle" /> attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.CultureAttribute">
      <summary>Identifies the Culture (<see cref="T:System.Globalization.CultureInfo" />) attribute of a text range down to the sub-language level; for example, French–Switzerland (fr-CH) instead of French (fr). </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.FontNameAttribute">
      <summary>Identifies the FontName attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.FontSizeAttribute">
      <summary>Identifies the FontSize attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.FontWeightAttribute">
      <summary>Identifies the FontWeight attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.ForegroundColorAttribute">
      <summary>Identifies the ForegroundColor (COLORREF) attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.HorizontalTextAlignmentAttribute">
      <summary>Identifies the <see cref="T:System.Windows.Automation.Text.HorizontalTextAlignment" /> attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IndentationFirstLineAttribute">
      <summary>Identifies the IndentationFirstLine (<see cref="P:System.Windows.Documents.Paragraph.TextIndent" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IndentationLeadingAttribute">
      <summary>Identifies the IndentationLeading (<see cref="P:System.Windows.Documents.Paragraph.TextIndent" />) attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IndentationTrailingAttribute">
      <summary>Identifies the IndentationTrailing (<see cref="P:System.Windows.Documents.Paragraph.TextIndent" />) attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IsHiddenAttribute">
      <summary>Identifies the IsHidden attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IsItalicAttribute">
      <summary>Identifies the IsItalic (<see cref="T:System.Windows.FontStyle" />) attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IsReadOnlyAttribute">
      <summary>Identifies the IsReadOnly attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IsSubscriptAttribute">
      <summary>Identifies the IsSubscript (<see cref="T:System.Windows.FontVariants" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.IsSuperscriptAttribute">
      <summary>Identifies the IsSuperscript (<see cref="T:System.Windows.FontVariants" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.MarginBottomAttribute">
      <summary>Identifies the MarginBottom (<see cref="T:System.Drawing.Printing.PageSettings" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.MarginLeadingAttribute">
      <summary>Identifies the MarginLeading (<see cref="T:System.Drawing.Printing.PageSettings" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.MarginTopAttribute">
      <summary>Identifies the MarginTop (<see cref="T:System.Drawing.Printing.PageSettings" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.MarginTrailingAttribute">
      <summary>Identifies the MarginTrailing (<see cref="T:System.Drawing.Printing.PageSettings" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.MixedAttributeValue">
      <summary>Identifies whether the value of a given attribute varies over a text range in a rich edit control.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.OutlineStylesAttribute">
      <summary>Identifies the OutlineStyles (<see cref="T:System.Windows.Automation.Text.OutlineStyles" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.OverlineColorAttribute">
      <summary>Identifies the OverlineColor attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.OverlineStyleAttribute">
      <summary>Identifies the OverlineStyle (<see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.TextPattern" /> pattern. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.StrikethroughColorAttribute">
      <summary>Identifies the StrikethroughColor attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.StrikethroughStyleAttribute">
      <summary>Identifies the StrikethroughStyle (<see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.TabsAttribute">
      <summary>Identifies the Tabs attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.TextChangedEvent">
      <summary>Identifies the event raised whenever textual content is modified.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.TextFlowDirectionsAttribute">
      <summary>Identifies the TextFlowDirections (<see cref="T:System.Windows.Automation.Text.FlowDirections" />) attribute of a text range.</summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.TextSelectionChangedEvent">
      <summary>Identifies the event raised whenever the text selection is modified. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.UnderlineColorAttribute">
      <summary>Identifies the UnderlineColor attribute of a text range. </summary>
    </member>
    <member name="F:System.Windows.Automation.TextPatternIdentifiers.UnderlineStyleAttribute">
      <summary>Identifies the UnderlineStyle (<see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" />) attribute of a text range. </summary>
    </member>
    <member name="T:System.Windows.Automation.TogglePatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IToggleProvider" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.TogglePatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.TogglePattern" /> control pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.TogglePatternIdentifiers.ToggleStateProperty">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ToggleState" /> of the UI Automation element.</summary>
    </member>
    <member name="T:System.Windows.Automation.ToggleState">
      <summary>Contains values that specify the <see cref="T:System.Windows.Automation.ToggleState" /> of a UI Automation element.</summary>
    </member>
    <member name="F:System.Windows.Automation.ToggleState.Off">
      <summary>The UI Automation element is not selected, checked, marked or otherwise activated.</summary>
    </member>
    <member name="F:System.Windows.Automation.ToggleState.On">
      <summary>The UI Automation element is selected, checked, marked or otherwise activated.</summary>
    </member>
    <member name="F:System.Windows.Automation.ToggleState.Indeterminate">
      <summary>The UI Automation element is in an indeterminate state.</summary>
    </member>
    <member name="T:System.Windows.Automation.TransformPatternIdentifiers">
      <summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.ITransformProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.TransformPatternIdentifiers.CanMoveProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanMove" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.TransformPatternIdentifiers.CanResizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanResize" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.TransformPatternIdentifiers.CanRotateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.ITransformProvider.CanRotate" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.TransformPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.TransformPattern" /> control pattern.</summary>
    </member>
    <member name="T:System.Windows.Automation.TreeScope">
      <summary>Contains values that specify the scope of elements within the UI Automation tree.</summary>
    </member>
    <member name="F:System.Windows.Automation.TreeScope.Element">
      <summary>Specifies that the search include the element itself. </summary>
    </member>
    <member name="F:System.Windows.Automation.TreeScope.Children">
      <summary>Specifies that the search include the element's immediate children. </summary>
    </member>
    <member name="F:System.Windows.Automation.TreeScope.Descendants">
      <summary>Specifies that the search include the element's descendants, including children.</summary>
    </member>
    <member name="F:System.Windows.Automation.TreeScope.Parent">
      <summary>Specifies that the search include the element's parent. Not supported.</summary>
    </member>
    <member name="F:System.Windows.Automation.TreeScope.Ancestors">
      <summary>Specifies that the search include the element's ancestors, including the parent. Not supported.</summary>
    </member>
    <member name="F:System.Windows.Automation.TreeScope.Subtree">
      <summary>Specifies that the search include the root of the search and all descendants.</summary>
    </member>
    <member name="T:System.Windows.Automation.ValuePatternIdentifiers">
      <summary>Contains values used as identifiers for <see cref="T:System.Windows.Automation.Provider.IValueProvider" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.ValuePatternIdentifiers.IsReadOnlyProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IValueProvider.IsReadOnly" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.ValuePatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.ValuePattern" /> control pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.ValuePatternIdentifiers.ValueProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.Provider.IValueProvider.Value" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.VirtualizedItemPatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IVirtualizedItemProvider" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.VirtualizedItemPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.VirtualizedItemPattern" /> control pattern.</summary>
    </member>
    <member name="T:System.Windows.Automation.WindowClosedEventArgs">
      <summary>Contains information about the event that is raised when a window is closed.</summary>
    </member>
    <member name="M:System.Windows.Automation.WindowClosedEventArgs.#ctor(System.Int32[])">
      <summary>Initializes a new instance of the <see cref="T:System.Windows.Automation.WindowClosedEventArgs" /> class.</summary>
      <param name="runtimeId">The runtime identifier of the window that has closed.</param>
    </member>
    <member name="M:System.Windows.Automation.WindowClosedEventArgs.GetRuntimeId">
      <summary>Retrieves the UI Automation runtime identifier (ID) associated with this event.</summary>
      <returns>The UI Automation runtime ID of the window on which the event was raised.</returns>
    </member>
    <member name="T:System.Windows.Automation.WindowInteractionState">
      <summary>Contains values that specify the current state of the window for purposes of user or programmatic interaction.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.Running">
      <summary>Indicates that the window is running. This does not guarantee that the window is responding or ready for user interaction.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.Closing">
      <summary>Indicates that the window is closing. </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.ReadyForUserInteraction">
      <summary>Indicates that the window is ready for user interaction.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.BlockedByModalWindow">
      <summary>Indicates that the window is blocked by a modal window. </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowInteractionState.NotResponding">
      <summary>Indicates that the window is not responding. </summary>
    </member>
    <member name="T:System.Windows.Automation.WindowPatternIdentifiers">
      <summary>Contains values used as identifiers by <see cref="T:System.Windows.Automation.Provider.IWindowProvider" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.CanMaximizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.CanMaximize" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.CanMinimizeProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.CanMinimize" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.IsModalProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.IsModal" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.IsTopmostProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.IsTopmost" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.Pattern">
      <summary>Identifies the <see cref="T:System.Windows.Automation.WindowPattern" /> pattern.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.WindowClosedEvent">
      <summary>Identifies the event that is raised when a window is closed.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.WindowInteractionStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.WindowInteractionState" /> property.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.WindowOpenedEvent">
      <summary>Identifies the event that is raised when a window is opened.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowPatternIdentifiers.WindowVisualStateProperty">
      <summary>Identifies the <see cref="P:System.Windows.Automation.WindowPattern.WindowPatternInformation.WindowVisualState" /> property.</summary>
    </member>
    <member name="T:System.Windows.Automation.WindowVisualState">
      <summary>Contains values that specify the visual state of a window.</summary>
    </member>
    <member name="F:System.Windows.Automation.WindowVisualState.Normal">
      <summary>Specifies that the window is normal (restored). </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowVisualState.Maximized">
      <summary>Specifies that the window is maximized. </summary>
    </member>
    <member name="F:System.Windows.Automation.WindowVisualState.Minimized">
      <summary>Specifies that the window is minimized.</summary>
    </member>
    <member name="T:System.Windows.Automation.Text.AnimationStyle">
      <summary>Represents values for <see cref="F:System.Windows.Automation.TextPattern.AnimationStyleAttribute" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.AnimationStyle.None">
      <summary>Specifies that there is no animation style.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.AnimationStyle.LasVegasLights">
      <summary>Specifies that the bounding rectangle displays a border of alternating icons of different colors.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.AnimationStyle.BlinkingBackground">
      <summary>Specifies that the font and background alternate between assigned colors and contrasting colors.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.AnimationStyle.SparkleText">
      <summary>Specifies that the background displays flashing, multi-colored icons.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.AnimationStyle.MarchingBlackAnts">
      <summary>Specifies that the bounding rectangle displays moving black dashes.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.AnimationStyle.MarchingRedAnts">
      <summary>Specifies that the bounding rectangle displays moving red dashes.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.AnimationStyle.Shimmer">
      <summary>Specifies that the font alternates between solid and blurred.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.AnimationStyle.Other">
      <summary>Specifies that the animation style is one not explicitly itemized in the <see cref="T:System.Windows.Automation.Text.AnimationStyle" /> enumeration.</summary>
    </member>
    <member name="T:System.Windows.Automation.Text.BulletStyle">
      <summary>Values for <see cref="F:System.Windows.Automation.TextPattern.BulletStyleAttribute" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.BulletStyle.None">
      <summary>No bullet style. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.BulletStyle.HollowRoundBullet">
      <summary>Hollow round bullets. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.BulletStyle.FilledRoundBullet">
      <summary>Solid round bullets.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.BulletStyle.HollowSquareBullet">
      <summary>Hollow square bullets.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.BulletStyle.FilledSquareBullet">
      <summary>Solid square bullets. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.BulletStyle.DashBullet">
      <summary>Dash bullets. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.BulletStyle.Other">
      <summary>Another bullet style not explicitly specified in the <see cref="T:System.Windows.Automation.Text.BulletStyle" /> enumeration. </summary>
    </member>
    <member name="T:System.Windows.Automation.Text.CapStyle">
      <summary>Represents values for <see cref="F:System.Windows.Automation.TextPattern.CapStyleAttribute" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.CapStyle.None">
      <summary>Indicates that there is no capitalization style; uppercase and lowercase letters render normally.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.CapStyle.SmallCap">
      <summary>Indicates that the capitalization style is small caps; lowercase letters are replaced with uppercase letters of the same approximate height as the font's x-height.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.CapStyle.AllCap">
      <summary>Indicates that the capitalization style is all caps; all lowercase letters are replaced with uppercase letters.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.CapStyle.AllPetiteCaps">
      <summary>Indicates that the capitalization style is all petite caps; uppercase and lowercase letters are replaced with uppercase letters slightly smaller than small caps.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.CapStyle.PetiteCaps">
      <summary>Indicates that the capitalization style is petite caps; lowercase letters are replaced with uppercase letters slightly smaller than small caps.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.CapStyle.Unicase">
      <summary>Indicates that the capitalization style is unicase; uppercase and lowercase letters are rendered in a way determined by the type designer. A unicase alphabet is one that does not specify case for its letters.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.CapStyle.Titling">
      <summary>Indicates that the capitalization style is title case; uppercase and lowercase letters are rendered with letters specifically designed for titles.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.CapStyle.Other">
      <summary>Indicates that the capitalization style is a style not explicitly specified in the <see cref="T:System.Windows.Automation.Text.CapStyle" /> enumeration. </summary>
    </member>
    <member name="T:System.Windows.Automation.Text.FlowDirections">
      <summary>Values for <see cref="F:System.Windows.Automation.TextPattern.TextFlowDirectionsAttribute" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.FlowDirections.Default">
      <summary>Top to bottom, left to right, horizontal.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.FlowDirections.RightToLeft">
      <summary>Right to left. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.FlowDirections.BottomToTop">
      <summary>Bottom to top. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.FlowDirections.Vertical">
      <summary>Vertical. </summary>
    </member>
    <member name="T:System.Windows.Automation.Text.HorizontalTextAlignment">
      <summary>Values for <see cref="F:System.Windows.Automation.TextPattern.HorizontalTextAlignmentAttribute" /></summary>
    </member>
    <member name="F:System.Windows.Automation.Text.HorizontalTextAlignment.Left">
      <summary>Aligned left.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.HorizontalTextAlignment.Centered">
      <summary>Centered.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.HorizontalTextAlignment.Right">
      <summary>Aligned right. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.HorizontalTextAlignment.Justified">
      <summary>Justified. </summary>
    </member>
    <member name="T:System.Windows.Automation.Text.OutlineStyles">
      <summary>Values for <see cref="F:System.Windows.Automation.TextPattern.OutlineStylesAttribute" />. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.OutlineStyles.None">
      <summary>No outline style. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.OutlineStyles.Outline">
      <summary>Outlined. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.OutlineStyles.Shadow">
      <summary>Shadowed.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.OutlineStyles.Engraved">
      <summary>Engraved.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.OutlineStyles.Embossed">
      <summary>Embossed.</summary>
    </member>
    <member name="T:System.Windows.Automation.Text.TextDecorationLineStyle">
      <summary>Values for <see cref="F:System.Windows.Automation.TextPattern.UnderlineStyleAttribute" />.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.None">
      <summary>No text decoration line style.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.Single">
      <summary>Single line.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.WordsOnly">
      <summary>Words only. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.Double">
      <summary>Double line.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.Dot">
      <summary>Dotted line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.Dash">
      <summary>Dashed line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.DashDot">
      <summary>Alternating dash-dot line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.DashDotDot">
      <summary>Alternating dash-dot-dot line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.Wavy">
      <summary>Wavy line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.ThickSingle">
      <summary>Thick single line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.DoubleWavy">
      <summary>Double wavy line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.ThickWavy">
      <summary>Thick wavy line.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.LongDash">
      <summary>Long-dashed line.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.ThickDash">
      <summary>Thick dashed line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.ThickDashDot">
      <summary>Thick alternating dash-dot line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.ThickDashDotDot">
      <summary>Thick alternating dash-dot-dot line.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.ThickDot">
      <summary>Thick dotted line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.ThickLongDash">
      <summary>Thick long-dash line. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextDecorationLineStyle.Other">
      <summary>Another text decoration line style not explicitly specified in the <see cref="T:System.Windows.Automation.Text.TextDecorationLineStyle" /> enumeration. </summary>
    </member>
    <member name="T:System.Windows.Automation.Text.TextPatternRangeEndpoint">
      <summary>Allows the endpoints to be identified when calling methods of <see cref="T:System.Windows.Automation.Text.TextPatternRange" />. Each <see cref="T:System.Windows.Automation.Text.TextPatternRange" /> has two endpoints (<see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start" /> and <see cref="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End" />). </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.Start">
      <summary>Identifies the starting point of the range. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextPatternRangeEndpoint.End">
      <summary> Identifies the ending point of the range. </summary>
    </member>
    <member name="T:System.Windows.Automation.Text.TextUnit">
      <summary>Represents pre-defined units of text for the purposes of navigation within a document. </summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Character">
      <summary>Specifies that the text unit is one character in length.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Format">
      <summary>Specifies that the text unit is the length of a single, common format specification, such as bold, italic, or similar.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Word">
      <summary>Specifies that the text unit is one word in length.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Line">
      <summary>Specifies that the text unit is one line in length.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Paragraph">
      <summary>Specifies that the text unit is one paragraph in length.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Page">
      <summary>Specifies that the text unit is one document-specific page in length.</summary>
    </member>
    <member name="F:System.Windows.Automation.Text.TextUnit.Document">
      <summary>Specifies that the text unit is an entire document in length.</summary>
    </member>
  </members>
</doc>
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\public\ext\sdk\CLR\netfx40rtm\System.XML.xml ===
﻿<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Xml</name>
  </assembly>
  <members>
    <member name="T:System.Xml.ConformanceLevel">
      <summary>Specifies the amount of input or output checking that the created <see cref="T:System.Xml.XmlReader" /> and <see cref="T:System.Xml.XmlWriter" /> objects perform.</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Auto">
      <summary>The <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.Xml.XmlWriter" /> object automatically detects whether document or fragment checking should be performed, and does the appropriate checking. In the case where you are wrapping another <see cref="T:System.Xml.XmlReader" /> or <see cref="T:System.Xml.XmlWriter" /> object, the outer object does not do any additional conformance checking. Conformance checking is left up to the underlying object.</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Fragment">
      <summary>The XML data is a well-formed XML fragment.</summary>
    </member>
    <member name="F:System.Xml.ConformanceLevel.Document">
      <summary>The XML data is in conformance to the rules for a well-formed XML 1.0 document.</summary>
    </member>
    <member name="T:System.Xml.DtdProcessing">
      <summary>Specifies the options for processing DTDs. The <see cref="T:System.Xml.DtdProcessing" /> enumeration is used by <see cref="T:System.Xml.XmlReaderSettings" />.</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Prohibit">
      <summary>Specifies that when a DTD is encountered, an <see cref="T:System.Xml.XmlException" /> is thrown with a message that states that DTDs are prohibited. This is the default behavior.</summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Ignore">
      <summary>Causes the DOCTYPE element to be ignored. No DTD processing occurs. </summary>
    </member>
    <member name="F:System.Xml.DtdProcessing.Parse">
      <summary>Used for parsing DTDs.</summary>
    </member>
    <member name="T:System.Xml.EntityHandling">
      <summary>Specifies how the <see cref="T:System.Xml.XmlTextReader" /> or <see cref="T:System.Xml.XmlValidatingReader" /> handle entities.</summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandEntities">
      <summary>Expands all entities and returns the expanded nodes.</summary>
    </member>
    <member name="F:System.Xml.EntityHandling.ExpandCharEntities">
      <summary>Expands character entities and returns general entities as <see cref="F:System.Xml.XmlNodeType.EntityReference" /> nodes. </summary>
    </member>
    <member name="T:System.Xml.Formatting">
      <summary>Specifies formatting options for the <see cref="T:System.Xml.XmlTextWriter" />.</summary>
    </member>
    <member name="F:System.Xml.Formatting.None">
      <summary>No special formatting is applied. This is the default.</summary>
    </member>
    <member name="F:System.Xml.Formatting.Indented">
      <summary>Causes child elements to be indented according to the <see cref="P:System.Xml.XmlTextWriter.Indentation" /> and <see cref="P:System.Xml.XmlTextWriter.IndentChar" /> settings. </summary>
    </member>
    <member name="T:System.Xml.IHasXmlNode">
      <summary>Enables a class to return an <see cref="T:System.Xml.XmlNode" /> from the current context or position.</summary>
    </member>
    <member name="M:System.Xml.IHasXmlNode.GetNode">
      <summary>Returns the <see cref="T:System.Xml.XmlNode" /> for the current position.</summary>
      <returns>The XmlNode for the current position.</returns>
    </member>
    <member name="T:System.Xml.IXmlLineInfo">
      <summary>Provides an interface to enable a class to return line and position information.</summary>
    </member>
    <member name="M:System.Xml.IXmlLineInfo.HasLineInfo">
      <summary>Gets a value indicating whether the class can return line information.</summary>
      <returns>true if <see cref="P:System.Xml.IXmlLineInfo.LineNumber" /> and <see cref="P:System.Xml.IXmlLineInfo.LinePosition" /> can be provided; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LineNumber">
      <summary>Gets the current line number.</summary>
      <returns>The current line number or 0 if no line information is available (for example, <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> returns false).</returns>
    </member>
    <member name="P:System.Xml.IXmlLineInfo.LinePosition">
      <summary>Gets the current line position.</summary>
      <returns>The current line position or 0 if no line information is available (for example, <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" /> returns false).</returns>
    </member>
    <member name="T:System.Xml.IXmlNamespaceResolver">
      <summary>Provides read-only access to a set of prefix and namespace mappings.</summary>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>Gets a collection of defined prefix-namespace mappings that are currently in scope.</summary>
      <returns>An <see cref="T:System.Collections.IDictionary" /> that contains the current in-scope namespaces.</returns>
      <param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</param>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)">
      <summary>Gets the namespace URI mapped to the specified prefix.</summary>
      <returns>The namespace URI that is mapped to the prefix; null if the prefix is not mapped to a namespace URI.</returns>
      <param name="prefix">The prefix whose namespace URI you wish to find.</param>
    </member>
    <member name="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)">
      <summary>Gets the prefix that is mapped to the specified namespace URI.</summary>
      <returns>The prefix that is mapped to the namespace URI; null if the namespace URI is not mapped to a prefix.</returns>
      <param name="namespaceName">The namespace URI whose prefix you wish to find.</param>
    </member>
    <member name="T:System.Xml.NamespaceHandling">
      <summary>Specifies whether to remove duplicate namespace declarations in the <see cref="T:System.Xml.XmlWriter" />. </summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.Default">
      <summary>Specifies that duplicate namespace declarations will not be removed.</summary>
    </member>
    <member name="F:System.Xml.NamespaceHandling.OmitDuplicates">
      <summary>Specifies that duplicate namespace declarations will be removed. For the duplicate namespace to be removed, the prefix and the namespace must match.</summary>
    </member>
    <member name="T:System.Xml.NameTable">
      <summary>Implements a single-threaded <see cref="T:System.Xml.XmlNameTable" />.</summary>
    </member>
    <member name="M:System.Xml.NameTable.#ctor">
      <summary>Initializes a new instance of the NameTable class.</summary>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>Atomizes the specified string and adds it to the NameTable.</summary>
      <returns>The atomized string or the existing string if one already exists in the NameTable. If <paramref name="len" /> is zero, String.Empty is returned.</returns>
      <param name="key">The character array containing the string to add. </param>
      <param name="start">The zero-based index into the array specifying the first character of the string. </param>
      <param name="len">The number of characters in the string. </param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="start" />-or- <paramref name="start" /> &gt;= <paramref name="key" />.Length -or- <paramref name="len" /> &gt;= <paramref name="key" />.Length The above conditions do not cause an exception to be thrown if <paramref name="len" /> =0. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0. </exception>
    </member>
    <member name="M:System.Xml.NameTable.Add(System.String)">
      <summary>Atomizes the specified string and adds it to the NameTable.</summary>
      <returns>The atomized string or the existing string if it already exists in the NameTable.</returns>
      <param name="key">The string to add. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> is null. </exception>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>Gets the atomized string containing the same characters as the specified range of characters in the given array.</summary>
      <returns>The atomized string or null if the string has not already been atomized. If <paramref name="len" /> is zero, String.Empty is returned.</returns>
      <param name="key">The character array containing the name to find. </param>
      <param name="start">The zero-based index into the array specifying the first character of the name. </param>
      <param name="len">The number of characters in the name. </param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="start" />-or- <paramref name="start" /> &gt;= <paramref name="key" />.Length -or- <paramref name="len" /> &gt;= <paramref name="key" />.Length The above conditions do not cause an exception to be thrown if <paramref name="len" /> =0. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="len" /> &lt; 0. </exception>
    </member>
    <member name="M:System.Xml.NameTable.Get(System.String)">
      <summary>Gets the atomized string with the specified value.</summary>
      <returns>The atomized string object or null if the string has not already been atomized.</returns>
      <param name="value">The name to find. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> is null. </exception>
    </member>
    <member name="T:System.Xml.NewLineHandling">
      <summary>Specifies how to handle line breaks.</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Replace">
      <summary>New line characters are replaced to match the character specified in the <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" />  property.</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.Entitize">
      <summary>New line characters are entitized. This setting preserves all characters when the output is read by a normalizing <see cref="T:System.Xml.XmlReader" />.</summary>
    </member>
    <member name="F:System.Xml.NewLineHandling.None">
      <summary>The new line characters are unchanged. The output is the same as the input.</summary>
    </member>
    <member name="T:System.Xml.ReadState">
      <summary>Specifies the state of the reader.</summary>
    </member>
    <member name="F:System.Xml.ReadState.Initial">
      <summary>The Read method has not been called.</summary>
    </member>
    <member name="F:System.Xml.ReadState.Interactive">
      <summary>The Read method has been called. Additional methods may be called on the reader.</summary>
    </member>
    <member name="F:System.Xml.ReadState.Error">
      <summary>An error occurred that prevents the read operation from continuing.</summary>
    </member>
    <member name="F:System.Xml.ReadState.EndOfFile">
      <summary>The end of the file has been reached successfully.</summary>
    </member>
    <member name="F:System.Xml.ReadState.Closed">
      <summary>The <see cref="M:System.Xml.XmlReader.Close" /> method has been called.</summary>
    </member>
    <member name="T:System.Xml.ValidationType">
      <summary>Specifies the type of validation to perform.</summary>
    </member>
    <member name="F:System.Xml.ValidationType.None">
      <summary>No validation is performed. This setting creates an XML 1.0 compliant non-validating parser.</summary>
    </member>
    <member name="F:System.Xml.ValidationType.Auto">
      <summary>Validates if DTD or schema information is found.</summary>
    </member>
    <member name="F:System.Xml.ValidationType.DTD">
      <summary>Validates according to the DTD.</summary>
    </member>
    <member name="F:System.Xml.ValidationType.XDR">
      <summary>Validate according to XML-Data Reduced (XDR) schemas, including inline XDR schemas. XDR schemas are recognized using the x-schema namespace prefix or the <see cref="P:System.Xml.XmlValidatingReader.Schemas" /> property.</summary>
    </member>
    <member name="F:System.Xml.ValidationType.Schema">
      <summary>Validate according to XML Schema definition language (XSD) schemas, including inline XML Schemas. XML Schemas are associated with namespace URIs either by using the schemaLocation attribute or the provided Schemas property.</summary>
    </member>
    <member name="T:System.Xml.WhitespaceHandling">
      <summary>Specifies how white space is handled.</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.All">
      <summary>Return Whitespace and SignificantWhitespace nodes. This is the default.</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.Significant">
      <summary>Return SignificantWhitespace nodes only.</summary>
    </member>
    <member name="F:System.Xml.WhitespaceHandling.None">
      <summary>Return no Whitespace and no SignificantWhitespace nodes.</summary>
    </member>
    <member name="T:System.Xml.WriteState">
      <summary>Specifies the state of the <see cref="T:System.Xml.XmlWriter" />.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Start">
      <summary>Indicates that a Write method has not yet been called.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Prolog">
      <summary>Indicates that the prolog is being written.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Element">
      <summary>Indicates that an element start tag is being written.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Attribute">
      <summary>Indicates that an attribute value is being written.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Content">
      <summary>Indicates that element content is being written.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Closed">
      <summary>Indicates that the <see cref="M:System.Xml.XmlWriter.Close" /> method has been called.</summary>
    </member>
    <member name="F:System.Xml.WriteState.Error">
      <summary>An exception has been thrown, which has left the <see cref="T:System.Xml.XmlWriter" /> in an invalid state. You can call the <see cref="M:System.Xml.XmlWriter.Close" /> method to put the <see cref="T:System.Xml.XmlWriter" /> in the <see cref="F:System.Xml.WriteState.Closed" /> state. Any other <see cref="T:System.Xml.XmlWriter" /> method calls results in an <see cref="T:System.InvalidOperationException" />.</summary>
    </member>
    <member name="T:System.Xml.XmlAttribute">
      <summary>Represents an attribute. Valid and default values for the attribute are defined in a document type definition (DTD) or schema.</summary>
    </member>
    <member name="M:System.Xml.XmlAttribute.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlAttribute" /> class.</summary>
      <param name="prefix">The namespace prefix.</param>
      <param name="localName">The local name of the attribute.</param>
      <param name="namespaceURI">The namespace uniform resource identifier (URI).</param>
      <param name="doc">The parent XML document.</param>
    </member>
    <member name="M:System.Xml.XmlAttribute.AppendChild(System.Xml.XmlNode)">
      <summary>Adds the specified node to the end of the list of child nodes, of this node.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> added.</returns>
      <param name="newChild">The <see cref="T:System.Xml.XmlNode" /> to add.</param>
      <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.The <paramref name="newChild" /> is an ancestor of this node. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.This node is read-only. </exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.BaseURI">
      <summary>Gets the base Uniform Resource Identifier (URI) of the node.</summary>
      <returns>The location from which the node was loaded or String.Empty if the node has no base URI. Attribute nodes have the same base URI as their owner element. If an attribute node does not have an owner element, BaseURI returns String.Empty.</returns>
    </member>
    <member name="M:System.Xml.XmlAttribute.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The duplicate node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself </param>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerText">
      <summary>Gets or sets the concatenated values of the node and all its children.</summary>
      <returns>The concatenated values of the node and all its children. For attribute nodes, this property has the same functionality as the <see cref="P:System.Xml.XmlAttribute.Value" /> property.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.InnerXml">
      <summary>Gets or sets the value of the attribute.</summary>
      <returns>The attribute value.</returns>
      <exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed. </exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>Inserts the specified node immediately after the specified reference node.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> inserted.</returns>
      <param name="newChild">The <see cref="T:System.Xml.XmlNode" /> to insert. </param>
      <param name="refChild">The <see cref="T:System.Xml.XmlNode" /> that is the reference node. The <paramref name="newChild" /> is placed after the <paramref name="refChild" />.</param>
      <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.The <paramref name="newChild" /> is an ancestor of this node. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.The <paramref name="refChild" /> is not a child of this node.This node is read-only. </exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>Inserts the specified node immediately before the specified reference node.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> inserted.</returns>
      <param name="newChild">The <see cref="T:System.Xml.XmlNode" /> to insert. </param>
      <param name="refChild">The <see cref="T:System.Xml.XmlNode" /> that is the reference node. The <paramref name="newChild" /> is placed before this node. </param>
      <exception cref="T:System.InvalidOperationException">The current node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.The <paramref name="newChild" /> is an ancestor of this node. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.The <paramref name="refChild" /> is not a child of this node.This node is read-only. </exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>The name of the attribute node with the prefix removed. In the following example &lt;book bk:genre= 'novel'&gt;, the LocalName of the attribute is genre.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>The qualified name of the attribute node.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.NamespaceURI">
      <summary>Gets the namespace URI of this node.</summary>
      <returns>The namespace URI of this node. If the attribute is not explicitly given a namespace, this property returns String.Empty.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>The node type for XmlAttribute nodes is XmlNodeType.Attribute.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerDocument">
      <summary>Gets the <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.</summary>
      <returns>An <see cref="T:System.Xml.XmlDocument" />.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.OwnerElement">
      <summary>Gets the <see cref="T:System.Xml.XmlElement" /> to which the attribute belongs.</summary>
      <returns>The XmlElement that the attribute belongs to or null if this attribute is not part of an XmlElement.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.ParentNode">
      <summary>Gets the parent of this node. For XmlAttribute nodes, this property always returns null.</summary>
      <returns>For XmlAttribute nodes, this property always returns null.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Prefix">
      <summary>Gets or sets the namespace prefix of this node.</summary>
      <returns>The namespace prefix of this node. If there is no prefix, this property returns String.Empty.</returns>
      <exception cref="T:System.ArgumentException">This node is read-only. </exception>
      <exception cref="T:System.Xml.XmlException">The specified prefix contains an invalid character.The specified prefix is malformed.The namespaceURI of this node is null.The specified prefix is "xml", and the namespaceURI of this node is different from "http://www.w3.org/XML/1998/namespace".This node is an attribute, the specified prefix is "xmlns", and the namespaceURI of this node is different from "http://www.w3.org/2000/xmlns/".This node is an attribute, and the qualifiedName of this node is "xmlns" [Namespaces]. </exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.PrependChild(System.Xml.XmlNode)">
      <summary>Adds the specified node to the beginning of the list of child nodes for this node.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> added.</returns>
      <param name="newChild">The <see cref="T:System.Xml.XmlNode" /> to add. If it is an <see cref="T:System.Xml.XmlDocumentFragment" />, the entire contents of the document fragment are moved into the child list of this node.</param>
      <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.The <paramref name="newChild" /> is an ancestor of this node. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.This node is read-only. </exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.RemoveChild(System.Xml.XmlNode)">
      <summary>Removes the specified child node.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> removed.</returns>
      <param name="oldChild">The <see cref="T:System.Xml.XmlNode" /> to remove.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="oldChild" /> is not a child of this node. Or this node is read-only. </exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>Replaces the child node specified with the new child node specified.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> replaced.</returns>
      <param name="newChild">The new child <see cref="T:System.Xml.XmlNode" />.</param>
      <param name="oldChild">The <see cref="T:System.Xml.XmlNode" /> to replace. </param>
      <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.The <paramref name="newChild" /> is an ancestor of this node. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.This node is read-only.The <paramref name="oldChild" /> is not a child of this node. </exception>
    </member>
    <member name="P:System.Xml.XmlAttribute.SchemaInfo">
      <summary>Gets the post-schema-validation-infoset that has been assigned to this node as a result of schema validation.</summary>
      <returns>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> containing the post-schema-validation-infoset of this node.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Specified">
      <summary>Gets a value indicating whether the attribute value was explicitly set.</summary>
      <returns>true if this attribute was explicitly given a value in the original instance document; otherwise, false. A value of false indicates that the value of the attribute came from the DTD.</returns>
    </member>
    <member name="P:System.Xml.XmlAttribute.Value">
      <summary>Gets or sets the value of the node.</summary>
      <returns>The value returned depends on the <see cref="P:System.Xml.XmlNode.NodeType" /> of the node. For XmlAttribute nodes, this property is the value of attribute.</returns>
      <exception cref="T:System.ArgumentException">The node is read-only and a set operation is called. </exception>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlAttribute.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlAttributeCollection">
      <summary>Represents a collection of attributes that can be accessed by name or index.</summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Append(System.Xml.XmlAttribute)">
      <summary>Inserts the specified attribute as the last node in the collection.</summary>
      <returns>The XmlAttribute to append to the collection.</returns>
      <param name="node">The <see cref="T:System.Xml.XmlAttribute" /> to insert. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="node" /> was created from a document different from the one that created this collection. </exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)">
      <summary>Copies all the <see cref="T:System.Xml.XmlAttribute" /> objects from this collection into the given array.</summary>
      <param name="array">The array that is the destination of the objects copied from this collection. </param>
      <param name="index">The index in the array where copying begins. </param>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertAfter(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary>Inserts the specified attribute immediately after the specified reference attribute.</summary>
      <returns>The XmlAttribute to insert into the collection.</returns>
      <param name="newNode">The <see cref="T:System.Xml.XmlAttribute" /> to insert. </param>
      <param name="refNode">The <see cref="T:System.Xml.XmlAttribute" /> that is the reference attribute. <paramref name="newNode" /> is placed after the <paramref name="refNode" />. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="newNode" /> was created from a document different from the one that created this collection. Or the <paramref name="refNode" /> is not a member of this collection. </exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.InsertBefore(System.Xml.XmlAttribute,System.Xml.XmlAttribute)">
      <summary>Inserts the specified attribute immediately before the specified reference attribute.</summary>
      <returns>The XmlAttribute to insert into the collection.</returns>
      <param name="newNode">The <see cref="T:System.Xml.XmlAttribute" /> to insert. </param>
      <param name="refNode">The <see cref="T:System.Xml.XmlAttribute" /> that is the reference attribute. <paramref name="newNode" /> is placed before the <paramref name="refNode" />. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="newNode" /> was created from a document different from the one that created this collection. Or the <paramref name="refNode" /> is not a member of this collection. </exception>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.Int32)">
      <summary>Gets the attribute with the specified index.</summary>
      <returns>The <see cref="T:System.Xml.XmlAttribute" /> at the specified index.</returns>
      <param name="i">The index of the attribute. </param>
      <exception cref="T:System.IndexOutOfRangeException">The index being passed in is out of range. </exception>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String)">
      <summary>Gets the attribute with the specified name.</summary>
      <returns>The <see cref="T:System.Xml.XmlAttribute" /> with the specified name. If the attribute does not exist, this property returns null.</returns>
      <param name="name">The qualified name of the attribute. </param>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.ItemOf(System.String,System.String)">
      <summary>Gets the attribute with the specified local name and namespace Uniform Resource Identifier (URI).</summary>
      <returns>The <see cref="T:System.Xml.XmlAttribute" /> with the specified local name and namespace URI. If the attribute does not exist, this property returns null.</returns>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Prepend(System.Xml.XmlAttribute)">
      <summary>Inserts the specified attribute as the first node in the collection.</summary>
      <returns>The XmlAttribute added to the collection.</returns>
      <param name="node">The <see cref="T:System.Xml.XmlAttribute" /> to insert. </param>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.Remove(System.Xml.XmlAttribute)">
      <summary>Removes the specified attribute from the collection.</summary>
      <returns>The node removed or null if it is not found in the collection.</returns>
      <param name="node">The <see cref="T:System.Xml.XmlAttribute" /> to remove. </param>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAll">
      <summary>Removes all attributes from the collection.</summary>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.RemoveAt(System.Int32)">
      <summary>Removes the attribute corresponding to the specified index from the collection.</summary>
      <returns>Returns null if there is no attribute at the specified index.</returns>
      <param name="i">The index of the node to remove. The first node has index 0. </param>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.SetNamedItem(System.Xml.XmlNode)">
      <summary>Adds a <see cref="T:System.Xml.XmlNode" /> using its <see cref="P:System.Xml.XmlNode.Name" /> property </summary>
      <returns>If the <paramref name="node" /> replaces an existing node with the same name, the old node is returned; otherwise, the added node is returned.</returns>
      <param name="node">An attribute node to store in this collection. The node will later be accessible using the name of the node. If a node with that name is already present in the collection, it is replaced by the new one; otherwise, the node is appended to the end of the collection. </param>
      <exception cref="T:System.ArgumentException">
        <paramref name="node" /> was created from a different <see cref="T:System.Xml.XmlDocument" /> than the one that created this collection.This XmlAttributeCollection is read-only. </exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="node" /> is an <see cref="T:System.Xml.XmlAttribute" /> that is already an attribute of another <see cref="T:System.Xml.XmlElement" /> object. To re-use attributes in other elements, you must clone the XmlAttribute objects you want to re-use. </exception>
    </member>
    <member name="M:System.Xml.XmlAttributeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>For a description of this member, see <see cref="M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)" />.</summary>
      <param name="array">The array that is the destination of the objects copied from this collection. </param>
      <param name="index">The index in the array where copying begins. </param>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count">
      <summary>For a description of this member, see <see cref="P:System.Xml.XmlAttributeCollection.System.Collections.ICollection.Count" />.</summary>
      <returns>Returns an int that contains the count of the attributes.</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary>For a description of this member, see <see cref="P:System.Xml.XmlAttributeCollection.System.Collections.ICollection.IsSynchronized" />.</summary>
      <returns>Returns true if the collection is synchronized.</returns>
    </member>
    <member name="P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary>For a description of this member, see <see cref="P:System.Xml.XmlAttributeCollection.System.Collections.ICollection.SyncRoot" />.</summary>
      <returns>Returns the <see cref="T:System.Object" /> that is the root of the collection.</returns>
    </member>
    <member name="T:System.Xml.XmlCDataSection">
      <summary>Represents a CDATA section.</summary>
    </member>
    <member name="M:System.Xml.XmlCDataSection.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlCDataSection" /> class.</summary>
      <param name="data">
        <see cref="T:System.String" /> that contains character data.</param>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" /> object.</param>
    </member>
    <member name="M:System.Xml.XmlCDataSection.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. Because CDATA nodes do not have children, regardless of the parameter setting, the cloned node will always include the data content. </param>
    </member>
    <member name="P:System.Xml.XmlCDataSection.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For CDATA nodes, the local name is #cdata-section.</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>For CDATA nodes, the name is #cdata-section.</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>The node type. For CDATA nodes, the value is XmlNodeType.CDATA.</returns>
    </member>
    <member name="P:System.Xml.XmlCDataSection.ParentNode"></member>
    <member name="M:System.Xml.XmlCDataSection.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlCDataSection.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlCharacterData">
      <summary>Provides text manipulation methods that are used by several classes.</summary>
    </member>
    <member name="M:System.Xml.XmlCharacterData.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlCharacterData" /> class.</summary>
      <param name="data">String that contains character data to be added to document.</param>
      <param name="doc">
        <see cref="T:System.Xml.XmlDocument" /> to contain character data.</param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.AppendData(System.String)">
      <summary>Appends the specified string to the end of the character data of the node.</summary>
      <param name="strData">The string to insert into the existing string. </param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Data">
      <summary>Contains the data of the node.</summary>
      <returns>The data of the node.</returns>
    </member>
    <member name="M:System.Xml.XmlCharacterData.DeleteData(System.Int32,System.Int32)">
      <summary>Removes a range of characters from the node.</summary>
      <param name="offset">The position within the string to start deleting. </param>
      <param name="count">The number of characters to delete. </param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.InnerText">
      <summary>Gets or sets the concatenated values of the node and all the children of the node.</summary>
      <returns>The concatenated values of the node and all the children of the node.</returns>
    </member>
    <member name="M:System.Xml.XmlCharacterData.InsertData(System.Int32,System.String)">
      <summary>Inserts the specified string at the specified character offset.</summary>
      <param name="offset">The position within the string to insert the supplied string data. </param>
      <param name="strData">The string data that is to be inserted into the existing string. </param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Length">
      <summary>Gets the length of the data, in characters.</summary>
      <returns>The length, in characters, of the string in the <see cref="P:System.Xml.XmlCharacterData.Data" /> property. The length may be zero; that is, CharacterData nodes can be empty.</returns>
    </member>
    <member name="M:System.Xml.XmlCharacterData.ReplaceData(System.Int32,System.Int32,System.String)">
      <summary>Replaces the specified number of characters starting at the specified offset with the specified string.</summary>
      <param name="offset">The position within the string to start replacing. </param>
      <param name="count">The number of characters to replace. </param>
      <param name="strData">The new data that replaces the old string data. </param>
    </member>
    <member name="M:System.Xml.XmlCharacterData.Substring(System.Int32,System.Int32)">
      <summary>Retrieves a substring of the full string from the specified range.</summary>
      <returns>The substring corresponding to the specified range.</returns>
      <param name="offset">The position within the string to start retrieving. An offset of zero indicates the starting point is at the start of the data. </param>
      <param name="count">The number of characters to retrieve. </param>
    </member>
    <member name="P:System.Xml.XmlCharacterData.Value">
      <summary>Gets or sets the value of the node.</summary>
      <returns>The value of the node.</returns>
      <exception cref="T:System.ArgumentException">Node is read-only. </exception>
    </member>
    <member name="T:System.Xml.XmlComment">
      <summary>Represents the content of an XML comment.</summary>
    </member>
    <member name="M:System.Xml.XmlComment.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlComment" /> class.</summary>
      <param name="comment">The content of the comment element.</param>
      <param name="doc">The parent XML document.</param>
    </member>
    <member name="M:System.Xml.XmlComment.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. Because comment nodes do not have children, the cloned node always includes the text content, regardless of the parameter setting. </param>
    </member>
    <member name="P:System.Xml.XmlComment.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For comment nodes, the value is #comment.</returns>
    </member>
    <member name="P:System.Xml.XmlComment.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>For comment nodes, the value is #comment.</returns>
    </member>
    <member name="P:System.Xml.XmlComment.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>For comment nodes, the value is XmlNodeType.Comment.</returns>
    </member>
    <member name="M:System.Xml.XmlComment.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />. Because comment nodes do not have children, this method has no effect.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlComment.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlConvert">
      <summary>Encodes and decodes XML names and provides methods for converting between common language runtime types and XML Schema definition language (XSD) types. When converting data types the values returned are locale independent.</summary>
    </member>
    <member name="M:System.Xml.XmlConvert.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlConvert" /> class. </summary>
    </member>
    <member name="M:System.Xml.XmlConvert.DecodeName(System.String)">
      <summary>Decodes a name. This method does the reverse of the <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" /> and <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" /> methods.</summary>
      <returns>The decoded name.</returns>
      <param name="name">The name to be transformed. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeLocalName(System.String)">
      <summary>Converts the name to a valid XML local name.</summary>
      <returns>The encoded name.</returns>
      <param name="name">The name to be encoded. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeName(System.String)">
      <summary>Converts the name to a valid XML name.</summary>
      <returns>Returns the name with any invalid characters replaced by an escape string.</returns>
      <param name="name">A name to be translated. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.EncodeNmToken(System.String)">
      <summary>Verifies the name is valid according to the XML specification.</summary>
      <returns>The encoded name.</returns>
      <param name="name">The name to be encoded. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsNCNameChar(System.Char)">
      <summary>Checks whether the passed-in character is a valid non-colon character type.</summary>
      <returns>Returns true if the character is a valid non-colon character type; otherwise, false.</returns>
      <param name="ch">The character to verify as a non-colon character.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsPublicIdChar(System.Char)">
      <summary>Returns the passed-in character instance if the character in the argument is a valid public id character, otherwise null.</summary>
      <returns>Returns the passed-in character if the character is a valid public id character, otherwise null.</returns>
      <param name="ch">
        <see cref="T:System.Char" /> object to validate.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsStartNCNameChar(System.Char)">
      <summary>Checks if the passed-in character is a valid Start Name Character type.</summary>
      <returns>true if the character is a valid Start Name Character type; otherwise, false. </returns>
      <param name="ch">The character to validate.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsWhitespaceChar(System.Char)">
      <summary>Checks if the passed-in character is a valid XML whitespace character.</summary>
      <returns>true if the passed in character is a valid XML whitespace character; otherwise false.</returns>
      <param name="ch">The character to validate.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlChar(System.Char)">
      <summary>Checks if the passed-in character is a valid XML character.</summary>
      <returns>true if the passed in character is a valid XML character; otherwise false.</returns>
      <param name="ch">The character to validate.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.IsXmlSurrogatePair(System.Char,System.Char)">
      <summary>Checks if the passed-in surrogate pair of characters is a valid XML character.</summary>
      <returns>true if the passed in surrogate pair of characters is a valid XML character; otherwise false.</returns>
      <param name="lowChar">The surrogate character to validate.</param>
      <param name="highChar">The surrogate character to validate.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToBoolean(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Boolean" /> equivalent.</summary>
      <returns>A Boolean value, that is, true or false.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> does not represent a Boolean value. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToByte(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Byte" /> equivalent.</summary>
      <returns>A Byte equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Byte.MinValue" /> or greater than <see cref="F:System.Byte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToChar(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Char" /> equivalent.</summary>
      <returns>A Char representing the single character.</returns>
      <param name="s">The string containing a single character to convert. </param>
      <exception cref="T:System.ArgumentNullException">The value of the <paramref name="s" /> parameter is null. </exception>
      <exception cref="T:System.FormatException">The <paramref name="s" /> parameter contains more than one character. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> equivalent.</summary>
      <returns>A DateTime equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is an empty string or is not in the correct format. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> equivalent.</summary>
      <returns>A DateTime equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <param name="format">The format structure to apply to the converted DateTime. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. The string is validated against this format. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or <paramref name="format" /> is String.Empty -or- <paramref name="s" /> does not contain a date and time that corresponds to <paramref name="format" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.String[])">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> equivalent.</summary>
      <returns>A DateTime equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <param name="formats">An array containing the format structures to apply to the converted DateTime. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or an element of <paramref name="formats" /> is String.Empty -or- <paramref name="s" /> does not contain a date and time that corresponds to any of the elements of <paramref name="formats" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTime(System.String,System.Xml.XmlDateTimeSerializationMode)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.DateTime" /> using the <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> specified</summary>
      <returns>A <see cref="T:System.DateTime" /> equivalent of the <see cref="T:System.String" />.</returns>
      <param name="s">The <see cref="T:System.String" /> value to convert.</param>
      <param name="dateTimeOption">One of the <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> values that specify whether the date should be converted to local time or preserved as Coordinated Universal Time (UTC), if it is a UTC date.</param>
      <exception cref="T:System.NullReferenceException">
        <paramref name="s" /> is null.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="dateTimeOption" /> value is null.</exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is an empty string or is not in a valid format.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String)">
      <summary>Converts the supplied <see cref="T:System.String" /> to a <see cref="T:System.DateTimeOffset" /> equivalent.</summary>
      <returns>The <see cref="T:System.DateTimeOffset" /> equivalent of the supplied string.</returns>
      <param name="s">The string to convert.NoteThe string must conform to a subset of the W3C Recommendation for the XML dateTime type. For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">The argument passed to this method is outside the range of allowable values. For information about allowable values, see <see cref="T:System.DateTimeOffset" />.</exception>
      <exception cref="T:System.FormatException">The argument passed to this method does not conform to a subset of the W3C Recommendations for the XML dateTime type. For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String)">
      <summary>Converts the supplied <see cref="T:System.String" /> to a <see cref="T:System.DateTimeOffset" /> equivalent.</summary>
      <returns>The <see cref="T:System.DateTimeOffset" /> equivalent of the supplied string.</returns>
      <param name="s">The string to convert.</param>
      <param name="format">The format from which <paramref name="s" /> is converted. The format parameter can be any subset of the W3C Recommendation for the XML dateTime type. (For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.) The string <paramref name="s" /> is validated against this format.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> or <paramref name="format" /> is an empty string or is not in the specified format.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDateTimeOffset(System.String,System.String[])">
      <summary>Converts the supplied <see cref="T:System.String" /> to a <see cref="T:System.DateTimeOffset" /> equivalent.</summary>
      <returns>The <see cref="T:System.DateTimeOffset" /> equivalent of the supplied string.</returns>
      <param name="s">The string to convert.</param>
      <param name="formats">An array of formats from which <paramref name="s" /> can be converted. Each format in <paramref name="formats" /> can be any subset of the W3C Recommendation for the XML dateTime type. (For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.) The string <paramref name="s" /> is validated against one of these formats.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDecimal(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Decimal" /> equivalent.</summary>
      <returns>A Decimal equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Decimal.MinValue" /> or greater than <see cref="F:System.Decimal.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToDouble(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Double" /> equivalent.</summary>
      <returns>A Double equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Double.MinValue" /> or greater than <see cref="F:System.Double.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToGuid(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Guid" /> equivalent.</summary>
      <returns>A Guid equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt16(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int16" /> equivalent.</summary>
      <returns>An Int16 equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int16.MinValue" /> or greater than <see cref="F:System.Int16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt32(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int32" /> equivalent.</summary>
      <returns>An Int32 equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int32.MinValue" /> or greater than <see cref="F:System.Int32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToInt64(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Int64" /> equivalent.</summary>
      <returns>An Int64 equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Int64.MinValue" /> or greater than <see cref="F:System.Int64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSByte(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.SByte" /> equivalent.</summary>
      <returns>An SByte equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.SByte.MinValue" /> or greater than <see cref="F:System.SByte.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToSingle(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.Single" /> equivalent.</summary>
      <returns>A Single equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.Single.MinValue" /> or greater than <see cref="F:System.Single.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Boolean)">
      <summary>Converts the <see cref="T:System.Boolean" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Boolean, that is, "true" or "false".</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Byte)">
      <summary>Converts the <see cref="T:System.Byte" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Byte.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Char)">
      <summary>Converts the <see cref="T:System.Char" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Char.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime)">
      <summary>Converts the <see cref="T:System.DateTime" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the DateTime in the format yyyy-MM-ddTHH:mm:ss where 'T' is a constant literal.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.String)">
      <summary>Converts the <see cref="T:System.DateTime" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the DateTime in the specified format.</returns>
      <param name="value">The value to convert. </param>
      <param name="format">The format structure that defines how to display the converted string. Valid formats include "yyyy-MM-ddTHH:mm:sszzzzzz" and its subsets. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTime,System.Xml.XmlDateTimeSerializationMode)">
      <summary>Converts the <see cref="T:System.DateTime" /> to a <see cref="T:System.String" /> using the <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> specified.</summary>
      <returns>A <see cref="T:System.String" /> equivalent of the <see cref="T:System.DateTime" />.</returns>
      <param name="value">The <see cref="T:System.DateTime" /> value to convert.</param>
      <param name="dateTimeOption">One of the <see cref="T:System.Xml.XmlDateTimeSerializationMode" /> values that specify how to treat the <see cref="T:System.DateTime" /> value.</param>
      <exception cref="T:System.ArgumentException">The <paramref name="dateTimeOption" /> value is not valid.</exception>
      <exception cref="T:System.ArgumentNullException">The <paramref name="value" /> or <paramref name="dateTimeOption" /> value is null.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset)">
      <summary>Converts the supplied <see cref="T:System.DateTimeOffset" /> to a <see cref="T:System.String" />.</summary>
      <returns>A <see cref="T:System.String" /> representation of the supplied <see cref="T:System.DateTimeOffset" />.</returns>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> to be converted.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.DateTimeOffset,System.String)">
      <summary>Converts the supplied <see cref="T:System.DateTimeOffset" /> to a <see cref="T:System.String" /> in the specified format.</summary>
      <returns>A <see cref="T:System.String" /> representation in the specified format of the supplied <see cref="T:System.DateTimeOffset" />.</returns>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> to be converted.</param>
      <param name="format">The format to which <paramref name="s" /> is converted. The format parameter can be any subset of the W3C Recommendation for the XML dateTime type. (For more information see http://www.w3.org/TR/xmlschema-2/#dateTime.)</param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Decimal)">
      <summary>Converts the <see cref="T:System.Decimal" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Decimal.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Double)">
      <summary>Converts the <see cref="T:System.Double" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Double.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Guid)">
      <summary>Converts the <see cref="T:System.Guid" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Guid.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int16)">
      <summary>Converts the <see cref="T:System.Int16" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Int16.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int32)">
      <summary>Converts the <see cref="T:System.Int32" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Int32.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Int64)">
      <summary>Converts the <see cref="T:System.Int64" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Int64.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.SByte)">
      <summary>Converts the <see cref="T:System.SByte" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the SByte.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.Single)">
      <summary>Converts the <see cref="T:System.Single" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the Single.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.TimeSpan)">
      <summary>Converts the <see cref="T:System.TimeSpan" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the TimeSpan.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt16)">
      <summary>Converts the <see cref="T:System.UInt16" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the UInt16.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt32)">
      <summary>Converts the <see cref="T:System.UInt32" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the UInt32.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToString(System.UInt64)">
      <summary>Converts the <see cref="T:System.UInt64" /> to a <see cref="T:System.String" />.</summary>
      <returns>A string representation of the UInt64.</returns>
      <param name="value">The value to convert. </param>
    </member>
    <member name="M:System.Xml.XmlConvert.ToTimeSpan(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.TimeSpan" /> equivalent.</summary>
      <returns>A TimeSpan equivalent of the string.</returns>
      <param name="s">The string to convert. The string format must conform to the W3C XML Schema Part 2: Datatypes recommendation for duration.</param>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in correct format to represent a TimeSpan value. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt16(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt16" /> equivalent.</summary>
      <returns>A UInt16 equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt16.MinValue" /> or greater than <see cref="F:System.UInt16.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt32(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt32" /> equivalent.</summary>
      <returns>A UInt32 equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt32.MinValue" /> or greater than <see cref="F:System.UInt32.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.ToUInt64(System.String)">
      <summary>Converts the <see cref="T:System.String" /> to a <see cref="T:System.UInt64" /> equivalent.</summary>
      <returns>A UInt64 equivalent of the string.</returns>
      <param name="s">The string to convert. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="s" /> is null. </exception>
      <exception cref="T:System.FormatException">
        <paramref name="s" /> is not in the correct format. </exception>
      <exception cref="T:System.OverflowException">
        <paramref name="s" /> represents a number less than <see cref="F:System.UInt64.MinValue" /> or greater than <see cref="F:System.UInt64.MaxValue" />. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyName(System.String)">
      <summary>Verifies that the name is a valid name according to the W3C Extended Markup Language recommendation.</summary>
      <returns>The name, if it is a valid XML name.</returns>
      <param name="name">The name to verify. </param>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> is not a valid XML name. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null or String.Empty. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNCName(System.String)">
      <summary>Verifies that the name is a valid NCName according to the W3C Extended Markup Language recommendation. An NCName is a name that cannot contain a colon.</summary>
      <returns>The name, if it is a valid NCName.</returns>
      <param name="name">The name to verify. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null or String.Empty. </exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="name" /> is not a valid non-colon name. </exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyNMTOKEN(System.String)">
      <summary>Verifies that the string is a valid NMTOKEN according to the W3C XML Schema Part2: Datatypes recommendation</summary>
      <returns>The name token, if it is a valid NMTOKEN.</returns>
      <param name="name">The string you wish to verify.</param>
      <exception cref="T:System.Xml.XmlException">The string is not a valid name token.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyPublicId(System.String)">
      <summary>Returns the passed in string instance if all the characters in the string argument are valid public id characters.</summary>
      <returns>Returns the passed-in string if all the characters in the argument are valid public id characters.</returns>
      <param name="publicId">
        <see cref="T:System.String" /> that contains the id to validate.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyTOKEN(System.String)">
      <summary>Verifies that the string is a valid token according to the W3C XML Schema Part2: Datatypes recommendation.</summary>
      <returns>The token, if it is a valid token.</returns>
      <param name="token">The string value you wish to verify.</param>
      <exception cref="T:System.Xml.XmlException">The string value is not a valid token.</exception>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyWhitespace(System.String)">
      <summary>Returns the passed-in string instance if all the characters in the string argument are valid whitespace characters. </summary>
      <returns>Returns the passed-in string instance if all the characters in the string argument are valid whitespace characters, otherwise null.</returns>
      <param name="content">
        <see cref="T:System.String" /> to verify.</param>
    </member>
    <member name="M:System.Xml.XmlConvert.VerifyXmlChars(System.String)">
      <summary>Returns the passed-in string if all the characters and surrogate pair characters in the string argument are valid XML characters, otherwise null. </summary>
      <returns>Returns the passed-in string if all the characters and surrogate-pair characters in the string argument are valid XML characters, otherwise null.</returns>
      <param name="content">
        <see cref="T:System.String" /> that contains characters to verify.</param>
    </member>
    <member name="T:System.Xml.XmlDateTimeSerializationMode">
      <summary>Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime" />.</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Local">
      <summary>Treat as local time. If the <see cref="T:System.DateTime" /> object represents a Coordinated Universal Time (UTC), it is converted to the local time.</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Utc">
      <summary>Treat as a UTC. If the <see cref="T:System.DateTime" /> object represents a local time, it is converted to a UTC.</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.Unspecified">
      <summary>Treat as a local time if a <see cref="T:System.DateTime" /> is being converted to a string.</summary>
    </member>
    <member name="F:System.Xml.XmlDateTimeSerializationMode.RoundtripKind">
      <summary>Time zone information should be preserved when converting.</summary>
    </member>
    <member name="T:System.Xml.XmlDeclaration">
      <summary>Represents the XML declaration node &lt;?xml version='1.0'...?&gt;.</summary>
    </member>
    <member name="M:System.Xml.XmlDeclaration.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlDeclaration" /> class.</summary>
      <param name="version">The XML version; see the <see cref="P:System.Xml.XmlDeclaration.Version" /> property.</param>
      <param name="encoding">The encoding scheme; see the <see cref="P:System.Xml.XmlDeclaration.Encoding" /> property.</param>
      <param name="standalone">Indicates whether the XML document depends on an external DTD; see the <see cref="P:System.Xml.XmlDeclaration.Standalone" /> property.</param>
      <param name="doc">The parent XML document.</param>
    </member>
    <member name="M:System.Xml.XmlDeclaration.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. Because XmlDeclaration nodes do not have children, the cloned node always includes the data value, regardless of the parameter setting. </param>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Encoding">
      <summary>Gets or sets the encoding level of the XML document.</summary>
      <returns>The valid character encoding name. The most commonly supported character encoding names for XML are the following: Category Encoding Names Unicode UTF-8, UTF-16 ISO 10646 ISO-10646-UCS-2, ISO-10646-UCS-4 ISO 8859 ISO-8859-n (where "n" is a digit from 1 to 9) JIS X-0208-1997 ISO-2022-JP, Shift_JIS, EUC-JP This value is optional. If a value is not set, this property returns String.Empty.If an encoding attribute is not included, UTF-8 encoding is assumed when the document is written or saved out.</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.InnerText">
      <summary>Gets or sets the concatenated values of the XmlDeclaration.</summary>
      <returns>The concatenated values of the XmlDeclaration (that is, everything between &lt;?xml and ?&gt;).</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For XmlDeclaration nodes, the local name is xml.</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>For XmlDeclaration nodes, the name is xml.</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>For XmlDeclaration nodes, this value is XmlNodeType.XmlDeclaration.</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Standalone">
      <summary>Gets or sets the value of the standalone attribute.</summary>
      <returns>Valid values are yes if all entity declarations required by the XML document are contained within the document or no if an external document type definition (DTD) is required. If a standalone attribute is not present in the XML declaration, this property returns String.Empty.</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Value">
      <summary>Gets or sets the value of the XmlDeclaration.</summary>
      <returns>The contents of the XmlDeclaration (that is, everything between &lt;?xml and ?&gt;).</returns>
    </member>
    <member name="P:System.Xml.XmlDeclaration.Version">
      <summary>Gets the XML version of the document.</summary>
      <returns>The value is always 1.0.</returns>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />. Because XmlDeclaration nodes do not have children, this method has no effect.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlDeclaration.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlDocument">
      <summary>Represents an XML document.</summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlDocument" /> class.</summary>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)">
      <summary>Initializes a new instance of the XmlDocument class with the specified <see cref="T:System.Xml.XmlImplementation" />.</summary>
      <param name="imp">The XmlImplementation to use. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the XmlDocument class with the specified <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <param name="nt">The XmlNameTable to use. </param>
    </member>
    <member name="P:System.Xml.XmlDocument.BaseURI">
      <summary>Gets the base URI of the current node.</summary>
      <returns>The location from which the node was loaded.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned XmlDocument node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlAttribute" /> with the specified <see cref="P:System.Xml.XmlDocument.Name" />.</summary>
      <returns>The new XmlAttribute.</returns>
      <param name="name">The qualified name of the attribute. If the name contains a colon, the <see cref="P:System.Xml.XmlNode.Prefix" /> property reflects the part of the name preceding the first colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property reflects the part of the name following the first colon. The <see cref="P:System.Xml.XmlNode.NamespaceURI" /> remains empty unless the prefix is a recognized built-in prefix such as xmlns. In this case NamespaceURI has a value of http://www.w3.org/2000/xmlns/. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlAttribute" /> with the specified qualified name and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>The new XmlAttribute.</returns>
      <param name="qualifiedName">The qualified name of the attribute. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix" /> property will reflect the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property will reflect the part of the name after the colon. </param>
      <param name="namespaceURI">The namespaceURI of the attribute. If the qualified name includes a prefix of xmlns, then this parameter must be http://www.w3.org/2000/xmlns/. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlAttribute" /> with the specified <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.LocalName" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>The new XmlAttribute.</returns>
      <param name="prefix">The prefix of the attribute (if any). String.Empty and null are equivalent. </param>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute (if any). String.Empty and null are equivalent. If <paramref name="prefix" /> is xmlns, then this parameter must be http://www.w3.org/2000/xmlns/; otherwise an exception is thrown. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateCDataSection(System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlCDataSection" /> containing the specified data.</summary>
      <returns>The new XmlCDataSection.</returns>
      <param name="data">The content of the new XmlCDataSection. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateComment(System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlComment" /> containing the specified data.</summary>
      <returns>The new XmlComment.</returns>
      <param name="data">The content of the new XmlComment. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDefaultAttribute(System.String,System.String,System.String)">
      <summary>Creates a default attribute with the specified prefix, local name and namespace URI.</summary>
      <returns>The new <see cref="T:System.Xml.XmlAttribute" />.</returns>
      <param name="prefix">The prefix of the attribute (if any). </param>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute (if any). </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentFragment">
      <summary>Creates an <see cref="T:System.Xml.XmlDocumentFragment" />.</summary>
      <returns>The new XmlDocumentFragment.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateDocumentType(System.String,System.String,System.String,System.String)">
      <summary>Returns a new <see cref="T:System.Xml.XmlDocumentType" /> object.</summary>
      <returns>The new XmlDocumentType.</returns>
      <param name="name">Name of the document type. </param>
      <param name="publicId">The public identifier of the document type or null. You can specify a public URI and also a system identifier to identify the location of the external DTD subset.</param>
      <param name="systemId">The system identifier of the document type or null. Specifies the URL of the file location for the external DTD subset.</param>
      <param name="internalSubset">The DTD internal subset of the document type or null. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String)">
      <summary>Creates an element with the specified name.</summary>
      <returns>The new XmlElement.</returns>
      <param name="name">The qualified name of the element. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix" /> property reflects the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property reflects the part of the name after the colon. The qualified name cannot include a prefix of'xmlns'. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlElement" /> with the qualified name and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>The new XmlElement.</returns>
      <param name="qualifiedName">The qualified name of the element. If the name contains a colon then the <see cref="P:System.Xml.XmlNode.Prefix" /> property will reflect the part of the name preceding the colon and the <see cref="P:System.Xml.XmlDocument.LocalName" /> property will reflect the part of the name after the colon. The qualified name cannot include a prefix of'xmlns'. </param>
      <param name="namespaceURI">The namespace URI of the element. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)">
      <summary>Creates an element with the specified <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.LocalName" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>The new <see cref="T:System.Xml.XmlElement" />.</returns>
      <param name="prefix">The prefix of the new element (if any). String.Empty and null are equivalent. </param>
      <param name="localName">The local name of the new element. </param>
      <param name="namespaceURI">The namespace URI of the new element (if any). String.Empty and null are equivalent. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateEntityReference(System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlEntityReference" /> with the specified name.</summary>
      <returns>The new XmlEntityReference.</returns>
      <param name="name">The name of the entity reference. </param>
      <exception cref="T:System.ArgumentException">The name is invalid (for example, names starting with'#' are invalid.) </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNavigator">
      <summary>Creates a new <see cref="T:System.Xml.XPath.XPathNavigator" /> object for navigating this document.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNavigator(System.Xml.XmlNode)">
      <summary>Creates an <see cref="T:System.Xml.XPath.XPathNavigator" /> object for navigating this document positioned on the <see cref="T:System.Xml.XmlNode" /> specified.</summary>
      <returns>An <see cref="T:System.Xml.XPath.XPathNavigator" /> object.</returns>
      <param name="node">The <see cref="T:System.Xml.XmlNode" /> you want the navigator initially positioned on. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlNode" /> with the specified node type, <see cref="P:System.Xml.XmlDocument.Name" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>The new XmlNode.</returns>
      <param name="nodeTypeString">String version of the <see cref="T:System.Xml.XmlNodeType" /> of the new node. This parameter must be one of the values listed in the table below. </param>
      <param name="name">The qualified name of the new node. If the name contains a colon, it is parsed into <see cref="P:System.Xml.XmlNode.Prefix" /> and <see cref="P:System.Xml.XmlDocument.LocalName" /> components. </param>
      <param name="namespaceURI">The namespace URI of the new node. </param>
      <exception cref="T:System.ArgumentException">The name was not provided and the XmlNodeType requires a name; or <paramref name="nodeTypeString" /> is not one of the strings listed below. </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlNode" /> with the specified <see cref="T:System.Xml.XmlNodeType" />, <see cref="P:System.Xml.XmlDocument.Name" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>The new XmlNode.</returns>
      <param name="type">The XmlNodeType of the new node. </param>
      <param name="name">The qualified name of the new node. If the name contains a colon then it is parsed into <see cref="P:System.Xml.XmlNode.Prefix" /> and <see cref="P:System.Xml.XmlDocument.LocalName" /> components. </param>
      <param name="namespaceURI">The namespace URI of the new node. </param>
      <exception cref="T:System.ArgumentException">The name was not provided and the XmlNodeType requires a name. </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)">
      <summary>Creates a <see cref="T:System.Xml.XmlNode" /> with the specified <see cref="T:System.Xml.XmlNodeType" />, <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.Name" />, and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>The new XmlNode.</returns>
      <param name="type">The XmlNodeType of the new node. </param>
      <param name="prefix">The prefix of the new node. </param>
      <param name="name">The local name of the new node. </param>
      <param name="namespaceURI">The namespace URI of the new node. </param>
      <exception cref="T:System.ArgumentException">The name was not provided and the XmlNodeType requires a name. </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlProcessingInstruction" /> with the specified name and data.</summary>
      <returns>The new XmlProcessingInstruction.</returns>
      <param name="target">The name of the processing instruction. </param>
      <param name="data">The data for the processing instruction. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlSignificantWhitespace" /> node.</summary>
      <returns>A new XmlSignificantWhitespace node.</returns>
      <param name="text">The string must contain only the following characters &amp;#20; &amp;#10; &amp;#13; and &amp;#9; </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateTextNode(System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlText" /> with the specified text.</summary>
      <returns>The new XmlText node.</returns>
      <param name="text">The text for the Text node. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateWhitespace(System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlWhitespace" /> node.</summary>
      <returns>A new XmlWhitespace node.</returns>
      <param name="text">The string must contain only the following characters &amp;#20; &amp;#10; &amp;#13; and &amp;#9; </param>
    </member>
    <member name="M:System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)">
      <summary>Creates an <see cref="T:System.Xml.XmlDeclaration" /> node with the specified values.</summary>
      <returns>The new XmlDeclaration node.</returns>
      <param name="version">The version must be "1.0". </param>
      <param name="encoding">The value of the encoding attribute. This is the encoding that is used when you save the <see cref="T:System.Xml.XmlDocument" /> to a file or a stream; therefore, it must be set to a string supported by the <see cref="T:System.Text.Encoding" /> class, otherwise <see cref="M:System.Xml.XmlDocument.Save(System.String)" /> fails. If this is null or String.Empty, the Save method does not write an encoding attribute on the XML declaration and therefore the default encoding, UTF-8, is used.Note: If the XmlDocument is saved to either a <see cref="T:System.IO.TextWriter" /> or an <see cref="T:System.Xml.XmlTextWriter" />, this encoding value is discarded. Instead, the encoding of the TextWriter or the XmlTextWriter is used. This ensures that the XML written out can be read back using the correct encoding. </param>
      <param name="standalone">The value must be either "yes" or "no". If this is null or String.Empty, the Save method does not write a standalone attribute on the XML declaration. </param>
      <exception cref="T:System.ArgumentException">The values of <paramref name="version" /> or <paramref name="standalone" /> are something other than the ones specified above. </exception>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentElement">
      <summary>Gets the root <see cref="T:System.Xml.XmlElement" /> for the document.</summary>
      <returns>The XmlElement that represents the root of the XML document tree. If no root exists, null is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.DocumentType">
      <summary>Gets the node containing the DOCTYPE declaration.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> containing the DocumentType (DOCTYPE declaration).</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementById(System.String)">
      <summary>Gets the <see cref="T:System.Xml.XmlElement" /> with the specified ID.</summary>
      <returns>The XmlElement with the matching ID or null if no matching element is found.</returns>
      <param name="elementId">The attribute ID to match. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String)">
      <summary>Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant elements that match the specified <see cref="P:System.Xml.XmlDocument.Name" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes. If no nodes match <paramref name="name" />, the returned collection will be empty.</returns>
      <param name="name">The qualified name to match. It is matched against the Name property of the matching node. The special value "*" matches all tags. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)">
      <summary>Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant elements that match the specified <see cref="P:System.Xml.XmlDocument.LocalName" /> and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes. If no nodes match the specified <paramref name="localName" /> and <paramref name="namespaceURI" />, the returned collection will be empty.</returns>
      <param name="localName">The LocalName to match. The special value "*" matches all tags. </param>
      <param name="namespaceURI">NamespaceURI to match. </param>
    </member>
    <member name="P:System.Xml.XmlDocument.Implementation">
      <summary>Gets the <see cref="T:System.Xml.XmlImplementation" /> object for the current document.</summary>
      <returns>The XmlImplementation object for the current document.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)">
      <summary>Imports a node from another document to the current document.</summary>
      <returns>The imported <see cref="T:System.Xml.XmlNode" />.</returns>
      <param name="node">The node being imported. </param>
      <param name="deep">true to perform a deep clone; otherwise, false. </param>
      <exception cref="T:System.InvalidOperationException">Calling this method on a node type which cannot be imported. </exception>
    </member>
    <member name="P:System.Xml.XmlDocument.InnerText">
      <summary>Gets the concatenated values of the node and all its child nodes.</summary>
      <returns>The concatenated values of the node and all its child nodes.</returns>
      <exception cref="T:System.InvalidOperationException">Setting the value on the <see cref="P:System.Xml.XmlDocument.InnerText" /> property is not allowed.</exception>
    </member>
    <member name="P:System.Xml.XmlDocument.InnerXml">
      <summary>Gets or sets the markup representing the children of the current node.</summary>
      <returns>The markup of the children of the current node.</returns>
      <exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed. </exception>
    </member>
    <member name="P:System.Xml.XmlDocument.IsReadOnly">
      <summary>Gets a value indicating whether the current node is read-only.</summary>
      <returns>true if the current node is read-only; otherwise false. XmlDocument nodes always return false.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.Stream)">
      <summary>Loads the XML document from the specified stream.</summary>
      <param name="inStream">The stream containing the XML document to load. </param>
      <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, a <see cref="T:System.IO.FileNotFoundException" /> is raised. </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.IO.TextReader)">
      <summary>Loads the XML document from the specified <see cref="T:System.IO.TextReader" />.</summary>
      <param name="txtReader">The TextReader used to feed the XML data into the document. </param>
      <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, the document remains empty. </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.String)">
      <summary>Loads the XML document from the specified URL.</summary>
      <param name="filename">URL for the file containing the XML document to load. The URL can be either a local file or an HTTP URL (a Web address).</param>
      <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, a <see cref="T:System.IO.FileNotFoundException" /> is raised. </exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="filename" /> is a zero-length string, contains only white space, or contains one or more invalid characters as defined by <see cref="F:System.IO.Path.InvalidPathChars" />. </exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="filename" /> is null. </exception>
      <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </exception>
      <exception cref="T:System.IO.DirectoryNotFoundException">The specified path is invalid (for example, it is on an unmapped drive). </exception>
      <exception cref="T:System.IO.IOException">An I/O error occurred while opening the file. </exception>
      <exception cref="T:System.UnauthorizedAccessException">
        <paramref name="filename" /> specified a file that is read-only.-or- This operation is not supported on the current platform.-or- <paramref name="filename" /> specified a directory.-or- The caller does not have the required permission. </exception>
      <exception cref="T:System.IO.FileNotFoundException">The file specified in <paramref name="filename" /> was not found. </exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="filename" /> is in an invalid format. </exception>
      <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Load(System.Xml.XmlReader)">
      <summary>Loads the XML document from the specified <see cref="T:System.Xml.XmlReader" />.</summary>
      <param name="reader">The XmlReader used to feed the XML data into the document. </param>
      <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, the document remains empty. </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.LoadXml(System.String)">
      <summary>Loads the XML document from the specified string.</summary>
      <param name="xml">String containing the XML document to load. </param>
      <exception cref="T:System.Xml.XmlException">There is a load or parse error in the XML. In this case, the document remains empty. </exception>
    </member>
    <member name="P:System.Xml.XmlDocument.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For XmlDocument nodes, the local name is #document.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>For XmlDocument nodes, the name is #document.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.NameTable">
      <summary>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.</summary>
      <returns>An XmlNameTable enabling you to get the atomized version of a string within the document.</returns>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanged">
      <summary>Occurs when the <see cref="P:System.Xml.XmlNode.Value" /> of a node belonging to this document has been changed.</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeChanging">
      <summary>Occurs when the <see cref="P:System.Xml.XmlNode.Value" /> of a node belonging to this document is about to be changed.</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserted">
      <summary>Occurs when a node belonging to this document has been inserted into another node.</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeInserting">
      <summary>Occurs when a node belonging to this document is about to be inserted into another node.</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoved">
      <summary>Occurs when a node belonging to this document has been removed from its parent.</summary>
    </member>
    <member name="E:System.Xml.XmlDocument.NodeRemoving">
      <summary>Occurs when a node belonging to this document is about to be removed from the document.</summary>
    </member>
    <member name="P:System.Xml.XmlDocument.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>The node type. For XmlDocument nodes, this value is XmlNodeType.Document.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.OwnerDocument">
      <summary>Gets the <see cref="T:System.Xml.XmlDocument" /> to which the current node belongs.</summary>
      <returns>For XmlDocument nodes (<see cref="P:System.Xml.XmlDocument.NodeType" /> equals XmlNodeType.Document), this property always returns null.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.ParentNode">
      <summary>Gets the parent node of this node (for nodes that can have parents).</summary>
      <returns>Always returns null.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.PreserveWhitespace">
      <summary>Gets or sets a value indicating whether to preserve white space in element content.</summary>
      <returns>true to preserve white space; otherwise false. The default is false.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)">
      <summary>Creates an <see cref="T:System.Xml.XmlNode" /> object based on the information in the <see cref="T:System.Xml.XmlReader" />. The reader must be positioned on a node or attribute.</summary>
      <returns>The new XmlNode or null if no more nodes exist.</returns>
      <param name="reader">The XML source </param>
      <exception cref="T:System.NullReferenceException">The reader is positioned on a node type that does not translate to a valid DOM node (for example, EndElement or EndEntity). </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.Stream)">
      <summary>Saves the XML document to the specified stream.</summary>
      <param name="outStream">The stream to which you want to save. </param>
      <exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.IO.TextWriter)">
      <summary>Saves the XML document to the specified <see cref="T:System.IO.TextWriter" />.</summary>
      <param name="writer">The TextWriter to which you want to save. </param>
      <exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.String)">
      <summary>Saves the XML document to the specified file.</summary>
      <param name="filename">The location of the file where you want to save the document. </param>
      <exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Save(System.Xml.XmlWriter)">
      <summary>Saves the XML document to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
      <exception cref="T:System.Xml.XmlException">The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </exception>
    </member>
    <member name="P:System.Xml.XmlDocument.SchemaInfo">
      <summary>Returns the Post-Schema-Validation-Infoset (PSVI) of the node.</summary>
      <returns>The <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> object representing the PSVI of the node.</returns>
    </member>
    <member name="P:System.Xml.XmlDocument.Schemas">
      <summary>Gets or sets the <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object associated with this <see cref="T:System.Xml.XmlDocument" />.</summary>
      <returns>An <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object containing the XML Schema Definition Language (XSD) schemas associated with this <see cref="T:System.Xml.XmlDocument" />; otherwise, an empty <see cref="T:System.Xml.Schema.XmlSchemaSet" /> object.</returns>
    </member>
    <member name="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler)">
      <summary>Validates the <see cref="T:System.Xml.XmlDocument" /> against the XML Schema Definition Language (XSD) schemas contained in the <see cref="P:System.Xml.XmlDocument.Schemas" /> property.</summary>
      <param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler" /> object that receives information about schema validation warnings and errors.</param>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">A schema validation event occurred and no <see cref="T:System.Xml.Schema.ValidationEventHandler" /> object was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.Validate(System.Xml.Schema.ValidationEventHandler,System.Xml.XmlNode)">
      <summary>Validates the <see cref="T:System.Xml.XmlNode" /> object specified against the XML Schema Definition Language (XSD) schemas in the <see cref="P:System.Xml.XmlDocument.Schemas" /> property.</summary>
      <param name="validationEventHandler">The <see cref="T:System.Xml.Schema.ValidationEventHandler" /> object that receives information about schema validation warnings and errors.</param>
      <param name="nodeToValidate">The <see cref="T:System.Xml.XmlNode" /> object created from an <see cref="T:System.Xml.XmlDocument" /> to validate.</param>
      <exception cref="T:System.ArgumentException">The <see cref="T:System.Xml.XmlNode" /> object parameter was not created from an <see cref="T:System.Xml.XmlDocument" />.</exception>
      <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Xml.XmlNode" /> object parameter is not an element, attribute, document fragment, or the root node.</exception>
      <exception cref="T:System.Xml.Schema.XmlSchemaValidationException">A schema validation event occurred and no <see cref="T:System.Xml.Schema.ValidationEventHandler" /> object was specified.</exception>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the XmlDocument node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="xw">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the XmlDocument node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="P:System.Xml.XmlDocument.XmlResolver">
      <summary>Sets the <see cref="T:System.Xml.XmlResolver" /> to use for resolving external resources.</summary>
      <returns>The XmlResolver to use.In version 1.1 of the.NET Framework, the caller must be fully trusted in order to specify an XmlResolver.</returns>
      <exception cref="T:System.Xml.XmlException">This property is set to null and an external DTD or entity is encountered. </exception>
    </member>
    <member name="T:System.Xml.XmlDocumentFragment">
      <summary>Represents a lightweight object that is useful for tree insert operations.</summary>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.#ctor(System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlDocumentFragment" /> class.</summary>
      <param name="ownerDocument">The XML document that is the source of the fragment.</param>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. </param>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.InnerXml">
      <summary>Gets or sets the markup representing the children of this node.</summary>
      <returns>The markup of the children of this node.</returns>
      <exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed. </exception>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For XmlDocumentFragment nodes, the local name is #document-fragment.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>For XmlDocumentFragment, the name is #document-fragment.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>For XmlDocumentFragment nodes, this value is XmlNodeType.DocumentFragment.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.OwnerDocument">
      <summary>Gets the <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.</summary>
      <returns>The XmlDocument to which this node belongs.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentFragment.ParentNode">
      <summary>Gets the parent of this node (for nodes that can have parents).</summary>
      <returns>The parent of this node.For XmlDocumentFragment nodes, this property is always null.</returns>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlDocumentFragment.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlDocumentType">
      <summary>Represents the document type declaration.</summary>
    </member>
    <member name="M:System.Xml.XmlDocumentType.#ctor(System.String,System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlDocumentType" /> class.</summary>
      <param name="name">The qualified name; see the <see cref="P:System.Xml.XmlDocumentType.Name" /> property.</param>
      <param name="publicId">The public identifier; see the <see cref="P:System.Xml.XmlDocumentType.PublicId" /> property.</param>
      <param name="systemId">The system identifier; see the <see cref="P:System.Xml.XmlDocumentType.SystemId" /> property.</param>
      <param name="internalSubset">The DTD internal subset; see the <see cref="P:System.Xml.XmlDocumentType.InternalSubset" /> property.</param>
      <param name="doc">The parent document.</param>
    </member>
    <member name="M:System.Xml.XmlDocumentType.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. For document type nodes, the cloned node always includes the subtree, regardless of the parameter setting. </param>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Entities">
      <summary>Gets the collection of <see cref="T:System.Xml.XmlEntity" /> nodes declared in the document type declaration.</summary>
      <returns>An <see cref="T:System.Xml.XmlNamedNodeMap" /> containing the XmlEntity nodes. The returned XmlNamedNodeMap is read-only.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.InternalSubset">
      <summary>Gets the value of the document type definition (DTD) internal subset on the DOCTYPE declaration.</summary>
      <returns>The DTD internal subset on the DOCTYPE. If there is no DTD internal subset, String.Empty is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.IsReadOnly">
      <summary>Gets a value indicating whether the node is read-only.</summary>
      <returns>true if the node is read-only; otherwise false.Because DocumentType nodes are read-only, this property always returns true.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For DocumentType nodes, this property returns the name of the document type.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>For DocumentType nodes, this property returns the name of the document type.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>For DocumentType nodes, this value is XmlNodeType.DocumentType.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.Notations">
      <summary>Gets the collection of <see cref="T:System.Xml.XmlNotation" /> nodes present in the document type declaration.</summary>
      <returns>An <see cref="T:System.Xml.XmlNamedNodeMap" /> containing the XmlNotation nodes. The returned XmlNamedNodeMap is read-only.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.PublicId">
      <summary>Gets the value of the public identifier on the DOCTYPE declaration.</summary>
      <returns>The public identifier on the DOCTYPE. If there is no public identifier, null is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlDocumentType.SystemId">
      <summary>Gets the value of the system identifier on the DOCTYPE declaration.</summary>
      <returns>The system identifier on the DOCTYPE. If there is no system identifier, null is returned.</returns>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />. For XmlDocumentType nodes, this method has no effect.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlDocumentType.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlElement">
      <summary>Represents an element.</summary>
    </member>
    <member name="M:System.Xml.XmlElement.#ctor(System.String,System.String,System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlElement" /> class.</summary>
      <param name="prefix">The namespace prefix; see the <see cref="P:System.Xml.XmlElement.Prefix" /> property.</param>
      <param name="localName">The local name; see the <see cref="P:System.Xml.XmlElement.LocalName" /> property.</param>
      <param name="namespaceURI">The namespace URI; see the <see cref="P:System.Xml.XmlElement.NamespaceURI" /> property.</param>
      <param name="doc">The parent XML document.</param>
    </member>
    <member name="P:System.Xml.XmlElement.Attributes">
      <summary>Gets an <see cref="T:System.Xml.XmlAttributeCollection" /> containing the list of attributes for this node.</summary>
      <returns>
        <see cref="T:System.Xml.XmlAttributeCollection" /> containing the list of attributes for this node.</returns>
    </member>
    <member name="M:System.Xml.XmlElement.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself (and its attributes if the node is an XmlElement). </param>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String)">
      <summary>Returns the value for the attribute with the specified name.</summary>
      <returns>The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.</returns>
      <param name="name">The name of the attribute to retrieve. This is a qualified name. It is matched against the Name property of the matching node. </param>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttribute(System.String,System.String)">
      <summary>Returns the value for the attribute with the specified local name and namespace URI.</summary>
      <returns>The value of the specified attribute. An empty string is returned if a matching attribute is not found or if the attribute does not have a specified or default value.</returns>
      <param name="localName">The local name of the attribute to retrieve. </param>
      <param name="namespaceURI">The namespace URI of the attribute to retrieve. </param>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String)">
      <summary>Returns the XmlAttribute with the specified name.</summary>
      <returns>The specified XmlAttribute or null if a matching attribute was not found.</returns>
      <param name="name">The name of the attribute to retrieve. This is a qualified name. It is matched against the Name property of the matching node. </param>
    </member>
    <member name="M:System.Xml.XmlElement.GetAttributeNode(System.String,System.String)">
      <summary>Returns the <see cref="T:System.Xml.XmlAttribute" /> with the specified local name and namespace URI.</summary>
      <returns>The specified XmlAttribute or null if a matching attribute was not found.</returns>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String)">
      <summary>Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant elements that match the specified <see cref="P:System.Xml.XmlElement.Name" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes.</returns>
      <param name="name">The name tag to match. This is a qualified name. It is matched against the Name property of the matching node. The asterisk (*) is a special value that matches all tags. </param>
    </member>
    <member name="M:System.Xml.XmlElement.GetElementsByTagName(System.String,System.String)">
      <summary>Returns an <see cref="T:System.Xml.XmlNodeList" /> containing a list of all descendant elements that match the specified <see cref="P:System.Xml.XmlElement.LocalName" /> and <see cref="P:System.Xml.XmlElement.NamespaceURI" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlNodeList" /> containing a list of all matching nodes.</returns>
      <param name="localName">The local name to match. The asterisk (*) is a special value that matches all tags. </param>
      <param name="namespaceURI">The namespace URI to match. </param>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String)">
      <summary>Determines whether the current node has an attribute with the specified name.</summary>
      <returns>true if the current node has the specified attribute; otherwise, false.</returns>
      <param name="name">The name of the attribute to find. This is a qualified name. It is matched against the Name property of the matching node. </param>
    </member>
    <member name="M:System.Xml.XmlElement.HasAttribute(System.String,System.String)">
      <summary>Determines whether the current node has an attribute with the specified local name and namespace URI.</summary>
      <returns>true if the current node has the specified attribute; otherwise, false.</returns>
      <param name="localName">The local name of the attribute to find. </param>
      <param name="namespaceURI">The namespace URI of the attribute to find. </param>
    </member>
    <member name="P:System.Xml.XmlElement.HasAttributes">
      <summary>Gets a boolean value indicating whether the current node has any attributes.</summary>
      <returns>true if the current node has attributes; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.InnerText">
      <summary>Gets or sets the concatenated values of the node and all its children.</summary>
      <returns>The concatenated values of the node and all its children.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.InnerXml">
      <summary>Gets or sets the markup representing just the children of this node.</summary>
      <returns>The markup of the children of this node.</returns>
      <exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed. </exception>
    </member>
    <member name="P:System.Xml.XmlElement.IsEmpty">
      <summary>Gets or sets the tag format of the element.</summary>
      <returns>Returns true if the element is to be serialized in the short tag format "&lt;item/&gt;"; false for the long format "&lt;item&gt;&lt;/item&gt;".When setting this property, if set to true, the children of the element are removed and the element is serialized in the short tag format. If set to false, the value of the property is changed (regardless of whether or not the element has content); if the element is empty, it is serialized in the long format.This property is a Microsoft extension to the Document Object Model (DOM).</returns>
    </member>
    <member name="P:System.Xml.XmlElement.LocalName">
      <summary>Gets the local name of the current node.</summary>
      <returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.Name">
      <summary>Gets the qualified name of the node.</summary>
      <returns>The qualified name of the node. For XmlElement nodes, this is the tag name of the element.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NamespaceURI">
      <summary>Gets the namespace URI of this node.</summary>
      <returns>The namespace URI of this node. If there is no namespace URI, this property returns String.Empty.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NextSibling">
      <summary>Gets the <see cref="T:System.Xml.XmlNode" /> immediately following this element.</summary>
      <returns>The XmlNode immediately following this element.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.NodeType">
      <summary>Gets the type of the current node.</summary>
      <returns>The node type. For XmlElement nodes, this value is XmlNodeType.Element.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.OwnerDocument">
      <summary>Gets the <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.</summary>
      <returns>The XmlDocument to which this element belongs.</returns>
    </member>
    <member name="P:System.Xml.XmlElement.ParentNode"></member>
    <member name="P:System.Xml.XmlElement.Prefix">
      <summary>Gets or sets the namespace prefix of this node.</summary>
      <returns>The namespace prefix of this node. If there is no prefix, this property returns String.Empty.</returns>
      <exception cref="T:System.ArgumentException">This node is read-only </exception>
      <exception cref="T:System.Xml.XmlException">The specified prefix contains an invalid character.The specified prefix is malformed.The namespaceURI of this node is null.The specified prefix is "xml" and the namespaceURI of this node is different from http://www.w3.org/XML/1998/namespace. </exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAll">
      <summary>Removes all specified attributes and children of the current node. Default attributes are not removed.</summary>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAllAttributes">
      <summary>Removes all specified attributes from the element. Default attributes are not removed.</summary>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String)">
      <summary>Removes an attribute by name.</summary>
      <param name="name">The name of the attribute to remove.This is a qualified name. It is matched against the Name property of the matching node. </param>
      <exception cref="T:System.ArgumentException">The node is read-only. </exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttribute(System.String,System.String)">
      <summary>Removes an attribute with the specified local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced).</summary>
      <param name="localName">The local name of the attribute to remove. </param>
      <param name="namespaceURI">The namespace URI of the attribute to remove. </param>
      <exception cref="T:System.ArgumentException">The node is read-only. </exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeAt(System.Int32)">
      <summary>Removes the attribute node with the specified index from the element. (If the removed attribute has a default value, it is immediately replaced).</summary>
      <returns>The attribute node removed or null if there is no node at the given index.</returns>
      <param name="i">The index of the node to remove. The first node has index 0. </param>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.String,System.String)">
      <summary>Removes the <see cref="T:System.Xml.XmlAttribute" /> specified by the local name and namespace URI. (If the removed attribute has a default value, it is immediately replaced).</summary>
      <returns>The removed XmlAttribute or null if the XmlElement does not have a matching attribute node.</returns>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
      <exception cref="T:System.ArgumentException">This node is read-only. </exception>
    </member>
    <member name="M:System.Xml.XmlElement.RemoveAttributeNode(System.Xml.XmlAttribute)">
      <summary>Removes the specified <see cref="T:System.Xml.XmlAttribute" />.</summary>
      <returns>The removed XmlAttribute or null if <paramref name="oldAttr" /> is not an attribute node of the XmlElement.</returns>
      <param name="oldAttr">The XmlAttribute node to remove. If the removed attribute has a default value, it is immediately replaced. </param>
      <exception cref="T:System.ArgumentException">This node is read-only. </exception>
    </member>
    <member name="P:System.Xml.XmlElement.SchemaInfo">
      <summary>Gets the post schema validation infoset that has been assigned to this node as a result of schema validation.</summary>
      <returns>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> object containing the post schema validation infoset of this node.</returns>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String)">
      <summary>Sets the value of the attribute with the specified name.</summary>
      <param name="name">The name of the attribute to create or alter. This is a qualified name. If the name contains a colon it is parsed into prefix and local name components. </param>
      <param name="value">The value to set for the attribute. </param>
      <exception cref="T:System.Xml.XmlException">The specified name contains an invalid character. </exception>
      <exception cref="T:System.ArgumentException">The node is read-only. </exception>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttribute(System.String,System.String,System.String)">
      <summary>Sets the value of the attribute with the specified local name and namespace URI.</summary>
      <returns>The attribute value.</returns>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
      <param name="value">The value to set for the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.String,System.String)">
      <summary>Adds the specified <see cref="T:System.Xml.XmlAttribute" />.</summary>
      <returns>The XmlAttribute to add.</returns>
      <param name="localName">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlElement.SetAttributeNode(System.Xml.XmlAttribute)">
      <summary>Adds the specified <see cref="T:System.Xml.XmlAttribute" />.</summary>
      <returns>If the attribute replaces an existing attribute with the same name, the old XmlAttribute is returned; otherwise, null is returned.</returns>
      <param name="newAttr">The XmlAttribute node to add to the attribute collection for this element. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="newAttr" /> was created from a different document than the one that created this node. Or this node is read-only. </exception>
      <exception cref="T:System.InvalidOperationException">The <paramref name="newAttr" /> is already an attribute of another XmlElement object. You must explicitly clone XmlAttribute nodes to re-use them in other XmlElement objects. </exception>
    </member>
    <member name="M:System.Xml.XmlElement.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlElement.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the current node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlEntity">
      <summary>Represents an entity declaration, such as &lt;!ENTITY... &gt;.</summary>
    </member>
    <member name="P:System.Xml.XmlEntity.BaseURI">
      <summary>Gets the base Uniform Resource Identifier (URI) of the current node.</summary>
      <returns>The location from which the node was loaded.</returns>
    </member>
    <member name="M:System.Xml.XmlEntity.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node. Entity nodes cannot be cloned. Calling this method on an <see cref="T:System.Xml.XmlEntity" /> object throws an exception.</summary>
      <returns>Returns a copy of the <see cref="T:System.Xml.XmlNode" /> from which the method is called.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself.</param>
      <exception cref="T:System.InvalidOperationException">Entity nodes cannot be cloned. Calling this method on an <see cref="T:System.Xml.XmlEntity" /> object throws an exception.</exception>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerText">
      <summary>Gets the concatenated values of the entity node and all its children.</summary>
      <returns>The concatenated values of the node and all its children.</returns>
      <exception cref="T:System.InvalidOperationException">Attempting to set the property. </exception>
    </member>
    <member name="P:System.Xml.XmlEntity.InnerXml">
      <summary>Gets the markup representing the children of this node.</summary>
      <returns>For XmlEntity nodes, String.Empty is returned.</returns>
      <exception cref="T:System.InvalidOperationException">Attempting to set the property. </exception>
    </member>
    <member name="P:System.Xml.XmlEntity.IsReadOnly">
      <summary>Gets a value indicating whether the node is read-only.</summary>
      <returns>true if the node is read-only; otherwise false.Because XmlEntity nodes are read-only, this property always returns true.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.LocalName">
      <summary>Gets the name of the node without the namespace prefix.</summary>
      <returns>For XmlEntity nodes, this property returns the name of the entity.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.Name">
      <summary>Gets the name of the node.</summary>
      <returns>The name of the entity.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.NodeType">
      <summary>Gets the type of the node.</summary>
      <returns>The node type. For XmlEntity nodes, the value is XmlNodeType.Entity.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.NotationName">
      <summary>Gets the name of the optional NDATA attribute on the entity declaration.</summary>
      <returns>The name of the NDATA attribute. If there is no NDATA, null is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.OuterXml">
      <summary>Gets the markup representing this node and all its children.</summary>
      <returns>For XmlEntity nodes, String.Empty is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.PublicId">
      <summary>Gets the value of the public identifier on the entity declaration.</summary>
      <returns>The public identifier on the entity. If there is no public identifier, null is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlEntity.SystemId">
      <summary>Gets the value of the system identifier on the entity declaration.</summary>
      <returns>The system identifier on the entity. If there is no system identifier, null is returned.</returns>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />. For XmlEntity nodes, this method has no effect.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlEntity.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />. For XmlEntity nodes, this method has no effect.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlEntityReference">
      <summary>Represents an entity reference node.</summary>
    </member>
    <member name="M:System.Xml.XmlEntityReference.#ctor(System.String,System.Xml.XmlDocument)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlEntityReference" /> class.</summary>
      <param name="name">The name of the entity reference; see the <see cref="P:System.Xml.XmlEntityReference.Name" /> property.</param>
      <param name="doc">The parent XML document.</param>
    </member>
    <member name="P:System.Xml.XmlEntityReference.BaseURI">
      <summary>Gets the base Uniform Resource Identifier (URI) of the current node.</summary>
      <returns>The location from which the node was loaded.</returns>
    </member>
    <member name="M:System.Xml.XmlEntityReference.CloneNode(System.Boolean)">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. For XmlEntityReference nodes, this method always returns an entity reference node with no children. The replacement text is set when the node is inserted into a parent. </param>
    </member>
    <member name="P:System.Xml.XmlEntityReference.IsReadOnly">
      <summary>Gets a value indicating whether the node is read-only.</summary>
      <returns>true if the node is read-only; otherwise false.Because XmlEntityReference nodes are read-only, this property always returns true.</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.LocalName">
      <summary>Gets the local name of the node.</summary>
      <returns>For XmlEntityReference nodes, this property returns the name of the entity referenced.</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Name">
      <summary>Gets the name of the node.</summary>
      <returns>The name of the entity referenced.</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.NodeType">
      <summary>Gets the type of the node.</summary>
      <returns>The node type. For XmlEntityReference nodes, the value is XmlNodeType.EntityReference.</returns>
    </member>
    <member name="P:System.Xml.XmlEntityReference.Value">
      <summary>Gets or sets the value of the node.</summary>
      <returns>The value of the node. For XmlEntityReference nodes, this property returns null.</returns>
      <exception cref="T:System.ArgumentException">Node is read-only. </exception>
      <exception cref="T:System.InvalidOperationException">Setting the property. </exception>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteContentTo(System.Xml.XmlWriter)">
      <summary>Saves all the children of the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlEntityReference.WriteTo(System.Xml.XmlWriter)">
      <summary>Saves the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlException">
      <summary>Returns detailed information about the last exception.</summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor">
      <summary>Initializes a new instance of the XmlException class.</summary>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initializes a new instance of the XmlException class using the information in the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> and <see cref="T:System.Runtime.Serialization.StreamingContext" /> objects.</summary>
      <param name="info">The SerializationInfo object containing all the properties of an XmlException. </param>
      <param name="context">The StreamingContext object containing the context information. </param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String)">
      <summary>Initializes a new instance of the XmlException class with a specified error message.</summary>
      <param name="message">The error description. </param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception)">
      <summary>Initializes a new instance of the XmlException class.</summary>
      <param name="message">The description of the error condition. </param>
      <param name="innerException">The <see cref="T:System.Exception" /> that threw the XmlException, if any. This value can be null. </param>
    </member>
    <member name="M:System.Xml.XmlException.#ctor(System.String,System.Exception,System.Int32,System.Int32)">
      <summary>Initializes a new instance of the XmlException class with the specified message, inner exception, line number, and line position.</summary>
      <param name="message">The error description. </param>
      <param name="innerException">The exception that is the cause of the current exception. This value can be null. </param>
      <param name="lineNumber">The line number indicating where the error occurred. </param>
      <param name="linePosition">The line position indicating where the error occurred. </param>
    </member>
    <member name="M:System.Xml.XmlException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Streams all the XmlException properties into the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> class for the given <see cref="T:System.Runtime.Serialization.StreamingContext" />.</summary>
      <param name="info">The SerializationInfo object. </param>
      <param name="context">The StreamingContext object. </param>
    </member>
    <member name="P:System.Xml.XmlException.LineNumber">
      <summary>Gets the line number indicating where the error occurred.</summary>
      <returns>The line number indicating where the error occurred.</returns>
    </member>
    <member name="P:System.Xml.XmlException.LinePosition">
      <summary>Gets the line position indicating where the error occurred.</summary>
      <returns>The line position indicating where the error occurred.</returns>
    </member>
    <member name="P:System.Xml.XmlException.Message">
      <summary>Gets a message describing the current exception.</summary>
      <returns>The error message that explains the reason for the exception.</returns>
    </member>
    <member name="P:System.Xml.XmlException.SourceUri">
      <summary>Gets the location of the XML file.</summary>
      <returns>The source URI for the XML data. If there is no source URI, this property returns null.</returns>
    </member>
    <member name="T:System.Xml.XmlImplementation">
      <summary>Defines the context for a set of <see cref="T:System.Xml.XmlDocument" /> objects.</summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlImplementation" /> class.</summary>
    </member>
    <member name="M:System.Xml.XmlImplementation.#ctor(System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlImplementation" /> class with the <see cref="T:System.Xml.XmlNameTable" /> specified.</summary>
      <param name="nt">An <see cref="T:System.Xml.XmlNameTable" /> object.</param>
    </member>
    <member name="M:System.Xml.XmlImplementation.CreateDocument">
      <summary>Creates a new <see cref="T:System.Xml.XmlDocument" />.</summary>
      <returns>The new XmlDocument object.</returns>
    </member>
    <member name="M:System.Xml.XmlImplementation.HasFeature(System.String,System.String)">
      <summary>Tests if the Document Object Model (DOM) implementation implements a specific feature.</summary>
      <returns>true if the feature is implemented in the specified version; otherwise, false.The following table shows the combinations that cause HasFeature to return true.strFeature strVersion XML 1.0 XML 2.0 </returns>
      <param name="strFeature">The package name of the feature to test. This name is not case-sensitive. </param>
      <param name="strVersion">This is the version number of the package name to test. If the version is not specified (null), supporting any version of the feature causes the method to return true. </param>
    </member>
    <member name="T:System.Xml.XmlLinkedNode">
      <summary>Gets the node immediately preceding or following this node.</summary>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.NextSibling">
      <summary>Gets the node immediately following this node.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> immediately following this node or null if one does not exist.</returns>
    </member>
    <member name="P:System.Xml.XmlLinkedNode.PreviousSibling">
      <summary>Gets the node immediately preceding this node.</summary>
      <returns>The preceding <see cref="T:System.Xml.XmlNode" /> or null if one does not exist.</returns>
    </member>
    <member name="T:System.Xml.XmlNamedNodeMap">
      <summary>Represents a collection of nodes that can be accessed by name or index.</summary>
    </member>
    <member name="P:System.Xml.XmlNamedNodeMap.Count">
      <summary>Gets the number of nodes in the XmlNamedNodeMap.</summary>
      <returns>The number of nodes.</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetEnumerator">
      <summary>Provides support for the "foreach" style iteration over the collection of nodes in the XmlNamedNodeMap.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)">
      <summary>Retrieves an <see cref="T:System.Xml.XmlNode" /> specified by name.</summary>
      <returns>An XmlNode with the specified name or null if a matching node is not found.</returns>
      <param name="name">The qualified name of the node to retrieve. It is matched against the <see cref="P:System.Xml.XmlNode.Name" /> property of the matching node. </param>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)">
      <summary>Retrieves a node with the matching <see cref="P:System.Xml.XmlNode.LocalName" /> and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlNode" /> with the matching local name and namespace URI or null if a matching node was not found.</returns>
      <param name="localName">The local name of the node to retrieve. </param>
      <param name="namespaceURI">The namespace Uniform Resource Identifier (URI) of the node to retrieve. </param>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.Item(System.Int32)">
      <summary>Retrieves the node at the specified index in the XmlNamedNodeMap.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> at the specified index. If <paramref name="index" /> is less than 0 or greater than or equal to the <see cref="P:System.Xml.XmlNamedNodeMap.Count" /> property, null is returned.</returns>
      <param name="index">The index position of the node to retrieve from the XmlNamedNodeMap. The index is zero-based; therefore, the index of the first node is 0 and the index of the last node is <see cref="P:System.Xml.XmlNamedNodeMap.Count" /> -1. </param>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)">
      <summary>Removes the node from the XmlNamedNodeMap.</summary>
      <returns>The XmlNode removed from this XmlNamedNodeMap or null if a matching node was not found.</returns>
      <param name="name">The qualified name of the node to remove. The name is matched against the <see cref="P:System.Xml.XmlNode.Name" /> property of the matching node. </param>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)">
      <summary>Removes a node with the matching <see cref="P:System.Xml.XmlNode.LocalName" /> and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> removed or null if a matching node was not found.</returns>
      <param name="localName">The local name of the node to remove. </param>
      <param name="namespaceURI">The namespace URI of the node to remove. </param>
    </member>
    <member name="M:System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)">
      <summary>Adds an <see cref="T:System.Xml.XmlNode" /> using its <see cref="P:System.Xml.XmlNode.Name" /> property </summary>
      <returns>If the <paramref name="node" /> replaces an existing node with the same name, the old node is returned; otherwise, null is returned.</returns>
      <param name="node">An XmlNode to store in the XmlNamedNodeMap. If a node with that name is already present in the map, it is replaced by the new one. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="node" /> was created from a different <see cref="T:System.Xml.XmlDocument" /> than the one that created the XmlNamedNodeMap; or the XmlNamedNodeMap is read-only. </exception>
    </member>
    <member name="T:System.Xml.XmlNamespaceManager">
      <summary>Resolves, adds, and removes namespaces to a collection and provides scope management for these namespaces. </summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.#ctor(System.Xml.XmlNameTable)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlNamespaceManager" /> class with the specified <see cref="T:System.Xml.XmlNameTable" />.</summary>
      <param name="nameTable">The <see cref="T:System.Xml.XmlNameTable" /> to use. </param>
      <exception cref="T:System.NullReferenceException">null is passed to the constructor </exception>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.AddNamespace(System.String,System.String)">
      <summary>Adds the given namespace to the collection.</summary>
      <param name="prefix">The prefix to associate with the namespace being added. Use String.Empty to add a default namespace.NoteIf the <see cref="T:System.Xml.XmlNamespaceManager" /> will be used for resolving namespaces in an XML Path Language (XPath) expression, a prefix must be specified. If an XPath expression does not include a prefix, it is assumed that the namespace Uniform Resource Identifier (URI) is the empty namespace. For more information about XPath expressions and the <see cref="T:System.Xml.XmlNamespaceManager" />, refer to the <see cref="M:System.Xml.XmlNode.SelectNodes(System.String)" /> and <see cref="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)" /> methods.</param>
      <param name="uri">The namespace to add. </param>
      <exception cref="T:System.ArgumentException">The value for <paramref name="prefix" /> is "xml" or "xmlns". </exception>
      <exception cref="T:System.ArgumentNullException">The value for <paramref name="prefix" /> or <paramref name="uri" /> is null. </exception>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.DefaultNamespace">
      <summary>Gets the namespace URI for the default namespace.</summary>
      <returns>Returns the namespace URI for the default namespace, or String.Empty if there is no default namespace.</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetEnumerator">
      <summary>Returns an enumerator to use to iterate through the namespaces in the <see cref="T:System.Xml.XmlNamespaceManager" />.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" /> containing the prefixes stored by the <see cref="T:System.Xml.XmlNamespaceManager" />.</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.GetNamespacesInScope(System.Xml.XmlNamespaceScope)">
      <summary>Gets a collection of namespace names keyed by prefix which can be used to enumerate the namespaces currently in scope.</summary>
      <returns>A <see cref="T:System.Collections.Specialized.StringDictionary" /> object containing a collection of namespace and prefix pairs currently in scope.</returns>
      <param name="scope">An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</param>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.HasNamespace(System.String)">
      <summary>Gets a value indicating whether the supplied prefix has a namespace defined for the current pushed scope.</summary>
      <returns>true if there is a namespace defined; otherwise, false.</returns>
      <param name="prefix">The prefix of the namespace you want to find. </param>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupNamespace(System.String)">
      <summary>Gets the namespace URI for the specified prefix.</summary>
      <returns>Returns the namespace URI for <paramref name="prefix" /> or null if there is no mapped namespace. The returned string is atomized.For more information on atomized strings, see <see cref="T:System.Xml.XmlNameTable" />.</returns>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass String.Empty. </param>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.LookupPrefix(System.String)">
      <summary>Finds the prefix declared for the given namespace URI.</summary>
      <returns>The matching prefix. If there is no mapped prefix, the method returns String.Empty. If a null value is supplied, then null is returned.</returns>
      <param name="uri">The namespace to resolve for the prefix. </param>
    </member>
    <member name="P:System.Xml.XmlNamespaceManager.NameTable">
      <summary>Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this object.</summary>
      <returns>The <see cref="T:System.Xml.XmlNameTable" /> used by this object.</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PopScope">
      <summary>Pops a namespace scope off the stack.</summary>
      <returns>true if there are namespace scopes left on the stack; false if there are no more namespaces to pop.</returns>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.PushScope">
      <summary>Pushes a namespace scope onto the stack.</summary>
    </member>
    <member name="M:System.Xml.XmlNamespaceManager.RemoveNamespace(System.String,System.String)">
      <summary>Removes the given namespace for the given prefix.</summary>
      <param name="prefix">The prefix for the namespace </param>
      <param name="uri">The namespace to remove for the given prefix. The namespace removed is from the current namespace scope. Namespaces outside the current scope are ignored. </param>
      <exception cref="T:System.ArgumentNullException">The value of <paramref name="prefix" /> or <paramref name="uri" /> is null. </exception>
    </member>
    <member name="T:System.Xml.XmlNamespaceScope">
      <summary>Defines the namespace scope.</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.All">
      <summary>All namespaces defined in the scope of the current node. This includes the xmlns:xml namespace which is always declared implicitly. The order of the namespaces returned is not defined.</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.ExcludeXml">
      <summary>All namespaces defined in the scope of the current node, excluding the xmlns:xml namespace, which is always declared implicitly. The order of the namespaces returned is not defined.</summary>
    </member>
    <member name="F:System.Xml.XmlNamespaceScope.Local">
      <summary>All namespaces that are defined locally at the current node.</summary>
    </member>
    <member name="T:System.Xml.XmlNameTable">
      <summary>Table of atomized string objects.</summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlNameTable" /> class. </summary>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, atomizes the specified string and adds it to the XmlNameTable.</summary>
      <returns>The new atomized string or the existing one if it already exists. If length is zero, String.Empty is returned.</returns>
      <param name="array">The character array containing the name to add. </param>
      <param name="offset">Zero-based index into the array specifying the first character of the name. </param>
      <param name="length">The number of characters in the name. </param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="offset" />-or- <paramref name="offset" /> &gt;= <paramref name="array" />.Length -or- <paramref name="length" /> &gt; <paramref name="array" />.Length The above conditions do not cause an exception to be thrown if <paramref name="length" /> =0. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> &lt; 0. </exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Add(System.String)">
      <summary>When overridden in a derived class, atomizes the specified string and adds it to the XmlNameTable.</summary>
      <returns>The new atomized string or the existing one if it already exists.</returns>
      <param name="array">The name to add. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.Char[],System.Int32,System.Int32)">
      <summary>When overridden in a derived class, gets the atomized string containing the same characters as the specified range of characters in the given array.</summary>
      <returns>The atomized string or null if the string has not already been atomized. If <paramref name="length" /> is zero, String.Empty is returned.</returns>
      <param name="array">The character array containing the name to look up. </param>
      <param name="offset">The zero-based index into the array specifying the first character of the name. </param>
      <param name="length">The number of characters in the name. </param>
      <exception cref="T:System.IndexOutOfRangeException">0 &gt; <paramref name="offset" />-or- <paramref name="offset" /> &gt;= <paramref name="array" />.Length -or- <paramref name="length" /> &gt; <paramref name="array" />.Length The above conditions do not cause an exception to be thrown if <paramref name="length" /> =0. </exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> &lt; 0. </exception>
    </member>
    <member name="M:System.Xml.XmlNameTable.Get(System.String)">
      <summary>When overridden in a derived class, gets the atomized string containing the same value as the specified string.</summary>
      <returns>The atomized string or null if the string has not already been atomized.</returns>
      <param name="array">The name to look up. </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> is null. </exception>
    </member>
    <member name="T:System.Xml.XmlNode">
      <summary>Represents a single node in the XML document. </summary>
    </member>
    <member name="M:System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)">
      <summary>Adds the specified node to the end of the list of child nodes, of this node.</summary>
      <returns>The node added.</returns>
      <param name="newChild">The node to add. All the contents of the node to be added are moved into the specified location. </param>
      <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.The <paramref name="newChild" /> is an ancestor of this node. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.This node is read-only. </exception>
    </member>
    <member name="P:System.Xml.XmlNode.Attributes">
      <summary>Gets an <see cref="T:System.Xml.XmlAttributeCollection" /> containing the attributes of this node.</summary>
      <returns>An XmlAttributeCollection containing the attributes of the node.If the node is of type XmlNodeType.Element, the attributes of the node are returned. Otherwise, this property returns null.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.BaseURI">
      <summary>Gets the base URI of the current node.</summary>
      <returns>The location from which the node was loaded or String.Empty if the node has no base URI.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.ChildNodes">
      <summary>Gets all the child nodes of the node.</summary>
      <returns>An <see cref="T:System.Xml.XmlNodeList" /> that contains all the child nodes of the node.If there are no child nodes, this property returns an empty <see cref="T:System.Xml.XmlNodeList" />.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.Clone">
      <summary>Creates a duplicate of this node.</summary>
      <returns>The cloned node.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.CloneNode(System.Boolean)">
      <summary>When overridden in a derived class, creates a duplicate of the node.</summary>
      <returns>The cloned node.</returns>
      <param name="deep">true to recursively clone the subtree under the specified node; false to clone only the node itself. </param>
      <exception cref="T:System.InvalidOperationException">Calling this method on a node type that cannot be cloned. </exception>
    </member>
    <member name="M:System.Xml.XmlNode.CreateNavigator">
      <summary>Creates an <see cref="T:System.Xml.XPath.XPathNavigator" /> for navigating this object.</summary>
      <returns>An XPathNavigator object. The XPathNavigator is positioned on the node from which the method was called. It is not positioned on the root of the document.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.FirstChild">
      <summary>Gets the first child of the node.</summary>
      <returns>The first child of the node. If there is no such node, null is returned.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetEnumerator">
      <summary>Provides support for the for each style iteration over the nodes in the XmlNode.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)">
      <summary>Looks up the closest xmlns declaration for the given prefix that is in scope for the current node and returns the namespace URI in the declaration.</summary>
      <returns>The namespace URI of the specified prefix.</returns>
      <param name="prefix">Prefix whose namespace URI you want to find. </param>
    </member>
    <member name="M:System.Xml.XmlNode.GetPrefixOfNamespace(System.String)">
      <summary>Looks up the closest xmlns declaration for the given namespace URI that is in scope for the current node and returns the prefix defined in that declaration.</summary>
      <returns>The prefix for the specified namespace URI.</returns>
      <param name="namespaceURI">Namespace URI whose prefix you want to find. </param>
    </member>
    <member name="P:System.Xml.XmlNode.HasChildNodes">
      <summary>Gets a value indicating whether this node has any child nodes.</summary>
      <returns>true if the node has child nodes; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.InnerText">
      <summary>Gets or sets the concatenated values of the node and all its child nodes.</summary>
      <returns>The concatenated values of the node and all its child nodes.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.InnerXml">
      <summary>Gets or sets the markup representing only the child nodes of this node.</summary>
      <returns>The markup of the child nodes of this node.NoteInnerXml does not return default attributes.</returns>
      <exception cref="T:System.InvalidOperationException">Setting this property on a node that cannot have child nodes. </exception>
      <exception cref="T:System.Xml.XmlException">The XML specified when setting this property is not well-formed. </exception>
    </member>
    <member name="M:System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>Inserts the specified node immediately after the specified reference node.</summary>
      <returns>The node being inserted.</returns>
      <param name="newChild">The XmlNode to insert. </param>
      <param name="refChild">The XmlNode that is the reference node. The <paramref name="newNode" /> is placed after the <paramref name="refNode" />. </param>
      <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.The <paramref name="newChild" /> is an ancestor of this node. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.The <paramref name="refChild" /> is not a child of this node.This node is read-only. </exception>
    </member>
    <member name="M:System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>Inserts the specified node immediately before the specified reference node.</summary>
      <returns>The node being inserted.</returns>
      <param name="newChild">The XmlNode to insert. </param>
      <param name="refChild">The XmlNode that is the reference node. The <paramref name="newChild" /> is placed before this node. </param>
      <exception cref="T:System.InvalidOperationException">The current node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.The <paramref name="newChild" /> is an ancestor of this node. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.The <paramref name="refChild" /> is not a child of this node.This node is read-only. </exception>
    </member>
    <member name="P:System.Xml.XmlNode.IsReadOnly">
      <summary>Gets a value indicating whether the node is read-only.</summary>
      <returns>true if the node is read-only; otherwise false.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String)">
      <summary>Gets the first child element with the specified <see cref="P:System.Xml.XmlNode.Name" />.</summary>
      <returns>The first <see cref="T:System.Xml.XmlElement" /> that matches the specified name.</returns>
      <param name="name">The qualified name of the element to retrieve. </param>
    </member>
    <member name="P:System.Xml.XmlNode.Item(System.String,System.String)">
      <summary>Gets the first child element with the specified <see cref="P:System.Xml.XmlNode.LocalName" /> and <see cref="P:System.Xml.XmlNode.NamespaceURI" />.</summary>
      <returns>The first <see cref="T:System.Xml.XmlElement" /> with the matching <paramref name="localname" /> and <paramref name="ns" />.</returns>
      <param name="localname">The local name of the element. </param>
      <param name="ns">The namespace URI of the element. </param>
    </member>
    <member name="P:System.Xml.XmlNode.LastChild">
      <summary>Gets the last child of the node.</summary>
      <returns>The last child of the node. If there is no such node, null is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.LocalName">
      <summary>When overridden in a derived class, gets the local name of the node.</summary>
      <returns>The name of the node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.The name returned is dependent on the <see cref="P:System.Xml.XmlNode.NodeType" /> of the node: Type Name Attribute The local name of the attribute. CDATA #cdata-section Comment #comment Document #document DocumentFragment #document-fragment DocumentType The document type name. Element The local name of the element. Entity The name of the entity. EntityReference The name of the entity referenced. Notation The notation name. ProcessingInstruction The target of the processing instruction. Text #text Whitespace #whitespace SignificantWhitespace #significant-whitespace XmlDeclaration #xml-declaration </returns>
    </member>
    <member name="P:System.Xml.XmlNode.Name">
      <summary>When overridden in a derived class, gets the qualified name of the node.</summary>
      <returns>The qualified name of the node. The name returned is dependent on the <see cref="P:System.Xml.XmlNode.NodeType" /> of the node: Type Name Attribute The qualified name of the attribute. CDATA #cdata-section Comment #comment Document #document DocumentFragment #document-fragment DocumentType The document type name. Element The qualified name of the element. Entity The name of the entity. EntityReference The name of the entity referenced. Notation The notation name. ProcessingInstruction The target of the processing instruction. Text #text Whitespace #whitespace SignificantWhitespace #significant-whitespace XmlDeclaration #xml-declaration </returns>
    </member>
    <member name="P:System.Xml.XmlNode.NamespaceURI">
      <summary>Gets the namespace URI of this node.</summary>
      <returns>The namespace URI of this node. If there is no namespace URI, this property returns String.Empty.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.NextSibling">
      <summary>Gets the node immediately following this node.</summary>
      <returns>The next XmlNode. If there is no next node, null is returned.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.NodeType">
      <summary>When overridden in a derived class, gets the type of the current node.</summary>
      <returns>One of the <see cref="T:System.Xml.XmlNodeType" /> values.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.Normalize">
      <summary>Puts all XmlText nodes in the full depth of the sub-tree underneath this XmlNode into a "normal" form where only markup (that is, tags, comments, processing instructions, CDATA sections, and entity references) separates XmlText nodes, that is, there are no adjacent XmlText nodes.</summary>
    </member>
    <member name="P:System.Xml.XmlNode.OuterXml">
      <summary>Gets the markup representing this node and all its child nodes.</summary>
      <returns>The markup containing this node and all its child nodes.NoteOuterXml does not return default attributes.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.OwnerDocument">
      <summary>Gets the <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.</summary>
      <returns>The <see cref="T:System.Xml.XmlDocument" /> to which this node belongs.If the node is an <see cref="T:System.Xml.XmlDocument" /> (NodeType equals XmlNodeType.Document), this property returns null.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.ParentNode">
      <summary>Gets the parent of this node (for nodes that can have parents).</summary>
      <returns>The XmlNode that is the parent of the current node. If a node has just been created and not yet added to the tree, or if it has been removed from the tree, the parent is null. For all other nodes, the value returned depends on the <see cref="P:System.Xml.XmlNode.NodeType" /> of the node. The following table describes the possible return values for the ParentNode property.NodeType Return Value of ParentNode Attribute, Document, DocumentFragment, Entity, Notation Returns null; these nodes do not have parents. CDATA Returns the element or entity reference containing the CDATA section. Comment Returns the element, entity reference, document type, or document containing the comment. DocumentType Returns the document node. Element Returns the parent node of the element. If the element is the root node in the tree, the parent is the document node. EntityReference Returns the element, attribute, or entity reference containing the entity reference. ProcessingInstruction Returns the document, element, document type, or entity reference containing the processing instruction. Text Returns the parent element, attribute, or entity reference containing the text node. </returns>
    </member>
    <member name="P:System.Xml.XmlNode.Prefix">
      <summary>Gets or sets the namespace prefix of this node.</summary>
      <returns>The namespace prefix of this node. For example, Prefix is bk for the element &lt;bk:book&gt;. If there is no prefix, this property returns String.Empty.</returns>
      <exception cref="T:System.ArgumentException">This node is read-only. </exception>
      <exception cref="T:System.Xml.XmlException">The specified prefix contains an invalid character.The specified prefix is malformed.The specified prefix is "xml" and the namespaceURI of this node is different from "http://www.w3.org/XML/1998/namespace".This node is an attribute and the specified prefix is "xmlns" and the namespaceURI of this node is different from "http://www.w3.org/2000/xmlns/ ".This node is an attribute and the qualifiedName of this node is "xmlns". </exception>
    </member>
    <member name="M:System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)">
      <summary>Adds the specified node to the beginning of the list of child nodes for this node.</summary>
      <returns>The node added.</returns>
      <param name="newChild">The node to add. All the contents of the node to be added are moved into the specified location.</param>
      <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.The <paramref name="newChild" /> is an ancestor of this node. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.This node is read-only. </exception>
    </member>
    <member name="P:System.Xml.XmlNode.PreviousSibling">
      <summary>Gets the node immediately preceding this node.</summary>
      <returns>The preceding XmlNode. If there is no preceding node, null is returned.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveAll">
      <summary>Removes all the child nodes and/or attributes of the current node.</summary>
    </member>
    <member name="M:System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)">
      <summary>Removes specified child node.</summary>
      <returns>The node removed.</returns>
      <param name="oldChild">The node being removed. </param>
      <exception cref="T:System.ArgumentException">The <paramref name="oldChild" /> is not a child of this node. Or this node is read-only. </exception>
    </member>
    <member name="M:System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)">
      <summary>Replaces the child node <paramref name="oldChild" /> with <paramref name="newChild" /> node.</summary>
      <returns>The node replaced.</returns>
      <param name="newChild">The new node to put in the child list. </param>
      <param name="oldChild">The node being replaced in the list. </param>
      <exception cref="T:System.InvalidOperationException">This node is of a type that does not allow child nodes of the type of the <paramref name="newChild" /> node.The <paramref name="newChild" /> is an ancestor of this node. </exception>
      <exception cref="T:System.ArgumentException">The <paramref name="newChild" /> was created from a different document than the one that created this node.This node is read-only.The <paramref name="oldChild" /> is not a child of this node. </exception>
    </member>
    <member name="P:System.Xml.XmlNode.SchemaInfo">
      <summary>Gets the post schema validation infoset that has been assigned to this node as a result of schema validation.</summary>
      <returns>An <see cref="T:System.Xml.Schema.IXmlSchemaInfo" /> object containing the post schema validation infoset of this node</returns>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String)">
      <summary>Selects a list of nodes matching the XPath expression.</summary>
      <returns>An <see cref="T:System.Xml.XmlNodeList" /> containing a collection of nodes matching the XPath query. The XmlNodeList should not be expected to be connected "live" to the XML document. That is, changes that appear in the XML document may not appear in the XmlNodeList, and vice versa.</returns>
      <param name="xpath">The XPath expression. </param>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression contains a prefix. </exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectNodes(System.String,System.Xml.XmlNamespaceManager)">
      <summary>Selects a list of nodes matching the XPath expression. Any prefixes found in the XPath expression are resolved using the supplied <see cref="T:System.Xml.XmlNamespaceManager" />.</summary>
      <returns>An <see cref="T:System.Xml.XmlNodeList" /> containing a collection of nodes matching the XPath query. The XmlNodeList should not be expected to be connected "live" to the XML document. That is, changes that appear in the XML document may not appear in the XmlNodeList, and vice versa.</returns>
      <param name="xpath">The XPath expression. </param>
      <param name="nsmgr">An <see cref="T:System.Xml.XmlNamespaceManager" /> to use for resolving namespaces for prefixes in the XPath expression. </param>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression contains a prefix which is not defined in the XmlNamespaceManager. </exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String)">
      <summary>Selects the first XmlNode that matches the XPath expression.</summary>
      <returns>The first XmlNode that matches the XPath query or null if no matching node is found. The XmlNode should not be expected to be connected "live" to the XML document. That is, changes that appear in the XML document may not appear in the XmlNode, and vice versa.</returns>
      <param name="xpath">The XPath expression. </param>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression contains a prefix. </exception>
    </member>
    <member name="M:System.Xml.XmlNode.SelectSingleNode(System.String,System.Xml.XmlNamespaceManager)">
      <summary>Selects the first XmlNode that matches the XPath expression. Any prefixes found in the XPath expression are resolved using the supplied <see cref="T:System.Xml.XmlNamespaceManager" />.</summary>
      <returns>The first XmlNode that matches the XPath query or null if no matching node is found. The XmlNode should not be expected to be connected "live" to the XML document. That is, changes that appear in the XML document may not appear in the XmlNode, and vice versa.</returns>
      <param name="xpath">The XPath expression. </param>
      <param name="nsmgr">An <see cref="T:System.Xml.XmlNamespaceManager" /> to use for resolving namespaces for prefixes in the XPath expression. </param>
      <exception cref="T:System.Xml.XPath.XPathException">The XPath expression contains a prefix which is not defined in the XmlNamespaceManager. </exception>
    </member>
    <member name="M:System.Xml.XmlNode.Supports(System.String,System.String)">
      <summary>Test if the DOM implementation implements a specific feature.</summary>
      <returns>true if the feature is implemented in the specified version; otherwise, false. The following table describes the combinations that return true.Feature Version XML 1.0 XML 2.0 </returns>
      <param name="feature">The package name of the feature to test. This name is not case-sensitive. </param>
      <param name="version">This is the version number of the package name to test. If the version is not specified (null), supporting any version of the feature causes the method to return true. </param>
    </member>
    <member name="M:System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator">
      <summary>For a description of this member, see <see cref="M:System.Xml.XmlNode.GetEnumerator" />.</summary>
      <returns>Returns an enumerator for the collection.</returns>
    </member>
    <member name="M:System.Xml.XmlNode.System#ICloneable#Clone">
      <summary>For a description of this member, see <see cref="M:System.Xml.XmlNode.Clone" />.</summary>
      <returns>Returns a copy of the node from which it is called.</returns>
    </member>
    <member name="P:System.Xml.XmlNode.Value">
      <summary>Gets or sets the value of the node.</summary>
      <returns>The value returned depends on the <see cref="P:System.Xml.XmlNode.NodeType" /> of the node: Type Value Attribute The value of the attribute. CDATASection The content of the CDATA Section. Comment The content of the comment. Document null. DocumentFragment null. DocumentType null. Element null. You can use the <see cref="P:System.Xml.XmlElement.InnerText" /> or <see cref="P:System.Xml.XmlElement.InnerXml" /> properties to access the value of the element node. Entity null. EntityReference null. Notation null. ProcessingInstruction The entire content excluding the target. Text The content of the text node. SignificantWhitespace The white space characters. White space can consist of one or more space characters, carriage returns, line feeds, or tabs. Whitespace The white space characters. White space can consist of one or more space characters, carriage returns, line feeds, or tabs. XmlDeclaration The content of the declaration (that is, everything between &lt;?xml and ?&gt;). </returns>
      <exception cref="T:System.ArgumentException">Setting the value of a node that is read-only. </exception>
      <exception cref="T:System.InvalidOperationException">Setting the value of a node that is not supposed to have a value (for example, an Element node). </exception>
    </member>
    <member name="M:System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)">
      <summary>When overridden in a derived class, saves all the child nodes of the node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)">
      <summary>When overridden in a derived class, saves the current node to the specified <see cref="T:System.Xml.XmlWriter" />.</summary>
      <param name="w">The XmlWriter to which you want to save. </param>
    </member>
    <member name="T:System.Xml.XmlNodeChangedAction">
      <summary>Specifies the type of node change.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Insert">
      <summary>A node is being inserted in the tree.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Remove">
      <summary>A node is being removed from the tree.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeChangedAction.Change">
      <summary>A node value is being changed.</summary>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventArgs">
      <summary>Provides data for the <see cref="E:System.Xml.XmlDocument.NodeChanged" />, <see cref="E:System.Xml.XmlDocument.NodeChanging" />, <see cref="E:System.Xml.XmlDocument.NodeInserted" />, <see cref="E:System.Xml.XmlDocument.NodeInserting" />, <see cref="E:System.Xml.XmlDocument.NodeRemoved" /> and <see cref="E:System.Xml.XmlDocument.NodeRemoving" /> events.</summary>
    </member>
    <member name="M:System.Xml.XmlNodeChangedEventArgs.#ctor(System.Xml.XmlNode,System.Xml.XmlNode,System.Xml.XmlNode,System.String,System.String,System.Xml.XmlNodeChangedAction)">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlNodeChangedEventArgs" /> class.</summary>
      <param name="node">The <see cref="T:System.Xml.XmlNode" /> that generated the event.</param>
      <param name="oldParent">The old parent <see cref="T:System.Xml.XmlNode" /> of the <see cref="T:System.Xml.XmlNode" /> that generated the event.</param>
      <param name="newParent">The new parent <see cref="T:System.Xml.XmlNode" /> of the <see cref="T:System.Xml.XmlNode" /> that generated the event.</param>
      <param name="oldValue">The old value of the <see cref="T:System.Xml.XmlNode" /> that generated the event.</param>
      <param name="newValue">The new value of the <see cref="T:System.Xml.XmlNode" /> that generated the event.</param>
      <param name="action">The <see cref="T:System.Xml.XmlNodeChangedAction" />.</param>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Action">
      <summary>Gets a value indicating what type of node change event is occurring.</summary>
      <returns>An XmlNodeChangedAction value describing the node change event.XmlNodeChangedAction Value Description Insert A node has been or will be inserted. Remove A node has been or will be removed. Change A node has been or will be changed. NoteThe Action value does not differentiate between when the event occurred (before or after). You can create separate event handlers to handle both instances.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.NewParent">
      <summary>Gets the value of the <see cref="P:System.Xml.XmlNode.ParentNode" /> after the operation completes.</summary>
      <returns>The value of the ParentNode after the operation completes. This property returns null if the node is being removed.NoteFor attribute nodes this property returns the <see cref="P:System.Xml.XmlAttribute.OwnerElement" />.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.NewValue">
      <summary>Gets the new value of the node.</summary>
      <returns>The new value of the node. This property returns null if the node is neither an attribute nor a text node, or if the node is being removed.If called in a <see cref="E:System.Xml.XmlDocument.NodeChanging" /> event, NewValue returns the value of the node if the change is successful. If called in a <see cref="E:System.Xml.XmlDocument.NodeChanged" /> event, NewValue returns the current value of the node.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.Node">
      <summary>Gets the <see cref="T:System.Xml.XmlNode" /> that is being added, removed or changed.</summary>
      <returns>The XmlNode that is being added, removed or changed; this property never returns null.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.OldParent">
      <summary>Gets the value of the <see cref="P:System.Xml.XmlNode.ParentNode" /> before the operation began.</summary>
      <returns>The value of the ParentNode before the operation began. This property returns null if the node did not have a parent.NoteFor attribute nodes this property returns the <see cref="P:System.Xml.XmlAttribute.OwnerElement" />.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeChangedEventArgs.OldValue">
      <summary>Gets the original value of the node.</summary>
      <returns>The original value of the node. This property returns null if the node is neither an attribute nor a text node, or if the node is being inserted.If called in a <see cref="E:System.Xml.XmlDocument.NodeChanging" /> event, OldValue returns the current value of the node that will be replaced if the change is successful. If called in a <see cref="E:System.Xml.XmlDocument.NodeChanged" /> event, OldValue returns the value of node prior to the change.</returns>
    </member>
    <member name="T:System.Xml.XmlNodeChangedEventHandler">
      <summary>Represents the method that handles <see cref="E:System.Xml.XmlDocument.NodeChanged" />, <see cref="E:System.Xml.XmlDocument.NodeChanging" />, <see cref="E:System.Xml.XmlDocument.NodeInserted" />, <see cref="E:System.Xml.XmlDocument.NodeInserting" />, <see cref="E:System.Xml.XmlDocument.NodeRemoved" /> and <see cref="E:System.Xml.XmlDocument.NodeRemoving" /> events.</summary>
      <param name="sender">The source of the event. </param>
      <param name="e">An <see cref="T:System.Xml.XmlNodeChangedEventArgs" /> containing the event data. </param>
    </member>
    <member name="T:System.Xml.XmlNodeList">
      <summary>Represents an ordered collection of nodes.</summary>
    </member>
    <member name="M:System.Xml.XmlNodeList.#ctor">
      <summary>Initializes a new instance of the <see cref="T:System.Xml.XmlNodeList" /> class.</summary>
    </member>
    <member name="P:System.Xml.XmlNodeList.Count">
      <summary>Gets the number of nodes in the XmlNodeList.</summary>
      <returns>The number of nodes.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.GetEnumerator">
      <summary>Provides a simple "foreach" style iteration over the collection of nodes in the XmlNodeList.</summary>
      <returns>An <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeList.Item(System.Int32)">
      <summary>Retrieves a node at the given index.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> in the collection. If <paramref name="index" /> is greater than or equal to the number of nodes in the list, this returns null.</returns>
      <param name="index">Zero-based index into the list of nodes. </param>
    </member>
    <member name="P:System.Xml.XmlNodeList.ItemOf(System.Int32)">
      <summary>Retrieves a node at the given index.</summary>
      <returns>The <see cref="T:System.Xml.XmlNode" /> in the collection. If index is greater than or equal to the number of nodes in the list, this returns null.</returns>
      <param name="i">Zero-based index into the list of nodes. </param>
    </member>
    <member name="T:System.Xml.XmlNodeOrder">
      <summary>Describes the document order of a node compared to a second node.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Before">
      <summary>The current node of this navigator is before the current node of the supplied navigator.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.After">
      <summary>The current node of this navigator is after the current node of the supplied navigator.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Same">
      <summary>The two navigators are positioned on the same node.</summary>
    </member>
    <member name="F:System.Xml.XmlNodeOrder.Unknown">
      <summary>The node positions cannot be determined in document order, relative to each other. This could occur if the two nodes reside in different trees.</summary>
    </member>
    <member name="T:System.Xml.XmlNodeReader">
      <summary>Represents a reader that provides fast, non-cached forward only access to XML data in an <see cref="T:System.Xml.XmlNode" />.</summary>
    </member>
    <member name="M:System.Xml.XmlNodeReader.#ctor(System.Xml.XmlNode)">
      <summary>Creates an instance of the XmlNodeReader class using the specified <see cref="T:System.Xml.XmlNode" />.</summary>
      <param name="node">The XmlNode you want to read. </param>
    </member>
    <member name="P:System.Xml.XmlNodeReader.AttributeCount">
      <summary>Gets the number of attributes on the current node.</summary>
      <returns>The number of attributes on the current node. This number includes default attributes.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.BaseURI">
      <summary>Gets the base URI of the current node.</summary>
      <returns>The base URI of the current node.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.CanReadBinaryContent">
      <summary>Gets a value indicating whether the <see cref="T:System.Xml.XmlNodeReader" /> implements the binary content read methods.</summary>
      <returns>true if the binary content read methods are implemented; otherwise false. The <see cref="T:System.Xml.XmlNodeReader" /> class always returns true.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.CanResolveEntity">
      <summary>Gets a value indicating whether this reader can parse and resolve entities.</summary>
      <returns>true if the reader can parse and resolve entities; otherwise, false. XmlNodeReader always returns true.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.Close">
      <summary>Changes the <see cref="P:System.Xml.XmlNodeReader.ReadState" /> to Closed.</summary>
    </member>
    <member name="P:System.Xml.XmlNodeReader.Depth">
      <summary>Gets the depth of the current node in the XML document.</summary>
      <returns>The depth of the current node in the XML document.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.EOF">
      <summary>Gets a value indicating whether the reader is positioned at the end of the stream.</summary>
      <returns>true if the reader is positioned at the end of the stream; otherwise, false.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.Int32)">
      <summary>Gets the value of the attribute with the specified index.</summary>
      <returns>The value of the specified attribute.</returns>
      <param name="attributeIndex">The index of the attribute. The index is zero-based. (The first attribute has index 0.) </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlNodeReader.AttributeCount" />. </exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String)">
      <summary>Gets the value of the attribute with the specified name.</summary>
      <returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
      <param name="name">The qualified name of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlNodeReader.GetAttribute(System.String,System.String)">
      <summary>Gets the value of the attribute with the specified local name and namespace URI.</summary>
      <returns>The value of the specified attribute. If the attribute is not found, null is returned.</returns>
      <param name="name">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasAttributes">
      <summary>Gets a value indicating whether the current node has any attributes.</summary>
      <returns>true if the current node has attributes; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.HasValue">
      <summary>Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlNodeReader.Value" />.</summary>
      <returns>true if the node on which the reader is currently positioned can have a Value; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsDefault">
      <summary>Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the document type definition (DTD) or schema.</summary>
      <returns>true if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; false if the attribute value was explicitly set.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.IsEmptyElement">
      <summary>Gets a value indicating whether the current node is an empty element (for example, &lt;MyElement/&gt;).</summary>
      <returns>true if the current node is an element (<see cref="P:System.Xml.XmlNodeReader.NodeType" /> equals XmlNodeType.Element) and it ends with /&gt;; otherwise, false.</returns>
    </member>
    <member name="P:System.Xml.XmlNodeReader.LocalName">
      <summary>Gets the local name of the current node.</summary>
      <returns>The name of the current node with the prefix removed. For example, LocalName is book for the element &lt;bk:book&gt;.For node types that do not have a name (like Text, Comment, and so on), this property returns String.Empty.</returns>
    </member>
    <member name="M:System.Xml.XmlNodeReader.LookupNamespace(System.String)">
      <summary>Resolves a namespace prefix in the current element's scope.</summary>
      <returns>The namespace URI to which the prefix maps or null if no matching prefix is found.</returns>
      <param name="prefix">The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. This string does not have to be atomized. </param>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.Int32)">
      <summary>Moves to the attribute with the specified index.</summary>
      <param name="attributeIndex">The index of the attribute. </param>
      <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlReader.AttributeCount" />. </exception>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String)">
      <summary>Moves to the attribute with the specified name.</summary>
      <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
      <param name="name">The qualified name of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToAttribute(System.String,System.String)">
      <summary>Moves to the attribute with the specified local name and namespace URI.</summary>
      <returns>true if the attribute is found; otherwise, false. If false, the reader's position does not change.</returns>
      <param name="name">The local name of the attribute. </param>
      <param name="namespaceURI">The namespace URI of the attribute. </param>
    </member>
    <member name="M:System.Xml.XmlNodeReader.MoveToElement">
      <summary>Moves to the element that contains the current attribute node.</summary>
      <returns>true if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); false if the reader is not positioned on an attribute (the position of the reader 